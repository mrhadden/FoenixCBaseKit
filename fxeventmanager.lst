  Thu Dec  3 2020 22:25                                                Page 1


                     ***************************************
                     **      WDC 65C816 Macro Assembler   **
                     **                                   **
                     **     Version 3.49.1- Feb  6 2006    **
                     ***************************************

     1                        ;:ts=8
     2             00000001   R0	equ	1
     3             00000005   R1	equ	5
     4             00000009   R2	equ	9
     5             0000000D   R3	equ	13
     6                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.c",0
     7                        ;
     8                        ;#include "fxos.h"
     9                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
    10                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
    11                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stddef.h",0
    12                        	.line	88
    13                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",43
    14                        	.stag	fake1_,32,1
    15                        	.member	quot,0,5,8,16
    16                        	.member	rem,16,5,8,16
    17                        	.eos
    18                        	.stag	fake2_,64,2
    19                        	.member	quot,0,7,8,32
    20                        	.member	rem,32,7,8,32
    21                        	.eos
    22                        	.stag	int_sqrt,32,3
    23                        	.member	sqrt,0,16,8,16
    24                        	.member	frac,16,16,8,16
    25                        	.eos
    26                        	.line	205
    27                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",4
    28                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
    29                        	.line	134
    30                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",5
    31                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    ctype.h",0
    32                        	.line	103
    33                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",6
    34                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
    35                        	.stag	_fx_bytebits,8,4
    36                        	.member	b7,0,14,17,1
    37                        	.member	b6,1,14,17,1
    38                        	.member	b5,2,14,17,1
    39                        	.member	b4,3,14,17,1
    40                        	.member	b3,4,14,17,1
    41                        	.member	b2,5,14,17,1
  Thu Dec  3 2020 22:25                                                Page 2


    42                        	.member	b1,6,14,17,1
    43                        	.member	b0,7,14,17,1
    44                        	.eos
    45                        	.stag	_fx_node,384,5
    46                        	.member	type,0,14,8,8
    47                        	.member	Reserved0,8,14,8,8
    48                        	.member	data,16,129,8,32
    49                        	.member	last,48,138,8,32,5
    50                        	.member	next,80,138,8,32,5
    51                        	.member	name,112,110,8,0,32
    52                        	.member	Reserved1,368,16,8,16
    53                        	.eos
    54                        	.stag	_fx_nodelist,96,6
    55                        	.member	listhead,0,138,8,32,5
    56                        	.member	listData,32,129,8,32
    57                        	.member	deallocator,64,641,8,32
    58                        	.eos
    59                        	.stag	_fx_queue,80,7
    60                        	.member	count,0,5,8,16
    61                        	.member	front,16,138,8,32,5
    62                        	.member	rear,48,138,8,32,5
    63                        	.eos
    64                        	.stag	fake8_,32,8
    65                        	.member	subsystem,0,14,8,8
    66                        	.member	level,8,14,8,8
    67                        	.member	error,16,16,8,16
    68                        	.eos
    69                        	.stag	_fx_process_signal,16,9
    70                        	.member	cbSize,0,16,8,16
    71                        	.eos
    72                        	.stag	_fx_semaphore,16,10
    73                        	.member	reserved,0,5,8,16
    74                        	.eos
    75                        	.stag	_fx_fileBlock,552,11
    76                        	.member	openCount,0,16,8,16
    77                        	.member	lockCount,16,16,8,16
    78                        	.member	dirty,32,14,8,8
    79                        	.member	fileBuffer,40,110,8,0,64
    80                        	.eos
    81                        	.stag	_fx_irq_data,48,12
    82                        	.member	line,0,5,8,16
    83                        	.member	keycode,16,142,8,32
    84                        	.eos
    85                        	.stag	_task,48,13
    86                        	.member	SPL,0,14,8,8
    87                        	.member	SPH,8,14,8,8
    88                        	.member	pstack,16,142,8,32
    89                        	.eos
    90                        	.stag	_task_stack,32,14
    91                        	.member	SS,0,142,8,32
    92                        	.eos
    93                        	.stag	int_regs,104,15
    94                        	.member	PB,0,14,8,8
    95                        	.member	PH,8,14,8,8
    96                        	.member	PL,16,14,8,8
    97                        	.member	PP,24,14,8,8
    98                        	.member	DB,32,14,8,8
    99                        	.member	DH,40,14,8,8
  Thu Dec  3 2020 22:25                                                Page 3


   100                        	.member	DL,48,14,8,8
   101                        	.member	AH,56,14,8,8
   102                        	.member	AL,64,14,8,8
   103                        	.member	XH,72,14,8,8
   104                        	.member	XL,80,14,8,8
   105                        	.member	YH,88,14,8,8
   106                        	.member	YL,96,14,8,8
   107                        	.eos
   108                        	.stag	_fx_eventMessage,304,16
   109                        	.member	src,0,18,8,32
   110                        	.member	dest,32,18,8,32
   111                        	.member	type,64,16,8,16
   112                        	.member	hwnd,80,129,8,32
   113                        	.member	pheap,112,129,8,32
   114                        	.member	msgTime,144,18,8,32
   115                        	.member	data,176,110,8,0,16
   116                        	.eos
   117                        	.stag	_fx_cmdMessage,304,17
   118                        	.member	src,0,18,8,32
   119                        	.member	dest,32,18,8,32
   120                        	.member	type,64,16,8,16
   121                        	.member	hwnd,80,129,8,32
   122                        	.member	pheap,112,129,8,32
   123                        	.member	msgTime,144,18,8,32
   124                        	.member	cmdCId,176,16,8,16
   125                        	.member	cmdMId,192,16,8,16
   126                        	.member	parameter1,208,18,8,32
   127                        	.member	parameter2,240,18,8,32
   128                        	.member	parameter3,272,18,8,32
   129                        	.eos
   130                        	.stag	_fx_console_ctl,448,18
   131                        	.member	maxCols,0,5,8,16
   132                        	.member	maxRows,16,5,8,16
   133                        	.member	curX,32,5,8,16
   134                        	.member	curY,48,5,8,16
   135                        	.member	fgColor,64,5,8,16
   136                        	.member	bgColor,80,5,8,16
   137                        	.member	mode,96,14,8,8
   138                        	.member	kbBuffer,104,101,8,0,16
   139                        	.member	screenBuffer,360,142,8,32
   140                        	.member	desktopMode,392,14,8,8
   141                        	.member	lastMouseButton,400,5,8,16
   142                        	.member	lastMouseX,416,5,8,16
   143                        	.member	lastMouseY,432,5,8,16
   144                        	.eos
   145                        	.stag	_fx_desktop_ctl,392,19
   146                        	.member	desktopMode,0,14,8,8
   147                        	.member	cursorCtl,8,5,8,16
   148                        	.member	cursorState,24,5,8,16
   149                        	.member	backgroundColor,40,5,8,16
   150                        	.member	foregroundColor,56,5,8,16
   151                        	.member	menuMode,72,5,8,16
   152                        	.member	lastMouseButton,88,5,8,16
   153                        	.member	lastMouseX,104,5,8,16
   154                        	.member	lastMouseY,120,5,8,16
   155                        	.member	currentDiskName,136,142,8,32
   156                        	.member	diskNodes,168,129,8,32
   157                        	.member	titleNodes,200,129,8,32
  Thu Dec  3 2020 22:25                                                Page 4


   158                        	.member	menuNodes,232,129,8,32
   159                        	.member	iconNodes,264,129,8,32
   160                        	.member	windowNodes,296,129,8,32
   161                        	.member	fontNodes,328,129,8,32
   162                        	.member	wndProc,360,138,8,32,6
   163                        	.eos
   164                        	.stag	_fx_process,800,20
   165                        	.member	cbSize,0,5,8,16
   166                        	.member	procId,16,18,8,32
   167                        	.member	parentId,48,18,8,32
   168                        	.member	ctx,80,129,8,32
   169                        	.member	userId,112,16,8,16
   170                        	.member	status,128,16,8,16
   171                        	.member	foregroundActive,144,14,8,8
   172                        	.member	tls,152,1121,8,32,8
   173                        	.member	commandLine,408,142,8,32
   174                        	.member	semaphores,440,138,8,32,6
   175                        	.member	fileHandles,472,138,8,32,6
   176                        	.member	pathList,504,138,8,32,6
   177                        	.member	resources,536,138,8,32,6
   178                        	.member	timerAware,568,14,8,8
   179                        	.member	timerTicks,576,112,8,0,2
   180                        	.member	timerTickCount,608,112,8,0,2
   181                        	.member	kernelError,640,10,8,32,8
   182                        	.member	consoleCtl,672,138,8,32,18
   183                        	.member	desktopCtl,704,138,8,32,19
   184                        	.member	execProc,736,641,8,32
   185                        	.member	startupArgs,768,129,8,32
   186                        	.eos
   187                        	.stag	_fxProcessMessage,112,21
   188                        	.member	src,0,18,8,32
   189                        	.member	dest,32,18,8,32
   190                        	.member	type,64,16,8,16
   191                        	.member	processInfo,80,138,8,32,20
   192                        	.eos
   193                        	.stag	_fx_property,384,22
   194                        	.member	name,0,110,8,0,16
   195                        	.member	value,128,110,8,0,32
   196                        	.eos
   197                        	.utag	_24bitPointer,32,23
   198                        	.member	address,0,142,11,32
   199                        	.member	bytes,0,110,11,0,4
   200                        	.eos
   201                        	.stag	_PointStruct,32,24
   202                        	.member	x,0,5,8,16
   203                        	.member	y,16,5,8,16
   204                        	.eos
   205                        	.stag	_RectStruct,64,25
   206                        	.member	x,0,5,8,16
   207                        	.member	y,16,5,8,16
   208                        	.member	width,32,5,8,16
   209                        	.member	height,48,5,8,16
   210                        	.eos
   211                        	.stag	_k_WindowClass,256,26
   212                        	.member	cbSize,0,16,8,16
   213                        	.member	style,16,16,8,16
   214                        	.member	pWndProc,32,654,8,32
   215                        	.member	hInstance,64,129,8,32
  Thu Dec  3 2020 22:25                                                Page 5


   216                        	.member	hIcon,96,129,8,32
   217                        	.member	hCursor,128,129,8,32
   218                        	.member	hbrBackground,160,129,8,32
   219                        	.member	lpszMenuName,192,142,8,32
   220                        	.member	lpszClassName,224,142,8,32
   221                        	.eos
   222                        	.stag	_ClickableRect,88,27
   223                        	.member	area,0,10,8,64,25
   224                        	.member	z,64,5,8,16
   225                        	.member	enabled,80,14,8,8
   226                        	.eos
   227                        	.stag	_NCClickableRect,88,28
   228                        	.member	area,0,10,8,64,25
   229                        	.member	msgType,64,16,8,16
   230                        	.member	enabled,80,14,8,8
   231                        	.eos
   232                        	.stag	_DragData,136,29
   233                        	.member	area,0,10,8,64,25
   234                        	.member	xoffset,64,5,8,16
   235                        	.member	yoffset,80,5,8,16
   236                        	.member	msgType,96,16,8,16
   237                        	.member	isDrag,112,14,8,8
   238                        	.member	canDrag,120,14,8,8
   239                        	.member	canDrop,128,14,8,8
   240                        	.eos
   241                        	.stag	_k_WindowStruct,2808,30
   242                        	.member	cbSize,0,16,8,16
   243                        	.member	style,16,18,8,32
   244                        	.member	win_id,48,5,8,16
   245                        	.member	win_x,64,5,8,16
   246                        	.member	win_y,80,5,8,16
   247                        	.member	win_width,96,5,8,16
   248                        	.member	win_height,112,5,8,16
   249                        	.member	wndRect,128,10,8,64,25
   250                        	.member	clientRect,192,10,8,64,25
   251                        	.member	nonclientGadgets,256,106,8,0,28,16
   252                        	.member	clickable,1664,129,8,32
   253                        	.member	win_title,1696,110,8,0,32
   254                        	.member	Reserved0,1952,16,8,16
   255                        	.member	win_class,1968,110,8,0,16
   256                        	.member	win_class_name,2096,110,8,0,32
   257                        	.member	nBitmapLayer,2352,16,8,16
   258                        	.member	procid,2368,18,8,32
   259                        	.member	pWndClass,2400,138,8,32,26
   260                        	.member	pParentWindow,2432,129,8,32
   261                        	.member	hMenu,2464,129,8,32
   262                        	.member	pChildWindows,2496,138,8,32,6
   263                        	.member	pChildHitList,2528,138,8,32,6
   264                        	.member	isVisible,2560,14,8,8
   265                        	.member	windowData,2568,129,8,32
   266                        	.member	clientData,2600,1121,8,32,6
   267                        	.member	isClosed,2792,14,8,8
   268                        	.member	isClosing,2800,14,8,8
   269                        	.eos
   270                        	.stag	_k_WindowStructEx,2704,31
   271                        	.member	cbSize,0,16,8,16
   272                        	.member	style,16,18,8,32
   273                        	.member	win_id,48,5,8,16
  Thu Dec  3 2020 22:25                                                Page 6


   274                        	.member	win_x,64,5,8,16
   275                        	.member	win_y,80,5,8,16
   276                        	.member	win_width,96,5,8,16
   277                        	.member	win_height,112,5,8,16
   278                        	.member	wndRect,128,10,8,64,25
   279                        	.member	clientRect,192,10,8,64,25
   280                        	.member	nonclientGadgets,256,106,8,0,28,16
   281                        	.member	clickable,1664,129,8,32
   282                        	.member	win_title,1696,110,8,0,32
   283                        	.member	Reserved0,1952,16,8,16
   284                        	.member	win_class,1968,110,8,0,16
   285                        	.member	nBitmapLayer,2096,16,8,16
   286                        	.member	procid,2112,18,8,32
   287                        	.member	pWndClass,2144,138,8,32,26
   288                        	.member	pParentWindow,2176,129,8,32
   289                        	.member	hMenu,2208,129,8,32
   290                        	.member	pChildWindows,2240,138,8,32,6
   291                        	.member	pChildHitList,2272,138,8,32,6
   292                        	.member	isVisible,2304,14,8,8
   293                        	.member	windowData,2312,129,8,32
   294                        	.member	clientData,2344,1121,8,32,4
   295                        	.member	isClosed,2472,14,8,8
   296                        	.member	hWnd,2480,129,8,32
   297                        	.member	localRect,2512,10,8,64,25
   298                        	.member	globalRect,2576,10,8,64,25
   299                        	.member	clientOffsetRect,2640,10,8,64,25
   300                        	.eos
   301                        	.stag	_FontMetric,32,32
   302                        	.member	width,0,5,8,16
   303                        	.member	height,16,5,8,16
   304                        	.eos
   305                        	.stag	_ctl_Textbox,112,33
   306                        	.member	win_id,0,5,8,16
   307                        	.member	win_x,16,5,8,16
   308                        	.member	win_y,32,5,8,16
   309                        	.member	win_width,48,5,8,16
   310                        	.member	win_height,64,5,8,16
   311                        	.member	content,80,1166,8,32
   312                        	.eos
   313                        	.stag	_MenuStruct,248,34
   314                        	.member	cx,0,5,8,16
   315                        	.member	cy,16,5,8,16
   316                        	.member	width,32,5,8,16
   317                        	.member	height,48,5,8,16
   318                        	.member	fcolor,64,14,8,8
   319                        	.member	bcolor,72,14,8,8
   320                        	.member	chromeLeft,80,14,8,8
   321                        	.member	chromeRight1,88,14,8,8
   322                        	.member	chromeRight2,96,14,8,8
   323                        	.member	itemId,104,16,8,16
   324                        	.member	pCaption,120,142,8,32
   325                        	.member	subMenus,152,138,8,32,6
   326                        	.member	pBackground,184,129,8,32
   327                        	.member	hWndOwner,216,129,8,32
   328                        	.eos
   329                        	.stag	fake35_,112,35
   330                        	.member	menuId,0,16,8,16
   331                        	.member	caption,16,142,8,32
  Thu Dec  3 2020 22:25                                                Page 7


   332                        	.member	rect,48,10,8,64,25
   333                        	.eos
   334                        	.stag	fake36_,3568,36
   335                        	.member	pParent,0,138,8,32,30
   336                        	.member	rect,32,10,8,64,25
   337                        	.member	captions,96,1134,8,32,24
   338                        	.member	chrome,864,110,8,0,24
   339                        	.member	ids,1056,112,8,0,24
   340                        	.member	clickable,1440,106,8,0,27,24
   341                        	.member	selected,3552,16,8,16
   342                        	.eos
   343                        	.stag	_fx_button_t,80,37
   344                        	.member	pCaption,0,142,8,32
   345                        	.member	data,32,129,8,32
   346                        	.member	captionPixelWidth,64,16,8,16
   347                        	.eos
   348                        	.stag	_fx_scrollbar_t,192,38
   349                        	.member	min,0,16,8,16
   350                        	.member	max,16,16,8,16
   351                        	.member	increment,32,16,8,16
   352                        	.member	stopsize,48,16,8,16
   353                        	.member	location,64,5,8,16
   354                        	.member	state,80,5,8,16
   355                        	.member	rectThumb,96,10,8,64,25
   356                        	.member	data,160,129,8,32
   357                        	.eos
   358                        	.stag	_fx_listbox_t,240,39
   359                        	.member	pos,0,5,8,16
   360                        	.member	selected,16,16,8,16
   361                        	.member	offsetX,32,5,8,16
   362                        	.member	offsetY,48,5,8,16
   363                        	.member	inc,64,5,8,16
   364                        	.member	direction,80,5,8,16
   365                        	.member	top,96,5,8,16
   366                        	.member	bottom,112,5,8,16
   367                        	.member	indexTop,128,5,8,16
   368                        	.member	indexBottom,144,5,8,16
   369                        	.member	maxItems,160,16,8,16
   370                        	.member	fontSet,176,142,8,32
   371                        	.member	data,208,129,8,32
   372                        	.eos
   373                        	.stag	_fx_textbox_t,144,40
   374                        	.member	pos,0,5,8,16
   375                        	.member	selected,16,16,8,16
   376                        	.member	offsetX,32,5,8,16
   377                        	.member	offsetY,48,5,8,16
   378                        	.member	isShifted,64,14,8,8
   379                        	.member	cursorState,72,14,8,8
   380                        	.member	fontSet,80,142,8,32
   381                        	.member	data,112,129,8,32
   382                        	.eos
   383                        	.stag	_fx_menuAnchor_t,144,41
   384                        	.member	pCaption,0,142,8,32
   385                        	.member	renderLayoutX,32,16,8,16
   386                        	.member	renderLayoutY,48,16,8,16
   387                        	.member	captionPixelWidth,64,16,8,16
   388                        	.member	data,80,129,8,32
   389                        	.member	droppedWindow,112,138,8,32,30
  Thu Dec  3 2020 22:25                                                Page 8


   390                        	.eos
   391                        	.stag	_SubMenuStruct,64,42
   392                        	.member	caption,0,142,8,32
   393                        	.member	action,32,641,8,32
   394                        	.eos
   395                        	.stag	_SubMenuListStruct,40,43
   396                        	.member	cMenus,0,14,8,8
   397                        	.member	psubmenus,8,9354,8,32,42
   398                        	.eos
   399                        	.stag	_fx_ComBuffer,2080,44
   400                        	.member	cbSize,0,16,8,16
   401                        	.member	cbBuffer,16,16,8,16
   402                        	.member	buffer,32,110,8,0,256
   403                        	.eos
   404                        	.line	708
   405                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",8
   406                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstringtable.h",0
   407                        	.line	89
   408                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",9
   409                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256fmx.h",0
   410                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   411                        	.line	708
   412                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256fmx.h",5
   413                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fmx_vicky.h",0
   414                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   415                        	.line	708
   416                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fmx_vicky.h",11
   417                        	.line	72
   418                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256fmx.h",6
   419                        	.line	1325
   420                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",13
   421                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxkernel.h",0
   422                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   423                        	.line	25
   424                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxkernel.h",5
   425                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",0
   426                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   427                        	.line	708
   428                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",5
   429                        	.line	61
   430                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
  Thu Dec  3 2020 22:25                                                Page 9


                    space\FXOSv1\src\fxkernel.h",6
   431                        	.stag	_fx_zero_page,448,45
   432                        	.member	fxos_mouse_byte_0,0,14,8,8
   433                        	.member	fxos_mouse_byte_1,8,14,8,8
   434                        	.member	fxos_mouse_byte_2,16,14,8,8
   435                        	.member	fxos_mouse_byte_t,24,14,8,8
   436                        	.member	fxos_mouse_byte_x_l,32,14,8,8
   437                        	.member	fxos_mouse_byte_x_h,40,14,8,8
   438                        	.member	fxos_mouse_byte_y_l,48,14,8,8
   439                        	.member	fxos_mouse_byte_y_h,56,14,8,8
   440                        	.member	fxos_key_byte_0,64,14,8,8
   441                        	.member	fxos_key_byte_1,72,14,8,8
   442                        	.member	fxos_key_byte_2,80,14,8,8
   443                        	.member	fxos_mouse_ctl,88,14,8,8
   444                        	.member	fxos_mouse_index,96,14,8,8
   445                        	.member	fxos_mouse_status,104,14,8,8
   446                        	.member	VersionMajor,112,16,8,16
   447                        	.member	VersionMinor,128,16,8,16
   448                        	.member	VersionRelease,144,16,8,16
   449                        	.member	topMemory,160,18,8,32
   450                        	.member	bottomMemory,192,18,8,32
   451                        	.member	availableMemory,224,18,8,32
   452                        	.member	availableMemoryK,256,18,8,32
   453                        	.member	availableHeapMemory,288,18,8,32
   454                        	.member	availableHeapMemoryK,320,18,8,32
   455                        	.member	kernelFunctionCallId,352,16,8,16
   456                        	.member	kernelFunctionCallBank,368,14,8,8
   457                        	.member	kernelFunctionCallReserved,376,14,8,8
   458                        	.member	kernelFunctionCallParameter,384,129,8,32
   459                        	.member	kernelFunctionCallReturn,416,129,8,32
   460                        	.eos
   461                        	.stag	_fx_environment,96,46
   462                        	.member	variables,0,142,8,32
   463                        	.member	reserved1,32,5,8,16
   464                        	.member	reserved2,48,5,8,16
   465                        	.member	reserved3,64,5,8,16
   466                        	.member	reserved4,80,5,8,16
   467                        	.eos
   468                        	.stag	_debug_byte_bits,8,47
   469                        	.member	bit7,0,14,17,1
   470                        	.member	bit6,1,14,17,1
   471                        	.member	bit5,2,14,17,1
   472                        	.member	bit4,3,14,17,1
   473                        	.member	bit3,4,14,17,1
   474                        	.member	bit2,5,14,17,1
   475                        	.member	bit1,6,14,17,1
   476                        	.member	bit0,7,14,17,1
   477                        	.eos
   478                        	.stag	_fx_device_driver,1416,48
   479                        	.member	name,0,110,8,0,64
   480                        	.member	version,512,110,8,0,64
   481                        	.member	hmajor,1024,110,8,0,16
   482                        	.member	hminor,1152,110,8,0,16
   483                        	.member	type,1280,14,8,8
   484                        	.member	f_driver_load,1288,129,8,32
   485                        	.member	f_driver_read,1320,129,8,32
   486                        	.member	f_driver_write,1352,129,8,32
   487                        	.member	f_driver_unload,1384,129,8,32
  Thu Dec  3 2020 22:25                                                Page 10


   488                        	.eos
   489                        	.stag	_fx_block_device_driver,1448,49
   490                        	.member	name,0,110,8,0,64
   491                        	.member	version,512,110,8,0,64
   492                        	.member	hmajor,1024,110,8,0,16
   493                        	.member	hminor,1152,110,8,0,16
   494                        	.member	type,1280,14,8,8
   495                        	.member	f_driver_load,1288,129,8,32
   496                        	.member	f_driver_read,1320,129,8,32
   497                        	.member	f_driver_write,1352,129,8,32
   498                        	.member	f_driver_unload,1384,129,8,32
   499                        	.member	f_driver_command,1416,129,8,32
   500                        	.eos
   501                        	.line	270
   502                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",19
   503                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",0
   504                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
   505                        	.line	134
   506                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",5
   507                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   508                        	.line	205
   509                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",6
   510                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   511                        	.line	708
   512                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",7
   513                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256fmx.h",0
   514                        	.line	1325
   515                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",10
   516                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",0
   517                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   518                        	.line	205
   519                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",5
   520                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
   521                        	.line	134
   522                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",6
   523                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   524                        	.line	708
   525                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",7
   526                        	.stag	_fx_string,64,50
   527                        	.member	size,0,16,8,16
   528                        	.member	pos,16,5,8,16
  Thu Dec  3 2020 22:25                                                Page 11


   529                        	.member	buffer,32,142,8,32
   530                        	.eos
   531                        	.line	71
   532                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",15
   533                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",0
   534                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   535                        	.line	25
   536                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",5
   537                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxexec.h",0
   538                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   539                        	.line	708
   540                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxexec.h",5
   541                        	.line	52
   542                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",6
   543                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",0
   544                        	.line	61
   545                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",7
   546                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",0
   547                        	.line	171
   548                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",8
   549                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",0
   550                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   551                        	.line	708
   552                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",5
   553                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   554                        	.line	25
   555                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",6
   556                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",0
   557                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   558                        	.line	25
   559                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",5
   560                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc_cfg.h",0
   561                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos_build_parameters.h",0
   562                        	.line	32
   563                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc_cfg.h",8
  Thu Dec  3 2020 22:25                                                Page 12


   564                        	.stag	UMM_HEAP_INFO_t,256,51
   565                        	.member	totalEntries,0,18,8,32
   566                        	.member	usedEntries,32,18,8,32
   567                        	.member	freeEntries,64,18,8,32
   568                        	.member	totalBlocks,96,18,8,32
   569                        	.member	usedBlocks,128,18,8,32
   570                        	.member	freeBlocks,160,18,8,32
   571                        	.member	maxFreeContiguousBlocks,192,18,8,32
   572                        	.member	blockSize,224,18,8,32
   573                        	.eos
   574                        	.line	199
   575                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",6
   576                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc.h",0
   577                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   578                        	.line	708
   579                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc.h",11
   580                        	.line	24
   581                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",7
   582                        	.stag	_fx_memory_map,2072,52
   583                        	.member	availableMemory,0,18,8,32
   584                        	.member	valid_segments,32,110,8,0,255
   585                        	.eos
   586                        	.line	39
   587                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",7
   588                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",0
   589                        	.line	743
   590                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",8
   591                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxgui.h",0
   592                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxfont.h",0
   593                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   594                        	.line	708
   595                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxfont.h",6
   596                        	.line	64
   597                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxgui.h",4
   598                        	.stag	_click_detected,64,53
   599                        	.member	window,0,138,8,32,30
   600                        	.member	handler,32,641,8,32
   601                        	.eos
   602                        	.stag	_current_palette_map,400,54
   603                        	.member	CUR_DESKTOP,0,5,8,16
   604                        	.member	CUR_BACKGROUND,16,5,8,16
   605                        	.member	CUR_FONT,32,5,8,16
   606                        	.member	CUR_SELECTED_FONT,48,5,8,16
   607                        	.member	CUR_HIGHLIGHT_COLOR,64,5,8,16
   608                        	.member	CUR_WINDOWFRAME,80,5,8,16
  Thu Dec  3 2020 22:25                                                Page 13


   609                        	.member	CUR_WINDOWBORDER,96,5,8,16
   610                        	.member	CUR_WINDOWSHADOW,112,5,8,16
   611                        	.member	CUR_MENU,128,5,8,16
   612                        	.member	CUR_GADGET,144,5,8,16
   613                        	.member	CUR_COLOR,160,101,8,0,15
   614                        	.eos
   615                        	.line	264
   616                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",9
   617                        	.stag	_childMessage_t,64,55
   618                        	.member	msgType,0,16,8,16
   619                        	.member	msgData,16,129,8,32
   620                        	.member	dataSize,48,16,8,16
   621                        	.eos
   622                        	.line	362
   623                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",9
   624                        	.stag	_fx_main_loopvars,16,56
   625                        	.member	dummy,0,5,8,16
   626                        	.eos
   627                        	.stag	_fxMouseMessageData,64,57
   628                        	.member	button1,0,14,8,8
   629                        	.member	button2,8,14,8,8
   630                        	.member	button3,16,14,8,8
   631                        	.member	button4,24,14,8,8
   632                        	.member	x,32,16,8,16
   633                        	.member	y,48,16,8,16
   634                        	.eos
   635                        	.stag	_fx_eventProcess,64,58
   636                        	.member	process,0,138,8,32,20
   637                        	.member	eventProc,32,641,8,32
   638                        	.eos
   639                        	.stag	_mouse_msg_state,184,59
   640                        	.member	lastEvent,0,18,8,32
   641                        	.member	buttonLeftDown,32,14,8,8
   642                        	.member	lastLeftDown,40,18,8,32
   643                        	.member	buttonRightDown,72,14,8,8
   644                        	.member	lastRightDown,80,18,8,32
   645                        	.member	buttonMiddleDown,112,14,8,8
   646                        	.member	lastMiddleDown,120,18,8,32
   647                        	.member	lastX,152,16,8,16
   648                        	.member	lastY,168,16,8,16
   649                        	.eos
   650                        	.line	743
   651                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",16
   652                        	.stag	_fx_spinner_ctx,48,60
   653                        	.member	index,0,5,8,16
   654                        	.member	spinner,16,142,8,32
   655                        	.eos
   656                        	.stag	_fx_console_ctx,1144,61
   657                        	.member	lineBufferIndex,0,5,8,16
   658                        	.member	lineBuffer,16,110,8,0,128
   659                        	.member	isShifted,1040,14,8,8
   660                        	.member	userData,1048,129,8,32
   661                        	.member	screenBuffer,1080,129,8,32
   662                        	.member	Reserved1,1112,129,8,32
   663                        	.eos
  Thu Dec  3 2020 22:25                                                Page 14


   664                        	.stag	_token,64,62
   665                        	.member	type,0,5,8,16
   666                        	.member	depth,16,16,8,16
   667                        	.member	text,32,142,8,32
   668                        	.eos
   669                        	.stag	_command_args,64,63
   670                        	.member	proc,0,656,8,32
   671                        	.member	tokens,32,138,8,32,5
   672                        	.eos
   673                        	.line	171
   674                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",20
   675                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",0
   676                        	.line	71
   677                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",21
   678                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",0
   679                        	.line	61
   680                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",22
   681                        	.line	25
   682                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.c",2
   683                        ;#include "fxexec.h"
   684                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxexec.h",0
   685                        	.line	52
   686                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.c",3
   687                        ;#include "fxdos.h"
   688                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxdos.h",0
   689                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   690                        	.line	708
   691                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxdos.h",5
   692                        	.stag	_fx_sd_direntry,256,64
   693                        	.member	filename,0,110,8,0,11
   694                        	.member	type,88,14,8,8
   695                        	.member	attrs,96,110,8,0,20
   696                        	.eos
   697                        	.stag	_fx_info,416,65
   698                        	.member	stgName,0,110,8,0,32
   699                        	.member	Reserved1,256,14,8,8
   700                        	.member	stgType,264,16,8,16
   701                        	.member	Reserved2,280,14,8,8
   702                        	.member	stgReserved,288,110,8,0,16
   703                        	.eos
   704                        	.stag	_fx_fileinfo,136,66
   705                        	.member	type,0,14,8,8
   706                        	.member	pFilename,8,142,8,32
   707                        	.member	lSize,40,18,8,32
   708                        	.member	lcreateDate,72,18,8,32
   709                        	.member	lchangeDate,104,18,8,32
   710                        	.eos
  Thu Dec  3 2020 22:25                                                Page 15


   711                        	.stag	_FX_FAT_DIR_INFO,256,67
   712                        	.member	DIR_Name,0,110,8,0,11
   713                        	.member	DIR_Attr,88,14,8,8
   714                        	.member	DIR_NTRes,96,14,8,8
   715                        	.member	DIR_CrtTimeTenth,104,14,8,8
   716                        	.member	DIR_CrtTime,112,16,8,16
   717                        	.member	DIR_CrtDate,128,16,8,16
   718                        	.member	DIR_LstAccDate,144,16,8,16
   719                        	.member	DIR_FstClusHI,160,16,8,16
   720                        	.member	DIR_WrtTime,176,16,8,16
   721                        	.member	DIR_WrtDate,192,16,8,16
   722                        	.member	DIR_FstClusLO,208,16,8,16
   723                        	.member	DIR_FileSize,224,18,8,32
   724                        	.eos
   725                        	.stag	fat_extBS_32,416,68
   726                        	.member	table_size_32,0,18,8,32
   727                        	.member	extended_flags,32,16,8,16
   728                        	.member	fat_version,48,16,8,16
   729                        	.member	root_cluster,64,18,8,32
   730                        	.member	fat_info,96,16,8,16
   731                        	.member	backup_BS_sector,112,16,8,16
   732                        	.member	reserved_0,128,110,8,0,12
   733                        	.member	drive_number,224,14,8,8
   734                        	.member	reserved_1,232,14,8,8
   735                        	.member	boot_signature,240,14,8,8
   736                        	.member	volume_id,248,16,8,16
   737                        	.member	volume_label,264,110,8,0,11
   738                        	.member	fat_type_label,352,110,8,0,8
   739                        	.eos
   740                        	.stag	fat_extBS_16,192,69
   741                        	.member	bios_drive_num,0,14,8,8
   742                        	.member	reserved1,8,14,8,8
   743                        	.member	boot_signature,16,14,8,8
   744                        	.member	volume_id,24,16,8,16
   745                        	.member	volume_label,40,110,8,0,11
   746                        	.member	fat_type_label,128,110,8,0,8
   747                        	.eos
   748                        	.stag	fat_BS,688,70
   749                        	.member	bootjmp,0,110,8,0,3
   750                        	.member	oem_name,24,110,8,0,8
   751                        	.member	bytes_per_sector,88,16,8,16
   752                        	.member	sectors_per_cluster,104,14,8,8
   753                        	.member	reserved_sector_count,112,16,8,16
   754                        	.member	table_count,128,14,8,8
   755                        	.member	root_entry_count,136,16,8,16
   756                        	.member	total_sectors_16,152,16,8,16
   757                        	.member	media_type,168,14,8,8
   758                        	.member	table_size_16,176,16,8,16
   759                        	.member	sectors_per_track,192,16,8,16
   760                        	.member	head_side_count,208,16,8,16
   761                        	.member	hidden_sector_count,224,16,8,16
   762                        	.member	total_sectors_32,240,16,8,16
   763                        	.member	extended_section,256,110,8,0,54
   764                        	.eos
   765                        	.stag	__FATBootSector,928,71
   766                        	.member	bootjmp,0,110,8,0,3
   767                        	.member	oem_name,24,110,8,0,8
   768                        	.member	bytes_per_sector,88,16,8,16
  Thu Dec  3 2020 22:25                                                Page 16


   769                        	.member	sectors_per_cluster,104,14,8,8
   770                        	.member	reserved_sector_count,112,16,8,16
   771                        	.member	fat_table_count,128,14,8,8
   772                        	.member	root_entry_count,136,16,8,16
   773                        	.member	total_sectors_16,152,16,8,16
   774                        	.member	media_type,168,14,8,8
   775                        	.member	sectors_per_fat,176,16,8,16
   776                        	.member	sectors_per_track,192,16,8,16
   777                        	.member	head_side_count,208,16,8,16
   778                        	.member	hidden_sector_count,224,18,8,32
   779                        	.member	total_sectors_32,256,18,8,32
   780                        	.member	drive_number,288,14,8,8
   781                        	.member	reserved1,296,14,8,8
   782                        	.member	boot_sig,304,14,8,8
   783                        	.member	vol_id,312,18,8,32
   784                        	.member	vol_name,344,110,8,0,11
   785                        	.member	file_system_type,432,110,8,0,8
   786                        	.member	extended_section,496,110,8,0,54
   787                        	.eos
   788                        	.stag	__PARTITIONTABLE,128,72
   789                        	.member	first_byte,0,14,8,8
   790                        	.member	start_chs,8,110,8,0,3
   791                        	.member	partition_type,32,14,8,8
   792                        	.member	end_chs,40,110,8,0,3
   793                        	.member	start_sector,64,18,8,32
   794                        	.member	length_sectors,96,18,8,32
   795                        	.eos
   796                        	.stag	fake73_,4096,73
   797                        	.member	jmp,0,110,8,0,3
   798                        	.member	oem,24,110,8,0,8
   799                        	.member	sector_size,88,15,8,16
   800                        	.member	sectors_per_cluster,104,14,8,8
   801                        	.member	reserved_sectors,112,15,8,16
   802                        	.member	number_of_fats,128,14,8,8
   803                        	.member	root_dir_entries,136,15,8,16
   804                        	.member	total_sectors_short,152,15,8,16
   805                        	.member	media_descriptor,168,14,8,8
   806                        	.member	fat_size_sectors,176,15,8,16
   807                        	.member	sectors_per_track,192,15,8,16
   808                        	.member	number_of_heads,208,15,8,16
   809                        	.member	hidden_sectors,224,18,8,32
   810                        	.member	total_sectors_long,256,18,8,32
   811                        	.member	drive_number,288,14,8,8
   812                        	.member	current_head,296,14,8,8
   813                        	.member	boot_signature,304,14,8,8
   814                        	.member	volume_id,312,18,8,32
   815                        	.member	volume_label,344,110,8,0,11
   816                        	.member	fs_type,432,110,8,0,8
   817                        	.member	boot_code,496,110,8,0,448
   818                        	.member	boot_sector_signature,4080,15,8,16
   819                        	.eos
   820                        	.stag	__FAT16ENTRY,256,74
   821                        	.member	filename,0,110,8,0,8
   822                        	.member	ext,64,110,8,0,3
   823                        	.member	attributes,88,14,8,8
   824                        	.member	reserved,96,110,8,0,10
   825                        	.member	modify_time,176,16,8,16
   826                        	.member	modify_date,192,16,8,16
  Thu Dec  3 2020 22:25                                                Page 17


   827                        	.member	starting_cluster,208,16,8,16
   828                        	.member	file_size,224,18,8,32
   829                        	.eos
   830                        	.stag	__FAT16ENTRYLONG,288,75
   831                        	.member	filename,0,110,8,0,8
   832                        	.member	ext,64,110,8,0,3
   833                        	.member	attributes,88,14,8,8
   834                        	.member	reserved,96,110,8,0,10
   835                        	.member	modify_time,176,16,8,16
   836                        	.member	modify_date,192,16,8,16
   837                        	.member	starting_cluster,208,16,8,16
   838                        	.member	file_size,224,18,8,32
   839                        	.member	plongfileName,256,142,8,32
   840                        	.eos
   841                        	.stag	_LongFileName,256,76
   842                        	.member	sequenceNo,0,14,8,8
   843                        	.member	fileName_Part1,8,110,8,0,10
   844                        	.member	fileattribute,88,14,8,8
   845                        	.member	type,96,14,8,8
   846                        	.member	checksum,104,14,8,8
   847                        	.member	fileName_Part2,112,110,8,0,12
   848                        	.member	fstclusLO,208,5,8,16
   849                        	.member	fileName_Part3,224,110,8,0,4
   850                        	.eos
   851                        	.stag	_IDSECTOR,2048,77
   852                        	.member	wGenConfig,0,16,8,16
   853                        	.member	wNumCyls,16,16,8,16
   854                        	.member	wReserved,32,16,8,16
   855                        	.member	wNumHeads,48,16,8,16
   856                        	.member	wBytesPerTrack,64,16,8,16
   857                        	.member	wBytesPerSector,80,16,8,16
   858                        	.member	wSectorsPerTrack,96,16,8,16
   859                        	.member	wVendorUnique,112,112,8,0,3
   860                        	.member	sSerialNumber,160,110,8,0,20
   861                        	.member	wBufferType,320,16,8,16
   862                        	.member	wBufferSize,336,16,8,16
   863                        	.member	wECCSize,352,16,8,16
   864                        	.member	sFirmwareRev,368,110,8,0,8
   865                        	.member	sModelNumber,432,110,8,0,40
   866                        	.member	wMoreVendorUnique,752,16,8,16
   867                        	.member	wDoubleWordIO,768,16,8,16
   868                        	.member	wCapabilities,784,16,8,16
   869                        	.member	wReserved1,800,16,8,16
   870                        	.member	wPIOTiming,816,16,8,16
   871                        	.member	wDMATiming,832,16,8,16
   872                        	.member	wBS,848,16,8,16
   873                        	.member	wNumCurrentCyls,864,16,8,16
   874                        	.member	wNumCurrentHeads,880,16,8,16
   875                        	.member	wNumCurrentSectorsPerTrack,896,16,8,16
   876                        	.member	ulCurrentSectorCapacity,912,18,8,32
   877                        	.member	wMultSectorStuff,944,16,8,16
   878                        	.member	ulTotalAddressableSectors,960,18,8,32
   879                        	.member	wSingleWordDMA,992,16,8,16
   880                        	.member	wMultiWordDMA,1008,16,8,16
   881                        	.member	bReserved,1024,110,8,0,128
   882                        	.eos
   883                        	.stag	fake78_,16,78
   884                        	.member	Reserved1,0,16,17,1
  Thu Dec  3 2020 22:25                                                Page 18


   885                        	.member	Retired3,1,16,17,1
   886                        	.member	ResponseIncomplete,2,16,17,1
   887                        	.member	Retired2,3,16,17,3
   888                        	.member	FixedDevice,6,16,17,1
   889                        	.member	RemovableMedia,7,16,17,1
   890                        	.member	Retired1,8,16,17,7
   891                        	.member	DeviceType,15,16,17,1
   892                        	.eos
   893                        	.stag	fake79_,16,79
   894                        	.member	FeatureSupported,0,16,17,1
   895                        	.member	Reserved,1,16,17,15
   896                        	.eos
   897                        	.stag	fake80_,32,80
   898                        	.member	CurrentLongPhysicalSectorAlignment,0,14,
                    17,2
   899                        	.member	ReservedByte49,2,14,17,6
   900                        	.member	DmaSupported,8,14,17,1
   901                        	.member	LbaSupported,9,14,17,1
   902                        	.member	IordyDisable,10,14,17,1
   903                        	.member	IordySupported,11,14,17,1
   904                        	.member	Reserved1,12,14,17,1
   905                        	.member	StandybyTimerSupport,13,14,17,1
   906                        	.member	Reserved2,14,14,17,2
   907                        	.member	ReservedWord50,16,16,8,16
   908                        	.eos
   909                        	.stag	fake81_,16,81
   910                        	.member	ZonedCapabilities,0,16,17,2
   911                        	.member	NonVolatileWriteCache,2,16,17,1
   912                        	.member	ExtendedUserAddressableSectorsSupported,
                    3,16,17,1
   913                        	.member	DeviceEncryptsAllUserData,4,16,17,1
   914                        	.member	ReadZeroAfterTrimSupported,5,16,17,1
   915                        	.member	Optional28BitCommandsSupported,6,16,17,1
   916                        	.member	IEEE1667,7,16,17,1
   917                        	.member	DownloadMicrocodeDmaSupported,8,16,17,1
   918                        	.member	SetMaxSetPasswordUnlockDmaSupported,9,16
                    ,17,1
   919                        	.member	WriteBufferDmaSupported,10,16,17,1
   920                        	.member	ReadBufferDmaSupported,11,16,17,1
   921                        	.member	DeviceConfigIdentifySetDmaSupported,12,1
                    6,17,1
   922                        	.member	LPSAERCSupported,13,16,17,1
   923                        	.member	DeterministicReadAfterTrimSupported,14,1
                    6,17,1
   924                        	.member	CFastSpecSupported,15,16,17,1
   925                        	.eos
   926                        	.stag	fake82_,32,82
   927                        	.member	Reserved0,0,16,17,1
   928                        	.member	SataGen1,1,16,17,1
   929                        	.member	SataGen2,2,16,17,1
   930                        	.member	SataGen3,3,16,17,1
   931                        	.member	Reserved1,4,16,17,4
   932                        	.member	NCQ,8,16,17,1
   933                        	.member	HIPM,9,16,17,1
   934                        	.member	PhyEvents,10,16,17,1
   935                        	.member	NcqUnload,11,16,17,1
   936                        	.member	NcqPriority,12,16,17,1
   937                        	.member	HostAutoPS,13,16,17,1
  Thu Dec  3 2020 22:25                                                Page 19


   938                        	.member	DeviceAutoPS,14,16,17,1
   939                        	.member	ReadLogDMA,15,16,17,1
   940                        	.member	Reserved2,16,16,17,1
   941                        	.member	CurrentSpeed,17,16,17,3
   942                        	.member	NcqStreaming,20,16,17,1
   943                        	.member	NcqQueueMgmt,21,16,17,1
   944                        	.member	NcqReceiveSend,22,16,17,1
   945                        	.member	DEVSLPtoReducedPwrState,23,16,17,1
   946                        	.member	Reserved3,24,16,17,8
   947                        	.eos
   948                        	.stag	fake83_,16,83
   949                        	.member	Reserved0,0,16,17,1
   950                        	.member	NonZeroOffsets,1,16,17,1
   951                        	.member	DmaSetupAutoActivate,2,16,17,1
   952                        	.member	DIPM,3,16,17,1
   953                        	.member	InOrderData,4,16,17,1
   954                        	.member	HardwareFeatureControl,5,16,17,1
   955                        	.member	SoftwareSettingsPreservation,6,16,17,1
   956                        	.member	NCQAutosense,7,16,17,1
   957                        	.member	DEVSLP,8,16,17,1
   958                        	.member	HybridInformation,9,16,17,1
   959                        	.member	Reserved1,10,16,17,6
   960                        	.eos
   961                        	.stag	fake84_,16,84
   962                        	.member	Reserved0,0,16,17,1
   963                        	.member	NonZeroOffsets,1,16,17,1
   964                        	.member	DmaSetupAutoActivate,2,16,17,1
   965                        	.member	DIPM,3,16,17,1
   966                        	.member	InOrderData,4,16,17,1
   967                        	.member	HardwareFeatureControl,5,16,17,1
   968                        	.member	SoftwareSettingsPreservation,6,16,17,1
   969                        	.member	DeviceAutoPS,7,16,17,1
   970                        	.member	DEVSLP,8,16,17,1
   971                        	.member	HybridInformation,9,16,17,1
   972                        	.member	Reserved1,10,16,17,6
   973                        	.eos
   974                        	.stag	fake85_,48,85
   975                        	.member	SmartCommands,0,16,17,1
   976                        	.member	SecurityMode,1,16,17,1
   977                        	.member	RemovableMediaFeature,2,16,17,1
   978                        	.member	PowerManagement,3,16,17,1
   979                        	.member	Reserved1,4,16,17,1
   980                        	.member	WriteCache,5,16,17,1
   981                        	.member	LookAhead,6,16,17,1
   982                        	.member	ReleaseInterrupt,7,16,17,1
   983                        	.member	ServiceInterrupt,8,16,17,1
   984                        	.member	DeviceReset,9,16,17,1
   985                        	.member	HostProtectedArea,10,16,17,1
   986                        	.member	Obsolete1,11,16,17,1
   987                        	.member	WriteBuffer,12,16,17,1
   988                        	.member	ReadBuffer,13,16,17,1
   989                        	.member	Nop,14,16,17,1
   990                        	.member	Obsolete2,15,16,17,1
   991                        	.member	DownloadMicrocode,16,16,17,1
   992                        	.member	DmaQueued,17,16,17,1
   993                        	.member	Cfa,18,16,17,1
   994                        	.member	AdvancedPm,19,16,17,1
   995                        	.member	Msn,20,16,17,1
  Thu Dec  3 2020 22:25                                                Page 20


   996                        	.member	PowerUpInStandby,21,16,17,1
   997                        	.member	ManualPowerUp,22,16,17,1
   998                        	.member	Reserved2,23,16,17,1
   999                        	.member	SetMax,24,16,17,1
  1000                        	.member	Acoustics,25,16,17,1
  1001                        	.member	BigLba,26,16,17,1
  1002                        	.member	DeviceConfigOverlay,27,16,17,1
  1003                        	.member	FlushCache,28,16,17,1
  1004                        	.member	FlushCacheExt,29,16,17,1
  1005                        	.member	WordValid83,30,16,17,2
  1006                        	.member	SmartErrorLog,32,16,17,1
  1007                        	.member	SmartSelfTest,33,16,17,1
  1008                        	.member	MediaSerialNumber,34,16,17,1
  1009                        	.member	MediaCardPassThrough,35,16,17,1
  1010                        	.member	StreamingFeature,36,16,17,1
  1011                        	.member	GpLogging,37,16,17,1
  1012                        	.member	WriteFua,38,16,17,1
  1013                        	.member	WriteQueuedFua,39,16,17,1
  1014                        	.member	WWN64Bit,40,16,17,1
  1015                        	.member	URGReadStream,41,16,17,1
  1016                        	.member	URGWriteStream,42,16,17,1
  1017                        	.member	ReservedForTechReport,43,16,17,2
  1018                        	.member	IdleWithUnloadFeature,45,16,17,1
  1019                        	.member	WordValid,46,16,17,2
  1020                        	.eos
  1021                        	.stag	fake86_,48,86
  1022                        	.member	SmartCommands,0,16,17,1
  1023                        	.member	SecurityMode,1,16,17,1
  1024                        	.member	RemovableMediaFeature,2,16,17,1
  1025                        	.member	PowerManagement,3,16,17,1
  1026                        	.member	Reserved1,4,16,17,1
  1027                        	.member	WriteCache,5,16,17,1
  1028                        	.member	LookAhead,6,16,17,1
  1029                        	.member	ReleaseInterrupt,7,16,17,1
  1030                        	.member	ServiceInterrupt,8,16,17,1
  1031                        	.member	DeviceReset,9,16,17,1
  1032                        	.member	HostProtectedArea,10,16,17,1
  1033                        	.member	Obsolete1,11,16,17,1
  1034                        	.member	WriteBuffer,12,16,17,1
  1035                        	.member	ReadBuffer,13,16,17,1
  1036                        	.member	Nop,14,16,17,1
  1037                        	.member	Obsolete2,15,16,17,1
  1038                        	.member	DownloadMicrocode,16,16,17,1
  1039                        	.member	DmaQueued,17,16,17,1
  1040                        	.member	Cfa,18,16,17,1
  1041                        	.member	AdvancedPm,19,16,17,1
  1042                        	.member	Msn,20,16,17,1
  1043                        	.member	PowerUpInStandby,21,16,17,1
  1044                        	.member	ManualPowerUp,22,16,17,1
  1045                        	.member	Reserved2,23,16,17,1
  1046                        	.member	SetMax,24,16,17,1
  1047                        	.member	Acoustics,25,16,17,1
  1048                        	.member	BigLba,26,16,17,1
  1049                        	.member	DeviceConfigOverlay,27,16,17,1
  1050                        	.member	FlushCache,28,16,17,1
  1051                        	.member	FlushCacheExt,29,16,17,1
  1052                        	.member	Resrved3,30,16,17,1
  1053                        	.member	Words119_120Valid,31,16,17,1
  Thu Dec  3 2020 22:25                                                Page 21


  1054                        	.member	SmartErrorLog,32,16,17,1
  1055                        	.member	SmartSelfTest,33,16,17,1
  1056                        	.member	MediaSerialNumber,34,16,17,1
  1057                        	.member	MediaCardPassThrough,35,16,17,1
  1058                        	.member	StreamingFeature,36,16,17,1
  1059                        	.member	GpLogging,37,16,17,1
  1060                        	.member	WriteFua,38,16,17,1
  1061                        	.member	WriteQueuedFua,39,16,17,1
  1062                        	.member	WWN64Bit,40,16,17,1
  1063                        	.member	URGReadStream,41,16,17,1
  1064                        	.member	URGWriteStream,42,16,17,1
  1065                        	.member	ReservedForTechReport,43,16,17,2
  1066                        	.member	IdleWithUnloadFeature,45,16,17,1
  1067                        	.member	Reserved4,46,16,17,2
  1068                        	.eos
  1069                        	.stag	fake87_,16,87
  1070                        	.member	TimeRequired,0,16,17,15
  1071                        	.member	ExtendedTimeReported,15,16,17,1
  1072                        	.eos
  1073                        	.stag	fake88_,16,88
  1074                        	.member	TimeRequired,0,16,17,15
  1075                        	.member	ExtendedTimeReported,15,16,17,1
  1076                        	.eos
  1077                        	.stag	fake89_,16,89
  1078                        	.member	LogicalSectorsPerPhysicalSector,0,16,17,
                    4
  1079                        	.member	Reserved0,4,16,17,8
  1080                        	.member	LogicalSectorLongerThan256Words,12,16,17
                    ,1
  1081                        	.member	MultipleLogicalSectorsPerPhysicalSector,
                    13,16,17,1
  1082                        	.member	Reserved1,14,16,17,2
  1083                        	.eos
  1084                        	.stag	fake90_,16,90
  1085                        	.member	ReservedForDrqTechnicalReport,0,16,17,1
  1086                        	.member	WriteReadVerify,1,16,17,1
  1087                        	.member	WriteUncorrectableExt,2,16,17,1
  1088                        	.member	ReadWriteLogDmaExt,3,16,17,1
  1089                        	.member	DownloadMicrocodeMode3,4,16,17,1
  1090                        	.member	FreefallControl,5,16,17,1
  1091                        	.member	SenseDataReporting,6,16,17,1
  1092                        	.member	ExtendedPowerConditions,7,16,17,1
  1093                        	.member	Reserved0,8,16,17,6
  1094                        	.member	WordValid,14,16,17,2
  1095                        	.eos
  1096                        	.stag	fake91_,16,91
  1097                        	.member	ReservedForDrqTechnicalReport,0,16,17,1
  1098                        	.member	WriteReadVerify,1,16,17,1
  1099                        	.member	WriteUncorrectableExt,2,16,17,1
  1100                        	.member	ReadWriteLogDmaExt,3,16,17,1
  1101                        	.member	DownloadMicrocodeMode3,4,16,17,1
  1102                        	.member	FreefallControl,5,16,17,1
  1103                        	.member	SenseDataReporting,6,16,17,1
  1104                        	.member	ExtendedPowerConditions,7,16,17,1
  1105                        	.member	Reserved0,8,16,17,6
  1106                        	.member	Reserved1,14,16,17,2
  1107                        	.eos
  1108                        	.stag	fake92_,16,92
  Thu Dec  3 2020 22:25                                                Page 22


  1109                        	.member	SecuritySupported,0,16,17,1
  1110                        	.member	SecurityEnabled,1,16,17,1
  1111                        	.member	SecurityLocked,2,16,17,1
  1112                        	.member	SecurityFrozen,3,16,17,1
  1113                        	.member	SecurityCountExpired,4,16,17,1
  1114                        	.member	EnhancedSecurityEraseSupported,5,16,17,1
  1115                        	.member	Reserved0,6,16,17,2
  1116                        	.member	SecurityLevel,8,16,17,1
  1117                        	.member	Reserved1,9,16,17,7
  1118                        	.eos
  1119                        	.stag	fake93_,16,93
  1120                        	.member	MaximumCurrentInMA,0,16,17,12
  1121                        	.member	CfaPowerMode1Disabled,12,16,17,1
  1122                        	.member	CfaPowerMode1Required,13,16,17,1
  1123                        	.member	Reserved0,14,16,17,1
  1124                        	.member	Word160Supported,15,16,17,1
  1125                        	.eos
  1126                        	.stag	fake94_,16,94
  1127                        	.member	SupportsTrim,0,16,17,1
  1128                        	.member	Reserved0,1,16,17,15
  1129                        	.eos
  1130                        	.stag	fake95_,16,95
  1131                        	.member	Supported,0,16,17,1
  1132                        	.member	Reserved0,1,16,17,1
  1133                        	.member	WriteSameSuported,2,16,17,1
  1134                        	.member	ErrorRecoveryControlSupported,3,16,17,1
  1135                        	.member	FeatureControlSuported,4,16,17,1
  1136                        	.member	DataTablesSuported,5,16,17,1
  1137                        	.member	Reserved1,6,16,17,6
  1138                        	.member	VendorSpecific,12,16,17,4
  1139                        	.eos
  1140                        	.stag	fake96_,16,96
  1141                        	.member	AlignmentOfLogicalWithinPhysical,0,16,17
                    ,14
  1142                        	.member	Word209Supported,14,16,17,1
  1143                        	.member	Reserved0,15,16,17,1
  1144                        	.eos
  1145                        	.stag	fake97_,16,97
  1146                        	.member	NVCachePowerModeEnabled,0,16,17,1
  1147                        	.member	Reserved0,1,16,17,3
  1148                        	.member	NVCacheFeatureSetEnabled,4,16,17,1
  1149                        	.member	Reserved1,5,16,17,3
  1150                        	.member	NVCachePowerModeVersion,8,16,17,4
  1151                        	.member	NVCacheFeatureSetVersion,12,16,17,4
  1152                        	.eos
  1153                        	.stag	fake98_,16,98
  1154                        	.member	NVCacheEstimatedTimeToSpinUpInSeconds,0,
                    14,8,8
  1155                        	.member	Reserved,8,14,8,8
  1156                        	.eos
  1157                        	.stag	fake99_,16,99
  1158                        	.member	MajorVersion,0,16,17,12
  1159                        	.member	TransportType,12,16,17,4
  1160                        	.eos
  1161                        	.stag	_IDENTIFY_DEVICE_DATA,4096,100
  1162                        	.member	GeneralConfiguration,0,10,8,16,78
  1163                        	.member	NumCylinders,16,16,8,16
  1164                        	.member	SpecificConfiguration,32,16,8,16
  Thu Dec  3 2020 22:25                                                Page 23


  1165                        	.member	NumHeads,48,16,8,16
  1166                        	.member	Retired1Bytes,64,110,8,0,4
  1167                        	.member	NumSectorsPerTrack,96,16,8,16
  1168                        	.member	VendorUnique1Bytes,112,110,8,0,6
  1169                        	.member	SerialNumber,160,110,8,0,20
  1170                        	.member	Retired2,320,112,8,0,2
  1171                        	.member	Obsolete1,352,16,8,16
  1172                        	.member	FirmwareRevision,368,110,8,0,8
  1173                        	.member	ModelNumber,432,110,8,0,40
  1174                        	.member	MaximumBlockTransfer,752,14,8,8
  1175                        	.member	VendorUnique2,760,14,8,8
  1176                        	.member	TrustedComputing,768,10,8,16,79
  1177                        	.member	Capabilities,784,10,8,32,80
  1178                        	.member	ObsoleteWords51,816,112,8,0,2
  1179                        	.member	TranslationFieldsValid,848,16,17,3
  1180                        	.member	Reserved3,851,16,17,5
  1181                        	.member	FreeFallControlSensitivity,856,16,17,8
  1182                        	.member	NumberOfCurrentCylinders,864,16,8,16
  1183                        	.member	NumberOfCurrentHeads,880,16,8,16
  1184                        	.member	CurrentSectorsPerTrack,896,16,8,16
  1185                        	.member	CurrentSectorCapacity,912,18,8,32
  1186                        	.member	CurrentMultiSectorSetting,944,14,8,8
  1187                        	.member	MultiSectorSettingValid,952,14,17,1
  1188                        	.member	ReservedByte59,953,14,17,3
  1189                        	.member	SanitizeFeatureSupported,956,14,17,1
  1190                        	.member	CryptoScrambleExtCommandSupported,957,14
                    ,17,1
  1191                        	.member	OverwriteExtCommandSupported,958,14,17,1
  1192                        	.member	BlockEraseExtCommandSupported,959,14,17,
                    1
  1193                        	.member	UserAddressableSectors,960,18,8,32
  1194                        	.member	ObsoleteWord62,992,16,8,16
  1195                        	.member	MultiWordDMASupport,1008,16,17,8
  1196                        	.member	MultiWordDMAActive,1016,16,17,8
  1197                        	.member	AdvancedPIOModes,1024,16,17,8
  1198                        	.member	ReservedByte64,1032,16,17,8
  1199                        	.member	MinimumMWXferCycleTime,1040,16,8,16
  1200                        	.member	RecommendedMWXferCycleTime,1056,16,8,16
  1201                        	.member	MinimumPIOCycleTime,1072,16,8,16
  1202                        	.member	MinimumPIOCycleTimeIORDY,1088,16,8,16
  1203                        	.member	AdditionalSupported,1104,10,8,16,81
  1204                        	.member	ReservedWords70,1120,112,8,0,5
  1205                        	.member	QueueDepth,1200,16,17,5
  1206                        	.member	ReservedWord75,1205,16,17,11
  1207                        	.member	SerialAtaCapabilities,1216,10,8,32,82
  1208                        	.member	SerialAtaFeaturesSupported,1248,10,8,16,
                    83
  1209                        	.member	SerialAtaFeaturesEnabled,1264,10,8,16,84
  1210                        	.member	MajorRevision,1280,16,8,16
  1211                        	.member	MinorRevision,1296,16,8,16
  1212                        	.member	CommandSetSupport,1312,10,8,48,85
  1213                        	.member	CommandSetActive,1360,10,8,48,86
  1214                        	.member	UltraDMASupport,1408,16,17,8
  1215                        	.member	UltraDMAActive,1416,16,17,8
  1216                        	.member	NormalSecurityEraseUnit,1424,10,8,16,87
  1217                        	.member	EnhancedSecurityEraseUnit,1440,10,8,16,8
                    8
  1218                        	.member	CurrentAPMLevel,1456,16,17,8
  Thu Dec  3 2020 22:25                                                Page 24


  1219                        	.member	ReservedWord91,1464,16,17,8
  1220                        	.member	MasterPasswordID,1472,16,8,16
  1221                        	.member	HardwareResetResult,1488,16,8,16
  1222                        	.member	CurrentAcousticValue,1504,16,17,8
  1223                        	.member	RecommendedAcousticValue,1512,16,17,8
  1224                        	.member	StreamMinRequestSize,1520,16,8,16
  1225                        	.member	StreamingTransferTimeDMA,1536,16,8,16
  1226                        	.member	StreamingAccessLatencyDMAPIO,1552,16,8,1
                    6
  1227                        	.member	StreamingPerfGranularity,1568,18,8,32
  1228                        	.member	Max48BitLBA,1600,114,8,0,2
  1229                        	.member	StreamingTransferTime,1664,16,8,16
  1230                        	.member	DsmCap,1680,16,8,16
  1231                        	.member	PhysicalLogicalSectorSize,1696,10,8,16,8
                    9
  1232                        	.member	InterSeekDelay,1712,16,8,16
  1233                        	.member	WorldWideName,1728,112,8,0,4
  1234                        	.member	ReservedForWorldWideName128,1792,112,8,0
                    ,4
  1235                        	.member	ReservedForTlcTechnicalReport,1856,16,8,
                    16
  1236                        	.member	WordsPerLogicalSector,1872,112,8,0,2
  1237                        	.member	CommandSetSupportExt,1904,10,8,16,90
  1238                        	.member	CommandSetActiveExt,1920,10,8,16,91
  1239                        	.member	ReservedForExpandedSupportandActive,1936
                    ,112,8,0,6
  1240                        	.member	MsnSupport,2032,16,17,2
  1241                        	.member	ReservedWord127,2034,16,17,14
  1242                        	.member	SecurityStatus,2048,10,8,16,92
  1243                        	.member	ReservedWord129,2064,112,8,0,31
  1244                        	.member	CfaPowerMode1,2560,10,8,16,93
  1245                        	.member	ReservedForCfaWord161,2576,112,8,0,7
  1246                        	.member	NominalFormFactor,2688,16,17,4
  1247                        	.member	ReservedWord168,2692,16,17,12
  1248                        	.member	DataSetManagementFeature,2704,10,8,16,94
  1249                        	.member	AdditionalProductID,2720,112,8,0,4
  1250                        	.member	ReservedForCfaWord174,2784,112,8,0,2
  1251                        	.member	CurrentMediaSerialNumber,2816,112,8,0,30
  1252                        	.member	SCTCommandTransport,3296,10,8,16,95
  1253                        	.member	ReservedWord207,3312,112,8,0,2
  1254                        	.member	BlockAlignment,3344,10,8,16,96
  1255                        	.member	WriteReadVerifySectorCountMode3Only,3360
                    ,112,8,0,2
  1256                        	.member	WriteReadVerifySectorCountMode2Only,3392
                    ,112,8,0,2
  1257                        	.member	NVCacheCapabilities,3424,10,8,16,97
  1258                        	.member	NVCacheSizeLSW,3440,16,8,16
  1259                        	.member	NVCacheSizeMSW,3456,16,8,16
  1260                        	.member	NominalMediaRotationRate,3472,16,8,16
  1261                        	.member	ReservedWord218,3488,16,8,16
  1262                        	.member	NVCacheOptions,3504,10,8,16,98
  1263                        	.member	WriteReadVerifySectorCountMode,3520,16,1
                    7,8
  1264                        	.member	ReservedWord220,3528,16,17,8
  1265                        	.member	ReservedWord221,3536,16,8,16
  1266                        	.member	TransportMajorVersion,3552,10,8,16,99
  1267                        	.member	TransportMinorVersion,3568,16,8,16
  1268                        	.member	ReservedWord224,3584,112,8,0,6
  Thu Dec  3 2020 22:25                                                Page 25


  1269                        	.member	ExtendedNumberOfUserAddressableSectors,3
                    680,114,8,0,2
  1270                        	.member	MinBlocksPerDownloadMicrocodeMode03,3744
                    ,16,8,16
  1271                        	.member	MaxBlocksPerDownloadMicrocodeMode03,3760
                    ,16,8,16
  1272                        	.member	ReservedWord236,3776,112,8,0,19
  1273                        	.member	Signature,4080,16,17,8
  1274                        	.member	CheckSum,4088,16,17,8
  1275                        	.eos
  1276                        	.stag	_FXDosDevice,5648,101
  1277                        	.member	type,0,14,8,8
  1278                        	.member	initialized,8,14,8,8
  1279                        	.member	devdata,16,129,8,32
  1280                        	.member	devstatus,48,14,8,8
  1281                        	.member	bootSector,56,10,8,928,71
  1282                        	.member	partitionTable,984,10,8,128,72
  1283                        	.member	fileAllocationTable,1112,110,8,0,512
  1284                        	.member	bsOffset,5208,18,8,32
  1285                        	.member	rootDirSectors,5240,18,8,32
  1286                        	.member	root_entry_count,5272,5,8,16
  1287                        	.member	rootEntriesPerPage,5288,5,8,16
  1288                        	.member	sectors_per_cluster,5304,5,8,16
  1289                        	.member	fatTableOffset,5320,18,8,32
  1290                        	.member	volume_name,5352,110,8,0,12
  1291                        	.member	root_volume_name,5448,110,8,0,12
  1292                        	.member	errorCode,5544,14,8,8
  1293                        	.member	pfInit,5552,641,8,32
  1294                        	.member	pfReader,5584,654,8,32
  1295                        	.member	pfWriter,5616,654,8,32
  1296                        	.eos
  1297                        	.line	705
  1298                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.c",4
  1299                        ;#include "fxmemorymanager.h"
  1300                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",0
  1301                        	.line	39
  1302                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.c",5
  1303                        ;#include "fxeventmanager.h"
  1304                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",0
  1305                        	.line	743
  1306                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.c",6
  1307                        ;#include "fxos_desktop_proc.h"
  1308                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos_desktop_proc.h",0
  1309                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
  1310                        	.line	708
  1311                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos_desktop_proc.h",5
  1312                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256fmx.h",0
  1313                        	.line	1325
  1314                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
  Thu Dec  3 2020 22:25                                                Page 26


                    space\FXOSv1\src\fxos_desktop_proc.h",8
  1315                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",0
  1316                        	.line	71
  1317                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos_desktop_proc.h",13
  1318                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",0
  1319                        	.line	743
  1320                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos_desktop_proc.h",14
  1321                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxgui.h",0
  1322                        	.line	264
  1323                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos_desktop_proc.h",15
  1324                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",0
  1325                        	.line	362
  1326                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos_desktop_proc.h",16
  1327                        	.line	62
  1328                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.c",7
  1329                        ;#include "fxconsole.h"
  1330                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",0
  1331                        	.line	171
  1332                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.c",8
  1333                        ;#include "ff.h"
  1334                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ff.h",0
  1335                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ffconf.h",0
  1336                        	.line	298
  1337                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ff.h",29
  1338                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
  1339                        	.line	708
  1340                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ff.h",30
  1341                        	.stag	fake102_,4472,102
  1342                        	.member	fs_type,0,14,8,8
  1343                        	.member	pdrv,8,14,8,8
  1344                        	.member	n_fats,16,14,8,8
  1345                        	.member	wflag,24,14,8,8
  1346                        	.member	fsi_flag,32,14,8,8
  1347                        	.member	id,40,5,8,16
  1348                        	.member	n_rootdir,56,5,8,16
  1349                        	.member	csize,72,5,8,16
  1350                        	.member	last_clst,88,18,8,32
  1351                        	.member	free_clst,120,18,8,32
  1352                        	.member	n_fatent,152,18,8,32
  1353                        	.member	fsize,184,18,8,32
  1354                        	.member	volbase,216,18,8,32
  1355                        	.member	fatbase,248,18,8,32
  Thu Dec  3 2020 22:25                                                Page 27


  1356                        	.member	dirbase,280,18,8,32
  1357                        	.member	database,312,18,8,32
  1358                        	.member	winsect,344,18,8,32
  1359                        	.member	win,376,110,8,0,512
  1360                        	.eos
  1361                        	.stag	fake103_,128,103
  1362                        	.member	fs,0,138,8,32,102
  1363                        	.member	id,32,5,8,16
  1364                        	.member	attr,48,14,8,8
  1365                        	.member	stat,56,14,8,8
  1366                        	.member	sclust,64,18,8,32
  1367                        	.member	objsize,96,18,8,32
  1368                        	.eos
  1369                        	.stag	fake104_,4400,104
  1370                        	.member	obj,0,10,8,128,103
  1371                        	.member	flag,128,14,8,8
  1372                        	.member	err,136,14,8,8
  1373                        	.member	fptr,144,18,8,32
  1374                        	.member	clust,176,18,8,32
  1375                        	.member	sect,208,18,8,32
  1376                        	.member	dir_sect,240,18,8,32
  1377                        	.member	dir_ptr,272,142,8,32
  1378                        	.member	buf,304,110,8,0,512
  1379                        	.eos
  1380                        	.stag	fake105_,352,105
  1381                        	.member	obj,0,10,8,128,103
  1382                        	.member	dptr,128,18,8,32
  1383                        	.member	clust,160,18,8,32
  1384                        	.member	sect,192,18,8,32
  1385                        	.member	dir,224,142,8,32
  1386                        	.member	fn,256,110,8,0,12
  1387                        	.eos
  1388                        	.stag	fake106_,176,106
  1389                        	.member	fsize,0,18,8,32
  1390                        	.member	fdate,32,5,8,16
  1391                        	.member	ftime,48,5,8,16
  1392                        	.member	fattrib,64,14,8,8
  1393                        	.member	fname,72,110,8,0,13
  1394                        	.eos
  1395                        	.stag	fake107_,80,107
  1396                        	.member	fmt,0,14,8,8
  1397                        	.member	n_fat,8,14,8,8
  1398                        	.member	align,16,16,8,16
  1399                        	.member	n_root,32,16,8,16
  1400                        	.member	au_size,48,18,8,32
  1401                        	.eos
  1402                        	.line	429
  1403                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.c",9
  1404                        ;//#include "OMF_Load.h"
  1405                        ;//#include "OMF_Dc_Memory.h"
  1406                        ;//#include "basicfont.h"
  1407                        ;
  1408                        ;#define IDLE_PROC	(0)
  1409                        ;#define LOW_PROC    (1)
  1410                        ;#define TOP_PROC    (255)
  1411                        ;#define MAX_PROCS   (256)
  1412                        ;
  Thu Dec  3 2020 22:25                                                Page 28


  1413                        ;//static FIL fp;
  1414                        ;//static FRESULT fres;
  1415                        ;//static FATFS FatFs;
  1416                        ;
  1417                        ;static FXEventProc 		eventProcs[MAX_P
                    ROCS];
  1418                        ;static PFXEVENTPROCESS  eventProcess[MAX_PROCS];
  1419                        ;
  1420                        ;static ULONG _k_system_timer = 0;
  1421                        	data
  1422                        ~~_k_system_timer:
  1423 00:0000: 00 00 00 00  	dl	$0
  1424 00:0004:              	ends
  1425                        ;static HWND	 _k_hLockedFocus 	= NULL;
  1426                        	data
  1427                        ~~_k_hLockedFocus:
  1428 00:0004: 00 00 00 00  	dl	$0
  1429 00:0008:              	ends
  1430                        ;static BOOL	 _k_bNCLockedFocus  = FALSE;
  1431                        	data
  1432                        ~~_k_bNCLockedFocus:
  1433 00:0008: 00           	db	$0
  1434 00:0009:              	ends
  1435                        ;//static int scpu = 0;
  1436                        ;//static char idlespinner[] = {'|','/','-','\\'};
  1437                        ;
  1438                        ;//static FXOSMESSAGE smsg;
  1439                        ;static FXQUEUE FAR *_k_eventQueue = NULL;
  1440                        	data
  1441                        ~~_k_eventQueue:
  1442 00:0009: 00 00 00 00  	dl	$0
  1443 00:000D:              	ends
  1444                        ;static MOUSE_MSG_STATE _k_mouseState;
  1445                        ;
  1446                        ;static UINT _subTick = 0x0001;
  1447                        	data
  1448                        ~~_subTick:
  1449 00:000D: 01 00        	dw	$1
  1450 00:000F:              	ends
  1451                        ;
  1452                        ;static ULONG THIS_MODULE = 0xB0000001;
  1453                        	data
  1454                        ~~THIS_MODULE:
  1455 00:000F: 01 00 00 B0  	dl	$B0000001
  1456 00:0013:              	ends
  1457                        ;
  1458                        ;#pragma section CODE=EVTMAN,offset $5:0000
  1459                        EVTMAN	section	offset $5:0000
  1460 05:0000:              	ends
  1461                        ;
  1462                        ;BOOL initHD = FALSE;
  1463                        	data
  1464                        	xdef	~~initHD
  1465                        ~~initHD:
  1466 00:0013: 00           	db	$0
  1467 00:0014:              	ends
  1468                        ;
  1469                        ;void DoWndProcs(LPVOID ctx,LPVOID data);
  Thu Dec  3 2020 22:25                                                Page 29


  1470                        ;//int reg_config( void );
  1471                        ;//typedef void (*DllMain)(UINT argc,LPVOID *argv)
                    ;
  1472                        ;typedef void (*DllMain)(LPCSTR segment);
  1473                        ;
  1474                        ;extern ULONG _system_timer;
  1475                        ;//static UCHAR floppybuffer[512];
  1476                        ;
  1477                        ;KEYCODE _k_keyCodesSet[] =
  1478                        	data
  1479                        	xdef	~~_k_keyCodesSet
  1480                        ~~_k_keyCodesSet:
  1481                        ;{
  1482                        ;		0,
  1483 00:0014: 00           	db	$0
  1484                        ;		27,
  1485 00:0015: 1B           	db	$1B
  1486                        ;		'1',
  1487 00:0016: 31           	db	$31
  1488                        ;		'2',
  1489 00:0017: 32           	db	$32
  1490                        ;		'3',
  1491 00:0018: 33           	db	$33
  1492                        ;		'4',
  1493 00:0019: 34           	db	$34
  1494                        ;		'5',
  1495 00:001A: 35           	db	$35
  1496                        ;		'6',
  1497 00:001B: 36           	db	$36
  1498                        ;		'7',
  1499 00:001C: 37           	db	$37
  1500                        ;		'8',
  1501 00:001D: 38           	db	$38
  1502                        ;		'9',
  1503 00:001E: 39           	db	$39
  1504                        ;		'0',
  1505 00:001F: 30           	db	$30
  1506                        ;		'-',
  1507 00:0020: 2D           	db	$2D
  1508                        ;		'=',
  1509 00:0021: 3D           	db	$3D
  1510                        ;		 8,
  1511 00:0022: 08           	db	$8
  1512                        ;		 9,
  1513 00:0023: 09           	db	$9
  1514                        ;		'q',
  1515 00:0024: 71           	db	$71
  1516                        ;		'w',
  1517 00:0025: 77           	db	$77
  1518                        ;		'e',
  1519 00:0026: 65           	db	$65
  1520                        ;		'r',
  1521 00:0027: 72           	db	$72
  1522                        ;		't',
  1523 00:0028: 74           	db	$74
  1524                        ;		'y',
  1525 00:0029: 79           	db	$79
  1526                        ;		'u',
  Thu Dec  3 2020 22:25                                                Page 30


  1527 00:002A: 75           	db	$75
  1528                        ;		'i',
  1529 00:002B: 69           	db	$69
  1530                        ;		'o',
  1531 00:002C: 6F           	db	$6F
  1532                        ;		'p',
  1533 00:002D: 70           	db	$70
  1534                        ;		'[',
  1535 00:002E: 5B           	db	$5B
  1536                        ;		']',
  1537 00:002F: 5D           	db	$5D
  1538                        ;		13,
  1539 00:0030: 0D           	db	$D
  1540                        ;		0,//'left control'
  1541 00:0031: 00           	db	$0
  1542                        ;		'a',
  1543 00:0032: 61           	db	$61
  1544                        ;		's',
  1545 00:0033: 73           	db	$73
  1546                        ;		'd',
  1547 00:0034: 64           	db	$64
  1548                        ;		'f',
  1549 00:0035: 66           	db	$66
  1550                        ;		'g',
  1551 00:0036: 67           	db	$67
  1552                        ;		'h',
  1553 00:0037: 68           	db	$68
  1554                        ;		'j',
  1555 00:0038: 6A           	db	$6A
  1556                        ;		'k',
  1557 00:0039: 6B           	db	$6B
  1558                        ;		'l',
  1559 00:003A: 6C           	db	$6C
  1560                        ;		';',
  1561 00:003B: 3B           	db	$3B
  1562                        ;		'\'',
  1563 00:003C: 27           	db	$27
  1564                        ;		'`',
  1565 00:003D: 60           	db	$60
  1566                        ;		0,//'left shift',
  1567 00:003E: 00           	db	$0
  1568                        ;		'\\',
  1569 00:003F: 5C           	db	$5C
  1570                        ;		'z',
  1571 00:0040: 7A           	db	$7A
  1572                        ;		'x',
  1573 00:0041: 78           	db	$78
  1574                        ;		'c',
  1575 00:0042: 63           	db	$63
  1576                        ;		'v',
  1577 00:0043: 76           	db	$76
  1578                        ;		'b',
  1579 00:0044: 62           	db	$62
  1580                        ;		'n',
  1581 00:0045: 6E           	db	$6E
  1582                        ;		'm',
  1583 00:0046: 6D           	db	$6D
  1584                        ;		',',
  Thu Dec  3 2020 22:25                                                Page 31


  1585 00:0047: 2C           	db	$2C
  1586                        ;		'.',
  1587 00:0048: 2E           	db	$2E
  1588                        ;		'/',
  1589 00:0049: 2F           	db	$2F
  1590                        ;		0,//'right shift',
  1591 00:004A: 00           	db	$0
  1592                        ;		'*',
  1593 00:004B: 2A           	db	$2A
  1594                        ;		0,//'left alt',
  1595 00:004C: 00           	db	$0
  1596                        ;		32,
  1597 00:004D: 20           	db	$20
  1598                        ;		0,//'capslock',
  1599 00:004E: 00           	db	$0
  1600                        ;		0,//'f1',
  1601 00:004F: 00           	db	$0
  1602                        ;		0,//'f2',
  1603 00:0050: 00           	db	$0
  1604                        ;		0,//'f3',
  1605 00:0051: 00           	db	$0
  1606                        ;		0,//'f4',
  1607 00:0052: 00           	db	$0
  1608                        ;		0,//'f5',
  1609 00:0053: 00           	db	$0
  1610                        ;		0,//'f6',
  1611 00:0054: 00           	db	$0
  1612                        ;		0,//'f7',
  1613 00:0055: 00           	db	$0
  1614                        ;		0,//'f8',
  1615 00:0056: 00           	db	$0
  1616                        ;		0,//'f9',
  1617 00:0057: 00           	db	$0
  1618                        ;		0,//'f10',
  1619 00:0058: 00           	db	$0
  1620                        ;		0,//'numberlock',
  1621 00:0059: 00           	db	$0
  1622                        ;		0,//'scrolllock',
  1623 00:005A: 00           	db	$0
  1624                        ;		'7',
  1625 00:005B: 37           	db	$37
  1626                        ;		'8',
  1627 00:005C: 38           	db	$38
  1628                        ;		'9',
  1629 00:005D: 39           	db	$39
  1630                        ;		'-',
  1631 00:005E: 2D           	db	$2D
  1632                        ;		'4',
  1633 00:005F: 34           	db	$34
  1634                        ;		'5',
  1635 00:0060: 35           	db	$35
  1636                        ;		'6',
  1637 00:0061: 36           	db	$36
  1638                        ;		'+',
  1639 00:0062: 2B           	db	$2B
  1640                        ;		'1',
  1641 00:0063: 31           	db	$31
  1642                        ;		'2',
  Thu Dec  3 2020 22:25                                                Page 32


  1643 00:0064: 32           	db	$32
  1644                        ;		'3',
  1645 00:0065: 33           	db	$33
  1646                        ;		'0',
  1647 00:0066: 30           	db	$30
  1648                        ;		'.',
  1649 00:0067: 2E           	db	$2E
  1650                        ;		 0,
  1651 00:0068: 00           	db	$0
  1652                        ;		 0,
  1653 00:0069: 00           	db	$0
  1654                        ;		 0,
  1655 00:006A: 00           	db	$0
  1656                        ;		 0,//'f11',
  1657 00:006B: 00           	db	$0
  1658                        ;		 0//'f12'
  1659                        ;};
  1660 00:006C: 00           	db	$0
  1661 00:006D:              	ends
  1662                        ;
  1663                        ;KEYCODE _k_keyCodesShiftSet[] =
  1664                        	data
  1665                        	xdef	~~_k_keyCodesShiftSet
  1666                        ~~_k_keyCodesShiftSet:
  1667                        ;{
  1668                        ;		0,
  1669 00:006D: 00           	db	$0
  1670                        ;		27,
  1671 00:006E: 1B           	db	$1B
  1672                        ;		'!',
  1673 00:006F: 21           	db	$21
  1674                        ;		'@',
  1675 00:0070: 40           	db	$40
  1676                        ;		'#',
  1677 00:0071: 23           	db	$23
  1678                        ;		'$',
  1679 00:0072: 24           	db	$24
  1680                        ;		'%',
  1681 00:0073: 25           	db	$25
  1682                        ;		'^',
  1683 00:0074: 5E           	db	$5E
  1684                        ;		'&',
  1685 00:0075: 26           	db	$26
  1686                        ;		'*',
  1687 00:0076: 2A           	db	$2A
  1688                        ;		'(',
  1689 00:0077: 28           	db	$28
  1690                        ;		')',
  1691 00:0078: 29           	db	$29
  1692                        ;		'_',
  1693 00:0079: 5F           	db	$5F
  1694                        ;		'+',
  1695 00:007A: 2B           	db	$2B
  1696                        ;		 8,
  1697 00:007B: 08           	db	$8
  1698                        ;		 9,
  1699 00:007C: 09           	db	$9
  1700                        ;		'Q',
  Thu Dec  3 2020 22:25                                                Page 33


  1701 00:007D: 51           	db	$51
  1702                        ;		'W',
  1703 00:007E: 57           	db	$57
  1704                        ;		'E',
  1705 00:007F: 45           	db	$45
  1706                        ;		'R',
  1707 00:0080: 52           	db	$52
  1708                        ;		'T',
  1709 00:0081: 54           	db	$54
  1710                        ;		'Y',
  1711 00:0082: 59           	db	$59
  1712                        ;		'U',
  1713 00:0083: 55           	db	$55
  1714                        ;		'I',
  1715 00:0084: 49           	db	$49
  1716                        ;		'O',
  1717 00:0085: 4F           	db	$4F
  1718                        ;		'P',
  1719 00:0086: 50           	db	$50
  1720                        ;		'{',
  1721 00:0087: 7B           	db	$7B
  1722                        ;		'}',
  1723 00:0088: 7D           	db	$7D
  1724                        ;		13,
  1725 00:0089: 0D           	db	$D
  1726                        ;		0,//'left control'
  1727 00:008A: 00           	db	$0
  1728                        ;		'A',
  1729 00:008B: 41           	db	$41
  1730                        ;		'S',
  1731 00:008C: 53           	db	$53
  1732                        ;		'D',
  1733 00:008D: 44           	db	$44
  1734                        ;		'F',
  1735 00:008E: 46           	db	$46
  1736                        ;		'G',
  1737 00:008F: 47           	db	$47
  1738                        ;		'H',
  1739 00:0090: 48           	db	$48
  1740                        ;		'J',
  1741 00:0091: 4A           	db	$4A
  1742                        ;		'K',
  1743 00:0092: 4B           	db	$4B
  1744                        ;		'L',
  1745 00:0093: 4C           	db	$4C
  1746                        ;		':',
  1747 00:0094: 3A           	db	$3A
  1748                        ;		'"',
  1749 00:0095: 22           	db	$22
  1750                        ;		'~',
  1751 00:0096: 7E           	db	$7E
  1752                        ;		0,//'left shift',
  1753 00:0097: 00           	db	$0
  1754                        ;		'|',
  1755 00:0098: 7C           	db	$7C
  1756                        ;		'Z',
  1757 00:0099: 5A           	db	$5A
  1758                        ;		'X',
  Thu Dec  3 2020 22:25                                                Page 34


  1759 00:009A: 58           	db	$58
  1760                        ;		'C',
  1761 00:009B: 43           	db	$43
  1762                        ;		'V',
  1763 00:009C: 56           	db	$56
  1764                        ;		'B',
  1765 00:009D: 42           	db	$42
  1766                        ;		'N',
  1767 00:009E: 4E           	db	$4E
  1768                        ;		'M',
  1769 00:009F: 4D           	db	$4D
  1770                        ;		'<',
  1771 00:00A0: 3C           	db	$3C
  1772                        ;		'>',
  1773 00:00A1: 3E           	db	$3E
  1774                        ;		'?',
  1775 00:00A2: 3F           	db	$3F
  1776                        ;		0,//'right shift',
  1777 00:00A3: 00           	db	$0
  1778                        ;		'*',
  1779 00:00A4: 2A           	db	$2A
  1780                        ;		0,//'left alt',
  1781 00:00A5: 00           	db	$0
  1782                        ;		32,
  1783 00:00A6: 20           	db	$20
  1784                        ;		0,//'CapsLock',
  1785 00:00A7: 00           	db	$0
  1786                        ;		0,//'F1',
  1787 00:00A8: 00           	db	$0
  1788                        ;		0,//'F2',
  1789 00:00A9: 00           	db	$0
  1790                        ;		0,//'F3',
  1791 00:00AA: 00           	db	$0
  1792                        ;		0,//'F4',
  1793 00:00AB: 00           	db	$0
  1794                        ;		0,//'F5',
  1795 00:00AC: 00           	db	$0
  1796                        ;		0,//'F6',
  1797 00:00AD: 00           	db	$0
  1798                        ;		0,//'F7',
  1799 00:00AE: 00           	db	$0
  1800                        ;		0,//'F8',
  1801 00:00AF: 00           	db	$0
  1802                        ;		0,//'F9',
  1803 00:00B0: 00           	db	$0
  1804                        ;		0,//'F10',
  1805 00:00B1: 00           	db	$0
  1806                        ;		0,//'NumberLock',
  1807 00:00B2: 00           	db	$0
  1808                        ;		0,//'ScrollLock',
  1809 00:00B3: 00           	db	$0
  1810                        ;		'7',
  1811 00:00B4: 37           	db	$37
  1812                        ;		'8',
  1813 00:00B5: 38           	db	$38
  1814                        ;		'9',
  1815 00:00B6: 39           	db	$39
  1816                        ;		'-',
  Thu Dec  3 2020 22:25                                                Page 35


  1817 00:00B7: 2D           	db	$2D
  1818                        ;		'4',
  1819 00:00B8: 34           	db	$34
  1820                        ;		'5',
  1821 00:00B9: 35           	db	$35
  1822                        ;		'6',
  1823 00:00BA: 36           	db	$36
  1824                        ;		'+',
  1825 00:00BB: 2B           	db	$2B
  1826                        ;		'1',
  1827 00:00BC: 31           	db	$31
  1828                        ;		'2',
  1829 00:00BD: 32           	db	$32
  1830                        ;		'3',
  1831 00:00BE: 33           	db	$33
  1832                        ;		'0',
  1833 00:00BF: 30           	db	$30
  1834                        ;		'.',
  1835 00:00C0: 2E           	db	$2E
  1836                        ;		 0,
  1837 00:00C1: 00           	db	$0
  1838                        ;		 0,
  1839 00:00C2: 00           	db	$0
  1840                        ;		 0,
  1841 00:00C3: 00           	db	$0
  1842                        ;		 0,//'F11',
  1843 00:00C4: 00           	db	$0
  1844                        ;		 0//'F12'
  1845                        ;};
  1846 00:00C5: 00           	db	$0
  1847 00:00C6:              	ends
  1848                        ;
  1849                        ;KEYCODE _k_keyCodesExtSet[] =
  1850                        	data
  1851                        	xdef	~~_k_keyCodesExtSet
  1852                        ~~_k_keyCodesExtSet:
  1853                        ;{
  1854                        ;		0
  1855                        ;};
  1856 00:00C6: 00           	db	$0
  1857 00:00C7:              	ends
  1858                        ;
  1859                        ;
  1860                        ;ULONG k_get_systemtimer(void)
  1861                        ;{
  1862                        	.line	244
  1863                        	.line	245
  1864                        	EVTMAN
  1865                        	xdef	~~k_get_systemtimer
  1866                        	func
  1867                        	.function	245
  1868                        ~~k_get_systemtimer:
  1869                        	longa	on
  1870                        	longi	on
  1871 05:0000: 3B           	tsc
  1872 05:0001: 38           	sec
  1873 05:0002: E9 04 00     	sbc	#L2
  1874 05:0005: 1B           	tcs
  Thu Dec  3 2020 22:25                                                Page 36


  1875 05:0006: 0B           	phd
  1876 05:0007: 5B           	tcd
  1877                        	.block	245
  1878                        ;	return _system_timer++;
  1879                        	.line	246
  1880 05:0008: AD xx xx     	lda	|~~_system_timer
  1881 05:000B: 85 01        	sta	<R0
  1882 05:000D: AD xx xx     	lda	|~~_system_timer+2
  1883 05:0010: 85 03        	sta	<R0+2
  1884 05:0012: EE xx xx     	inc	|~~_system_timer
  1885 05:0015: D0 03        	bne	L5
  1886 05:0017: EE xx xx     	inc	|~~_system_timer+2
  1887                        L5:
  1888 05:001A: A6 03        	ldx	<R0+2
  1889 05:001C: A5 01        	lda	<R0
  1890                        L6:
  1891 05:001E: A8           	tay
  1892 05:001F: 2B           	pld
  1893 05:0020: 3B           	tsc
  1894 05:0021: 18           	clc
  1895 05:0022: 69 04 00     	adc	#L2
  1896 05:0025: 1B           	tcs
  1897 05:0026: 98           	tya
  1898 05:0027: 6B           	rtl
  1899                        ;}
  1900                        	.line	247
  1901                        	.endblock	247
  1902             00000004   L2	equ	4
  1903             00000005   L3	equ	5
  1904 05:0028:              	ends
  1905                        	efunc
  1906                        	.endfunc	247,5,4
  1907                        	.line	247
  1908                        ;
  1909                        ;VOID k_initalize_event_manager(void)
  1910                        ;{
  1911                        	.line	249
  1912                        	.line	250
  1913                        	EVTMAN
  1914                        	xdef	~~k_initalize_event_manager
  1915                        	func
  1916                        	.function	250
  1917                        ~~k_initalize_event_manager:
  1918                        	longa	on
  1919                        	longi	on
  1920 05:0028: 3B           	tsc
  1921 05:0029: 38           	sec
  1922 05:002A: E9 04 00     	sbc	#L7
  1923 05:002D: 1B           	tcs
  1924 05:002E: 0B           	phd
  1925 05:002F: 5B           	tcd
  1926                        	.block	250
  1927                        ;	memset(&_k_mouseState,0,sizeof(MOUSE_MSG_STATE))
                    ;
  1928                        	.line	251
  1929 05:0030: F4 17 00     	pea	#<$17
  1930 05:0033: F4 00 00     	pea	#<$0
  1931 05:0036: A9 xx xx     	lda	#<~~_k_mouseState
  Thu Dec  3 2020 22:25                                                Page 37


  1932 05:0039: 85 01        	sta	<R0
  1933                        	xref	_BEG_DATA
  1934 05:003B: A9 xx xx     	lda	#_BEG_DATA>>16
  1935 05:003E: 85 03        	sta	<R0+2
  1936 05:0040: D4 03        	pei	<R0+2
  1937 05:0042: D4 01        	pei	<R0
  1938 05:0044: 22 xx xx xx  	jsl	~~memset
  1939                        ;
  1940                        ;	_k_eventQueue = k_mem_allocate_heap(sizeof(FXQUE
                    UE));
  1941                        	.line	253
  1942 05:0048: F4 0A 00     	pea	#<$a
  1943 05:004B: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  1944 05:004F: 8D xx xx     	sta	|~~_k_eventQueue
  1945 05:0052: 8E xx xx     	stx	|~~_k_eventQueue+2
  1946                        ;	if(_k_eventQueue!=NULL)
  1947                        	.line	254
  1948                        ;	{
  1949 05:0055: AD xx xx     	lda	|~~_k_eventQueue
  1950 05:0058: 0D xx xx     	ora	|~~_k_eventQueue+2
  1951 05:005B: D0 03        	bne	L10
  1952 05:005D: 82 0C 00     	brl	L10001
  1953                        L10:
  1954                        	.line	255
  1955                        ;		k_initialize(_k_eventQueue);
  1956                        	.line	256
  1957 05:0060: AD xx xx     	lda	|~~_k_eventQueue+2
  1958 05:0063: 48           	pha
  1959 05:0064: AD xx xx     	lda	|~~_k_eventQueue
  1960 05:0067: 48           	pha
  1961 05:0068: 22 xx xx xx  	jsl	~~k_initialize
  1962                        ;	}
  1963                        	.line	257
  1964                        ;}
  1965                        L10001:
  1966                        	.line	258
  1967                        L11:
  1968 05:006C: 2B           	pld
  1969 05:006D: 3B           	tsc
  1970 05:006E: 18           	clc
  1971 05:006F: 69 04 00     	adc	#L7
  1972 05:0072: 1B           	tcs
  1973 05:0073: 6B           	rtl
  1974                        	.endblock	258
  1975             00000004   L7	equ	4
  1976             00000005   L8	equ	5
  1977 05:0074:              	ends
  1978                        	efunc
  1979                        	.endfunc	258,5,4
  1980                        	.line	258
  1981                        ;
  1982                        ;void k_signal_sol_event(long FAR *pktick)
  1983                        ;{
  1984                        	.line	260
  1985                        	.line	261
  1986                        	EVTMAN
  1987                        	xdef	~~k_signal_sol_event
  1988                        	func
  Thu Dec  3 2020 22:25                                                Page 38


  1989                        	.function	261
  1990                        ~~k_signal_sol_event:
  1991                        	longa	on
  1992                        	longi	on
  1993 05:0074: 3B           	tsc
  1994 05:0075: 38           	sec
  1995 05:0076: E9 00 00     	sbc	#L12
  1996 05:0079: 1B           	tcs
  1997 05:007A: 0B           	phd
  1998 05:007B: 5B           	tcd
  1999             00000004   pktick_0	set	4
  2000                        	.block	261
  2001                        ;	return;
  2002                        	.sym	pktick,4,135,6,32
  2003                        	.line	262
  2004                        L15:
  2005 05:007C: A5 02        	lda	<L12+2
  2006 05:007E: 85 06        	sta	<L12+2+4
  2007 05:0080: A5 01        	lda	<L12+1
  2008 05:0082: 85 05        	sta	<L12+1+4
  2009 05:0084: 2B           	pld
  2010 05:0085: 3B           	tsc
  2011 05:0086: 18           	clc
  2012 05:0087: 69 04 00     	adc	#L12+4
  2013 05:008A: 1B           	tcs
  2014 05:008B: 6B           	rtl
  2015                        ;}
  2016                        	.line	263
  2017                        	.endblock	263
  2018             00000000   L12	equ	0
  2019             00000001   L13	equ	1
  2020 05:008C:              	ends
  2021                        	efunc
  2022                        	.endfunc	263,1,0
  2023                        	.line	263
  2024                        ;
  2025                        ;BOOL k_event_lock_focus(HWND hWnd)
  2026                        ;{
  2027                        	.line	265
  2028                        	.line	266
  2029                        	EVTMAN
  2030                        	xdef	~~k_event_lock_focus
  2031                        	func
  2032                        	.function	266
  2033                        ~~k_event_lock_focus:
  2034                        	longa	on
  2035                        	longi	on
  2036 05:008C: 3B           	tsc
  2037 05:008D: 38           	sec
  2038 05:008E: E9 04 00     	sbc	#L16
  2039 05:0091: 1B           	tcs
  2040 05:0092: 0B           	phd
  2041 05:0093: 5B           	tcd
  2042             00000004   hWnd_0	set	4
  2043                        	.block	266
  2044                        ;	return k_event_lock_focus_ex(hWnd,FALSE);
  2045                        	.sym	hWnd,4,129,6,32
  2046                        	.line	267
  Thu Dec  3 2020 22:25                                                Page 39


  2047 05:0094: F4 00 00     	pea	#<$0
  2048 05:0097: D4 0A        	pei	<L16+hWnd_0+2
  2049 05:0099: D4 08        	pei	<L16+hWnd_0
  2050 05:009B: 22 BC 00 05  	jsl	~~k_event_lock_focus_ex
  2051 05:009F: E2 20        	sep	#$20
  2052                        	longa	off
  2053 05:00A1: 85 01        	sta	<R0
  2054 05:00A3: C2 20        	rep	#$20
  2055                        	longa	on
  2056 05:00A5: A5 01        	lda	<R0
  2057 05:00A7: 29 FF 00     	and	#$ff
  2058                        L19:
  2059 05:00AA: A8           	tay
  2060 05:00AB: A5 06        	lda	<L16+2
  2061 05:00AD: 85 0A        	sta	<L16+2+4
  2062 05:00AF: A5 05        	lda	<L16+1
  2063 05:00B1: 85 09        	sta	<L16+1+4
  2064 05:00B3: 2B           	pld
  2065 05:00B4: 3B           	tsc
  2066 05:00B5: 18           	clc
  2067 05:00B6: 69 08 00     	adc	#L16+4
  2068 05:00B9: 1B           	tcs
  2069 05:00BA: 98           	tya
  2070 05:00BB: 6B           	rtl
  2071                        ;}
  2072                        	.line	268
  2073                        	.endblock	268
  2074             00000004   L16	equ	4
  2075             00000005   L17	equ	5
  2076 05:00BC:              	ends
  2077                        	efunc
  2078                        	.endfunc	268,5,4
  2079                        	.line	268
  2080                        ;
  2081                        ;BOOL k_event_lock_focus_ex(HWND hWnd,BOOL asNoncl
                    ient)
  2082                        ;{
  2083                        	.line	270
  2084                        	.line	271
  2085                        	EVTMAN
  2086                        	xdef	~~k_event_lock_focus_ex
  2087                        	func
  2088                        	.function	271
  2089                        ~~k_event_lock_focus_ex:
  2090                        	longa	on
  2091                        	longi	on
  2092 05:00BC: 3B           	tsc
  2093 05:00BD: 38           	sec
  2094 05:00BE: E9 01 00     	sbc	#L20
  2095 05:00C1: 1B           	tcs
  2096 05:00C2: 0B           	phd
  2097 05:00C3: 5B           	tcd
  2098             00000004   hWnd_0	set	4
  2099             00000008   asNonclient_0	set	8
  2100                        	.block	271
  2101                        ;	BOOL bRet = FALSE;
  2102                        ;
  2103                        ;	if(_k_hLockedFocus == NULL)
  Thu Dec  3 2020 22:25                                                Page 40


  2104             00000000   bRet_1	set	0
  2105                        	.sym	bRet,0,14,1,8
  2106                        	.sym	hWnd,4,129,6,32
  2107                        	.sym	asNonclient,8,14,6,8
  2108 05:00C4: E2 20        	sep	#$20
  2109                        	longa	off
  2110 05:00C6: 64 01        	stz	<L21+bRet_1
  2111 05:00C8: C2 20        	rep	#$20
  2112                        	longa	on
  2113                        	.line	274
  2114                        ;	{
  2115 05:00CA: AD xx xx     	lda	|~~_k_hLockedFocus
  2116 05:00CD: 0D xx xx     	ora	|~~_k_hLockedFocus+2
  2117 05:00D0: F0 03        	beq	L23
  2118 05:00D2: 82 1B 00     	brl	L10002
  2119                        L23:
  2120                        	.line	275
  2121                        ;		_k_hLockedFocus = hWnd;
  2122                        	.line	276
  2123 05:00D5: A5 05        	lda	<L20+hWnd_0
  2124 05:00D7: 8D xx xx     	sta	|~~_k_hLockedFocus
  2125 05:00DA: A5 07        	lda	<L20+hWnd_0+2
  2126 05:00DC: 8D xx xx     	sta	|~~_k_hLockedFocus+2
  2127                        ;		bRet = TRUE;
  2128                        	.line	277
  2129 05:00DF: E2 20        	sep	#$20
  2130                        	longa	off
  2131 05:00E1: A9 01        	lda	#$1
  2132 05:00E3: 85 01        	sta	<L21+bRet_1
  2133 05:00E5: C2 20        	rep	#$20
  2134                        	longa	on
  2135                        ;		_k_bNCLockedFocus = asNonclient;
  2136                        	.line	278
  2137 05:00E7: E2 20        	sep	#$20
  2138                        	longa	off
  2139 05:00E9: A5 09        	lda	<L20+asNonclient_0
  2140 05:00EB: 8D xx xx     	sta	|~~_k_bNCLockedFocus
  2141 05:00EE: C2 20        	rep	#$20
  2142                        	longa	on
  2143                        ;	}
  2144                        	.line	279
  2145                        ;
  2146                        ;	return bRet;
  2147                        L10002:
  2148                        	.line	281
  2149 05:00F0: A5 01        	lda	<L21+bRet_1
  2150 05:00F2: 29 FF 00     	and	#$ff
  2151                        L24:
  2152 05:00F5: A8           	tay
  2153 05:00F6: A5 03        	lda	<L20+2
  2154 05:00F8: 85 09        	sta	<L20+2+6
  2155 05:00FA: A5 02        	lda	<L20+1
  2156 05:00FC: 85 08        	sta	<L20+1+6
  2157 05:00FE: 2B           	pld
  2158 05:00FF: 3B           	tsc
  2159 05:0100: 18           	clc
  2160 05:0101: 69 07 00     	adc	#L20+6
  2161 05:0104: 1B           	tcs
  Thu Dec  3 2020 22:25                                                Page 41


  2162 05:0105: 98           	tya
  2163 05:0106: 6B           	rtl
  2164                        ;}
  2165                        	.line	282
  2166                        	.endblock	282
  2167             00000001   L20	equ	1
  2168             00000001   L21	equ	1
  2169 05:0107:              	ends
  2170                        	efunc
  2171                        	.endfunc	282,1,1
  2172                        	.line	282
  2173                        ;
  2174                        ;HWND k_event_get_locked_focus(void)
  2175                        ;{
  2176                        	.line	284
  2177                        	.line	285
  2178                        	EVTMAN
  2179                        	xdef	~~k_event_get_locked_focus
  2180                        	func
  2181                        	.function	285
  2182                        ~~k_event_get_locked_focus:
  2183                        	longa	on
  2184                        	longi	on
  2185 05:0107: 3B           	tsc
  2186 05:0108: 38           	sec
  2187 05:0109: E9 00 00     	sbc	#L25
  2188 05:010C: 1B           	tcs
  2189 05:010D: 0B           	phd
  2190 05:010E: 5B           	tcd
  2191                        	.block	285
  2192                        ;	return _k_hLockedFocus;
  2193                        	.line	286
  2194 05:010F: AE xx xx     	ldx	|~~_k_hLockedFocus+2
  2195 05:0112: AD xx xx     	lda	|~~_k_hLockedFocus
  2196                        L28:
  2197 05:0115: A8           	tay
  2198 05:0116: 2B           	pld
  2199 05:0117: 3B           	tsc
  2200 05:0118: 18           	clc
  2201 05:0119: 69 00 00     	adc	#L25
  2202 05:011C: 1B           	tcs
  2203 05:011D: 98           	tya
  2204 05:011E: 6B           	rtl
  2205                        ;}
  2206                        	.line	287
  2207                        	.endblock	287
  2208             00000000   L25	equ	0
  2209             00000001   L26	equ	1
  2210 05:011F:              	ends
  2211                        	efunc
  2212                        	.endfunc	287,1,0
  2213                        	.line	287
  2214                        ;
  2215                        ;HWND k_event_unlock_focus(void)
  2216                        ;{
  2217                        	.line	289
  2218                        	.line	290
  2219                        	EVTMAN
  Thu Dec  3 2020 22:25                                                Page 42


  2220                        	xdef	~~k_event_unlock_focus
  2221                        	func
  2222                        	.function	290
  2223                        ~~k_event_unlock_focus:
  2224                        	longa	on
  2225                        	longi	on
  2226 05:011F: 3B           	tsc
  2227 05:0120: 38           	sec
  2228 05:0121: E9 04 00     	sbc	#L29
  2229 05:0124: 1B           	tcs
  2230 05:0125: 0B           	phd
  2231 05:0126: 5B           	tcd
  2232                        	.block	290
  2233                        ;	HWND unlocked = NULL;
  2234                        ;
  2235                        ;	if(_k_hLockedFocus != NULL)
  2236             00000000   unlocked_1	set	0
  2237                        	.sym	unlocked,0,129,1,32
  2238 05:0127: 64 01        	stz	<L30+unlocked_1
  2239 05:0129: 64 03        	stz	<L30+unlocked_1+2
  2240                        	.line	293
  2241                        ;	{
  2242 05:012B: AD xx xx     	lda	|~~_k_hLockedFocus
  2243 05:012E: 0D xx xx     	ora	|~~_k_hLockedFocus+2
  2244 05:0131: D0 03        	bne	L32
  2245 05:0133: 82 25 00     	brl	L10003
  2246                        L32:
  2247                        	.line	294
  2248                        ;		unlocked = _k_hLockedFocus;
  2249                        	.line	295
  2250 05:0136: AD xx xx     	lda	|~~_k_hLockedFocus
  2251 05:0139: 85 01        	sta	<L30+unlocked_1
  2252 05:013B: AD xx xx     	lda	|~~_k_hLockedFocus+2
  2253 05:013E: 85 03        	sta	<L30+unlocked_1+2
  2254                        ;		k_debug_pointer("k_event_unlock_focus:pm
                    sg->hwnd:", unlocked);
  2255                        	.line	296
  2256 05:0140: D4 03        	pei	<L30+unlocked_1+2
  2257 05:0142: D4 01        	pei	<L30+unlocked_1
  2258 05:0144: F4 xx xx     	pea	#^L1
  2259 05:0147: F4 xx xx     	pea	#<L1
  2260 05:014A: 22 xx xx xx  	jsl	~~k_debug_pointer
  2261                        ;		_k_hLockedFocus = NULL;
  2262                        	.line	297
  2263 05:014E: 9C xx xx     	stz	|~~_k_hLockedFocus
  2264 05:0151: 9C xx xx     	stz	|~~_k_hLockedFocus+2
  2265                        ;		_k_bNCLockedFocus = FALSE;
  2266                        	.line	298
  2267 05:0154: E2 20        	sep	#$20
  2268                        	longa	off
  2269 05:0156: 9C xx xx     	stz	|~~_k_bNCLockedFocus
  2270 05:0159: C2 20        	rep	#$20
  2271                        	longa	on
  2272                        ;	}
  2273                        	.line	299
  2274                        ;
  2275                        ;	return unlocked;
  2276                        L10003:
  Thu Dec  3 2020 22:25                                                Page 43


  2277                        	.line	301
  2278 05:015B: A6 03        	ldx	<L30+unlocked_1+2
  2279 05:015D: A5 01        	lda	<L30+unlocked_1
  2280                        L33:
  2281 05:015F: A8           	tay
  2282 05:0160: 2B           	pld
  2283 05:0161: 3B           	tsc
  2284 05:0162: 18           	clc
  2285 05:0163: 69 04 00     	adc	#L29
  2286 05:0166: 1B           	tcs
  2287 05:0167: 98           	tya
  2288 05:0168: 6B           	rtl
  2289                        ;}
  2290                        	.line	302
  2291                        	.endblock	302
  2292             00000004   L29	equ	4
  2293             00000001   L30	equ	1
  2294 05:0169:              	ends
  2295                        	efunc
  2296                        	.endfunc	302,1,4
  2297                        	.line	302
  2298                        	data
  2299                        L1:
  2300 00:00C7: 6B 5F 65 76  	db	$6B,$5F,$65,$76,$65,$6E,$74,$5F,$75,$6E,
                    $6C,$6F,$63,$6B,$5F
       00:00CB: 65 6E 74 5F 
       00:00CF: 75 6E 6C 6F 
       00:00D3: 63 6B 5F 
  2301 00:00D6: 66 6F 63 75  	db	$66,$6F,$63,$75,$73,$3A,$70,$6D,$73,$67,
                    $2D,$3E,$68,$77,$6E
       00:00DA: 73 3A 70 6D 
       00:00DE: 73 67 2D 3E 
       00:00E2: 68 77 6E 
  2302 00:00E5: 64 3A 00     	db	$64,$3A,$00
  2303 00:00E8:              	ends
  2304                        ;
  2305                        ;
  2306                        ;#ifdef FXOS_WITH_LOCK
  2307                        ;
  2308                        ;void k_event_loop(void)
  2309                        ;{
  2310                        ;	PFXOSMESSAGE pmsg = NULL;
  2311                        ;	PFXOSMESSAGE processMessage = NULL;
  2312                        ;
  2313                        ;	PFXPROCESS 	 pprocess = NULL;
  2314                        ;	PFXNODE 	 hitNodeParent = NULL;
  2315                        ;	PFXNODE 	 hitNode = NULL;
  2316                        ;	PFXNODE 	 hitChildNode = NULL;
  2317                        ;	PWINDOW 	 pWin = NULL;
  2318                        ;
  2319                        ;	HWND		 hWndFocus = NULL;
  2320                        ;
  2321                        ;	DISKINFO diskInfo;
  2322                        ;	BOOL volAvail = FALSE;
  2323                        ;
  2324                        ;	BOOL floppy = FALSE;
  2325                        ;	INT floppyLBA = 0;
  2326                        ;	INT	x = 0;
  Thu Dec  3 2020 22:25                                                Page 44


  2327                        ;	INT y = 0;
  2328                        ;
  2329                        ;	/*
  2330                        ;	int c = 0;
  2331                        ;	int cb = 0;
  2332                        ;	int mb = 0;
  2333                        ;	int mx = 0;
  2334                        ;	int my = 0;
  2335                        ;	int kb = 0;
  2336                        ;	*/
  2337                        ;
  2338                        ;	k_debug_string("k_initalize_executive\r\n");
  2339                        ;	k_initalize_executive();
  2340                        ;	k_heap_integrity_check();
  2341                        ;	k_debug_string("k_initalize_event_manager\r\n");
  2342                        ;	k_initalize_event_manager();
  2343                        ;	k_heap_integrity_check();
  2344                        ;	k_debug_string("k_initalize_window_manager befor
                    e\r\n");
  2345                        ;	k_initializeWindowManager();
  2346                        ;	k_debug_string("k_initalize_window_manager after
                    \r\n");
  2347                        ;	k_heap_integrity_check();
  2348                        ;
  2349                        ;	if(_k_eventQueue!=NULL)
  2350                        ;	{
  2351                        ;		processMessage = k_create_process_msg(NU
                    LL);
  2352                        ;		k_heap_integrity_check();
  2353                        ;
  2354                        ;#ifdef USE_FX256_FMX
  2355                        ;
  2356                        ;		/*
  2357                        ;		pprocess = k_exec_launchProcess("@/conso
                    le");
  2358                        ;		if(pprocess!=NULL)
  2359                        ;		{
  2360                        ;			//k_attach_process_events((FXEve
                    ntProc)pprocess->execProc-data,pprocess);
  2361                        ;			k_attach_process_events(pprocess
                    ->execProc,pprocess);
  2362                        ;			k_exec_set_process_foreground(pp
                    rocess,FALSE);
  2363                        ;		}
  2364                        ;		*/
  2365                        ;
  2366                        ;		pprocess = k_exec_launchProcess("@/deskt
                    op");
  2367                        ;		if(pprocess!=NULL)
  2368                        ;		{
  2369                        ;			//k_attach_process_events((FXEve
                    ntProc)pprocess->execProc-data,pprocess);
  2370                        ;			k_attach_process_events(pprocess
                    ->execProc,pprocess);
  2371                        ;			k_exec_set_process_foreground(pp
                    rocess,TRUE);
  2372                        ;			k_heap_integrity_check();
  2373                        ;		}
  Thu Dec  3 2020 22:25                                                Page 45


  2374                        ;
  2375                        ;#else
  2376                        ;		pprocess = k_exec_launchProcess("@/conso
                    le");
  2377                        ;		if(pprocess!=NULL)
  2378                        ;		{
  2379                        ;			//k_attach_process_events((FXEve
                    ntProc)pprocess->execProc-data,pprocess);
  2380                        ;			k_attach_process_events(pprocess
                    ->execProc,pprocess);
  2381                        ;			k_exec_set_process_foreground(pp
                    rocess,TRUE);
  2382                        ;		}
  2383                        ;
  2384                        ;#endif
  2385                        ;
  2386                        ;		pprocess = k_exec_launchProcess("@/idle"
                    );
  2387                        ;		if(pprocess!=NULL)
  2388                        ;		{
  2389                        ;
  2390                        ;			//k_attach_process_events((FXEve
                    ntProc)pprocess->execProc-data,pprocess);
  2391                        ;			k_attach_process_events(pprocess
                    ->execProc,pprocess);
  2392                        ;			k_exec_set_process_foreground(pp
                    rocess,FALSE);
  2393                        ;		}
  2394                        ;
  2395                        ;
  2396                        ;
  2397                        ;		while(1)
  2398                        ;		{
  2399                        ;			//asm sei;
  2400                        ;
  2401                        ;			pmsg = (PFXOSMESSAGE)k_dequeue_w
                    ith_lock(_k_eventQueue);
  2402                        ;			while(pmsg!=NULL)
  2403                        ;			{
  2404                        ;				_k_system_timer = pmsg->
                    msgTime;
  2405                        ;
  2406                        ;				if(FX_MENU_COMMAND == pm
                    sg->type)
  2407                        ;					k_debug_pointer(
                    "k_event_loop event::FX_MENU_COMMAND:", pmsg->hwnd);
  2408                        ;
  2409                        ;				if(pmsg->type == FX_PROC
                    ESS_FLOPPY)
  2410                        ;				{
  2411                        ;					k_debug_string("
                    k_event_loop data:FX_PROCESS_FLOPPY\r\n");
  2412                        ;
  2413                        ;					//k_debug_byte_a
                    rray("k_event_loop data:FX_PROCESS_FLOPPY:", pmsg->pheap,512
                    );
  2414                        ;				}
  2415                        ;				if(pmsg->type == FX_PROC
  Thu Dec  3 2020 22:25                                                Page 46


                    ESS_SDCARD)
  2416                        ;				{
  2417                        ;					k_debug_string("
                    k_event_loop data:FX_PROCESS_SDCARD\r\n");
  2418                        ;
  2419                        ;					//k_debug_byte_a
                    rray("k_event_loop data:FX_PROCESS_FLOPPY:", pmsg->pheap,512
                    );
  2420                        ;				}
  2421                        ;
  2422                        ;				if((pmsg->type >= FX_MOU
                    SE_MOVE) &&  (pmsg->type <= FX_MBUTTON_DBLCLICK))
  2423                        ;				{
  2424                        ;					//k_debug_pointe
                    r("k_event_loop MOUSE hwnd:", pmsg->hwnd);
  2425                        ;					//k_debug_intege
                    r("k_event_loop MOUSE event:", pmsg->type);
  2426                        ;
  2427                        ;					x = MAKEWORD(pms
                    g->data[1],pmsg->data[2]);
  2428                        ;					y = MAKEWORD(pms
                    g->data[3],pmsg->data[4]);
  2429                        ;
  2430                        ;
  2431                        ;					hitNode = k_poin
                    t_hit_scan(x,y);
  2432                        ;					if(hitNode)
  2433                        ;					{
  2434                        ;						//k_debu
                    g_strings("SCAN-HIT PARENT:",HITTOWND(hitNode)->win_title);
  2435                        ;						if(HITTO
                    WND(hitNode)->pChildHitList)
  2436                        ;						{
  2437                        ;							
                    hitChildNode = k_point_in_any_nodeslist(HITTOWND(hitNode)->p
                    ChildHitList,x,y);
  2438                        ;							
                    if(hitChildNode)
  2439                        ;							
                    {
  2440                        ;							
                    	//k_debug_strings("SCAN-HIT CHILD:",HITTOWND(hitChildNod
                    e)->win_title);
  2441                        ;							
                    	hitNode = hitChildNode;
  2442                        ;							
                    }
  2443                        ;						}
  2444                        ;
  2445                        ;						//k_debu
                    g_strings("SCAN-HIT:",HITTOWND(hitNode)->win_title);
  2446                        ;						if(hitNo
                    de)
  2447                        ;						{
  2448                        ;							
                    pWin = HITTOWND(hitNode);
  2449                        ;							
                    if(pWin)
  Thu Dec  3 2020 22:25                                                Page 47


  2450                        ;							
                    {
  2451                        ;							
                    	((PCLICKDETECTED)hitNode->data)->handler(pWin);
  2452                        ;							
                    	pmsg->hwnd = k_getHandleFromWindow(pWin);
  2453                        ;
  2454                        ;							
                    	if((pmsg->type == FX_LBUTTON_DOWN) || (pmsg->type == FX_
                    MBUTTON_DOWN) || (pmsg->type == FX_RBUTTON_DOWN))
  2455                        ;							
                    	{
  2456                        ;							
                    		if(pmsg->hwnd!=hWndFocus)
  2457                        ;							
                    		{
  2458                        ;							
                    			k_debug_pointer("*** k_event_loop::FX_FO
                    CUS_WINDOW:",pmsg->hwnd);
  2459                        ;							
                    			k_enqueue_with_lock(_k_eventQueue,k_crea
                    te_synthetic_window_msg(pmsg->hwnd,FX_FOCUS_WINDOW,&hWndFocu
                    s,sizeof(hWndFocus)));
  2460                        ;							
                    			hWndFocus =  pmsg->hwnd;
  2461                        ;							
                    		}
  2462                        ;							
                    	}
  2463                        ;
  2464                        ;							
                    	if(pmsg->type < 0xF000 &&  k_isNonClient(pWin,pmsg,x,y))
  2465                        ;							
                    	{
  2466                        ;							
                    		pmsg->type = (UINT)(pmsg->type | 0x008000);
  2467                        ;							
                    	}
  2468                        ;							
                    }
  2469                        ;						}
  2470                        ;
  2471                        ;					}
  2472                        ;
  2473                        ;
  2474                        ;					if(!pmsg->hwnd)
  2475                        ;					{
  2476                        ;						if(k_use
                    r_getDesktopWindow())
  2477                        ;						{
  2478                        ;							
                    pmsg->hwnd = k_user_getDesktopWindow();
  2479                        ;						}
  2480                        ;					}
  2481                        ;
  2482                        ;				}
  2483                        ;
  2484                        ;				//k_debug_pointer("k_eve
  Thu Dec  3 2020 22:25                                                Page 48


                    nt_loop hWndFocus pmsg->hwnd:", pmsg->hwnd);
  2485                        ;				if(hWndFocus && ((pmsg->
                    type == FX_KEY_DOWN) || (pmsg->type == FX_KEY_UP)))
  2486                        ;				{
  2487                        ;					k_debug_string("
                    *** k_event_loop::FX_KEY_*\r\n");
  2488                        ;					pmsg->hwnd = hWn
                    dFocus;
  2489                        ;				}
  2490                        ;
  2491                        ;				k_do_processes(pmsg);
  2492                        ;
  2493                        ;				k_destory_msg(pmsg);
  2494                        ;
  2495                        ;				pmsg = (PFXOSMESSAGE)k_d
                    equeue_with_lock(_k_eventQueue);
  2496                        ;
  2497                        ;			}
  2498                        ;
  2499                        ;			k_do_processes(processMessage);
  2500                        ;
  2501                        ;			//asm cli;
  2502                        ;
  2503                        ;		}
  2504                        ;
  2505                        ;		if(processMessage)
  2506                        ;			k_mem_deallocate_heap(processMes
                    sage);
  2507                        ;	}
  2508                        ;	else
  2509                        ;	{
  2510                        ;		k_debug_string("Exception:fxeventmanager
                     not initialized");
  2511                        ;		THROW_EXCEPTION(0xA000,0x0001,"");
  2512                        ;	}
  2513                        ;
  2514                        ;
  2515                        ;}
  2516                        ;
  2517                        ;#else
  2518                        ;
  2519                        ;void k_event_loop(void)
  2520                        ;{
  2521                        	.line	518
  2522                        	.line	519
  2523                        	EVTMAN
  2524                        	xdef	~~k_event_loop
  2525                        	func
  2526                        	.function	519
  2527                        ~~k_event_loop:
  2528                        	longa	on
  2529                        	longi	on
  2530 05:0169: 3B           	tsc
  2531 05:016A: 38           	sec
  2532 05:016B: E9 64 00     	sbc	#L35
  2533 05:016E: 1B           	tcs
  2534 05:016F: 0B           	phd
  2535 05:0170: 5B           	tcd
  Thu Dec  3 2020 22:25                                                Page 49


  2536                        	.block	519
  2537                        ;	PFXOSMESSAGE pmsg = NULL;
  2538                        ;	PFXOSMESSAGE processMessage = NULL;
  2539                        ;
  2540                        ;	PFXPROCESS 	 pprocess = NULL;
  2541                        ;	PFXNODE 	 hitNodeParent = NULL;
  2542                        ;	PFXNODE 	 hitNode = NULL;
  2543                        ;	PFXNODE 	 hitChildNode = NULL;
  2544                        ;	PWINDOW 	 pWin = NULL;
  2545                        ;
  2546                        ;	HWND		 hWndFocus = NULL;
  2547                        ;
  2548                        ;	DISKINFO diskInfo;
  2549                        ;	BOOL volAvail = FALSE;
  2550                        ;
  2551                        ;	BOOL floppy = FALSE;
  2552                        ;	INT floppyLBA = 0;
  2553                        ;	INT	x = 0;
  2554                        ;	INT y = 0;
  2555                        ;
  2556                        ;	/*
  2557                        ;	int c = 0;
  2558                        ;	int cb = 0;
  2559                        ;	int mb = 0;
  2560                        ;	int mx = 0;
  2561                        ;	int my = 0;
  2562                        ;	int kb = 0;
  2563                        ;	*/
  2564                        ;
  2565                        ;	k_debug_string("k_initalize_executive\r\n");
  2566             00000000   pmsg_1	set	0
  2567             00000004   processMessage_1	set	4
  2568             00000008   pprocess_1	set	8
  2569             0000000C   hitNodeParent_1	set	12
  2570             00000010   hitNode_1	set	16
  2571             00000014   hitChildNode_1	set	20
  2572             00000018   pWin_1	set	24
  2573             0000001C   hWndFocus_1	set	28
  2574             00000020   diskInfo_1	set	32
  2575             00000054   volAvail_1	set	84
  2576             00000055   floppy_1	set	85
  2577             00000056   floppyLBA_1	set	86
  2578             00000058   x_1	set	88
  2579             0000005A   y_1	set	90
  2580                        	.sym	pmsg,0,138,1,32,16
  2581                        	.sym	processMessage,4,138,1,32,16
  2582                        	.sym	pprocess,8,138,1,32,20
  2583                        	.sym	hitNodeParent,12,138,1,32,5
  2584                        	.sym	hitNode,16,138,1,32,5
  2585                        	.sym	hitChildNode,20,138,1,32,5
  2586                        	.sym	pWin,24,138,1,32,30
  2587                        	.sym	hWndFocus,28,129,1,32
  2588                        	.sym	diskInfo,32,10,1,416,65
  2589                        	.sym	volAvail,84,14,1,8
  2590                        	.sym	floppy,85,14,1,8
  2591                        	.sym	floppyLBA,86,5,1,16
  2592                        	.sym	x,88,5,1,16
  2593                        	.sym	y,90,5,1,16
  Thu Dec  3 2020 22:25                                                Page 50


  2594 05:0171: 64 09        	stz	<L36+pmsg_1
  2595 05:0173: 64 0B        	stz	<L36+pmsg_1+2
  2596 05:0175: 64 0D        	stz	<L36+processMessage_1
  2597 05:0177: 64 0F        	stz	<L36+processMessage_1+2
  2598 05:0179: 64 11        	stz	<L36+pprocess_1
  2599 05:017B: 64 13        	stz	<L36+pprocess_1+2
  2600 05:017D: 64 15        	stz	<L36+hitNodeParent_1
  2601 05:017F: 64 17        	stz	<L36+hitNodeParent_1+2
  2602 05:0181: 64 19        	stz	<L36+hitNode_1
  2603 05:0183: 64 1B        	stz	<L36+hitNode_1+2
  2604 05:0185: 64 1D        	stz	<L36+hitChildNode_1
  2605 05:0187: 64 1F        	stz	<L36+hitChildNode_1+2
  2606 05:0189: 64 21        	stz	<L36+pWin_1
  2607 05:018B: 64 23        	stz	<L36+pWin_1+2
  2608 05:018D: 64 25        	stz	<L36+hWndFocus_1
  2609 05:018F: 64 27        	stz	<L36+hWndFocus_1+2
  2610 05:0191: E2 20        	sep	#$20
  2611                        	longa	off
  2612 05:0193: 64 5D        	stz	<L36+volAvail_1
  2613 05:0195: C2 20        	rep	#$20
  2614                        	longa	on
  2615 05:0197: E2 20        	sep	#$20
  2616                        	longa	off
  2617 05:0199: 64 5E        	stz	<L36+floppy_1
  2618 05:019B: C2 20        	rep	#$20
  2619                        	longa	on
  2620 05:019D: 64 5F        	stz	<L36+floppyLBA_1
  2621 05:019F: 64 61        	stz	<L36+x_1
  2622 05:01A1: 64 63        	stz	<L36+y_1
  2623                        	.line	548
  2624 05:01A3: F4 xx xx     	pea	#^L34
  2625 05:01A6: F4 xx xx     	pea	#<L34
  2626 05:01A9: 22 xx xx xx  	jsl	~~k_debug_string
  2627                        ;	k_initalize_executive();
  2628                        	.line	549
  2629 05:01AD: 22 xx xx xx  	jsl	~~k_initalize_executive
  2630                        ;	k_heap_integrity_check();
  2631                        	.line	550
  2632 05:01B1: 22 xx xx xx  	jsl	~~k_heap_integrity_check
  2633                        ;	k_debug_string("k_initalize_event_manager\r\n");
  2634                        	.line	551
  2635 05:01B5: F4 xx xx     	pea	#^L34+24
  2636 05:01B8: F4 xx xx     	pea	#<L34+24
  2637 05:01BB: 22 xx xx xx  	jsl	~~k_debug_string
  2638                        ;	k_initalize_event_manager();
  2639                        	.line	552
  2640 05:01BF: 22 28 00 05  	jsl	~~k_initalize_event_manager
  2641                        ;	k_heap_integrity_check();
  2642                        	.line	553
  2643 05:01C3: 22 xx xx xx  	jsl	~~k_heap_integrity_check
  2644                        ;	k_debug_string("k_initalize_window_manager befor
                    e\r\n");
  2645                        	.line	554
  2646 05:01C7: F4 xx xx     	pea	#^L34+52
  2647 05:01CA: F4 xx xx     	pea	#<L34+52
  2648 05:01CD: 22 xx xx xx  	jsl	~~k_debug_string
  2649                        ;	k_initializeWindowManager();
  2650                        	.line	555
  Thu Dec  3 2020 22:25                                                Page 51


  2651 05:01D1: 22 xx xx xx  	jsl	~~k_initializeWindowManager
  2652                        ;	k_debug_string("k_initalize_window_manager after
                    \r\n");
  2653                        	.line	556
  2654 05:01D5: F4 xx xx     	pea	#^L34+88
  2655 05:01D8: F4 xx xx     	pea	#<L34+88
  2656 05:01DB: 22 xx xx xx  	jsl	~~k_debug_string
  2657                        ;	k_heap_integrity_check();
  2658                        	.line	557
  2659 05:01DF: 22 xx xx xx  	jsl	~~k_heap_integrity_check
  2660                        ;
  2661                        ;	/*
  2662                        ;	//////
  2663                        ;	// TEST
  2664                        ;	/////
  2665                        ;
  2666                        ;	asm cli;
  2667                        ;
  2668                        ;	floppy_init();
  2669                        ;
  2670                        ;	//asm sei;
  2671                        ;
  2672                        ;	while(TRUE);
  2673                        ;	///////
  2674                        ;	*/
  2675                        ;
  2676                        ;	//asm cli;
  2677                        ;
  2678                        ;	//k_debug_string("cli after\r\n");
  2679                        ;
  2680                        ;	if(_k_eventQueue!=NULL)
  2681                        	.line	578
  2682                        ;	{
  2683 05:01E3: AD xx xx     	lda	|~~_k_eventQueue
  2684 05:01E6: 0D xx xx     	ora	|~~_k_eventQueue+2
  2685 05:01E9: D0 03        	bne	L38
  2686 05:01EB: 82 C9 03     	brl	L10004
  2687                        L38:
  2688                        	.line	579
  2689                        ;		processMessage = k_create_process_msg(NU
                    LL);
  2690                        	.line	580
  2691 05:01EE: F4 00 00     	pea	#^$0
  2692 05:01F1: F4 00 00     	pea	#<$0
  2693 05:01F4: 22 2C 1A 05  	jsl	~~k_create_process_msg
  2694 05:01F8: 85 0D        	sta	<L36+processMessage_1
  2695 05:01FA: 86 0F        	stx	<L36+processMessage_1+2
  2696                        ;		k_heap_integrity_check();
  2697                        	.line	581
  2698 05:01FC: 22 xx xx xx  	jsl	~~k_heap_integrity_check
  2699                        ;		//eventProcs[IDLE_PROC] = IdleProc;
  2700                        ;		//k_attach_process_events(IdleProc,NULL)
                    ;
  2701                        ;
  2702                        ;		/*
  2703                        ;		pprocess = k_exec_launchProcess("@/idle"
                    );
  2704                        ;		if(pprocess!=NULL)
  Thu Dec  3 2020 22:25                                                Page 52


  2705                        ;		{
  2706                        ;			//k_attach_process_events((FXEve
                    ntProc)pprocess->execProc-data,pprocess);
  2707                        ;			k_attach_process_events(pprocess
                    ->execProc,pprocess);
  2708                        ;			k_exec_set_process_foreground(pp
                    rocess,FALSE);
  2709                        ;		}
  2710                        ;		*/
  2711                        ;		//k_debug_string("check1\r\n");
  2712                        ;		//k_heap_integrity_check();
  2713                        ;
  2714                        ;		//pprocess =  k_exec_createProcess("cons
                    ole",DefConsoleProc);
  2715                        ;
  2716                        ;		//k_debug_string("check2\r\n");
  2717                        ;		//k_heap_integrity_check();
  2718                        ;		//pprocess =  k_exec_createProcess("desk
                    top",DesktopEnvironmentProc);
  2719                        ;
  2720                        ;#ifdef USE_FX256_FMX
  2721                        ;
  2722                        ;
  2723                        ;		/*
  2724                        ;		pprocess = k_exec_launchProcess("@/conso
                    le");
  2725                        ;		if(pprocess!=NULL)
  2726                        ;		{
  2727                        ;			//k_attach_process_events((FXEve
                    ntProc)pprocess->execProc-data,pprocess);
  2728                        ;			k_attach_process_events(pprocess
                    ->execProc,pprocess);
  2729                        ;			k_exec_set_process_foreground(pp
                    rocess,FALSE);
  2730                        ;		}
  2731                        ;		*/
  2732                        ;
  2733                        ;
  2734                        ;		pprocess = k_exec_launchProcess("@/deskt
                    op");
  2735                        	.line	617
  2736 05:0200: F4 xx xx     	pea	#^L34+123
  2737 05:0203: F4 xx xx     	pea	#<L34+123
  2738 05:0206: 22 xx xx xx  	jsl	~~k_exec_launchProcess
  2739 05:020A: 85 11        	sta	<L36+pprocess_1
  2740 05:020C: 86 13        	stx	<L36+pprocess_1+2
  2741                        ;		if(pprocess!=NULL)
  2742                        	.line	618
  2743                        ;		{
  2744 05:020E: A5 11        	lda	<L36+pprocess_1
  2745 05:0210: 05 13        	ora	<L36+pprocess_1+2
  2746 05:0212: D0 03        	bne	L39
  2747 05:0214: 82 23 00     	brl	L10005
  2748                        L39:
  2749                        	.line	619
  2750                        ;			//k_attach_process_events((FXEve
                    ntProc)pprocess->execProc-data,pprocess);
  2751                        ;			k_attach_process_events(pprocess
  Thu Dec  3 2020 22:25                                                Page 53


                    ->execProc,pprocess);
  2752                        	.line	621
  2753 05:0217: D4 13        	pei	<L36+pprocess_1+2
  2754 05:0219: D4 11        	pei	<L36+pprocess_1
  2755 05:021B: A0 5E 00     	ldy	#$5e
  2756 05:021E: B7 11        	lda	[<L36+pprocess_1],Y
  2757 05:0220: 48           	pha
  2758 05:0221: A0 5C 00     	ldy	#$5c
  2759 05:0224: B7 11        	lda	[<L36+pprocess_1],Y
  2760 05:0226: 48           	pha
  2761 05:0227: 22 09 11 05  	jsl	~~k_attach_process_events
  2762                        ;			k_exec_set_process_foreground(pp
                    rocess,TRUE);
  2763                        	.line	622
  2764 05:022B: F4 01 00     	pea	#<$1
  2765 05:022E: D4 13        	pei	<L36+pprocess_1+2
  2766 05:0230: D4 11        	pei	<L36+pprocess_1
  2767 05:0232: 22 xx xx xx  	jsl	~~k_exec_set_process_foreground
  2768                        ;			k_heap_integrity_check();
  2769                        	.line	623
  2770 05:0236: 22 xx xx xx  	jsl	~~k_heap_integrity_check
  2771                        ;		}
  2772                        	.line	624
  2773                        ;
  2774                        ;#else
  2775                        ;		pprocess = k_exec_launchProcess("@/conso
                    le");
  2776                        ;		if(pprocess!=NULL)
  2777                        ;		{
  2778                        ;			//k_attach_process_events((FXEve
                    ntProc)pprocess->execProc-data,pprocess);
  2779                        ;			k_attach_process_events(pprocess
                    ->execProc,pprocess);
  2780                        ;			k_exec_set_process_foreground(pp
                    rocess,TRUE);
  2781                        ;		}
  2782                        ;
  2783                        ;#endif
  2784                        ;
  2785                        ;		pprocess = k_exec_launchProcess("@/idle"
                    );
  2786                        L10005:
  2787                        	.line	637
  2788 05:023A: F4 xx xx     	pea	#^L34+133
  2789 05:023D: F4 xx xx     	pea	#<L34+133
  2790 05:0240: 22 xx xx xx  	jsl	~~k_exec_launchProcess
  2791 05:0244: 85 11        	sta	<L36+pprocess_1
  2792 05:0246: 86 13        	stx	<L36+pprocess_1+2
  2793                        ;		if(pprocess!=NULL)
  2794                        	.line	638
  2795                        ;		{
  2796 05:0248: A5 11        	lda	<L36+pprocess_1
  2797 05:024A: 05 13        	ora	<L36+pprocess_1+2
  2798 05:024C: D0 03        	bne	L40
  2799 05:024E: 82 1F 00     	brl	L10006
  2800                        L40:
  2801                        	.line	639
  2802                        ;
  Thu Dec  3 2020 22:25                                                Page 54


  2803                        ;			//k_attach_process_events((FXEve
                    ntProc)pprocess->execProc-data,pprocess);
  2804                        ;			k_attach_process_events(pprocess
                    ->execProc,pprocess);
  2805                        	.line	642
  2806 05:0251: D4 13        	pei	<L36+pprocess_1+2
  2807 05:0253: D4 11        	pei	<L36+pprocess_1
  2808 05:0255: A0 5E 00     	ldy	#$5e
  2809 05:0258: B7 11        	lda	[<L36+pprocess_1],Y
  2810 05:025A: 48           	pha
  2811 05:025B: A0 5C 00     	ldy	#$5c
  2812 05:025E: B7 11        	lda	[<L36+pprocess_1],Y
  2813 05:0260: 48           	pha
  2814 05:0261: 22 09 11 05  	jsl	~~k_attach_process_events
  2815                        ;			k_exec_set_process_foreground(pp
                    rocess,FALSE);
  2816                        	.line	643
  2817 05:0265: F4 00 00     	pea	#<$0
  2818 05:0268: D4 13        	pei	<L36+pprocess_1+2
  2819 05:026A: D4 11        	pei	<L36+pprocess_1
  2820 05:026C: 22 xx xx xx  	jsl	~~k_exec_set_process_foreground
  2821                        ;		}
  2822                        	.line	644
  2823                        ;
  2824                        ;
  2825                        ;		//k_debug_string("check3\r\n");
  2826                        ;		//k_heap_integrity_check();
  2827                        ;
  2828                        ;
  2829                        ;		/*
  2830                        ;		pprocess =  k_exec_createProcess("consol
                    e",DefConsoleProc2);
  2831                        ;		if(pprocess!=NULL)
  2832                        ;		{
  2833                        ;			//k_attach_events((FXEventProc)p
                    process->execProc->data,pprocess);
  2834                        ;			k_attach_process_events((FXEvent
                    Proc)pprocess->execProc->data,pprocess);
  2835                        ;		}
  2836                        ;		 */
  2837                        ;
  2838                        ;		while(1)
  2839                        L10006:
  2840                        	.line	660
  2841                        L10007:
  2842                        ;		{
  2843                        	.line	661
  2844                        ;			asm sei;
  2845                        	.line	662
  2846                        	asmstart
  2847 05:0270: 78           	sei
  2848                        	asmend
  2849                        ;
  2850                        ;			//asm sei;
  2851                        ;			pmsg = (PFXOSMESSAGE)k_dequeue(_
                    k_eventQueue);
  2852                        	.line	665
  2853 05:0271: AD xx xx     	lda	|~~_k_eventQueue+2
  Thu Dec  3 2020 22:25                                                Page 55


  2854 05:0274: 48           	pha
  2855 05:0275: AD xx xx     	lda	|~~_k_eventQueue
  2856 05:0278: 48           	pha
  2857 05:0279: 22 xx xx xx  	jsl	~~k_dequeue
  2858 05:027D: 85 09        	sta	<L36+pmsg_1
  2859 05:027F: 86 0B        	stx	<L36+pmsg_1+2
  2860                        ;			//asm cli;
  2861                        ;
  2862                        ;			while(pmsg!=NULL)
  2863                        	.line	668
  2864                        L10009:
  2865 05:0281: A5 09        	lda	<L36+pmsg_1
  2866 05:0283: 05 0B        	ora	<L36+pmsg_1+2
  2867 05:0285: D0 03        	bne	L41
  2868 05:0287: 82 FB 02     	brl	L10010
  2869                        L41:
  2870                        ;			{
  2871                        	.line	669
  2872                        ;
  2873                        ;				/*
  2874                        ;				if(_k_hLockedFocus && (p
                    msg->hwnd != _k_hLockedFocus))
  2875                        ;				{
  2876                        ;					pmsg->hwnd = _k_
                    hLockedFocus;
  2877                        ;					k_debug_integer(
                    "k_event_loop _k_hLockedFocus LOCKED pmsg->type:", pmsg->typ
                    e);
  2878                        ;					k_debug_pointer(
                    "k_event_loop _k_hLockedFocus LOCKED pmsg->hwnd:", pmsg->hwn
                    d);
  2879                        ;				}
  2880                        ;				*/
  2881                        ;
  2882                        ;				_k_system_timer = pmsg->
                    msgTime;
  2883                        	.line	680
  2884 05:028A: A0 12 00     	ldy	#$12
  2885 05:028D: B7 09        	lda	[<L36+pmsg_1],Y
  2886 05:028F: 8D xx xx     	sta	|~~_k_system_timer
  2887 05:0292: A0 14 00     	ldy	#$14
  2888 05:0295: B7 09        	lda	[<L36+pmsg_1],Y
  2889 05:0297: 8D xx xx     	sta	|~~_k_system_timer+2
  2890                        ;				//k_debug_integer("k_eve
                    nt_loop event:", pmsg->type);
  2891                        ;				//k_debug_byte_array("k_
                    event_loop data:", pmsg->data,3);
  2892                        ;				//k_debug_char("k_event_
                    loop char:", pmsg->data[2]);
  2893                        ;
  2894                        ;				//k_debug_string("check3
                    \r\n");
  2895                        ;				//k_heap_integrity_check
                    ();
  2896                        ;				if(FX_MENU_COMMAND == pm
                    sg->type)
  2897                        	.line	687
  2898                        ;					k_debug_pointer(
  Thu Dec  3 2020 22:25                                                Page 56


                    "k_event_loop event::FX_MENU_COMMAND:", pmsg->hwnd);
  2899 05:029A: A0 08 00     	ldy	#$8
  2900 05:029D: B7 09        	lda	[<L36+pmsg_1],Y
  2901 05:029F: C9 01 FA     	cmp	#<$fa01
  2902 05:02A2: F0 03        	beq	L42
  2903 05:02A4: 82 16 00     	brl	L10011
  2904                        L42:
  2905                        	.line	688
  2906 05:02A7: A0 0C 00     	ldy	#$c
  2907 05:02AA: B7 09        	lda	[<L36+pmsg_1],Y
  2908 05:02AC: 48           	pha
  2909 05:02AD: A0 0A 00     	ldy	#$a
  2910 05:02B0: B7 09        	lda	[<L36+pmsg_1],Y
  2911 05:02B2: 48           	pha
  2912 05:02B3: F4 xx xx     	pea	#^L34+140
  2913 05:02B6: F4 xx xx     	pea	#<L34+140
  2914 05:02B9: 22 xx xx xx  	jsl	~~k_debug_pointer
  2915                        ;
  2916                        ;				if(pmsg->type == FX_PROC
                    ESS_FLOPPY)
  2917                        L10011:
  2918                        	.line	690
  2919                        ;				{
  2920 05:02BD: A0 08 00     	ldy	#$8
  2921 05:02C0: B7 09        	lda	[<L36+pmsg_1],Y
  2922 05:02C2: C9 F2 FF     	cmp	#<$fff2
  2923 05:02C5: F0 03        	beq	L43
  2924 05:02C7: 82 0A 00     	brl	L10012
  2925                        L43:
  2926                        	.line	691
  2927                        ;					k_debug_string("
                    k_event_loop data:FX_PROCESS_FLOPPY\r\n");
  2928                        	.line	692
  2929 05:02CA: F4 xx xx     	pea	#^L34+177
  2930 05:02CD: F4 xx xx     	pea	#<L34+177
  2931 05:02D0: 22 xx xx xx  	jsl	~~k_debug_string
  2932                        ;
  2933                        ;					//k_debug_byte_a
                    rray("k_event_loop data:FX_PROCESS_FLOPPY:", pmsg->pheap,512
                    );
  2934                        ;				}
  2935                        	.line	695
  2936                        ;				if(pmsg->type == FX_PROC
                    ESS_SDCARD)
  2937                        L10012:
  2938                        	.line	696
  2939                        ;				{
  2940 05:02D4: A0 08 00     	ldy	#$8
  2941 05:02D7: B7 09        	lda	[<L36+pmsg_1],Y
  2942 05:02D9: C9 F3 FF     	cmp	#<$fff3
  2943 05:02DC: F0 03        	beq	L44
  2944 05:02DE: 82 0A 00     	brl	L10013
  2945                        L44:
  2946                        	.line	697
  2947                        ;					k_debug_string("
                    k_event_loop data:FX_PROCESS_SDCARD\r\n");
  2948                        	.line	698
  2949 05:02E1: F4 xx xx     	pea	#^L34+215
  Thu Dec  3 2020 22:25                                                Page 57


  2950 05:02E4: F4 xx xx     	pea	#<L34+215
  2951 05:02E7: 22 xx xx xx  	jsl	~~k_debug_string
  2952                        ;
  2953                        ;					//k_debug_byte_a
                    rray("k_event_loop data:FX_PROCESS_FLOPPY:", pmsg->pheap,512
                    );
  2954                        ;				}
  2955                        	.line	701
  2956                        ;
  2957                        ;				if((pmsg->type >= FX_MOU
                    SE_MOVE) &&  (pmsg->type <= FX_MBUTTON_DBLCLICK))
  2958                        L10013:
  2959                        	.line	703
  2960                        ;				{
  2961 05:02EB: A0 08 00     	ldy	#$8
  2962 05:02EE: B7 09        	lda	[<L36+pmsg_1],Y
  2963 05:02F0: C9 03 0F     	cmp	#<$f03
  2964 05:02F3: B0 03        	bcs	L45
  2965 05:02F5: 82 2F 02     	brl	L10014
  2966                        L45:
  2967 05:02F8: A9 0F 0F     	lda	#$f0f
  2968 05:02FB: A0 08 00     	ldy	#$8
  2969 05:02FE: D7 09        	cmp	[<L36+pmsg_1],Y
  2970 05:0300: B0 03        	bcs	L46
  2971 05:0302: 82 22 02     	brl	L10014
  2972                        L46:
  2973                        	.line	704
  2974                        ;					//k_debug_pointe
                    r("k_event_loop MOUSE hwnd:", pmsg->hwnd);
  2975                        ;					//k_debug_intege
                    r("k_event_loop MOUSE event:", pmsg->type);
  2976                        ;
  2977                        ;					x = MAKEWORD(pms
                    g->data[1],pmsg->data[2]);
  2978                        	.line	708
  2979 05:0305: A0 18 00     	ldy	#$18
  2980 05:0308: B7 09        	lda	[<L36+pmsg_1],Y
  2981 05:030A: 29 FF 00     	and	#$ff
  2982 05:030D: 85 05        	sta	<R1
  2983 05:030F: A5 05        	lda	<R1
  2984 05:0311: EB           	xba
  2985 05:0312: 29 00 FF     	and	#$ff00
  2986 05:0315: 85 01        	sta	<R0
  2987 05:0317: A0 17 00     	ldy	#$17
  2988 05:031A: B7 09        	lda	[<L36+pmsg_1],Y
  2989 05:031C: 29 FF 00     	and	#$ff
  2990 05:031F: 85 05        	sta	<R1
  2991 05:0321: A5 05        	lda	<R1
  2992 05:0323: 05 01        	ora	<R0
  2993 05:0325: 85 61        	sta	<L36+x_1
  2994                        ;					y = MAKEWORD(pms
                    g->data[3],pmsg->data[4]);
  2995                        	.line	709
  2996 05:0327: A0 1A 00     	ldy	#$1a
  2997 05:032A: B7 09        	lda	[<L36+pmsg_1],Y
  2998 05:032C: 29 FF 00     	and	#$ff
  2999 05:032F: 85 05        	sta	<R1
  3000 05:0331: A5 05        	lda	<R1
  Thu Dec  3 2020 22:25                                                Page 58


  3001 05:0333: EB           	xba
  3002 05:0334: 29 00 FF     	and	#$ff00
  3003 05:0337: 85 01        	sta	<R0
  3004 05:0339: A0 19 00     	ldy	#$19
  3005 05:033C: B7 09        	lda	[<L36+pmsg_1],Y
  3006 05:033E: 29 FF 00     	and	#$ff
  3007 05:0341: 85 05        	sta	<R1
  3008 05:0343: A5 05        	lda	<R1
  3009 05:0345: 05 01        	ora	<R0
  3010 05:0347: 85 63        	sta	<L36+y_1
  3011                        ;
  3012                        ;
  3013                        ;					hitNode = k_poin
                    t_hit_scan(x,y);
  3014                        	.line	712
  3015 05:0349: D4 63        	pei	<L36+y_1
  3016 05:034B: D4 61        	pei	<L36+x_1
  3017 05:034D: 22 xx xx xx  	jsl	~~k_point_hit_scan
  3018 05:0351: 85 19        	sta	<L36+hitNode_1
  3019 05:0353: 86 1B        	stx	<L36+hitNode_1+2
  3020                        ;					if(hitNode)
  3021                        	.line	713
  3022                        ;					{
  3023 05:0355: A5 19        	lda	<L36+hitNode_1
  3024 05:0357: 05 1B        	ora	<L36+hitNode_1+2
  3025 05:0359: D0 03        	bne	L47
  3026 05:035B: 82 93 01     	brl	L10015
  3027                        L47:
  3028                        	.line	714
  3029                        ;						//k_debu
                    g_strings("SCAN-HIT PARENT:",HITTOWND(hitNode)->win_title);
  3030                        ;						if(HITTO
                    WND(hitNode)->pChildHitList)
  3031                        	.line	716
  3032                        ;						{
  3033 05:035E: A0 02 00     	ldy	#$2
  3034 05:0361: B7 19        	lda	[<L36+hitNode_1],Y
  3035 05:0363: 85 01        	sta	<R0
  3036 05:0365: A0 04 00     	ldy	#$4
  3037 05:0368: B7 19        	lda	[<L36+hitNode_1],Y
  3038 05:036A: 85 03        	sta	<R0+2
  3039 05:036C: A7 01        	lda	[<R0]
  3040 05:036E: 85 05        	sta	<R1
  3041 05:0370: A0 02 00     	ldy	#$2
  3042 05:0373: B7 01        	lda	[<R0],Y
  3043 05:0375: 85 07        	sta	<R1+2
  3044 05:0377: A0 3C 01     	ldy	#$13c
  3045 05:037A: B7 05        	lda	[<R1],Y
  3046 05:037C: A0 3E 01     	ldy	#$13e
  3047 05:037F: 17 05        	ora	[<R1],Y
  3048 05:0381: D0 03        	bne	L48
  3049 05:0383: 82 42 00     	brl	L10016
  3050                        L48:
  3051                        	.line	717
  3052                        ;							
                    hitChildNode = k_point_in_any_nodeslist(HITTOWND(hitNode)->p
                    ChildHitList,x,y);
  3053                        	.line	718
  Thu Dec  3 2020 22:25                                                Page 59


  3054 05:0386: D4 63        	pei	<L36+y_1
  3055 05:0388: D4 61        	pei	<L36+x_1
  3056 05:038A: A0 02 00     	ldy	#$2
  3057 05:038D: B7 19        	lda	[<L36+hitNode_1],Y
  3058 05:038F: 85 01        	sta	<R0
  3059 05:0391: A0 04 00     	ldy	#$4
  3060 05:0394: B7 19        	lda	[<L36+hitNode_1],Y
  3061 05:0396: 85 03        	sta	<R0+2
  3062 05:0398: A7 01        	lda	[<R0]
  3063 05:039A: 85 05        	sta	<R1
  3064 05:039C: A0 02 00     	ldy	#$2
  3065 05:039F: B7 01        	lda	[<R0],Y
  3066 05:03A1: 85 07        	sta	<R1+2
  3067 05:03A3: A0 3E 01     	ldy	#$13e
  3068 05:03A6: B7 05        	lda	[<R1],Y
  3069 05:03A8: 48           	pha
  3070 05:03A9: A0 3C 01     	ldy	#$13c
  3071 05:03AC: B7 05        	lda	[<R1],Y
  3072 05:03AE: 48           	pha
  3073 05:03AF: 22 xx xx xx  	jsl	~~k_point_in_any_nodeslist
  3074 05:03B3: 85 1D        	sta	<L36+hitChildNode_1
  3075 05:03B5: 86 1F        	stx	<L36+hitChildNode_1+2
  3076                        ;							
                    if(hitChildNode)
  3077                        	.line	719
  3078                        ;							
                    {
  3079 05:03B7: A5 1D        	lda	<L36+hitChildNode_1
  3080 05:03B9: 05 1F        	ora	<L36+hitChildNode_1+2
  3081 05:03BB: D0 03        	bne	L49
  3082 05:03BD: 82 08 00     	brl	L10017
  3083                        L49:
  3084                        	.line	720
  3085                        ;							
                    	//k_debug_strings("SCAN-HIT CHILD:",HITTOWND(hitChildNod
                    e)->win_title);
  3086                        ;							
                    	hitNode = hitChildNode;
  3087                        	.line	722
  3088 05:03C0: A5 1D        	lda	<L36+hitChildNode_1
  3089 05:03C2: 85 19        	sta	<L36+hitNode_1
  3090 05:03C4: A5 1F        	lda	<L36+hitChildNode_1+2
  3091 05:03C6: 85 1B        	sta	<L36+hitNode_1+2
  3092                        ;							
                    }
  3093                        	.line	723
  3094                        ;						}
  3095                        L10017:
  3096                        	.line	724
  3097                        ;
  3098                        ;						//k_debu
                    g_strings("SCAN-HIT:",HITTOWND(hitNode)->win_title);
  3099                        ;						if(hitNo
                    de)
  3100                        L10016:
  3101                        	.line	727
  3102                        ;						{
  3103 05:03C8: A5 19        	lda	<L36+hitNode_1
  Thu Dec  3 2020 22:25                                                Page 60


  3104 05:03CA: 05 1B        	ora	<L36+hitNode_1+2
  3105 05:03CC: D0 03        	bne	L50
  3106 05:03CE: 82 20 01     	brl	L10018
  3107                        L50:
  3108                        	.line	728
  3109                        ;							
                    pWin = HITTOWND(hitNode);
  3110                        	.line	729
  3111 05:03D1: A0 02 00     	ldy	#$2
  3112 05:03D4: B7 19        	lda	[<L36+hitNode_1],Y
  3113 05:03D6: 85 01        	sta	<R0
  3114 05:03D8: A0 04 00     	ldy	#$4
  3115 05:03DB: B7 19        	lda	[<L36+hitNode_1],Y
  3116 05:03DD: 85 03        	sta	<R0+2
  3117 05:03DF: A7 01        	lda	[<R0]
  3118 05:03E1: 85 21        	sta	<L36+pWin_1
  3119 05:03E3: A0 02 00     	ldy	#$2
  3120 05:03E6: B7 01        	lda	[<R0],Y
  3121 05:03E8: 85 23        	sta	<L36+pWin_1+2
  3122                        ;							
                    if(pWin)
  3123                        	.line	730
  3124                        ;							
                    {
  3125 05:03EA: A5 21        	lda	<L36+pWin_1
  3126 05:03EC: 05 23        	ora	<L36+pWin_1+2
  3127 05:03EE: D0 03        	bne	L51
  3128 05:03F0: 82 FE 00     	brl	L10019
  3129                        L51:
  3130                        	.line	731
  3131                        ;							
                    	((PCLICKDETECTED)hitNode->data)->handler(pWin);
  3132                        	.line	732
  3133 05:03F3: D4 23        	pei	<L36+pWin_1+2
  3134 05:03F5: D4 21        	pei	<L36+pWin_1
  3135 05:03F7: A0 02 00     	ldy	#$2
  3136 05:03FA: B7 19        	lda	[<L36+hitNode_1],Y
  3137 05:03FC: 85 01        	sta	<R0
  3138 05:03FE: A0 04 00     	ldy	#$4
  3139 05:0401: B7 19        	lda	[<L36+hitNode_1],Y
  3140 05:0403: 85 03        	sta	<R0+2
  3141 05:0405: A0 06 00     	ldy	#$6
  3142 05:0408: B7 01        	lda	[<R0],Y
  3143 05:040A: AA           	tax
  3144 05:040B: A0 04 00     	ldy	#$4
  3145 05:040E: B7 01        	lda	[<R0],Y
  3146                        	xref	~~~lcal
  3147 05:0410: 22 xx xx xx  	jsl	~~~lcal
  3148                        ;							
                    	pmsg->hwnd = k_getHandleFromWindow(pWin);
  3149                        	.line	733
  3150 05:0414: D4 23        	pei	<L36+pWin_1+2
  3151 05:0416: D4 21        	pei	<L36+pWin_1
  3152 05:0418: 22 xx xx xx  	jsl	~~k_getHandleFromWindow
  3153 05:041C: 85 01        	sta	<R0
  3154 05:041E: 86 03        	stx	<R0+2
  3155 05:0420: A5 01        	lda	<R0
  3156 05:0422: A0 0A 00     	ldy	#$a
  Thu Dec  3 2020 22:25                                                Page 61


  3157 05:0425: 97 09        	sta	[<L36+pmsg_1],Y
  3158 05:0427: A5 03        	lda	<R0+2
  3159 05:0429: A0 0C 00     	ldy	#$c
  3160 05:042C: 97 09        	sta	[<L36+pmsg_1],Y
  3161                        ;
  3162                        ;							
                    	if((pmsg->type == FX_LBUTTON_DOWN) || (pmsg->type == FX_
                    MBUTTON_DOWN) || (pmsg->type == FX_RBUTTON_DOWN))
  3163                        	.line	735
  3164                        ;							
                    	{
  3165 05:042E: A0 08 00     	ldy	#$8
  3166 05:0431: B7 09        	lda	[<L36+pmsg_1],Y
  3167 05:0433: C9 04 0F     	cmp	#<$f04
  3168 05:0436: D0 03        	bne	L53
  3169 05:0438: 82 1A 00     	brl	L52
  3170                        L53:
  3171 05:043B: A0 08 00     	ldy	#$8
  3172 05:043E: B7 09        	lda	[<L36+pmsg_1],Y
  3173 05:0440: C9 0C 0F     	cmp	#<$f0c
  3174 05:0443: D0 03        	bne	L54
  3175 05:0445: 82 0D 00     	brl	L52
  3176                        L54:
  3177 05:0448: A0 08 00     	ldy	#$8
  3178 05:044B: B7 09        	lda	[<L36+pmsg_1],Y
  3179 05:044D: C9 08 0F     	cmp	#<$f08
  3180 05:0450: F0 03        	beq	L55
  3181 05:0452: 82 6A 00     	brl	L10020
  3182                        L55:
  3183                        L52:
  3184                        	.line	736
  3185                        ;							
                    		if(pmsg->hwnd!=hWndFocus)
  3186                        	.line	737
  3187                        ;							
                    		{
  3188 05:0455: A0 0A 00     	ldy	#$a
  3189 05:0458: B7 09        	lda	[<L36+pmsg_1],Y
  3190 05:045A: C5 25        	cmp	<L36+hWndFocus_1
  3191 05:045C: D0 07        	bne	L56
  3192 05:045E: A0 0C 00     	ldy	#$c
  3193 05:0461: B7 09        	lda	[<L36+pmsg_1],Y
  3194 05:0463: C5 27        	cmp	<L36+hWndFocus_1+2
  3195                        L56:
  3196 05:0465: D0 03        	bne	L57
  3197 05:0467: 82 55 00     	brl	L10021
  3198                        L57:
  3199                        	.line	738
  3200                        ;							
                    			k_debug_pointer("*** k_event_loop::FX_FO
                    CUS_WINDOW:",pmsg->hwnd);
  3201                        	.line	739
  3202 05:046A: A0 0C 00     	ldy	#$c
  3203 05:046D: B7 09        	lda	[<L36+pmsg_1],Y
  3204 05:046F: 48           	pha
  3205 05:0470: A0 0A 00     	ldy	#$a
  3206 05:0473: B7 09        	lda	[<L36+pmsg_1],Y
  3207 05:0475: 48           	pha
  Thu Dec  3 2020 22:25                                                Page 62


  3208 05:0476: F4 xx xx     	pea	#^L34+253
  3209 05:0479: F4 xx xx     	pea	#<L34+253
  3210 05:047C: 22 xx xx xx  	jsl	~~k_debug_pointer
  3211                        ;							
                    			k_enqueue(_k_eventQueue,k_create_synthet
                    ic_window_msg(pmsg->hwnd,FX_FOCUS_WINDOW,&hWndFocus,sizeof(h
                    WndFocus)));
  3212                        	.line	740
  3213 05:0480: F4 04 00     	pea	#<$4
  3214 05:0483: F4 00 00     	pea	#0
  3215 05:0486: 18           	clc
  3216 05:0487: 7B           	tdc
  3217 05:0488: 69 25 00     	adc	#<L36+hWndFocus_1
  3218 05:048B: 48           	pha
  3219 05:048C: F4 13 0F     	pea	#<$f13
  3220 05:048F: A0 0C 00     	ldy	#$c
  3221 05:0492: B7 09        	lda	[<L36+pmsg_1],Y
  3222 05:0494: 48           	pha
  3223 05:0495: A0 0A 00     	ldy	#$a
  3224 05:0498: B7 09        	lda	[<L36+pmsg_1],Y
  3225 05:049A: 48           	pha
  3226 05:049B: 22 9C 1A 05  	jsl	~~k_create_synthetic_window_msg
  3227 05:049F: 85 01        	sta	<R0
  3228 05:04A1: 86 03        	stx	<R0+2
  3229 05:04A3: DA           	phx
  3230 05:04A4: 48           	pha
  3231 05:04A5: AD xx xx     	lda	|~~_k_eventQueue+2
  3232 05:04A8: 48           	pha
  3233 05:04A9: AD xx xx     	lda	|~~_k_eventQueue
  3234 05:04AC: 48           	pha
  3235 05:04AD: 22 xx xx xx  	jsl	~~k_enqueue
  3236                        ;							
                    			hWndFocus =  pmsg->hwnd;
  3237                        	.line	741
  3238 05:04B1: A0 0A 00     	ldy	#$a
  3239 05:04B4: B7 09        	lda	[<L36+pmsg_1],Y
  3240 05:04B6: 85 25        	sta	<L36+hWndFocus_1
  3241 05:04B8: A0 0C 00     	ldy	#$c
  3242 05:04BB: B7 09        	lda	[<L36+pmsg_1],Y
  3243 05:04BD: 85 27        	sta	<L36+hWndFocus_1+2
  3244                        ;							
                    		}
  3245                        	.line	742
  3246                        ;							
                    	}
  3247                        L10021:
  3248                        	.line	743
  3249                        ;
  3250                        ;							
                    	if(pmsg->type < 0xF000 &&  k_isNonClient(pWin,pmsg,x,y))
  3251                        L10020:
  3252                        	.line	745
  3253                        ;							
                    	{
  3254 05:04BF: A0 08 00     	ldy	#$8
  3255 05:04C2: B7 09        	lda	[<L36+pmsg_1],Y
  3256 05:04C4: C9 00 F0     	cmp	#<$f000
  3257 05:04C7: 90 03        	bcc	L58
  Thu Dec  3 2020 22:25                                                Page 63


  3258 05:04C9: 82 25 00     	brl	L10022
  3259                        L58:
  3260 05:04CC: D4 63        	pei	<L36+y_1
  3261 05:04CE: D4 61        	pei	<L36+x_1
  3262 05:04D0: D4 0B        	pei	<L36+pmsg_1+2
  3263 05:04D2: D4 09        	pei	<L36+pmsg_1
  3264 05:04D4: D4 23        	pei	<L36+pWin_1+2
  3265 05:04D6: D4 21        	pei	<L36+pWin_1
  3266 05:04D8: 22 CB 05 05  	jsl	~~k_isNonClient
  3267 05:04DC: 29 FF 00     	and	#$ff
  3268 05:04DF: D0 03        	bne	L59
  3269 05:04E1: 82 0D 00     	brl	L10022
  3270                        L59:
  3271                        	.line	746
  3272                        ;							
                    		//k_debug_string("*** k_event_loop::NON-CLIENT M
                    OUSE EVENT\r\n");
  3273                        ;
  3274                        ;							
                    		//k_debug_pointer("*** k_event_loop::NON-CLIENT 
                    MOUSE EVENT BEFORE:",(LPVOID)(LONG)pmsg->type);
  3275                        ;							
                    		pmsg->type = (UINT)(pmsg->type | 0x008000);
  3276                        	.line	750
  3277 05:04E4: A0 08 00     	ldy	#$8
  3278 05:04E7: B7 09        	lda	[<L36+pmsg_1],Y
  3279 05:04E9: 09 00 80     	ora	#<$8000
  3280 05:04EC: A0 08 00     	ldy	#$8
  3281 05:04EF: 97 09        	sta	[<L36+pmsg_1],Y
  3282                        ;							
                    		//k_debug_pointer("*** k_event_loop::NON-CLIENT 
                    MOUSE EVENT AFTER :",(LPVOID)(LONG)pmsg->type);
  3283                        ;							
                    	}
  3284                        	.line	752
  3285                        ;							
                    }
  3286                        L10022:
  3287                        	.line	753
  3288                        ;						}
  3289                        L10019:
  3290                        	.line	754
  3291                        ;
  3292                        ;					}
  3293                        L10018:
  3294                        	.line	756
  3295                        ;
  3296                        ;
  3297                        ;					//hitNode = k_po
                    int_in_any_nodeslist(((PCLICKDETECTED)k_point_hit_scan(x,y)-
                    >data)->window->pChildHitList,x,y);
  3298                        ;
  3299                        ;					/*
  3300                        ;					hitNode = k_poin
                    t_in_nodeslist(x,y);
  3301                        ;					if(hitNode)
  3302                        ;					{
  3303                        ;						hitNodeP
  Thu Dec  3 2020 22:25                                                Page 64


                    arent = hitNode;
  3304                        ;						//k_debu
                    g_message("Found hit:",hitNode->name);
  3305                        ;
  3306                        ;						pWin = (
                    (PCLICKDETECTED)hitNode->data)->window;
  3307                        ;						//if(pWi
                    n && pWin->isVisible)
  3308                        ;						if(pWin)
  3309                        ;						{
  3310                        ;							
                    //k_debug_string("k_do_processes::Window\r\n");
  3311                        ;							
                    //k_debug_pointer("k_do_processes::pWin->pChildWindows:",pWi
                    n->pChildWindows);
  3312                        ;							
                    //if(pWin->pChildHitList)
  3313                        ;							
                    if(pWin->pChildHitList)
  3314                        ;							
                    {
  3315                        ;							
                    	// check if children were clicked
  3316                        ;							
                    	hitChildNode = k_point_in_any_nodeslist(pWin->pChildHitL
                    ist,x,y);
  3317                        ;							
                    	if(hitChildNode)
  3318                        ;							
                    	{
  3319                        ;							
                    		// switch hit to child
  3320                        ;							
                    		//k_debug_strings("k_do_processes::child-hit:",h
                    itChildNode->name);
  3321                        ;							
                    		hitNode = hitChildNode;
  3322                        ;							
                    		pWin = ((PCLICKDETECTED)hitChildNode->data)->win
                    dow;
  3323                        ;							
                    	}
  3324                        ;							
                    }
  3325                        ;
  3326                        ;							
                    ((PCLICKDETECTED)hitNode->data)->handler(pWin);
  3327                        ;							
                    pmsg->hwnd = k_getHandleFromWindow(pWin);
  3328                        ;
  3329                        ;							
                    if((pmsg->type == FX_LBUTTON_DOWN) || (pmsg->type == FX_MBUT
                    TON_DOWN) || (pmsg->type == FX_RBUTTON_DOWN))
  3330                        ;							
                    {
  3331                        ;							
                    	if(pmsg->hwnd!=hWndFocus)
  3332                        ;							
  Thu Dec  3 2020 22:25                                                Page 65


                    	{
  3333                        ;							
                    		k_debug_pointer("*** k_event_loop::FX_FOCUS_WIND
                    OW:",pmsg->hwnd);
  3334                        ;							
                    		k_enqueue(_k_eventQueue,k_create_synthetic_windo
                    w_msg(pmsg->hwnd,FX_FOCUS_WINDOW,&hWndFocus,sizeof(hWndFocus
                    )));
  3335                        ;							
                    		hWndFocus =  pmsg->hwnd;
  3336                        ;							
                    	}
  3337                        ;							
                    }
  3338                        ;
  3339                        ;//						
                    	if(k_isNonClient(pWin,pmsg,x,y))
  3340                        ;//						
                    	{
  3341                        ;//						
                    		k_debug_string("*** k_event_loop::NON-CLIENT MOU
                    SE EVENT\r\n");
  3342                        ;//						
                    	}
  3343                        ;
  3344                        ;
  3345                        ;						}
  3346                        ;
  3347                        ;					}
  3348                        ;					*/
  3349                        ;
  3350                        ;					/*
  3351                        ;					if(_k_hLockedFoc
                    us && (pmsg->hwnd != _k_hLockedFocus))
  3352                        ;					{
  3353                        ;						pmsg->hw
                    nd = _k_hLockedFocus;
  3354                        ;						k_debug_
                    pointer("k_event_loop _k_hLockedFocus LOCKED pmsg->hwnd:", p
                    msg->hwnd);
  3355                        ;					}
  3356                        ;					*/
  3357                        ;					if(!pmsg->hwnd)
  3358                        L10015:
  3359                        	.line	819
  3360                        ;					{
  3361 05:04F1: A0 0A 00     	ldy	#$a
  3362 05:04F4: B7 09        	lda	[<L36+pmsg_1],Y
  3363 05:04F6: A0 0C 00     	ldy	#$c
  3364 05:04F9: 17 09        	ora	[<L36+pmsg_1],Y
  3365 05:04FB: F0 03        	beq	L60
  3366 05:04FD: 82 27 00     	brl	L10023
  3367                        L60:
  3368                        	.line	820
  3369                        ;						if(k_use
                    r_getDesktopWindow())
  3370                        	.line	821
  3371                        ;						{
  Thu Dec  3 2020 22:25                                                Page 66


  3372 05:0500: 22 xx xx xx  	jsl	~~k_user_getDesktopWindow
  3373 05:0504: 85 01        	sta	<R0
  3374 05:0506: 86 03        	stx	<R0+2
  3375 05:0508: A5 01        	lda	<R0
  3376 05:050A: 05 03        	ora	<R0+2
  3377 05:050C: D0 03        	bne	L61
  3378 05:050E: 82 16 00     	brl	L10024
  3379                        L61:
  3380                        	.line	822
  3381                        ;							
                    pmsg->hwnd = k_user_getDesktopWindow();
  3382                        	.line	823
  3383 05:0511: 22 xx xx xx  	jsl	~~k_user_getDesktopWindow
  3384 05:0515: 85 01        	sta	<R0
  3385 05:0517: 86 03        	stx	<R0+2
  3386 05:0519: A5 01        	lda	<R0
  3387 05:051B: A0 0A 00     	ldy	#$a
  3388 05:051E: 97 09        	sta	[<L36+pmsg_1],Y
  3389 05:0520: A5 03        	lda	<R0+2
  3390 05:0522: A0 0C 00     	ldy	#$c
  3391 05:0525: 97 09        	sta	[<L36+pmsg_1],Y
  3392                        ;						}
  3393                        	.line	824
  3394                        ;					}
  3395                        L10024:
  3396                        	.line	825
  3397                        ;
  3398                        ;
  3399                        ;					/*
  3400                        ;					if(_k_hLockedFoc
                    us)
  3401                        ;					{
  3402                        ;						pmsg->hw
                    nd = _k_hLockedFocus;
  3403                        ;						//k_debu
                    g_integer("k_event_loop _k_hLockedFocus LOCKED pmsg->type:",
                     pmsg->type);
  3404                        ;						//k_debu
                    g_pointer("k_event_loop _k_hLockedFocus LOCKED pmsg->hwnd:",
                     pmsg->hwnd);
  3405                        ;					}
  3406                        ;					*/
  3407                        ;				}
  3408                        L10023:
  3409                        	.line	836
  3410                        ;
  3411                        ;				//k_debug_pointer("k_eve
                    nt_loop hWndFocus pmsg->hwnd:", pmsg->hwnd);
  3412                        ;				if(hWndFocus && ((pmsg->
                    type == FX_KEY_DOWN) || (pmsg->type == FX_KEY_UP)))
  3413                        L10014:
  3414                        	.line	839
  3415                        ;				{
  3416 05:0527: A5 25        	lda	<L36+hWndFocus_1
  3417 05:0529: 05 27        	ora	<L36+hWndFocus_1+2
  3418 05:052B: D0 03        	bne	L62
  3419 05:052D: 82 32 00     	brl	L10025
  3420                        L62:
  Thu Dec  3 2020 22:25                                                Page 67


  3421 05:0530: A0 08 00     	ldy	#$8
  3422 05:0533: B7 09        	lda	[<L36+pmsg_1],Y
  3423 05:0535: C9 10 0F     	cmp	#<$f10
  3424 05:0538: D0 03        	bne	L64
  3425 05:053A: 82 0D 00     	brl	L63
  3426                        L64:
  3427 05:053D: A0 08 00     	ldy	#$8
  3428 05:0540: B7 09        	lda	[<L36+pmsg_1],Y
  3429 05:0542: C9 12 0F     	cmp	#<$f12
  3430 05:0545: F0 03        	beq	L65
  3431 05:0547: 82 18 00     	brl	L10025
  3432                        L65:
  3433                        L63:
  3434                        	.line	840
  3435                        ;					k_debug_string("
                    *** k_event_loop::FX_KEY_*\r\n");
  3436                        	.line	841
  3437 05:054A: F4 xx xx     	pea	#^L34+288
  3438 05:054D: F4 xx xx     	pea	#<L34+288
  3439 05:0550: 22 xx xx xx  	jsl	~~k_debug_string
  3440                        ;					pmsg->hwnd = hWn
                    dFocus;
  3441                        	.line	842
  3442 05:0554: A5 25        	lda	<L36+hWndFocus_1
  3443 05:0556: A0 0A 00     	ldy	#$a
  3444 05:0559: 97 09        	sta	[<L36+pmsg_1],Y
  3445 05:055B: A5 27        	lda	<L36+hWndFocus_1+2
  3446 05:055D: A0 0C 00     	ldy	#$c
  3447 05:0560: 97 09        	sta	[<L36+pmsg_1],Y
  3448                        ;				}
  3449                        	.line	843
  3450                        ;				k_do_processes(pmsg);
  3451                        L10025:
  3452                        	.line	844
  3453 05:0562: D4 0B        	pei	<L36+pmsg_1+2
  3454 05:0564: D4 09        	pei	<L36+pmsg_1
  3455 05:0566: 22 FF 08 05  	jsl	~~k_do_processes
  3456                        ;
  3457                        ;
  3458                        ;				/*
  3459                        ;				if(pmsg->hwnd)
  3460                        ;				{
  3461                        ;					//k_debug_pointe
                    r("k_do_processes:DoWndProcs:k_getWindowList:",k_getWindowLi
                    st());
  3462                        ;					k_nodelist_forea
                    ch_data(k_getWindowList(),pmsg,DoWndProcs);
  3463                        ;				}
  3464                        ;				*/
  3465                        ;
  3466                        ;				//
  3467                        ;				k_destory_msg(pmsg);
  3468                        	.line	856
  3469 05:056A: D4 0B        	pei	<L36+pmsg_1+2
  3470 05:056C: D4 09        	pei	<L36+pmsg_1
  3471 05:056E: 22 3C 1D 05  	jsl	~~k_destory_msg
  3472                        ;
  3473                        ;				//asm sei;
  Thu Dec  3 2020 22:25                                                Page 68


  3474                        ;				pmsg = (PFXOSMESSAGE)k_d
                    equeue(_k_eventQueue);
  3475                        	.line	859
  3476 05:0572: AD xx xx     	lda	|~~_k_eventQueue+2
  3477 05:0575: 48           	pha
  3478 05:0576: AD xx xx     	lda	|~~_k_eventQueue
  3479 05:0579: 48           	pha
  3480 05:057A: 22 xx xx xx  	jsl	~~k_dequeue
  3481 05:057E: 85 09        	sta	<L36+pmsg_1
  3482 05:0580: 86 0B        	stx	<L36+pmsg_1+2
  3483                        ;				//asm cli;
  3484                        ;			}
  3485                        	.line	861
  3486 05:0582: 82 FC FC     	brl	L10009
  3487                        L10010:
  3488                        ;			//
  3489                        ;			//
  3490                        ;			//k_do_procs(processMessage);
  3491                        ;			k_do_processes(processMessage);
  3492                        	.line	865
  3493 05:0585: D4 0F        	pei	<L36+processMessage_1+2
  3494 05:0587: D4 0D        	pei	<L36+processMessage_1
  3495 05:0589: 22 FF 08 05  	jsl	~~k_do_processes
  3496                        ;
  3497                        ;			/*
  3498                        ;			volAvail = k_sd_read_vol(&diskIn
                    fo);
  3499                        ;			if(volAvail)
  3500                        ;			{
  3501                        ;				k_send_message(NULL,FX_D
                    ISK_INSERT,&diskInfo,sizeof(DISKINFO));
  3502                        ;			}
  3503                        ;			else
  3504                        ;			{
  3505                        ;				k_send_message(NULL,FX_D
                    ISK_REMOVE,NULL,0);
  3506                        ;			}
  3507                        ;		*/
  3508                        ;
  3509                        ;			asm cli;
  3510                        	.line	879
  3511                        	asmstart
  3512 05:058D: 58           	cli
  3513                        	asmend
  3514                        ;
  3515                        ;
  3516                        ;			if(!floppy)
  3517                        	.line	882
  3518                        ;			{
  3519 05:058E: A5 5E        	lda	<L36+floppy_1
  3520 05:0590: 29 FF 00     	and	#$ff
  3521 05:0593: F0 03        	beq	L66
  3522 05:0595: 82 08 00     	brl	L10026
  3523                        L66:
  3524                        	.line	883
  3525                        ;				//floppy_init();
  3526                        ;				//flpydsk_install(6);
  3527                        ;				//flpydsk_read_sector(1)
  Thu Dec  3 2020 22:25                                                Page 69


                    ;
  3528                        ;				floppy = TRUE;
  3529                        	.line	887
  3530 05:0598: E2 20        	sep	#$20
  3531                        	longa	off
  3532 05:059A: A9 01        	lda	#$1
  3533 05:059C: 85 5E        	sta	<L36+floppy_1
  3534 05:059E: C2 20        	rep	#$20
  3535                        	longa	on
  3536                        ;			}
  3537                        	.line	888
  3538                        ;
  3539                        ;			/*
  3540                        ;			if(floppy)
  3541                        ;				floppy_read(floppybuffer
                    , floppyLBA++, 3);
  3542                        ;				*/
  3543                        ;		}
  3544                        L10026:
  3545                        	.line	894
  3546 05:05A0: 82 CD FC     	brl	L10007
  3547                        ;
  3548                        ;		if(processMessage)
  3549                        	.line	896
  3550                        ;			k_mem_deallocate_heap(processMes
                    sage);
  3551 05:05A3: A5 0D        	lda	<L36+processMessage_1
  3552 05:05A5: 05 0F        	ora	<L36+processMessage_1+2
  3553 05:05A7: D0 03        	bne	L67
  3554 05:05A9: 82 08 00     	brl	L10027
  3555                        L67:
  3556                        	.line	897
  3557 05:05AC: D4 0F        	pei	<L36+processMessage_1+2
  3558 05:05AE: D4 0D        	pei	<L36+processMessage_1
  3559 05:05B0: 22 xx xx xx  	jsl	~~k_mem_deallocate_heap
  3560                        ;	}
  3561                        L10027:
  3562                        	.line	898
  3563                        ;	else
  3564 05:05B4: 82 0C 00     	brl	L10028
  3565                        L10004:
  3566                        ;	{
  3567                        	.line	900
  3568                        ;		k_debug_string("Exception:fxeventmanager
                     not initialized");
  3569                        	.line	901
  3570 05:05B7: F4 xx xx     	pea	#^L34+317
  3571 05:05BA: F4 xx xx     	pea	#<L34+317
  3572 05:05BD: 22 xx xx xx  	jsl	~~k_debug_string
  3573                        ;		THROW_EXCEPTION(0xA000,0x0001,"");
  3574                        	.line	902
  3575                        	.line	902
  3576                        	asmstart
  3577 05:05C1: 00 00        	BRK
  3578                        	asmend
  3579                        	.line	902
  3580                        	.line	902
  3581                        ;	}
  Thu Dec  3 2020 22:25                                                Page 70


  3582                        	.line	903
  3583                        L10028:
  3584                        ;
  3585                        ;
  3586                        ;}
  3587                        	.line	906
  3588                        L68:
  3589 05:05C3: 2B           	pld
  3590 05:05C4: 3B           	tsc
  3591 05:05C5: 18           	clc
  3592 05:05C6: 69 64 00     	adc	#L35
  3593 05:05C9: 1B           	tcs
  3594 05:05CA: 6B           	rtl
  3595                        	.endblock	906
  3596             00000064   L35	equ	100
  3597             00000009   L36	equ	9
  3598 05:05CB:              	ends
  3599                        	efunc
  3600                        	.endfunc	906,9,100
  3601                        	.line	906
  3602                        	data
  3603                        L34:
  3604 00:00E8: 6B 5F 69 6E  	db	$6B,$5F,$69,$6E,$69,$74,$61,$6C,$69,$7A,
                    $65,$5F,$65,$78,$65
       00:00EC: 69 74 61 6C 
       00:00F0: 69 7A 65 5F 
       00:00F4: 65 78 65 
  3605 00:00F7: 63 75 74 69  	db	$63,$75,$74,$69,$76,$65,$0D,$0A,$00,$6B,
                    $5F,$69,$6E,$69,$74
       00:00FB: 76 65 0D 0A 
       00:00FF: 00 6B 5F 69 
       00:0103: 6E 69 74 
  3606 00:0106: 61 6C 69 7A  	db	$61,$6C,$69,$7A,$65,$5F,$65,$76,$65,$6E,
                    $74,$5F,$6D,$61,$6E
       00:010A: 65 5F 65 76 
       00:010E: 65 6E 74 5F 
       00:0112: 6D 61 6E 
  3607 00:0115: 61 67 65 72  	db	$61,$67,$65,$72,$0D,$0A,$00,$6B,$5F,$69,
                    $6E,$69,$74,$61,$6C
       00:0119: 0D 0A 00 6B 
       00:011D: 5F 69 6E 69 
       00:0121: 74 61 6C 
  3608 00:0124: 69 7A 65 5F  	db	$69,$7A,$65,$5F,$77,$69,$6E,$64,$6F,$77,
                    $5F,$6D,$61,$6E,$61
       00:0128: 77 69 6E 64 
       00:012C: 6F 77 5F 6D 
       00:0130: 61 6E 61 
  3609 00:0133: 67 65 72 20  	db	$67,$65,$72,$20,$62,$65,$66,$6F,$72,$65,
                    $0D,$0A,$00,$6B,$5F
       00:0137: 62 65 66 6F 
       00:013B: 72 65 0D 0A 
       00:013F: 00 6B 5F 
  3610 00:0142: 69 6E 69 74  	db	$69,$6E,$69,$74,$61,$6C,$69,$7A,$65,$5F,
                    $77,$69,$6E,$64,$6F
       00:0146: 61 6C 69 7A 
       00:014A: 65 5F 77 69 
       00:014E: 6E 64 6F 
  3611 00:0151: 77 5F 6D 61  	db	$77,$5F,$6D,$61,$6E,$61,$67,$65,$72,$20,
  Thu Dec  3 2020 22:25                                                Page 71


                    $61,$66,$74,$65,$72
       00:0155: 6E 61 67 65 
       00:0159: 72 20 61 66 
       00:015D: 74 65 72 
  3612 00:0160: 0D 0A 00 40  	db	$0D,$0A,$00,$40,$2F,$64,$65,$73,$6B,$74,
                    $6F,$70,$00,$40,$2F
       00:0164: 2F 64 65 73 
       00:0168: 6B 74 6F 70 
       00:016C: 00 40 2F 
  3613 00:016F: 69 64 6C 65  	db	$69,$64,$6C,$65,$00,$6B,$5F,$65,$76,$65,
                    $6E,$74,$5F,$6C,$6F
       00:0173: 00 6B 5F 65 
       00:0177: 76 65 6E 74 
       00:017B: 5F 6C 6F 
  3614 00:017E: 6F 70 20 65  	db	$6F,$70,$20,$65,$76,$65,$6E,$74,$3A,$3A,
                    $46,$58,$5F,$4D,$45
       00:0182: 76 65 6E 74 
       00:0186: 3A 3A 46 58 
       00:018A: 5F 4D 45 
  3615 00:018D: 4E 55 5F 43  	db	$4E,$55,$5F,$43,$4F,$4D,$4D,$41,$4E,$44,
                    $3A,$00,$6B,$5F,$65
       00:0191: 4F 4D 4D 41 
       00:0195: 4E 44 3A 00 
       00:0199: 6B 5F 65 
  3616 00:019C: 76 65 6E 74  	db	$76,$65,$6E,$74,$5F,$6C,$6F,$6F,$70,$20,
                    $64,$61,$74,$61,$3A
       00:01A0: 5F 6C 6F 6F 
       00:01A4: 70 20 64 61 
       00:01A8: 74 61 3A 
  3617 00:01AB: 46 58 5F 50  	db	$46,$58,$5F,$50,$52,$4F,$43,$45,$53,$53,
                    $5F,$46,$4C,$4F,$50
       00:01AF: 52 4F 43 45 
       00:01B3: 53 53 5F 46 
       00:01B7: 4C 4F 50 
  3618 00:01BA: 50 59 0D 0A  	db	$50,$59,$0D,$0A,$00,$6B,$5F,$65,$76,$65,
                    $6E,$74,$5F,$6C,$6F
       00:01BE: 00 6B 5F 65 
       00:01C2: 76 65 6E 74 
       00:01C6: 5F 6C 6F 
  3619 00:01C9: 6F 70 20 64  	db	$6F,$70,$20,$64,$61,$74,$61,$3A,$46,$58,
                    $5F,$50,$52,$4F,$43
       00:01CD: 61 74 61 3A 
       00:01D1: 46 58 5F 50 
       00:01D5: 52 4F 43 
  3620 00:01D8: 45 53 53 5F  	db	$45,$53,$53,$5F,$53,$44,$43,$41,$52,$44,
                    $0D,$0A,$00,$2A,$2A
       00:01DC: 53 44 43 41 
       00:01E0: 52 44 0D 0A 
       00:01E4: 00 2A 2A 
  3621 00:01E7: 2A 20 6B 5F  	db	$2A,$20,$6B,$5F,$65,$76,$65,$6E,$74,$5F,
                    $6C,$6F,$6F,$70,$3A
       00:01EB: 65 76 65 6E 
       00:01EF: 74 5F 6C 6F 
       00:01F3: 6F 70 3A 
  3622 00:01F6: 3A 46 58 5F  	db	$3A,$46,$58,$5F,$46,$4F,$43,$55,$53,$5F,
                    $57,$49,$4E,$44,$4F
       00:01FA: 46 4F 43 55 
       00:01FE: 53 5F 57 49 
  Thu Dec  3 2020 22:25                                                Page 72


       00:0202: 4E 44 4F 
  3623 00:0205: 57 3A 00 2A  	db	$57,$3A,$00,$2A,$2A,$2A,$20,$6B,$5F,$65,
                    $76,$65,$6E,$74,$5F
       00:0209: 2A 2A 20 6B 
       00:020D: 5F 65 76 65 
       00:0211: 6E 74 5F 
  3624 00:0214: 6C 6F 6F 70  	db	$6C,$6F,$6F,$70,$3A,$3A,$46,$58,$5F,$4B,
                    $45,$59,$5F,$2A,$0D
       00:0218: 3A 3A 46 58 
       00:021C: 5F 4B 45 59 
       00:0220: 5F 2A 0D 
  3625 00:0223: 0A 00 45 78  	db	$0A,$00,$45,$78,$63,$65,$70,$74,$69,$6F,
                    $6E,$3A,$66,$78,$65
       00:0227: 63 65 70 74 
       00:022B: 69 6F 6E 3A 
       00:022F: 66 78 65 
  3626 00:0232: 76 65 6E 74  	db	$76,$65,$6E,$74,$6D,$61,$6E,$61,$67,$65,
                    $72,$20,$6E,$6F,$74
       00:0236: 6D 61 6E 61 
       00:023A: 67 65 72 20 
       00:023E: 6E 6F 74 
  3627 00:0241: 20 69 6E 69  	db	$20,$69,$6E,$69,$74,$69,$61,$6C,$69,$7A,
                    $65,$64,$00
       00:0245: 74 69 61 6C 
       00:0249: 69 7A 65 64 
       00:024D: 00 
  3628 00:024E:              	ends
  3629                        ;
  3630                        ;#endif
  3631                        ;
  3632                        ;BOOL k_isNonClient(PWINDOW pWin,PFXOSMESSAGE pmsg
                    ,INT x,INT y)
  3633                        ;//BOOL k_isNonClient(HWND hWnd,PFXOSMESSAGE pmsg,
                    INT x,INT y)
  3634                        ;{
  3635                        	.line	910
  3636                        	.line	912
  3637                        	EVTMAN
  3638                        	xdef	~~k_isNonClient
  3639                        	func
  3640                        	.function	912
  3641                        ~~k_isNonClient:
  3642                        	longa	on
  3643                        	longi	on
  3644 05:05CB: 3B           	tsc
  3645 05:05CC: 38           	sec
  3646 05:05CD: E9 09 00     	sbc	#L70
  3647 05:05D0: 1B           	tcs
  3648 05:05D1: 0B           	phd
  3649 05:05D2: 5B           	tcd
  3650             00000004   pWin_0	set	4
  3651             00000008   pmsg_0	set	8
  3652             0000000C   x_0	set	12
  3653             0000000E   y_0	set	14
  3654                        	.block	912
  3655                        ;	BOOL bRet = TRUE;
  3656                        ;	//PWINDOW pWin;
  3657                        ;	PRECT r = &pWin->clientRect;
  Thu Dec  3 2020 22:25                                                Page 73


  3658                        ;
  3659                        ;
  3660                        ;	//pWin = k_getWindowFromHandle(hWnd);
  3661                        ;	//k_debug_integer("X:",x);
  3662                        ;	//k_debug_integer("y:",y);
  3663                        ;	//k_debug_rect("NC CLIENT:",r);
  3664                        ;	//k_debug_rect("NC WINDOW:",(PRECT)&pWin->win_x)
                    ;
  3665                        ;	if(pWin)
  3666             00000000   bRet_1	set	0
  3667             00000001   r_1	set	1
  3668                        	.sym	bRet,0,14,1,8
  3669                        	.sym	r,1,138,1,32,25
  3670                        	.sym	pWin,4,138,6,32,30
  3671                        	.sym	pmsg,8,138,6,32,16
  3672                        	.sym	x,12,5,6,16
  3673                        	.sym	y,14,5,6,16
  3674 05:05D3: E2 20        	sep	#$20
  3675                        	longa	off
  3676 05:05D5: A9 01        	lda	#$1
  3677 05:05D7: 85 05        	sta	<L71+bRet_1
  3678 05:05D9: C2 20        	rep	#$20
  3679                        	longa	on
  3680 05:05DB: 18           	clc
  3681 05:05DC: A9 18 00     	lda	#$18
  3682 05:05DF: 65 0D        	adc	<L70+pWin_0
  3683 05:05E1: 85 06        	sta	<L71+r_1
  3684 05:05E3: A9 00 00     	lda	#$0
  3685 05:05E6: 65 0F        	adc	<L70+pWin_0+2
  3686 05:05E8: 85 08        	sta	<L71+r_1+2
  3687                        	.line	923
  3688                        ;	{
  3689 05:05EA: A5 0D        	lda	<L70+pWin_0
  3690 05:05EC: 05 0F        	ora	<L70+pWin_0+2
  3691 05:05EE: D0 03        	bne	L73
  3692 05:05F0: 82 5C 00     	brl	L10029
  3693                        L73:
  3694                        	.line	924
  3695                        ;		if((x > r->x) && (x < (r->x + r->width))
                    )
  3696                        	.line	925
  3697                        ;		{
  3698 05:05F3: 38           	sec
  3699 05:05F4: A7 06        	lda	[<L71+r_1]
  3700 05:05F6: E5 15        	sbc	<L70+x_0
  3701 05:05F8: 70 03        	bvs	L74
  3702 05:05FA: 49 00 80     	eor	#$8000
  3703                        L74:
  3704 05:05FD: 10 03        	bpl	L75
  3705 05:05FF: 82 4D 00     	brl	L10030
  3706                        L75:
  3707 05:0602: 18           	clc
  3708 05:0603: A7 06        	lda	[<L71+r_1]
  3709 05:0605: A0 04 00     	ldy	#$4
  3710 05:0608: 77 06        	adc	[<L71+r_1],Y
  3711 05:060A: 85 01        	sta	<R0
  3712 05:060C: 38           	sec
  3713 05:060D: A5 15        	lda	<L70+x_0
  Thu Dec  3 2020 22:25                                                Page 74


  3714 05:060F: E5 01        	sbc	<R0
  3715 05:0611: 70 03        	bvs	L76
  3716 05:0613: 49 00 80     	eor	#$8000
  3717                        L76:
  3718 05:0616: 10 03        	bpl	L77
  3719 05:0618: 82 34 00     	brl	L10030
  3720                        L77:
  3721                        	.line	926
  3722                        ;			if((y > r->y) && (y < (r->y + r-
                    >height)))
  3723                        	.line	927
  3724                        ;			{
  3725 05:061B: 38           	sec
  3726 05:061C: A0 02 00     	ldy	#$2
  3727 05:061F: B7 06        	lda	[<L71+r_1],Y
  3728 05:0621: E5 17        	sbc	<L70+y_0
  3729 05:0623: 70 03        	bvs	L78
  3730 05:0625: 49 00 80     	eor	#$8000
  3731                        L78:
  3732 05:0628: 10 03        	bpl	L79
  3733 05:062A: 82 22 00     	brl	L10031
  3734                        L79:
  3735 05:062D: 18           	clc
  3736 05:062E: A0 02 00     	ldy	#$2
  3737 05:0631: B7 06        	lda	[<L71+r_1],Y
  3738 05:0633: A0 06 00     	ldy	#$6
  3739 05:0636: 77 06        	adc	[<L71+r_1],Y
  3740 05:0638: 85 01        	sta	<R0
  3741 05:063A: 38           	sec
  3742 05:063B: A5 17        	lda	<L70+y_0
  3743 05:063D: E5 01        	sbc	<R0
  3744 05:063F: 70 03        	bvs	L80
  3745 05:0641: 49 00 80     	eor	#$8000
  3746                        L80:
  3747 05:0644: 10 03        	bpl	L81
  3748 05:0646: 82 06 00     	brl	L10031
  3749                        L81:
  3750                        	.line	928
  3751                        ;				bRet = FALSE;
  3752                        	.line	929
  3753 05:0649: E2 20        	sep	#$20
  3754                        	longa	off
  3755 05:064B: 64 05        	stz	<L71+bRet_1
  3756 05:064D: C2 20        	rep	#$20
  3757                        	longa	on
  3758                        ;			}
  3759                        	.line	930
  3760                        ;		}
  3761                        L10031:
  3762                        	.line	931
  3763                        ;	}
  3764                        L10030:
  3765                        	.line	932
  3766                        ;	return bRet;
  3767                        L10029:
  3768                        	.line	933
  3769 05:064F: A5 05        	lda	<L71+bRet_1
  3770 05:0651: 29 FF 00     	and	#$ff
  Thu Dec  3 2020 22:25                                                Page 75


  3771                        L82:
  3772 05:0654: A8           	tay
  3773 05:0655: A5 0B        	lda	<L70+2
  3774 05:0657: 85 17        	sta	<L70+2+12
  3775 05:0659: A5 0A        	lda	<L70+1
  3776 05:065B: 85 16        	sta	<L70+1+12
  3777 05:065D: 2B           	pld
  3778 05:065E: 3B           	tsc
  3779 05:065F: 18           	clc
  3780 05:0660: 69 15 00     	adc	#L70+12
  3781 05:0663: 1B           	tcs
  3782 05:0664: 98           	tya
  3783 05:0665: 6B           	rtl
  3784                        ;}
  3785                        	.line	934
  3786                        	.endblock	934
  3787             00000009   L70	equ	9
  3788             00000005   L71	equ	5
  3789 05:0666:              	ends
  3790                        	efunc
  3791                        	.endfunc	934,5,9
  3792                        	.line	934
  3793                        ;
  3794                        ;
  3795                        ;void IdleProc(PFXOSMESSAGE pMsg)
  3796                        ;{
  3797                        	.line	937
  3798                        	.line	938
  3799                        	EVTMAN
  3800                        	xdef	~~IdleProc
  3801                        	func
  3802                        	.function	938
  3803                        ~~IdleProc:
  3804                        	longa	on
  3805                        	longi	on
  3806 05:0666: 3B           	tsc
  3807 05:0667: 38           	sec
  3808 05:0668: E9 0F 00     	sbc	#L83
  3809 05:066B: 1B           	tcs
  3810 05:066C: 0B           	phd
  3811 05:066D: 5B           	tcd
  3812             00000004   pMsg_0	set	4
  3813                        	.block	938
  3814                        ;	//FIL   fp;
  3815                        ;	LPVOID buff;
  3816                        ;	UINT br;
  3817                        ;
  3818                        ;	ULONG i = 0;
  3819                        ;	//DISKINFO diskInfo;
  3820                        ;	BOOL volAvail = FALSE;
  3821                        ;#ifdef USE_FX256_FMX
  3822                        ;	PFXDOSDEVICE psdcard;
  3823                        ;#endif
  3824                        ;	//struct omf_file *current_file;
  3825                        ;	//PFXDOSDEVICE phddcard;
  3826                        ;	//PFXDOSDEVICE pfddcard;
  3827                        ;	//UCHAR devRtrn;
  3828                        ;	//PIDENTIFY_DEVICE_DATA pinfo;
  Thu Dec  3 2020 22:25                                                Page 76


  3829                        ;	//PIDSECTOR pids = NULL;
  3830                        ;	//UINT *pintInfo = NULL;
  3831                        ;
  3832                        ;	//PFXNODELIST pdirlist = NULL;
  3833                        ;
  3834                        ;
  3835                        ;	//k_debug_string("IdleProc enter\r\n");
  3836                        ;	if(pMsg!=NULL)
  3837             00000000   buff_1	set	0
  3838             00000004   br_1	set	4
  3839             00000006   i_1	set	6
  3840             0000000A   volAvail_1	set	10
  3841             0000000B   psdcard_1	set	11
  3842                        	.sym	buff,0,129,1,32
  3843                        	.sym	br,4,16,1,16
  3844                        	.sym	i,6,18,1,32
  3845                        	.sym	volAvail,10,14,1,8
  3846                        	.sym	psdcard,11,138,1,32,101
  3847                        	.sym	pMsg,4,138,6,32,16
  3848 05:066E: 64 07        	stz	<L84+i_1
  3849 05:0670: 64 09        	stz	<L84+i_1+2
  3850 05:0672: E2 20        	sep	#$20
  3851                        	longa	off
  3852 05:0674: 64 0B        	stz	<L84+volAvail_1
  3853 05:0676: C2 20        	rep	#$20
  3854                        	longa	on
  3855                        	.line	961
  3856                        ;	{
  3857 05:0678: A5 13        	lda	<L83+pMsg_0
  3858 05:067A: 05 15        	ora	<L83+pMsg_0+2
  3859 05:067C: D0 03        	bne	L86
  3860 05:067E: 82 5E 00     	brl	L10032
  3861                        L86:
  3862                        	.line	962
  3863                        ;		//k_put_char(0,40,idlespinner[scpu++],15
                    ,0);
  3864                        ;		//if(scpu>3) scpu = 0;
  3865                        ;
  3866                        ;		//k_put_char(9,11, (char)(((PMOUSEMSGDAT
                    A)pMsg)->button1)  ,15,0);
  3867                        ;
  3868                        ;
  3869                        ;
  3870                        ;		_subTick--;
  3871                        	.line	970
  3872 05:0681: CE xx xx     	dec	|~~_subTick
  3873                        ;
  3874                        ;		if(_subTick == 0)
  3875                        	.line	972
  3876                        ;		{
  3877 05:0684: AD xx xx     	lda	|~~_subTick
  3878 05:0687: F0 03        	beq	L87
  3879 05:0689: 82 53 00     	brl	L10033
  3880                        L87:
  3881                        	.line	973
  3882                        ;			_subTick = 0x7FFF;
  3883                        	.line	974
  3884 05:068C: A9 FF 7F     	lda	#$7fff
  Thu Dec  3 2020 22:25                                                Page 77


  3885 05:068F: 8D xx xx     	sta	|~~_subTick
  3886                        ;			//k_clean_closed_windows();
  3887                        ;			// check heap memory
  3888                        ;			k_heap_integrity_check();
  3889                        	.line	977
  3890 05:0692: 22 xx xx xx  	jsl	~~k_heap_integrity_check
  3891                        ;
  3892                        ;			/*
  3893                        ;			asm sei;
  3894                        ;			volAvail = k_sd_read_vol(&diskIn
                    fo);
  3895                        ;			asm cli;
  3896                        ;
  3897                        ;			if(volAvail)
  3898                        ;			{
  3899                        ;				k_send_message(NULL,FX_D
                    ISK_INSERT,&diskInfo,sizeof(DISKINFO));
  3900                        ;			}
  3901                        ;			else
  3902                        ;			{
  3903                        ;				k_send_message(NULL,FX_D
                    ISK_REMOVE,NULL,0);
  3904                        ;			}
  3905                        ;			*/
  3906                        ;
  3907                        ;
  3908                        ;			//reg_config();
  3909                        ;
  3910                        ;			//k_debug_hex("k_ide_init(initHD
                    ):",initHD);
  3911                        ;			if(initHD)
  3912                        	.line	998
  3913                        ;			{
  3914 05:0696: AD xx xx     	lda	|~~initHD
  3915 05:0699: 29 FF 00     	and	#$ff
  3916 05:069C: D0 03        	bne	L88
  3917 05:069E: 82 2B 00     	brl	L10034
  3918                        L88:
  3919                        	.line	999
  3920                        ;
  3921                        ;				//GetDirectory("a:/");
  3922                        ;
  3923                        ;				/*
  3924                        ;				pfddcard = k_create_dos_
                    device(FXDOS_FDD);
  3925                        ;				if(pfddcard)
  3926                        ;				{
  3927                        ;					k_read_dos_direc
                    tory(pfddcard);
  3928                        ;					k_mem_deallocate
                    _heap(pfddcard);
  3929                        ;				}
  3930                        ;				*/
  3931                        ;
  3932                        ;				/*
  3933                        ;				phddcard = k_create_dos_
                    device(FXDOS_HDD);
  3934                        ;				if(phddcard)
  Thu Dec  3 2020 22:25                                                Page 78


  3935                        ;				{
  3936                        ;					k_read_dos_direc
                    tory(phddcard);
  3937                        ;					k_mem_deallocate
                    _heap(phddcard);
  3938                        ;				}
  3939                        ;
  3940                        ;				*/
  3941                        ;
  3942                        ;				//k_sd_full_test();
  3943                        ;
  3944                        ;				//psdcard = k_create_dos
                    _device(FXDOS_SDC);
  3945                        ;#ifdef USE_FX256_FMX_DISABLED
  3946                        ;
  3947                        ;				psdcard = NULL;
  3948                        ;				if(psdcard)
  3949                        ;				{
  3950                        ;					k_dos_read_file(
                    psdcard,"APGMLIB.LIB");
  3951                        ;					/*
  3952                        ;					pdirlist = k_rea
                    d_dos_directory(psdcard);
  3953                        ;					if(pdirlist)
  3954                        ;					{
  3955                        ;
  3956                        ;						k_dos_re
                    ad_file(psdcard,"APGM.BIN");
  3957                        ;
  3958                        ;						k_nodeli
                    st_deallocate_list(pdirlist);
  3959                        ;					}
  3960                        ;
  3961                        ;					k_mem_deallocate
                    _heap(psdcard);
  3962                        ;					*/
  3963                        ;					k_mem_deallocate
                    _heap(psdcard);
  3964                        ;					//k_fcheck_syste
                    m_memory(NULL);
  3965                        ;				}
  3966                        ;
  3967                        ;#endif
  3968                        ;
  3969                        ;				k_debug_string("IdleProc
                    :f_mount...\r\n");
  3970                        	.line	1049
  3971 05:06A1: F4 xx xx     	pea	#^L69
  3972 05:06A4: F4 xx xx     	pea	#<L69
  3973 05:06A7: 22 xx xx xx  	jsl	~~k_debug_string
  3974                        ;				//f_mount(&FatFs, "0", 1
                    );
  3975                        ;
  3976                        ;
  3977                        ;				k_debug_string("IdleProc
                    :MEMORY_INIT...\r\n");
  3978                        	.line	1053
  3979 05:06AB: F4 xx xx     	pea	#^L69+22
  Thu Dec  3 2020 22:25                                                Page 79


  3980 05:06AE: F4 xx xx     	pea	#<L69+22
  3981 05:06B1: 22 xx xx xx  	jsl	~~k_debug_string
  3982                        ;			    //my_Memory(MEMORY_INIT,NULL
                    ,NULL);
  3983                        ;
  3984                        ;			    k_debug_string("IdleProc:Loa
                    dOMFFile...\r\n");
  3985                        	.line	1056
  3986 05:06B5: F4 xx xx     	pea	#^L69+48
  3987 05:06B8: F4 xx xx     	pea	#<L69+48
  3988 05:06BB: 22 xx xx xx  	jsl	~~k_debug_string
  3989                        ;
  3990                        ;				//current_file = LoadOMF
                    File("APGMLIB.LIB");
  3991                        ;				//if(current_file != NUL
                    L)
  3992                        ;				//{
  3993                        ;				//	CreateDumpFile(c
                    urrent_file,"a.out");
  3994                        ;				//	mem_free_omf(cur
                    rent_file);
  3995                        ;				//}
  3996                        ;
  3997                        ;				k_debug_string("IdleProc
                    :MEMORY_FREE...\r\n");
  3998                        	.line	1065
  3999 05:06BF: F4 xx xx     	pea	#^L69+74
  4000 05:06C2: F4 xx xx     	pea	#<L69+74
  4001 05:06C5: 22 xx xx xx  	jsl	~~k_debug_string
  4002                        ;				//my_Memory(MEMORY_FREE,
                    NULL,NULL);
  4003                        ;
  4004                        ;				/*
  4005                        ;				k_debug_string("EVTMAN:f
                    _open...\r\n");
  4006                        ;				fres = f_open (&fp,"APGM
                    .BIN",FA_READ);
  4007                        ;				k_debug_integer("fres:",
                    fres);
  4008                        ;				if(fres == 0)
  4009                        ;				{
  4010                        ;					k_debug_long("EV
                    TMAN:objsize:",fp.obj.objsize);
  4011                        ;
  4012                        ;					buff = k_mem_all
                    ocate_heap(fp.obj.objsize);
  4013                        ;					if(buff)
  4014                        ;					{
  4015                        ;						//((LPCH
                    AR)0x0E0000);
  4016                        ;
  4017                        ;						//f_read
                    (&fp,buff,(UINT)fp.obj.objsize,&br);
  4018                        ;						f_read(&
                    fp,((LPCHAR)0x0E0000),(UINT)fp.obj.objsize,&br);
  4019                        ;
  4020                        ;						k_debug_
                    long("EVTMAN:f_read:",br);
  Thu Dec  3 2020 22:25                                                Page 80


  4021                        ;
  4022                        ;
  4023                        ;						k_debug_
                    byte_array("APGM DATA:\r\n",((LPCHAR)0x0E0000),br);
  4024                        ;
  4025                        ;						k_debug_
                    string("Calling DllMain\r\n");
  4026                        ;
  4027                        ;						((DllMai
                    n)((LPCSTR)0x0E0000))((LPCSTR)0x0E0000);
  4028                        ;
  4029                        ;						k_debug_
                    string("Back from DllMain\r\n");
  4030                        ;
  4031                        ;
  4032                        ;
  4033                        ;						k_mem_de
                    allocate_heap(buff);
  4034                        ;					}
  4035                        ;					f_close(&fp);
  4036                        ;				}
  4037                        ;				*/
  4038                        ;
  4039                        ;			}
  4040                        	.line	1103
  4041                        ;			else
  4042 05:06C9: 82 13 00     	brl	L10035
  4043                        L10034:
  4044                        ;			{
  4045                        	.line	1105
  4046                        ;				initHD = TRUE;
  4047                        	.line	1106
  4048 05:06CC: E2 20        	sep	#$20
  4049                        	longa	off
  4050 05:06CE: A9 01        	lda	#$1
  4051 05:06D0: 8D xx xx     	sta	|~~initHD
  4052 05:06D3: C2 20        	rep	#$20
  4053                        	longa	on
  4054                        ;				k_debug_string("IdleProc
                    :initHD == TRUE\r\n");
  4055                        	.line	1107
  4056 05:06D5: F4 xx xx     	pea	#^L69+100
  4057 05:06D8: F4 xx xx     	pea	#<L69+100
  4058 05:06DB: 22 xx xx xx  	jsl	~~k_debug_string
  4059                        ;				/*
  4060                        ;				k_debug_bits("0x07 00000
                    111:", 0x07);
  4061                        ;				k_debug_bits("0xE0 11100
                    000:", 0xE0);
  4062                        ;
  4063                        ;
  4064                        ;				k_delay(100);
  4065                        ;				k_ide_init();
  4066                        ;				k_debug_hex("k_ide_init(
                    ):",0);
  4067                        ;				pinfo = (PIDENTIFY_DEVIC
                    E_DATA)k_ide_get_info();
  4068                        ;				if(pinfo)
  Thu Dec  3 2020 22:25                                                Page 81


  4069                        ;				{
  4070                        ;					initHD = TRUE;
  4071                        ;
  4072                        ;
  4073                        ;					k_debug_integer(
                    "Reserved1:",pinfo->GeneralConfiguration.Reserved1);
  4074                        ;					k_debug_integer(
                    "Retired3:",pinfo->GeneralConfiguration.Retired3);
  4075                        ;					k_debug_integer(
                    "ResponseIncomplete:",pinfo->GeneralConfiguration.ResponseIn
                    complete);
  4076                        ;					k_debug_integer(
                    "Retired2:",pinfo->GeneralConfiguration.Retired2);
  4077                        ;					//k_debug_intege
                    r("RemovableMedia:",pinfo->GeneralConfiguration.RemovableMed
                    ia);
  4078                        ;
  4079                        ;					k_debug_integer(
                    "DeviceType:",pinfo->GeneralConfiguration.DeviceType);
  4080                        ;					k_debug_integer(
                    "FixedDevice:",pinfo->GeneralConfiguration.FixedDevice);
  4081                        ;
  4082                        ;
  4083                        ;					//k_debug_byte_a
                    rray("k_ide_get_info:SerialNumber:",(&((LPCHAR)pinfo)[0x10])
                    ,20);
  4084                        ;					//k_debug_byte_a
                    rray("k_ide_get_info:FirmwareRevision:",(&((LPCHAR)pinfo)[0x
                    2A]),8);
  4085                        ;					//k_debug_byte_a
                    rray("k_ide_get_info:ModelNumber:",(&((LPCHAR)pinfo)[0x32]),
                    40);
  4086                        ;
  4087                        ;					//k_debug_nstrin
                    gs("k_ide_get_info:SerialNumber:",(&((LPCHAR)pinfo)[0x10]),2
                    0);
  4088                        ;					//k_debug_nstrin
                    gs("k_ide_get_info:FirmwareRevision:",(&((LPCHAR)pinfo)[0x2A
                    ]),8);
  4089                        ;					//k_debug_nstrin
                    gs("k_ide_get_info:ModelNumber:",(&((LPCHAR)pinfo)[0x32]),40
                    );
  4090                        ;
  4091                        ;
  4092                        ;
  4093                        ;					k_debug_integer(
                    "NumCylinders:",pinfo->NumCylinders);
  4094                        ;					k_debug_integer(
                    "SpecificConfiguration:",pinfo->SpecificConfiguration);
  4095                        ;					k_debug_integer(
                    "NumHeads:",pinfo->NumHeads);
  4096                        ;					k_debug_integer(
                    "NumSectorsPerTrack:",pinfo->NumSectorsPerTrack);
  4097                        ;					//k_debug_nstrin
                    gs("VendorUnique1:",pinfo->VendorUnique1,3);
  4098                        ;
  4099                        ;					k_debug_nstrings
                    ("SerialNumber:",pinfo->SerialNumber,20);
  Thu Dec  3 2020 22:25                                                Page 82


  4100                        ;
  4101                        ;
  4102                        ;					k_debug_integer(
                    "Retired2.0:",pinfo->Retired2[0]);
  4103                        ;					k_debug_integer(
                    "Retired2.1:",pinfo->Retired2[1]);
  4104                        ;					k_debug_integer(
                    "Obsolete1:",pinfo->Obsolete1);
  4105                        ;
  4106                        ;					k_debug_nstrings
                    ("FirmwareRevision:",pinfo->FirmwareRevision,8);
  4107                        ;
  4108                        ;
  4109                        ;					k_debug_nstrings
                    ("ModelNumber:",pinfo->ModelNumber,40);
  4110                        ;
  4111                        ;					k_debug_hex("Max
                    imumBlockTransfer:",pinfo->MaximumBlockTransfer);
  4112                        ;					k_debug_integer(
                    "NumberOfCurrentCylinders:",pinfo->NumberOfCurrentCylinders)
                    ;
  4113                        ;					k_debug_integer(
                    "NumberOfCurrentHeads:",pinfo->NumberOfCurrentHeads);
  4114                        ;					k_debug_integer(
                    "CurrentSectorsPerTrack:",pinfo->CurrentSectorsPerTrack);
  4115                        ;					k_debug_long("Cu
                    rrentSectorCapacity:",pinfo->CurrentSectorCapacity);
  4116                        ;					k_debug_hex("Max
                    imumBlockTransfer:",pinfo->CurrentMultiSectorSetting);
  4117                        ;
  4118                        ;
  4119                        ;					k_mem_deallocate
                    _heap(pinfo);
  4120                        ;
  4121                        ;
  4122                        ;
  4123                        ;
  4124                        ;
  4125                        ;				}
  4126                        ;				*/
  4127                        ;
  4128                        ;				//k_debug_hex("k_ide_ini
                    t():",0);
  4129                        ;				//initHD = TRUE;
  4130                        ;			}
  4131                        	.line	1179
  4132                        L10035:
  4133                        ;
  4134                        ;			/*
  4135                        ;			if(k_sd_ispresent())
  4136                        ;			{
  4137                        ;				k_debug_string("SDCARD F
                    OUND!\r\n");
  4138                        ;				psdcard = k_sd_mount();
  4139                        ;				if(psdcard)
  4140                        ;				{
  4141                        ;					k_mem_deallocate
                    _heap(psdcard);
  Thu Dec  3 2020 22:25                                                Page 83


  4142                        ;				}
  4143                        ;			}
  4144                        ;			else
  4145                        ;			{
  4146                        ;				k_debug_string("SDCARD N
                    OT PRESENT!\r\n");
  4147                        ;			}
  4148                        ;			*/
  4149                        ;			/*
  4150                        ;			volAvail = k_sd_read_vol(&diskIn
                    fo);
  4151                        ;			if(volAvail)
  4152                        ;			{
  4153                        ;				k_send_window_message(k_
                    user_getDesktopWindow(),FX_DISK_INSERT,&diskInfo,sizeof(DISK
                    INFO));
  4154                        ;			}
  4155                        ;			else
  4156                        ;			{
  4157                        ;				k_send_window_message(k_
                    user_getDesktopWindow(),FX_DISK_REMOVE,NULL,0);
  4158                        ;			}
  4159                        ;			*/
  4160                        ;		}
  4161                        	.line	1207
  4162                        ;
  4163                        ;
  4164                        ;	}
  4165                        L10033:
  4166                        	.line	1210
  4167                        ;	//k_debug_string("IdleProc exit\r\n");
  4168                        ;}
  4169                        L10032:
  4170                        	.line	1212
  4171                        L89:
  4172 05:06DF: A5 11        	lda	<L83+2
  4173 05:06E1: 85 15        	sta	<L83+2+4
  4174 05:06E3: A5 10        	lda	<L83+1
  4175 05:06E5: 85 14        	sta	<L83+1+4
  4176 05:06E7: 2B           	pld
  4177 05:06E8: 3B           	tsc
  4178 05:06E9: 18           	clc
  4179 05:06EA: 69 13 00     	adc	#L83+4
  4180 05:06ED: 1B           	tcs
  4181 05:06EE: 6B           	rtl
  4182                        	.endblock	1212
  4183             0000000F   L83	equ	15
  4184             00000001   L84	equ	1
  4185 05:06EF:              	ends
  4186                        	efunc
  4187                        	.endfunc	1212,1,15
  4188                        	.line	1212
  4189                        	data
  4190                        L69:
  4191 00:024E: 49 64 6C 65  	db	$49,$64,$6C,$65,$50,$72,$6F,$63,$3A,$66,
                    $5F,$6D,$6F,$75,$6E
       00:0252: 50 72 6F 63 
       00:0256: 3A 66 5F 6D 
  Thu Dec  3 2020 22:25                                                Page 84


       00:025A: 6F 75 6E 
  4192 00:025D: 74 2E 2E 2E  	db	$74,$2E,$2E,$2E,$0D,$0A,$00,$49,$64,$6C,
                    $65,$50,$72,$6F,$63
       00:0261: 0D 0A 00 49 
       00:0265: 64 6C 65 50 
       00:0269: 72 6F 63 
  4193 00:026C: 3A 4D 45 4D  	db	$3A,$4D,$45,$4D,$4F,$52,$59,$5F,$49,$4E,
                    $49,$54,$2E,$2E,$2E
       00:0270: 4F 52 59 5F 
       00:0274: 49 4E 49 54 
       00:0278: 2E 2E 2E 
  4194 00:027B: 0D 0A 00 49  	db	$0D,$0A,$00,$49,$64,$6C,$65,$50,$72,$6F,
                    $63,$3A,$4C,$6F,$61
       00:027F: 64 6C 65 50 
       00:0283: 72 6F 63 3A 
       00:0287: 4C 6F 61 
  4195 00:028A: 64 4F 4D 46  	db	$64,$4F,$4D,$46,$46,$69,$6C,$65,$2E,$2E,
                    $2E,$0D,$0A,$00,$49
       00:028E: 46 69 6C 65 
       00:0292: 2E 2E 2E 0D 
       00:0296: 0A 00 49 
  4196 00:0299: 64 6C 65 50  	db	$64,$6C,$65,$50,$72,$6F,$63,$3A,$4D,$45,
                    $4D,$4F,$52,$59,$5F
       00:029D: 72 6F 63 3A 
       00:02A1: 4D 45 4D 4F 
       00:02A5: 52 59 5F 
  4197 00:02A8: 46 52 45 45  	db	$46,$52,$45,$45,$2E,$2E,$2E,$0D,$0A,$00,
                    $49,$64,$6C,$65,$50
       00:02AC: 2E 2E 2E 0D 
       00:02B0: 0A 00 49 64 
       00:02B4: 6C 65 50 
  4198 00:02B7: 72 6F 63 3A  	db	$72,$6F,$63,$3A,$69,$6E,$69,$74,$48,$44,
                    $20,$3D,$3D,$20,$54
       00:02BB: 69 6E 69 74 
       00:02BF: 48 44 20 3D 
       00:02C3: 3D 20 54 
  4199 00:02C6: 52 55 45 0D  	db	$52,$55,$45,$0D,$0A,$00
       00:02CA: 0A 00 
  4200 00:02CC:              	ends
  4201                        ;
  4202                        ;void k_do_procs(PFXOSMESSAGE pMsg)
  4203                        ;{
  4204                        	.line	1214
  4205                        	.line	1215
  4206                        	EVTMAN
  4207                        	xdef	~~k_do_procs
  4208                        	func
  4209                        	.function	1215
  4210                        ~~k_do_procs:
  4211                        	longa	on
  4212                        	longi	on
  4213 05:06EF: 3B           	tsc
  4214 05:06F0: 38           	sec
  4215 05:06F1: E9 0A 00     	sbc	#L91
  4216 05:06F4: 1B           	tcs
  4217 05:06F5: 0B           	phd
  4218 05:06F6: 5B           	tcd
  4219             00000004   pMsg_0	set	4
  Thu Dec  3 2020 22:25                                                Page 85


  4220                        	.block	1215
  4221                        ;	int index = 0;
  4222                        ;
  4223                        ;	//k_debug_string("k_do_procs:Enter\r\n");
  4224                        ;	for(index = IDLE_PROC;index<MAX_PROCS;index++)
  4225             00000000   index_1	set	0
  4226                        	.sym	index,0,5,1,16
  4227                        	.sym	pMsg,4,138,6,32,16
  4228 05:06F7: 64 09        	stz	<L92+index_1
  4229                        	.line	1219
  4230 05:06F9: 64 09        	stz	<L92+index_1
  4231                        L10038:
  4232                        ;	{
  4233                        	.line	1220
  4234                        ;		if(eventProcs[index] != NULL)
  4235                        	.line	1221
  4236                        ;		{
  4237 05:06FB: A5 09        	lda	<L92+index_1
  4238 05:06FD: 0A           	asl	A
  4239 05:06FE: 0A           	asl	A
  4240 05:06FF: 85 01        	sta	<R0
  4241 05:0701: 18           	clc
  4242 05:0702: A9 xx xx     	lda	#<~~eventProcs
  4243 05:0705: 65 01        	adc	<R0
  4244 05:0707: 85 05        	sta	<R1
  4245 05:0709: B2 05        	lda	(<R1)
  4246 05:070B: A0 02 00     	ldy	#$2
  4247 05:070E: 11 05        	ora	(<R1),Y
  4248 05:0710: D0 03        	bne	L94
  4249 05:0712: 82 1E 00     	brl	L10039
  4250                        L94:
  4251                        	.line	1222
  4252                        ;			//if(index > IDLE_PROC)
  4253                        ;			//	k_debug_string("Calling 
                    bad proc index.\r\n");
  4254                        ;
  4255                        ;			eventProcs[index](pMsg);
  4256                        	.line	1226
  4257 05:0715: D4 10        	pei	<L91+pMsg_0+2
  4258 05:0717: D4 0E        	pei	<L91+pMsg_0
  4259 05:0719: A5 09        	lda	<L92+index_1
  4260 05:071B: 0A           	asl	A
  4261 05:071C: 0A           	asl	A
  4262 05:071D: 85 01        	sta	<R0
  4263 05:071F: 18           	clc
  4264 05:0720: A9 xx xx     	lda	#<~~eventProcs
  4265 05:0723: 65 01        	adc	<R0
  4266 05:0725: 85 05        	sta	<R1
  4267 05:0727: A0 02 00     	ldy	#$2
  4268 05:072A: B1 05        	lda	(<R1),Y
  4269 05:072C: AA           	tax
  4270 05:072D: B2 05        	lda	(<R1)
  4271                        	xref	~~~lcal
  4272 05:072F: 22 xx xx xx  	jsl	~~~lcal
  4273                        ;		}
  4274                        	.line	1227
  4275                        ;	}
  4276                        L10039:
  Thu Dec  3 2020 22:25                                                Page 86


  4277                        	.line	1228
  4278                        L10036:
  4279 05:0733: E6 09        	inc	<L92+index_1
  4280 05:0735: 38           	sec
  4281 05:0736: A5 09        	lda	<L92+index_1
  4282 05:0738: E9 00 01     	sbc	#<$100
  4283 05:073B: 70 03        	bvs	L95
  4284 05:073D: 49 00 80     	eor	#$8000
  4285                        L95:
  4286 05:0740: 30 03        	bmi	L96
  4287 05:0742: 82 B6 FF     	brl	L10038
  4288                        L96:
  4289                        L10037:
  4290                        ;}
  4291                        	.line	1229
  4292                        L97:
  4293 05:0745: A5 0C        	lda	<L91+2
  4294 05:0747: 85 10        	sta	<L91+2+4
  4295 05:0749: A5 0B        	lda	<L91+1
  4296 05:074B: 85 0F        	sta	<L91+1+4
  4297 05:074D: 2B           	pld
  4298 05:074E: 3B           	tsc
  4299 05:074F: 18           	clc
  4300 05:0750: 69 0E 00     	adc	#L91+4
  4301 05:0753: 1B           	tcs
  4302 05:0754: 6B           	rtl
  4303                        	.endblock	1229
  4304             0000000A   L91	equ	10
  4305             00000009   L92	equ	9
  4306 05:0755:              	ends
  4307                        	efunc
  4308                        	.endfunc	1229,9,10
  4309                        	.line	1229
  4310                        ;
  4311                        ;void DoWndProcs(LPVOID ctx,LPVOID data)
  4312                        ;{
  4313                        	.line	1231
  4314                        	.line	1232
  4315                        	EVTMAN
  4316                        	xdef	~~DoWndProcs
  4317                        	func
  4318                        	.function	1232
  4319                        ~~DoWndProcs:
  4320                        	longa	on
  4321                        	longi	on
  4322 05:0755: 3B           	tsc
  4323 05:0756: 38           	sec
  4324 05:0757: E9 10 00     	sbc	#L98
  4325 05:075A: 1B           	tcs
  4326 05:075B: 0B           	phd
  4327 05:075C: 5B           	tcd
  4328             00000004   ctx_0	set	4
  4329             00000008   data_0	set	8
  4330                        	.block	1232
  4331                        ;	PFXOSMESSAGE pMsg  = (PFXOSMESSAGE)ctx;
  4332                        ;	PWINDOW 	 pWin  = (PWINDOW)data;
  4333                        ;	PFXPROCESS   pProc = k_exec_get_current_process(
                    );
  Thu Dec  3 2020 22:25                                                Page 87


  4334                        ;
  4335                        ;
  4336                        ;	if(pMsg && pWin && pWin->pWndClass && pWin->pWnd
                    Class->pWndProc)
  4337             00000000   pMsg_1	set	0
  4338             00000004   pWin_1	set	4
  4339             00000008   pProc_1	set	8
  4340                        	.sym	pMsg,0,138,1,32,16
  4341                        	.sym	pWin,4,138,1,32,30
  4342                        	.sym	pProc,8,138,1,32,20
  4343                        	.sym	ctx,4,129,6,32
  4344                        	.sym	data,8,129,6,32
  4345 05:075D: A5 14        	lda	<L98+ctx_0
  4346 05:075F: 85 05        	sta	<L99+pMsg_1
  4347 05:0761: A5 16        	lda	<L98+ctx_0+2
  4348 05:0763: 85 07        	sta	<L99+pMsg_1+2
  4349 05:0765: A5 18        	lda	<L98+data_0
  4350 05:0767: 85 09        	sta	<L99+pWin_1
  4351 05:0769: A5 1A        	lda	<L98+data_0+2
  4352 05:076B: 85 0B        	sta	<L99+pWin_1+2
  4353 05:076D: 22 xx xx xx  	jsl	~~k_exec_get_current_process
  4354 05:0771: 85 0D        	sta	<L99+pProc_1
  4355 05:0773: 86 0F        	stx	<L99+pProc_1+2
  4356                        	.line	1238
  4357                        ;	{
  4358 05:0775: A5 05        	lda	<L99+pMsg_1
  4359 05:0777: 05 07        	ora	<L99+pMsg_1+2
  4360 05:0779: D0 03        	bne	L101
  4361 05:077B: 82 71 01     	brl	L10040
  4362                        L101:
  4363 05:077E: A5 09        	lda	<L99+pWin_1
  4364 05:0780: 05 0B        	ora	<L99+pWin_1+2
  4365 05:0782: D0 03        	bne	L102
  4366 05:0784: 82 68 01     	brl	L10040
  4367                        L102:
  4368 05:0787: A0 2C 01     	ldy	#$12c
  4369 05:078A: B7 09        	lda	[<L99+pWin_1],Y
  4370 05:078C: A0 2E 01     	ldy	#$12e
  4371 05:078F: 17 09        	ora	[<L99+pWin_1],Y
  4372 05:0791: D0 03        	bne	L103
  4373 05:0793: 82 59 01     	brl	L10040
  4374                        L103:
  4375 05:0796: A0 2C 01     	ldy	#$12c
  4376 05:0799: B7 09        	lda	[<L99+pWin_1],Y
  4377 05:079B: 85 01        	sta	<R0
  4378 05:079D: A0 2E 01     	ldy	#$12e
  4379 05:07A0: B7 09        	lda	[<L99+pWin_1],Y
  4380 05:07A2: 85 03        	sta	<R0+2
  4381 05:07A4: A0 04 00     	ldy	#$4
  4382 05:07A7: B7 01        	lda	[<R0],Y
  4383 05:07A9: A0 06 00     	ldy	#$6
  4384 05:07AC: 17 01        	ora	[<R0],Y
  4385 05:07AE: D0 03        	bne	L104
  4386 05:07B0: 82 3C 01     	brl	L10040
  4387                        L104:
  4388                        	.line	1239
  4389                        ;		//k_debug_integer("DoWndProcs:type:",pMs
                    g->type);
  Thu Dec  3 2020 22:25                                                Page 88


  4390                        ;
  4391                        ;		//k_debug_pointer("DoWndProcs:HWND:check
                    :",((LPVOID)pMsg->hwnd));
  4392                        ;		//k_debug_pointer("DoWndProcs:pWin:check
                    :",(LPVOID)pWin);
  4393                        ;		if(pWin->procid == pProc->procId)
  4394                        	.line	1244
  4395                        ;		{
  4396 05:07B3: A0 28 01     	ldy	#$128
  4397 05:07B6: B7 09        	lda	[<L99+pWin_1],Y
  4398 05:07B8: A0 02 00     	ldy	#$2
  4399 05:07BB: D7 0D        	cmp	[<L99+pProc_1],Y
  4400 05:07BD: D0 0A        	bne	L105
  4401 05:07BF: A0 2A 01     	ldy	#$12a
  4402 05:07C2: B7 09        	lda	[<L99+pWin_1],Y
  4403 05:07C4: A0 04 00     	ldy	#$4
  4404 05:07C7: D7 0D        	cmp	[<L99+pProc_1],Y
  4405                        L105:
  4406 05:07C9: F0 03        	beq	L106
  4407 05:07CB: 82 21 01     	brl	L10041
  4408                        L106:
  4409                        	.line	1245
  4410                        ;			if(pMsg->hwnd && !pWin->isClosed
                      && ( ((LPVOID)pMsg->hwnd) == (LPVOID)pWin || ((LPVOID)pMsg
                    ->hwnd) == BROADCAST_HWND)   )
  4411                        	.line	1246
  4412                        ;			{
  4413 05:07CE: A0 0A 00     	ldy	#$a
  4414 05:07D1: B7 05        	lda	[<L99+pMsg_1],Y
  4415 05:07D3: A0 0C 00     	ldy	#$c
  4416 05:07D6: 17 05        	ora	[<L99+pMsg_1],Y
  4417 05:07D8: D0 03        	bne	L107
  4418 05:07DA: 82 0F 01     	brl	L10042
  4419                        L107:
  4420 05:07DD: A0 5D 01     	ldy	#$15d
  4421 05:07E0: B7 09        	lda	[<L99+pWin_1],Y
  4422 05:07E2: 29 FF 00     	and	#$ff
  4423 05:07E5: F0 03        	beq	L108
  4424 05:07E7: 82 02 01     	brl	L10042
  4425                        L108:
  4426 05:07EA: A0 0A 00     	ldy	#$a
  4427 05:07ED: B7 05        	lda	[<L99+pMsg_1],Y
  4428 05:07EF: C5 09        	cmp	<L99+pWin_1
  4429 05:07F1: D0 07        	bne	L110
  4430 05:07F3: A0 0C 00     	ldy	#$c
  4431 05:07F6: B7 05        	lda	[<L99+pMsg_1],Y
  4432 05:07F8: C5 0B        	cmp	<L99+pWin_1+2
  4433                        L110:
  4434 05:07FA: D0 03        	bne	L111
  4435 05:07FC: 82 17 00     	brl	L109
  4436                        L111:
  4437 05:07FF: A0 0A 00     	ldy	#$a
  4438 05:0802: B7 05        	lda	[<L99+pMsg_1],Y
  4439 05:0804: C9 FA FF     	cmp	#<$fffafffa
  4440 05:0807: D0 08        	bne	L112
  4441 05:0809: A0 0C 00     	ldy	#$c
  4442 05:080C: B7 05        	lda	[<L99+pMsg_1],Y
  4443 05:080E: C9 FA FF     	cmp	#^$fffafffa
  Thu Dec  3 2020 22:25                                                Page 89


  4444                        L112:
  4445 05:0811: F0 03        	beq	L113
  4446 05:0813: 82 D6 00     	brl	L10042
  4447                        L113:
  4448                        L109:
  4449                        	.line	1247
  4450                        ;				//k_debug_pointer("DoWnd
                    Procs:CALLING:pMsg:",pMsg);
  4451                        ;				//k_debug_strings("DoWnd
                    Procs:CALLING:WindowTitle:",pWin->win_title);
  4452                        ;
  4453                        ;				if(FX_MENU_COMMAND == pM
                    sg->type)
  4454                        	.line	1251
  4455                        ;				{
  4456 05:0816: A0 08 00     	ldy	#$8
  4457 05:0819: B7 05        	lda	[<L99+pMsg_1],Y
  4458 05:081B: C9 01 FA     	cmp	#<$fa01
  4459 05:081E: F0 03        	beq	L114
  4460 05:0820: 82 3A 00     	brl	L10043
  4461                        L114:
  4462                        	.line	1252
  4463                        ;					k_debug_pointer(
                    "DoWndProcs::FX_MENU_COMMAND:", pMsg->hwnd);
  4464                        	.line	1253
  4465 05:0823: A0 0C 00     	ldy	#$c
  4466 05:0826: B7 05        	lda	[<L99+pMsg_1],Y
  4467 05:0828: 48           	pha
  4468 05:0829: A0 0A 00     	ldy	#$a
  4469 05:082C: B7 05        	lda	[<L99+pMsg_1],Y
  4470 05:082E: 48           	pha
  4471 05:082F: F4 xx xx     	pea	#^L90
  4472 05:0832: F4 xx xx     	pea	#<L90
  4473 05:0835: 22 xx xx xx  	jsl	~~k_debug_pointer
  4474                        ;					k_debug_pointer(
                    "DoWndProcs::FX_MENU_COMMAND:pWndProc:", pWin->pWndClass->pW
                    ndProc);
  4475                        	.line	1254
  4476 05:0839: A0 2C 01     	ldy	#$12c
  4477 05:083C: B7 09        	lda	[<L99+pWin_1],Y
  4478 05:083E: 85 01        	sta	<R0
  4479 05:0840: A0 2E 01     	ldy	#$12e
  4480 05:0843: B7 09        	lda	[<L99+pWin_1],Y
  4481 05:0845: 85 03        	sta	<R0+2
  4482 05:0847: A0 06 00     	ldy	#$6
  4483 05:084A: B7 01        	lda	[<R0],Y
  4484 05:084C: 48           	pha
  4485 05:084D: A0 04 00     	ldy	#$4
  4486 05:0850: B7 01        	lda	[<R0],Y
  4487 05:0852: 48           	pha
  4488 05:0853: F4 xx xx     	pea	#^L90+29
  4489 05:0856: F4 xx xx     	pea	#<L90+29
  4490 05:0859: 22 xx xx xx  	jsl	~~k_debug_pointer
  4491                        ;				}
  4492                        	.line	1255
  4493                        ;
  4494                        ;				if(!pWin->pWndClass->pWn
                    dProc(pMsg))
  Thu Dec  3 2020 22:25                                                Page 90


  4495                        L10043:
  4496                        	.line	1257
  4497                        ;				{
  4498 05:085D: D4 07        	pei	<L99+pMsg_1+2
  4499 05:085F: D4 05        	pei	<L99+pMsg_1
  4500 05:0861: A0 2C 01     	ldy	#$12c
  4501 05:0864: B7 09        	lda	[<L99+pWin_1],Y
  4502 05:0866: 85 01        	sta	<R0
  4503 05:0868: A0 2E 01     	ldy	#$12e
  4504 05:086B: B7 09        	lda	[<L99+pWin_1],Y
  4505 05:086D: 85 03        	sta	<R0+2
  4506 05:086F: A0 06 00     	ldy	#$6
  4507 05:0872: B7 01        	lda	[<R0],Y
  4508 05:0874: AA           	tax
  4509 05:0875: A0 04 00     	ldy	#$4
  4510 05:0878: B7 01        	lda	[<R0],Y
  4511                        	xref	~~~lcal
  4512 05:087A: 22 xx xx xx  	jsl	~~~lcal
  4513 05:087E: 29 FF 00     	and	#$ff
  4514 05:0881: F0 03        	beq	L115
  4515 05:0883: 82 66 00     	brl	L10044
  4516                        L115:
  4517                        	.line	1258
  4518                        ;					k_debug_strings(
                    "DoWndProcs:HWND:Closed:",pWin->win_title);
  4519                        	.line	1259
  4520 05:0886: 18           	clc
  4521 05:0887: A9 D4 00     	lda	#$d4
  4522 05:088A: 65 09        	adc	<L99+pWin_1
  4523 05:088C: 85 01        	sta	<R0
  4524 05:088E: A9 00 00     	lda	#$0
  4525 05:0891: 65 0B        	adc	<L99+pWin_1+2
  4526 05:0893: 85 03        	sta	<R0+2
  4527 05:0895: D4 03        	pei	<R0+2
  4528 05:0897: D4 01        	pei	<R0
  4529 05:0899: F4 xx xx     	pea	#^L90+67
  4530 05:089C: F4 xx xx     	pea	#<L90+67
  4531 05:089F: 22 xx xx xx  	jsl	~~k_debug_strings
  4532                        ;
  4533                        ;					if(k_event_get_l
                    ocked_focus() == pMsg->hwnd)
  4534                        	.line	1261
  4535                        ;						k_event_
                    unlock_focus();
  4536 05:08A3: 22 07 01 05  	jsl	~~k_event_get_locked_focus
  4537 05:08A7: 85 01        	sta	<R0
  4538 05:08A9: 86 03        	stx	<R0+2
  4539 05:08AB: A5 01        	lda	<R0
  4540 05:08AD: A0 0A 00     	ldy	#$a
  4541 05:08B0: D7 05        	cmp	[<L99+pMsg_1],Y
  4542 05:08B2: D0 07        	bne	L116
  4543 05:08B4: A5 03        	lda	<R0+2
  4544 05:08B6: A0 0C 00     	ldy	#$c
  4545 05:08B9: D7 05        	cmp	[<L99+pMsg_1],Y
  4546                        L116:
  4547 05:08BB: F0 03        	beq	L117
  4548 05:08BD: 82 04 00     	brl	L10045
  4549                        L117:
  Thu Dec  3 2020 22:25                                                Page 91


  4550                        	.line	1262
  4551 05:08C0: 22 1F 01 05  	jsl	~~k_event_unlock_focus
  4552                        ;
  4553                        ;					pWin->isClosed =
                     TRUE;
  4554                        L10045:
  4555                        	.line	1264
  4556 05:08C4: E2 20        	sep	#$20
  4557                        	longa	off
  4558 05:08C6: A9 01        	lda	#$1
  4559 05:08C8: A0 5D 01     	ldy	#$15d
  4560 05:08CB: 97 09        	sta	[<L99+pWin_1],Y
  4561 05:08CD: C2 20        	rep	#$20
  4562                        	longa	on
  4563                        ;					strcpy(pWin->win
                    _title,"##CLOSED");
  4564                        	.line	1265
  4565 05:08CF: F4 xx xx     	pea	#^L90+91
  4566 05:08D2: F4 xx xx     	pea	#<L90+91
  4567 05:08D5: 18           	clc
  4568 05:08D6: A9 D4 00     	lda	#$d4
  4569 05:08D9: 65 09        	adc	<L99+pWin_1
  4570 05:08DB: 85 01        	sta	<R0
  4571 05:08DD: A9 00 00     	lda	#$0
  4572 05:08E0: 65 0B        	adc	<L99+pWin_1+2
  4573 05:08E2: 85 03        	sta	<R0+2
  4574 05:08E4: D4 03        	pei	<R0+2
  4575 05:08E6: D4 01        	pei	<R0
  4576 05:08E8: 22 xx xx xx  	jsl	~~strcpy
  4577                        ;				}
  4578                        	.line	1266
  4579                        ;			}
  4580                        L10044:
  4581                        	.line	1267
  4582                        ;		}
  4583                        L10042:
  4584                        	.line	1268
  4585                        ;		else
  4586 05:08EC: 82 00 00     	brl	L10046
  4587                        L10041:
  4588                        ;		{
  4589                        	.line	1270
  4590                        ;			//k_debug_long("DoWndProcs:WRONG
                     PROCESS:",(ULONG)pProc->procId);
  4591                        ;		}
  4592                        	.line	1272
  4593                        L10046:
  4594                        ;	}
  4595                        	.line	1273
  4596                        ;
  4597                        ;	return;
  4598                        L10040:
  4599                        	.line	1275
  4600                        L118:
  4601 05:08EF: A5 12        	lda	<L98+2
  4602 05:08F1: 85 1A        	sta	<L98+2+8
  4603 05:08F3: A5 11        	lda	<L98+1
  4604 05:08F5: 85 19        	sta	<L98+1+8
  Thu Dec  3 2020 22:25                                                Page 92


  4605 05:08F7: 2B           	pld
  4606 05:08F8: 3B           	tsc
  4607 05:08F9: 18           	clc
  4608 05:08FA: 69 18 00     	adc	#L98+8
  4609 05:08FD: 1B           	tcs
  4610 05:08FE: 6B           	rtl
  4611                        ;}
  4612                        	.line	1276
  4613                        	.endblock	1276
  4614             00000010   L98	equ	16
  4615             00000005   L99	equ	5
  4616 05:08FF:              	ends
  4617                        	efunc
  4618                        	.endfunc	1276,5,16
  4619                        	.line	1276
  4620                        	data
  4621                        L90:
  4622 00:02CC: 44 6F 57 6E  	db	$44,$6F,$57,$6E,$64,$50,$72,$6F,$63,$73,
                    $3A,$3A,$46,$58,$5F
       00:02D0: 64 50 72 6F 
       00:02D4: 63 73 3A 3A 
       00:02D8: 46 58 5F 
  4623 00:02DB: 4D 45 4E 55  	db	$4D,$45,$4E,$55,$5F,$43,$4F,$4D,$4D,$41,
                    $4E,$44,$3A,$00,$44
       00:02DF: 5F 43 4F 4D 
       00:02E3: 4D 41 4E 44 
       00:02E7: 3A 00 44 
  4624 00:02EA: 6F 57 6E 64  	db	$6F,$57,$6E,$64,$50,$72,$6F,$63,$73,$3A,
                    $3A,$46,$58,$5F,$4D
       00:02EE: 50 72 6F 63 
       00:02F2: 73 3A 3A 46 
       00:02F6: 58 5F 4D 
  4625 00:02F9: 45 4E 55 5F  	db	$45,$4E,$55,$5F,$43,$4F,$4D,$4D,$41,$4E,
                    $44,$3A,$70,$57,$6E
       00:02FD: 43 4F 4D 4D 
       00:0301: 41 4E 44 3A 
       00:0305: 70 57 6E 
  4626 00:0308: 64 50 72 6F  	db	$64,$50,$72,$6F,$63,$3A,$00,$44,$6F,$57,
                    $6E,$64,$50,$72,$6F
       00:030C: 63 3A 00 44 
       00:0310: 6F 57 6E 64 
       00:0314: 50 72 6F 
  4627 00:0317: 63 73 3A 48  	db	$63,$73,$3A,$48,$57,$4E,$44,$3A,$43,$6C,
                    $6F,$73,$65,$64,$3A
       00:031B: 57 4E 44 3A 
       00:031F: 43 6C 6F 73 
       00:0323: 65 64 3A 
  4628 00:0326: 00 23 23 43  	db	$00,$23,$23,$43,$4C,$4F,$53,$45,$44,$00
       00:032A: 4C 4F 53 45 
       00:032E: 44 00 
  4629 00:0330:              	ends
  4630                        ;
  4631                        ;void k_do_processes(PFXOSMESSAGE pMsg)
  4632                        ;{
  4633                        	.line	1278
  4634                        	.line	1279
  4635                        	EVTMAN
  4636                        	xdef	~~k_do_processes
  Thu Dec  3 2020 22:25                                                Page 93


  4637                        	func
  4638                        	.function	1279
  4639                        ~~k_do_processes:
  4640                        	longa	on
  4641                        	longi	on
  4642 05:08FF: 3B           	tsc
  4643 05:0900: 38           	sec
  4644 05:0901: E9 20 00     	sbc	#L120
  4645 05:0904: 1B           	tcs
  4646 05:0905: 0B           	phd
  4647 05:0906: 5B           	tcd
  4648             00000004   pMsg_0	set	4
  4649                        	.block	1279
  4650                        ;	int index = 0;
  4651                        ;	int tc = 0;
  4652                        ;
  4653                        ;	PFXPROCESS pCurrent = NULL;
  4654                        ;
  4655                        ;	//k_debug_string("k_do_procs:Enter\r\n");
  4656                        ;	for(index = IDLE_PROC;index<MAX_PROCS;index++)
  4657             00000000   index_1	set	0
  4658             00000002   tc_1	set	2
  4659             00000004   pCurrent_1	set	4
  4660                        	.sym	index,0,5,1,16
  4661                        	.sym	tc,2,5,1,16
  4662                        	.sym	pCurrent,4,138,1,32,20
  4663                        	.sym	pMsg,4,138,6,32,16
  4664 05:0907: 64 19        	stz	<L121+index_1
  4665 05:0909: 64 1B        	stz	<L121+tc_1
  4666 05:090B: 64 1D        	stz	<L121+pCurrent_1
  4667 05:090D: 64 1F        	stz	<L121+pCurrent_1+2
  4668                        	.line	1286
  4669 05:090F: 64 19        	stz	<L121+index_1
  4670                        L10049:
  4671                        ;	{
  4672                        	.line	1287
  4673                        ;		if(eventProcess[index] != NULL)
  4674                        	.line	1288
  4675                        ;		{
  4676 05:0911: A5 19        	lda	<L121+index_1
  4677 05:0913: 0A           	asl	A
  4678 05:0914: 0A           	asl	A
  4679 05:0915: 85 01        	sta	<R0
  4680 05:0917: 18           	clc
  4681 05:0918: A9 xx xx     	lda	#<~~eventProcess
  4682 05:091B: 65 01        	adc	<R0
  4683 05:091D: 85 05        	sta	<R1
  4684 05:091F: B2 05        	lda	(<R1)
  4685 05:0921: A0 02 00     	ldy	#$2
  4686 05:0924: 11 05        	ora	(<R1),Y
  4687 05:0926: D0 03        	bne	L123
  4688 05:0928: 82 46 06     	brl	L10050
  4689                        L123:
  4690                        	.line	1289
  4691                        ;			/*
  4692                        ;			if(eventProcess[index]->process-
                    >status == PROCESS_STATUS_TERMINATED)
  4693                        ;			{
  Thu Dec  3 2020 22:25                                                Page 94


  4694                        ;				k_debug_long("k_do_proce
                    sses::PROCESS TERMINATING:",eventProcess[index]->process->pr
                    ocId);
  4695                        ;				k_unattach_events(eventP
                    rocess[index]->eventProc,NULL);
  4696                        ;				eventProcess[index] = NU
                    LL;
  4697                        ;				continue;
  4698                        ;			}
  4699                        ;			*/
  4700                        ;
  4701                        ;
  4702                        ;			if(eventProcess[index]->process-
                    >status == PROCESS_STATUS_WAITING)
  4703                        	.line	1301
  4704                        ;			{
  4705 05:092B: A5 19        	lda	<L121+index_1
  4706 05:092D: 0A           	asl	A
  4707 05:092E: 0A           	asl	A
  4708 05:092F: 85 01        	sta	<R0
  4709 05:0931: 18           	clc
  4710 05:0932: A9 xx xx     	lda	#<~~eventProcess
  4711 05:0935: 65 01        	adc	<R0
  4712 05:0937: 85 05        	sta	<R1
  4713 05:0939: B2 05        	lda	(<R1)
  4714 05:093B: 85 01        	sta	<R0
  4715 05:093D: A0 02 00     	ldy	#$2
  4716 05:0940: B1 05        	lda	(<R1),Y
  4717 05:0942: 85 03        	sta	<R0+2
  4718 05:0944: A7 01        	lda	[<R0]
  4719 05:0946: 85 05        	sta	<R1
  4720 05:0948: A0 02 00     	ldy	#$2
  4721 05:094B: B7 01        	lda	[<R0],Y
  4722 05:094D: 85 07        	sta	<R1+2
  4723 05:094F: A0 10 00     	ldy	#$10
  4724 05:0952: B7 05        	lda	[<R1],Y
  4725 05:0954: C9 F1 00     	cmp	#<$f1
  4726 05:0957: F0 03        	beq	L124
  4727 05:0959: 82 3D 00     	brl	L10051
  4728                        L124:
  4729                        	.line	1302
  4730                        ;				k_debug_long("k_do_proce
                    sses::PROCESS WAITING:",eventProcess[index]->process->procId
                    );
  4731                        	.line	1303
  4732 05:095C: A5 19        	lda	<L121+index_1
  4733 05:095E: 0A           	asl	A
  4734 05:095F: 0A           	asl	A
  4735 05:0960: 85 01        	sta	<R0
  4736 05:0962: 18           	clc
  4737 05:0963: A9 xx xx     	lda	#<~~eventProcess
  4738 05:0966: 65 01        	adc	<R0
  4739 05:0968: 85 05        	sta	<R1
  4740 05:096A: B2 05        	lda	(<R1)
  4741 05:096C: 85 01        	sta	<R0
  4742 05:096E: A0 02 00     	ldy	#$2
  4743 05:0971: B1 05        	lda	(<R1),Y
  4744 05:0973: 85 03        	sta	<R0+2
  Thu Dec  3 2020 22:25                                                Page 95


  4745 05:0975: A7 01        	lda	[<R0]
  4746 05:0977: 85 05        	sta	<R1
  4747 05:0979: A0 02 00     	ldy	#$2
  4748 05:097C: B7 01        	lda	[<R0],Y
  4749 05:097E: 85 07        	sta	<R1+2
  4750 05:0980: A0 04 00     	ldy	#$4
  4751 05:0983: B7 05        	lda	[<R1],Y
  4752 05:0985: 48           	pha
  4753 05:0986: A0 02 00     	ldy	#$2
  4754 05:0989: B7 05        	lda	[<R1],Y
  4755 05:098B: 48           	pha
  4756 05:098C: F4 xx xx     	pea	#^L119
  4757 05:098F: F4 xx xx     	pea	#<L119
  4758 05:0992: 22 xx xx xx  	jsl	~~k_debug_long
  4759                        ;				continue;
  4760                        	.line	1304
  4761 05:0996: 82 D8 05     	brl	L10047
  4762                        ;			}
  4763                        	.line	1305
  4764                        ;
  4765                        ;			if(eventProcess[index]->process-
                    >status == PROCESS_STATUS_SLEEPING)
  4766                        L10051:
  4767                        	.line	1307
  4768                        ;			{
  4769 05:0999: A5 19        	lda	<L121+index_1
  4770 05:099B: 0A           	asl	A
  4771 05:099C: 0A           	asl	A
  4772 05:099D: 85 01        	sta	<R0
  4773 05:099F: 18           	clc
  4774 05:09A0: A9 xx xx     	lda	#<~~eventProcess
  4775 05:09A3: 65 01        	adc	<R0
  4776 05:09A5: 85 05        	sta	<R1
  4777 05:09A7: B2 05        	lda	(<R1)
  4778 05:09A9: 85 01        	sta	<R0
  4779 05:09AB: A0 02 00     	ldy	#$2
  4780 05:09AE: B1 05        	lda	(<R1),Y
  4781 05:09B0: 85 03        	sta	<R0+2
  4782 05:09B2: A7 01        	lda	[<R0]
  4783 05:09B4: 85 05        	sta	<R1
  4784 05:09B6: A0 02 00     	ldy	#$2
  4785 05:09B9: B7 01        	lda	[<R0],Y
  4786 05:09BB: 85 07        	sta	<R1+2
  4787 05:09BD: A0 10 00     	ldy	#$10
  4788 05:09C0: B7 05        	lda	[<R1],Y
  4789 05:09C2: C9 02 00     	cmp	#<$2
  4790 05:09C5: F0 03        	beq	L125
  4791 05:09C7: 82 03 00     	brl	L10052
  4792                        L125:
  4793                        	.line	1308
  4794                        ;				//k_debug_long("k_do_pro
                    cesses::PROCESS SLEEPING:",eventProcess[index]->process->pro
                    cId);
  4795                        ;				continue;
  4796                        	.line	1310
  4797 05:09CA: 82 A4 05     	brl	L10047
  4798                        ;			}
  4799                        	.line	1311
  Thu Dec  3 2020 22:25                                                Page 96


  4800                        ;			/*
  4801                        ;			if(eventProcess[index]->process 
                    &&
  4802                        ;			   (eventProcess[index]->process
                    ->status != PROCESS_STATUS_RUNNING) &&
  4803                        ;			   (eventProcess[index]->process
                    ->status != PROCESS_STATUS_INIT))
  4804                        ;			{
  4805                        ;				if(eventProcess[index]->
                    process->status != PROCESS_STATUS_TERMINATED)
  4806                        ;				{
  4807                        ;					k_debug_long("k_
                    do_processes::PROCESS TERMINATING:",eventProcess[index]->pro
                    cess->procId);
  4808                        ;					eventProcess[ind
                    ex] = NULL;
  4809                        ;				}
  4810                        ;				else if(eventProcess[ind
                    ex]->process->status != PROCESS_STATUS_WAITING)
  4811                        ;				{
  4812                        ;
  4813                        ;				}
  4814                        ;				else if(eventProcess[ind
                    ex]->process->status != PROCESS_STATUS_SLEEPING)
  4815                        ;				{
  4816                        ;
  4817                        ;				}
  4818                        ;				else if(eventProcess[ind
                    ex]->process->status != PROCESS_STATUS_SEMAPHORE)
  4819                        ;				{
  4820                        ;
  4821                        ;				}
  4822                        ;				continue;
  4823                        ;			}
  4824                        ;			*/
  4825                        ;			//if(index > IDLE_PROC)
  4826                        ;			//	k_debug_string("Calling 
                    bad proc index.\r\n");
  4827                        ;
  4828                        ;			//eventProcess[index](pMsg);
  4829                        ;			//k_debug_pointer("k_do_processe
                    s process:",eventProcess[index]->process);
  4830                        ;
  4831                        ;			if(eventProcess[index]->process!
                    =NULL)
  4832                        L10052:
  4833                        	.line	1343
  4834                        ;				k_exec_set_current_proce
                    ss(eventProcess[index]->process);
  4835 05:09CD: A5 19        	lda	<L121+index_1
  4836 05:09CF: 0A           	asl	A
  4837 05:09D0: 0A           	asl	A
  4838 05:09D1: 85 01        	sta	<R0
  4839 05:09D3: 18           	clc
  4840 05:09D4: A9 xx xx     	lda	#<~~eventProcess
  4841 05:09D7: 65 01        	adc	<R0
  4842 05:09D9: 85 05        	sta	<R1
  4843 05:09DB: B2 05        	lda	(<R1)
  Thu Dec  3 2020 22:25                                                Page 97


  4844 05:09DD: 85 01        	sta	<R0
  4845 05:09DF: A0 02 00     	ldy	#$2
  4846 05:09E2: B1 05        	lda	(<R1),Y
  4847 05:09E4: 85 03        	sta	<R0+2
  4848 05:09E6: A7 01        	lda	[<R0]
  4849 05:09E8: A0 02 00     	ldy	#$2
  4850 05:09EB: 17 01        	ora	[<R0],Y
  4851 05:09ED: D0 03        	bne	L126
  4852 05:09EF: 82 26 00     	brl	L10053
  4853                        L126:
  4854                        	.line	1344
  4855 05:09F2: A5 19        	lda	<L121+index_1
  4856 05:09F4: 0A           	asl	A
  4857 05:09F5: 0A           	asl	A
  4858 05:09F6: 85 01        	sta	<R0
  4859 05:09F8: 18           	clc
  4860 05:09F9: A9 xx xx     	lda	#<~~eventProcess
  4861 05:09FC: 65 01        	adc	<R0
  4862 05:09FE: 85 05        	sta	<R1
  4863 05:0A00: B2 05        	lda	(<R1)
  4864 05:0A02: 85 01        	sta	<R0
  4865 05:0A04: A0 02 00     	ldy	#$2
  4866 05:0A07: B1 05        	lda	(<R1),Y
  4867 05:0A09: 85 03        	sta	<R0+2
  4868 05:0A0B: A0 02 00     	ldy	#$2
  4869 05:0A0E: B7 01        	lda	[<R0],Y
  4870 05:0A10: 48           	pha
  4871 05:0A11: A7 01        	lda	[<R0]
  4872 05:0A13: 48           	pha
  4873 05:0A14: 22 xx xx xx  	jsl	~~k_exec_set_current_process
  4874                        ;
  4875                        ;			if(eventProcess[index]->process-
                    >status == PROCESS_STATUS_TERMINATED)
  4876                        L10053:
  4877                        	.line	1346
  4878                        ;			{
  4879 05:0A18: A5 19        	lda	<L121+index_1
  4880 05:0A1A: 0A           	asl	A
  4881 05:0A1B: 0A           	asl	A
  4882 05:0A1C: 85 01        	sta	<R0
  4883 05:0A1E: 18           	clc
  4884 05:0A1F: A9 xx xx     	lda	#<~~eventProcess
  4885 05:0A22: 65 01        	adc	<R0
  4886 05:0A24: 85 05        	sta	<R1
  4887 05:0A26: B2 05        	lda	(<R1)
  4888 05:0A28: 85 01        	sta	<R0
  4889 05:0A2A: A0 02 00     	ldy	#$2
  4890 05:0A2D: B1 05        	lda	(<R1),Y
  4891 05:0A2F: 85 03        	sta	<R0+2
  4892 05:0A31: A7 01        	lda	[<R0]
  4893 05:0A33: 85 05        	sta	<R1
  4894 05:0A35: A0 02 00     	ldy	#$2
  4895 05:0A38: B7 01        	lda	[<R0],Y
  4896 05:0A3A: 85 07        	sta	<R1+2
  4897 05:0A3C: A0 10 00     	ldy	#$10
  4898 05:0A3F: B7 05        	lda	[<R1],Y
  4899 05:0A41: C9 03 00     	cmp	#<$3
  4900 05:0A44: F0 03        	beq	L127
  Thu Dec  3 2020 22:25                                                Page 98


  4901 05:0A46: 82 87 00     	brl	L10054
  4902                        L127:
  4903                        	.line	1347
  4904                        ;				k_debug_long("k_do_proce
                    sses::PROCESS TERMINATING:",eventProcess[index]->process->pr
                    ocId);
  4905                        	.line	1348
  4906 05:0A49: A5 19        	lda	<L121+index_1
  4907 05:0A4B: 0A           	asl	A
  4908 05:0A4C: 0A           	asl	A
  4909 05:0A4D: 85 01        	sta	<R0
  4910 05:0A4F: 18           	clc
  4911 05:0A50: A9 xx xx     	lda	#<~~eventProcess
  4912 05:0A53: 65 01        	adc	<R0
  4913 05:0A55: 85 05        	sta	<R1
  4914 05:0A57: B2 05        	lda	(<R1)
  4915 05:0A59: 85 01        	sta	<R0
  4916 05:0A5B: A0 02 00     	ldy	#$2
  4917 05:0A5E: B1 05        	lda	(<R1),Y
  4918 05:0A60: 85 03        	sta	<R0+2
  4919 05:0A62: A7 01        	lda	[<R0]
  4920 05:0A64: 85 05        	sta	<R1
  4921 05:0A66: A0 02 00     	ldy	#$2
  4922 05:0A69: B7 01        	lda	[<R0],Y
  4923 05:0A6B: 85 07        	sta	<R1+2
  4924 05:0A6D: A0 04 00     	ldy	#$4
  4925 05:0A70: B7 05        	lda	[<R1],Y
  4926 05:0A72: 48           	pha
  4927 05:0A73: A0 02 00     	ldy	#$2
  4928 05:0A76: B7 05        	lda	[<R1],Y
  4929 05:0A78: 48           	pha
  4930 05:0A79: F4 xx xx     	pea	#^L119+33
  4931 05:0A7C: F4 xx xx     	pea	#<L119+33
  4932 05:0A7F: 22 xx xx xx  	jsl	~~k_debug_long
  4933                        ;				k_unattach_events(eventP
                    rocess[index]->eventProc,NULL);
  4934                        	.line	1349
  4935 05:0A83: F4 00 00     	pea	#^$0
  4936 05:0A86: F4 00 00     	pea	#<$0
  4937 05:0A89: A5 19        	lda	<L121+index_1
  4938 05:0A8B: 0A           	asl	A
  4939 05:0A8C: 0A           	asl	A
  4940 05:0A8D: 85 01        	sta	<R0
  4941 05:0A8F: 18           	clc
  4942 05:0A90: A9 xx xx     	lda	#<~~eventProcess
  4943 05:0A93: 65 01        	adc	<R0
  4944 05:0A95: 85 05        	sta	<R1
  4945 05:0A97: B2 05        	lda	(<R1)
  4946 05:0A99: 85 01        	sta	<R0
  4947 05:0A9B: A0 02 00     	ldy	#$2
  4948 05:0A9E: B1 05        	lda	(<R1),Y
  4949 05:0AA0: 85 03        	sta	<R0+2
  4950 05:0AA2: A0 06 00     	ldy	#$6
  4951 05:0AA5: B7 01        	lda	[<R0],Y
  4952 05:0AA7: 48           	pha
  4953 05:0AA8: A0 04 00     	ldy	#$4
  4954 05:0AAB: B7 01        	lda	[<R0],Y
  4955 05:0AAD: 48           	pha
  Thu Dec  3 2020 22:25                                                Page 99


  4956 05:0AAE: 22 49 10 05  	jsl	~~k_unattach_events
  4957                        ;				eventProcess[index] = NU
                    LL;
  4958                        	.line	1350
  4959 05:0AB2: A5 19        	lda	<L121+index_1
  4960 05:0AB4: 0A           	asl	A
  4961 05:0AB5: 0A           	asl	A
  4962 05:0AB6: 85 01        	sta	<R0
  4963 05:0AB8: 18           	clc
  4964 05:0AB9: A9 xx xx     	lda	#<~~eventProcess
  4965 05:0ABC: 65 01        	adc	<R0
  4966 05:0ABE: 85 05        	sta	<R1
  4967 05:0AC0: A9 00 00     	lda	#$0
  4968 05:0AC3: 92 05        	sta	(<R1)
  4969 05:0AC5: A9 00 00     	lda	#$0
  4970 05:0AC8: A0 02 00     	ldy	#$2
  4971 05:0ACB: 91 05        	sta	(<R1),Y
  4972                        ;				continue;
  4973                        	.line	1351
  4974 05:0ACD: 82 A1 04     	brl	L10047
  4975                        ;			}
  4976                        	.line	1352
  4977                        ;
  4978                        ;			pCurrent = eventProcess[index]->
                    process;
  4979                        L10054:
  4980                        	.line	1354
  4981 05:0AD0: A5 19        	lda	<L121+index_1
  4982 05:0AD2: 0A           	asl	A
  4983 05:0AD3: 0A           	asl	A
  4984 05:0AD4: 85 01        	sta	<R0
  4985 05:0AD6: 18           	clc
  4986 05:0AD7: A9 xx xx     	lda	#<~~eventProcess
  4987 05:0ADA: 65 01        	adc	<R0
  4988 05:0ADC: 85 05        	sta	<R1
  4989 05:0ADE: B2 05        	lda	(<R1)
  4990 05:0AE0: 85 01        	sta	<R0
  4991 05:0AE2: A0 02 00     	ldy	#$2
  4992 05:0AE5: B1 05        	lda	(<R1),Y
  4993 05:0AE7: 85 03        	sta	<R0+2
  4994 05:0AE9: A7 01        	lda	[<R0]
  4995 05:0AEB: 85 1D        	sta	<L121+pCurrent_1
  4996 05:0AED: A0 02 00     	ldy	#$2
  4997 05:0AF0: B7 01        	lda	[<R0],Y
  4998 05:0AF2: 85 1F        	sta	<L121+pCurrent_1+2
  4999                        ;
  5000                        ;			if(eventProcess[index]->process-
                    >status == PROCESS_STATUS_INIT)
  5001                        	.line	1356
  5002                        ;			{
  5003 05:0AF4: A5 19        	lda	<L121+index_1
  5004 05:0AF6: 0A           	asl	A
  5005 05:0AF7: 0A           	asl	A
  5006 05:0AF8: 85 01        	sta	<R0
  5007 05:0AFA: 18           	clc
  5008 05:0AFB: A9 xx xx     	lda	#<~~eventProcess
  5009 05:0AFE: 65 01        	adc	<R0
  5010 05:0B00: 85 05        	sta	<R1
  Thu Dec  3 2020 22:25                                                Page 100


  5011 05:0B02: B2 05        	lda	(<R1)
  5012 05:0B04: 85 01        	sta	<R0
  5013 05:0B06: A0 02 00     	ldy	#$2
  5014 05:0B09: B1 05        	lda	(<R1),Y
  5015 05:0B0B: 85 03        	sta	<R0+2
  5016 05:0B0D: A7 01        	lda	[<R0]
  5017 05:0B0F: 85 05        	sta	<R1
  5018 05:0B11: A0 02 00     	ldy	#$2
  5019 05:0B14: B7 01        	lda	[<R0],Y
  5020 05:0B16: 85 07        	sta	<R1+2
  5021 05:0B18: A0 10 00     	ldy	#$10
  5022 05:0B1B: B7 05        	lda	[<R1],Y
  5023 05:0B1D: F0 03        	beq	L128
  5024 05:0B1F: 82 66 00     	brl	L10055
  5025                        L128:
  5026                        	.line	1357
  5027                        ;				k_debug_long("k_do_proce
                    sses::PROCESS TO RUNNING:",eventProcess[index]->process->pro
                    cId);
  5028                        	.line	1358
  5029 05:0B22: A5 19        	lda	<L121+index_1
  5030 05:0B24: 0A           	asl	A
  5031 05:0B25: 0A           	asl	A
  5032 05:0B26: 85 01        	sta	<R0
  5033 05:0B28: 18           	clc
  5034 05:0B29: A9 xx xx     	lda	#<~~eventProcess
  5035 05:0B2C: 65 01        	adc	<R0
  5036 05:0B2E: 85 05        	sta	<R1
  5037 05:0B30: B2 05        	lda	(<R1)
  5038 05:0B32: 85 01        	sta	<R0
  5039 05:0B34: A0 02 00     	ldy	#$2
  5040 05:0B37: B1 05        	lda	(<R1),Y
  5041 05:0B39: 85 03        	sta	<R0+2
  5042 05:0B3B: A7 01        	lda	[<R0]
  5043 05:0B3D: 85 05        	sta	<R1
  5044 05:0B3F: A0 02 00     	ldy	#$2
  5045 05:0B42: B7 01        	lda	[<R0],Y
  5046 05:0B44: 85 07        	sta	<R1+2
  5047 05:0B46: A0 04 00     	ldy	#$4
  5048 05:0B49: B7 05        	lda	[<R1],Y
  5049 05:0B4B: 48           	pha
  5050 05:0B4C: A0 02 00     	ldy	#$2
  5051 05:0B4F: B7 05        	lda	[<R1],Y
  5052 05:0B51: 48           	pha
  5053 05:0B52: F4 xx xx     	pea	#^L119+70
  5054 05:0B55: F4 xx xx     	pea	#<L119+70
  5055 05:0B58: 22 xx xx xx  	jsl	~~k_debug_long
  5056                        ;				eventProcess[index]->pro
                    cess->status = PROCESS_STATUS_RUNNING;
  5057                        	.line	1359
  5058 05:0B5C: A5 19        	lda	<L121+index_1
  5059 05:0B5E: 0A           	asl	A
  5060 05:0B5F: 0A           	asl	A
  5061 05:0B60: 85 01        	sta	<R0
  5062 05:0B62: 18           	clc
  5063 05:0B63: A9 xx xx     	lda	#<~~eventProcess
  5064 05:0B66: 65 01        	adc	<R0
  5065 05:0B68: 85 05        	sta	<R1
  Thu Dec  3 2020 22:25                                                Page 101


  5066 05:0B6A: B2 05        	lda	(<R1)
  5067 05:0B6C: 85 01        	sta	<R0
  5068 05:0B6E: A0 02 00     	ldy	#$2
  5069 05:0B71: B1 05        	lda	(<R1),Y
  5070 05:0B73: 85 03        	sta	<R0+2
  5071 05:0B75: A7 01        	lda	[<R0]
  5072 05:0B77: 85 05        	sta	<R1
  5073 05:0B79: A0 02 00     	ldy	#$2
  5074 05:0B7C: B7 01        	lda	[<R0],Y
  5075 05:0B7E: 85 07        	sta	<R1+2
  5076 05:0B80: A9 01 00     	lda	#$1
  5077 05:0B83: A0 10 00     	ldy	#$10
  5078 05:0B86: 97 05        	sta	[<R1],Y
  5079                        ;			}
  5080                        	.line	1360
  5081                        ;
  5082                        ;			if(pMsg->dest!=FX_MSG_DEFAULT)
  5083                        L10055:
  5084                        	.line	1362
  5085                        ;			{
  5086 05:0B88: A0 04 00     	ldy	#$4
  5087 05:0B8B: B7 24        	lda	[<L120+pMsg_0],Y
  5088 05:0B8D: C9 FF FF     	cmp	#<$ffffffff
  5089 05:0B90: D0 08        	bne	L129
  5090 05:0B92: A0 06 00     	ldy	#$6
  5091 05:0B95: B7 24        	lda	[<L120+pMsg_0],Y
  5092 05:0B97: C9 FF FF     	cmp	#^$ffffffff
  5093                        L129:
  5094 05:0B9A: D0 03        	bne	L130
  5095 05:0B9C: 82 2A 01     	brl	L10056
  5096                        L130:
  5097                        	.line	1363
  5098                        ;				if(eventProcess[index]->
                    eventProc && eventProcess[index]->process->procId == pMsg->d
                    est)
  5099                        	.line	1364
  5100                        ;				{
  5101 05:0B9F: A5 19        	lda	<L121+index_1
  5102 05:0BA1: 0A           	asl	A
  5103 05:0BA2: 0A           	asl	A
  5104 05:0BA3: 85 01        	sta	<R0
  5105 05:0BA5: 18           	clc
  5106 05:0BA6: A9 xx xx     	lda	#<~~eventProcess
  5107 05:0BA9: 65 01        	adc	<R0
  5108 05:0BAB: 85 05        	sta	<R1
  5109 05:0BAD: B2 05        	lda	(<R1)
  5110 05:0BAF: 85 01        	sta	<R0
  5111 05:0BB1: A0 02 00     	ldy	#$2
  5112 05:0BB4: B1 05        	lda	(<R1),Y
  5113 05:0BB6: 85 03        	sta	<R0+2
  5114 05:0BB8: A0 04 00     	ldy	#$4
  5115 05:0BBB: B7 01        	lda	[<R0],Y
  5116 05:0BBD: A0 06 00     	ldy	#$6
  5117 05:0BC0: 17 01        	ora	[<R0],Y
  5118 05:0BC2: D0 03        	bne	L131
  5119 05:0BC4: 82 FF 00     	brl	L10057
  5120                        L131:
  5121 05:0BC7: A5 19        	lda	<L121+index_1
  Thu Dec  3 2020 22:25                                                Page 102


  5122 05:0BC9: 0A           	asl	A
  5123 05:0BCA: 0A           	asl	A
  5124 05:0BCB: 85 01        	sta	<R0
  5125 05:0BCD: 18           	clc
  5126 05:0BCE: A9 xx xx     	lda	#<~~eventProcess
  5127 05:0BD1: 65 01        	adc	<R0
  5128 05:0BD3: 85 05        	sta	<R1
  5129 05:0BD5: B2 05        	lda	(<R1)
  5130 05:0BD7: 85 01        	sta	<R0
  5131 05:0BD9: A0 02 00     	ldy	#$2
  5132 05:0BDC: B1 05        	lda	(<R1),Y
  5133 05:0BDE: 85 03        	sta	<R0+2
  5134 05:0BE0: A7 01        	lda	[<R0]
  5135 05:0BE2: 85 05        	sta	<R1
  5136 05:0BE4: A0 02 00     	ldy	#$2
  5137 05:0BE7: B7 01        	lda	[<R0],Y
  5138 05:0BE9: 85 07        	sta	<R1+2
  5139 05:0BEB: A0 02 00     	ldy	#$2
  5140 05:0BEE: B7 05        	lda	[<R1],Y
  5141 05:0BF0: A0 04 00     	ldy	#$4
  5142 05:0BF3: D7 24        	cmp	[<L120+pMsg_0],Y
  5143 05:0BF5: D0 0A        	bne	L132
  5144 05:0BF7: A0 04 00     	ldy	#$4
  5145 05:0BFA: B7 05        	lda	[<R1],Y
  5146 05:0BFC: A0 06 00     	ldy	#$6
  5147 05:0BFF: D7 24        	cmp	[<L120+pMsg_0],Y
  5148                        L132:
  5149 05:0C01: F0 03        	beq	L133
  5150 05:0C03: 82 C0 00     	brl	L10057
  5151                        L133:
  5152                        	.line	1365
  5153                        ;					k_debug_long("**
                    Process Specific Message:PROCID:",eventProcess[index]->proce
                    ss->procId);
  5154                        	.line	1366
  5155 05:0C06: A5 19        	lda	<L121+index_1
  5156 05:0C08: 0A           	asl	A
  5157 05:0C09: 0A           	asl	A
  5158 05:0C0A: 85 01        	sta	<R0
  5159 05:0C0C: 18           	clc
  5160 05:0C0D: A9 xx xx     	lda	#<~~eventProcess
  5161 05:0C10: 65 01        	adc	<R0
  5162 05:0C12: 85 05        	sta	<R1
  5163 05:0C14: B2 05        	lda	(<R1)
  5164 05:0C16: 85 01        	sta	<R0
  5165 05:0C18: A0 02 00     	ldy	#$2
  5166 05:0C1B: B1 05        	lda	(<R1),Y
  5167 05:0C1D: 85 03        	sta	<R0+2
  5168 05:0C1F: A7 01        	lda	[<R0]
  5169 05:0C21: 85 05        	sta	<R1
  5170 05:0C23: A0 02 00     	ldy	#$2
  5171 05:0C26: B7 01        	lda	[<R0],Y
  5172 05:0C28: 85 07        	sta	<R1+2
  5173 05:0C2A: A0 04 00     	ldy	#$4
  5174 05:0C2D: B7 05        	lda	[<R1],Y
  5175 05:0C2F: 48           	pha
  5176 05:0C30: A0 02 00     	ldy	#$2
  5177 05:0C33: B7 05        	lda	[<R1],Y
  Thu Dec  3 2020 22:25                                                Page 103


  5178 05:0C35: 48           	pha
  5179 05:0C36: F4 xx xx     	pea	#^L119+106
  5180 05:0C39: F4 xx xx     	pea	#<L119+106
  5181 05:0C3C: 22 xx xx xx  	jsl	~~k_debug_long
  5182                        ;					k_debug_long("**
                    Process Specific Message:TYPE:",pMsg->type);
  5183                        	.line	1367
  5184 05:0C40: A0 08 00     	ldy	#$8
  5185 05:0C43: B7 24        	lda	[<L120+pMsg_0],Y
  5186 05:0C45: 85 01        	sta	<R0
  5187 05:0C47: 64 03        	stz	<R0+2
  5188 05:0C49: D4 03        	pei	<R0+2
  5189 05:0C4B: D4 01        	pei	<R0
  5190 05:0C4D: F4 xx xx     	pea	#^L119+141
  5191 05:0C50: F4 xx xx     	pea	#<L119+141
  5192 05:0C53: 22 xx xx xx  	jsl	~~k_debug_long
  5193                        ;					k_debug_integer(
                    "**Process Specific Message:index:",index);
  5194                        	.line	1368
  5195 05:0C57: D4 19        	pei	<L121+index_1
  5196 05:0C59: F4 xx xx     	pea	#^L119+174
  5197 05:0C5C: F4 xx xx     	pea	#<L119+174
  5198 05:0C5F: 22 xx xx xx  	jsl	~~k_debug_integer
  5199                        ;					if(eventProcess[
                    index]->eventProc)
  5200                        	.line	1369
  5201                        ;					{
  5202 05:0C63: A5 19        	lda	<L121+index_1
  5203 05:0C65: 0A           	asl	A
  5204 05:0C66: 0A           	asl	A
  5205 05:0C67: 85 01        	sta	<R0
  5206 05:0C69: 18           	clc
  5207 05:0C6A: A9 xx xx     	lda	#<~~eventProcess
  5208 05:0C6D: 65 01        	adc	<R0
  5209 05:0C6F: 85 05        	sta	<R1
  5210 05:0C71: B2 05        	lda	(<R1)
  5211 05:0C73: 85 01        	sta	<R0
  5212 05:0C75: A0 02 00     	ldy	#$2
  5213 05:0C78: B1 05        	lda	(<R1),Y
  5214 05:0C7A: 85 03        	sta	<R0+2
  5215 05:0C7C: A0 04 00     	ldy	#$4
  5216 05:0C7F: B7 01        	lda	[<R0],Y
  5217 05:0C81: A0 06 00     	ldy	#$6
  5218 05:0C84: 17 01        	ora	[<R0],Y
  5219 05:0C86: D0 03        	bne	L134
  5220 05:0C88: 82 2F 00     	brl	L10058
  5221                        L134:
  5222                        	.line	1370
  5223                        ;						eventPro
                    cess[index]->eventProc(pMsg);
  5224                        	.line	1371
  5225 05:0C8B: D4 26        	pei	<L120+pMsg_0+2
  5226 05:0C8D: D4 24        	pei	<L120+pMsg_0
  5227 05:0C8F: A5 19        	lda	<L121+index_1
  5228 05:0C91: 0A           	asl	A
  5229 05:0C92: 0A           	asl	A
  5230 05:0C93: 85 01        	sta	<R0
  5231 05:0C95: 18           	clc
  Thu Dec  3 2020 22:25                                                Page 104


  5232 05:0C96: A9 xx xx     	lda	#<~~eventProcess
  5233 05:0C99: 65 01        	adc	<R0
  5234 05:0C9B: 85 05        	sta	<R1
  5235 05:0C9D: B2 05        	lda	(<R1)
  5236 05:0C9F: 85 01        	sta	<R0
  5237 05:0CA1: A0 02 00     	ldy	#$2
  5238 05:0CA4: B1 05        	lda	(<R1),Y
  5239 05:0CA6: 85 03        	sta	<R0+2
  5240 05:0CA8: A0 06 00     	ldy	#$6
  5241 05:0CAB: B7 01        	lda	[<R0],Y
  5242 05:0CAD: AA           	tax
  5243 05:0CAE: A0 04 00     	ldy	#$4
  5244 05:0CB1: B7 01        	lda	[<R0],Y
  5245                        	xref	~~~lcal
  5246 05:0CB3: 22 xx xx xx  	jsl	~~~lcal
  5247                        ;					}
  5248                        	.line	1372
  5249                        ;					else
  5250 05:0CB7: 82 0C 00     	brl	L10059
  5251                        L10058:
  5252                        ;					{
  5253                        	.line	1374
  5254                        ;						k_debug_
                    integer("**Process Specific Message:BAD PROC:",index);
  5255                        	.line	1375
  5256 05:0CBA: D4 19        	pei	<L121+index_1
  5257 05:0CBC: F4 xx xx     	pea	#^L119+208
  5258 05:0CBF: F4 xx xx     	pea	#<L119+208
  5259 05:0CC2: 22 xx xx xx  	jsl	~~k_debug_integer
  5260                        ;					}
  5261                        	.line	1376
  5262                        L10059:
  5263                        ;				}
  5264                        	.line	1377
  5265                        ;
  5266                        ;			}
  5267                        L10057:
  5268                        	.line	1379
  5269                        ;			else
  5270 05:0CC6: 82 9E 02     	brl	L10060
  5271                        L10056:
  5272                        ;			{
  5273                        	.line	1381
  5274                        ;				if(pMsg->type == FX_PROC
                    ESS_TIMER)
  5275                        	.line	1382
  5276                        ;				{
  5277 05:0CC9: A0 08 00     	ldy	#$8
  5278 05:0CCC: B7 24        	lda	[<L120+pMsg_0],Y
  5279 05:0CCE: C9 F1 FF     	cmp	#<$fff1
  5280 05:0CD1: F0 03        	beq	L135
  5281 05:0CD3: 82 87 01     	brl	L10061
  5282                        L135:
  5283                        	.line	1383
  5284                        ;					//k_debug_string
                    ("** FX_PROCESS_TIMER DETECTED\r\n");
  5285                        ;					if(pCurrent && p
                    Current->timerAware )
  Thu Dec  3 2020 22:25                                                Page 105


  5286                        	.line	1385
  5287                        ;					{
  5288 05:0CD6: A5 1D        	lda	<L121+pCurrent_1
  5289 05:0CD8: 05 1F        	ora	<L121+pCurrent_1+2
  5290 05:0CDA: D0 03        	bne	L136
  5291 05:0CDC: 82 7E 01     	brl	L10062
  5292                        L136:
  5293 05:0CDF: A0 47 00     	ldy	#$47
  5294 05:0CE2: B7 1D        	lda	[<L121+pCurrent_1],Y
  5295 05:0CE4: 29 FF 00     	and	#$ff
  5296 05:0CE7: D0 03        	bne	L137
  5297 05:0CE9: 82 71 01     	brl	L10062
  5298                        L137:
  5299                        	.line	1386
  5300                        ;						//k_debu
                    g_string("** FX_PROCESS_TIMER DETECTED\r\n");
  5301                        ;						for(tc=0
                    ;tc<2;tc++)
  5302                        	.line	1388
  5303 05:0CEC: 64 1B        	stz	<L121+tc_1
  5304                        L10065:
  5305                        ;						{
  5306                        	.line	1389
  5307                        ;							
                    if(pCurrent->timerTicks[tc])
  5308                        	.line	1390
  5309                        ;							
                    {
  5310 05:0CEE: A0 00 00     	ldy	#$0
  5311 05:0CF1: A5 1B        	lda	<L121+tc_1
  5312 05:0CF3: 10 01        	bpl	L138
  5313 05:0CF5: 88           	dey
  5314                        L138:
  5315 05:0CF6: 85 05        	sta	<R1
  5316 05:0CF8: 84 07        	sty	<R1+2
  5317 05:0CFA: D4 07        	pei	<R1+2
  5318 05:0CFC: D4 05        	pei	<R1
  5319 05:0CFE: A9 01 00     	lda	#$1
  5320                        	xref	~~~lasl
  5321 05:0D01: 22 xx xx xx  	jsl	~~~lasl
  5322 05:0D05: 85 01        	sta	<R0
  5323 05:0D07: 86 03        	stx	<R0+2
  5324 05:0D09: 18           	clc
  5325 05:0D0A: A9 48 00     	lda	#$48
  5326 05:0D0D: 65 1D        	adc	<L121+pCurrent_1
  5327 05:0D0F: 85 09        	sta	<R2
  5328 05:0D11: A9 00 00     	lda	#$0
  5329 05:0D14: 65 1F        	adc	<L121+pCurrent_1+2
  5330 05:0D16: 85 0B        	sta	<R2+2
  5331 05:0D18: 18           	clc
  5332 05:0D19: A5 09        	lda	<R2
  5333 05:0D1B: 65 01        	adc	<R0
  5334 05:0D1D: 85 0D        	sta	<R3
  5335 05:0D1F: A5 0B        	lda	<R2+2
  5336 05:0D21: 65 03        	adc	<R0+2
  5337 05:0D23: 85 0F        	sta	<R3+2
  5338 05:0D25: A7 0D        	lda	[<R3]
  5339 05:0D27: D0 03        	bne	L139
  Thu Dec  3 2020 22:25                                                Page 106


  5340 05:0D29: 82 24 01     	brl	L10066
  5341                        L139:
  5342                        	.line	1391
  5343                        ;							
                    	//k_debug_long   ("** FX_PROCESS_TIMER DETECTED:",pCurre
                    nt->procId);
  5344                        ;							
                    	//k_debug_integer("                       INDEX:",tc);
  5345                        ;							
                    	//k_debug_long   ("                       COUNT:",pCurre
                    nt->timerTickCount[tc]);
  5346                        ;							
                    	pCurrent->timerTickCount[tc]--;
  5347                        	.line	1395
  5348 05:0D2C: A0 00 00     	ldy	#$0
  5349 05:0D2F: A5 1B        	lda	<L121+tc_1
  5350 05:0D31: 10 01        	bpl	L140
  5351 05:0D33: 88           	dey
  5352                        L140:
  5353 05:0D34: 85 05        	sta	<R1
  5354 05:0D36: 84 07        	sty	<R1+2
  5355 05:0D38: D4 07        	pei	<R1+2
  5356 05:0D3A: D4 05        	pei	<R1
  5357 05:0D3C: A9 01 00     	lda	#$1
  5358                        	xref	~~~lasl
  5359 05:0D3F: 22 xx xx xx  	jsl	~~~lasl
  5360 05:0D43: 85 01        	sta	<R0
  5361 05:0D45: 86 03        	stx	<R0+2
  5362 05:0D47: 18           	clc
  5363 05:0D48: A9 4C 00     	lda	#$4c
  5364 05:0D4B: 65 1D        	adc	<L121+pCurrent_1
  5365 05:0D4D: 85 09        	sta	<R2
  5366 05:0D4F: A9 00 00     	lda	#$0
  5367 05:0D52: 65 1F        	adc	<L121+pCurrent_1+2
  5368 05:0D54: 85 0B        	sta	<R2+2
  5369 05:0D56: 18           	clc
  5370 05:0D57: A5 09        	lda	<R2
  5371 05:0D59: 65 01        	adc	<R0
  5372 05:0D5B: 85 0D        	sta	<R3
  5373 05:0D5D: A5 0B        	lda	<R2+2
  5374 05:0D5F: 65 03        	adc	<R0+2
  5375 05:0D61: 85 0F        	sta	<R3+2
  5376 05:0D63: 18           	clc
  5377 05:0D64: A9 FF FF     	lda	#$ffff
  5378 05:0D67: 67 0D        	adc	[<R3]
  5379 05:0D69: 87 0D        	sta	[<R3]
  5380                        ;							
                    	if(pCurrent->timerTickCount[tc] == 0)
  5381                        	.line	1396
  5382                        ;							
                    	{
  5383 05:0D6B: A0 00 00     	ldy	#$0
  5384 05:0D6E: A5 1B        	lda	<L121+tc_1
  5385 05:0D70: 10 01        	bpl	L141
  5386 05:0D72: 88           	dey
  5387                        L141:
  5388 05:0D73: 85 05        	sta	<R1
  5389 05:0D75: 84 07        	sty	<R1+2
  Thu Dec  3 2020 22:25                                                Page 107


  5390 05:0D77: D4 07        	pei	<R1+2
  5391 05:0D79: D4 05        	pei	<R1
  5392 05:0D7B: A9 01 00     	lda	#$1
  5393                        	xref	~~~lasl
  5394 05:0D7E: 22 xx xx xx  	jsl	~~~lasl
  5395 05:0D82: 85 01        	sta	<R0
  5396 05:0D84: 86 03        	stx	<R0+2
  5397 05:0D86: 18           	clc
  5398 05:0D87: A9 4C 00     	lda	#$4c
  5399 05:0D8A: 65 1D        	adc	<L121+pCurrent_1
  5400 05:0D8C: 85 09        	sta	<R2
  5401 05:0D8E: A9 00 00     	lda	#$0
  5402 05:0D91: 65 1F        	adc	<L121+pCurrent_1+2
  5403 05:0D93: 85 0B        	sta	<R2+2
  5404 05:0D95: 18           	clc
  5405 05:0D96: A5 09        	lda	<R2
  5406 05:0D98: 65 01        	adc	<R0
  5407 05:0D9A: 85 0D        	sta	<R3
  5408 05:0D9C: A5 0B        	lda	<R2+2
  5409 05:0D9E: 65 03        	adc	<R0+2
  5410 05:0DA0: 85 0F        	sta	<R3+2
  5411 05:0DA2: A7 0D        	lda	[<R3]
  5412 05:0DA4: F0 03        	beq	L142
  5413 05:0DA6: 82 A7 00     	brl	L10067
  5414                        L142:
  5415                        	.line	1397
  5416                        ;							
                    		//k_debug_long("** FX_PROCESS_TIMER SENT:",pCurr
                    ent->procId);
  5417                        ;							
                    		pCurrent->timerTickCount[tc] = pCurrent->timerTi
                    cks[tc];
  5418                        	.line	1399
  5419 05:0DA9: A0 00 00     	ldy	#$0
  5420 05:0DAC: A5 1B        	lda	<L121+tc_1
  5421 05:0DAE: 10 01        	bpl	L143
  5422 05:0DB0: 88           	dey
  5423                        L143:
  5424 05:0DB1: 85 05        	sta	<R1
  5425 05:0DB3: 84 07        	sty	<R1+2
  5426 05:0DB5: D4 07        	pei	<R1+2
  5427 05:0DB7: D4 05        	pei	<R1
  5428 05:0DB9: A9 01 00     	lda	#$1
  5429                        	xref	~~~lasl
  5430 05:0DBC: 22 xx xx xx  	jsl	~~~lasl
  5431 05:0DC0: 85 01        	sta	<R0
  5432 05:0DC2: 86 03        	stx	<R0+2
  5433 05:0DC4: 18           	clc
  5434 05:0DC5: A9 4C 00     	lda	#$4c
  5435 05:0DC8: 65 1D        	adc	<L121+pCurrent_1
  5436 05:0DCA: 85 09        	sta	<R2
  5437 05:0DCC: A9 00 00     	lda	#$0
  5438 05:0DCF: 65 1F        	adc	<L121+pCurrent_1+2
  5439 05:0DD1: 85 0B        	sta	<R2+2
  5440 05:0DD3: 18           	clc
  5441 05:0DD4: A5 09        	lda	<R2
  5442 05:0DD6: 65 01        	adc	<R0
  5443 05:0DD8: 85 0D        	sta	<R3
  Thu Dec  3 2020 22:25                                                Page 108


  5444 05:0DDA: A5 0B        	lda	<R2+2
  5445 05:0DDC: 65 03        	adc	<R0+2
  5446 05:0DDE: 85 0F        	sta	<R3+2
  5447 05:0DE0: A0 00 00     	ldy	#$0
  5448 05:0DE3: A5 1B        	lda	<L121+tc_1
  5449 05:0DE5: 10 01        	bpl	L144
  5450 05:0DE7: 88           	dey
  5451                        L144:
  5452 05:0DE8: 85 09        	sta	<R2
  5453 05:0DEA: 84 0B        	sty	<R2+2
  5454 05:0DEC: D4 0B        	pei	<R2+2
  5455 05:0DEE: D4 09        	pei	<R2
  5456 05:0DF0: A9 01 00     	lda	#$1
  5457                        	xref	~~~lasl
  5458 05:0DF3: 22 xx xx xx  	jsl	~~~lasl
  5459 05:0DF7: 85 01        	sta	<R0
  5460 05:0DF9: 86 03        	stx	<R0+2
  5461 05:0DFB: 18           	clc
  5462 05:0DFC: A9 48 00     	lda	#$48
  5463 05:0DFF: 65 1D        	adc	<L121+pCurrent_1
  5464 05:0E01: 85 11        	sta	<17
  5465 05:0E03: A9 00 00     	lda	#$0
  5466 05:0E06: 65 1F        	adc	<L121+pCurrent_1+2
  5467 05:0E08: 85 13        	sta	<17+2
  5468 05:0E0A: 18           	clc
  5469 05:0E0B: A5 11        	lda	<17
  5470 05:0E0D: 65 01        	adc	<R0
  5471 05:0E0F: 85 15        	sta	<21
  5472 05:0E11: A5 13        	lda	<17+2
  5473 05:0E13: 65 03        	adc	<R0+2
  5474 05:0E15: 85 17        	sta	<21+2
  5475 05:0E17: A7 15        	lda	[<21]
  5476 05:0E19: 87 0D        	sta	[<R3]
  5477                        ;							
                    		//pMsg->hwnd = BROADCAST_HWND;
  5478                        ;							
                    		pMsg->hwnd = k_user_getFocusWindow();
  5479                        	.line	1401
  5480 05:0E1B: 22 xx xx xx  	jsl	~~k_user_getFocusWindow
  5481 05:0E1F: 85 01        	sta	<R0
  5482 05:0E21: 86 03        	stx	<R0+2
  5483 05:0E23: A5 01        	lda	<R0
  5484 05:0E25: A0 0A 00     	ldy	#$a
  5485 05:0E28: 97 24        	sta	[<L120+pMsg_0],Y
  5486 05:0E2A: A5 03        	lda	<R0+2
  5487 05:0E2C: A0 0C 00     	ldy	#$c
  5488 05:0E2F: 97 24        	sta	[<L120+pMsg_0],Y
  5489                        ;							
                    		if(!pMsg->hwnd)
  5490                        	.line	1402
  5491                        ;							
                    			pMsg->hwnd = BROADCAST_HWND;
  5492 05:0E31: A0 0A 00     	ldy	#$a
  5493 05:0E34: B7 24        	lda	[<L120+pMsg_0],Y
  5494 05:0E36: A0 0C 00     	ldy	#$c
  5495 05:0E39: 17 24        	ora	[<L120+pMsg_0],Y
  5496 05:0E3B: F0 03        	beq	L145
  5497 05:0E3D: 82 10 00     	brl	L10068
  Thu Dec  3 2020 22:25                                                Page 109


  5498                        L145:
  5499                        	.line	1403
  5500 05:0E40: A9 FA FF     	lda	#$fffa
  5501 05:0E43: A0 0A 00     	ldy	#$a
  5502 05:0E46: 97 24        	sta	[<L120+pMsg_0],Y
  5503 05:0E48: A9 FA FF     	lda	#$fffa
  5504 05:0E4B: A0 0C 00     	ldy	#$c
  5505 05:0E4E: 97 24        	sta	[<L120+pMsg_0],Y
  5506                        ;							
                    	}
  5507                        L10068:
  5508                        	.line	1404
  5509                        ;							
                    }
  5510                        L10067:
  5511                        	.line	1405
  5512                        ;						}
  5513                        L10066:
  5514                        	.line	1406
  5515                        L10063:
  5516 05:0E50: E6 1B        	inc	<L121+tc_1
  5517 05:0E52: A5 1B        	lda	<L121+tc_1
  5518 05:0E54: 30 04        	bmi	L146
  5519 05:0E56: 3A           	dea
  5520 05:0E57: 3A           	dea
  5521 05:0E58: 10 03        	bpl	L147
  5522                        L146:
  5523 05:0E5A: 82 91 FE     	brl	L10065
  5524                        L147:
  5525                        L10064:
  5526                        ;					}
  5527                        	.line	1407
  5528                        ;				}
  5529                        L10062:
  5530                        	.line	1408
  5531                        ;
  5532                        ;				if(pMsg->hwnd)
  5533                        L10061:
  5534                        	.line	1410
  5535                        ;				{
  5536 05:0E5D: A0 0A 00     	ldy	#$a
  5537 05:0E60: B7 24        	lda	[<L120+pMsg_0],Y
  5538 05:0E62: A0 0C 00     	ldy	#$c
  5539 05:0E65: 17 24        	ora	[<L120+pMsg_0],Y
  5540 05:0E67: D0 03        	bne	L148
  5541 05:0E69: 82 A7 00     	brl	L10069
  5542                        L148:
  5543                        	.line	1411
  5544                        ;					if(_k_hLockedFoc
                    us)
  5545                        	.line	1412
  5546                        ;					{
  5547 05:0E6C: AD xx xx     	lda	|~~_k_hLockedFocus
  5548 05:0E6F: 0D xx xx     	ora	|~~_k_hLockedFocus+2
  5549 05:0E72: D0 03        	bne	L149
  5550 05:0E74: 82 50 00     	brl	L10070
  5551                        L149:
  5552                        	.line	1413
  Thu Dec  3 2020 22:25                                                Page 110


  5553                        ;						pMsg->hw
                    nd = _k_hLockedFocus;
  5554                        	.line	1414
  5555 05:0E77: AD xx xx     	lda	|~~_k_hLockedFocus
  5556 05:0E7A: A0 0A 00     	ldy	#$a
  5557 05:0E7D: 97 24        	sta	[<L120+pMsg_0],Y
  5558 05:0E7F: AD xx xx     	lda	|~~_k_hLockedFocus+2
  5559 05:0E82: A0 0C 00     	ldy	#$c
  5560 05:0E85: 97 24        	sta	[<L120+pMsg_0],Y
  5561                        ;
  5562                        ;						//k_debu
                    g_pointer("k_do_processes:DoWndProcs:_k_bNCLockedFocus:",_k_
                    bNCLockedFocus);
  5563                        ;
  5564                        ;						if(_k_bN
                    CLockedFocus)
  5565                        	.line	1418
  5566                        ;						{
  5567 05:0E87: AD xx xx     	lda	|~~_k_bNCLockedFocus
  5568 05:0E8A: 29 FF 00     	and	#$ff
  5569 05:0E8D: D0 03        	bne	L150
  5570 05:0E8F: 82 1A 00     	brl	L10071
  5571                        L150:
  5572                        	.line	1419
  5573                        ;							
                    if(pMsg->type < 0xF000)
  5574                        	.line	1420
  5575                        ;							
                    {
  5576 05:0E92: A0 08 00     	ldy	#$8
  5577 05:0E95: B7 24        	lda	[<L120+pMsg_0],Y
  5578 05:0E97: C9 00 F0     	cmp	#<$f000
  5579 05:0E9A: 90 03        	bcc	L151
  5580 05:0E9C: 82 0D 00     	brl	L10072
  5581                        L151:
  5582                        	.line	1421
  5583                        ;							
                    	//k_debug_integer("k_do_processes:DoWndProcs:pMsg->typeA
                    :",pMsg->type);
  5584                        ;							
                    	pMsg->type = (UINT)((LONG)pMsg->type | 0x008000);
  5585                        	.line	1423
  5586 05:0E9F: A0 08 00     	ldy	#$8
  5587 05:0EA2: B7 24        	lda	[<L120+pMsg_0],Y
  5588 05:0EA4: 09 00 80     	ora	#<$8000
  5589 05:0EA7: A0 08 00     	ldy	#$8
  5590 05:0EAA: 97 24        	sta	[<L120+pMsg_0],Y
  5591                        ;							
                    	//k_debug_integer("k_do_processes:DoWndProcs:pMsg->typeB
                    :",pMsg->type);
  5592                        ;							
                    }
  5593                        	.line	1425
  5594                        ;						}
  5595                        L10072:
  5596                        	.line	1426
  5597                        ;						//k_debu
                    g_pointer("k_do_processes:DoWndProcs:k_getWindowList:",k_get
  Thu Dec  3 2020 22:25                                                Page 111


                    WindowList());
  5598                        ;						k_nodeli
                    st_foreach_data(k_getWindowList(),pMsg,DoWndProcs);
  5599                        L10071:
  5600                        	.line	1428
  5601 05:0EAC: F4 05 00     	pea	#^~~DoWndProcs
  5602 05:0EAF: F4 55 07     	pea	#<~~DoWndProcs
  5603 05:0EB2: D4 26        	pei	<L120+pMsg_0+2
  5604 05:0EB4: D4 24        	pei	<L120+pMsg_0
  5605 05:0EB6: 22 xx xx xx  	jsl	~~k_getWindowList
  5606 05:0EBA: 85 01        	sta	<R0
  5607 05:0EBC: 86 03        	stx	<R0+2
  5608 05:0EBE: DA           	phx
  5609 05:0EBF: 48           	pha
  5610 05:0EC0: 22 xx xx xx  	jsl	~~k_nodelist_foreach_data
  5611                        ;					}
  5612                        	.line	1429
  5613                        ;					else
  5614 05:0EC4: 82 49 00     	brl	L10073
  5615                        L10070:
  5616                        ;					{
  5617                        	.line	1431
  5618                        ;						if(event
                    Process[index]->process->foregroundActive)
  5619                        	.line	1432
  5620                        ;						{
  5621 05:0EC7: A5 19        	lda	<L121+index_1
  5622 05:0EC9: 0A           	asl	A
  5623 05:0ECA: 0A           	asl	A
  5624 05:0ECB: 85 01        	sta	<R0
  5625 05:0ECD: 18           	clc
  5626 05:0ECE: A9 xx xx     	lda	#<~~eventProcess
  5627 05:0ED1: 65 01        	adc	<R0
  5628 05:0ED3: 85 05        	sta	<R1
  5629 05:0ED5: B2 05        	lda	(<R1)
  5630 05:0ED7: 85 01        	sta	<R0
  5631 05:0ED9: A0 02 00     	ldy	#$2
  5632 05:0EDC: B1 05        	lda	(<R1),Y
  5633 05:0EDE: 85 03        	sta	<R0+2
  5634 05:0EE0: A7 01        	lda	[<R0]
  5635 05:0EE2: 85 05        	sta	<R1
  5636 05:0EE4: A0 02 00     	ldy	#$2
  5637 05:0EE7: B7 01        	lda	[<R0],Y
  5638 05:0EE9: 85 07        	sta	<R1+2
  5639 05:0EEB: A0 12 00     	ldy	#$12
  5640 05:0EEE: B7 05        	lda	[<R1],Y
  5641 05:0EF0: 29 FF 00     	and	#$ff
  5642 05:0EF3: D0 03        	bne	L152
  5643 05:0EF5: 82 18 00     	brl	L10074
  5644                        L152:
  5645                        	.line	1433
  5646                        ;							
                    //k_debug_pointer("k_do_processes:DoWndProcs:k_getWindowList
                    :",k_getWindowList());
  5647                        ;							
                    k_nodelist_foreach_data(k_getWindowList(),pMsg,DoWndProcs);
  5648                        	.line	1435
  5649 05:0EF8: F4 05 00     	pea	#^~~DoWndProcs
  Thu Dec  3 2020 22:25                                                Page 112


  5650 05:0EFB: F4 55 07     	pea	#<~~DoWndProcs
  5651 05:0EFE: D4 26        	pei	<L120+pMsg_0+2
  5652 05:0F00: D4 24        	pei	<L120+pMsg_0
  5653 05:0F02: 22 xx xx xx  	jsl	~~k_getWindowList
  5654 05:0F06: 85 01        	sta	<R0
  5655 05:0F08: 86 03        	stx	<R0+2
  5656 05:0F0A: DA           	phx
  5657 05:0F0B: 48           	pha
  5658 05:0F0C: 22 xx xx xx  	jsl	~~k_nodelist_foreach_data
  5659                        ;						}
  5660                        	.line	1436
  5661                        ;					}
  5662                        L10074:
  5663                        	.line	1437
  5664                        L10073:
  5665                        ;
  5666                        ;					/*
  5667                        ;					if(eventProcess[
                    index]->process->foregroundActive)
  5668                        ;					{
  5669                        ;						//k_debu
                    g_pointer("k_do_processes:DoWndProcs:k_getWindowList:",k_get
                    WindowList());
  5670                        ;						k_nodeli
                    st_foreach_data(k_getWindowList(),pMsg,DoWndProcs);
  5671                        ;					}
  5672                        ;					*/
  5673                        ;				}
  5674                        	.line	1446
  5675                        ;				else
  5676 05:0F10: 82 54 00     	brl	L10075
  5677                        L10069:
  5678                        ;				{
  5679                        	.line	1448
  5680                        ;					if(eventProcess[
                    index]->eventProc)
  5681                        	.line	1449
  5682                        ;						eventPro
                    cess[index]->eventProc(pMsg);
  5683 05:0F13: A5 19        	lda	<L121+index_1
  5684 05:0F15: 0A           	asl	A
  5685 05:0F16: 0A           	asl	A
  5686 05:0F17: 85 01        	sta	<R0
  5687 05:0F19: 18           	clc
  5688 05:0F1A: A9 xx xx     	lda	#<~~eventProcess
  5689 05:0F1D: 65 01        	adc	<R0
  5690 05:0F1F: 85 05        	sta	<R1
  5691 05:0F21: B2 05        	lda	(<R1)
  5692 05:0F23: 85 01        	sta	<R0
  5693 05:0F25: A0 02 00     	ldy	#$2
  5694 05:0F28: B1 05        	lda	(<R1),Y
  5695 05:0F2A: 85 03        	sta	<R0+2
  5696 05:0F2C: A0 04 00     	ldy	#$4
  5697 05:0F2F: B7 01        	lda	[<R0],Y
  5698 05:0F31: A0 06 00     	ldy	#$6
  5699 05:0F34: 17 01        	ora	[<R0],Y
  5700 05:0F36: D0 03        	bne	L153
  5701 05:0F38: 82 2C 00     	brl	L10076
  Thu Dec  3 2020 22:25                                                Page 113


  5702                        L153:
  5703                        	.line	1450
  5704 05:0F3B: D4 26        	pei	<L120+pMsg_0+2
  5705 05:0F3D: D4 24        	pei	<L120+pMsg_0
  5706 05:0F3F: A5 19        	lda	<L121+index_1
  5707 05:0F41: 0A           	asl	A
  5708 05:0F42: 0A           	asl	A
  5709 05:0F43: 85 01        	sta	<R0
  5710 05:0F45: 18           	clc
  5711 05:0F46: A9 xx xx     	lda	#<~~eventProcess
  5712 05:0F49: 65 01        	adc	<R0
  5713 05:0F4B: 85 05        	sta	<R1
  5714 05:0F4D: B2 05        	lda	(<R1)
  5715 05:0F4F: 85 01        	sta	<R0
  5716 05:0F51: A0 02 00     	ldy	#$2
  5717 05:0F54: B1 05        	lda	(<R1),Y
  5718 05:0F56: 85 03        	sta	<R0+2
  5719 05:0F58: A0 06 00     	ldy	#$6
  5720 05:0F5B: B7 01        	lda	[<R0],Y
  5721 05:0F5D: AA           	tax
  5722 05:0F5E: A0 04 00     	ldy	#$4
  5723 05:0F61: B7 01        	lda	[<R0],Y
  5724                        	xref	~~~lcal
  5725 05:0F63: 22 xx xx xx  	jsl	~~~lcal
  5726                        ;				}
  5727                        L10076:
  5728                        	.line	1451
  5729                        L10075:
  5730                        ;
  5731                        ;			}
  5732                        	.line	1453
  5733                        L10060:
  5734                        ;
  5735                        ;			k_exec_set_current_process(NULL)
                    ;
  5736                        	.line	1455
  5737 05:0F67: F4 00 00     	pea	#^$0
  5738 05:0F6A: F4 00 00     	pea	#<$0
  5739 05:0F6D: 22 xx xx xx  	jsl	~~k_exec_set_current_process
  5740                        ;		}
  5741                        	.line	1456
  5742                        ;	}
  5743                        L10050:
  5744                        	.line	1457
  5745                        L10047:
  5746 05:0F71: E6 19        	inc	<L121+index_1
  5747 05:0F73: 38           	sec
  5748 05:0F74: A5 19        	lda	<L121+index_1
  5749 05:0F76: E9 00 01     	sbc	#<$100
  5750 05:0F79: 70 03        	bvs	L154
  5751 05:0F7B: 49 00 80     	eor	#$8000
  5752                        L154:
  5753 05:0F7E: 30 03        	bmi	L155
  5754 05:0F80: 82 8E F9     	brl	L10049
  5755                        L155:
  5756                        L10048:
  5757                        ;}
  5758                        	.line	1458
  Thu Dec  3 2020 22:25                                                Page 114


  5759                        L156:
  5760 05:0F83: A5 22        	lda	<L120+2
  5761 05:0F85: 85 26        	sta	<L120+2+4
  5762 05:0F87: A5 21        	lda	<L120+1
  5763 05:0F89: 85 25        	sta	<L120+1+4
  5764 05:0F8B: 2B           	pld
  5765 05:0F8C: 3B           	tsc
  5766 05:0F8D: 18           	clc
  5767 05:0F8E: 69 24 00     	adc	#L120+4
  5768 05:0F91: 1B           	tcs
  5769 05:0F92: 6B           	rtl
  5770                        	.endblock	1458
  5771             00000020   L120	equ	32
  5772             00000019   L121	equ	25
  5773 05:0F93:              	ends
  5774                        	efunc
  5775                        	.endfunc	1458,25,32
  5776                        	.line	1458
  5777                        	data
  5778                        L119:
  5779 00:0330: 6B 5F 64 6F  	db	$6B,$5F,$64,$6F,$5F,$70,$72,$6F,$63,$65,
                    $73,$73,$65,$73,$3A
       00:0334: 5F 70 72 6F 
       00:0338: 63 65 73 73 
       00:033C: 65 73 3A 
  5780 00:033F: 3A 50 52 4F  	db	$3A,$50,$52,$4F,$43,$45,$53,$53,$20,$57,
                    $41,$49,$54,$49,$4E
       00:0343: 43 45 53 53 
       00:0347: 20 57 41 49 
       00:034B: 54 49 4E 
  5781 00:034E: 47 3A 00 6B  	db	$47,$3A,$00,$6B,$5F,$64,$6F,$5F,$70,$72,
                    $6F,$63,$65,$73,$73
       00:0352: 5F 64 6F 5F 
       00:0356: 70 72 6F 63 
       00:035A: 65 73 73 
  5782 00:035D: 65 73 3A 3A  	db	$65,$73,$3A,$3A,$50,$52,$4F,$43,$45,$53,
                    $53,$20,$54,$45,$52
       00:0361: 50 52 4F 43 
       00:0365: 45 53 53 20 
       00:0369: 54 45 52 
  5783 00:036C: 4D 49 4E 41  	db	$4D,$49,$4E,$41,$54,$49,$4E,$47,$3A,$00,
                    $6B,$5F,$64,$6F,$5F
       00:0370: 54 49 4E 47 
       00:0374: 3A 00 6B 5F 
       00:0378: 64 6F 5F 
  5784 00:037B: 70 72 6F 63  	db	$70,$72,$6F,$63,$65,$73,$73,$65,$73,$3A,
                    $3A,$50,$52,$4F,$43
       00:037F: 65 73 73 65 
       00:0383: 73 3A 3A 50 
       00:0387: 52 4F 43 
  5785 00:038A: 45 53 53 20  	db	$45,$53,$53,$20,$54,$4F,$20,$52,$55,$4E,
                    $4E,$49,$4E,$47,$3A
       00:038E: 54 4F 20 52 
       00:0392: 55 4E 4E 49 
       00:0396: 4E 47 3A 
  5786 00:0399: 00 2A 2A 50  	db	$00,$2A,$2A,$50,$72,$6F,$63,$65,$73,$73,
                    $20,$53,$70,$65,$63
       00:039D: 72 6F 63 65 
  Thu Dec  3 2020 22:25                                                Page 115


       00:03A1: 73 73 20 53 
       00:03A5: 70 65 63 
  5787 00:03A8: 69 66 69 63  	db	$69,$66,$69,$63,$20,$4D,$65,$73,$73,$61,
                    $67,$65,$3A,$50,$52
       00:03AC: 20 4D 65 73 
       00:03B0: 73 61 67 65 
       00:03B4: 3A 50 52 
  5788 00:03B7: 4F 43 49 44  	db	$4F,$43,$49,$44,$3A,$00,$2A,$2A,$50,$72,
                    $6F,$63,$65,$73,$73
       00:03BB: 3A 00 2A 2A 
       00:03BF: 50 72 6F 63 
       00:03C3: 65 73 73 
  5789 00:03C6: 20 53 70 65  	db	$20,$53,$70,$65,$63,$69,$66,$69,$63,$20,
                    $4D,$65,$73,$73,$61
       00:03CA: 63 69 66 69 
       00:03CE: 63 20 4D 65 
       00:03D2: 73 73 61 
  5790 00:03D5: 67 65 3A 54  	db	$67,$65,$3A,$54,$59,$50,$45,$3A,$00,$2A,
                    $2A,$50,$72,$6F,$63
       00:03D9: 59 50 45 3A 
       00:03DD: 00 2A 2A 50 
       00:03E1: 72 6F 63 
  5791 00:03E4: 65 73 73 20  	db	$65,$73,$73,$20,$53,$70,$65,$63,$69,$66,
                    $69,$63,$20,$4D,$65
       00:03E8: 53 70 65 63 
       00:03EC: 69 66 69 63 
       00:03F0: 20 4D 65 
  5792 00:03F3: 73 73 61 67  	db	$73,$73,$61,$67,$65,$3A,$69,$6E,$64,$65,
                    $78,$3A,$00,$2A,$2A
       00:03F7: 65 3A 69 6E 
       00:03FB: 64 65 78 3A 
       00:03FF: 00 2A 2A 
  5793 00:0402: 50 72 6F 63  	db	$50,$72,$6F,$63,$65,$73,$73,$20,$53,$70,
                    $65,$63,$69,$66,$69
       00:0406: 65 73 73 20 
       00:040A: 53 70 65 63 
       00:040E: 69 66 69 
  5794 00:0411: 63 20 4D 65  	db	$63,$20,$4D,$65,$73,$73,$61,$67,$65,$3A,
                    $42,$41,$44,$20,$50
       00:0415: 73 73 61 67 
       00:0419: 65 3A 42 41 
       00:041D: 44 20 50 
  5795 00:0420: 52 4F 43 3A  	db	$52,$4F,$43,$3A,$00
       00:0424: 00 
  5796 00:0425:              	ends
  5797                        ;
  5798                        ;/*
  5799                        ;void k_main_loop(PFXENVIRONMENT pEnv)
  5800                        ;{
  5801                        ;	int bExit = 0;
  5802                        ;	int mb = 0;
  5803                        ;	int mx = 0;
  5804                        ;
  5805                        ;	int my = 0;
  5806                        ;	int lk = 0;
  5807                        ;
  5808                        ;
  5809                        ;
  Thu Dec  3 2020 22:25                                                Page 116


  5810                        ;	FXOSMESSAGE msg;
  5811                        ;
  5812                        ;	k_debug_string("********************************
                    **\r\n");
  5813                        ;	k_debug_string("******     k_main_loop  3  *****
                    **\r\n");
  5814                        ;	k_debug_string("********************************
                    **\r\n");
  5815                        ;
  5816                        ;	//asm cli;
  5817                        ;
  5818                        ;	k_debug_string("k_main_loop:CLI\r\n");
  5819                        ;
  5820                        ;	eventProcs[IDLE_PROC] = IdleProc;
  5821                        ;
  5822                        ;	while(!bExit)
  5823                        ;	{
  5824                        ;		mb = 0;
  5825                        ;		//k_debug_string("k_main_loop:WAI\r\n");
  5826                        ;		//asm WAI;
  5827                        ;
  5828                        ;		//asm sei;
  5829                        ;		disable();
  5830                        ;		mb = (FXOS_MOUSE_BYTE_0 & 0x07);
  5831                        ;		mx = k_get_mouse_pos_X();
  5832                        ;		my = k_get_mouse_pos_Y();
  5833                        ;		//asm cli;
  5834                        ;		enable();
  5835                        ;		msg.type = FX_MOUSE_MOVE;
  5836                        ;
  5837                        ;		((PMOUSEMSGDATA)&msg.data)->button1 = (m
                    b & 1);
  5838                        ;		((PMOUSEMSGDATA)&msg.data)->button2 = (m
                    b & 2);
  5839                        ;		((PMOUSEMSGDATA)&msg.data)->button3 = (m
                    b & 4);
  5840                        ;		((PMOUSEMSGDATA)&msg.data)->button4 = 0;
  5841                        ;
  5842                        ;		((PMOUSEMSGDATA)&msg.data)->x = mx;
  5843                        ;		((PMOUSEMSGDATA)&msg.data)->y = my;
  5844                        ;
  5845                        ;
  5846                        ;		k_do_procs(&msg);
  5847                        ;	}
  5848                        ;
  5849                        ;
  5850                        ;	return;
  5851                        ;}
  5852                        ;*/
  5853                        ;//int k_getevents(FXEventProc eventProcedure)
  5854                        ;int k_attach_events(FXEventProc eventProcedure,LP
                    VOID processArgs)
  5855                        ;{
  5856                        	.line	1516
  5857                        	.line	1517
  5858                        	EVTMAN
  5859                        	xdef	~~k_attach_events
  5860                        	func
  Thu Dec  3 2020 22:25                                                Page 117


  5861                        	.function	1517
  5862                        ~~k_attach_events:
  5863                        	longa	on
  5864                        	longi	on
  5865 05:0F93: 3B           	tsc
  5866 05:0F94: 38           	sec
  5867 05:0F95: E9 18 00     	sbc	#L158
  5868 05:0F98: 1B           	tcs
  5869 05:0F99: 0B           	phd
  5870 05:0F9A: 5B           	tcd
  5871             00000004   eventProcedure_0	set	4
  5872             00000008   processArgs_0	set	8
  5873                        	.block	1517
  5874                        ;	FXPROCESSMESSAGE msg;
  5875                        ;
  5876                        ;	int index = LOW_PROC;
  5877                        ;	
  5878                        ;	if(eventProcedure!=NULL)
  5879             00000000   msg_1	set	0
  5880             0000000E   index_1	set	14
  5881                        	.sym	msg,0,10,1,112,21
  5882                        	.sym	index,14,5,1,16
  5883                        	.sym	eventProcedure,4,641,6,32
  5884                        	.sym	processArgs,8,129,6,32
  5885 05:0F9B: A9 01 00     	lda	#$1
  5886 05:0F9E: 85 17        	sta	<L159+index_1
  5887                        	.line	1522
  5888                        ;	{
  5889 05:0FA0: A5 1C        	lda	<L158+eventProcedure_0
  5890 05:0FA2: 05 1E        	ora	<L158+eventProcedure_0+2
  5891 05:0FA4: D0 03        	bne	L161
  5892 05:0FA6: 82 8B 00     	brl	L10077
  5893                        L161:
  5894                        	.line	1523
  5895                        ;		//k_debug_string("Enter k_getevents\r\n"
                    );
  5896                        ;		//k_debug_pointer("\tProcess:",processAr
                    gs);
  5897                        ;
  5898                        ;		//while(index < MAX_PROCS && eventProcs[
                    index]!=NULL)
  5899                        ;		for(index=LOW_PROC;index<MAX_PROCS;index
                    ++)
  5900                        	.line	1528
  5901 05:0FA9: A9 01 00     	lda	#$1
  5902 05:0FAC: 85 17        	sta	<L159+index_1
  5903                        L10080:
  5904                        ;		{
  5905                        	.line	1529
  5906                        ;			if(eventProcs[index] == NULL)
  5907                        	.line	1530
  5908                        ;			{
  5909 05:0FAE: A5 17        	lda	<L159+index_1
  5910 05:0FB0: 0A           	asl	A
  5911 05:0FB1: 0A           	asl	A
  5912 05:0FB2: 85 01        	sta	<R0
  5913 05:0FB4: 18           	clc
  5914 05:0FB5: A9 xx xx     	lda	#<~~eventProcs
  Thu Dec  3 2020 22:25                                                Page 118


  5915 05:0FB8: 65 01        	adc	<R0
  5916 05:0FBA: 85 05        	sta	<R1
  5917 05:0FBC: B2 05        	lda	(<R1)
  5918 05:0FBE: A0 02 00     	ldy	#$2
  5919 05:0FC1: 11 05        	ora	(<R1),Y
  5920 05:0FC3: F0 03        	beq	L162
  5921 05:0FC5: 82 28 00     	brl	L10081
  5922                        L162:
  5923                        	.line	1531
  5924                        ;				eventProcs[index] = even
                    tProcedure;
  5925                        	.line	1532
  5926 05:0FC8: A5 17        	lda	<L159+index_1
  5927 05:0FCA: 0A           	asl	A
  5928 05:0FCB: 0A           	asl	A
  5929 05:0FCC: 85 01        	sta	<R0
  5930 05:0FCE: 18           	clc
  5931 05:0FCF: A9 xx xx     	lda	#<~~eventProcs
  5932 05:0FD2: 65 01        	adc	<R0
  5933 05:0FD4: 85 05        	sta	<R1
  5934 05:0FD6: A5 1C        	lda	<L158+eventProcedure_0
  5935 05:0FD8: 92 05        	sta	(<R1)
  5936 05:0FDA: A5 1E        	lda	<L158+eventProcedure_0+2
  5937 05:0FDC: A0 02 00     	ldy	#$2
  5938 05:0FDF: 91 05        	sta	(<R1),Y
  5939                        ;				k_debug_integer("k_getev
                    ents::@index:",index);
  5940                        	.line	1533
  5941 05:0FE1: D4 17        	pei	<L159+index_1
  5942 05:0FE3: F4 xx xx     	pea	#^L157
  5943 05:0FE6: F4 xx xx     	pea	#<L157
  5944 05:0FE9: 22 xx xx xx  	jsl	~~k_debug_integer
  5945                        ;				break;
  5946                        	.line	1534
  5947 05:0FED: 82 12 00     	brl	L10079
  5948                        ;			}
  5949                        	.line	1535
  5950                        ;		}
  5951                        L10081:
  5952                        	.line	1536
  5953                        L10078:
  5954 05:0FF0: E6 17        	inc	<L159+index_1
  5955 05:0FF2: 38           	sec
  5956 05:0FF3: A5 17        	lda	<L159+index_1
  5957 05:0FF5: E9 00 01     	sbc	#<$100
  5958 05:0FF8: 70 03        	bvs	L163
  5959 05:0FFA: 49 00 80     	eor	#$8000
  5960                        L163:
  5961 05:0FFD: 30 03        	bmi	L164
  5962 05:0FFF: 82 AC FF     	brl	L10080
  5963                        L164:
  5964                        L10079:
  5965                        ;
  5966                        ;		msg.type = FX_INIT_MESSAGE;
  5967                        	.line	1538
  5968 05:1002: A9 01 FF     	lda	#$ff01
  5969 05:1005: 85 11        	sta	<L159+msg_1+8
  5970                        ;		msg.src  = FX_MSG_DEFAULT;
  Thu Dec  3 2020 22:25                                                Page 119


  5971                        	.line	1539
  5972 05:1007: A9 FF FF     	lda	#$ffff
  5973 05:100A: 85 09        	sta	<L159+msg_1
  5974 05:100C: A9 FF FF     	lda	#$ffff
  5975 05:100F: 85 0B        	sta	<L159+msg_1+2
  5976                        ;		msg.dest = FX_MSG_DEFAULT;
  5977                        	.line	1540
  5978 05:1011: A9 FF FF     	lda	#$ffff
  5979 05:1014: 85 0D        	sta	<L159+msg_1+4
  5980 05:1016: A9 FF FF     	lda	#$ffff
  5981 05:1019: 85 0F        	sta	<L159+msg_1+6
  5982                        ;		msg.processInfo = processArgs;
  5983                        	.line	1541
  5984 05:101B: A5 20        	lda	<L158+processArgs_0
  5985 05:101D: 85 13        	sta	<L159+msg_1+10
  5986 05:101F: A5 22        	lda	<L158+processArgs_0+2
  5987 05:1021: 85 15        	sta	<L159+msg_1+12
  5988                        ;		eventProcedure((PFXOSMESSAGE)&msg);
  5989                        	.line	1542
  5990 05:1023: F4 00 00     	pea	#0
  5991 05:1026: 18           	clc
  5992 05:1027: 7B           	tdc
  5993 05:1028: 69 09 00     	adc	#<L159+msg_1
  5994 05:102B: 48           	pha
  5995 05:102C: A6 1E        	ldx	<L158+eventProcedure_0+2
  5996 05:102E: A5 1C        	lda	<L158+eventProcedure_0
  5997                        	xref	~~~lcal
  5998 05:1030: 22 xx xx xx  	jsl	~~~lcal
  5999                        ;	}
  6000                        	.line	1543
  6001                        ;	return 0;
  6002                        L10077:
  6003                        	.line	1544
  6004 05:1034: A9 00 00     	lda	#$0
  6005                        L165:
  6006 05:1037: A8           	tay
  6007 05:1038: A5 1A        	lda	<L158+2
  6008 05:103A: 85 22        	sta	<L158+2+8
  6009 05:103C: A5 19        	lda	<L158+1
  6010 05:103E: 85 21        	sta	<L158+1+8
  6011 05:1040: 2B           	pld
  6012 05:1041: 3B           	tsc
  6013 05:1042: 18           	clc
  6014 05:1043: 69 20 00     	adc	#L158+8
  6015 05:1046: 1B           	tcs
  6016 05:1047: 98           	tya
  6017 05:1048: 6B           	rtl
  6018                        ;}
  6019                        	.line	1545
  6020                        	.endblock	1545
  6021             00000018   L158	equ	24
  6022             00000009   L159	equ	9
  6023 05:1049:              	ends
  6024                        	efunc
  6025                        	.endfunc	1545,9,24
  6026                        	.line	1545
  6027                        	data
  6028                        L157:
  Thu Dec  3 2020 22:25                                                Page 120


  6029 00:0425: 6B 5F 67 65  	db	$6B,$5F,$67,$65,$74,$65,$76,$65,$6E,$74,
                    $73,$3A,$3A,$40,$69
       00:0429: 74 65 76 65 
       00:042D: 6E 74 73 3A 
       00:0431: 3A 40 69 
  6030 00:0434: 6E 64 65 78  	db	$6E,$64,$65,$78,$3A,$00
       00:0438: 3A 00 
  6031 00:043A:              	ends
  6032                        ;
  6033                        ;int k_unattach_events(FXEventProc eventProcedure,
                    LPVOID processArgs)
  6034                        ;{
  6035                        	.line	1547
  6036                        	.line	1548
  6037                        	EVTMAN
  6038                        	xdef	~~k_unattach_events
  6039                        	func
  6040                        	.function	1548
  6041                        ~~k_unattach_events:
  6042                        	longa	on
  6043                        	longi	on
  6044 05:1049: 3B           	tsc
  6045 05:104A: 38           	sec
  6046 05:104B: E9 18 00     	sbc	#L167
  6047 05:104E: 1B           	tcs
  6048 05:104F: 0B           	phd
  6049 05:1050: 5B           	tcd
  6050             00000004   eventProcedure_0	set	4
  6051             00000008   processArgs_0	set	8
  6052                        	.block	1548
  6053                        ;	FXPROCESSMESSAGE msg;
  6054                        ;
  6055                        ;	int index = LOW_PROC;
  6056                        ;
  6057                        ;	if(eventProcedure!=NULL)
  6058             00000000   msg_1	set	0
  6059             0000000E   index_1	set	14
  6060                        	.sym	msg,0,10,1,112,21
  6061                        	.sym	index,14,5,1,16
  6062                        	.sym	eventProcedure,4,641,6,32
  6063                        	.sym	processArgs,8,129,6,32
  6064 05:1051: A9 01 00     	lda	#$1
  6065 05:1054: 85 17        	sta	<L168+index_1
  6066                        	.line	1553
  6067                        ;	{
  6068 05:1056: A5 1C        	lda	<L167+eventProcedure_0
  6069 05:1058: 05 1E        	ora	<L167+eventProcedure_0+2
  6070 05:105A: D0 03        	bne	L170
  6071 05:105C: 82 95 00     	brl	L10082
  6072                        L170:
  6073                        	.line	1554
  6074                        ;		k_debug_string("k_unattach_events\r\n");
  6075                        	.line	1555
  6076 05:105F: F4 xx xx     	pea	#^L166
  6077 05:1062: F4 xx xx     	pea	#<L166
  6078 05:1065: 22 xx xx xx  	jsl	~~k_debug_string
  6079                        ;		//k_debug_pointer("\tProcess:",processAr
                    gs);
  Thu Dec  3 2020 22:25                                                Page 121


  6080                        ;
  6081                        ;		//while(index < MAX_PROCS && eventProcs[
                    index]!=NULL)
  6082                        ;		for(index=LOW_PROC;index<MAX_PROCS;index
                    ++)
  6083                        	.line	1559
  6084 05:1069: A9 01 00     	lda	#$1
  6085 05:106C: 85 17        	sta	<L168+index_1
  6086                        L10085:
  6087                        ;		{
  6088                        	.line	1560
  6089                        ;			if(eventProcs[index] == NULL)
  6090                        	.line	1561
  6091                        ;			{
  6092 05:106E: A5 17        	lda	<L168+index_1
  6093 05:1070: 0A           	asl	A
  6094 05:1071: 0A           	asl	A
  6095 05:1072: 85 01        	sta	<R0
  6096 05:1074: 18           	clc
  6097 05:1075: A9 xx xx     	lda	#<~~eventProcs
  6098 05:1078: 65 01        	adc	<R0
  6099 05:107A: 85 05        	sta	<R1
  6100 05:107C: B2 05        	lda	(<R1)
  6101 05:107E: A0 02 00     	ldy	#$2
  6102 05:1081: 11 05        	ora	(<R1),Y
  6103 05:1083: F0 03        	beq	L171
  6104 05:1085: 82 28 00     	brl	L10086
  6105                        L171:
  6106                        	.line	1562
  6107                        ;				eventProcs[index] = even
                    tProcedure;
  6108                        	.line	1563
  6109 05:1088: A5 17        	lda	<L168+index_1
  6110 05:108A: 0A           	asl	A
  6111 05:108B: 0A           	asl	A
  6112 05:108C: 85 01        	sta	<R0
  6113 05:108E: 18           	clc
  6114 05:108F: A9 xx xx     	lda	#<~~eventProcs
  6115 05:1092: 65 01        	adc	<R0
  6116 05:1094: 85 05        	sta	<R1
  6117 05:1096: A5 1C        	lda	<L167+eventProcedure_0
  6118 05:1098: 92 05        	sta	(<R1)
  6119 05:109A: A5 1E        	lda	<L167+eventProcedure_0+2
  6120 05:109C: A0 02 00     	ldy	#$2
  6121 05:109F: 91 05        	sta	(<R1),Y
  6122                        ;				k_debug_integer("k_getev
                    ents::@index:",index);
  6123                        	.line	1564
  6124 05:10A1: D4 17        	pei	<L168+index_1
  6125 05:10A3: F4 xx xx     	pea	#^L166+20
  6126 05:10A6: F4 xx xx     	pea	#<L166+20
  6127 05:10A9: 22 xx xx xx  	jsl	~~k_debug_integer
  6128                        ;				break;
  6129                        	.line	1565
  6130 05:10AD: 82 12 00     	brl	L10084
  6131                        ;			}
  6132                        	.line	1566
  6133                        ;		}
  Thu Dec  3 2020 22:25                                                Page 122


  6134                        L10086:
  6135                        	.line	1567
  6136                        L10083:
  6137 05:10B0: E6 17        	inc	<L168+index_1
  6138 05:10B2: 38           	sec
  6139 05:10B3: A5 17        	lda	<L168+index_1
  6140 05:10B5: E9 00 01     	sbc	#<$100
  6141 05:10B8: 70 03        	bvs	L172
  6142 05:10BA: 49 00 80     	eor	#$8000
  6143                        L172:
  6144 05:10BD: 30 03        	bmi	L173
  6145 05:10BF: 82 AC FF     	brl	L10085
  6146                        L173:
  6147                        L10084:
  6148                        ;
  6149                        ;		msg.type = FX_UNINIT_MESSAGE;
  6150                        	.line	1569
  6151 05:10C2: A9 02 FF     	lda	#$ff02
  6152 05:10C5: 85 11        	sta	<L168+msg_1+8
  6153                        ;		msg.src  = FX_MSG_DEFAULT;
  6154                        	.line	1570
  6155 05:10C7: A9 FF FF     	lda	#$ffff
  6156 05:10CA: 85 09        	sta	<L168+msg_1
  6157 05:10CC: A9 FF FF     	lda	#$ffff
  6158 05:10CF: 85 0B        	sta	<L168+msg_1+2
  6159                        ;		msg.dest = FX_MSG_DEFAULT;
  6160                        	.line	1571
  6161 05:10D1: A9 FF FF     	lda	#$ffff
  6162 05:10D4: 85 0D        	sta	<L168+msg_1+4
  6163 05:10D6: A9 FF FF     	lda	#$ffff
  6164 05:10D9: 85 0F        	sta	<L168+msg_1+6
  6165                        ;		msg.processInfo = processArgs;
  6166                        	.line	1572
  6167 05:10DB: A5 20        	lda	<L167+processArgs_0
  6168 05:10DD: 85 13        	sta	<L168+msg_1+10
  6169 05:10DF: A5 22        	lda	<L167+processArgs_0+2
  6170 05:10E1: 85 15        	sta	<L168+msg_1+12
  6171                        ;		eventProcedure((PFXOSMESSAGE)&msg);
  6172                        	.line	1573
  6173 05:10E3: F4 00 00     	pea	#0
  6174 05:10E6: 18           	clc
  6175 05:10E7: 7B           	tdc
  6176 05:10E8: 69 09 00     	adc	#<L168+msg_1
  6177 05:10EB: 48           	pha
  6178 05:10EC: A6 1E        	ldx	<L167+eventProcedure_0+2
  6179 05:10EE: A5 1C        	lda	<L167+eventProcedure_0
  6180                        	xref	~~~lcal
  6181 05:10F0: 22 xx xx xx  	jsl	~~~lcal
  6182                        ;	}
  6183                        	.line	1574
  6184                        ;	return 0;
  6185                        L10082:
  6186                        	.line	1575
  6187 05:10F4: A9 00 00     	lda	#$0
  6188                        L174:
  6189 05:10F7: A8           	tay
  6190 05:10F8: A5 1A        	lda	<L167+2
  6191 05:10FA: 85 22        	sta	<L167+2+8
  Thu Dec  3 2020 22:25                                                Page 123


  6192 05:10FC: A5 19        	lda	<L167+1
  6193 05:10FE: 85 21        	sta	<L167+1+8
  6194 05:1100: 2B           	pld
  6195 05:1101: 3B           	tsc
  6196 05:1102: 18           	clc
  6197 05:1103: 69 20 00     	adc	#L167+8
  6198 05:1106: 1B           	tcs
  6199 05:1107: 98           	tya
  6200 05:1108: 6B           	rtl
  6201                        ;}
  6202                        	.line	1576
  6203                        	.endblock	1576
  6204             00000018   L167	equ	24
  6205             00000009   L168	equ	9
  6206 05:1109:              	ends
  6207                        	efunc
  6208                        	.endfunc	1576,9,24
  6209                        	.line	1576
  6210                        	data
  6211                        L166:
  6212 00:043A: 6B 5F 75 6E  	db	$6B,$5F,$75,$6E,$61,$74,$74,$61,$63,$68,
                    $5F,$65,$76,$65,$6E
       00:043E: 61 74 74 61 
       00:0442: 63 68 5F 65 
       00:0446: 76 65 6E 
  6213 00:0449: 74 73 0D 0A  	db	$74,$73,$0D,$0A,$00,$6B,$5F,$67,$65,$74,
                    $65,$76,$65,$6E,$74
       00:044D: 00 6B 5F 67 
       00:0451: 65 74 65 76 
       00:0455: 65 6E 74 
  6214 00:0458: 73 3A 3A 40  	db	$73,$3A,$3A,$40,$69,$6E,$64,$65,$78,$3A,
                    $00
       00:045C: 69 6E 64 65 
       00:0460: 78 3A 00 
  6215 00:0463:              	ends
  6216                        ;
  6217                        ;int k_attach_process_events(FXEventProc eventProc
                    edure,LPVOID processArgs)
  6218                        ;{
  6219                        	.line	1578
  6220                        	.line	1579
  6221                        	EVTMAN
  6222                        	xdef	~~k_attach_process_events
  6223                        	func
  6224                        	.function	1579
  6225                        ~~k_attach_process_events:
  6226                        	longa	on
  6227                        	longi	on
  6228 05:1109: 3B           	tsc
  6229 05:110A: 38           	sec
  6230 05:110B: E9 1C 00     	sbc	#L176
  6231 05:110E: 1B           	tcs
  6232 05:110F: 0B           	phd
  6233 05:1110: 5B           	tcd
  6234             00000004   eventProcedure_0	set	4
  6235             00000008   processArgs_0	set	8
  6236                        	.block	1579
  6237                        ;	FXEVENTPROCESS FAR *fxep = NULL;
  Thu Dec  3 2020 22:25                                                Page 124


  6238                        ;	FXPROCESSMESSAGE msg;
  6239                        ;
  6240                        ;	int index = 0;
  6241                        ;
  6242                        ;	if(eventProcedure!=NULL)
  6243             00000000   fxep_1	set	0
  6244             00000004   msg_1	set	4
  6245             00000012   index_1	set	18
  6246                        	.sym	fxep,0,138,1,32,58
  6247                        	.sym	msg,4,10,1,112,21
  6248                        	.sym	index,18,5,1,16
  6249                        	.sym	eventProcedure,4,641,6,32
  6250                        	.sym	processArgs,8,129,6,32
  6251 05:1111: 64 09        	stz	<L177+fxep_1
  6252 05:1113: 64 0B        	stz	<L177+fxep_1+2
  6253 05:1115: 64 1B        	stz	<L177+index_1
  6254                        	.line	1585
  6255                        ;	{
  6256 05:1117: A5 20        	lda	<L176+eventProcedure_0
  6257 05:1119: 05 22        	ora	<L176+eventProcedure_0+2
  6258 05:111B: D0 03        	bne	L179
  6259 05:111D: 82 92 01     	brl	L10087
  6260                        L179:
  6261                        	.line	1586
  6262                        ;		k_debug_string("Enter k_attach_process_e
                    vents\r\n");
  6263                        	.line	1587
  6264 05:1120: F4 xx xx     	pea	#^L175
  6265 05:1123: F4 xx xx     	pea	#<L175
  6266 05:1126: 22 xx xx xx  	jsl	~~k_debug_string
  6267                        ;		k_debug_pointer("\eventProcedure:",event
                    Procedure);
  6268                        	.line	1588
  6269 05:112A: D4 22        	pei	<L176+eventProcedure_0+2
  6270 05:112C: D4 20        	pei	<L176+eventProcedure_0
  6271 05:112E: F4 xx xx     	pea	#^L175+32
  6272 05:1131: F4 xx xx     	pea	#<L175+32
  6273 05:1134: 22 xx xx xx  	jsl	~~k_debug_pointer
  6274                        ;		k_debug_pointer("\tProcess:",processArgs
                    );
  6275                        	.line	1589
  6276 05:1138: D4 26        	pei	<L176+processArgs_0+2
  6277 05:113A: D4 24        	pei	<L176+processArgs_0
  6278 05:113C: F4 xx xx     	pea	#^L175+48
  6279 05:113F: F4 xx xx     	pea	#<L175+48
  6280 05:1142: 22 xx xx xx  	jsl	~~k_debug_pointer
  6281                        ;
  6282                        ;		for(index=IDLE_PROC;index<MAX_PROCS;inde
                    x++)
  6283                        	.line	1591
  6284 05:1146: 64 1B        	stz	<L177+index_1
  6285                        L10090:
  6286                        ;		{
  6287                        	.line	1592
  6288                        ;			if(eventProcess[index] == NULL)
  6289                        	.line	1593
  6290                        ;			{
  6291 05:1148: A5 1B        	lda	<L177+index_1
  Thu Dec  3 2020 22:25                                                Page 125


  6292 05:114A: 0A           	asl	A
  6293 05:114B: 0A           	asl	A
  6294 05:114C: 85 01        	sta	<R0
  6295 05:114E: 18           	clc
  6296 05:114F: A9 xx xx     	lda	#<~~eventProcess
  6297 05:1152: 65 01        	adc	<R0
  6298 05:1154: 85 05        	sta	<R1
  6299 05:1156: B2 05        	lda	(<R1)
  6300 05:1158: A0 02 00     	ldy	#$2
  6301 05:115B: 11 05        	ora	(<R1),Y
  6302 05:115D: F0 03        	beq	L180
  6303 05:115F: 82 55 00     	brl	L10091
  6304                        L180:
  6305                        	.line	1594
  6306                        ;				fxep = (FXEVENTPROCESS F
                    AR *)k_mem_allocate_heap(sizeof(FXEVENTPROCESS));
  6307                        	.line	1595
  6308 05:1162: F4 08 00     	pea	#<$8
  6309 05:1165: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  6310 05:1169: 85 09        	sta	<L177+fxep_1
  6311 05:116B: 86 0B        	stx	<L177+fxep_1+2
  6312                        ;				if(fxep!=NULL)
  6313                        	.line	1596
  6314                        ;				{
  6315 05:116D: A5 09        	lda	<L177+fxep_1
  6316 05:116F: 05 0B        	ora	<L177+fxep_1+2
  6317 05:1171: D0 03        	bne	L181
  6318 05:1173: 82 3E 00     	brl	L10092
  6319                        L181:
  6320                        	.line	1597
  6321                        ;					eventProcess[ind
                    ex] = fxep;
  6322                        	.line	1598
  6323 05:1176: A5 1B        	lda	<L177+index_1
  6324 05:1178: 0A           	asl	A
  6325 05:1179: 0A           	asl	A
  6326 05:117A: 85 01        	sta	<R0
  6327 05:117C: 18           	clc
  6328 05:117D: A9 xx xx     	lda	#<~~eventProcess
  6329 05:1180: 65 01        	adc	<R0
  6330 05:1182: 85 05        	sta	<R1
  6331 05:1184: A5 09        	lda	<L177+fxep_1
  6332 05:1186: 92 05        	sta	(<R1)
  6333 05:1188: A5 0B        	lda	<L177+fxep_1+2
  6334 05:118A: A0 02 00     	ldy	#$2
  6335 05:118D: 91 05        	sta	(<R1),Y
  6336                        ;
  6337                        ;					fxep->process = 
                    (PFXPROCESS)processArgs;
  6338                        	.line	1600
  6339 05:118F: A5 24        	lda	<L176+processArgs_0
  6340 05:1191: 87 09        	sta	[<L177+fxep_1]
  6341 05:1193: A5 26        	lda	<L176+processArgs_0+2
  6342 05:1195: A0 02 00     	ldy	#$2
  6343 05:1198: 97 09        	sta	[<L177+fxep_1],Y
  6344                        ;					fxep->eventProc 
                    = eventProcedure;
  6345                        	.line	1601
  Thu Dec  3 2020 22:25                                                Page 126


  6346 05:119A: A5 20        	lda	<L176+eventProcedure_0
  6347 05:119C: A0 04 00     	ldy	#$4
  6348 05:119F: 97 09        	sta	[<L177+fxep_1],Y
  6349 05:11A1: A5 22        	lda	<L176+eventProcedure_0+2
  6350 05:11A3: A0 06 00     	ldy	#$6
  6351 05:11A6: 97 09        	sta	[<L177+fxep_1],Y
  6352                        ;
  6353                        ;					k_debug_integer(
                    "k_attach_process_events::@index:",index);
  6354                        	.line	1603
  6355 05:11A8: D4 1B        	pei	<L177+index_1
  6356 05:11AA: F4 xx xx     	pea	#^L175+58
  6357 05:11AD: F4 xx xx     	pea	#<L175+58
  6358 05:11B0: 22 xx xx xx  	jsl	~~k_debug_integer
  6359                        ;				}
  6360                        	.line	1604
  6361                        ;				break;
  6362                        L10092:
  6363                        	.line	1605
  6364 05:11B4: 82 12 00     	brl	L10089
  6365                        ;			}
  6366                        	.line	1606
  6367                        ;		}
  6368                        L10091:
  6369                        	.line	1607
  6370                        L10088:
  6371 05:11B7: E6 1B        	inc	<L177+index_1
  6372 05:11B9: 38           	sec
  6373 05:11BA: A5 1B        	lda	<L177+index_1
  6374 05:11BC: E9 00 01     	sbc	#<$100
  6375 05:11BF: 70 03        	bvs	L182
  6376 05:11C1: 49 00 80     	eor	#$8000
  6377                        L182:
  6378 05:11C4: 30 03        	bmi	L183
  6379 05:11C6: 82 7F FF     	brl	L10090
  6380                        L183:
  6381                        L10089:
  6382                        ;
  6383                        ;		if(index < MAX_PROCS)
  6384                        	.line	1609
  6385                        ;		{
  6386 05:11C9: 38           	sec
  6387 05:11CA: A5 1B        	lda	<L177+index_1
  6388 05:11CC: E9 00 01     	sbc	#<$100
  6389 05:11CF: 70 03        	bvs	L184
  6390 05:11D1: 49 00 80     	eor	#$8000
  6391                        L184:
  6392 05:11D4: 10 03        	bpl	L185
  6393 05:11D6: 82 C5 00     	brl	L10093
  6394                        L185:
  6395                        	.line	1610
  6396                        ;			msg.type = FX_INIT_MESSAGE;
  6397                        	.line	1611
  6398 05:11D9: A9 01 FF     	lda	#$ff01
  6399 05:11DC: 85 15        	sta	<L177+msg_1+8
  6400                        ;			msg.processInfo = processArgs;
  6401                        	.line	1612
  6402 05:11DE: A5 24        	lda	<L176+processArgs_0
  Thu Dec  3 2020 22:25                                                Page 127


  6403 05:11E0: 85 17        	sta	<L177+msg_1+10
  6404 05:11E2: A5 26        	lda	<L176+processArgs_0+2
  6405 05:11E4: 85 19        	sta	<L177+msg_1+12
  6406                        ;
  6407                        ;			k_debug_string("k_getevents @1\r
                    \n");
  6408                        	.line	1614
  6409 05:11E6: F4 xx xx     	pea	#^L175+91
  6410 05:11E9: F4 xx xx     	pea	#<L175+91
  6411 05:11EC: 22 xx xx xx  	jsl	~~k_debug_string
  6412                        ;
  6413                        ;			if(eventProcess[index]->process!
                    =NULL)
  6414                        	.line	1616
  6415                        ;				k_exec_set_current_proce
                    ss(eventProcess[index]->process);
  6416 05:11F0: A5 1B        	lda	<L177+index_1
  6417 05:11F2: 0A           	asl	A
  6418 05:11F3: 0A           	asl	A
  6419 05:11F4: 85 01        	sta	<R0
  6420 05:11F6: 18           	clc
  6421 05:11F7: A9 xx xx     	lda	#<~~eventProcess
  6422 05:11FA: 65 01        	adc	<R0
  6423 05:11FC: 85 05        	sta	<R1
  6424 05:11FE: B2 05        	lda	(<R1)
  6425 05:1200: 85 01        	sta	<R0
  6426 05:1202: A0 02 00     	ldy	#$2
  6427 05:1205: B1 05        	lda	(<R1),Y
  6428 05:1207: 85 03        	sta	<R0+2
  6429 05:1209: A7 01        	lda	[<R0]
  6430 05:120B: A0 02 00     	ldy	#$2
  6431 05:120E: 17 01        	ora	[<R0],Y
  6432 05:1210: D0 03        	bne	L186
  6433 05:1212: 82 26 00     	brl	L10094
  6434                        L186:
  6435                        	.line	1617
  6436 05:1215: A5 1B        	lda	<L177+index_1
  6437 05:1217: 0A           	asl	A
  6438 05:1218: 0A           	asl	A
  6439 05:1219: 85 01        	sta	<R0
  6440 05:121B: 18           	clc
  6441 05:121C: A9 xx xx     	lda	#<~~eventProcess
  6442 05:121F: 65 01        	adc	<R0
  6443 05:1221: 85 05        	sta	<R1
  6444 05:1223: B2 05        	lda	(<R1)
  6445 05:1225: 85 01        	sta	<R0
  6446 05:1227: A0 02 00     	ldy	#$2
  6447 05:122A: B1 05        	lda	(<R1),Y
  6448 05:122C: 85 03        	sta	<R0+2
  6449 05:122E: A0 02 00     	ldy	#$2
  6450 05:1231: B7 01        	lda	[<R0],Y
  6451 05:1233: 48           	pha
  6452 05:1234: A7 01        	lda	[<R0]
  6453 05:1236: 48           	pha
  6454 05:1237: 22 xx xx xx  	jsl	~~k_exec_set_current_process
  6455                        ;
  6456                        ;			//k_debug_integer("k_getevents @
                    2:",index);
  Thu Dec  3 2020 22:25                                                Page 128


  6457                        ;			//k_debug_pointer("k_getevents @
                    2:",eventProcess[index]->eventProc);
  6458                        ;
  6459                        ;			if(eventProcess[index]->eventPro
                    c)
  6460                        L10094:
  6461                        	.line	1622
  6462                        ;				eventProcess[index]->eve
                    ntProc((PFXOSMESSAGE)&msg);
  6463 05:123B: A5 1B        	lda	<L177+index_1
  6464 05:123D: 0A           	asl	A
  6465 05:123E: 0A           	asl	A
  6466 05:123F: 85 01        	sta	<R0
  6467 05:1241: 18           	clc
  6468 05:1242: A9 xx xx     	lda	#<~~eventProcess
  6469 05:1245: 65 01        	adc	<R0
  6470 05:1247: 85 05        	sta	<R1
  6471 05:1249: B2 05        	lda	(<R1)
  6472 05:124B: 85 01        	sta	<R0
  6473 05:124D: A0 02 00     	ldy	#$2
  6474 05:1250: B1 05        	lda	(<R1),Y
  6475 05:1252: 85 03        	sta	<R0+2
  6476 05:1254: A0 04 00     	ldy	#$4
  6477 05:1257: B7 01        	lda	[<R0],Y
  6478 05:1259: A0 06 00     	ldy	#$6
  6479 05:125C: 17 01        	ora	[<R0],Y
  6480 05:125E: D0 03        	bne	L187
  6481 05:1260: 82 31 00     	brl	L10095
  6482                        L187:
  6483                        	.line	1623
  6484 05:1263: F4 00 00     	pea	#0
  6485 05:1266: 18           	clc
  6486 05:1267: 7B           	tdc
  6487 05:1268: 69 0D 00     	adc	#<L177+msg_1
  6488 05:126B: 48           	pha
  6489 05:126C: A5 1B        	lda	<L177+index_1
  6490 05:126E: 0A           	asl	A
  6491 05:126F: 0A           	asl	A
  6492 05:1270: 85 01        	sta	<R0
  6493 05:1272: 18           	clc
  6494 05:1273: A9 xx xx     	lda	#<~~eventProcess
  6495 05:1276: 65 01        	adc	<R0
  6496 05:1278: 85 05        	sta	<R1
  6497 05:127A: B2 05        	lda	(<R1)
  6498 05:127C: 85 01        	sta	<R0
  6499 05:127E: A0 02 00     	ldy	#$2
  6500 05:1281: B1 05        	lda	(<R1),Y
  6501 05:1283: 85 03        	sta	<R0+2
  6502 05:1285: A0 06 00     	ldy	#$6
  6503 05:1288: B7 01        	lda	[<R0],Y
  6504 05:128A: AA           	tax
  6505 05:128B: A0 04 00     	ldy	#$4
  6506 05:128E: B7 01        	lda	[<R0],Y
  6507                        	xref	~~~lcal
  6508 05:1290: 22 xx xx xx  	jsl	~~~lcal
  6509                        ;
  6510                        ;			//k_debug_string("k_getevents @3
                    \r\n");
  Thu Dec  3 2020 22:25                                                Page 129


  6511                        ;
  6512                        ;			k_exec_set_current_process(NULL)
                    ;
  6513                        L10095:
  6514                        	.line	1627
  6515 05:1294: F4 00 00     	pea	#^$0
  6516 05:1297: F4 00 00     	pea	#<$0
  6517 05:129A: 22 xx xx xx  	jsl	~~k_exec_set_current_process
  6518                        ;		}
  6519                        	.line	1628
  6520                        ;
  6521                        ;		k_debug_pointer("k_attach_process_events
                    ::k_exec_set_current_process:",k_exec_get_current_process())
                    ;
  6522                        L10093:
  6523                        	.line	1630
  6524 05:129E: 22 xx xx xx  	jsl	~~k_exec_get_current_process
  6525 05:12A2: 85 01        	sta	<R0
  6526 05:12A4: 86 03        	stx	<R0+2
  6527 05:12A6: DA           	phx
  6528 05:12A7: 48           	pha
  6529 05:12A8: F4 xx xx     	pea	#^L175+108
  6530 05:12AB: F4 xx xx     	pea	#<L175+108
  6531 05:12AE: 22 xx xx xx  	jsl	~~k_debug_pointer
  6532                        ;	}
  6533                        	.line	1631
  6534                        ;	return 0;
  6535                        L10087:
  6536                        	.line	1632
  6537 05:12B2: A9 00 00     	lda	#$0
  6538                        L188:
  6539 05:12B5: A8           	tay
  6540 05:12B6: A5 1E        	lda	<L176+2
  6541 05:12B8: 85 26        	sta	<L176+2+8
  6542 05:12BA: A5 1D        	lda	<L176+1
  6543 05:12BC: 85 25        	sta	<L176+1+8
  6544 05:12BE: 2B           	pld
  6545 05:12BF: 3B           	tsc
  6546 05:12C0: 18           	clc
  6547 05:12C1: 69 24 00     	adc	#L176+8
  6548 05:12C4: 1B           	tcs
  6549 05:12C5: 98           	tya
  6550 05:12C6: 6B           	rtl
  6551                        ;}
  6552                        	.line	1633
  6553                        	.endblock	1633
  6554             0000001C   L176	equ	28
  6555             00000009   L177	equ	9
  6556 05:12C7:              	ends
  6557                        	efunc
  6558                        	.endfunc	1633,9,28
  6559                        	.line	1633
  6560                        	data
  6561                        L175:
  6562 00:0463: 45 6E 74 65  	db	$45,$6E,$74,$65,$72,$20,$6B,$5F,$61,$74,
                    $74,$61,$63,$68,$5F
       00:0467: 72 20 6B 5F 
       00:046B: 61 74 74 61 
  Thu Dec  3 2020 22:25                                                Page 130


       00:046F: 63 68 5F 
  6563 00:0472: 70 72 6F 63  	db	$70,$72,$6F,$63,$65,$73,$73,$5F,$65,$76,
                    $65,$6E,$74,$73,$0D
       00:0476: 65 73 73 5F 
       00:047A: 65 76 65 6E 
       00:047E: 74 73 0D 
  6564 00:0481: 0A 00 65 76  	db	$0A,$00,$65,$76,$65,$6E,$74,$50,$72,$6F,
                    $63,$65,$64,$75,$72
       00:0485: 65 6E 74 50 
       00:0489: 72 6F 63 65 
       00:048D: 64 75 72 
  6565 00:0490: 65 3A 00 09  	db	$65,$3A,$00,$09,$50,$72,$6F,$63,$65,$73,
                    $73,$3A,$00,$6B,$5F
       00:0494: 50 72 6F 63 
       00:0498: 65 73 73 3A 
       00:049C: 00 6B 5F 
  6566 00:049F: 61 74 74 61  	db	$61,$74,$74,$61,$63,$68,$5F,$70,$72,$6F,
                    $63,$65,$73,$73,$5F
       00:04A3: 63 68 5F 70 
       00:04A7: 72 6F 63 65 
       00:04AB: 73 73 5F 
  6567 00:04AE: 65 76 65 6E  	db	$65,$76,$65,$6E,$74,$73,$3A,$3A,$40,$69,
                    $6E,$64,$65,$78,$3A
       00:04B2: 74 73 3A 3A 
       00:04B6: 40 69 6E 64 
       00:04BA: 65 78 3A 
  6568 00:04BD: 00 6B 5F 67  	db	$00,$6B,$5F,$67,$65,$74,$65,$76,$65,$6E,
                    $74,$73,$20,$40,$31
       00:04C1: 65 74 65 76 
       00:04C5: 65 6E 74 73 
       00:04C9: 20 40 31 
  6569 00:04CC: 0D 0A 00 6B  	db	$0D,$0A,$00,$6B,$5F,$61,$74,$74,$61,$63,
                    $68,$5F,$70,$72,$6F
       00:04D0: 5F 61 74 74 
       00:04D4: 61 63 68 5F 
       00:04D8: 70 72 6F 
  6570 00:04DB: 63 65 73 73  	db	$63,$65,$73,$73,$5F,$65,$76,$65,$6E,$74,
                    $73,$3A,$3A,$6B,$5F
       00:04DF: 5F 65 76 65 
       00:04E3: 6E 74 73 3A 
       00:04E7: 3A 6B 5F 
  6571 00:04EA: 65 78 65 63  	db	$65,$78,$65,$63,$5F,$73,$65,$74,$5F,$63,
                    $75,$72,$72,$65,$6E
       00:04EE: 5F 73 65 74 
       00:04F2: 5F 63 75 72 
       00:04F6: 72 65 6E 
  6572 00:04F9: 74 5F 70 72  	db	$74,$5F,$70,$72,$6F,$63,$65,$73,$73,$3A,
                    $00
       00:04FD: 6F 63 65 73 
       00:0501: 73 3A 00 
  6573 00:0504:              	ends
  6574                        ;
  6575                        ;LPVOID k_alloc_message_arg(LPVOID data,UINT size)
  6576                        ;{
  6577                        	.line	1635
  6578                        	.line	1636
  6579                        	EVTMAN
  6580                        	xdef	~~k_alloc_message_arg
  Thu Dec  3 2020 22:25                                                Page 131


  6581                        	func
  6582                        	.function	1636
  6583                        ~~k_alloc_message_arg:
  6584                        	longa	on
  6585                        	longi	on
  6586 05:12C7: 3B           	tsc
  6587 05:12C8: 38           	sec
  6588 05:12C9: E9 04 00     	sbc	#L190
  6589 05:12CC: 1B           	tcs
  6590 05:12CD: 0B           	phd
  6591 05:12CE: 5B           	tcd
  6592             00000004   data_0	set	4
  6593             00000008   size_0	set	8
  6594                        	.block	1636
  6595                        ;	LPVOID ptr = NULL;
  6596                        ;
  6597                        ;	ptr = k_mem_allocate_heap(size);
  6598             00000000   ptr_1	set	0
  6599                        	.sym	ptr,0,129,1,32
  6600                        	.sym	data,4,129,6,32
  6601                        	.sym	size,8,16,6,16
  6602 05:12CF: 64 01        	stz	<L191+ptr_1
  6603 05:12D1: 64 03        	stz	<L191+ptr_1+2
  6604                        	.line	1639
  6605 05:12D3: D4 0C        	pei	<L190+size_0
  6606 05:12D5: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  6607 05:12D9: 85 01        	sta	<L191+ptr_1
  6608 05:12DB: 86 03        	stx	<L191+ptr_1+2
  6609                        ;	if(ptr!=NULL)
  6610                        	.line	1640
  6611                        ;	{
  6612 05:12DD: A5 01        	lda	<L191+ptr_1
  6613 05:12DF: 05 03        	ora	<L191+ptr_1+2
  6614 05:12E1: D0 03        	bne	L193
  6615 05:12E3: 82 0E 00     	brl	L10096
  6616                        L193:
  6617                        	.line	1641
  6618                        ;		memcpy(ptr,data,size);
  6619                        	.line	1642
  6620 05:12E6: D4 0C        	pei	<L190+size_0
  6621 05:12E8: D4 0A        	pei	<L190+data_0+2
  6622 05:12EA: D4 08        	pei	<L190+data_0
  6623 05:12EC: D4 03        	pei	<L191+ptr_1+2
  6624 05:12EE: D4 01        	pei	<L191+ptr_1
  6625 05:12F0: 22 xx xx xx  	jsl	~~memcpy
  6626                        ;	}
  6627                        	.line	1643
  6628                        ;	return ptr;
  6629                        L10096:
  6630                        	.line	1644
  6631 05:12F4: A6 03        	ldx	<L191+ptr_1+2
  6632 05:12F6: A5 01        	lda	<L191+ptr_1
  6633                        L194:
  6634 05:12F8: A8           	tay
  6635 05:12F9: A5 06        	lda	<L190+2
  6636 05:12FB: 85 0C        	sta	<L190+2+6
  6637 05:12FD: A5 05        	lda	<L190+1
  6638 05:12FF: 85 0B        	sta	<L190+1+6
  Thu Dec  3 2020 22:25                                                Page 132


  6639 05:1301: 2B           	pld
  6640 05:1302: 3B           	tsc
  6641 05:1303: 18           	clc
  6642 05:1304: 69 0A 00     	adc	#L190+6
  6643 05:1307: 1B           	tcs
  6644 05:1308: 98           	tya
  6645 05:1309: 6B           	rtl
  6646                        ;}
  6647                        	.line	1645
  6648                        	.endblock	1645
  6649             00000004   L190	equ	4
  6650             00000001   L191	equ	1
  6651 05:130A:              	ends
  6652                        	efunc
  6653                        	.endfunc	1645,1,4
  6654                        	.line	1645
  6655                        ;
  6656                        ;VOID k_dealloc_message_arg(LPVOID data)
  6657                        ;{
  6658                        	.line	1647
  6659                        	.line	1648
  6660                        	EVTMAN
  6661                        	xdef	~~k_dealloc_message_arg
  6662                        	func
  6663                        	.function	1648
  6664                        ~~k_dealloc_message_arg:
  6665                        	longa	on
  6666                        	longi	on
  6667 05:130A: 3B           	tsc
  6668 05:130B: 38           	sec
  6669 05:130C: E9 00 00     	sbc	#L195
  6670 05:130F: 1B           	tcs
  6671 05:1310: 0B           	phd
  6672 05:1311: 5B           	tcd
  6673             00000004   data_0	set	4
  6674                        	.block	1648
  6675                        ;	if(data!=NULL)
  6676                        	.sym	data,4,129,6,32
  6677                        	.line	1649
  6678                        ;		k_mem_deallocate_heap(data);
  6679 05:1312: A5 04        	lda	<L195+data_0
  6680 05:1314: 05 06        	ora	<L195+data_0+2
  6681 05:1316: D0 03        	bne	L198
  6682 05:1318: 82 0B 00     	brl	L10097
  6683                        L198:
  6684                        	.line	1650
  6685 05:131B: D4 06        	pei	<L195+data_0+2
  6686 05:131D: D4 04        	pei	<L195+data_0
  6687 05:131F: 22 xx xx xx  	jsl	~~k_mem_deallocate_heap
  6688                        ;	else
  6689 05:1323: 82 1B 00     	brl	L10098
  6690                        L10097:
  6691                        ;		k_exec_throw_exception(THIS_MODULE,0x000
                    10001,"Dealloc of NULL reference",-1);
  6692                        	.line	1652
  6693 05:1326: F4 FF FF     	pea	#<$ffffffff
  6694 05:1329: F4 xx xx     	pea	#^L189
  6695 05:132C: F4 xx xx     	pea	#<L189
  Thu Dec  3 2020 22:25                                                Page 133


  6696 05:132F: F4 01 00     	pea	#^$10001
  6697 05:1332: F4 01 00     	pea	#<$10001
  6698 05:1335: AD xx xx     	lda	|~~THIS_MODULE+2
  6699 05:1338: 48           	pha
  6700 05:1339: AD xx xx     	lda	|~~THIS_MODULE
  6701 05:133C: 48           	pha
  6702 05:133D: 22 xx xx xx  	jsl	~~k_exec_throw_exception
  6703                        L10098:
  6704                        ;}
  6705                        	.line	1653
  6706                        L199:
  6707 05:1341: A5 02        	lda	<L195+2
  6708 05:1343: 85 06        	sta	<L195+2+4
  6709 05:1345: A5 01        	lda	<L195+1
  6710 05:1347: 85 05        	sta	<L195+1+4
  6711 05:1349: 2B           	pld
  6712 05:134A: 3B           	tsc
  6713 05:134B: 18           	clc
  6714 05:134C: 69 04 00     	adc	#L195+4
  6715 05:134F: 1B           	tcs
  6716 05:1350: 6B           	rtl
  6717                        	.endblock	1653
  6718             00000000   L195	equ	0
  6719             00000001   L196	equ	1
  6720 05:1351:              	ends
  6721                        	efunc
  6722                        	.endfunc	1653,1,0
  6723                        	.line	1653
  6724                        	data
  6725                        L189:
  6726 00:0504: 44 65 61 6C  	db	$44,$65,$61,$6C,$6C,$6F,$63,$20,$6F,$66,
                    $20,$4E,$55,$4C,$4C
       00:0508: 6C 6F 63 20 
       00:050C: 6F 66 20 4E 
       00:0510: 55 4C 4C 
  6727 00:0513: 20 72 65 66  	db	$20,$72,$65,$66,$65,$72,$65,$6E,$63,$65,
                    $00
       00:0517: 65 72 65 6E 
       00:051B: 63 65 00 
  6728 00:051E:              	ends
  6729                        ;
  6730                        ;
  6731                        ;BOOL k_send_message(LPVOID queueName,MSGTYPE msgT
                    ype,LPVOID pmsgData,UINT size)
  6732                        ;{
  6733                        	.line	1656
  6734                        	.line	1657
  6735                        	EVTMAN
  6736                        	xdef	~~k_send_message
  6737                        	func
  6738                        	.function	1657
  6739                        ~~k_send_message:
  6740                        	longa	on
  6741                        	longi	on
  6742 05:1351: 3B           	tsc
  6743 05:1352: 38           	sec
  6744 05:1353: E9 09 00     	sbc	#L201
  6745 05:1356: 1B           	tcs
  Thu Dec  3 2020 22:25                                                Page 134


  6746 05:1357: 0B           	phd
  6747 05:1358: 5B           	tcd
  6748             00000004   queueName_0	set	4
  6749             00000008   msgType_0	set	8
  6750             0000000A   pmsgData_0	set	10
  6751             0000000E   size_0	set	14
  6752                        	.block	1657
  6753                        ;	BOOL bRet = FALSE;
  6754                        ;	PFXOSMESSAGE pmsg = NULL;
  6755                        ;
  6756                        ;	//k_debug_integer("k_send_message::msgType:",msg
                    Type);
  6757                        ;
  6758                        ;	pmsg = (PFXOSMESSAGE)k_mem_allocate_heap(sizeof(
                    FXOSMESSAGE));
  6759             00000000   bRet_1	set	0
  6760             00000001   pmsg_1	set	1
  6761                        	.sym	bRet,0,14,1,8
  6762                        	.sym	pmsg,1,138,1,32,16
  6763                        	.sym	queueName,4,129,6,32
  6764                        	.sym	msgType,8,16,6,16
  6765                        	.sym	pmsgData,10,129,6,32
  6766                        	.sym	size,14,16,6,16
  6767 05:1359: E2 20        	sep	#$20
  6768                        	longa	off
  6769 05:135B: 64 05        	stz	<L202+bRet_1
  6770 05:135D: C2 20        	rep	#$20
  6771                        	longa	on
  6772 05:135F: 64 06        	stz	<L202+pmsg_1
  6773 05:1361: 64 08        	stz	<L202+pmsg_1+2
  6774                        	.line	1663
  6775 05:1363: F4 26 00     	pea	#<$26
  6776 05:1366: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  6777 05:136A: 85 06        	sta	<L202+pmsg_1
  6778 05:136C: 86 08        	stx	<L202+pmsg_1+2
  6779                        ;	if(pmsg)
  6780                        	.line	1664
  6781                        ;	{
  6782 05:136E: A5 06        	lda	<L202+pmsg_1
  6783 05:1370: 05 08        	ora	<L202+pmsg_1+2
  6784 05:1372: D0 03        	bne	L204
  6785 05:1374: 82 F0 00     	brl	L10099
  6786                        L204:
  6787                        	.line	1665
  6788                        ;		pmsg->type = msgType;
  6789                        	.line	1666
  6790 05:1377: A5 11        	lda	<L201+msgType_0
  6791 05:1379: A0 08 00     	ldy	#$8
  6792 05:137C: 97 06        	sta	[<L202+pmsg_1],Y
  6793                        ;		pmsg->pheap = NULL;
  6794                        	.line	1667
  6795 05:137E: A9 00 00     	lda	#$0
  6796 05:1381: A0 0E 00     	ldy	#$e
  6797 05:1384: 97 06        	sta	[<L202+pmsg_1],Y
  6798 05:1386: A9 00 00     	lda	#$0
  6799 05:1389: A0 10 00     	ldy	#$10
  6800 05:138C: 97 06        	sta	[<L202+pmsg_1],Y
  6801                        ;		pmsg->src  = k_exec_get_current_process(
  Thu Dec  3 2020 22:25                                                Page 135


                    )->procId;
  6802                        	.line	1668
  6803 05:138E: 22 xx xx xx  	jsl	~~k_exec_get_current_process
  6804 05:1392: 85 01        	sta	<R0
  6805 05:1394: 86 03        	stx	<R0+2
  6806 05:1396: A0 02 00     	ldy	#$2
  6807 05:1399: B7 01        	lda	[<R0],Y
  6808 05:139B: 87 06        	sta	[<L202+pmsg_1]
  6809 05:139D: A0 04 00     	ldy	#$4
  6810 05:13A0: B7 01        	lda	[<R0],Y
  6811 05:13A2: A0 02 00     	ldy	#$2
  6812 05:13A5: 97 06        	sta	[<L202+pmsg_1],Y
  6813                        ;		pmsg->dest = FX_MSG_DEFAULT;
  6814                        	.line	1669
  6815 05:13A7: A9 FF FF     	lda	#$ffff
  6816 05:13AA: A0 04 00     	ldy	#$4
  6817 05:13AD: 97 06        	sta	[<L202+pmsg_1],Y
  6818 05:13AF: A9 FF FF     	lda	#$ffff
  6819 05:13B2: A0 06 00     	ldy	#$6
  6820 05:13B5: 97 06        	sta	[<L202+pmsg_1],Y
  6821                        ;
  6822                        ;		if(queueName)
  6823                        	.line	1671
  6824                        ;		{
  6825 05:13B7: A5 0D        	lda	<L201+queueName_0
  6826 05:13B9: 05 0F        	ora	<L201+queueName_0+2
  6827 05:13BB: D0 03        	bne	L205
  6828 05:13BD: 82 24 00     	brl	L10100
  6829                        L205:
  6830                        	.line	1672
  6831                        ;			pmsg->dest = ((PFXPROCESS)queueN
                    ame)->procId;
  6832                        	.line	1673
  6833 05:13C0: A0 02 00     	ldy	#$2
  6834 05:13C3: B7 0D        	lda	[<L201+queueName_0],Y
  6835 05:13C5: A0 04 00     	ldy	#$4
  6836 05:13C8: 97 06        	sta	[<L202+pmsg_1],Y
  6837 05:13CA: A0 04 00     	ldy	#$4
  6838 05:13CD: B7 0D        	lda	[<L201+queueName_0],Y
  6839 05:13CF: A0 06 00     	ldy	#$6
  6840 05:13D2: 97 06        	sta	[<L202+pmsg_1],Y
  6841                        ;			k_debug_integer("k_send_message:
                    :DESTINATION:",pmsg->dest);
  6842                        	.line	1674
  6843 05:13D4: A0 04 00     	ldy	#$4
  6844 05:13D7: B7 06        	lda	[<L202+pmsg_1],Y
  6845 05:13D9: 48           	pha
  6846 05:13DA: F4 xx xx     	pea	#^L200
  6847 05:13DD: F4 xx xx     	pea	#<L200
  6848 05:13E0: 22 xx xx xx  	jsl	~~k_debug_integer
  6849                        ;		}
  6850                        	.line	1675
  6851                        ;
  6852                        ;		if(size == -1)
  6853                        L10100:
  6854                        	.line	1677
  6855                        ;		{
  6856 05:13E4: A5 17        	lda	<L201+size_0
  Thu Dec  3 2020 22:25                                                Page 136


  6857 05:13E6: C9 FF FF     	cmp	#<$ffffffff
  6858 05:13E9: F0 03        	beq	L206
  6859 05:13EB: 82 27 00     	brl	L10101
  6860                        L206:
  6861                        	.line	1678
  6862                        ;			pmsg->pheap = pmsgData;
  6863                        	.line	1679
  6864 05:13EE: A5 13        	lda	<L201+pmsgData_0
  6865 05:13F0: A0 0E 00     	ldy	#$e
  6866 05:13F3: 97 06        	sta	[<L202+pmsg_1],Y
  6867 05:13F5: A5 15        	lda	<L201+pmsgData_0+2
  6868 05:13F7: A0 10 00     	ldy	#$10
  6869 05:13FA: 97 06        	sta	[<L202+pmsg_1],Y
  6870                        ;			k_debug_pointer("k_send_message:
                    :SPECIALDATA:",pmsg->pheap);
  6871                        	.line	1680
  6872 05:13FC: A0 10 00     	ldy	#$10
  6873 05:13FF: B7 06        	lda	[<L202+pmsg_1],Y
  6874 05:1401: 48           	pha
  6875 05:1402: A0 0E 00     	ldy	#$e
  6876 05:1405: B7 06        	lda	[<L202+pmsg_1],Y
  6877 05:1407: 48           	pha
  6878 05:1408: F4 xx xx     	pea	#^L200+29
  6879 05:140B: F4 xx xx     	pea	#<L200+29
  6880 05:140E: 22 xx xx xx  	jsl	~~k_debug_pointer
  6881                        ;		}
  6882                        	.line	1681
  6883                        ;		else
  6884 05:1412: 82 42 00     	brl	L10102
  6885                        L10101:
  6886                        ;		{
  6887                        	.line	1683
  6888                        ;			if(size > MAX_FXMSG_DATA)
  6889                        	.line	1684
  6890                        ;				size = MAX_FXMSG_DATA;
  6891 05:1415: A9 10 00     	lda	#$10
  6892 05:1418: C5 17        	cmp	<L201+size_0
  6893 05:141A: 90 03        	bcc	L207
  6894 05:141C: 82 05 00     	brl	L10103
  6895                        L207:
  6896                        	.line	1685
  6897 05:141F: A9 10 00     	lda	#$10
  6898 05:1422: 85 17        	sta	<L201+size_0
  6899                        ;
  6900                        ;			if(pmsgData)
  6901                        L10103:
  6902                        	.line	1687
  6903                        ;				pmsg->pheap = k_alloc_me
                    ssage_arg(pmsgData,size);
  6904 05:1424: A5 13        	lda	<L201+pmsgData_0
  6905 05:1426: 05 15        	ora	<L201+pmsgData_0+2
  6906 05:1428: D0 03        	bne	L208
  6907 05:142A: 82 1F 00     	brl	L10104
  6908                        L208:
  6909                        	.line	1688
  6910 05:142D: D4 17        	pei	<L201+size_0
  6911 05:142F: D4 15        	pei	<L201+pmsgData_0+2
  6912 05:1431: D4 13        	pei	<L201+pmsgData_0
  Thu Dec  3 2020 22:25                                                Page 137


  6913 05:1433: 22 C7 12 05  	jsl	~~k_alloc_message_arg
  6914 05:1437: 85 01        	sta	<R0
  6915 05:1439: 86 03        	stx	<R0+2
  6916 05:143B: A5 01        	lda	<R0
  6917 05:143D: A0 0E 00     	ldy	#$e
  6918 05:1440: 97 06        	sta	[<L202+pmsg_1],Y
  6919 05:1442: A5 03        	lda	<R0+2
  6920 05:1444: A0 10 00     	ldy	#$10
  6921 05:1447: 97 06        	sta	[<L202+pmsg_1],Y
  6922                        ;			else
  6923 05:1449: 82 0B 00     	brl	L10105
  6924                        L10104:
  6925                        ;				pmsg->data[0] = 0;
  6926                        	.line	1690
  6927 05:144C: E2 20        	sep	#$20
  6928                        	longa	off
  6929 05:144E: A9 00        	lda	#$0
  6930 05:1450: A0 16 00     	ldy	#$16
  6931 05:1453: 97 06        	sta	[<L202+pmsg_1],Y
  6932 05:1455: C2 20        	rep	#$20
  6933                        	longa	on
  6934                        L10105:
  6935                        ;		}
  6936                        	.line	1691
  6937                        L10102:
  6938                        ;
  6939                        ;		k_enqueue_with_lock(_k_eventQueue,pmsg);
  6940                        	.line	1693
  6941 05:1457: D4 08        	pei	<L202+pmsg_1+2
  6942 05:1459: D4 06        	pei	<L202+pmsg_1
  6943 05:145B: AD xx xx     	lda	|~~_k_eventQueue+2
  6944 05:145E: 48           	pha
  6945 05:145F: AD xx xx     	lda	|~~_k_eventQueue
  6946 05:1462: 48           	pha
  6947 05:1463: 22 xx xx xx  	jsl	~~k_enqueue_with_lock
  6948                        ;	}
  6949                        	.line	1694
  6950                        ;
  6951                        ;
  6952                        ;	//k_debug_string("k_send_message::exit\r\n");
  6953                        ;
  6954                        ;	return bRet;
  6955                        L10099:
  6956                        	.line	1699
  6957 05:1467: A5 05        	lda	<L202+bRet_1
  6958 05:1469: 29 FF 00     	and	#$ff
  6959                        L209:
  6960 05:146C: A8           	tay
  6961 05:146D: A5 0B        	lda	<L201+2
  6962 05:146F: 85 17        	sta	<L201+2+12
  6963 05:1471: A5 0A        	lda	<L201+1
  6964 05:1473: 85 16        	sta	<L201+1+12
  6965 05:1475: 2B           	pld
  6966 05:1476: 3B           	tsc
  6967 05:1477: 18           	clc
  6968 05:1478: 69 15 00     	adc	#L201+12
  6969 05:147B: 1B           	tcs
  6970 05:147C: 98           	tya
  Thu Dec  3 2020 22:25                                                Page 138


  6971 05:147D: 6B           	rtl
  6972                        ;}
  6973                        	.line	1700
  6974                        	.endblock	1700
  6975             00000009   L201	equ	9
  6976             00000005   L202	equ	5
  6977 05:147E:              	ends
  6978                        	efunc
  6979                        	.endfunc	1700,5,9
  6980                        	.line	1700
  6981                        	data
  6982                        L200:
  6983 00:051E: 6B 5F 73 65  	db	$6B,$5F,$73,$65,$6E,$64,$5F,$6D,$65,$73,
                    $73,$61,$67,$65,$3A
       00:0522: 6E 64 5F 6D 
       00:0526: 65 73 73 61 
       00:052A: 67 65 3A 
  6984 00:052D: 3A 44 45 53  	db	$3A,$44,$45,$53,$54,$49,$4E,$41,$54,$49,
                    $4F,$4E,$3A,$00,$6B
       00:0531: 54 49 4E 41 
       00:0535: 54 49 4F 4E 
       00:0539: 3A 00 6B 
  6985 00:053C: 5F 73 65 6E  	db	$5F,$73,$65,$6E,$64,$5F,$6D,$65,$73,$73,
                    $61,$67,$65,$3A,$3A
       00:0540: 64 5F 6D 65 
       00:0544: 73 73 61 67 
       00:0548: 65 3A 3A 
  6986 00:054B: 53 50 45 43  	db	$53,$50,$45,$43,$49,$41,$4C,$44,$41,$54,
                    $41,$3A,$00
       00:054F: 49 41 4C 44 
       00:0553: 41 54 41 3A 
       00:0557: 00 
  6987 00:0558:              	ends
  6988                        ;
  6989                        ;
  6990                        ;BOOL k_send_window_message(HWND hWnd,MSGTYPE msgT
                    ype,LPVOID pmsgData,UINT size)
  6991                        ;{
  6992                        	.line	1703
  6993                        	.line	1704
  6994                        	EVTMAN
  6995                        	xdef	~~k_send_window_message
  6996                        	func
  6997                        	.function	1704
  6998                        ~~k_send_window_message:
  6999                        	longa	on
  7000                        	longi	on
  7001 05:147E: 3B           	tsc
  7002 05:147F: 38           	sec
  7003 05:1480: E9 09 00     	sbc	#L211
  7004 05:1483: 1B           	tcs
  7005 05:1484: 0B           	phd
  7006 05:1485: 5B           	tcd
  7007             00000004   hWnd_0	set	4
  7008             00000008   msgType_0	set	8
  7009             0000000A   pmsgData_0	set	10
  7010             0000000E   size_0	set	14
  7011                        	.block	1704
  Thu Dec  3 2020 22:25                                                Page 139


  7012                        ;	BOOL bRet = FALSE;
  7013                        ;	PFXOSMESSAGE pmsg = NULL;
  7014                        ;
  7015                        ;	//k_debug_pointer("k_send_window_message::hWnd:"
                    ,hWnd);
  7016                        ;	//k_debug_integer("k_send_window_message::msgTyp
                    e:",msgType);
  7017                        ;
  7018                        ;	if(hWnd)
  7019             00000000   bRet_1	set	0
  7020             00000001   pmsg_1	set	1
  7021                        	.sym	bRet,0,14,1,8
  7022                        	.sym	pmsg,1,138,1,32,16
  7023                        	.sym	hWnd,4,129,6,32
  7024                        	.sym	msgType,8,16,6,16
  7025                        	.sym	pmsgData,10,129,6,32
  7026                        	.sym	size,14,16,6,16
  7027 05:1486: E2 20        	sep	#$20
  7028                        	longa	off
  7029 05:1488: 64 05        	stz	<L212+bRet_1
  7030 05:148A: C2 20        	rep	#$20
  7031                        	longa	on
  7032 05:148C: 64 06        	stz	<L212+pmsg_1
  7033 05:148E: 64 08        	stz	<L212+pmsg_1+2
  7034                        	.line	1711
  7035                        ;	{
  7036 05:1490: A5 0D        	lda	<L211+hWnd_0
  7037 05:1492: 05 0F        	ora	<L211+hWnd_0+2
  7038 05:1494: D0 03        	bne	L214
  7039 05:1496: 82 CF 00     	brl	L10106
  7040                        L214:
  7041                        	.line	1712
  7042                        ;		pmsg = (PFXOSMESSAGE)k_mem_allocate_heap
                    (sizeof(FXOSMESSAGE));
  7043                        	.line	1713
  7044 05:1499: F4 26 00     	pea	#<$26
  7045 05:149C: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  7046 05:14A0: 85 06        	sta	<L212+pmsg_1
  7047 05:14A2: 86 08        	stx	<L212+pmsg_1+2
  7048                        ;		if(pmsg)
  7049                        	.line	1714
  7050                        ;		{
  7051 05:14A4: A5 06        	lda	<L212+pmsg_1
  7052 05:14A6: 05 08        	ora	<L212+pmsg_1+2
  7053 05:14A8: D0 03        	bne	L215
  7054 05:14AA: 82 BB 00     	brl	L10107
  7055                        L215:
  7056                        	.line	1715
  7057                        ;			pmsg->type = msgType;
  7058                        	.line	1716
  7059 05:14AD: A5 11        	lda	<L211+msgType_0
  7060 05:14AF: A0 08 00     	ldy	#$8
  7061 05:14B2: 97 06        	sta	[<L212+pmsg_1],Y
  7062                        ;			pmsg->pheap = NULL;
  7063                        	.line	1717
  7064 05:14B4: A9 00 00     	lda	#$0
  7065 05:14B7: A0 0E 00     	ldy	#$e
  7066 05:14BA: 97 06        	sta	[<L212+pmsg_1],Y
  Thu Dec  3 2020 22:25                                                Page 140


  7067 05:14BC: A9 00 00     	lda	#$0
  7068 05:14BF: A0 10 00     	ldy	#$10
  7069 05:14C2: 97 06        	sta	[<L212+pmsg_1],Y
  7070                        ;			pmsg->src  = k_exec_get_current_
                    process()->procId;
  7071                        	.line	1718
  7072 05:14C4: 22 xx xx xx  	jsl	~~k_exec_get_current_process
  7073 05:14C8: 85 01        	sta	<R0
  7074 05:14CA: 86 03        	stx	<R0+2
  7075 05:14CC: A0 02 00     	ldy	#$2
  7076 05:14CF: B7 01        	lda	[<R0],Y
  7077 05:14D1: 87 06        	sta	[<L212+pmsg_1]
  7078 05:14D3: A0 04 00     	ldy	#$4
  7079 05:14D6: B7 01        	lda	[<R0],Y
  7080 05:14D8: A0 02 00     	ldy	#$2
  7081 05:14DB: 97 06        	sta	[<L212+pmsg_1],Y
  7082                        ;			pmsg->dest = FX_MSG_DEFAULT;
  7083                        	.line	1719
  7084 05:14DD: A9 FF FF     	lda	#$ffff
  7085 05:14E0: A0 04 00     	ldy	#$4
  7086 05:14E3: 97 06        	sta	[<L212+pmsg_1],Y
  7087 05:14E5: A9 FF FF     	lda	#$ffff
  7088 05:14E8: A0 06 00     	ldy	#$6
  7089 05:14EB: 97 06        	sta	[<L212+pmsg_1],Y
  7090                        ;			pmsg->hwnd = hWnd;
  7091                        	.line	1720
  7092 05:14ED: A5 0D        	lda	<L211+hWnd_0
  7093 05:14EF: A0 0A 00     	ldy	#$a
  7094 05:14F2: 97 06        	sta	[<L212+pmsg_1],Y
  7095 05:14F4: A5 0F        	lda	<L211+hWnd_0+2
  7096 05:14F6: A0 0C 00     	ldy	#$c
  7097 05:14F9: 97 06        	sta	[<L212+pmsg_1],Y
  7098                        ;
  7099                        ;			if(size == -1)
  7100                        	.line	1722
  7101                        ;			{
  7102 05:14FB: A5 17        	lda	<L211+size_0
  7103 05:14FD: C9 FF FF     	cmp	#<$ffffffff
  7104 05:1500: F0 03        	beq	L216
  7105 05:1502: 82 11 00     	brl	L10108
  7106                        L216:
  7107                        	.line	1723
  7108                        ;				pmsg->pheap = pmsgData;
  7109                        	.line	1724
  7110 05:1505: A5 13        	lda	<L211+pmsgData_0
  7111 05:1507: A0 0E 00     	ldy	#$e
  7112 05:150A: 97 06        	sta	[<L212+pmsg_1],Y
  7113 05:150C: A5 15        	lda	<L211+pmsgData_0+2
  7114 05:150E: A0 10 00     	ldy	#$10
  7115 05:1511: 97 06        	sta	[<L212+pmsg_1],Y
  7116                        ;				//k_debug_pointer("k_sen
                    d_message::SPECIALDATA:",pmsg->pheap);
  7117                        ;			}
  7118                        	.line	1726
  7119                        ;			else
  7120 05:1513: 82 42 00     	brl	L10109
  7121                        L10108:
  7122                        ;			{
  Thu Dec  3 2020 22:25                                                Page 141


  7123                        	.line	1728
  7124                        ;				if(size > MAX_FXMSG_DATA
                    )
  7125                        	.line	1729
  7126                        ;					size = MAX_FXMSG
                    _DATA;
  7127 05:1516: A9 10 00     	lda	#$10
  7128 05:1519: C5 17        	cmp	<L211+size_0
  7129 05:151B: 90 03        	bcc	L217
  7130 05:151D: 82 05 00     	brl	L10110
  7131                        L217:
  7132                        	.line	1730
  7133 05:1520: A9 10 00     	lda	#$10
  7134 05:1523: 85 17        	sta	<L211+size_0
  7135                        ;
  7136                        ;				if(pmsgData)
  7137                        L10110:
  7138                        	.line	1732
  7139                        ;					pmsg->pheap = k_
                    alloc_message_arg(pmsgData,size);
  7140 05:1525: A5 13        	lda	<L211+pmsgData_0
  7141 05:1527: 05 15        	ora	<L211+pmsgData_0+2
  7142 05:1529: D0 03        	bne	L218
  7143 05:152B: 82 1F 00     	brl	L10111
  7144                        L218:
  7145                        	.line	1733
  7146 05:152E: D4 17        	pei	<L211+size_0
  7147 05:1530: D4 15        	pei	<L211+pmsgData_0+2
  7148 05:1532: D4 13        	pei	<L211+pmsgData_0
  7149 05:1534: 22 C7 12 05  	jsl	~~k_alloc_message_arg
  7150 05:1538: 85 01        	sta	<R0
  7151 05:153A: 86 03        	stx	<R0+2
  7152 05:153C: A5 01        	lda	<R0
  7153 05:153E: A0 0E 00     	ldy	#$e
  7154 05:1541: 97 06        	sta	[<L212+pmsg_1],Y
  7155 05:1543: A5 03        	lda	<R0+2
  7156 05:1545: A0 10 00     	ldy	#$10
  7157 05:1548: 97 06        	sta	[<L212+pmsg_1],Y
  7158                        ;				else
  7159 05:154A: 82 0B 00     	brl	L10112
  7160                        L10111:
  7161                        ;					pmsg->data[0] = 
                    0;
  7162                        	.line	1735
  7163 05:154D: E2 20        	sep	#$20
  7164                        	longa	off
  7165 05:154F: A9 00        	lda	#$0
  7166 05:1551: A0 16 00     	ldy	#$16
  7167 05:1554: 97 06        	sta	[<L212+pmsg_1],Y
  7168 05:1556: C2 20        	rep	#$20
  7169                        	longa	on
  7170                        L10112:
  7171                        ;			}
  7172                        	.line	1736
  7173                        L10109:
  7174                        ;
  7175                        ;			k_enqueue_with_lock(_k_eventQueu
                    e,pmsg);
  Thu Dec  3 2020 22:25                                                Page 142


  7176                        	.line	1738
  7177 05:1558: D4 08        	pei	<L212+pmsg_1+2
  7178 05:155A: D4 06        	pei	<L212+pmsg_1
  7179 05:155C: AD xx xx     	lda	|~~_k_eventQueue+2
  7180 05:155F: 48           	pha
  7181 05:1560: AD xx xx     	lda	|~~_k_eventQueue
  7182 05:1563: 48           	pha
  7183 05:1564: 22 xx xx xx  	jsl	~~k_enqueue_with_lock
  7184                        ;		}
  7185                        	.line	1739
  7186                        ;	}
  7187                        L10107:
  7188                        	.line	1740
  7189                        ;
  7190                        ;	//k_debug_string("k_send_message::exit\r\n");
  7191                        ;
  7192                        ;	return bRet;
  7193                        L10106:
  7194                        	.line	1744
  7195 05:1568: A5 05        	lda	<L212+bRet_1
  7196 05:156A: 29 FF 00     	and	#$ff
  7197                        L219:
  7198 05:156D: A8           	tay
  7199 05:156E: A5 0B        	lda	<L211+2
  7200 05:1570: 85 17        	sta	<L211+2+12
  7201 05:1572: A5 0A        	lda	<L211+1
  7202 05:1574: 85 16        	sta	<L211+1+12
  7203 05:1576: 2B           	pld
  7204 05:1577: 3B           	tsc
  7205 05:1578: 18           	clc
  7206 05:1579: 69 15 00     	adc	#L211+12
  7207 05:157C: 1B           	tcs
  7208 05:157D: 98           	tya
  7209 05:157E: 6B           	rtl
  7210                        ;}
  7211                        	.line	1745
  7212                        	.endblock	1745
  7213             00000009   L211	equ	9
  7214             00000005   L212	equ	5
  7215 05:157F:              	ends
  7216                        	efunc
  7217                        	.endfunc	1745,5,9
  7218                        	.line	1745
  7219                        ;
  7220                        ;BOOL k_send_command_message(HWND hWnd,MSGTYPE msg
                    Type,UINT cmdCId,UINT cmdMId,ULONG pData1,ULONG pData2)
  7221                        ;{
  7222                        	.line	1747
  7223                        	.line	1748
  7224                        	EVTMAN
  7225                        	xdef	~~k_send_command_message
  7226                        	func
  7227                        	.function	1748
  7228                        ~~k_send_command_message:
  7229                        	longa	on
  7230                        	longi	on
  7231 05:157F: 3B           	tsc
  7232 05:1580: 38           	sec
  Thu Dec  3 2020 22:25                                                Page 143


  7233 05:1581: E9 09 00     	sbc	#L220
  7234 05:1584: 1B           	tcs
  7235 05:1585: 0B           	phd
  7236 05:1586: 5B           	tcd
  7237             00000004   hWnd_0	set	4
  7238             00000008   msgType_0	set	8
  7239             0000000A   cmdCId_0	set	10
  7240             0000000C   cmdMId_0	set	12
  7241             0000000E   pData1_0	set	14
  7242             00000012   pData2_0	set	18
  7243                        	.block	1748
  7244                        ;	BOOL bRet = FALSE;
  7245                        ;	PFXCMDMESSAGE pmsg = NULL;
  7246                        ;
  7247                        ;	//k_debug_pointer("k_send_command_message::hWnd:
                    ",hWnd);
  7248                        ;	//k_debug_long("k_send_command_message::pData1:"
                    ,pData1);
  7249                        ;	//k_debug_integer("k_send_window_message::msgTyp
                    e:",msgType);
  7250                        ;
  7251                        ;	if(hWnd)
  7252             00000000   bRet_1	set	0
  7253             00000001   pmsg_1	set	1
  7254                        	.sym	bRet,0,14,1,8
  7255                        	.sym	pmsg,1,138,1,32,17
  7256                        	.sym	hWnd,4,129,6,32
  7257                        	.sym	msgType,8,16,6,16
  7258                        	.sym	cmdCId,10,16,6,16
  7259                        	.sym	cmdMId,12,16,6,16
  7260                        	.sym	pData1,14,18,6,32
  7261                        	.sym	pData2,18,18,6,32
  7262 05:1587: E2 20        	sep	#$20
  7263                        	longa	off
  7264 05:1589: 64 05        	stz	<L221+bRet_1
  7265 05:158B: C2 20        	rep	#$20
  7266                        	longa	on
  7267 05:158D: 64 06        	stz	<L221+pmsg_1
  7268 05:158F: 64 08        	stz	<L221+pmsg_1+2
  7269                        	.line	1756
  7270                        ;	{
  7271 05:1591: A5 0D        	lda	<L220+hWnd_0
  7272 05:1593: 05 0F        	ora	<L220+hWnd_0+2
  7273 05:1595: D0 03        	bne	L223
  7274 05:1597: 82 AC 00     	brl	L10113
  7275                        L223:
  7276                        	.line	1757
  7277                        ;		pmsg = (PFXCMDMESSAGE)k_mem_allocate_hea
                    p(sizeof(FXCMDMESSAGE));
  7278                        	.line	1758
  7279 05:159A: F4 26 00     	pea	#<$26
  7280 05:159D: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  7281 05:15A1: 85 06        	sta	<L221+pmsg_1
  7282 05:15A3: 86 08        	stx	<L221+pmsg_1+2
  7283                        ;		if(pmsg)
  7284                        	.line	1759
  7285                        ;		{
  7286 05:15A5: A5 06        	lda	<L221+pmsg_1
  Thu Dec  3 2020 22:25                                                Page 144


  7287 05:15A7: 05 08        	ora	<L221+pmsg_1+2
  7288 05:15A9: D0 03        	bne	L224
  7289 05:15AB: 82 98 00     	brl	L10114
  7290                        L224:
  7291                        	.line	1760
  7292                        ;			pmsg->type = msgType;
  7293                        	.line	1761
  7294 05:15AE: A5 11        	lda	<L220+msgType_0
  7295 05:15B0: A0 08 00     	ldy	#$8
  7296 05:15B3: 97 06        	sta	[<L221+pmsg_1],Y
  7297                        ;			pmsg->pheap = NULL;
  7298                        	.line	1762
  7299 05:15B5: A9 00 00     	lda	#$0
  7300 05:15B8: A0 0E 00     	ldy	#$e
  7301 05:15BB: 97 06        	sta	[<L221+pmsg_1],Y
  7302 05:15BD: A9 00 00     	lda	#$0
  7303 05:15C0: A0 10 00     	ldy	#$10
  7304 05:15C3: 97 06        	sta	[<L221+pmsg_1],Y
  7305                        ;			pmsg->src  = k_exec_get_current_
                    process()->procId;
  7306                        	.line	1763
  7307 05:15C5: 22 xx xx xx  	jsl	~~k_exec_get_current_process
  7308 05:15C9: 85 01        	sta	<R0
  7309 05:15CB: 86 03        	stx	<R0+2
  7310 05:15CD: A0 02 00     	ldy	#$2
  7311 05:15D0: B7 01        	lda	[<R0],Y
  7312 05:15D2: 87 06        	sta	[<L221+pmsg_1]
  7313 05:15D4: A0 04 00     	ldy	#$4
  7314 05:15D7: B7 01        	lda	[<R0],Y
  7315 05:15D9: A0 02 00     	ldy	#$2
  7316 05:15DC: 97 06        	sta	[<L221+pmsg_1],Y
  7317                        ;			pmsg->dest = FX_MSG_DEFAULT;
  7318                        	.line	1764
  7319 05:15DE: A9 FF FF     	lda	#$ffff
  7320 05:15E1: A0 04 00     	ldy	#$4
  7321 05:15E4: 97 06        	sta	[<L221+pmsg_1],Y
  7322 05:15E6: A9 FF FF     	lda	#$ffff
  7323 05:15E9: A0 06 00     	ldy	#$6
  7324 05:15EC: 97 06        	sta	[<L221+pmsg_1],Y
  7325                        ;			pmsg->hwnd = hWnd;
  7326                        	.line	1765
  7327 05:15EE: A5 0D        	lda	<L220+hWnd_0
  7328 05:15F0: A0 0A 00     	ldy	#$a
  7329 05:15F3: 97 06        	sta	[<L221+pmsg_1],Y
  7330 05:15F5: A5 0F        	lda	<L220+hWnd_0+2
  7331 05:15F7: A0 0C 00     	ldy	#$c
  7332 05:15FA: 97 06        	sta	[<L221+pmsg_1],Y
  7333                        ;
  7334                        ;			pmsg->cmdCId = cmdCId;
  7335                        	.line	1767
  7336 05:15FC: A5 13        	lda	<L220+cmdCId_0
  7337 05:15FE: A0 16 00     	ldy	#$16
  7338 05:1601: 97 06        	sta	[<L221+pmsg_1],Y
  7339                        ;			pmsg->cmdMId = cmdMId;
  7340                        	.line	1768
  7341 05:1603: A5 15        	lda	<L220+cmdMId_0
  7342 05:1605: A0 18 00     	ldy	#$18
  7343 05:1608: 97 06        	sta	[<L221+pmsg_1],Y
  Thu Dec  3 2020 22:25                                                Page 145


  7344                        ;			pmsg->parameter1 = (ULONG)pData1
                    ;
  7345                        	.line	1769
  7346 05:160A: A5 17        	lda	<L220+pData1_0
  7347 05:160C: A0 1A 00     	ldy	#$1a
  7348 05:160F: 97 06        	sta	[<L221+pmsg_1],Y
  7349 05:1611: A5 19        	lda	<L220+pData1_0+2
  7350 05:1613: A0 1C 00     	ldy	#$1c
  7351 05:1616: 97 06        	sta	[<L221+pmsg_1],Y
  7352                        ;			pmsg->parameter2 = (ULONG)pData2
                    ;
  7353                        	.line	1770
  7354 05:1618: A5 1B        	lda	<L220+pData2_0
  7355 05:161A: A0 1E 00     	ldy	#$1e
  7356 05:161D: 97 06        	sta	[<L221+pmsg_1],Y
  7357 05:161F: A5 1D        	lda	<L220+pData2_0+2
  7358 05:1621: A0 20 00     	ldy	#$20
  7359 05:1624: 97 06        	sta	[<L221+pmsg_1],Y
  7360                        ;
  7361                        ;			pmsg->parameter3 = 0L;
  7362                        	.line	1772
  7363 05:1626: A9 00 00     	lda	#$0
  7364 05:1629: A0 22 00     	ldy	#$22
  7365 05:162C: 97 06        	sta	[<L221+pmsg_1],Y
  7366 05:162E: A9 00 00     	lda	#$0
  7367 05:1631: A0 24 00     	ldy	#$24
  7368 05:1634: 97 06        	sta	[<L221+pmsg_1],Y
  7369                        ;
  7370                        ;			k_enqueue_with_lock(_k_eventQueu
                    e,(PFXOSMESSAGE)pmsg);
  7371                        	.line	1774
  7372 05:1636: D4 08        	pei	<L221+pmsg_1+2
  7373 05:1638: D4 06        	pei	<L221+pmsg_1
  7374 05:163A: AD xx xx     	lda	|~~_k_eventQueue+2
  7375 05:163D: 48           	pha
  7376 05:163E: AD xx xx     	lda	|~~_k_eventQueue
  7377 05:1641: 48           	pha
  7378 05:1642: 22 xx xx xx  	jsl	~~k_enqueue_with_lock
  7379                        ;		}
  7380                        	.line	1775
  7381                        ;	}
  7382                        L10114:
  7383                        	.line	1776
  7384                        ;
  7385                        ;	//k_debug_string("k_send_command_message::exit\r
                    \n");
  7386                        ;
  7387                        ;	return bRet;
  7388                        L10113:
  7389                        	.line	1780
  7390 05:1646: A5 05        	lda	<L221+bRet_1
  7391 05:1648: 29 FF 00     	and	#$ff
  7392                        L225:
  7393 05:164B: A8           	tay
  7394 05:164C: A5 0B        	lda	<L220+2
  7395 05:164E: 85 1D        	sta	<L220+2+18
  7396 05:1650: A5 0A        	lda	<L220+1
  7397 05:1652: 85 1C        	sta	<L220+1+18
  Thu Dec  3 2020 22:25                                                Page 146


  7398 05:1654: 2B           	pld
  7399 05:1655: 3B           	tsc
  7400 05:1656: 18           	clc
  7401 05:1657: 69 1B 00     	adc	#L220+18
  7402 05:165A: 1B           	tcs
  7403 05:165B: 98           	tya
  7404 05:165C: 6B           	rtl
  7405                        ;}
  7406                        	.line	1781
  7407                        	.endblock	1781
  7408             00000009   L220	equ	9
  7409             00000005   L221	equ	5
  7410 05:165D:              	ends
  7411                        	efunc
  7412                        	.endfunc	1781,5,9
  7413                        	.line	1781
  7414                        ;
  7415                        ;BOOL k_send_process_command_message(PFXPROCESS pr
                    ocess,MSGTYPE msgType,UINT cmdCId,UINT cmdMId,ULONG pData1,U
                    LONG pData2)
  7416                        ;{
  7417                        	.line	1783
  7418                        	.line	1784
  7419                        	EVTMAN
  7420                        	xdef	~~k_send_process_command_message
  7421                        	func
  7422                        	.function	1784
  7423                        ~~k_send_process_command_message:
  7424                        	longa	on
  7425                        	longi	on
  7426 05:165D: 3B           	tsc
  7427 05:165E: 38           	sec
  7428 05:165F: E9 09 00     	sbc	#L226
  7429 05:1662: 1B           	tcs
  7430 05:1663: 0B           	phd
  7431 05:1664: 5B           	tcd
  7432             00000004   process_0	set	4
  7433             00000008   msgType_0	set	8
  7434             0000000A   cmdCId_0	set	10
  7435             0000000C   cmdMId_0	set	12
  7436             0000000E   pData1_0	set	14
  7437             00000012   pData2_0	set	18
  7438                        	.block	1784
  7439                        ;	BOOL bRet = FALSE;
  7440                        ;	PFXCMDMESSAGE pmsg = NULL;
  7441                        ;
  7442                        ;	//k_debug_pointer("k_send_command_message::hWnd:
                    ",hWnd);
  7443                        ;	//k_debug_long("k_send_command_message::pData1:"
                    ,pData1);
  7444                        ;	//k_debug_integer("k_send_window_message::msgTyp
                    e:",msgType);
  7445                        ;
  7446                        ;	if(process)
  7447             00000000   bRet_1	set	0
  7448             00000001   pmsg_1	set	1
  7449                        	.sym	bRet,0,14,1,8
  7450                        	.sym	pmsg,1,138,1,32,17
  Thu Dec  3 2020 22:25                                                Page 147


  7451                        	.sym	process,4,138,6,32,20
  7452                        	.sym	msgType,8,16,6,16
  7453                        	.sym	cmdCId,10,16,6,16
  7454                        	.sym	cmdMId,12,16,6,16
  7455                        	.sym	pData1,14,18,6,32
  7456                        	.sym	pData2,18,18,6,32
  7457 05:1665: E2 20        	sep	#$20
  7458                        	longa	off
  7459 05:1667: 64 05        	stz	<L227+bRet_1
  7460 05:1669: C2 20        	rep	#$20
  7461                        	longa	on
  7462 05:166B: 64 06        	stz	<L227+pmsg_1
  7463 05:166D: 64 08        	stz	<L227+pmsg_1+2
  7464                        	.line	1792
  7465                        ;	{
  7466 05:166F: A5 0D        	lda	<L226+process_0
  7467 05:1671: 05 0F        	ora	<L226+process_0+2
  7468 05:1673: D0 03        	bne	L229
  7469 05:1675: 82 B2 00     	brl	L10115
  7470                        L229:
  7471                        	.line	1793
  7472                        ;		pmsg = (PFXCMDMESSAGE)k_mem_allocate_hea
                    p(sizeof(FXCMDMESSAGE));
  7473                        	.line	1794
  7474 05:1678: F4 26 00     	pea	#<$26
  7475 05:167B: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  7476 05:167F: 85 06        	sta	<L227+pmsg_1
  7477 05:1681: 86 08        	stx	<L227+pmsg_1+2
  7478                        ;		if(pmsg)
  7479                        	.line	1795
  7480                        ;		{
  7481 05:1683: A5 06        	lda	<L227+pmsg_1
  7482 05:1685: 05 08        	ora	<L227+pmsg_1+2
  7483 05:1687: D0 03        	bne	L230
  7484 05:1689: 82 9E 00     	brl	L10116
  7485                        L230:
  7486                        	.line	1796
  7487                        ;			pmsg->type = msgType;
  7488                        	.line	1797
  7489 05:168C: A5 11        	lda	<L226+msgType_0
  7490 05:168E: A0 08 00     	ldy	#$8
  7491 05:1691: 97 06        	sta	[<L227+pmsg_1],Y
  7492                        ;			pmsg->pheap = NULL;
  7493                        	.line	1798
  7494 05:1693: A9 00 00     	lda	#$0
  7495 05:1696: A0 0E 00     	ldy	#$e
  7496 05:1699: 97 06        	sta	[<L227+pmsg_1],Y
  7497 05:169B: A9 00 00     	lda	#$0
  7498 05:169E: A0 10 00     	ldy	#$10
  7499 05:16A1: 97 06        	sta	[<L227+pmsg_1],Y
  7500                        ;			pmsg->src  = k_exec_get_current_
                    process()->procId;
  7501                        	.line	1799
  7502 05:16A3: 22 xx xx xx  	jsl	~~k_exec_get_current_process
  7503 05:16A7: 85 01        	sta	<R0
  7504 05:16A9: 86 03        	stx	<R0+2
  7505 05:16AB: A0 02 00     	ldy	#$2
  7506 05:16AE: B7 01        	lda	[<R0],Y
  Thu Dec  3 2020 22:25                                                Page 148


  7507 05:16B0: 87 06        	sta	[<L227+pmsg_1]
  7508 05:16B2: A0 04 00     	ldy	#$4
  7509 05:16B5: B7 01        	lda	[<R0],Y
  7510 05:16B7: A0 02 00     	ldy	#$2
  7511 05:16BA: 97 06        	sta	[<L227+pmsg_1],Y
  7512                        ;			pmsg->dest = process->procId;
  7513                        	.line	1800
  7514 05:16BC: A0 02 00     	ldy	#$2
  7515 05:16BF: B7 0D        	lda	[<L226+process_0],Y
  7516 05:16C1: A0 04 00     	ldy	#$4
  7517 05:16C4: 97 06        	sta	[<L227+pmsg_1],Y
  7518 05:16C6: A0 04 00     	ldy	#$4
  7519 05:16C9: B7 0D        	lda	[<L226+process_0],Y
  7520 05:16CB: A0 06 00     	ldy	#$6
  7521 05:16CE: 97 06        	sta	[<L227+pmsg_1],Y
  7522                        ;			pmsg->hwnd = NULL;
  7523                        	.line	1801
  7524 05:16D0: A9 00 00     	lda	#$0
  7525 05:16D3: A0 0A 00     	ldy	#$a
  7526 05:16D6: 97 06        	sta	[<L227+pmsg_1],Y
  7527 05:16D8: A9 00 00     	lda	#$0
  7528 05:16DB: A0 0C 00     	ldy	#$c
  7529 05:16DE: 97 06        	sta	[<L227+pmsg_1],Y
  7530                        ;
  7531                        ;			pmsg->cmdCId = cmdCId;
  7532                        	.line	1803
  7533 05:16E0: A5 13        	lda	<L226+cmdCId_0
  7534 05:16E2: A0 16 00     	ldy	#$16
  7535 05:16E5: 97 06        	sta	[<L227+pmsg_1],Y
  7536                        ;			pmsg->cmdMId = cmdMId;
  7537                        	.line	1804
  7538 05:16E7: A5 15        	lda	<L226+cmdMId_0
  7539 05:16E9: A0 18 00     	ldy	#$18
  7540 05:16EC: 97 06        	sta	[<L227+pmsg_1],Y
  7541                        ;			pmsg->parameter1 = (ULONG)pData1
                    ;
  7542                        	.line	1805
  7543 05:16EE: A5 17        	lda	<L226+pData1_0
  7544 05:16F0: A0 1A 00     	ldy	#$1a
  7545 05:16F3: 97 06        	sta	[<L227+pmsg_1],Y
  7546 05:16F5: A5 19        	lda	<L226+pData1_0+2
  7547 05:16F7: A0 1C 00     	ldy	#$1c
  7548 05:16FA: 97 06        	sta	[<L227+pmsg_1],Y
  7549                        ;			pmsg->parameter2 = (ULONG)pData2
                    ;
  7550                        	.line	1806
  7551 05:16FC: A5 1B        	lda	<L226+pData2_0
  7552 05:16FE: A0 1E 00     	ldy	#$1e
  7553 05:1701: 97 06        	sta	[<L227+pmsg_1],Y
  7554 05:1703: A5 1D        	lda	<L226+pData2_0+2
  7555 05:1705: A0 20 00     	ldy	#$20
  7556 05:1708: 97 06        	sta	[<L227+pmsg_1],Y
  7557                        ;
  7558                        ;			pmsg->parameter3 = 0L;
  7559                        	.line	1808
  7560 05:170A: A9 00 00     	lda	#$0
  7561 05:170D: A0 22 00     	ldy	#$22
  7562 05:1710: 97 06        	sta	[<L227+pmsg_1],Y
  Thu Dec  3 2020 22:25                                                Page 149


  7563 05:1712: A9 00 00     	lda	#$0
  7564 05:1715: A0 24 00     	ldy	#$24
  7565 05:1718: 97 06        	sta	[<L227+pmsg_1],Y
  7566                        ;
  7567                        ;			k_enqueue_with_lock(_k_eventQueu
                    e,(PFXOSMESSAGE)pmsg);
  7568                        	.line	1810
  7569 05:171A: D4 08        	pei	<L227+pmsg_1+2
  7570 05:171C: D4 06        	pei	<L227+pmsg_1
  7571 05:171E: AD xx xx     	lda	|~~_k_eventQueue+2
  7572 05:1721: 48           	pha
  7573 05:1722: AD xx xx     	lda	|~~_k_eventQueue
  7574 05:1725: 48           	pha
  7575 05:1726: 22 xx xx xx  	jsl	~~k_enqueue_with_lock
  7576                        ;		}
  7577                        	.line	1811
  7578                        ;	}
  7579                        L10116:
  7580                        	.line	1812
  7581                        ;
  7582                        ;	//k_debug_string("k_send_command_message::exit\r
                    \n");
  7583                        ;
  7584                        ;	return bRet;
  7585                        L10115:
  7586                        	.line	1816
  7587 05:172A: A5 05        	lda	<L227+bRet_1
  7588 05:172C: 29 FF 00     	and	#$ff
  7589                        L231:
  7590 05:172F: A8           	tay
  7591 05:1730: A5 0B        	lda	<L226+2
  7592 05:1732: 85 1D        	sta	<L226+2+18
  7593 05:1734: A5 0A        	lda	<L226+1
  7594 05:1736: 85 1C        	sta	<L226+1+18
  7595 05:1738: 2B           	pld
  7596 05:1739: 3B           	tsc
  7597 05:173A: 18           	clc
  7598 05:173B: 69 1B 00     	adc	#L226+18
  7599 05:173E: 1B           	tcs
  7600 05:173F: 98           	tya
  7601 05:1740: 6B           	rtl
  7602                        ;}
  7603                        	.line	1817
  7604                        	.endblock	1817
  7605             00000009   L226	equ	9
  7606             00000005   L227	equ	5
  7607 05:1741:              	ends
  7608                        	efunc
  7609                        	.endfunc	1817,5,9
  7610                        	.line	1817
  7611                        ;
  7612                        ;void k_irq_device_event(MSGIRQ type,ULONG timer,v
                    oid FAR *data)
  7613                        ;{
  7614                        	.line	1819
  7615                        	.line	1820
  7616                        	EVTMAN
  7617                        	xdef	~~k_irq_device_event
  Thu Dec  3 2020 22:25                                                Page 150


  7618                        	func
  7619                        	.function	1820
  7620                        ~~k_irq_device_event:
  7621                        	longa	on
  7622                        	longi	on
  7623 05:1741: 3B           	tsc
  7624 05:1742: 38           	sec
  7625 05:1743: E9 04 00     	sbc	#L232
  7626 05:1746: 1B           	tcs
  7627 05:1747: 0B           	phd
  7628 05:1748: 5B           	tcd
  7629             00000004   type_0	set	4
  7630             00000006   timer_0	set	6
  7631             0000000A   data_0	set	10
  7632                        	.block	1820
  7633                        ;	PFXOSMESSAGE pmsg = k_create_msg(type,timer,data
                    );
  7634                        ;	if(pmsg)
  7635             00000000   pmsg_1	set	0
  7636                        	.sym	pmsg,0,138,1,32,16
  7637                        	.sym	type,4,5,6,16
  7638                        	.sym	timer,6,18,6,32
  7639                        	.sym	data,10,129,6,32
  7640 05:1749: D4 10        	pei	<L232+data_0+2
  7641 05:174B: D4 0E        	pei	<L232+data_0
  7642 05:174D: D4 0C        	pei	<L232+timer_0+2
  7643 05:174F: D4 0A        	pei	<L232+timer_0
  7644 05:1751: D4 08        	pei	<L232+type_0
  7645 05:1753: 22 36 1B 05  	jsl	~~k_create_msg
  7646 05:1757: 85 01        	sta	<L233+pmsg_1
  7647 05:1759: 86 03        	stx	<L233+pmsg_1+2
  7648                        	.line	1822
  7649                        ;	{
  7650 05:175B: A5 01        	lda	<L233+pmsg_1
  7651 05:175D: 05 03        	ora	<L233+pmsg_1+2
  7652 05:175F: D0 03        	bne	L235
  7653 05:1761: 82 70 00     	brl	L10117
  7654                        L235:
  7655                        	.line	1823
  7656                        ;		if(type == IRQE_MOUSE)
  7657                        	.line	1824
  7658                        ;			pmsg = k_updateMouseState(pmsg,t
                    imer,data);
  7659 05:1764: A5 08        	lda	<L232+type_0
  7660 05:1766: C9 02 00     	cmp	#<$2
  7661 05:1769: F0 03        	beq	L236
  7662 05:176B: 82 14 00     	brl	L10118
  7663                        L236:
  7664                        	.line	1825
  7665 05:176E: D4 10        	pei	<L232+data_0+2
  7666 05:1770: D4 0E        	pei	<L232+data_0
  7667 05:1772: D4 0C        	pei	<L232+timer_0+2
  7668 05:1774: D4 0A        	pei	<L232+timer_0
  7669 05:1776: D4 03        	pei	<L233+pmsg_1+2
  7670 05:1778: D4 01        	pei	<L233+pmsg_1
  7671 05:177A: 22 E4 17 05  	jsl	~~k_updateMouseState
  7672 05:177E: 85 01        	sta	<L233+pmsg_1
  7673 05:1780: 86 03        	stx	<L233+pmsg_1+2
  Thu Dec  3 2020 22:25                                                Page 151


  7674                        ;		//else
  7675                        ;		//	k_debug_integer("k_irq_device_ev
                    ent:type:",type);
  7676                        ;
  7677                        ;		if(type == IRQE_CTLR_RESET)
  7678                        L10118:
  7679                        	.line	1829
  7680                        ;		{
  7681 05:1782: A5 08        	lda	<L232+type_0
  7682 05:1784: C9 09 00     	cmp	#<$9
  7683 05:1787: F0 03        	beq	L237
  7684 05:1789: 82 38 00     	brl	L10119
  7685                        L237:
  7686                        	.line	1830
  7687                        ;			k_debug_integer("k_irq_device_ev
                    ent:IRQE_CTLR_RESET:",timer);
  7688                        	.line	1831
  7689 05:178C: D4 0A        	pei	<L232+timer_0
  7690 05:178E: F4 xx xx     	pea	#^L210
  7691 05:1791: F4 xx xx     	pea	#<L210
  7692 05:1794: 22 xx xx xx  	jsl	~~k_debug_integer
  7693                        ;			if(timer == -1)
  7694                        	.line	1832
  7695                        ;			{
  7696 05:1798: A5 0A        	lda	<L232+timer_0
  7697 05:179A: C9 FF FF     	cmp	#<$ffffffff
  7698 05:179D: D0 05        	bne	L238
  7699 05:179F: A5 0C        	lda	<L232+timer_0+2
  7700 05:17A1: C9 FF FF     	cmp	#^$ffffffff
  7701                        L238:
  7702 05:17A4: F0 03        	beq	L239
  7703 05:17A6: 82 1B 00     	brl	L10120
  7704                        L239:
  7705                        	.line	1833
  7706                        ;				_k_mouseState.buttonLeft
                    Down   = FALSE;
  7707                        	.line	1834
  7708 05:17A9: E2 20        	sep	#$20
  7709                        	longa	off
  7710 05:17AB: 9C xx xx     	stz	|~~_k_mouseState+4
  7711 05:17AE: C2 20        	rep	#$20
  7712                        	longa	on
  7713                        ;				_k_mouseState.buttonMidd
                    leDown = FALSE;
  7714                        	.line	1835
  7715 05:17B0: E2 20        	sep	#$20
  7716                        	longa	off
  7717 05:17B2: 9C xx xx     	stz	|~~_k_mouseState+14
  7718 05:17B5: C2 20        	rep	#$20
  7719                        	longa	on
  7720                        ;				_k_mouseState.buttonRigh
                    tDown  = FALSE;
  7721                        	.line	1836
  7722 05:17B7: E2 20        	sep	#$20
  7723                        	longa	off
  7724 05:17B9: 9C xx xx     	stz	|~~_k_mouseState+9
  7725 05:17BC: C2 20        	rep	#$20
  7726                        	longa	on
  Thu Dec  3 2020 22:25                                                Page 152


  7727                        ;				_k_mouseState.lastEvent 
                    = 0;
  7728                        	.line	1837
  7729 05:17BE: 9C xx xx     	stz	|~~_k_mouseState
  7730 05:17C1: 9C xx xx     	stz	|~~_k_mouseState+2
  7731                        ;			}
  7732                        	.line	1838
  7733                        ;		}
  7734                        L10120:
  7735                        	.line	1839
  7736                        ;		//if(type == IRQE_FLOPPY)
  7737                        ;		//	k_debug_integer("k_irq_device_ev
                    ent:IRQE_FLOPPY:",type);
  7738                        ;		//if(type != IRQE_SOL_TIMER && type != I
                    RQE_COM1)
  7739                        ;		//	k_debug_integer("k_irq_device_ev
                    ent:",type);
  7740                        ;
  7741                        ;		k_enqueue(_k_eventQueue,pmsg);
  7742                        L10119:
  7743                        	.line	1845
  7744 05:17C4: D4 03        	pei	<L233+pmsg_1+2
  7745 05:17C6: D4 01        	pei	<L233+pmsg_1
  7746 05:17C8: AD xx xx     	lda	|~~_k_eventQueue+2
  7747 05:17CB: 48           	pha
  7748 05:17CC: AD xx xx     	lda	|~~_k_eventQueue
  7749 05:17CF: 48           	pha
  7750 05:17D0: 22 xx xx xx  	jsl	~~k_enqueue
  7751                        ;	}
  7752                        	.line	1846
  7753                        ;}
  7754                        L10117:
  7755                        	.line	1847
  7756                        L240:
  7757 05:17D4: A5 06        	lda	<L232+2
  7758 05:17D6: 85 10        	sta	<L232+2+10
  7759 05:17D8: A5 05        	lda	<L232+1
  7760 05:17DA: 85 0F        	sta	<L232+1+10
  7761 05:17DC: 2B           	pld
  7762 05:17DD: 3B           	tsc
  7763 05:17DE: 18           	clc
  7764 05:17DF: 69 0E 00     	adc	#L232+10
  7765 05:17E2: 1B           	tcs
  7766 05:17E3: 6B           	rtl
  7767                        	.endblock	1847
  7768             00000004   L232	equ	4
  7769             00000001   L233	equ	1
  7770 05:17E4:              	ends
  7771                        	efunc
  7772                        	.endfunc	1847,1,4
  7773                        	.line	1847
  7774                        	data
  7775                        L210:
  7776 00:0558: 6B 5F 69 72  	db	$6B,$5F,$69,$72,$71,$5F,$64,$65,$76,$69,
                    $63,$65,$5F,$65,$76
       00:055C: 71 5F 64 65 
       00:0560: 76 69 63 65 
       00:0564: 5F 65 76 
  Thu Dec  3 2020 22:25                                                Page 153


  7777 00:0567: 65 6E 74 3A  	db	$65,$6E,$74,$3A,$49,$52,$51,$45,$5F,$43,
                    $54,$4C,$52,$5F,$52
       00:056B: 49 52 51 45 
       00:056F: 5F 43 54 4C 
       00:0573: 52 5F 52 
  7778 00:0576: 45 53 45 54  	db	$45,$53,$45,$54,$3A,$00
       00:057A: 3A 00 
  7779 00:057C:              	ends
  7780                        ;
  7781                        ;PFXOSMESSAGE k_updateMouseState(PFXOSMESSAGE pmsg
                    ,ULONG timer,void FAR *data)
  7782                        ;{
  7783                        	.line	1849
  7784                        	.line	1850
  7785                        	EVTMAN
  7786                        	xdef	~~k_updateMouseState
  7787                        	func
  7788                        	.function	1850
  7789                        ~~k_updateMouseState:
  7790                        	longa	on
  7791                        	longi	on
  7792 05:17E4: 3B           	tsc
  7793 05:17E5: 38           	sec
  7794 05:17E6: E9 0E 00     	sbc	#L242
  7795 05:17E9: 1B           	tcs
  7796 05:17EA: 0B           	phd
  7797 05:17EB: 5B           	tcd
  7798             00000004   pmsg_0	set	4
  7799             00000008   timer_0	set	8
  7800             0000000C   data_0	set	12
  7801                        	.block	1850
  7802                        ;	ULONG lastTimer = _k_mouseState.lastEvent;
  7803                        ;
  7804                        ;	INT statusLeft   = ((LPCHAR)data)[0] & 1;
  7805                        ;	INT statusRight  = ((LPCHAR)data)[0] & 2;
  7806                        ;	INT statusMiddle = ((LPCHAR)data)[0] & 4;
  7807                        ;
  7808                        ;	if(_k_mouseState.buttonLeftDown)
  7809             00000000   lastTimer_1	set	0
  7810             00000004   statusLeft_1	set	4
  7811             00000006   statusRight_1	set	6
  7812             00000008   statusMiddle_1	set	8
  7813                        	.sym	lastTimer,0,18,1,32
  7814                        	.sym	statusLeft,4,5,1,16
  7815                        	.sym	statusRight,6,5,1,16
  7816                        	.sym	statusMiddle,8,5,1,16
  7817                        	.sym	pmsg,4,138,6,32,16
  7818                        	.sym	timer,8,18,6,32
  7819                        	.sym	data,12,129,6,32
  7820 05:17EC: AD xx xx     	lda	|~~_k_mouseState
  7821 05:17EF: 85 05        	sta	<L243+lastTimer_1
  7822 05:17F1: AD xx xx     	lda	|~~_k_mouseState+2
  7823 05:17F4: 85 07        	sta	<L243+lastTimer_1+2
  7824 05:17F6: A7 1A        	lda	[<L242+data_0]
  7825 05:17F8: 29 01 00     	and	#<$1
  7826 05:17FB: 85 09        	sta	<L243+statusLeft_1
  7827 05:17FD: A7 1A        	lda	[<L242+data_0]
  7828 05:17FF: 29 02 00     	and	#<$2
  Thu Dec  3 2020 22:25                                                Page 154


  7829 05:1802: 85 0B        	sta	<L243+statusRight_1
  7830 05:1804: A7 1A        	lda	[<L242+data_0]
  7831 05:1806: 29 04 00     	and	#<$4
  7832 05:1809: 85 0D        	sta	<L243+statusMiddle_1
  7833                        	.line	1857
  7834                        ;	{
  7835 05:180B: AD xx xx     	lda	|~~_k_mouseState+4
  7836 05:180E: 29 FF 00     	and	#$ff
  7837 05:1811: D0 03        	bne	L245
  7838 05:1813: 82 4B 00     	brl	L10121
  7839                        L245:
  7840                        	.line	1858
  7841                        ;		if(statusLeft)
  7842                        	.line	1859
  7843                        ;		{
  7844 05:1816: A5 09        	lda	<L243+statusLeft_1
  7845 05:1818: D0 03        	bne	L246
  7846 05:181A: 82 32 00     	brl	L10122
  7847                        L246:
  7848                        	.line	1860
  7849                        ;			_k_mouseState.buttonLeftDown = 1
                    ;
  7850                        	.line	1861
  7851 05:181D: E2 20        	sep	#$20
  7852                        	longa	off
  7853 05:181F: A9 01        	lda	#$1
  7854 05:1821: 8D xx xx     	sta	|~~_k_mouseState+4
  7855 05:1824: C2 20        	rep	#$20
  7856                        	longa	on
  7857                        ;			//_k_mouseState.lastLeftDown = t
                    imer;
  7858                        ;
  7859                        ;			if((timer - _k_mouseState.lastLe
                    ftDown) > 5)
  7860                        	.line	1864
  7861                        ;			{
  7862 05:1826: 38           	sec
  7863 05:1827: A5 16        	lda	<L242+timer_0
  7864 05:1829: ED xx xx     	sbc	|~~_k_mouseState+5
  7865 05:182C: 85 01        	sta	<R0
  7866 05:182E: A5 18        	lda	<L242+timer_0+2
  7867 05:1830: ED xx xx     	sbc	|~~_k_mouseState+5+2
  7868 05:1833: 85 03        	sta	<R0+2
  7869 05:1835: A9 05 00     	lda	#$5
  7870 05:1838: C5 01        	cmp	<R0
  7871 05:183A: A9 00 00     	lda	#$0
  7872 05:183D: E5 03        	sbc	<R0+2
  7873 05:183F: 90 03        	bcc	L247
  7874 05:1841: 82 08 00     	brl	L10123
  7875                        L247:
  7876                        	.line	1865
  7877                        ;				//k_debug_string("k_upda
                    teMouseState:LeftMouseDRAG\r\n");
  7878                        ;				pmsg->type = FX_LBUTTON_
                    DRAG;
  7879                        	.line	1867
  7880 05:1844: A9 05 0F     	lda	#$f05
  7881 05:1847: A0 08 00     	ldy	#$8
  Thu Dec  3 2020 22:25                                                Page 155


  7882 05:184A: 97 12        	sta	[<L242+pmsg_0],Y
  7883                        ;			}
  7884                        	.line	1868
  7885                        ;		}
  7886                        L10123:
  7887                        	.line	1869
  7888                        ;		else
  7889 05:184C: 82 0F 00     	brl	L10124
  7890                        L10122:
  7891                        ;		{
  7892                        	.line	1871
  7893                        ;			//k_debug_string("k_updateMouseS
                    tate:LeftMouseUp\r\n");
  7894                        ;			pmsg->type = FX_LBUTTON_UP;
  7895                        	.line	1873
  7896 05:184F: A9 06 0F     	lda	#$f06
  7897 05:1852: A0 08 00     	ldy	#$8
  7898 05:1855: 97 12        	sta	[<L242+pmsg_0],Y
  7899                        ;			_k_mouseState.buttonLeftDown = 0
                    ;
  7900                        	.line	1874
  7901 05:1857: E2 20        	sep	#$20
  7902                        	longa	off
  7903 05:1859: 9C xx xx     	stz	|~~_k_mouseState+4
  7904 05:185C: C2 20        	rep	#$20
  7905                        	longa	on
  7906                        ;		}
  7907                        	.line	1875
  7908                        L10124:
  7909                        ;	}
  7910                        	.line	1876
  7911                        ;	else
  7912 05:185E: 82 55 00     	brl	L10125
  7913                        L10121:
  7914                        ;	{
  7915                        	.line	1878
  7916                        ;		if(statusLeft)
  7917                        	.line	1879
  7918                        ;		{
  7919 05:1861: A5 09        	lda	<L243+statusLeft_1
  7920 05:1863: D0 03        	bne	L248
  7921 05:1865: 82 47 00     	brl	L10126
  7922                        L248:
  7923                        	.line	1880
  7924                        ;			_k_mouseState.buttonLeftDown = 1
                    ;
  7925                        	.line	1881
  7926 05:1868: E2 20        	sep	#$20
  7927                        	longa	off
  7928 05:186A: A9 01        	lda	#$1
  7929 05:186C: 8D xx xx     	sta	|~~_k_mouseState+4
  7930 05:186F: C2 20        	rep	#$20
  7931                        	longa	on
  7932                        ;
  7933                        ;			if((timer - _k_mouseState.lastLe
                    ftDown) < 5)
  7934                        	.line	1883
  7935                        ;			{
  Thu Dec  3 2020 22:25                                                Page 156


  7936 05:1871: 38           	sec
  7937 05:1872: A5 16        	lda	<L242+timer_0
  7938 05:1874: ED xx xx     	sbc	|~~_k_mouseState+5
  7939 05:1877: 85 01        	sta	<R0
  7940 05:1879: A5 18        	lda	<L242+timer_0+2
  7941 05:187B: ED xx xx     	sbc	|~~_k_mouseState+5+2
  7942 05:187E: 85 03        	sta	<R0+2
  7943 05:1880: A5 01        	lda	<R0
  7944 05:1882: C9 05 00     	cmp	#<$5
  7945 05:1885: A5 03        	lda	<R0+2
  7946 05:1887: E9 00 00     	sbc	#^$5
  7947 05:188A: 90 03        	bcc	L249
  7948 05:188C: 82 0B 00     	brl	L10127
  7949                        L249:
  7950                        	.line	1884
  7951                        ;				//k_debug_integer("k_upd
                    ateMouseState:LeftMouseDblClick:",timer - _k_mouseState.last
                    LeftDown);
  7952                        ;				pmsg->type = FX_LBUTTON_
                    DBLCLICK;
  7953                        	.line	1886
  7954 05:188F: A9 07 0F     	lda	#$f07
  7955 05:1892: A0 08 00     	ldy	#$8
  7956 05:1895: 97 12        	sta	[<L242+pmsg_0],Y
  7957                        ;			}
  7958                        	.line	1887
  7959                        ;			else
  7960 05:1897: 82 08 00     	brl	L10128
  7961                        L10127:
  7962                        ;			{
  7963                        	.line	1889
  7964                        ;				//k_debug_string("k_upda
                    teMouseState:LeftMouseDown\r\n");
  7965                        ;				pmsg->type = FX_LBUTTON_
                    DOWN;
  7966                        	.line	1891
  7967 05:189A: A9 04 0F     	lda	#$f04
  7968 05:189D: A0 08 00     	ldy	#$8
  7969 05:18A0: 97 12        	sta	[<L242+pmsg_0],Y
  7970                        ;			}
  7971                        	.line	1892
  7972                        L10128:
  7973                        ;			_k_mouseState.lastLeftDown = tim
                    er;
  7974                        	.line	1893
  7975 05:18A2: A5 16        	lda	<L242+timer_0
  7976 05:18A4: 8D xx xx     	sta	|~~_k_mouseState+5
  7977 05:18A7: A5 18        	lda	<L242+timer_0+2
  7978 05:18A9: 8D xx xx     	sta	|~~_k_mouseState+5+2
  7979                        ;		}
  7980                        	.line	1894
  7981                        ;		else
  7982 05:18AC: 82 07 00     	brl	L10129
  7983                        L10126:
  7984                        ;		{
  7985                        	.line	1896
  7986                        ;
  7987                        ;			_k_mouseState.buttonLeftDown = 0
  Thu Dec  3 2020 22:25                                                Page 157


                    ;
  7988                        	.line	1898
  7989 05:18AF: E2 20        	sep	#$20
  7990                        	longa	off
  7991 05:18B1: 9C xx xx     	stz	|~~_k_mouseState+4
  7992 05:18B4: C2 20        	rep	#$20
  7993                        	longa	on
  7994                        ;		}
  7995                        	.line	1899
  7996                        L10129:
  7997                        ;	}
  7998                        	.line	1900
  7999                        L10125:
  8000                        ;
  8001                        ;	if(_k_mouseState.buttonRightDown)
  8002                        	.line	1902
  8003                        ;	{
  8004 05:18B6: AD xx xx     	lda	|~~_k_mouseState+9
  8005 05:18B9: 29 FF 00     	and	#$ff
  8006 05:18BC: D0 03        	bne	L250
  8007 05:18BE: 82 4B 00     	brl	L10130
  8008                        L250:
  8009                        	.line	1903
  8010                        ;		if(statusRight)
  8011                        	.line	1904
  8012                        ;		{
  8013 05:18C1: A5 0B        	lda	<L243+statusRight_1
  8014 05:18C3: D0 03        	bne	L251
  8015 05:18C5: 82 32 00     	brl	L10131
  8016                        L251:
  8017                        	.line	1905
  8018                        ;			_k_mouseState.buttonRightDown = 
                    1;
  8019                        	.line	1906
  8020 05:18C8: E2 20        	sep	#$20
  8021                        	longa	off
  8022 05:18CA: A9 01        	lda	#$1
  8023 05:18CC: 8D xx xx     	sta	|~~_k_mouseState+9
  8024 05:18CF: C2 20        	rep	#$20
  8025                        	longa	on
  8026                        ;			if((timer - _k_mouseState.lastRi
                    ghtDown) > 5)
  8027                        	.line	1907
  8028                        ;			{
  8029 05:18D1: 38           	sec
  8030 05:18D2: A5 16        	lda	<L242+timer_0
  8031 05:18D4: ED xx xx     	sbc	|~~_k_mouseState+10
  8032 05:18D7: 85 01        	sta	<R0
  8033 05:18D9: A5 18        	lda	<L242+timer_0+2
  8034 05:18DB: ED xx xx     	sbc	|~~_k_mouseState+10+2
  8035 05:18DE: 85 03        	sta	<R0+2
  8036 05:18E0: A9 05 00     	lda	#$5
  8037 05:18E3: C5 01        	cmp	<R0
  8038 05:18E5: A9 00 00     	lda	#$0
  8039 05:18E8: E5 03        	sbc	<R0+2
  8040 05:18EA: 90 03        	bcc	L252
  8041 05:18EC: 82 08 00     	brl	L10132
  8042                        L252:
  Thu Dec  3 2020 22:25                                                Page 158


  8043                        	.line	1908
  8044                        ;				//k_debug_string("k_upda
                    teMouseState:LeftMouseDRAG\r\n");
  8045                        ;				pmsg->type = FX_RBUTTON_
                    DRAG;
  8046                        	.line	1910
  8047 05:18EF: A9 09 0F     	lda	#$f09
  8048 05:18F2: A0 08 00     	ldy	#$8
  8049 05:18F5: 97 12        	sta	[<L242+pmsg_0],Y
  8050                        ;			}
  8051                        	.line	1911
  8052                        ;		}
  8053                        L10132:
  8054                        	.line	1912
  8055                        ;		else
  8056 05:18F7: 82 0F 00     	brl	L10133
  8057                        L10131:
  8058                        ;		{
  8059                        	.line	1914
  8060                        ;			//k_debug_string("k_updateMouseS
                    tate:RightMouseUp\r\n");
  8061                        ;			pmsg->type = FX_RBUTTON_UP;
  8062                        	.line	1916
  8063 05:18FA: A9 0A 0F     	lda	#$f0a
  8064 05:18FD: A0 08 00     	ldy	#$8
  8065 05:1900: 97 12        	sta	[<L242+pmsg_0],Y
  8066                        ;			_k_mouseState.buttonRightDown = 
                    0;
  8067                        	.line	1917
  8068 05:1902: E2 20        	sep	#$20
  8069                        	longa	off
  8070 05:1904: 9C xx xx     	stz	|~~_k_mouseState+9
  8071 05:1907: C2 20        	rep	#$20
  8072                        	longa	on
  8073                        ;		}
  8074                        	.line	1918
  8075                        L10133:
  8076                        ;	}
  8077                        	.line	1919
  8078                        ;	else
  8079 05:1909: 82 55 00     	brl	L10134
  8080                        L10130:
  8081                        ;	{
  8082                        	.line	1921
  8083                        ;		if(statusRight)
  8084                        	.line	1922
  8085                        ;		{
  8086 05:190C: A5 0B        	lda	<L243+statusRight_1
  8087 05:190E: D0 03        	bne	L253
  8088 05:1910: 82 47 00     	brl	L10135
  8089                        L253:
  8090                        	.line	1923
  8091                        ;			_k_mouseState.buttonRightDown = 
                    1;
  8092                        	.line	1924
  8093 05:1913: E2 20        	sep	#$20
  8094                        	longa	off
  8095 05:1915: A9 01        	lda	#$1
  Thu Dec  3 2020 22:25                                                Page 159


  8096 05:1917: 8D xx xx     	sta	|~~_k_mouseState+9
  8097 05:191A: C2 20        	rep	#$20
  8098                        	longa	on
  8099                        ;
  8100                        ;			if((timer - _k_mouseState.lastRi
                    ghtDown) < 5)
  8101                        	.line	1926
  8102                        ;			{
  8103 05:191C: 38           	sec
  8104 05:191D: A5 16        	lda	<L242+timer_0
  8105 05:191F: ED xx xx     	sbc	|~~_k_mouseState+10
  8106 05:1922: 85 01        	sta	<R0
  8107 05:1924: A5 18        	lda	<L242+timer_0+2
  8108 05:1926: ED xx xx     	sbc	|~~_k_mouseState+10+2
  8109 05:1929: 85 03        	sta	<R0+2
  8110 05:192B: A5 01        	lda	<R0
  8111 05:192D: C9 05 00     	cmp	#<$5
  8112 05:1930: A5 03        	lda	<R0+2
  8113 05:1932: E9 00 00     	sbc	#^$5
  8114 05:1935: 90 03        	bcc	L254
  8115 05:1937: 82 0B 00     	brl	L10136
  8116                        L254:
  8117                        	.line	1927
  8118                        ;				//k_debug_integer("k_upd
                    ateMouseState:RightMouseDblClick:",timer - _k_mouseState.las
                    tRightDown);
  8119                        ;				pmsg->type = FX_RBUTTON_
                    DBLCLICK;
  8120                        	.line	1929
  8121 05:193A: A9 0B 0F     	lda	#$f0b
  8122 05:193D: A0 08 00     	ldy	#$8
  8123 05:1940: 97 12        	sta	[<L242+pmsg_0],Y
  8124                        ;			}
  8125                        	.line	1930
  8126                        ;			else
  8127 05:1942: 82 08 00     	brl	L10137
  8128                        L10136:
  8129                        ;			{
  8130                        	.line	1932
  8131                        ;				//k_debug_string("k_upda
                    teMouseState:RightMouseDown\r\n");
  8132                        ;				pmsg->type = FX_RBUTTON_
                    DOWN;
  8133                        	.line	1934
  8134 05:1945: A9 08 0F     	lda	#$f08
  8135 05:1948: A0 08 00     	ldy	#$8
  8136 05:194B: 97 12        	sta	[<L242+pmsg_0],Y
  8137                        ;			}
  8138                        	.line	1935
  8139                        L10137:
  8140                        ;			_k_mouseState.lastRightDown = ti
                    mer;
  8141                        	.line	1936
  8142 05:194D: A5 16        	lda	<L242+timer_0
  8143 05:194F: 8D xx xx     	sta	|~~_k_mouseState+10
  8144 05:1952: A5 18        	lda	<L242+timer_0+2
  8145 05:1954: 8D xx xx     	sta	|~~_k_mouseState+10+2
  8146                        ;		}
  Thu Dec  3 2020 22:25                                                Page 160


  8147                        	.line	1937
  8148                        ;		else
  8149 05:1957: 82 07 00     	brl	L10138
  8150                        L10135:
  8151                        ;		{
  8152                        	.line	1939
  8153                        ;
  8154                        ;			_k_mouseState.buttonRightDown = 
                    0;
  8155                        	.line	1941
  8156 05:195A: E2 20        	sep	#$20
  8157                        	longa	off
  8158 05:195C: 9C xx xx     	stz	|~~_k_mouseState+9
  8159 05:195F: C2 20        	rep	#$20
  8160                        	longa	on
  8161                        ;		}
  8162                        	.line	1942
  8163                        L10138:
  8164                        ;	}
  8165                        	.line	1943
  8166                        L10134:
  8167                        ;
  8168                        ;	if(_k_mouseState.buttonMiddleDown)
  8169                        	.line	1945
  8170                        ;	{
  8171 05:1961: AD xx xx     	lda	|~~_k_mouseState+14
  8172 05:1964: 29 FF 00     	and	#$ff
  8173 05:1967: D0 03        	bne	L255
  8174 05:1969: 82 4B 00     	brl	L10139
  8175                        L255:
  8176                        	.line	1946
  8177                        ;		if(statusMiddle)
  8178                        	.line	1947
  8179                        ;		{
  8180 05:196C: A5 0D        	lda	<L243+statusMiddle_1
  8181 05:196E: D0 03        	bne	L256
  8182 05:1970: 82 32 00     	brl	L10140
  8183                        L256:
  8184                        	.line	1948
  8185                        ;			_k_mouseState.buttonMiddleDown =
                     1;
  8186                        	.line	1949
  8187 05:1973: E2 20        	sep	#$20
  8188                        	longa	off
  8189 05:1975: A9 01        	lda	#$1
  8190 05:1977: 8D xx xx     	sta	|~~_k_mouseState+14
  8191 05:197A: C2 20        	rep	#$20
  8192                        	longa	on
  8193                        ;			if((timer - _k_mouseState.lastMi
                    ddleDown) > 5)
  8194                        	.line	1950
  8195                        ;			{
  8196 05:197C: 38           	sec
  8197 05:197D: A5 16        	lda	<L242+timer_0
  8198 05:197F: ED xx xx     	sbc	|~~_k_mouseState+15
  8199 05:1982: 85 01        	sta	<R0
  8200 05:1984: A5 18        	lda	<L242+timer_0+2
  8201 05:1986: ED xx xx     	sbc	|~~_k_mouseState+15+2
  Thu Dec  3 2020 22:25                                                Page 161


  8202 05:1989: 85 03        	sta	<R0+2
  8203 05:198B: A9 05 00     	lda	#$5
  8204 05:198E: C5 01        	cmp	<R0
  8205 05:1990: A9 00 00     	lda	#$0
  8206 05:1993: E5 03        	sbc	<R0+2
  8207 05:1995: 90 03        	bcc	L257
  8208 05:1997: 82 08 00     	brl	L10141
  8209                        L257:
  8210                        	.line	1951
  8211                        ;				//k_debug_string("k_upda
                    teMouseState:MiddletMouseDRAG\r\n");
  8212                        ;				pmsg->type = FX_MBUTTON_
                    DRAG;
  8213                        	.line	1953
  8214 05:199A: A9 0D 0F     	lda	#$f0d
  8215 05:199D: A0 08 00     	ldy	#$8
  8216 05:19A0: 97 12        	sta	[<L242+pmsg_0],Y
  8217                        ;			}
  8218                        	.line	1954
  8219                        ;		}
  8220                        L10141:
  8221                        	.line	1955
  8222                        ;		else
  8223 05:19A2: 82 0F 00     	brl	L10142
  8224                        L10140:
  8225                        ;		{
  8226                        	.line	1957
  8227                        ;			//k_debug_string("k_updateMouseS
                    tate:MiddleMouseUp\r\n");
  8228                        ;			pmsg->type = FX_MBUTTON_UP;
  8229                        	.line	1959
  8230 05:19A5: A9 0E 0F     	lda	#$f0e
  8231 05:19A8: A0 08 00     	ldy	#$8
  8232 05:19AB: 97 12        	sta	[<L242+pmsg_0],Y
  8233                        ;			_k_mouseState.buttonMiddleDown =
                     0;
  8234                        	.line	1960
  8235 05:19AD: E2 20        	sep	#$20
  8236                        	longa	off
  8237 05:19AF: 9C xx xx     	stz	|~~_k_mouseState+14
  8238 05:19B2: C2 20        	rep	#$20
  8239                        	longa	on
  8240                        ;		}
  8241                        	.line	1961
  8242                        L10142:
  8243                        ;	}
  8244                        	.line	1962
  8245                        ;	else
  8246 05:19B4: 82 55 00     	brl	L10143
  8247                        L10139:
  8248                        ;	{
  8249                        	.line	1964
  8250                        ;		if(statusMiddle)
  8251                        	.line	1965
  8252                        ;		{
  8253 05:19B7: A5 0D        	lda	<L243+statusMiddle_1
  8254 05:19B9: D0 03        	bne	L258
  8255 05:19BB: 82 47 00     	brl	L10144
  Thu Dec  3 2020 22:25                                                Page 162


  8256                        L258:
  8257                        	.line	1966
  8258                        ;			_k_mouseState.buttonMiddleDown =
                     1;
  8259                        	.line	1967
  8260 05:19BE: E2 20        	sep	#$20
  8261                        	longa	off
  8262 05:19C0: A9 01        	lda	#$1
  8263 05:19C2: 8D xx xx     	sta	|~~_k_mouseState+14
  8264 05:19C5: C2 20        	rep	#$20
  8265                        	longa	on
  8266                        ;
  8267                        ;			if((timer - _k_mouseState.lastMi
                    ddleDown) < 5)
  8268                        	.line	1969
  8269                        ;			{
  8270 05:19C7: 38           	sec
  8271 05:19C8: A5 16        	lda	<L242+timer_0
  8272 05:19CA: ED xx xx     	sbc	|~~_k_mouseState+15
  8273 05:19CD: 85 01        	sta	<R0
  8274 05:19CF: A5 18        	lda	<L242+timer_0+2
  8275 05:19D1: ED xx xx     	sbc	|~~_k_mouseState+15+2
  8276 05:19D4: 85 03        	sta	<R0+2
  8277 05:19D6: A5 01        	lda	<R0
  8278 05:19D8: C9 05 00     	cmp	#<$5
  8279 05:19DB: A5 03        	lda	<R0+2
  8280 05:19DD: E9 00 00     	sbc	#^$5
  8281 05:19E0: 90 03        	bcc	L259
  8282 05:19E2: 82 0B 00     	brl	L10145
  8283                        L259:
  8284                        	.line	1970
  8285                        ;				//k_debug_integer("k_upd
                    ateMouseState:MiddleMouseDblClick:",timer - _k_mouseState.la
                    stMiddleDown);
  8286                        ;				pmsg->type = FX_MBUTTON_
                    DBLCLICK;
  8287                        	.line	1972
  8288 05:19E5: A9 0F 0F     	lda	#$f0f
  8289 05:19E8: A0 08 00     	ldy	#$8
  8290 05:19EB: 97 12        	sta	[<L242+pmsg_0],Y
  8291                        ;			}
  8292                        	.line	1973
  8293                        ;			else
  8294 05:19ED: 82 08 00     	brl	L10146
  8295                        L10145:
  8296                        ;			{
  8297                        	.line	1975
  8298                        ;				//k_debug_string("k_upda
                    teMouseState:MiddleMouseDown\r\n");
  8299                        ;				pmsg->type = FX_MBUTTON_
                    DOWN;
  8300                        	.line	1977
  8301 05:19F0: A9 0C 0F     	lda	#$f0c
  8302 05:19F3: A0 08 00     	ldy	#$8
  8303 05:19F6: 97 12        	sta	[<L242+pmsg_0],Y
  8304                        ;			}
  8305                        	.line	1978
  8306                        L10146:
  Thu Dec  3 2020 22:25                                                Page 163


  8307                        ;			_k_mouseState.lastMiddleDown = t
                    imer;
  8308                        	.line	1979
  8309 05:19F8: A5 16        	lda	<L242+timer_0
  8310 05:19FA: 8D xx xx     	sta	|~~_k_mouseState+15
  8311 05:19FD: A5 18        	lda	<L242+timer_0+2
  8312 05:19FF: 8D xx xx     	sta	|~~_k_mouseState+15+2
  8313                        ;		}
  8314                        	.line	1980
  8315                        ;		else
  8316 05:1A02: 82 07 00     	brl	L10147
  8317                        L10144:
  8318                        ;		{
  8319                        	.line	1982
  8320                        ;
  8321                        ;			_k_mouseState.buttonMiddleDown =
                     0;
  8322                        	.line	1984
  8323 05:1A05: E2 20        	sep	#$20
  8324                        	longa	off
  8325 05:1A07: 9C xx xx     	stz	|~~_k_mouseState+14
  8326 05:1A0A: C2 20        	rep	#$20
  8327                        	longa	on
  8328                        ;		}
  8329                        	.line	1985
  8330                        L10147:
  8331                        ;	}
  8332                        	.line	1986
  8333                        L10143:
  8334                        ;
  8335                        ;	_k_mouseState.lastEvent = timer;
  8336                        	.line	1988
  8337 05:1A0C: A5 16        	lda	<L242+timer_0
  8338 05:1A0E: 8D xx xx     	sta	|~~_k_mouseState
  8339 05:1A11: A5 18        	lda	<L242+timer_0+2
  8340 05:1A13: 8D xx xx     	sta	|~~_k_mouseState+2
  8341                        ;
  8342                        ;	return pmsg;
  8343                        	.line	1990
  8344 05:1A16: A6 14        	ldx	<L242+pmsg_0+2
  8345 05:1A18: A5 12        	lda	<L242+pmsg_0
  8346                        L260:
  8347 05:1A1A: A8           	tay
  8348 05:1A1B: A5 10        	lda	<L242+2
  8349 05:1A1D: 85 1C        	sta	<L242+2+12
  8350 05:1A1F: A5 0F        	lda	<L242+1
  8351 05:1A21: 85 1B        	sta	<L242+1+12
  8352 05:1A23: 2B           	pld
  8353 05:1A24: 3B           	tsc
  8354 05:1A25: 18           	clc
  8355 05:1A26: 69 1A 00     	adc	#L242+12
  8356 05:1A29: 1B           	tcs
  8357 05:1A2A: 98           	tya
  8358 05:1A2B: 6B           	rtl
  8359                        ;}
  8360                        	.line	1991
  8361                        	.endblock	1991
  8362             0000000E   L242	equ	14
  Thu Dec  3 2020 22:25                                                Page 164


  8363             00000005   L243	equ	5
  8364 05:1A2C:              	ends
  8365                        	efunc
  8366                        	.endfunc	1991,5,14
  8367                        	.line	1991
  8368                        ;
  8369                        ;PFXOSMESSAGE k_create_process_msg(void FAR *data)
  8370                        ;{
  8371                        	.line	1993
  8372                        	.line	1994
  8373                        	EVTMAN
  8374                        	xdef	~~k_create_process_msg
  8375                        	func
  8376                        	.function	1994
  8377                        ~~k_create_process_msg:
  8378                        	longa	on
  8379                        	longi	on
  8380 05:1A2C: 3B           	tsc
  8381 05:1A2D: 38           	sec
  8382 05:1A2E: E9 04 00     	sbc	#L261
  8383 05:1A31: 1B           	tcs
  8384 05:1A32: 0B           	phd
  8385 05:1A33: 5B           	tcd
  8386             00000004   data_0	set	4
  8387                        	.block	1994
  8388                        ;	PFXOSMESSAGE pmsg = (PFXOSMESSAGE)k_mem_allocate
                    _heap(sizeof(FXOSMESSAGE));
  8389                        ;	if(pmsg)
  8390             00000000   pmsg_1	set	0
  8391                        	.sym	pmsg,0,138,1,32,16
  8392                        	.sym	data,4,129,6,32
  8393 05:1A34: F4 26 00     	pea	#<$26
  8394 05:1A37: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  8395 05:1A3B: 85 01        	sta	<L262+pmsg_1
  8396 05:1A3D: 86 03        	stx	<L262+pmsg_1+2
  8397                        	.line	1996
  8398                        ;	{
  8399 05:1A3F: A5 01        	lda	<L262+pmsg_1
  8400 05:1A41: 05 03        	ora	<L262+pmsg_1+2
  8401 05:1A43: D0 03        	bne	L264
  8402 05:1A45: 82 3E 00     	brl	L10148
  8403                        L264:
  8404                        	.line	1997
  8405                        ;		memset(pmsg,0,sizeof(FXOSMESSAGE));
  8406                        	.line	1998
  8407 05:1A48: F4 26 00     	pea	#<$26
  8408 05:1A4B: F4 00 00     	pea	#<$0
  8409 05:1A4E: D4 03        	pei	<L262+pmsg_1+2
  8410 05:1A50: D4 01        	pei	<L262+pmsg_1
  8411 05:1A52: 22 xx xx xx  	jsl	~~memset
  8412                        ;		pmsg->type = FX_PROCESS;
  8413                        	.line	1999
  8414 05:1A56: A9 00 FF     	lda	#$ff00
  8415 05:1A59: A0 08 00     	ldy	#$8
  8416 05:1A5C: 97 01        	sta	[<L262+pmsg_1],Y
  8417                        ;		pmsg->dest = FX_MSG_DEFAULT;
  8418                        	.line	2000
  8419 05:1A5E: A9 FF FF     	lda	#$ffff
  Thu Dec  3 2020 22:25                                                Page 165


  8420 05:1A61: A0 04 00     	ldy	#$4
  8421 05:1A64: 97 01        	sta	[<L262+pmsg_1],Y
  8422 05:1A66: A9 FF FF     	lda	#$ffff
  8423 05:1A69: A0 06 00     	ldy	#$6
  8424 05:1A6C: 97 01        	sta	[<L262+pmsg_1],Y
  8425                        ;		pmsg->src  = FX_MSG_DEFAULT;
  8426                        	.line	2001
  8427 05:1A6E: A9 FF FF     	lda	#$ffff
  8428 05:1A71: 87 01        	sta	[<L262+pmsg_1]
  8429 05:1A73: A9 FF FF     	lda	#$ffff
  8430 05:1A76: A0 02 00     	ldy	#$2
  8431 05:1A79: 97 01        	sta	[<L262+pmsg_1],Y
  8432                        ;		pmsg->data[0] = 0;
  8433                        	.line	2002
  8434 05:1A7B: E2 20        	sep	#$20
  8435                        	longa	off
  8436 05:1A7D: A9 00        	lda	#$0
  8437 05:1A7F: A0 16 00     	ldy	#$16
  8438 05:1A82: 97 01        	sta	[<L262+pmsg_1],Y
  8439 05:1A84: C2 20        	rep	#$20
  8440                        	longa	on
  8441                        ;	}
  8442                        	.line	2003
  8443                        ;	return pmsg;
  8444                        L10148:
  8445                        	.line	2004
  8446 05:1A86: A6 03        	ldx	<L262+pmsg_1+2
  8447 05:1A88: A5 01        	lda	<L262+pmsg_1
  8448                        L265:
  8449 05:1A8A: A8           	tay
  8450 05:1A8B: A5 06        	lda	<L261+2
  8451 05:1A8D: 85 0A        	sta	<L261+2+4
  8452 05:1A8F: A5 05        	lda	<L261+1
  8453 05:1A91: 85 09        	sta	<L261+1+4
  8454 05:1A93: 2B           	pld
  8455 05:1A94: 3B           	tsc
  8456 05:1A95: 18           	clc
  8457 05:1A96: 69 08 00     	adc	#L261+4
  8458 05:1A99: 1B           	tcs
  8459 05:1A9A: 98           	tya
  8460 05:1A9B: 6B           	rtl
  8461                        ;}
  8462                        	.line	2005
  8463                        	.endblock	2005
  8464             00000004   L261	equ	4
  8465             00000001   L262	equ	1
  8466 05:1A9C:              	ends
  8467                        	efunc
  8468                        	.endfunc	2005,1,4
  8469                        	.line	2005
  8470                        ;
  8471                        ;PFXOSMESSAGE k_create_synthetic_window_msg(HWND h
                    Wnd,MSGTYPE type,void FAR *data,UINT length)
  8472                        ;{
  8473                        	.line	2007
  8474                        	.line	2008
  8475                        	EVTMAN
  8476                        	xdef	~~k_create_synthetic_window_msg
  Thu Dec  3 2020 22:25                                                Page 166


  8477                        	func
  8478                        	.function	2008
  8479                        ~~k_create_synthetic_window_msg:
  8480                        	longa	on
  8481                        	longi	on
  8482 05:1A9C: 3B           	tsc
  8483 05:1A9D: 38           	sec
  8484 05:1A9E: E9 08 00     	sbc	#L266
  8485 05:1AA1: 1B           	tcs
  8486 05:1AA2: 0B           	phd
  8487 05:1AA3: 5B           	tcd
  8488             00000004   hWnd_0	set	4
  8489             00000008   type_0	set	8
  8490             0000000A   data_0	set	10
  8491             0000000E   length_0	set	14
  8492                        	.block	2008
  8493                        ;	PFXOSMESSAGE pmsg = (PFXOSMESSAGE)k_mem_allocate
                    _heap(sizeof(FXOSMESSAGE));
  8494                        ;	if(pmsg)
  8495             00000000   pmsg_1	set	0
  8496                        	.sym	pmsg,0,138,1,32,16
  8497                        	.sym	hWnd,4,129,6,32
  8498                        	.sym	type,8,16,6,16
  8499                        	.sym	data,10,129,6,32
  8500                        	.sym	length,14,16,6,16
  8501 05:1AA4: F4 26 00     	pea	#<$26
  8502 05:1AA7: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  8503 05:1AAB: 85 05        	sta	<L267+pmsg_1
  8504 05:1AAD: 86 07        	stx	<L267+pmsg_1+2
  8505                        	.line	2010
  8506                        ;	{
  8507 05:1AAF: A5 05        	lda	<L267+pmsg_1
  8508 05:1AB1: 05 07        	ora	<L267+pmsg_1+2
  8509 05:1AB3: D0 03        	bne	L269
  8510 05:1AB5: 82 68 00     	brl	L10149
  8511                        L269:
  8512                        	.line	2011
  8513                        ;		if(length < 16)
  8514                        	.line	2012
  8515                        ;		{
  8516 05:1AB8: A5 16        	lda	<L266+length_0
  8517 05:1ABA: C9 10 00     	cmp	#<$10
  8518 05:1ABD: 90 03        	bcc	L270
  8519 05:1ABF: 82 5E 00     	brl	L10150
  8520                        L270:
  8521                        	.line	2013
  8522                        ;			memset(pmsg,0,sizeof(FXOSMESSAGE
                    ));
  8523                        	.line	2014
  8524 05:1AC2: F4 26 00     	pea	#<$26
  8525 05:1AC5: F4 00 00     	pea	#<$0
  8526 05:1AC8: D4 07        	pei	<L267+pmsg_1+2
  8527 05:1ACA: D4 05        	pei	<L267+pmsg_1
  8528 05:1ACC: 22 xx xx xx  	jsl	~~memset
  8529                        ;			pmsg->type = FX_PROCESS;
  8530                        	.line	2015
  8531 05:1AD0: A9 00 FF     	lda	#$ff00
  8532 05:1AD3: A0 08 00     	ldy	#$8
  Thu Dec  3 2020 22:25                                                Page 167


  8533 05:1AD6: 97 05        	sta	[<L267+pmsg_1],Y
  8534                        ;			pmsg->hwnd = hWnd;
  8535                        	.line	2016
  8536 05:1AD8: A5 0C        	lda	<L266+hWnd_0
  8537 05:1ADA: A0 0A 00     	ldy	#$a
  8538 05:1ADD: 97 05        	sta	[<L267+pmsg_1],Y
  8539 05:1ADF: A5 0E        	lda	<L266+hWnd_0+2
  8540 05:1AE1: A0 0C 00     	ldy	#$c
  8541 05:1AE4: 97 05        	sta	[<L267+pmsg_1],Y
  8542                        ;			pmsg->dest = FX_MSG_DEFAULT;
  8543                        	.line	2017
  8544 05:1AE6: A9 FF FF     	lda	#$ffff
  8545 05:1AE9: A0 04 00     	ldy	#$4
  8546 05:1AEC: 97 05        	sta	[<L267+pmsg_1],Y
  8547 05:1AEE: A9 FF FF     	lda	#$ffff
  8548 05:1AF1: A0 06 00     	ldy	#$6
  8549 05:1AF4: 97 05        	sta	[<L267+pmsg_1],Y
  8550                        ;			pmsg->src  = FX_MSG_DEFAULT;
  8551                        	.line	2018
  8552 05:1AF6: A9 FF FF     	lda	#$ffff
  8553 05:1AF9: 87 05        	sta	[<L267+pmsg_1]
  8554 05:1AFB: A9 FF FF     	lda	#$ffff
  8555 05:1AFE: A0 02 00     	ldy	#$2
  8556 05:1B01: 97 05        	sta	[<L267+pmsg_1],Y
  8557                        ;			memcpy(pmsg->data,data,length);
  8558                        	.line	2019
  8559 05:1B03: D4 16        	pei	<L266+length_0
  8560 05:1B05: D4 14        	pei	<L266+data_0+2
  8561 05:1B07: D4 12        	pei	<L266+data_0
  8562 05:1B09: 18           	clc
  8563 05:1B0A: A9 16 00     	lda	#$16
  8564 05:1B0D: 65 05        	adc	<L267+pmsg_1
  8565 05:1B0F: 85 01        	sta	<R0
  8566 05:1B11: A9 00 00     	lda	#$0
  8567 05:1B14: 65 07        	adc	<L267+pmsg_1+2
  8568 05:1B16: 85 03        	sta	<R0+2
  8569 05:1B18: D4 03        	pei	<R0+2
  8570 05:1B1A: D4 01        	pei	<R0
  8571 05:1B1C: 22 xx xx xx  	jsl	~~memcpy
  8572                        ;		}
  8573                        	.line	2020
  8574                        ;	}
  8575                        L10150:
  8576                        	.line	2021
  8577                        ;	return pmsg;
  8578                        L10149:
  8579                        	.line	2022
  8580 05:1B20: A6 07        	ldx	<L267+pmsg_1+2
  8581 05:1B22: A5 05        	lda	<L267+pmsg_1
  8582                        L271:
  8583 05:1B24: A8           	tay
  8584 05:1B25: A5 0A        	lda	<L266+2
  8585 05:1B27: 85 16        	sta	<L266+2+12
  8586 05:1B29: A5 09        	lda	<L266+1
  8587 05:1B2B: 85 15        	sta	<L266+1+12
  8588 05:1B2D: 2B           	pld
  8589 05:1B2E: 3B           	tsc
  8590 05:1B2F: 18           	clc
  Thu Dec  3 2020 22:25                                                Page 168


  8591 05:1B30: 69 14 00     	adc	#L266+12
  8592 05:1B33: 1B           	tcs
  8593 05:1B34: 98           	tya
  8594 05:1B35: 6B           	rtl
  8595                        ;}
  8596                        	.line	2023
  8597                        	.endblock	2023
  8598             00000008   L266	equ	8
  8599             00000005   L267	equ	5
  8600 05:1B36:              	ends
  8601                        	efunc
  8602                        	.endfunc	2023,5,8
  8603                        	.line	2023
  8604                        ;
  8605                        ;
  8606                        ;PFXOSMESSAGE k_create_msg(MSGIRQ type,ULONG timer
                    ,void FAR *data)
  8607                        ;{
  8608                        	.line	2026
  8609                        	.line	2027
  8610                        	EVTMAN
  8611                        	xdef	~~k_create_msg
  8612                        	func
  8613                        	.function	2027
  8614                        ~~k_create_msg:
  8615                        	longa	on
  8616                        	longi	on
  8617 05:1B36: 3B           	tsc
  8618 05:1B37: 38           	sec
  8619 05:1B38: E9 08 00     	sbc	#L272
  8620 05:1B3B: 1B           	tcs
  8621 05:1B3C: 0B           	phd
  8622 05:1B3D: 5B           	tcd
  8623             00000004   type_0	set	4
  8624             00000006   timer_0	set	6
  8625             0000000A   data_0	set	10
  8626                        	.block	2027
  8627                        ;	PFXOSMESSAGE pmsg = (PFXOSMESSAGE)k_mem_allocate
                    _heap(sizeof(FXOSMESSAGE));
  8628                        ;	//PFXOSMESSAGE pmsg = (PFXOSMESSAGE)malloc(sizeo
                    f(FXOSMESSAGE));
  8629                        ;	if(pmsg)
  8630             00000000   pmsg_1	set	0
  8631                        	.sym	pmsg,0,138,1,32,16
  8632                        	.sym	type,4,5,6,16
  8633                        	.sym	timer,6,18,6,32
  8634                        	.sym	data,10,129,6,32
  8635 05:1B3E: F4 26 00     	pea	#<$26
  8636 05:1B41: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  8637 05:1B45: 85 05        	sta	<L273+pmsg_1
  8638 05:1B47: 86 07        	stx	<L273+pmsg_1+2
  8639                        	.line	2030
  8640                        ;	{
  8641 05:1B49: A5 05        	lda	<L273+pmsg_1
  8642 05:1B4B: 05 07        	ora	<L273+pmsg_1+2
  8643 05:1B4D: D0 03        	bne	L275
  8644 05:1B4F: 82 D4 01     	brl	L10151
  8645                        L275:
  Thu Dec  3 2020 22:25                                                Page 169


  8646                        	.line	2031
  8647                        ;		memset(pmsg,0,sizeof(FXOSMESSAGE));
  8648                        	.line	2032
  8649 05:1B52: F4 26 00     	pea	#<$26
  8650 05:1B55: F4 00 00     	pea	#<$0
  8651 05:1B58: D4 07        	pei	<L273+pmsg_1+2
  8652 05:1B5A: D4 05        	pei	<L273+pmsg_1
  8653 05:1B5C: 22 xx xx xx  	jsl	~~memset
  8654                        ;		pmsg->pheap = (LPVOID)0xFFFFFF;
  8655                        	.line	2033
  8656 05:1B60: A9 FF FF     	lda	#$ffff
  8657 05:1B63: A0 0E 00     	ldy	#$e
  8658 05:1B66: 97 05        	sta	[<L273+pmsg_1],Y
  8659 05:1B68: A9 FF 00     	lda	#$ff
  8660 05:1B6B: A0 10 00     	ldy	#$10
  8661 05:1B6E: 97 05        	sta	[<L273+pmsg_1],Y
  8662                        ;		pmsg->dest = FX_MSG_DEFAULT;
  8663                        	.line	2034
  8664 05:1B70: A9 FF FF     	lda	#$ffff
  8665 05:1B73: A0 04 00     	ldy	#$4
  8666 05:1B76: 97 05        	sta	[<L273+pmsg_1],Y
  8667 05:1B78: A9 FF FF     	lda	#$ffff
  8668 05:1B7B: A0 06 00     	ldy	#$6
  8669 05:1B7E: 97 05        	sta	[<L273+pmsg_1],Y
  8670                        ;		pmsg->src  = FX_MSG_DEFAULT;
  8671                        	.line	2035
  8672 05:1B80: A9 FF FF     	lda	#$ffff
  8673 05:1B83: 87 05        	sta	[<L273+pmsg_1]
  8674 05:1B85: A9 FF FF     	lda	#$ffff
  8675 05:1B88: A0 02 00     	ldy	#$2
  8676 05:1B8B: 97 05        	sta	[<L273+pmsg_1],Y
  8677                        ;		//k_debug_integer("k_create_msg:",type);
  8678                        ;		switch(type)
  8679                        	.line	2037
  8680 05:1B8D: A5 0C        	lda	<L272+type_0
  8681 05:1B8F: 82 7A 01     	brl	L10152
  8682                        ;		{
  8683                        	.line	2038
  8684                        ;		case IRQE_KEYBOARD:
  8685                        	.line	2039
  8686                        L10154:
  8687                        ;			pmsg->type = FX_KEY_DOWN;
  8688                        	.line	2040
  8689 05:1B92: A9 10 0F     	lda	#$f10
  8690 05:1B95: A0 08 00     	ldy	#$8
  8691 05:1B98: 97 05        	sta	[<L273+pmsg_1],Y
  8692                        ;			pmsg->data[0] = *((INT*)data) & 
                    0x00FF; // keycode
  8693                        	.line	2041
  8694 05:1B9A: A7 12        	lda	[<L272+data_0]
  8695 05:1B9C: 29 FF 00     	and	#<$ff
  8696 05:1B9F: E2 20        	sep	#$20
  8697                        	longa	off
  8698 05:1BA1: A0 16 00     	ldy	#$16
  8699 05:1BA4: 97 05        	sta	[<L273+pmsg_1],Y
  8700 05:1BA6: C2 20        	rep	#$20
  8701                        	longa	on
  8702                        ;			pmsg->data[1] = (*((INT*)data) >
  Thu Dec  3 2020 22:25                                                Page 170


                     256); // exkeycode
  8703                        	.line	2042
  8704 05:1BA8: 64 01        	stz	<R0
  8705 05:1BAA: 38           	sec
  8706 05:1BAB: A9 00 01     	lda	#$100
  8707 05:1BAE: E7 12        	sbc	[<L272+data_0]
  8708 05:1BB0: 70 03        	bvs	L277
  8709 05:1BB2: 49 00 80     	eor	#$8000
  8710                        L277:
  8711 05:1BB5: 10 03        	bpl	L278
  8712 05:1BB7: 82 02 00     	brl	L276
  8713                        L278:
  8714 05:1BBA: E6 01        	inc	<R0
  8715                        L276:
  8716 05:1BBC: E2 20        	sep	#$20
  8717                        	longa	off
  8718 05:1BBE: A5 01        	lda	<R0
  8719 05:1BC0: A0 17 00     	ldy	#$17
  8720 05:1BC3: 97 05        	sta	[<L273+pmsg_1],Y
  8721 05:1BC5: C2 20        	rep	#$20
  8722                        	longa	on
  8723                        ;			pmsg->data[2] = k_getKeyboardCha
                    r(*((BYTE*)data),pmsg->data[1],pmsg->data[1]); // char
  8724                        	.line	2043
  8725 05:1BC7: A0 17 00     	ldy	#$17
  8726 05:1BCA: B7 05        	lda	[<L273+pmsg_1],Y
  8727 05:1BCC: 29 FF 00     	and	#$ff
  8728 05:1BCF: 48           	pha
  8729 05:1BD0: A0 17 00     	ldy	#$17
  8730 05:1BD3: B7 05        	lda	[<L273+pmsg_1],Y
  8731 05:1BD5: 29 FF 00     	and	#$ff
  8732 05:1BD8: 48           	pha
  8733 05:1BD9: A7 12        	lda	[<L272+data_0]
  8734 05:1BDB: 48           	pha
  8735 05:1BDC: 22 9B 1D 05  	jsl	~~k_getKeyboardChar
  8736 05:1BE0: E2 20        	sep	#$20
  8737                        	longa	off
  8738 05:1BE2: A0 18 00     	ldy	#$18
  8739 05:1BE5: 97 05        	sta	[<L273+pmsg_1],Y
  8740 05:1BE7: C2 20        	rep	#$20
  8741                        	longa	on
  8742                        ;
  8743                        ;			if(pmsg->data[0] > 128)
  8744                        	.line	2045
  8745                        ;			{
  8746 05:1BE9: E2 20        	sep	#$20
  8747                        	longa	off
  8748 05:1BEB: A9 80        	lda	#$80
  8749 05:1BED: A0 16 00     	ldy	#$16
  8750 05:1BF0: D7 05        	cmp	[<L273+pmsg_1],Y
  8751 05:1BF2: C2 20        	rep	#$20
  8752                        	longa	on
  8753 05:1BF4: 90 03        	bcc	L279
  8754 05:1BF6: 82 08 00     	brl	L10155
  8755                        L279:
  8756                        	.line	2046
  8757                        ;				pmsg->type = FX_KEY_UP;
  8758                        	.line	2047
  Thu Dec  3 2020 22:25                                                Page 171


  8759 05:1BF9: A9 12 0F     	lda	#$f12
  8760 05:1BFC: A0 08 00     	ldy	#$8
  8761 05:1BFF: 97 05        	sta	[<L273+pmsg_1],Y
  8762                        ;			}
  8763                        	.line	2048
  8764                        ;
  8765                        ;			break;
  8766                        L10155:
  8767                        	.line	2050
  8768 05:1C01: 82 22 01     	brl	L10153
  8769                        ;		case IRQE_MOUSE:
  8770                        	.line	2051
  8771                        L10156:
  8772                        ;			pmsg->type = FX_MOUSE_MOVE;
  8773                        	.line	2052
  8774 05:1C04: A9 03 0F     	lda	#$f03
  8775 05:1C07: A0 08 00     	ldy	#$8
  8776 05:1C0A: 97 05        	sta	[<L273+pmsg_1],Y
  8777                        ;			pmsg->data[0] = *((BYTE*)data) &
                     7; // mouse byte 1
  8778                        	.line	2053
  8779 05:1C0C: E2 20        	sep	#$20
  8780                        	longa	off
  8781 05:1C0E: A7 12        	lda	[<L272+data_0]
  8782 05:1C10: 29 07        	and	#<$7
  8783 05:1C12: C2 20        	rep	#$20
  8784                        	longa	on
  8785 05:1C14: E2 20        	sep	#$20
  8786                        	longa	off
  8787 05:1C16: A0 16 00     	ldy	#$16
  8788 05:1C19: 97 05        	sta	[<L273+pmsg_1],Y
  8789 05:1C1B: C2 20        	rep	#$20
  8790                        	longa	on
  8791                        ;			pmsg->data[1] = ((LPCHAR)data)[1
                    ];
  8792                        	.line	2054
  8793 05:1C1D: E2 20        	sep	#$20
  8794                        	longa	off
  8795 05:1C1F: A0 01 00     	ldy	#$1
  8796 05:1C22: B7 12        	lda	[<L272+data_0],Y
  8797 05:1C24: A0 17 00     	ldy	#$17
  8798 05:1C27: 97 05        	sta	[<L273+pmsg_1],Y
  8799 05:1C29: C2 20        	rep	#$20
  8800                        	longa	on
  8801                        ;			pmsg->data[2] = ((LPCHAR)data)[2
                    ];
  8802                        	.line	2055
  8803 05:1C2B: E2 20        	sep	#$20
  8804                        	longa	off
  8805 05:1C2D: A0 02 00     	ldy	#$2
  8806 05:1C30: B7 12        	lda	[<L272+data_0],Y
  8807 05:1C32: A0 18 00     	ldy	#$18
  8808 05:1C35: 97 05        	sta	[<L273+pmsg_1],Y
  8809 05:1C37: C2 20        	rep	#$20
  8810                        	longa	on
  8811                        ;			pmsg->data[3] = ((LPCHAR)data)[3
                    ];
  8812                        	.line	2056
  Thu Dec  3 2020 22:25                                                Page 172


  8813 05:1C39: E2 20        	sep	#$20
  8814                        	longa	off
  8815 05:1C3B: A0 03 00     	ldy	#$3
  8816 05:1C3E: B7 12        	lda	[<L272+data_0],Y
  8817 05:1C40: A0 19 00     	ldy	#$19
  8818 05:1C43: 97 05        	sta	[<L273+pmsg_1],Y
  8819 05:1C45: C2 20        	rep	#$20
  8820                        	longa	on
  8821                        ;			pmsg->data[4] = ((LPCHAR)data)[4
                    ];
  8822                        	.line	2057
  8823 05:1C47: E2 20        	sep	#$20
  8824                        	longa	off
  8825 05:1C49: A0 04 00     	ldy	#$4
  8826 05:1C4C: B7 12        	lda	[<L272+data_0],Y
  8827 05:1C4E: A0 1A 00     	ldy	#$1a
  8828 05:1C51: 97 05        	sta	[<L273+pmsg_1],Y
  8829 05:1C53: C2 20        	rep	#$20
  8830                        	longa	on
  8831                        ;
  8832                        ;			break;
  8833                        	.line	2059
  8834 05:1C55: 82 CE 00     	brl	L10153
  8835                        ;		case IRQE_COM1:
  8836                        	.line	2060
  8837                        L10157:
  8838                        ;			pmsg->type = FX_COM1_DATA;
  8839                        	.line	2061
  8840 05:1C58: A9 00 FC     	lda	#$fc00
  8841 05:1C5B: A0 08 00     	ldy	#$8
  8842 05:1C5E: 97 05        	sta	[<L273+pmsg_1],Y
  8843                        ;			pmsg->data[0] = ((LPCHAR)data)[0
                    ];
  8844                        	.line	2062
  8845 05:1C60: E2 20        	sep	#$20
  8846                        	longa	off
  8847 05:1C62: A7 12        	lda	[<L272+data_0]
  8848 05:1C64: A0 16 00     	ldy	#$16
  8849 05:1C67: 97 05        	sta	[<L273+pmsg_1],Y
  8850 05:1C69: C2 20        	rep	#$20
  8851                        	longa	on
  8852                        ;			break;
  8853                        	.line	2063
  8854 05:1C6B: 82 B8 00     	brl	L10153
  8855                        ;		case IRQE_COM2:
  8856                        	.line	2064
  8857                        L10158:
  8858                        ;			pmsg->type = FX_COM2_DATA;
  8859                        	.line	2065
  8860 05:1C6E: A9 01 FC     	lda	#$fc01
  8861 05:1C71: A0 08 00     	ldy	#$8
  8862 05:1C74: 97 05        	sta	[<L273+pmsg_1],Y
  8863                        ;			pmsg->data[0] = ((LPCHAR)data)[0
                    ];
  8864                        	.line	2066
  8865 05:1C76: E2 20        	sep	#$20
  8866                        	longa	off
  8867 05:1C78: A7 12        	lda	[<L272+data_0]
  Thu Dec  3 2020 22:25                                                Page 173


  8868 05:1C7A: A0 16 00     	ldy	#$16
  8869 05:1C7D: 97 05        	sta	[<L273+pmsg_1],Y
  8870 05:1C7F: C2 20        	rep	#$20
  8871                        	longa	on
  8872                        ;			break;
  8873                        	.line	2067
  8874 05:1C81: 82 A2 00     	brl	L10153
  8875                        ;		case IRQE_SOL_TIMER:
  8876                        	.line	2068
  8877                        L10159:
  8878                        ;			pmsg->type = FX_PROCESS_TIMER;
  8879                        	.line	2069
  8880 05:1C84: A9 F1 FF     	lda	#$fff1
  8881 05:1C87: A0 08 00     	ldy	#$8
  8882 05:1C8A: 97 05        	sta	[<L273+pmsg_1],Y
  8883                        ;			pmsg->data[0] = 0;
  8884                        	.line	2070
  8885 05:1C8C: E2 20        	sep	#$20
  8886                        	longa	off
  8887 05:1C8E: A9 00        	lda	#$0
  8888 05:1C90: A0 16 00     	ldy	#$16
  8889 05:1C93: 97 05        	sta	[<L273+pmsg_1],Y
  8890 05:1C95: C2 20        	rep	#$20
  8891                        	longa	on
  8892                        ;			break;
  8893                        	.line	2071
  8894 05:1C97: 82 8C 00     	brl	L10153
  8895                        ;		case IRQE_FLOPPY:
  8896                        	.line	2072
  8897                        L10160:
  8898                        ;			pmsg->type = FX_PROCESS_FLOPPY;
  8899                        	.line	2073
  8900 05:1C9A: A9 F2 FF     	lda	#$fff2
  8901 05:1C9D: A0 08 00     	ldy	#$8
  8902 05:1CA0: 97 05        	sta	[<L273+pmsg_1],Y
  8903                        ;			pmsg->pheap = k_mem_allocate_hea
                    p(512);
  8904                        	.line	2074
  8905 05:1CA2: F4 00 02     	pea	#<$200
  8906 05:1CA5: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  8907 05:1CA9: 85 01        	sta	<R0
  8908 05:1CAB: 86 03        	stx	<R0+2
  8909 05:1CAD: A5 01        	lda	<R0
  8910 05:1CAF: A0 0E 00     	ldy	#$e
  8911 05:1CB2: 97 05        	sta	[<L273+pmsg_1],Y
  8912 05:1CB4: A5 03        	lda	<R0+2
  8913 05:1CB6: A0 10 00     	ldy	#$10
  8914 05:1CB9: 97 05        	sta	[<L273+pmsg_1],Y
  8915                        ;			memcpy(pmsg->pheap,data,512);
  8916                        	.line	2075
  8917 05:1CBB: F4 00 02     	pea	#<$200
  8918 05:1CBE: D4 14        	pei	<L272+data_0+2
  8919 05:1CC0: D4 12        	pei	<L272+data_0
  8920 05:1CC2: A0 10 00     	ldy	#$10
  8921 05:1CC5: B7 05        	lda	[<L273+pmsg_1],Y
  8922 05:1CC7: 48           	pha
  8923 05:1CC8: A0 0E 00     	ldy	#$e
  8924 05:1CCB: B7 05        	lda	[<L273+pmsg_1],Y
  Thu Dec  3 2020 22:25                                                Page 174


  8925 05:1CCD: 48           	pha
  8926 05:1CCE: 22 xx xx xx  	jsl	~~memcpy
  8927                        ;			//k_debug_integer("IRQE_FLOPPY:"
                    ,FX_PROCESS_FLOPPY);
  8928                        ;			break;
  8929                        	.line	2077
  8930 05:1CD2: 82 51 00     	brl	L10153
  8931                        ;		case IRQE_SDCARD:
  8932                        	.line	2078
  8933                        L10161:
  8934                        ;			pmsg->type = FX_PROCESS_SDCARD;
  8935                        	.line	2079
  8936 05:1CD5: A9 F3 FF     	lda	#$fff3
  8937 05:1CD8: A0 08 00     	ldy	#$8
  8938 05:1CDB: 97 05        	sta	[<L273+pmsg_1],Y
  8939                        ;			pmsg->data[0] = 0;
  8940                        	.line	2080
  8941 05:1CDD: E2 20        	sep	#$20
  8942                        	longa	off
  8943 05:1CDF: A9 00        	lda	#$0
  8944 05:1CE1: A0 16 00     	ldy	#$16
  8945 05:1CE4: 97 05        	sta	[<L273+pmsg_1],Y
  8946 05:1CE6: C2 20        	rep	#$20
  8947                        	longa	on
  8948                        ;			//pmsg->pheap = k_mem_allocate_h
                    eap(512);
  8949                        ;			//memcpy(pmsg->pheap,data,512);
  8950                        ;			break;
  8951                        	.line	2083
  8952 05:1CE8: 82 3B 00     	brl	L10153
  8953                        ;		case IRQE_SDCARD_INS:
  8954                        	.line	2084
  8955                        L10162:
  8956                        ;			pmsg->type = FX_PROCESS_SDCARD;
  8957                        	.line	2085
  8958 05:1CEB: A9 F3 FF     	lda	#$fff3
  8959 05:1CEE: A0 08 00     	ldy	#$8
  8960 05:1CF1: 97 05        	sta	[<L273+pmsg_1],Y
  8961                        ;			pmsg->data[0] = 0;
  8962                        	.line	2086
  8963 05:1CF3: E2 20        	sep	#$20
  8964                        	longa	off
  8965 05:1CF5: A9 00        	lda	#$0
  8966 05:1CF7: A0 16 00     	ldy	#$16
  8967 05:1CFA: 97 05        	sta	[<L273+pmsg_1],Y
  8968 05:1CFC: C2 20        	rep	#$20
  8969                        	longa	on
  8970                        ;			//pmsg->pheap = k_mem_allocate_h
                    eap(512);
  8971                        ;			//memcpy(pmsg->pheap,data,512);
  8972                        ;			break;
  8973                        	.line	2089
  8974 05:1CFE: 82 25 00     	brl	L10153
  8975                        ;		default:
  8976                        	.line	2090
  8977                        L10163:
  8978                        ;			pmsg->type = 99;//IRQE_UNKNOWN;
  8979                        	.line	2091
  Thu Dec  3 2020 22:25                                                Page 175


  8980 05:1D01: A9 63 00     	lda	#$63
  8981 05:1D04: A0 08 00     	ldy	#$8
  8982 05:1D07: 97 05        	sta	[<L273+pmsg_1],Y
  8983                        ;			break;
  8984                        	.line	2092
  8985 05:1D09: 82 1A 00     	brl	L10153
  8986                        ;		}
  8987                        	.line	2093
  8988                        L10152:
  8989                        	xref	~~~fsw
  8990 05:1D0C: 22 xx xx xx  	jsl	~~~fsw
  8991 05:1D10: 01 00        	dw	1
  8992 05:1D12: 08 00        	dw	8
  8993 05:1D14: 00 1D        	dw	L10163-1
  8994 05:1D16: 91 1B        	dw	L10154-1
  8995 05:1D18: 03 1C        	dw	L10156-1
  8996 05:1D1A: 57 1C        	dw	L10157-1
  8997 05:1D1C: 6D 1C        	dw	L10158-1
  8998 05:1D1E: 83 1C        	dw	L10159-1
  8999 05:1D20: 99 1C        	dw	L10160-1
  9000 05:1D22: D4 1C        	dw	L10161-1
  9001 05:1D24: EA 1C        	dw	L10162-1
  9002                        L10153:
  9003                        ;		//k_debug_integer("k_create_msg pmsg->ty
                    pe:",pmsg->type);
  9004                        ;	}
  9005                        	.line	2095
  9006                        ;	return pmsg;
  9007                        L10151:
  9008                        	.line	2096
  9009 05:1D26: A6 07        	ldx	<L273+pmsg_1+2
  9010 05:1D28: A5 05        	lda	<L273+pmsg_1
  9011                        L280:
  9012 05:1D2A: A8           	tay
  9013 05:1D2B: A5 0A        	lda	<L272+2
  9014 05:1D2D: 85 14        	sta	<L272+2+10
  9015 05:1D2F: A5 09        	lda	<L272+1
  9016 05:1D31: 85 13        	sta	<L272+1+10
  9017 05:1D33: 2B           	pld
  9018 05:1D34: 3B           	tsc
  9019 05:1D35: 18           	clc
  9020 05:1D36: 69 12 00     	adc	#L272+10
  9021 05:1D39: 1B           	tcs
  9022 05:1D3A: 98           	tya
  9023 05:1D3B: 6B           	rtl
  9024                        ;}
  9025                        	.line	2097
  9026                        	.endblock	2097
  9027             00000008   L272	equ	8
  9028             00000005   L273	equ	5
  9029 05:1D3C:              	ends
  9030                        	efunc
  9031                        	.endfunc	2097,5,8
  9032                        	.line	2097
  9033                        ;
  9034                        ;void k_destory_msg(PFXOSMESSAGE pmsg)
  9035                        ;{
  9036                        	.line	2099
  Thu Dec  3 2020 22:25                                                Page 176


  9037                        	.line	2100
  9038                        	EVTMAN
  9039                        	xdef	~~k_destory_msg
  9040                        	func
  9041                        	.function	2100
  9042                        ~~k_destory_msg:
  9043                        	longa	on
  9044                        	longi	on
  9045 05:1D3C: 3B           	tsc
  9046 05:1D3D: 38           	sec
  9047 05:1D3E: E9 00 00     	sbc	#L281
  9048 05:1D41: 1B           	tcs
  9049 05:1D42: 0B           	phd
  9050 05:1D43: 5B           	tcd
  9051             00000004   pmsg_0	set	4
  9052                        	.block	2100
  9053                        ;	if(pmsg!=NULL)
  9054                        	.sym	pmsg,4,138,6,32,16
  9055                        	.line	2101
  9056                        ;	{
  9057 05:1D44: A5 04        	lda	<L281+pmsg_0
  9058 05:1D46: 05 06        	ora	<L281+pmsg_0+2
  9059 05:1D48: D0 03        	bne	L284
  9060 05:1D4A: 82 3E 00     	brl	L10164
  9061                        L284:
  9062                        	.line	2102
  9063                        ;		if(pmsg->pheap!=NULL && pmsg->pheap!=(LP
                    VOID)0xFFFFFF)
  9064                        	.line	2103
  9065                        ;			k_dealloc_message_arg(pmsg->phea
                    p);
  9066 05:1D4D: A0 0E 00     	ldy	#$e
  9067 05:1D50: B7 04        	lda	[<L281+pmsg_0],Y
  9068 05:1D52: A0 10 00     	ldy	#$10
  9069 05:1D55: 17 04        	ora	[<L281+pmsg_0],Y
  9070 05:1D57: D0 03        	bne	L285
  9071 05:1D59: 82 27 00     	brl	L10165
  9072                        L285:
  9073 05:1D5C: A0 0E 00     	ldy	#$e
  9074 05:1D5F: B7 04        	lda	[<L281+pmsg_0],Y
  9075 05:1D61: C9 FF FF     	cmp	#<$ffffff
  9076 05:1D64: D0 08        	bne	L286
  9077 05:1D66: A0 10 00     	ldy	#$10
  9078 05:1D69: B7 04        	lda	[<L281+pmsg_0],Y
  9079 05:1D6B: C9 FF 00     	cmp	#^$ffffff
  9080                        L286:
  9081 05:1D6E: D0 03        	bne	L287
  9082 05:1D70: 82 10 00     	brl	L10165
  9083                        L287:
  9084                        	.line	2104
  9085 05:1D73: A0 10 00     	ldy	#$10
  9086 05:1D76: B7 04        	lda	[<L281+pmsg_0],Y
  9087 05:1D78: 48           	pha
  9088 05:1D79: A0 0E 00     	ldy	#$e
  9089 05:1D7C: B7 04        	lda	[<L281+pmsg_0],Y
  9090 05:1D7E: 48           	pha
  9091 05:1D7F: 22 0A 13 05  	jsl	~~k_dealloc_message_arg
  9092                        ;
  Thu Dec  3 2020 22:25                                                Page 177


  9093                        ;		/*
  9094                        ;		if(pmsg->pheap == (LPVOID)0xFFFFFF)
  9095                        ;		{
  9096                        ;			//k_debug_pointer("k_destory_msg
                    :IRQ MSG:",pmsg);
  9097                        ;			free(pmsg);
  9098                        ;		}
  9099                        ;		else
  9100                        ;			k_mem_deallocate_heap(pmsg);
  9101                        ;		*/
  9102                        ;		k_mem_deallocate_heap(pmsg);
  9103                        L10165:
  9104                        	.line	2115
  9105 05:1D83: D4 06        	pei	<L281+pmsg_0+2
  9106 05:1D85: D4 04        	pei	<L281+pmsg_0
  9107 05:1D87: 22 xx xx xx  	jsl	~~k_mem_deallocate_heap
  9108                        ;	}
  9109                        	.line	2116
  9110                        ;}
  9111                        L10164:
  9112                        	.line	2117
  9113                        L288:
  9114 05:1D8B: A5 02        	lda	<L281+2
  9115 05:1D8D: 85 06        	sta	<L281+2+4
  9116 05:1D8F: A5 01        	lda	<L281+1
  9117 05:1D91: 85 05        	sta	<L281+1+4
  9118 05:1D93: 2B           	pld
  9119 05:1D94: 3B           	tsc
  9120 05:1D95: 18           	clc
  9121 05:1D96: 69 04 00     	adc	#L281+4
  9122 05:1D99: 1B           	tcs
  9123 05:1D9A: 6B           	rtl
  9124                        	.endblock	2117
  9125             00000000   L281	equ	0
  9126             00000001   L282	equ	1
  9127 05:1D9B:              	ends
  9128                        	efunc
  9129                        	.endfunc	2117,1,0
  9130                        	.line	2117
  9131                        ;
  9132                        ;
  9133                        ;KEYCODE k_getKeyboardChar(SCANCODE sc,int isExt,i
                    nt isShift)
  9134                        ;{
  9135                        	.line	2120
  9136                        	.line	2121
  9137                        	EVTMAN
  9138                        	xdef	~~k_getKeyboardChar
  9139                        	func
  9140                        	.function	2121
  9141                        ~~k_getKeyboardChar:
  9142                        	longa	on
  9143                        	longi	on
  9144 05:1D9B: 3B           	tsc
  9145 05:1D9C: 38           	sec
  9146 05:1D9D: E9 05 00     	sbc	#L289
  9147 05:1DA0: 1B           	tcs
  9148 05:1DA1: 0B           	phd
  Thu Dec  3 2020 22:25                                                Page 178


  9149 05:1DA2: 5B           	tcd
  9150             00000004   sc_0	set	4
  9151             00000006   isExt_0	set	6
  9152             00000008   isShift_0	set	8
  9153                        	.block	2121
  9154                        ;	KEYCODE kc = 0;
  9155                        ;
  9156                        ;	if(isShift)
  9157             00000000   kc_1	set	0
  9158                        	.sym	kc,0,14,1,8
  9159                        	.sym	sc,4,14,6,8
  9160                        	.sym	isExt,6,5,6,16
  9161                        	.sym	isShift,8,5,6,16
  9162 05:1DA3: E2 20        	sep	#$20
  9163                        	longa	off
  9164 05:1DA5: 64 05        	stz	<L290+kc_1
  9165 05:1DA7: C2 20        	rep	#$20
  9166                        	longa	on
  9167                        	.line	2124
  9168                        ;		kc =  _k_keyCodesShiftSet[sc];
  9169 05:1DA9: A5 0D        	lda	<L289+isShift_0
  9170 05:1DAB: D0 03        	bne	L292
  9171 05:1DAD: 82 15 00     	brl	L10166
  9172                        L292:
  9173                        	.line	2125
  9174 05:1DB0: A5 09        	lda	<L289+sc_0
  9175 05:1DB2: 29 FF 00     	and	#$ff
  9176 05:1DB5: 85 01        	sta	<R0
  9177 05:1DB7: E2 20        	sep	#$20
  9178                        	longa	off
  9179 05:1DB9: A6 01        	ldx	<R0
  9180 05:1DBB: BD xx xx     	lda	|~~_k_keyCodesShiftSet,X
  9181 05:1DBE: 85 05        	sta	<L290+kc_1
  9182 05:1DC0: C2 20        	rep	#$20
  9183                        	longa	on
  9184                        ;	else
  9185 05:1DC2: 82 12 00     	brl	L10167
  9186                        L10166:
  9187                        ;		kc =  _k_keyCodesSet[sc];
  9188                        	.line	2127
  9189 05:1DC5: A5 09        	lda	<L289+sc_0
  9190 05:1DC7: 29 FF 00     	and	#$ff
  9191 05:1DCA: 85 01        	sta	<R0
  9192 05:1DCC: E2 20        	sep	#$20
  9193                        	longa	off
  9194 05:1DCE: A6 01        	ldx	<R0
  9195 05:1DD0: BD xx xx     	lda	|~~_k_keyCodesSet,X
  9196 05:1DD3: 85 05        	sta	<L290+kc_1
  9197 05:1DD5: C2 20        	rep	#$20
  9198                        	longa	on
  9199                        L10167:
  9200                        ;
  9201                        ;	if(kc == 0)
  9202                        	.line	2129
  9203                        ;	{
  9204 05:1DD7: A5 05        	lda	<L290+kc_1
  9205 05:1DD9: 29 FF 00     	and	#$ff
  9206 05:1DDC: F0 03        	beq	L293
  Thu Dec  3 2020 22:25                                                Page 179


  9207 05:1DDE: 82 28 00     	brl	L10168
  9208                        L293:
  9209                        	.line	2130
  9210                        ;		k_debug_integer("UNMAPPED KEY:",sc);
  9211                        	.line	2131
  9212 05:1DE1: A5 09        	lda	<L289+sc_0
  9213 05:1DE3: 29 FF 00     	and	#$ff
  9214 05:1DE6: 48           	pha
  9215 05:1DE7: F4 xx xx     	pea	#^L241
  9216 05:1DEA: F4 xx xx     	pea	#<L241
  9217 05:1DED: 22 xx xx xx  	jsl	~~k_debug_integer
  9218                        ;		k_debug_integer("UNMAPPED isExt:",isExt)
                    ;
  9219                        	.line	2132
  9220 05:1DF1: D4 0B        	pei	<L289+isExt_0
  9221 05:1DF3: F4 xx xx     	pea	#^L241+14
  9222 05:1DF6: F4 xx xx     	pea	#<L241+14
  9223 05:1DF9: 22 xx xx xx  	jsl	~~k_debug_integer
  9224                        ;		k_debug_integer("UNMAPPED isShift:",isSh
                    ift);
  9225                        	.line	2133
  9226 05:1DFD: D4 0D        	pei	<L289+isShift_0
  9227 05:1DFF: F4 xx xx     	pea	#^L241+30
  9228 05:1E02: F4 xx xx     	pea	#<L241+30
  9229 05:1E05: 22 xx xx xx  	jsl	~~k_debug_integer
  9230                        ;	}
  9231                        	.line	2134
  9232                        ;	return kc;
  9233                        L10168:
  9234                        	.line	2135
  9235 05:1E09: A5 05        	lda	<L290+kc_1
  9236 05:1E0B: 29 FF 00     	and	#$ff
  9237                        L294:
  9238 05:1E0E: A8           	tay
  9239 05:1E0F: A5 07        	lda	<L289+2
  9240 05:1E11: 85 0D        	sta	<L289+2+6
  9241 05:1E13: A5 06        	lda	<L289+1
  9242 05:1E15: 85 0C        	sta	<L289+1+6
  9243 05:1E17: 2B           	pld
  9244 05:1E18: 3B           	tsc
  9245 05:1E19: 18           	clc
  9246 05:1E1A: 69 0B 00     	adc	#L289+6
  9247 05:1E1D: 1B           	tcs
  9248 05:1E1E: 98           	tya
  9249 05:1E1F: 6B           	rtl
  9250                        ;}
  9251                        	.line	2136
  9252                        	.endblock	2136
  9253             00000005   L289	equ	5
  9254             00000005   L290	equ	5
  9255 05:1E20:              	ends
  9256                        	efunc
  9257                        	.endfunc	2136,5,5
  9258                        	.line	2136
  9259                        	data
  9260                        L241:
  9261 00:057C: 55 4E 4D 41  	db	$55,$4E,$4D,$41,$50,$50,$45,$44,$20,$4B,
                    $45,$59,$3A,$00,$55
  Thu Dec  3 2020 22:25                                                Page 180


       00:0580: 50 50 45 44 
       00:0584: 20 4B 45 59 
       00:0588: 3A 00 55 
  9262 00:058B: 4E 4D 41 50  	db	$4E,$4D,$41,$50,$50,$45,$44,$20,$69,$73,
                    $45,$78,$74,$3A,$00
       00:058F: 50 45 44 20 
       00:0593: 69 73 45 78 
       00:0597: 74 3A 00 
  9263 00:059A: 55 4E 4D 41  	db	$55,$4E,$4D,$41,$50,$50,$45,$44,$20,$69,
                    $73,$53,$68,$69,$66
       00:059E: 50 50 45 44 
       00:05A2: 20 69 73 53 
       00:05A6: 68 69 66 
  9264 00:05A9: 74 3A 00     	db	$74,$3A,$00
  9265 00:05AC:              	ends
  9266                        ;
  9267                        	.line	2136
  9268                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.c",2120
  9269                        	xref	~~k_exec_set_process_foreground
  9270                        	xref	~~k_initialize
  9271                        	xref	~~k_point_hit_scan
  9272                        	xref	~~k_point_in_any_nodeslist
  9273                        	xref	~~k_user_getFocusWindow
  9274                        	xref	~~k_user_getDesktopWindow
  9275                        	xref	~~k_getHandleFromWindow
  9276                        	xref	~~k_getWindowList
  9277                        	xref	~~k_initializeWindowManager
  9278                        	xref	~~k_mem_deallocate_heap
  9279                        	xref	~~k_mem_allocate_heap
  9280                        	xref	~~k_heap_integrity_check
  9281                        	xref	~~k_exec_get_current_process
  9282                        	xref	~~k_exec_set_current_process
  9283                        	xref	~~k_exec_launchProcess
  9284                        	xref	~~k_exec_throw_exception
  9285                        	xref	~~k_initalize_executive
  9286                        	xref	~~k_debug_strings
  9287                        	xref	~~k_debug_long
  9288                        	xref	~~k_debug_integer
  9289                        	xref	~~k_debug_pointer
  9290                        	xref	~~k_debug_string
  9291                        	xref	~~k_nodelist_foreach_data
  9292                        	xref	~~k_enqueue_with_lock
  9293                        	xref	~~k_dequeue
  9294                        	xref	~~k_enqueue
  9295                        	xref	~~strcpy
  9296                        	xref	~~memset
  9297                        	xref	~~memcpy
  9298                        	xref	~~_system_timer
  9299                        	udata
  9300                        ~~_k_mouseState
  9301 00:0000:              	ds	23
  9302 00:0017:              	ends
  9303                        	udata
  9304                        ~~eventProcess
  9305 00:0017:              	ds	1024
  9306 00:0417:              	ends
  9307                        	udata
  Thu Dec  3 2020 22:25                                                Page 181


  9308                        ~~eventProcs
  9309 00:0417:              	ds	1024
  9310 00:0817:              	ends
  9311                        	.sym	~~k_exec_set_process_foreground,~~k_exec
                    _set_process_foreground,69,18,0
  9312                        	.sym	~~k_attach_process_events,~~k_attach_pro
                    cess_events,69,2,0
  9313                        	.sym	~~k_initialize,~~k_initialize,69,18,0
  9314                        	.sym	~~_system_timer,~~_system_timer,18,18,32
  9315                        	.sym	DllMain,0,641,14,32
  9316                        	.sym	~~DoWndProcs,~~DoWndProcs,65,2,0
  9317                        	.sym	~~initHD,~~initHD,14,2,8
  9318                        	.sym	~~THIS_MODULE,~~THIS_MODULE,18,3,32
  9319                        	.sym	~~_subTick,~~_subTick,16,3,16
  9320                        	.sym	~~_k_mouseState,~~_k_mouseState,10,3,184
                    ,59
  9321                        	.sym	~~_k_eventQueue,~~_k_eventQueue,138,3,32
                    ,7
  9322                        	.sym	~~_k_bNCLockedFocus,~~_k_bNCLockedFocus,
                    14,3,8
  9323                        	.sym	~~_k_hLockedFocus,~~_k_hLockedFocus,129,
                    3,32
  9324                        	.sym	~~_k_system_timer,~~_k_system_timer,18,3
                    ,32
  9325                        	.sym	~~eventProcess,~~eventProcess,1130,3,32,
                    58,256
  9326                        	.sym	~~eventProcs,~~eventProcs,5217,3,32,256
  9327                        	.sym	FRESULT,0,5,14,16
  9328                        	.sym	MKFS_PARM,0,10,14,80,107
  9329                        	.sym	FILINFO,0,10,14,176,106
  9330                        	.sym	DIR,0,10,14,352,105
  9331                        	.sym	FIL,0,10,14,4400,104
  9332                        	.sym	FFOBJID,0,10,14,128,103
  9333                        	.sym	FATFS,0,10,14,4472,102
  9334                        	.sym	LBA_t,0,18,14,32
  9335                        	.sym	FSIZE_t,0,18,14,32
  9336                        	.sym	TCHAR,0,14,14,8
  9337                        	.sym	PFXDOSDEVICE,0,138,14,32,101
  9338                        	.sym	FXDOSDEVICE,0,10,14,5648,101
  9339                        	.sym	DOSINITDEVICE,0,641,14,32
  9340                        	.sym	DOSSECTORWRITER,0,654,14,32
  9341                        	.sym	DOSSECTORREADER,0,654,14,32
  9342                        	.sym	PIDENTIFY_DEVICE_DATA,0,138,14,32,100
  9343                        	.sym	IDENTIFY_DEVICE_DATA,0,10,14,4096,100
  9344                        	.sym	PIDSECTOR,0,138,14,32,77
  9345                        	.sym	IDSECTOR,0,10,14,2048,77
  9346                        	.sym	PLFN,0,138,14,32,76
  9347                        	.sym	LFN,0,10,14,256,76
  9348                        	.sym	PFAT16ENTRYLONG,0,138,14,32,75
  9349                        	.sym	FAT16ENTRYLONG,0,10,14,288,75
  9350                        	.sym	PFAT16ENTRY,0,138,14,32,74
  9351                        	.sym	FAT16ENTRY,0,10,14,256,74
  9352                        	.sym	Fat16BootSector,0,10,14,4096,73
  9353                        	.sym	PPARTITIONTABLE,0,138,14,32,72
  9354                        	.sym	PARTITIONTABLE,0,10,14,128,72
  9355                        	.sym	PFATBOOTSECTOR,0,138,14,32,71
  9356                        	.sym	FATBOOTSECTOR,0,10,14,928,71
  9357                        	.sym	fat_BS_t,0,10,14,688,70
  Thu Dec  3 2020 22:25                                                Page 182


  9358                        	.sym	fat_extBS_16_t,0,10,14,192,69
  9359                        	.sym	PFAT32EXT,0,138,14,32,68
  9360                        	.sym	fat_extBS_32_t,0,10,14,416,68
  9361                        	.sym	P_FX_FAT_DIR_INFO,0,138,14,32,67
  9362                        	.sym	FX_FAT_DIR_INFO,0,10,14,256,67
  9363                        	.sym	PFILEINFO,0,138,14,32,66
  9364                        	.sym	FILEINFO,0,10,14,136,66
  9365                        	.sym	PDISKINFO,0,138,14,32,65
  9366                        	.sym	DISKINFO,0,10,14,416,65
  9367                        	.sym	PDIRENTRY,0,138,14,32,64
  9368                        	.sym	DIRENTRY,0,10,14,256,64
  9369                        	.sym	PCOMMANDARGS,0,138,14,32,63
  9370                        	.sym	COMMANDARGS,0,10,14,64,63
  9371                        	.sym	PTOKENIZESTATE,0,133,14,32
  9372                        	.sym	TOKENIZESTATE,0,5,14,16
  9373                        	.sym	PTOKEN,0,138,14,32,62
  9374                        	.sym	TOKEN,0,10,14,64,62
  9375                        	.sym	PTOKENTYPE,0,133,14,32
  9376                        	.sym	TOKENTYPE,0,5,14,16
  9377                        	.sym	FXCommandHandler,0,656,14,32
  9378                        	.sym	PCONSOLECTX,0,138,14,32,61
  9379                        	.sym	CONSOLECTX,0,10,14,1144,61
  9380                        	.sym	PSPINNERCTX,0,138,14,32,60
  9381                        	.sym	SPINNERCTX,0,10,14,48,60
  9382                        	.sym	~~_k_keyCodesExtSet,~~_k_keyCodesExtSet,
                    110,2,0,1
  9383                        	.sym	~~_k_keyCodesShiftSet,~~_k_keyCodesShift
                    Set,110,2,0,89
  9384                        	.sym	~~_k_keyCodesSet,~~_k_keyCodesSet,110,2,
                    0,89
  9385                        	.sym	~~k_send_process_command_message,~~k_sen
                    d_process_command_message,78,2,0
  9386                        	.sym	~~k_send_command_message,~~k_send_comman
                    d_message,78,2,0
  9387                        	.sym	~~k_send_window_message,~~k_send_window_
                    message,78,2,0
  9388                        	.sym	~~k_send_message,~~k_send_message,78,2,0
  9389                        	.sym	~~k_dealloc_message_arg,~~k_dealloc_mess
                    age_arg,65,2,0
  9390                        	.sym	~~k_alloc_message_arg,~~k_alloc_message_
                    arg,1089,2,32
  9391                        	.sym	~~k_isNonClient,~~k_isNonClient,78,2,0
  9392                        	.sym	~~k_destory_msg,~~k_destory_msg,65,2,0
  9393                        	.sym	~~k_updateMouseState,~~k_updateMouseStat
                    e,1098,2,32,16
  9394                        	.sym	~~k_create_synthetic_window_msg,~~k_crea
                    te_synthetic_window_msg,1098,2,32,16
  9395                        	.sym	~~k_create_process_msg,~~k_create_proces
                    s_msg,1098,2,32,16
  9396                        	.sym	~~k_create_msg,~~k_create_msg,1098,2,32,
                    16
  9397                        	.sym	~~k_irq_device_event,~~k_irq_device_even
                    t,65,2,0
  9398                        	.sym	~~k_unattach_events,~~k_unattach_events,
                    69,2,0
  9399                        	.sym	~~k_attach_events,~~k_attach_events,69,2
                    ,0
  9400                        	.sym	~~k_event_unlock_focus,~~k_event_unlock_
  Thu Dec  3 2020 22:25                                                Page 183


                    focus,1089,2,32
  9401                        	.sym	~~k_event_get_locked_focus,~~k_event_get
                    _locked_focus,1089,2,32
  9402                        	.sym	~~k_event_lock_focus_ex,~~k_event_lock_f
                    ocus_ex,78,2,0
  9403                        	.sym	~~k_event_lock_focus,~~k_event_lock_focu
                    s,78,2,0
  9404                        	.sym	~~k_signal_sol_event,~~k_signal_sol_even
                    t,65,2,0
  9405                        	.sym	~~k_event_loop,~~k_event_loop,65,2,0
  9406                        	.sym	~~k_do_processes,~~k_do_processes,65,2,0
  9407                        	.sym	~~k_do_procs,~~k_do_procs,65,2,0
  9408                        	.sym	~~IdleProc,~~IdleProc,65,2,0
  9409                        	.sym	~~k_getKeyboardChar,~~k_getKeyboardChar,
                    78,2,0
  9410                        	.sym	~~k_initalize_event_manager,~~k_initaliz
                    e_event_manager,65,2,0
  9411                        	.sym	~~k_get_systemtimer,~~k_get_systemtimer,
                    82,2,0
  9412                        	.sym	PMOUSE_MSG_STATE,0,138,14,32,59
  9413                        	.sym	MOUSE_MSG_STATE,0,10,14,184,59
  9414                        	.sym	PFXEVENTPROCESS,0,138,14,32,58
  9415                        	.sym	FXEVENTPROCESS,0,10,14,64,58
  9416                        	.sym	FXEventProc,0,641,14,32
  9417                        	.sym	PMOUSEMSGDATA,0,138,14,32,57
  9418                        	.sym	MOUSEMSGDATA,0,10,14,64,57
  9419                        	.sym	MSGIRQ,0,5,14,16
  9420                        	.sym	MAINLOOPARGS,0,10,14,16,56
  9421                        	.sym	PEACHCHILD_MSG,0,138,14,32,55
  9422                        	.sym	EACHCHILD_MSG,0,10,14,64,55
  9423                        	.sym	~~k_point_hit_scan,~~k_point_hit_scan,10
                    98,18,32,5
  9424                        	.sym	~~k_point_in_any_nodeslist,~~k_point_in_
                    any_nodeslist,1098,18,32,5
  9425                        	.sym	~~k_user_getFocusWindow,~~k_user_getFocu
                    sWindow,1089,18,32
  9426                        	.sym	~~k_user_getDesktopWindow,~~k_user_getDe
                    sktopWindow,1089,18,32
  9427                        	.sym	~~k_getHandleFromWindow,~~k_getHandleFro
                    mWindow,1089,18,32
  9428                        	.sym	~~k_getWindowList,~~k_getWindowList,1098
                    ,18,32,5
  9429                        	.sym	~~k_initializeWindowManager,~~k_initiali
                    zeWindowManager,78,18,0
  9430                        	.sym	PCUR_PALETTE_MAP,0,138,14,32,54
  9431                        	.sym	CUR_PALETTE_MAP,0,10,14,400,54
  9432                        	.sym	PCLICKDETECTED,0,138,14,32,53
  9433                        	.sym	CLICKDETECTED,0,10,14,64,53
  9434                        	.sym	OBJECTCLICKED,0,641,14,32
  9435                        	.sym	~~k_mem_deallocate_heap,~~k_mem_dealloca
                    te_heap,65,18,0
  9436                        	.sym	~~k_mem_allocate_heap,~~k_mem_allocate_h
                    eap,1089,18,32
  9437                        	.sym	~~k_heap_integrity_check,~~k_heap_integr
                    ity_check,82,18,0
  9438                        	.sym	MemoryCallback,0,641,14,32
  9439                        	.sym	PFXMEMORYMAP,0,138,14,32,52
  9440                        	.sym	FXMEMORYMAP,0,10,14,2072,52
  Thu Dec  3 2020 22:25                                                Page 184


  9441                        	.sym	UMM_HEAP_INFO,0,10,14,256,51
  9442                        	.sym	~~k_exec_get_current_process,~~k_exec_ge
                    t_current_process,1098,18,32,20
  9443                        	.sym	~~k_exec_set_current_process,~~k_exec_se
                    t_current_process,1098,18,32,20
  9444                        	.sym	~~k_exec_launchProcess,~~k_exec_launchPr
                    ocess,1098,18,32,20
  9445                        	.sym	~~k_exec_throw_exception,~~k_exec_throw_
                    exception,65,18,0
  9446                        	.sym	~~k_initalize_executive,~~k_initalize_ex
                    ecutive,65,18,0
  9447                        	.sym	PFXSTRING,0,138,14,32,50
  9448                        	.sym	FXSTRING,0,10,14,64,50
  9449                        	.sym	DEVICEDRIVER_COMMAND,0,656,14,32
  9450                        	.sym	DEVICEDRIVER_UNLOAD,0,654,14,32
  9451                        	.sym	DEVICEDRIVER_WRITE,0,656,14,32
  9452                        	.sym	DEVICEDRIVER_READ,0,656,14,32
  9453                        	.sym	DEVICEDRIVER_LOAD,0,654,14,32
  9454                        	.sym	PFX_BLOCK_DEVICE_DRIVER,0,138,14,32,49
  9455                        	.sym	FX_BLOCK_DEVICE_DRIVER,0,10,14,1448,49
  9456                        	.sym	PFX_DEVICE_DRIVER,0,138,14,32,48
  9457                        	.sym	FX_DEVICE_DRIVER,0,10,14,1416,48
  9458                        	.sym	~~k_debug_strings,~~k_debug_strings,65,1
                    8,0
  9459                        	.sym	~~k_debug_long,~~k_debug_long,65,18,0
  9460                        	.sym	~~k_debug_integer,~~k_debug_integer,65,1
                    8,0
  9461                        	.sym	~~k_debug_pointer,~~k_debug_pointer,65,1
                    8,0
  9462                        	.sym	~~k_debug_string,~~k_debug_string,65,18,
                    0
  9463                        	.sym	PDEBUGBYTEBITS,0,138,14,32,47
  9464                        	.sym	DEBUGBYTEBITS,0,10,14,8,47
  9465                        	.sym	PFXENVIRONMENT,0,138,14,32,46
  9466                        	.sym	FXENVIRONMENT,0,10,14,96,46
  9467                        	.sym	PFXZERPOPAGE,0,138,14,32,45
  9468                        	.sym	FXZERPOPAGE,0,10,14,448,45
  9469                        	.sym	KERNELTRAPCALL,0,641,14,32
  9470                        	.sym	~~k_nodelist_foreach_data,~~k_nodelist_f
                    oreach_data,65,18,0
  9471                        	.sym	FOREACHNODEUNTIL,0,654,14,32
  9472                        	.sym	FOREACHNODE,0,641,14,32
  9473                        	.sym	~~k_enqueue_with_lock,~~k_enqueue_with_l
                    ock,65,18,0
  9474                        	.sym	~~k_dequeue,~~k_dequeue,1089,18,32
  9475                        	.sym	~~k_enqueue,~~k_enqueue,65,18,0
  9476                        	.sym	PFXCOMBUFFER,0,138,14,32,44
  9477                        	.sym	FXCOMBUFFER,0,10,14,2080,44
  9478                        	.sym	PSUBMENULIST,0,138,14,32,43
  9479                        	.sym	SUBMENULIST,0,10,14,40,43
  9480                        	.sym	HSUBMENU,0,7,14,32
  9481                        	.sym	PSUBMENU,0,138,14,32,42
  9482                        	.sym	SUBMENU,0,10,14,64,42
  9483                        	.sym	MenuAction,0,641,14,32
  9484                        	.sym	PMENUANCHOR,0,138,14,32,41
  9485                        	.sym	MENUANCHOR,0,10,14,144,41
  9486                        	.sym	PTEXTBOX,0,138,14,32,40
  9487                        	.sym	TEXTBOX,0,10,14,144,40
  Thu Dec  3 2020 22:25                                                Page 185


  9488                        	.sym	PLISTBOX,0,138,14,32,39
  9489                        	.sym	LISTBOX,0,10,14,240,39
  9490                        	.sym	PSCROLLBAR,0,138,14,32,38
  9491                        	.sym	SCROLLBAR,0,10,14,192,38
  9492                        	.sym	PBUTTON,0,138,14,32,37
  9493                        	.sym	BUTTON,0,10,14,80,37
  9494                        	.sym	PMENUDROPDOWNDATA,0,138,14,32,36
  9495                        	.sym	MENUDROPDOWNDATA,0,10,14,3568,36
  9496                        	.sym	PMENUTAG,0,138,14,32,35
  9497                        	.sym	MENUTAG,0,10,14,112,35
  9498                        	.sym	PMENU,0,138,14,32,34
  9499                        	.sym	MENU,0,10,14,248,34
  9500                        	.sym	HMENURESOURCE,0,129,14,32
  9501                        	.sym	HTEXTBOX,0,7,14,32
  9502                        	.sym	PTEXTBOXX,0,138,14,32,33
  9503                        	.sym	TEXTBOXX,0,10,14,112,33
  9504                        	.sym	FONTMETRIC,0,10,14,32,32
  9505                        	.sym	TITLE,0,142,14,32
  9506                        	.sym	PHANDLE,0,1153,14,32
  9507                        	.sym	HANDLE,0,129,14,32
  9508                        	.sym	PWINDOWEX,0,138,14,32,31
  9509                        	.sym	WINDOWEX,0,10,14,2704,31
  9510                        	.sym	PWINDOW,0,138,14,32,30
  9511                        	.sym	WINDOW,0,10,14,2808,30
  9512                        	.sym	PDRAGDATA,0,138,14,32,29
  9513                        	.sym	DRAGDATA,0,10,14,136,29
  9514                        	.sym	PNCCLICKABLE,0,138,14,32,28
  9515                        	.sym	NCCLICKABLE,0,10,14,88,28
  9516                        	.sym	HCLICKABLE,0,7,14,32
  9517                        	.sym	PCLICKABLE,0,138,14,32,27
  9518                        	.sym	CLICKABLE,0,10,14,88,27
  9519                        	.sym	PWNDCLASS,0,138,14,32,26
  9520                        	.sym	WNDCLASS,0,10,14,256,26
  9521                        	.sym	HBRUSH,0,129,14,32
  9522                        	.sym	HCURSOR,0,129,14,32
  9523                        	.sym	HICON,0,129,14,32
  9524                        	.sym	HINSTANCE,0,129,14,32
  9525                        	.sym	FXWndProc,0,654,14,32
  9526                        	.sym	PRECT,0,138,14,32,25
  9527                        	.sym	RECT,0,10,14,64,25
  9528                        	.sym	PPOINT,0,138,14,32,24
  9529                        	.sym	POINT,0,10,14,32,24
  9530                        	.sym	PFXPROPERTY,0,138,14,32,22
  9531                        	.sym	FXPROPERTY,0,10,14,384,22
  9532                        	.sym	SCANCODE,0,14,14,8
  9533                        	.sym	KEYCODE,0,14,14,8
  9534                        	.sym	PFXPROCESSMESSAGE,0,138,14,32,21
  9535                        	.sym	FXPROCESSMESSAGE,0,10,14,112,21
  9536                        	.sym	PFXPROCESS,0,138,14,32,20
  9537                        	.sym	FXPROCESS,0,10,14,800,20
  9538                        	.sym	PDESKTOP_CONTROL,0,138,14,32,19
  9539                        	.sym	DESKTOP_CONTROL,0,10,14,392,19
  9540                        	.sym	PCONSOLE_CONTROL,0,138,14,32,18
  9541                        	.sym	CONSOLE_CONTROL,0,10,14,448,18
  9542                        	.sym	FXProcessProc,0,641,14,32
  9543                        	.sym	PFXCMDMESSAGE,0,138,14,32,17
  9544                        	.sym	FXCMDMESSAGE,0,10,14,304,17
  9545                        	.sym	PFXOSMESSAGE,0,138,14,32,16
  Thu Dec  3 2020 22:25                                                Page 186


  9546                        	.sym	FXOSMESSAGE,0,10,14,304,16
  9547                        	.sym	PINT_REGS,0,138,14,32,15
  9548                        	.sym	INT_REGS,0,10,14,104,15
  9549                        	.sym	TASK_STACK,0,10,14,32,14
  9550                        	.sym	TASK,0,10,14,48,13
  9551                        	.sym	PIRQDATA,0,138,14,32,12
  9552                        	.sym	IRQDATA,0,10,14,48,12
  9553                        	.sym	HMENU,0,129,14,32
  9554                        	.sym	HWND,0,129,14,32
  9555                        	.sym	MSGDATA,0,14,14,8
  9556                        	.sym	MSGDEST,0,18,14,32
  9557                        	.sym	MSGSRC,0,18,14,32
  9558                        	.sym	MSGTYPE,0,16,14,16
  9559                        	.sym	PROCESS_RESOURCE_LIST,0,138,14,32,6
  9560                        	.sym	PROCESS_TLS_LIST,0,138,14,32,6
  9561                        	.sym	SEMAPHORE_LIST,0,138,14,32,6
  9562                        	.sym	FILE_BLOCK_LIST,0,138,14,32,6
  9563                        	.sym	FILE_PATH_LIST,0,138,14,32,6
  9564                        	.sym	PROCEDURE_LIST,0,138,14,32,6
  9565                        	.sym	FILE_HANDLE,0,138,14,32,11
  9566                        	.sym	FILE_BLOCK,0,10,14,552,11
  9567                        	.sym	SEMAPHORE,0,10,14,16,10
  9568                        	.sym	PPROCESS_SIGNAL,0,138,14,32,9
  9569                        	.sym	PROCESS_SIGNAL,0,10,14,16,9
  9570                        	.sym	KRESULT,0,18,14,32
  9571                        	.sym	PKERNEL_ERROR,0,138,14,32,8
  9572                        	.sym	KERNEL_ERROR,0,10,14,32,8
  9573                        	.sym	PROCESS_STATUS,0,16,14,16
  9574                        	.sym	FILE_PATH_NAME,0,142,14,32
  9575                        	.sym	PROCESS_RESOURCE,0,129,14,32
  9576                        	.sym	PROCESS_TLS,0,129,14,32
  9577                        	.sym	PROCESS_CTX,0,129,14,32
  9578                        	.sym	USERID,0,16,14,16
  9579                        	.sym	PROCESS_ID,0,18,14,32
  9580                        	.sym	PROCESS_BANK,0,14,14,8
  9581                        	.sym	PFXQUEUE,0,138,14,32,7
  9582                        	.sym	FXQUEUE,0,10,14,80,7
  9583                        	.sym	PFXNODELIST,0,138,14,32,6
  9584                        	.sym	FXNODELIST,0,10,14,96,6
  9585                        	.sym	NodeListDeallocator,0,641,14,32
  9586                        	.sym	PFXNODE,0,138,14,32,5
  9587                        	.sym	FXNODE,0,10,14,384,5
  9588                        	.sym	PBYTEBITS,0,138,14,32,4
  9589                        	.sym	BYTEBITS,0,10,14,8,4
  9590                        	.sym	HCOLOR,0,129,14,32
  9591                        	.sym	HFONT,0,129,14,32
  9592                        	.sym	HDC,0,129,14,32
  9593                        	.sym	HPOINTER,0,129,14,32
  9594                        	.sym	uint32_t,0,18,14,32
  9595                        	.sym	uint8_t,0,14,14,8
  9596                        	.sym	PFAR,0,142,14,32
  9597                        	.sym	LPBOOL,0,142,14,32
  9598                        	.sym	BOOL,0,14,14,8
  9599                        	.sym	DWORD,0,18,14,32
  9600                        	.sym	ULONG,0,18,14,32
  9601                        	.sym	LPLONG,0,135,14,32
  9602                        	.sym	LONG,0,7,14,32
  9603                        	.sym	PUINT,0,144,14,32
  Thu Dec  3 2020 22:25                                                Page 187


  9604                        	.sym	USHORT,0,16,14,16
  9605                        	.sym	UINT,0,16,14,16
  9606                        	.sym	INT,0,5,14,16
  9607                        	.sym	WORD,0,5,14,16
  9608                        	.sym	PBYTE,0,142,14,32
  9609                        	.sym	BYTE,0,14,14,8
  9610                        	.sym	UCHAR,0,14,14,8
  9611                        	.sym	LPWCSTR,0,142,14,32
  9612                        	.sym	LPCSTR,0,142,14,32
  9613                        	.sym	LPSTR,0,142,14,32
  9614                        	.sym	LPCHAR,0,142,14,32
  9615                        	.sym	CHAR,0,14,14,8
  9616                        	.sym	LPVOID,0,129,14,32
  9617                        	.sym	VOID,0,1,14,32
  9618                        	.sym	~~strcpy,~~strcpy,1102,18,32
  9619                        	.sym	~~memset,~~memset,1089,18,32
  9620                        	.sym	~~memcpy,~~memcpy,1089,18,32
  9621                        	.sym	Boolean_T,0,5,14,16
  9622                        	.sym	ldiv_t,0,10,14,64,2
  9623                        	.sym	div_t,0,10,14,32,1
  9624                        	.sym	wctype_t,0,16,14,16
  9625                        	.sym	wint_t,0,16,14,16
  9626                        	.sym	wchar_t,0,14,14,8
  9627                        	.sym	ptrdiff_t,0,7,14,32
  9628                        	.sym	size_t,0,16,14,16
  9629                        	end


      Lines assembled: 9629
      Errors: 0
