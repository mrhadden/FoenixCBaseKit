  Thu Dec  3 2020 22:25                                                Page 1


                     ***************************************
                     **      WDC 65C816 Macro Assembler   **
                     **                                   **
                     **     Version 3.49.1- Feb  6 2006    **
                     ***************************************

     1                        ;:ts=8
     2             00000001   R0	equ	1
     3             00000005   R1	equ	5
     4             00000009   R2	equ	9
     5             0000000D   R3	equ	13
     6                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\flpydsk.c",0
     7                        ;//***********************************************
                    *****************************
     8                        ;//**
     9                        ;//**    flpydsk.cpp
    10                        ;//**		-Floppy Disk driver
    11                        ;//**
    12                        ;//***********************************************
                    *****************************
    13                        ;//===============================================
                    =============================
    14                        ;//    IMPLEMENTATION HEADERS
    15                        ;//===============================================
                    =============================
    16                        ;
    17                        ;#include "fxos.h"
    18                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
    19                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
    20                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stddef.h",0
    21                        	.line	88
    22                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",43
    23                        	.stag	fake1_,32,1
    24                        	.member	quot,0,5,8,16
    25                        	.member	rem,16,5,8,16
    26                        	.eos
    27                        	.stag	fake2_,64,2
    28                        	.member	quot,0,7,8,32
    29                        	.member	rem,32,7,8,32
    30                        	.eos
    31                        	.stag	int_sqrt,32,3
    32                        	.member	sqrt,0,16,8,16
    33                        	.member	frac,16,16,8,16
    34                        	.eos
    35                        	.line	205
    36                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",4
    37                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
    38                        	.line	134
    39                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",5
    40                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
  Thu Dec  3 2020 22:25                                                Page 2


                    ctype.h",0
    41                        	.line	103
    42                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",6
    43                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
    44                        	.stag	_fx_bytebits,8,4
    45                        	.member	b7,0,14,17,1
    46                        	.member	b6,1,14,17,1
    47                        	.member	b5,2,14,17,1
    48                        	.member	b4,3,14,17,1
    49                        	.member	b3,4,14,17,1
    50                        	.member	b2,5,14,17,1
    51                        	.member	b1,6,14,17,1
    52                        	.member	b0,7,14,17,1
    53                        	.eos
    54                        	.stag	_fx_node,384,5
    55                        	.member	type,0,14,8,8
    56                        	.member	Reserved0,8,14,8,8
    57                        	.member	data,16,129,8,32
    58                        	.member	last,48,138,8,32,5
    59                        	.member	next,80,138,8,32,5
    60                        	.member	name,112,110,8,0,32
    61                        	.member	Reserved1,368,16,8,16
    62                        	.eos
    63                        	.stag	_fx_nodelist,96,6
    64                        	.member	listhead,0,138,8,32,5
    65                        	.member	listData,32,129,8,32
    66                        	.member	deallocator,64,641,8,32
    67                        	.eos
    68                        	.stag	_fx_queue,80,7
    69                        	.member	count,0,5,8,16
    70                        	.member	front,16,138,8,32,5
    71                        	.member	rear,48,138,8,32,5
    72                        	.eos
    73                        	.stag	fake8_,32,8
    74                        	.member	subsystem,0,14,8,8
    75                        	.member	level,8,14,8,8
    76                        	.member	error,16,16,8,16
    77                        	.eos
    78                        	.stag	_fx_process_signal,16,9
    79                        	.member	cbSize,0,16,8,16
    80                        	.eos
    81                        	.stag	_fx_semaphore,16,10
    82                        	.member	reserved,0,5,8,16
    83                        	.eos
    84                        	.stag	_fx_fileBlock,552,11
    85                        	.member	openCount,0,16,8,16
    86                        	.member	lockCount,16,16,8,16
    87                        	.member	dirty,32,14,8,8
    88                        	.member	fileBuffer,40,110,8,0,64
    89                        	.eos
    90                        	.stag	_fx_irq_data,48,12
    91                        	.member	line,0,5,8,16
    92                        	.member	keycode,16,142,8,32
    93                        	.eos
    94                        	.stag	_task,48,13
    95                        	.member	SPL,0,14,8,8
  Thu Dec  3 2020 22:25                                                Page 3


    96                        	.member	SPH,8,14,8,8
    97                        	.member	pstack,16,142,8,32
    98                        	.eos
    99                        	.stag	_task_stack,32,14
   100                        	.member	SS,0,142,8,32
   101                        	.eos
   102                        	.stag	int_regs,104,15
   103                        	.member	PB,0,14,8,8
   104                        	.member	PH,8,14,8,8
   105                        	.member	PL,16,14,8,8
   106                        	.member	PP,24,14,8,8
   107                        	.member	DB,32,14,8,8
   108                        	.member	DH,40,14,8,8
   109                        	.member	DL,48,14,8,8
   110                        	.member	AH,56,14,8,8
   111                        	.member	AL,64,14,8,8
   112                        	.member	XH,72,14,8,8
   113                        	.member	XL,80,14,8,8
   114                        	.member	YH,88,14,8,8
   115                        	.member	YL,96,14,8,8
   116                        	.eos
   117                        	.stag	_fx_eventMessage,304,16
   118                        	.member	src,0,18,8,32
   119                        	.member	dest,32,18,8,32
   120                        	.member	type,64,16,8,16
   121                        	.member	hwnd,80,129,8,32
   122                        	.member	pheap,112,129,8,32
   123                        	.member	msgTime,144,18,8,32
   124                        	.member	data,176,110,8,0,16
   125                        	.eos
   126                        	.stag	_fx_cmdMessage,304,17
   127                        	.member	src,0,18,8,32
   128                        	.member	dest,32,18,8,32
   129                        	.member	type,64,16,8,16
   130                        	.member	hwnd,80,129,8,32
   131                        	.member	pheap,112,129,8,32
   132                        	.member	msgTime,144,18,8,32
   133                        	.member	cmdCId,176,16,8,16
   134                        	.member	cmdMId,192,16,8,16
   135                        	.member	parameter1,208,18,8,32
   136                        	.member	parameter2,240,18,8,32
   137                        	.member	parameter3,272,18,8,32
   138                        	.eos
   139                        	.stag	_fx_console_ctl,448,18
   140                        	.member	maxCols,0,5,8,16
   141                        	.member	maxRows,16,5,8,16
   142                        	.member	curX,32,5,8,16
   143                        	.member	curY,48,5,8,16
   144                        	.member	fgColor,64,5,8,16
   145                        	.member	bgColor,80,5,8,16
   146                        	.member	mode,96,14,8,8
   147                        	.member	kbBuffer,104,101,8,0,16
   148                        	.member	screenBuffer,360,142,8,32
   149                        	.member	desktopMode,392,14,8,8
   150                        	.member	lastMouseButton,400,5,8,16
   151                        	.member	lastMouseX,416,5,8,16
   152                        	.member	lastMouseY,432,5,8,16
   153                        	.eos
  Thu Dec  3 2020 22:25                                                Page 4


   154                        	.stag	_fx_desktop_ctl,392,19
   155                        	.member	desktopMode,0,14,8,8
   156                        	.member	cursorCtl,8,5,8,16
   157                        	.member	cursorState,24,5,8,16
   158                        	.member	backgroundColor,40,5,8,16
   159                        	.member	foregroundColor,56,5,8,16
   160                        	.member	menuMode,72,5,8,16
   161                        	.member	lastMouseButton,88,5,8,16
   162                        	.member	lastMouseX,104,5,8,16
   163                        	.member	lastMouseY,120,5,8,16
   164                        	.member	currentDiskName,136,142,8,32
   165                        	.member	diskNodes,168,129,8,32
   166                        	.member	titleNodes,200,129,8,32
   167                        	.member	menuNodes,232,129,8,32
   168                        	.member	iconNodes,264,129,8,32
   169                        	.member	windowNodes,296,129,8,32
   170                        	.member	fontNodes,328,129,8,32
   171                        	.member	wndProc,360,138,8,32,6
   172                        	.eos
   173                        	.stag	_fx_process,800,20
   174                        	.member	cbSize,0,5,8,16
   175                        	.member	procId,16,18,8,32
   176                        	.member	parentId,48,18,8,32
   177                        	.member	ctx,80,129,8,32
   178                        	.member	userId,112,16,8,16
   179                        	.member	status,128,16,8,16
   180                        	.member	foregroundActive,144,14,8,8
   181                        	.member	tls,152,1121,8,32,8
   182                        	.member	commandLine,408,142,8,32
   183                        	.member	semaphores,440,138,8,32,6
   184                        	.member	fileHandles,472,138,8,32,6
   185                        	.member	pathList,504,138,8,32,6
   186                        	.member	resources,536,138,8,32,6
   187                        	.member	timerAware,568,14,8,8
   188                        	.member	timerTicks,576,112,8,0,2
   189                        	.member	timerTickCount,608,112,8,0,2
   190                        	.member	kernelError,640,10,8,32,8
   191                        	.member	consoleCtl,672,138,8,32,18
   192                        	.member	desktopCtl,704,138,8,32,19
   193                        	.member	execProc,736,641,8,32
   194                        	.member	startupArgs,768,129,8,32
   195                        	.eos
   196                        	.stag	_fxProcessMessage,112,21
   197                        	.member	src,0,18,8,32
   198                        	.member	dest,32,18,8,32
   199                        	.member	type,64,16,8,16
   200                        	.member	processInfo,80,138,8,32,20
   201                        	.eos
   202                        	.stag	_fx_property,384,22
   203                        	.member	name,0,110,8,0,16
   204                        	.member	value,128,110,8,0,32
   205                        	.eos
   206                        	.utag	_24bitPointer,32,23
   207                        	.member	address,0,142,11,32
   208                        	.member	bytes,0,110,11,0,4
   209                        	.eos
   210                        	.stag	_PointStruct,32,24
   211                        	.member	x,0,5,8,16
  Thu Dec  3 2020 22:25                                                Page 5


   212                        	.member	y,16,5,8,16
   213                        	.eos
   214                        	.stag	_RectStruct,64,25
   215                        	.member	x,0,5,8,16
   216                        	.member	y,16,5,8,16
   217                        	.member	width,32,5,8,16
   218                        	.member	height,48,5,8,16
   219                        	.eos
   220                        	.stag	_k_WindowClass,256,26
   221                        	.member	cbSize,0,16,8,16
   222                        	.member	style,16,16,8,16
   223                        	.member	pWndProc,32,654,8,32
   224                        	.member	hInstance,64,129,8,32
   225                        	.member	hIcon,96,129,8,32
   226                        	.member	hCursor,128,129,8,32
   227                        	.member	hbrBackground,160,129,8,32
   228                        	.member	lpszMenuName,192,142,8,32
   229                        	.member	lpszClassName,224,142,8,32
   230                        	.eos
   231                        	.stag	_ClickableRect,88,27
   232                        	.member	area,0,10,8,64,25
   233                        	.member	z,64,5,8,16
   234                        	.member	enabled,80,14,8,8
   235                        	.eos
   236                        	.stag	_NCClickableRect,88,28
   237                        	.member	area,0,10,8,64,25
   238                        	.member	msgType,64,16,8,16
   239                        	.member	enabled,80,14,8,8
   240                        	.eos
   241                        	.stag	_DragData,136,29
   242                        	.member	area,0,10,8,64,25
   243                        	.member	xoffset,64,5,8,16
   244                        	.member	yoffset,80,5,8,16
   245                        	.member	msgType,96,16,8,16
   246                        	.member	isDrag,112,14,8,8
   247                        	.member	canDrag,120,14,8,8
   248                        	.member	canDrop,128,14,8,8
   249                        	.eos
   250                        	.stag	_k_WindowStruct,2808,30
   251                        	.member	cbSize,0,16,8,16
   252                        	.member	style,16,18,8,32
   253                        	.member	win_id,48,5,8,16
   254                        	.member	win_x,64,5,8,16
   255                        	.member	win_y,80,5,8,16
   256                        	.member	win_width,96,5,8,16
   257                        	.member	win_height,112,5,8,16
   258                        	.member	wndRect,128,10,8,64,25
   259                        	.member	clientRect,192,10,8,64,25
   260                        	.member	nonclientGadgets,256,106,8,0,28,16
   261                        	.member	clickable,1664,129,8,32
   262                        	.member	win_title,1696,110,8,0,32
   263                        	.member	Reserved0,1952,16,8,16
   264                        	.member	win_class,1968,110,8,0,16
   265                        	.member	win_class_name,2096,110,8,0,32
   266                        	.member	nBitmapLayer,2352,16,8,16
   267                        	.member	procid,2368,18,8,32
   268                        	.member	pWndClass,2400,138,8,32,26
   269                        	.member	pParentWindow,2432,129,8,32
  Thu Dec  3 2020 22:25                                                Page 6


   270                        	.member	hMenu,2464,129,8,32
   271                        	.member	pChildWindows,2496,138,8,32,6
   272                        	.member	pChildHitList,2528,138,8,32,6
   273                        	.member	isVisible,2560,14,8,8
   274                        	.member	windowData,2568,129,8,32
   275                        	.member	clientData,2600,1121,8,32,6
   276                        	.member	isClosed,2792,14,8,8
   277                        	.member	isClosing,2800,14,8,8
   278                        	.eos
   279                        	.stag	_k_WindowStructEx,2704,31
   280                        	.member	cbSize,0,16,8,16
   281                        	.member	style,16,18,8,32
   282                        	.member	win_id,48,5,8,16
   283                        	.member	win_x,64,5,8,16
   284                        	.member	win_y,80,5,8,16
   285                        	.member	win_width,96,5,8,16
   286                        	.member	win_height,112,5,8,16
   287                        	.member	wndRect,128,10,8,64,25
   288                        	.member	clientRect,192,10,8,64,25
   289                        	.member	nonclientGadgets,256,106,8,0,28,16
   290                        	.member	clickable,1664,129,8,32
   291                        	.member	win_title,1696,110,8,0,32
   292                        	.member	Reserved0,1952,16,8,16
   293                        	.member	win_class,1968,110,8,0,16
   294                        	.member	nBitmapLayer,2096,16,8,16
   295                        	.member	procid,2112,18,8,32
   296                        	.member	pWndClass,2144,138,8,32,26
   297                        	.member	pParentWindow,2176,129,8,32
   298                        	.member	hMenu,2208,129,8,32
   299                        	.member	pChildWindows,2240,138,8,32,6
   300                        	.member	pChildHitList,2272,138,8,32,6
   301                        	.member	isVisible,2304,14,8,8
   302                        	.member	windowData,2312,129,8,32
   303                        	.member	clientData,2344,1121,8,32,4
   304                        	.member	isClosed,2472,14,8,8
   305                        	.member	hWnd,2480,129,8,32
   306                        	.member	localRect,2512,10,8,64,25
   307                        	.member	globalRect,2576,10,8,64,25
   308                        	.member	clientOffsetRect,2640,10,8,64,25
   309                        	.eos
   310                        	.stag	_FontMetric,32,32
   311                        	.member	width,0,5,8,16
   312                        	.member	height,16,5,8,16
   313                        	.eos
   314                        	.stag	_ctl_Textbox,112,33
   315                        	.member	win_id,0,5,8,16
   316                        	.member	win_x,16,5,8,16
   317                        	.member	win_y,32,5,8,16
   318                        	.member	win_width,48,5,8,16
   319                        	.member	win_height,64,5,8,16
   320                        	.member	content,80,1166,8,32
   321                        	.eos
   322                        	.stag	_MenuStruct,248,34
   323                        	.member	cx,0,5,8,16
   324                        	.member	cy,16,5,8,16
   325                        	.member	width,32,5,8,16
   326                        	.member	height,48,5,8,16
   327                        	.member	fcolor,64,14,8,8
  Thu Dec  3 2020 22:25                                                Page 7


   328                        	.member	bcolor,72,14,8,8
   329                        	.member	chromeLeft,80,14,8,8
   330                        	.member	chromeRight1,88,14,8,8
   331                        	.member	chromeRight2,96,14,8,8
   332                        	.member	itemId,104,16,8,16
   333                        	.member	pCaption,120,142,8,32
   334                        	.member	subMenus,152,138,8,32,6
   335                        	.member	pBackground,184,129,8,32
   336                        	.member	hWndOwner,216,129,8,32
   337                        	.eos
   338                        	.stag	fake35_,112,35
   339                        	.member	menuId,0,16,8,16
   340                        	.member	caption,16,142,8,32
   341                        	.member	rect,48,10,8,64,25
   342                        	.eos
   343                        	.stag	fake36_,3568,36
   344                        	.member	pParent,0,138,8,32,30
   345                        	.member	rect,32,10,8,64,25
   346                        	.member	captions,96,1134,8,32,24
   347                        	.member	chrome,864,110,8,0,24
   348                        	.member	ids,1056,112,8,0,24
   349                        	.member	clickable,1440,106,8,0,27,24
   350                        	.member	selected,3552,16,8,16
   351                        	.eos
   352                        	.stag	_fx_button_t,80,37
   353                        	.member	pCaption,0,142,8,32
   354                        	.member	data,32,129,8,32
   355                        	.member	captionPixelWidth,64,16,8,16
   356                        	.eos
   357                        	.stag	_fx_scrollbar_t,192,38
   358                        	.member	min,0,16,8,16
   359                        	.member	max,16,16,8,16
   360                        	.member	increment,32,16,8,16
   361                        	.member	stopsize,48,16,8,16
   362                        	.member	location,64,5,8,16
   363                        	.member	state,80,5,8,16
   364                        	.member	rectThumb,96,10,8,64,25
   365                        	.member	data,160,129,8,32
   366                        	.eos
   367                        	.stag	_fx_listbox_t,240,39
   368                        	.member	pos,0,5,8,16
   369                        	.member	selected,16,16,8,16
   370                        	.member	offsetX,32,5,8,16
   371                        	.member	offsetY,48,5,8,16
   372                        	.member	inc,64,5,8,16
   373                        	.member	direction,80,5,8,16
   374                        	.member	top,96,5,8,16
   375                        	.member	bottom,112,5,8,16
   376                        	.member	indexTop,128,5,8,16
   377                        	.member	indexBottom,144,5,8,16
   378                        	.member	maxItems,160,16,8,16
   379                        	.member	fontSet,176,142,8,32
   380                        	.member	data,208,129,8,32
   381                        	.eos
   382                        	.stag	_fx_textbox_t,144,40
   383                        	.member	pos,0,5,8,16
   384                        	.member	selected,16,16,8,16
   385                        	.member	offsetX,32,5,8,16
  Thu Dec  3 2020 22:25                                                Page 8


   386                        	.member	offsetY,48,5,8,16
   387                        	.member	isShifted,64,14,8,8
   388                        	.member	cursorState,72,14,8,8
   389                        	.member	fontSet,80,142,8,32
   390                        	.member	data,112,129,8,32
   391                        	.eos
   392                        	.stag	_fx_menuAnchor_t,144,41
   393                        	.member	pCaption,0,142,8,32
   394                        	.member	renderLayoutX,32,16,8,16
   395                        	.member	renderLayoutY,48,16,8,16
   396                        	.member	captionPixelWidth,64,16,8,16
   397                        	.member	data,80,129,8,32
   398                        	.member	droppedWindow,112,138,8,32,30
   399                        	.eos
   400                        	.stag	_SubMenuStruct,64,42
   401                        	.member	caption,0,142,8,32
   402                        	.member	action,32,641,8,32
   403                        	.eos
   404                        	.stag	_SubMenuListStruct,40,43
   405                        	.member	cMenus,0,14,8,8
   406                        	.member	psubmenus,8,9354,8,32,42
   407                        	.eos
   408                        	.stag	_fx_ComBuffer,2080,44
   409                        	.member	cbSize,0,16,8,16
   410                        	.member	cbBuffer,16,16,8,16
   411                        	.member	buffer,32,110,8,0,256
   412                        	.eos
   413                        	.line	708
   414                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",8
   415                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstringtable.h",0
   416                        	.line	89
   417                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",9
   418                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256fmx.h",0
   419                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   420                        	.line	708
   421                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256fmx.h",5
   422                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fmx_vicky.h",0
   423                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   424                        	.line	708
   425                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fmx_vicky.h",11
   426                        	.line	72
   427                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256fmx.h",6
   428                        	.line	1325
   429                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",13
   430                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxkernel.h",0
   431                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
  Thu Dec  3 2020 22:25                                                Page 9


                    space\FXOSv1\src\fxos.h",0
   432                        	.line	25
   433                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxkernel.h",5
   434                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",0
   435                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   436                        	.line	708
   437                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",5
   438                        	.line	61
   439                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxkernel.h",6
   440                        	.stag	_fx_zero_page,448,45
   441                        	.member	fxos_mouse_byte_0,0,14,8,8
   442                        	.member	fxos_mouse_byte_1,8,14,8,8
   443                        	.member	fxos_mouse_byte_2,16,14,8,8
   444                        	.member	fxos_mouse_byte_t,24,14,8,8
   445                        	.member	fxos_mouse_byte_x_l,32,14,8,8
   446                        	.member	fxos_mouse_byte_x_h,40,14,8,8
   447                        	.member	fxos_mouse_byte_y_l,48,14,8,8
   448                        	.member	fxos_mouse_byte_y_h,56,14,8,8
   449                        	.member	fxos_key_byte_0,64,14,8,8
   450                        	.member	fxos_key_byte_1,72,14,8,8
   451                        	.member	fxos_key_byte_2,80,14,8,8
   452                        	.member	fxos_mouse_ctl,88,14,8,8
   453                        	.member	fxos_mouse_index,96,14,8,8
   454                        	.member	fxos_mouse_status,104,14,8,8
   455                        	.member	VersionMajor,112,16,8,16
   456                        	.member	VersionMinor,128,16,8,16
   457                        	.member	VersionRelease,144,16,8,16
   458                        	.member	topMemory,160,18,8,32
   459                        	.member	bottomMemory,192,18,8,32
   460                        	.member	availableMemory,224,18,8,32
   461                        	.member	availableMemoryK,256,18,8,32
   462                        	.member	availableHeapMemory,288,18,8,32
   463                        	.member	availableHeapMemoryK,320,18,8,32
   464                        	.member	kernelFunctionCallId,352,16,8,16
   465                        	.member	kernelFunctionCallBank,368,14,8,8
   466                        	.member	kernelFunctionCallReserved,376,14,8,8
   467                        	.member	kernelFunctionCallParameter,384,129,8,32
   468                        	.member	kernelFunctionCallReturn,416,129,8,32
   469                        	.eos
   470                        	.stag	_fx_environment,96,46
   471                        	.member	variables,0,142,8,32
   472                        	.member	reserved1,32,5,8,16
   473                        	.member	reserved2,48,5,8,16
   474                        	.member	reserved3,64,5,8,16
   475                        	.member	reserved4,80,5,8,16
   476                        	.eos
   477                        	.stag	_debug_byte_bits,8,47
   478                        	.member	bit7,0,14,17,1
   479                        	.member	bit6,1,14,17,1
   480                        	.member	bit5,2,14,17,1
   481                        	.member	bit4,3,14,17,1
   482                        	.member	bit3,4,14,17,1
   483                        	.member	bit2,5,14,17,1
  Thu Dec  3 2020 22:25                                                Page 10


   484                        	.member	bit1,6,14,17,1
   485                        	.member	bit0,7,14,17,1
   486                        	.eos
   487                        	.stag	_fx_device_driver,1416,48
   488                        	.member	name,0,110,8,0,64
   489                        	.member	version,512,110,8,0,64
   490                        	.member	hmajor,1024,110,8,0,16
   491                        	.member	hminor,1152,110,8,0,16
   492                        	.member	type,1280,14,8,8
   493                        	.member	f_driver_load,1288,129,8,32
   494                        	.member	f_driver_read,1320,129,8,32
   495                        	.member	f_driver_write,1352,129,8,32
   496                        	.member	f_driver_unload,1384,129,8,32
   497                        	.eos
   498                        	.stag	_fx_block_device_driver,1448,49
   499                        	.member	name,0,110,8,0,64
   500                        	.member	version,512,110,8,0,64
   501                        	.member	hmajor,1024,110,8,0,16
   502                        	.member	hminor,1152,110,8,0,16
   503                        	.member	type,1280,14,8,8
   504                        	.member	f_driver_load,1288,129,8,32
   505                        	.member	f_driver_read,1320,129,8,32
   506                        	.member	f_driver_write,1352,129,8,32
   507                        	.member	f_driver_unload,1384,129,8,32
   508                        	.member	f_driver_command,1416,129,8,32
   509                        	.eos
   510                        	.line	270
   511                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",19
   512                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",0
   513                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
   514                        	.line	134
   515                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",5
   516                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   517                        	.line	205
   518                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",6
   519                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   520                        	.line	708
   521                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",7
   522                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256fmx.h",0
   523                        	.line	1325
   524                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",10
   525                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",0
   526                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   527                        	.line	205
   528                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",5
  Thu Dec  3 2020 22:25                                                Page 11


   529                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
   530                        	.line	134
   531                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",6
   532                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   533                        	.line	708
   534                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",7
   535                        	.stag	_fx_string,64,50
   536                        	.member	size,0,16,8,16
   537                        	.member	pos,16,5,8,16
   538                        	.member	buffer,32,142,8,32
   539                        	.eos
   540                        	.line	71
   541                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",15
   542                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",0
   543                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   544                        	.line	25
   545                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",5
   546                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxexec.h",0
   547                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   548                        	.line	708
   549                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxexec.h",5
   550                        	.line	52
   551                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",6
   552                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",0
   553                        	.line	61
   554                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",7
   555                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",0
   556                        	.line	171
   557                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",8
   558                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",0
   559                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   560                        	.line	708
   561                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",5
   562                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   563                        	.line	25
   564                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",6
   565                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
  Thu Dec  3 2020 22:25                                                Page 12


                    space\FXOSv1\src\fxmemorymanager.h",0
   566                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   567                        	.line	25
   568                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",5
   569                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc_cfg.h",0
   570                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos_build_parameters.h",0
   571                        	.line	32
   572                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc_cfg.h",8
   573                        	.stag	UMM_HEAP_INFO_t,256,51
   574                        	.member	totalEntries,0,18,8,32
   575                        	.member	usedEntries,32,18,8,32
   576                        	.member	freeEntries,64,18,8,32
   577                        	.member	totalBlocks,96,18,8,32
   578                        	.member	usedBlocks,128,18,8,32
   579                        	.member	freeBlocks,160,18,8,32
   580                        	.member	maxFreeContiguousBlocks,192,18,8,32
   581                        	.member	blockSize,224,18,8,32
   582                        	.eos
   583                        	.line	199
   584                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",6
   585                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc.h",0
   586                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   587                        	.line	708
   588                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc.h",11
   589                        	.line	24
   590                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",7
   591                        	.stag	_fx_memory_map,2072,52
   592                        	.member	availableMemory,0,18,8,32
   593                        	.member	valid_segments,32,110,8,0,255
   594                        	.eos
   595                        	.line	39
   596                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",7
   597                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",0
   598                        	.line	743
   599                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",8
   600                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxgui.h",0
   601                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxfont.h",0
   602                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   603                        	.line	708
   604                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxfont.h",6
   605                        	.line	64
  Thu Dec  3 2020 22:25                                                Page 13


   606                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxgui.h",4
   607                        	.stag	_click_detected,64,53
   608                        	.member	window,0,138,8,32,30
   609                        	.member	handler,32,641,8,32
   610                        	.eos
   611                        	.stag	_current_palette_map,400,54
   612                        	.member	CUR_DESKTOP,0,5,8,16
   613                        	.member	CUR_BACKGROUND,16,5,8,16
   614                        	.member	CUR_FONT,32,5,8,16
   615                        	.member	CUR_SELECTED_FONT,48,5,8,16
   616                        	.member	CUR_HIGHLIGHT_COLOR,64,5,8,16
   617                        	.member	CUR_WINDOWFRAME,80,5,8,16
   618                        	.member	CUR_WINDOWBORDER,96,5,8,16
   619                        	.member	CUR_WINDOWSHADOW,112,5,8,16
   620                        	.member	CUR_MENU,128,5,8,16
   621                        	.member	CUR_GADGET,144,5,8,16
   622                        	.member	CUR_COLOR,160,101,8,0,15
   623                        	.eos
   624                        	.line	264
   625                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",9
   626                        	.stag	_childMessage_t,64,55
   627                        	.member	msgType,0,16,8,16
   628                        	.member	msgData,16,129,8,32
   629                        	.member	dataSize,48,16,8,16
   630                        	.eos
   631                        	.line	362
   632                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",9
   633                        	.stag	_fx_main_loopvars,16,56
   634                        	.member	dummy,0,5,8,16
   635                        	.eos
   636                        	.stag	_fxMouseMessageData,64,57
   637                        	.member	button1,0,14,8,8
   638                        	.member	button2,8,14,8,8
   639                        	.member	button3,16,14,8,8
   640                        	.member	button4,24,14,8,8
   641                        	.member	x,32,16,8,16
   642                        	.member	y,48,16,8,16
   643                        	.eos
   644                        	.stag	_fx_eventProcess,64,58
   645                        	.member	process,0,138,8,32,20
   646                        	.member	eventProc,32,641,8,32
   647                        	.eos
   648                        	.stag	_mouse_msg_state,184,59
   649                        	.member	lastEvent,0,18,8,32
   650                        	.member	buttonLeftDown,32,14,8,8
   651                        	.member	lastLeftDown,40,18,8,32
   652                        	.member	buttonRightDown,72,14,8,8
   653                        	.member	lastRightDown,80,18,8,32
   654                        	.member	buttonMiddleDown,112,14,8,8
   655                        	.member	lastMiddleDown,120,18,8,32
   656                        	.member	lastX,152,16,8,16
   657                        	.member	lastY,168,16,8,16
   658                        	.eos
   659                        	.line	743
   660                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
  Thu Dec  3 2020 22:25                                                Page 14


                    space\FXOSv1\src\fxconsole.h",16
   661                        	.stag	_fx_spinner_ctx,48,60
   662                        	.member	index,0,5,8,16
   663                        	.member	spinner,16,142,8,32
   664                        	.eos
   665                        	.stag	_fx_console_ctx,1144,61
   666                        	.member	lineBufferIndex,0,5,8,16
   667                        	.member	lineBuffer,16,110,8,0,128
   668                        	.member	isShifted,1040,14,8,8
   669                        	.member	userData,1048,129,8,32
   670                        	.member	screenBuffer,1080,129,8,32
   671                        	.member	Reserved1,1112,129,8,32
   672                        	.eos
   673                        	.stag	_token,64,62
   674                        	.member	type,0,5,8,16
   675                        	.member	depth,16,16,8,16
   676                        	.member	text,32,142,8,32
   677                        	.eos
   678                        	.stag	_command_args,64,63
   679                        	.member	proc,0,656,8,32
   680                        	.member	tokens,32,138,8,32,5
   681                        	.eos
   682                        	.line	171
   683                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",20
   684                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",0
   685                        	.line	71
   686                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",21
   687                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",0
   688                        	.line	61
   689                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",22
   690                        	.line	25
   691                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\flpydsk.c",11
   692                        ;#include "flpydsk.h"
   693                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\flpydsk.h",0
   694                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   695                        	.line	708
   696                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\flpydsk.h",14
   697                        	.line	68
   698                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\flpydsk.c",12
   699                        ;
   700                        ;void floppy_init();
   701                        ;void flpydsk_send_command(uint8_t cmd);
   702                        ;void flpydsk_reset();
   703                        ;//===============================================
                    =============================
   704                        ;//    IMPLEMENTATION PRIVATE DEFINITIONS / ENUMER
                    ATIONS / SIMPLE TYPEDEFS
   705                        ;//===============================================
  Thu Dec  3 2020 22:25                                                Page 15


                    =============================
   706                        ;
   707                        ;/*
   708                        ; **	Controller I/O Ports. Please see chapter
                     for additional ports
   709                        ; */
   710                        ;/* MSR flags */
   711                        ;#define MSR_RQM  0x80
   712                        ;#define MSR_DIO  0x40
   713                        ;#define MSR_NDMA 0x20
   714                        ;#define MSR_CB   0x10
   715                        ;
   716                        ;#define MSR_ACTD 0x08
   717                        ;#define MSR_ACTC 0x04
   718                        ;#define MSR_ACTB 0x02
   719                        ;#define MSR_ACTA 0x01
   720                        ;
   721                        ;#define MSR_OK_READ (MSR_RQM | MSR_DIO | MSR_CB)
   722                        ;
   723                        ;/* DIR flags */
   724                        ;#define DIR_DC 0x80
   725                        ;
   726                        ;
   727                        ;#define SECTOR_SIZE 512
   728                        ;#define SEC_PER_TRACK 18
   729                        ;
   730                        ;#define MS 1000
   731                        ;
   732                        ;#define FL_HLT (8*MS)
   733                        ;#define FL_SPIN_UP (400*MS)
   734                        ;#define FL_SPIN_DN (3000*MS)
   735                        ;#define FL_SEL_D (20*MS)
   736                        ;#define FL_INT_TMT (30000*MS)
   737                        ;
   738                        ;#define CMD_SPECIFY  0x03
   739                        ;#define CMD_WRITE    0x45
   740                        ;#define CMD_READ     0x46
   741                        ;#define CMD_SENSEI   0x08
   742                        ;#define CMD_READID   0x4A
   743                        ;#define CMD_RECAL    0x07
   744                        ;#define CMD_SEEK     0x0F
   745                        ;#define CMD_VERSION  0x10
   746                        ;#define CMD_CONF     0x13
   747                        ;
   748                        ;/**
   749                        ; *	Bits 0-4 of command byte. Please see cha
                    pter for additional commands
   750                        ; */
   751                        ;
   752                        ;enum FLPYDSK_CMD
   753                        ;{
   754                        ;
   755                        ;	FDC_CMD_READ_TRACK = 2,
   756                        ;	FDC_CMD_SPECIFY = 3,
   757                        ;	FDC_CMD_CHECK_STAT = 4,
   758                        ;	FDC_CMD_WRITE_SECT = 5,
   759                        ;	FDC_CMD_READ_SECT = 6,
   760                        ;	FDC_CMD_CALIBRATE = 7,
  Thu Dec  3 2020 22:25                                                Page 16


   761                        ;	FDC_CMD_CHECK_INT = 8,
   762                        ;	FDC_CMD_FORMAT_TRACK = 0xd,
   763                        ;	FDC_CMD_SEEK = 0xf
   764                        ;};
   765                        ;
   766                        ;/**
   767                        ; *	Additional command masks. Can be masked 
                    with above commands
   768                        ; */
   769                        ;
   770                        ;enum FLPYDSK_CMD_EXT
   771                        ;{
   772                        ;
   773                        ;	FDC_CMD_EXT_SKIP = 0x20,	//00100000
   774                        ;	FDC_CMD_EXT_DENSITY = 0x40,	//01000000
   775                        ;	FDC_CMD_EXT_MULTITRACK = 0x80	//10000000
   776                        ;};
   777                        ;
   778                        ;/*
   779                        ; **	Digital Output Register
   780                        ; */
   781                        ;
   782                        ;enum FLPYDSK_DOR_MASK
   783                        ;{
   784                        ;
   785                        ;	FLPYDSK_DOR_MASK_DRIVE0 = 0,	//00000000	
                    = here for completeness sake
   786                        ;	FLPYDSK_DOR_MASK_DRIVE1 = 1,	//00000001
   787                        ;	FLPYDSK_DOR_MASK_DRIVE2 = 2,	//00000010
   788                        ;	FLPYDSK_DOR_MASK_DRIVE3 = 3,	//00000011
   789                        ;	FLPYDSK_DOR_MASK_RESET = 4,	//00000100
   790                        ;	FLPYDSK_DOR_MASK_DMA = 8,	//00001000
   791                        ;	FLPYDSK_DOR_MASK_DRIVE0_MOTOR = 16,	//000100
                    00
   792                        ;	FLPYDSK_DOR_MASK_DRIVE1_MOTOR = 32,	//001000
                    00
   793                        ;	FLPYDSK_DOR_MASK_DRIVE2_MOTOR = 64,	//010000
                    00
   794                        ;	FLPYDSK_DOR_MASK_DRIVE3_MOTOR = 128	//100000
                    00
   795                        ;};
   796                        ;
   797                        ;/**
   798                        ; *	Main Status Register
   799                        ; */
   800                        ;
   801                        ;enum FLPYDSK_MSR_MASK
   802                        ;{
   803                        ;
   804                        ;	FLPYDSK_MSR_MASK_DRIVE1_POS_MODE = 1,	//000000
                    01
   805                        ;	FLPYDSK_MSR_MASK_DRIVE2_POS_MODE = 2,	//000000
                    10
   806                        ;	FLPYDSK_MSR_MASK_DRIVE3_POS_MODE = 4,	//000001
                    00
   807                        ;	FLPYDSK_MSR_MASK_DRIVE4_POS_MODE = 8,	//000010
                    00
   808                        ;	FLPYDSK_MSR_MASK_BUSY = 16,	//00010000
  Thu Dec  3 2020 22:25                                                Page 17


   809                        ;	FLPYDSK_MSR_MASK_DMA = 32,	//00100000
   810                        ;	FLPYDSK_MSR_MASK_DATAIO = 64, //01000000
   811                        ;	FLPYDSK_MSR_MASK_DATAREG = 128	//10000000
   812                        ;};
   813                        ;
   814                        ;/**
   815                        ; *	Controller Status Port 0
   816                        ; */
   817                        ;
   818                        ;enum FLPYDSK_ST0_MASK
   819                        ;{
   820                        ;
   821                        ;	FLPYDSK_ST0_MASK_DRIVE0 = 0,		//000000
                    00	=	for completness sake
   822                        ;	FLPYDSK_ST0_MASK_DRIVE1 = 1,		//000000
                    01
   823                        ;	FLPYDSK_ST0_MASK_DRIVE2 = 2,		//000000
                    10
   824                        ;	FLPYDSK_ST0_MASK_DRIVE3 = 3,		//000000
                    11
   825                        ;	FLPYDSK_ST0_MASK_HEADACTIVE = 4,		
                    //00000100
   826                        ;	FLPYDSK_ST0_MASK_NOTREADY = 8,		//000010
                    00
   827                        ;	FLPYDSK_ST0_MASK_UNITCHECK = 16,		
                    //00010000
   828                        ;	FLPYDSK_ST0_MASK_SEEKEND = 32,		//001000
                    00
   829                        ;	FLPYDSK_ST0_MASK_INTCODE = 64		//110000
                    00
   830                        ;};
   831                        ;
   832                        ;/*
   833                        ; ** LPYDSK_ST0_MASK_INTCODE types
   834                        ; */
   835                        ;
   836                        ;enum FLPYDSK_ST0_INTCODE_TYP
   837                        ;{
   838                        ;
   839                        ;	FLPYDSK_ST0_TYP_NORMAL = 0,
   840                        ;	FLPYDSK_ST0_TYP_ABNORMAL_ERR = 1,
   841                        ;	FLPYDSK_ST0_TYP_INVALID_ERR = 2,
   842                        ;	FLPYDSK_ST0_TYP_NOTREADY = 3
   843                        ;};
   844                        ;
   845                        ;/**
   846                        ; *	GAP 3 sizes
   847                        ; */
   848                        ;
   849                        ;enum FLPYDSK_GAP3_LENGTH
   850                        ;{
   851                        ;
   852                        ;	FLPYDSK_GAP3_LENGTH_STD = 42,
   853                        ;	FLPYDSK_GAP3_LENGTH_5_14 = 32,
   854                        ;	FLPYDSK_GAP3_LENGTH_3_5 = 27
   855                        ;};
   856                        ;
   857                        ;/*
  Thu Dec  3 2020 22:25                                                Page 18


   858                        ; **	Formula: 2^sector_number * 128, where ^ 
                    denotes "to the power of"
   859                        ; */
   860                        ;
   861                        ;enum FLPYDSK_SECTOR_DTL
   862                        ;{
   863                        ;
   864                        ;	FLPYDSK_SECTOR_DTL_128 = 0,
   865                        ;	FLPYDSK_SECTOR_DTL_256 = 1,
   866                        ;	FLPYDSK_SECTOR_DTL_512 = 2,
   867                        ;	FLPYDSK_SECTOR_DTL_1024 = 4
   868                        ;};
   869                        ;
   870                        ;/**
   871                        ; *	Constants
   872                        ; */
   873                        ;
   874                        ;//! floppy irq
   875                        ;const int FLOPPY_IRQ = 6;
   876                        	data
   877                        	xdef	~~FLOPPY_IRQ
   878                        ~~FLOPPY_IRQ:
   879 00:0000: 06 00        	dw	$6
   880 00:0002:              	ends
   881                        ;
   882                        ;//! sectors per track
   883                        ;const int FLPY_SECTORS_PER_TRACK = 18;
   884                        	data
   885                        	xdef	~~FLPY_SECTORS_PER_TRACK
   886                        ~~FLPY_SECTORS_PER_TRACK:
   887 00:0002: 12 00        	dw	$12
   888 00:0004:              	ends
   889                        ;
   890                        ;//! dma tranfer buffer starts here and ends at 0x
                    1000+64k
   891                        ;//! You can change this as needed. It must be bel
                    ow 16MB and in idenitity mapped memory!
   892                        ;const LPCHAR DMA_BUFFER = (LPCHAR) 0x1E1000;
   893                        	data
   894                        	xdef	~~DMA_BUFFER
   895                        ~~DMA_BUFFER:
   896 00:0004: 00 10 1E 00  	dl	$1E1000
   897 00:0008:              	ends
   898                        ;
   899                        ;//===============================================
                    =============================
   900                        ;//    IMPLEMENTATION PRIVATE CLASS PROTOTYPES / E
                    XTERNAL CLASS REFERENCES
   901                        ;//===============================================
                    =============================
   902                        ;//===============================================
                    =============================
   903                        ;//    IMPLEMENTATION PRIVATE STRUCTURES / UTILITY
                     CLASSES
   904                        ;//===============================================
                    =============================
   905                        ;//===============================================
                    =============================
  Thu Dec  3 2020 22:25                                                Page 19


   906                        ;//    IMPLEMENTATION REQUIRED EXTERNAL REFERENCES
                     (AVOID)
   907                        ;//===============================================
                    =============================
   908                        ;
   909                        ;//! used to wait in miliseconds
   910                        ;extern void sleep(int);
   911                        ;
   912                        ;//===============================================
                    =============================
   913                        ;//    IMPLEMENTATION PRIVATE DATA
   914                        ;//===============================================
                    =============================
   915                        ;
   916                        ;//! current working drive. Defaults to 0 which sh
                    ould be fine on most systems
   917                        ;static uint8_t _CurrentDrive = 0;
   918                        	data
   919                        ~~_CurrentDrive:
   920 00:0008: 00           	db	$0
   921 00:0009:              	ends
   922                        ;
   923                        ;//! set when IRQ fires
   924                        ;UCHAR _FloppyDiskIRQ = 0;
   925                        	data
   926                        	xdef	~~_FloppyDiskIRQ
   927                        ~~_FloppyDiskIRQ:
   928 00:0009: 00           	db	$0
   929 00:000A:              	ends
   930                        ;
   931                        ;#pragma section CODE=FLPY,offset $5:7FFF
   932                        FLPY	section	offset $5:7FFF
   933 05:7FFF:              	ends
   934                        ;//===============================================
                    =============================
   935                        ;//    INTERFACE DATA
   936                        ;//===============================================
                    =============================
   937                        ;//===============================================
                    =============================
   938                        ;//    IMPLEMENTATION PRIVATE FUNCTION PROTOTYPES
   939                        ;//===============================================
                    =============================
   940                        ;//===============================================
                    =============================
   941                        ;//    IMPLEMENTATION PRIVATE FUNCTIONS
   942                        ;//===============================================
                    =============================
   943                        ;
   944                        ;/**
   945                        ; *	DMA Routines.
   946                        ; **	The DMA (Direct Memory Access) controlle
                    r allows the FDC to send data to the DMA,
   947                        ; **	which can put the data in memory. While 
                    the FDC can be programmed to not use DMA,
   948                        ; **  it is not very well supported on emulators o
                    r virtual machines. Because of this, we
   949                        ; **  will be using the DMA for data transfers. Th
  Thu Dec  3 2020 22:25                                                Page 20


                    e DMA is a complex controller, because of
   950                        ; **  this we will cover it in the next tutorial. 
                    For now, please do not worry about the DMA
   951                        ; **  routines to much :)
   952                        ; */
   953                        ;/*
   954                        ;void flpydsk_wait_irq(void)
   955                        ;{
   956                        ;
   957                        ;	 int timeout = 0x7FFF;
   958                        ;
   959                        ;	 k_debug_hex("flpydsk_wait_irq:enter:",(inportb(
                    FLPYDSK_MSR) & 0xC0));
   960                        ;
   961                        ;	 while(((inportb(FLPYDSK_MSR) & 0xC0) != 0x80) &
                    & timeout)
   962                        ;	 {
   963                        ;
   964                        ;		 timeout--;
   965                        ;	 }
   966                        ;
   967                        ;	 k_debug_hex("flpydsk_wait_irq:exit:",(inportb(F
                    LPYDSK_MSR) & 0xC0));
   968                        ;
   969                        ;}
   970                        ;*/
   971                        ;
   972                        ;//! initialize DMA to use phys addr 84k-128k
   973                        ;void flpydsk_initialize_dma()
   974                        ;{
   975                        	.line	261
   976                        	.line	262
   977                        	FLPY
   978                        	xdef	~~flpydsk_initialize_dma
   979                        	func
   980                        	.function	262
   981                        ~~flpydsk_initialize_dma:
   982                        	longa	on
   983                        	longi	on
   984 05:7FFF: 3B           	tsc
   985 05:8000: 38           	sec
   986 05:8001: E9 00 00     	sbc	#L2
   987 05:8004: 1B           	tcs
   988 05:8005: 0B           	phd
   989 05:8006: 5B           	tcd
   990                        	.block	262
   991                        ;	/*
   992                        ;	 outportb(0x0a, 0x06);	//mask dma channel 2
   993                        ;	 outportb(0xd8, 0xff);	//reset master flip-flop
   994                        ;	 outportb(0x04, 0);     //address=0x1000
   995                        ;	 outportb(0x04, 0x10);
   996                        ;	 outportb(0xd8, 0xff);  //reset master flip-flop
   997                        ;	 outportb(0x05, 0xff); //count to 0x23ff (number
                     of bytes in a 3.5" floppy disk track)
   998                        ;	 outportb(0x05, 0x23);
   999                        ;	 outportb(0x80, 0);     //external page register
                     = 0
  1000                        ;	 outportb(0x0a, 0x02);  //unmask dma channel 2
  Thu Dec  3 2020 22:25                                                Page 21


  1001                        ;	 */
  1002                        ;}
  1003                        	.line	274
  1004                        L5:
  1005 05:8007: 2B           	pld
  1006 05:8008: 3B           	tsc
  1007 05:8009: 18           	clc
  1008 05:800A: 69 00 00     	adc	#L2
  1009 05:800D: 1B           	tcs
  1010 05:800E: 6B           	rtl
  1011                        	.endblock	274
  1012             00000000   L2	equ	0
  1013             00000001   L3	equ	1
  1014 05:800F:              	ends
  1015                        	efunc
  1016                        	.endfunc	274,1,0
  1017                        	.line	274
  1018                        ;
  1019                        ;//! prepare the DMA for read transfer
  1020                        ;void flpydsk_dma_read()
  1021                        ;{
  1022                        	.line	277
  1023                        	.line	278
  1024                        	FLPY
  1025                        	xdef	~~flpydsk_dma_read
  1026                        	func
  1027                        	.function	278
  1028                        ~~flpydsk_dma_read:
  1029                        	longa	on
  1030                        	longi	on
  1031 05:800F: 3B           	tsc
  1032 05:8010: 38           	sec
  1033 05:8011: E9 00 00     	sbc	#L6
  1034 05:8014: 1B           	tcs
  1035 05:8015: 0B           	phd
  1036 05:8016: 5B           	tcd
  1037                        	.block	278
  1038                        ;	/*
  1039                        ;	 outportb(0x0a, 0x06); //mask dma channel 2
  1040                        ;	 outportb(0x0b, 0x56); //single transfer, addres
                    s increment, autoinit, read, channel 2
  1041                        ;	 outportb(0x0a, 0x02); //unmask dma channel 2
  1042                        ;	 */
  1043                        ;}
  1044                        	.line	284
  1045                        L9:
  1046 05:8017: 2B           	pld
  1047 05:8018: 3B           	tsc
  1048 05:8019: 18           	clc
  1049 05:801A: 69 00 00     	adc	#L6
  1050 05:801D: 1B           	tcs
  1051 05:801E: 6B           	rtl
  1052                        	.endblock	284
  1053             00000000   L6	equ	0
  1054             00000001   L7	equ	1
  1055 05:801F:              	ends
  1056                        	efunc
  1057                        	.endfunc	284,1,0
  Thu Dec  3 2020 22:25                                                Page 22


  1058                        	.line	284
  1059                        ;
  1060                        ;//! prepare the DMA for write transfer
  1061                        ;void flpydsk_dma_write()
  1062                        ;{
  1063                        	.line	287
  1064                        	.line	288
  1065                        	FLPY
  1066                        	xdef	~~flpydsk_dma_write
  1067                        	func
  1068                        	.function	288
  1069                        ~~flpydsk_dma_write:
  1070                        	longa	on
  1071                        	longi	on
  1072 05:801F: 3B           	tsc
  1073 05:8020: 38           	sec
  1074 05:8021: E9 00 00     	sbc	#L10
  1075 05:8024: 1B           	tcs
  1076 05:8025: 0B           	phd
  1077 05:8026: 5B           	tcd
  1078                        	.block	288
  1079                        ;	/*
  1080                        ;	 outportb(0x0a, 0x06); //mask dma channel 2
  1081                        ;	 outportb(0x0b, 0x5a); //single transfer, addres
                    s increment, autoinit, write, channel 2
  1082                        ;	 outportb(0x0a, 0x02); //unmask dma channel 2
  1083                        ;	 */
  1084                        ;}
  1085                        	.line	294
  1086                        L13:
  1087 05:8027: 2B           	pld
  1088 05:8028: 3B           	tsc
  1089 05:8029: 18           	clc
  1090 05:802A: 69 00 00     	adc	#L10
  1091 05:802D: 1B           	tcs
  1092 05:802E: 6B           	rtl
  1093                        	.endblock	294
  1094             00000000   L10	equ	0
  1095             00000001   L11	equ	1
  1096 05:802F:              	ends
  1097                        	efunc
  1098                        	.endfunc	294,1,0
  1099                        	.line	294
  1100                        ;
  1101                        ;/**
  1102                        ; *	Basic Controller I/O Routines
  1103                        ; */
  1104                        ;
  1105                        ;//! return fdc status
  1106                        ;uint8_t flpydsk_read_status()
  1107                        ;{
  1108                        	.line	301
  1109                        	.line	302
  1110                        	FLPY
  1111                        	xdef	~~flpydsk_read_status
  1112                        	func
  1113                        	.function	302
  1114                        ~~flpydsk_read_status:
  Thu Dec  3 2020 22:25                                                Page 23


  1115                        	longa	on
  1116                        	longi	on
  1117 05:802F: 3B           	tsc
  1118 05:8030: 38           	sec
  1119 05:8031: E9 01 00     	sbc	#L14
  1120 05:8034: 1B           	tcs
  1121 05:8035: 0B           	phd
  1122 05:8036: 5B           	tcd
  1123                        	.block	302
  1124                        ;	uint8_t status = 0;
  1125                        ;
  1126                        ;	sleep(20);
  1127             00000000   status_1	set	0
  1128                        	.sym	status,0,14,1,8
  1129 05:8037: E2 20        	sep	#$20
  1130                        	longa	off
  1131 05:8039: 64 01        	stz	<L15+status_1
  1132 05:803B: C2 20        	rep	#$20
  1133                        	longa	on
  1134                        	.line	305
  1135 05:803D: F4 14 00     	pea	#<$14
  1136 05:8040: 22 xx xx xx  	jsl	~~sleep
  1137                        ;	status = inportb(FLPYDSK_MSR);
  1138                        	.line	306
  1139 05:8044: E2 20        	sep	#$20
  1140                        	longa	off
  1141 05:8046: AF F4 13 AF  	lda	>11473908
  1142 05:804A: 85 01        	sta	<L15+status_1
  1143 05:804C: C2 20        	rep	#$20
  1144                        	longa	on
  1145                        ;	k_debug_hex("flpydsk_read_status:", status);
  1146                        	.line	307
  1147 05:804E: D4 01        	pei	<L15+status_1
  1148 05:8050: F4 xx xx     	pea	#^L1
  1149 05:8053: F4 xx xx     	pea	#<L1
  1150 05:8056: 22 xx xx xx  	jsl	~~k_debug_hex
  1151                        ;
  1152                        ;	return status;
  1153                        	.line	309
  1154 05:805A: A5 01        	lda	<L15+status_1
  1155 05:805C: 29 FF 00     	and	#$ff
  1156                        L17:
  1157 05:805F: A8           	tay
  1158 05:8060: 2B           	pld
  1159 05:8061: 3B           	tsc
  1160 05:8062: 18           	clc
  1161 05:8063: 69 01 00     	adc	#L14
  1162 05:8066: 1B           	tcs
  1163 05:8067: 98           	tya
  1164 05:8068: 6B           	rtl
  1165                        ;}
  1166                        	.line	310
  1167                        	.endblock	310
  1168             00000001   L14	equ	1
  1169             00000001   L15	equ	1
  1170 05:8069:              	ends
  1171                        	efunc
  1172                        	.endfunc	310,1,1
  Thu Dec  3 2020 22:25                                                Page 24


  1173                        	.line	310
  1174                        	data
  1175                        L1:
  1176 00:000A: 66 6C 70 79  	db	$66,$6C,$70,$79,$64,$73,$6B,$5F,$72,$65,
                    $61,$64,$5F,$73,$74
       00:000E: 64 73 6B 5F 
       00:0012: 72 65 61 64 
       00:0016: 5F 73 74 
  1177 00:0019: 61 74 75 73  	db	$61,$74,$75,$73,$3A,$00
       00:001D: 3A 00 
  1178 00:001F:              	ends
  1179                        ;
  1180                        ;//! write to the fdc dor
  1181                        ;void flpydsk_write_dor(uint8_t val)
  1182                        ;{
  1183                        	.line	313
  1184                        	.line	314
  1185                        	FLPY
  1186                        	xdef	~~flpydsk_write_dor
  1187                        	func
  1188                        	.function	314
  1189                        ~~flpydsk_write_dor:
  1190                        	longa	on
  1191                        	longi	on
  1192 05:8069: 3B           	tsc
  1193 05:806A: 38           	sec
  1194 05:806B: E9 00 00     	sbc	#L19
  1195 05:806E: 1B           	tcs
  1196 05:806F: 0B           	phd
  1197 05:8070: 5B           	tcd
  1198             00000004   val_0	set	4
  1199                        	.block	314
  1200                        ;	k_debug_hex("flpydsk_write_dor:", val);
  1201                        	.sym	val,4,14,6,8
  1202                        	.line	315
  1203 05:8071: D4 04        	pei	<L19+val_0
  1204 05:8073: F4 xx xx     	pea	#^L18
  1205 05:8076: F4 xx xx     	pea	#<L18
  1206 05:8079: 22 xx xx xx  	jsl	~~k_debug_hex
  1207                        ;	//! write the digital output register
  1208                        ;	outportb(FLPYDSK_DOR, val);
  1209                        	.line	317
  1210 05:807D: E2 20        	sep	#$20
  1211                        	longa	off
  1212 05:807F: A5 04        	lda	<L19+val_0
  1213 05:8081: 8F F2 13 AF  	sta	>11473906
  1214 05:8085: C2 20        	rep	#$20
  1215                        	longa	on
  1216                        ;
  1217                        ;	//sleep(20);
  1218                        ;}
  1219                        	.line	320
  1220                        L22:
  1221 05:8087: A5 02        	lda	<L19+2
  1222 05:8089: 85 04        	sta	<L19+2+2
  1223 05:808B: A5 01        	lda	<L19+1
  1224 05:808D: 85 03        	sta	<L19+1+2
  1225 05:808F: 2B           	pld
  Thu Dec  3 2020 22:25                                                Page 25


  1226 05:8090: 3B           	tsc
  1227 05:8091: 18           	clc
  1228 05:8092: 69 02 00     	adc	#L19+2
  1229 05:8095: 1B           	tcs
  1230 05:8096: 6B           	rtl
  1231                        	.endblock	320
  1232             00000000   L19	equ	0
  1233             00000001   L20	equ	1
  1234 05:8097:              	ends
  1235                        	efunc
  1236                        	.endfunc	320,1,0
  1237                        	.line	320
  1238                        	data
  1239                        L18:
  1240 00:001F: 66 6C 70 79  	db	$66,$6C,$70,$79,$64,$73,$6B,$5F,$77,$72,
                    $69,$74,$65,$5F,$64
       00:0023: 64 73 6B 5F 
       00:0027: 77 72 69 74 
       00:002B: 65 5F 64 
  1241 00:002E: 6F 72 3A 00  	db	$6F,$72,$3A,$00
  1242 00:0032:              	ends
  1243                        ;
  1244                        ;//! send command byte to fdc
  1245                        ;void flpydsk_send_command(uint8_t cmd)
  1246                        ;{
  1247                        	.line	323
  1248                        	.line	324
  1249                        	FLPY
  1250                        	xdef	~~flpydsk_send_command
  1251                        	func
  1252                        	.function	324
  1253                        ~~flpydsk_send_command:
  1254                        	longa	on
  1255                        	longi	on
  1256 05:8097: 3B           	tsc
  1257 05:8098: 38           	sec
  1258 05:8099: E9 02 00     	sbc	#L24
  1259 05:809C: 1B           	tcs
  1260 05:809D: 0B           	phd
  1261 05:809E: 5B           	tcd
  1262             00000004   cmd_0	set	4
  1263                        	.block	324
  1264                        ;	int i;
  1265                        ;
  1266                        ;	k_debug_hex("flpydsk_send_command:", cmd);
  1267             00000000   i_1	set	0
  1268                        	.sym	i,0,5,1,16
  1269                        	.sym	cmd,4,14,6,8
  1270                        	.line	327
  1271 05:809F: D4 06        	pei	<L24+cmd_0
  1272 05:80A1: F4 xx xx     	pea	#^L23
  1273 05:80A4: F4 xx xx     	pea	#<L23
  1274 05:80A7: 22 xx xx xx  	jsl	~~k_debug_hex
  1275                        ;
  1276                        ;	//! wait until data register is ready. We send c
                    ommands to the data register
  1277                        ;	for (i = 0; i < 500; i++)
  1278                        	.line	330
  Thu Dec  3 2020 22:25                                                Page 26


  1279 05:80AB: 64 01        	stz	<L25+i_1
  1280                        L10003:
  1281                        ;	{
  1282                        	.line	331
  1283                        ;		if (flpydsk_read_status() & FLPYDSK_MSR_
                    MASK_DATAREG)
  1284                        	.line	332
  1285                        ;		{
  1286 05:80AD: 22 2F 80 05  	jsl	~~flpydsk_read_status
  1287 05:80B1: E2 20        	sep	#$20
  1288                        	longa	off
  1289 05:80B3: 29 80        	and	#<$80
  1290 05:80B5: C2 20        	rep	#$20
  1291                        	longa	on
  1292 05:80B7: D0 03        	bne	L27
  1293 05:80B9: 82 1A 00     	brl	L10004
  1294                        L27:
  1295                        	.line	333
  1296                        ;			outportb(FLPYDSK_FIFO, cmd);
  1297                        	.line	334
  1298 05:80BC: E2 20        	sep	#$20
  1299                        	longa	off
  1300 05:80BE: A5 06        	lda	<L24+cmd_0
  1301 05:80C0: 8F F5 13 AF  	sta	>11473909
  1302 05:80C4: C2 20        	rep	#$20
  1303                        	longa	on
  1304                        ;			return;
  1305                        	.line	335
  1306                        L28:
  1307 05:80C6: A5 04        	lda	<L24+2
  1308 05:80C8: 85 06        	sta	<L24+2+2
  1309 05:80CA: A5 03        	lda	<L24+1
  1310 05:80CC: 85 05        	sta	<L24+1+2
  1311 05:80CE: 2B           	pld
  1312 05:80CF: 3B           	tsc
  1313 05:80D0: 18           	clc
  1314 05:80D1: 69 04 00     	adc	#L24+2
  1315 05:80D4: 1B           	tcs
  1316 05:80D5: 6B           	rtl
  1317                        ;		}
  1318                        	.line	336
  1319                        ;	}
  1320                        L10004:
  1321                        	.line	337
  1322                        L10001:
  1323 05:80D6: E6 01        	inc	<L25+i_1
  1324 05:80D8: 38           	sec
  1325 05:80D9: A5 01        	lda	<L25+i_1
  1326 05:80DB: E9 F4 01     	sbc	#<$1f4
  1327 05:80DE: 70 03        	bvs	L29
  1328 05:80E0: 49 00 80     	eor	#$8000
  1329                        L29:
  1330 05:80E3: 30 03        	bmi	L30
  1331 05:80E5: 82 C5 FF     	brl	L10003
  1332                        L30:
  1333                        L10002:
  1334                        ;}
  1335                        	.line	338
  Thu Dec  3 2020 22:25                                                Page 27


  1336 05:80E8: 82 DB FF     	brl	L28
  1337                        	.endblock	338
  1338             00000002   L24	equ	2
  1339             00000001   L25	equ	1
  1340 05:80EB:              	ends
  1341                        	efunc
  1342                        	.endfunc	338,1,2
  1343                        	.line	338
  1344                        	data
  1345                        L23:
  1346 00:0032: 66 6C 70 79  	db	$66,$6C,$70,$79,$64,$73,$6B,$5F,$73,$65,
                    $6E,$64,$5F,$63,$6F
       00:0036: 64 73 6B 5F 
       00:003A: 73 65 6E 64 
       00:003E: 5F 63 6F 
  1347 00:0041: 6D 6D 61 6E  	db	$6D,$6D,$61,$6E,$64,$3A,$00
       00:0045: 64 3A 00 
  1348 00:0048:              	ends
  1349                        ;
  1350                        ;//! get data from fdc
  1351                        ;BOOL flpydsk_read_byte(uint8_t *pdata)
  1352                        ;{
  1353                        	.line	341
  1354                        	.line	342
  1355                        	FLPY
  1356                        	xdef	~~flpydsk_read_byte
  1357                        	func
  1358                        	.function	342
  1359                        ~~flpydsk_read_byte:
  1360                        	longa	on
  1361                        	longi	on
  1362 05:80EB: 3B           	tsc
  1363 05:80EC: 38           	sec
  1364 05:80ED: E9 02 00     	sbc	#L32
  1365 05:80F0: 1B           	tcs
  1366 05:80F1: 0B           	phd
  1367 05:80F2: 5B           	tcd
  1368             00000004   pdata_0	set	4
  1369                        	.block	342
  1370                        ;	int i;
  1371                        ;	k_debug_string("flpydsk_read_byte\r\n");
  1372             00000000   i_1	set	0
  1373                        	.sym	i,0,5,1,16
  1374                        	.sym	pdata,4,142,6,32
  1375                        	.line	344
  1376 05:80F3: F4 xx xx     	pea	#^L31
  1377 05:80F6: F4 xx xx     	pea	#<L31
  1378 05:80F9: 22 xx xx xx  	jsl	~~k_debug_string
  1379                        ;	//! same as above function but returns data regi
                    ster for reading
  1380                        ;	for (i = 0; i < 500; i++)
  1381                        	.line	346
  1382 05:80FD: 64 01        	stz	<L33+i_1
  1383                        L10007:
  1384                        ;	{
  1385                        	.line	347
  1386                        ;		if (flpydsk_read_status() & 0xC0)
  1387                        	.line	348
  Thu Dec  3 2020 22:25                                                Page 28


  1388                        ;		{
  1389 05:80FF: 22 2F 80 05  	jsl	~~flpydsk_read_status
  1390 05:8103: E2 20        	sep	#$20
  1391                        	longa	off
  1392 05:8105: 29 C0        	and	#<$c0
  1393 05:8107: C2 20        	rep	#$20
  1394                        	longa	on
  1395 05:8109: D0 03        	bne	L35
  1396 05:810B: 82 39 00     	brl	L10008
  1397                        L35:
  1398                        	.line	349
  1399                        ;			*pdata = inportb(FLPYDSK_FIFO);
  1400                        	.line	350
  1401 05:810E: E2 20        	sep	#$20
  1402                        	longa	off
  1403 05:8110: AF F5 13 AF  	lda	>11473909
  1404 05:8114: 87 06        	sta	[<L32+pdata_0]
  1405 05:8116: C2 20        	rep	#$20
  1406                        	longa	on
  1407                        ;			k_debug_hex("flpydsk_read_byte:"
                    , *pdata);
  1408                        	.line	351
  1409 05:8118: A7 06        	lda	[<L32+pdata_0]
  1410 05:811A: 48           	pha
  1411 05:811B: F4 xx xx     	pea	#^L31+20
  1412 05:811E: F4 xx xx     	pea	#<L31+20
  1413 05:8121: 22 xx xx xx  	jsl	~~k_debug_hex
  1414                        ;			k_debug_char("flpydsk_read_char:
                    ", *pdata);
  1415                        	.line	352
  1416 05:8125: A7 06        	lda	[<L32+pdata_0]
  1417 05:8127: 48           	pha
  1418 05:8128: F4 xx xx     	pea	#^L31+39
  1419 05:812B: F4 xx xx     	pea	#<L31+39
  1420 05:812E: 22 xx xx xx  	jsl	~~k_debug_char
  1421                        ;			return TRUE;
  1422                        	.line	353
  1423 05:8132: A9 01 00     	lda	#$1
  1424                        L36:
  1425 05:8135: A8           	tay
  1426 05:8136: A5 04        	lda	<L32+2
  1427 05:8138: 85 08        	sta	<L32+2+4
  1428 05:813A: A5 03        	lda	<L32+1
  1429 05:813C: 85 07        	sta	<L32+1+4
  1430 05:813E: 2B           	pld
  1431 05:813F: 3B           	tsc
  1432 05:8140: 18           	clc
  1433 05:8141: 69 06 00     	adc	#L32+4
  1434 05:8144: 1B           	tcs
  1435 05:8145: 98           	tya
  1436 05:8146: 6B           	rtl
  1437                        ;		}
  1438                        	.line	354
  1439                        ;	}
  1440                        L10008:
  1441                        	.line	355
  1442                        L10005:
  1443 05:8147: E6 01        	inc	<L33+i_1
  Thu Dec  3 2020 22:25                                                Page 29


  1444 05:8149: 38           	sec
  1445 05:814A: A5 01        	lda	<L33+i_1
  1446 05:814C: E9 F4 01     	sbc	#<$1f4
  1447 05:814F: 70 03        	bvs	L37
  1448 05:8151: 49 00 80     	eor	#$8000
  1449                        L37:
  1450 05:8154: 30 03        	bmi	L38
  1451 05:8156: 82 A6 FF     	brl	L10007
  1452                        L38:
  1453                        L10006:
  1454                        ;	return FALSE;
  1455                        	.line	356
  1456 05:8159: A9 00 00     	lda	#$0
  1457 05:815C: 82 D6 FF     	brl	L36
  1458                        ;}
  1459                        	.line	357
  1460                        	.endblock	357
  1461             00000002   L32	equ	2
  1462             00000001   L33	equ	1
  1463 05:815F:              	ends
  1464                        	efunc
  1465                        	.endfunc	357,1,2
  1466                        	.line	357
  1467                        	data
  1468                        L31:
  1469 00:0048: 66 6C 70 79  	db	$66,$6C,$70,$79,$64,$73,$6B,$5F,$72,$65,
                    $61,$64,$5F,$62,$79
       00:004C: 64 73 6B 5F 
       00:0050: 72 65 61 64 
       00:0054: 5F 62 79 
  1470 00:0057: 74 65 0D 0A  	db	$74,$65,$0D,$0A,$00,$66,$6C,$70,$79,$64,
                    $73,$6B,$5F,$72,$65
       00:005B: 00 66 6C 70 
       00:005F: 79 64 73 6B 
       00:0063: 5F 72 65 
  1471 00:0066: 61 64 5F 62  	db	$61,$64,$5F,$62,$79,$74,$65,$3A,$00,$66,
                    $6C,$70,$79,$64,$73
       00:006A: 79 74 65 3A 
       00:006E: 00 66 6C 70 
       00:0072: 79 64 73 
  1472 00:0075: 6B 5F 72 65  	db	$6B,$5F,$72,$65,$61,$64,$5F,$63,$68,$61,
                    $72,$3A,$00
       00:0079: 61 64 5F 63 
       00:007D: 68 61 72 3A 
       00:0081: 00 
  1473 00:0082:              	ends
  1474                        ;
  1475                        ;uint8_t flpydsk_read_data()
  1476                        ;{
  1477                        	.line	359
  1478                        	.line	360
  1479                        	FLPY
  1480                        	xdef	~~flpydsk_read_data
  1481                        	func
  1482                        	.function	360
  1483                        ~~flpydsk_read_data:
  1484                        	longa	on
  1485                        	longi	on
  Thu Dec  3 2020 22:25                                                Page 30


  1486 05:815F: 3B           	tsc
  1487 05:8160: 38           	sec
  1488 05:8161: E9 03 00     	sbc	#L40
  1489 05:8164: 1B           	tcs
  1490 05:8165: 0B           	phd
  1491 05:8166: 5B           	tcd
  1492                        	.block	360
  1493                        ;	UCHAR d = 0;
  1494                        ;	int i;
  1495                        ;	k_debug_string("flpydsk_read_data\r\n");
  1496             00000000   d_1	set	0
  1497             00000001   i_1	set	1
  1498                        	.sym	d,0,14,1,8
  1499                        	.sym	i,1,5,1,16
  1500 05:8167: E2 20        	sep	#$20
  1501                        	longa	off
  1502 05:8169: 64 01        	stz	<L41+d_1
  1503 05:816B: C2 20        	rep	#$20
  1504                        	longa	on
  1505                        	.line	363
  1506 05:816D: F4 xx xx     	pea	#^L39
  1507 05:8170: F4 xx xx     	pea	#<L39
  1508 05:8173: 22 xx xx xx  	jsl	~~k_debug_string
  1509                        ;	//! same as above function but returns data regi
                    ster for reading
  1510                        ;	for (i = 0; i < 500; i++)
  1511                        	.line	365
  1512 05:8177: 64 02        	stz	<L41+i_1
  1513                        L10011:
  1514                        ;	{
  1515                        	.line	366
  1516                        ;		if (flpydsk_read_status() & FLPYDSK_MSR_
                    MASK_DATAREG)
  1517                        	.line	367
  1518                        ;		{
  1519 05:8179: 22 2F 80 05  	jsl	~~flpydsk_read_status
  1520 05:817D: E2 20        	sep	#$20
  1521                        	longa	off
  1522 05:817F: 29 80        	and	#<$80
  1523 05:8181: C2 20        	rep	#$20
  1524                        	longa	on
  1525 05:8183: D0 03        	bne	L43
  1526 05:8185: 82 25 00     	brl	L10012
  1527                        L43:
  1528                        	.line	368
  1529                        ;			d = inportb(FLPYDSK_FIFO);
  1530                        	.line	369
  1531 05:8188: E2 20        	sep	#$20
  1532                        	longa	off
  1533 05:818A: AF F5 13 AF  	lda	>11473909
  1534 05:818E: 85 01        	sta	<L41+d_1
  1535 05:8190: C2 20        	rep	#$20
  1536                        	longa	on
  1537                        ;			k_debug_hex("flpydsk_read_data:"
                    , d);
  1538                        	.line	370
  1539 05:8192: D4 01        	pei	<L41+d_1
  1540 05:8194: F4 xx xx     	pea	#^L39+20
  Thu Dec  3 2020 22:25                                                Page 31


  1541 05:8197: F4 xx xx     	pea	#<L39+20
  1542 05:819A: 22 xx xx xx  	jsl	~~k_debug_hex
  1543                        ;			return d;
  1544                        	.line	371
  1545 05:819E: A5 01        	lda	<L41+d_1
  1546 05:81A0: 29 FF 00     	and	#$ff
  1547                        L44:
  1548 05:81A3: A8           	tay
  1549 05:81A4: 2B           	pld
  1550 05:81A5: 3B           	tsc
  1551 05:81A6: 18           	clc
  1552 05:81A7: 69 03 00     	adc	#L40
  1553 05:81AA: 1B           	tcs
  1554 05:81AB: 98           	tya
  1555 05:81AC: 6B           	rtl
  1556                        ;		}
  1557                        	.line	372
  1558                        ;	}
  1559                        L10012:
  1560                        	.line	373
  1561                        L10009:
  1562 05:81AD: E6 02        	inc	<L41+i_1
  1563 05:81AF: 38           	sec
  1564 05:81B0: A5 02        	lda	<L41+i_1
  1565 05:81B2: E9 F4 01     	sbc	#<$1f4
  1566 05:81B5: 70 03        	bvs	L45
  1567 05:81B7: 49 00 80     	eor	#$8000
  1568                        L45:
  1569 05:81BA: 30 03        	bmi	L46
  1570 05:81BC: 82 BA FF     	brl	L10011
  1571                        L46:
  1572                        L10010:
  1573                        ;	return 0;
  1574                        	.line	374
  1575 05:81BF: A9 00 00     	lda	#$0
  1576 05:81C2: 82 DE FF     	brl	L44
  1577                        ;}
  1578                        	.line	375
  1579                        	.endblock	375
  1580             00000003   L40	equ	3
  1581             00000001   L41	equ	1
  1582 05:81C5:              	ends
  1583                        	efunc
  1584                        	.endfunc	375,1,3
  1585                        	.line	375
  1586                        	data
  1587                        L39:
  1588 00:0082: 66 6C 70 79  	db	$66,$6C,$70,$79,$64,$73,$6B,$5F,$72,$65,
                    $61,$64,$5F,$64,$61
       00:0086: 64 73 6B 5F 
       00:008A: 72 65 61 64 
       00:008E: 5F 64 61 
  1589 00:0091: 74 61 0D 0A  	db	$74,$61,$0D,$0A,$00,$66,$6C,$70,$79,$64,
                    $73,$6B,$5F,$72,$65
       00:0095: 00 66 6C 70 
       00:0099: 79 64 73 6B 
       00:009D: 5F 72 65 
  1590 00:00A0: 61 64 5F 64  	db	$61,$64,$5F,$64,$61,$74,$61,$3A,$00
  Thu Dec  3 2020 22:25                                                Page 32


       00:00A4: 61 74 61 3A 
       00:00A8: 00 
  1591 00:00A9:              	ends
  1592                        ;
  1593                        ;//! write to the configuation control register
  1594                        ;void flpydsk_write_ccr(uint8_t val)
  1595                        ;{
  1596                        	.line	378
  1597                        	.line	379
  1598                        	FLPY
  1599                        	xdef	~~flpydsk_write_ccr
  1600                        	func
  1601                        	.function	379
  1602                        ~~flpydsk_write_ccr:
  1603                        	longa	on
  1604                        	longi	on
  1605 05:81C5: 3B           	tsc
  1606 05:81C6: 38           	sec
  1607 05:81C7: E9 00 00     	sbc	#L48
  1608 05:81CA: 1B           	tcs
  1609 05:81CB: 0B           	phd
  1610 05:81CC: 5B           	tcd
  1611             00000004   val_0	set	4
  1612                        	.block	379
  1613                        ;	k_debug_string("flpydsk_write_ccr\r\n");
  1614                        	.sym	val,4,14,6,8
  1615                        	.line	380
  1616 05:81CD: F4 xx xx     	pea	#^L47
  1617 05:81D0: F4 xx xx     	pea	#<L47
  1618 05:81D3: 22 xx xx xx  	jsl	~~k_debug_string
  1619                        ;	//! write the configuation control
  1620                        ;	outportb(FLPYDSK_CTRL, val);
  1621                        	.line	382
  1622 05:81D7: E2 20        	sep	#$20
  1623                        	longa	off
  1624 05:81D9: A5 04        	lda	<L48+val_0
  1625 05:81DB: 8F F7 13 AF  	sta	>11473911
  1626 05:81DF: C2 20        	rep	#$20
  1627                        	longa	on
  1628                        ;}
  1629                        	.line	383
  1630                        L51:
  1631 05:81E1: A5 02        	lda	<L48+2
  1632 05:81E3: 85 04        	sta	<L48+2+2
  1633 05:81E5: A5 01        	lda	<L48+1
  1634 05:81E7: 85 03        	sta	<L48+1+2
  1635 05:81E9: 2B           	pld
  1636 05:81EA: 3B           	tsc
  1637 05:81EB: 18           	clc
  1638 05:81EC: 69 02 00     	adc	#L48+2
  1639 05:81EF: 1B           	tcs
  1640 05:81F0: 6B           	rtl
  1641                        	.endblock	383
  1642             00000000   L48	equ	0
  1643             00000001   L49	equ	1
  1644 05:81F1:              	ends
  1645                        	efunc
  1646                        	.endfunc	383,1,0
  Thu Dec  3 2020 22:25                                                Page 33


  1647                        	.line	383
  1648                        	data
  1649                        L47:
  1650 00:00A9: 66 6C 70 79  	db	$66,$6C,$70,$79,$64,$73,$6B,$5F,$77,$72,
                    $69,$74,$65,$5F,$63
       00:00AD: 64 73 6B 5F 
       00:00B1: 77 72 69 74 
       00:00B5: 65 5F 63 
  1651 00:00B8: 63 72 0D 0A  	db	$63,$72,$0D,$0A,$00
       00:00BC: 00 
  1652 00:00BD:              	ends
  1653                        ;
  1654                        ;/**
  1655                        ; *	Interrupt Handling Routines
  1656                        ; */
  1657                        ;
  1658                        ;//!	floppy disk irq handler
  1659                        ;void i816_flpy_irq()
  1660                        ;{
  1661                        	.line	390
  1662                        	.line	391
  1663                        	FLPY
  1664                        	xdef	~~i816_flpy_irq
  1665                        	func
  1666                        	.function	391
  1667                        ~~i816_flpy_irq:
  1668                        	longa	on
  1669                        	longi	on
  1670 05:81F1: 3B           	tsc
  1671 05:81F2: 38           	sec
  1672 05:81F3: E9 00 00     	sbc	#L53
  1673 05:81F6: 1B           	tcs
  1674 05:81F7: 0B           	phd
  1675 05:81F8: 5B           	tcd
  1676                        	.block	391
  1677                        ;	/*
  1678                        ;	 _asm add
  1679                        ;	 esp, 12
  1680                        ;	 _asm pushad
  1681                        ;	 _asm cli
  1682                        ;
  1683                        ;	 //! irq fired
  1684                        ;	 _FloppyDiskIRQ = 1;
  1685                        ;
  1686                        ;	 //! tell hal we are done
  1687                        ;	 interruptdone(FLOPPY_IRQ);
  1688                        ;
  1689                        ;	 _asm sti
  1690                        ;	 _asm popad
  1691                        ;	 _asm iretd
  1692                        ;	 */
  1693                        ;}
  1694                        	.line	408
  1695                        L56:
  1696 05:81F9: 2B           	pld
  1697 05:81FA: 3B           	tsc
  1698 05:81FB: 18           	clc
  1699 05:81FC: 69 00 00     	adc	#L53
  Thu Dec  3 2020 22:25                                                Page 34


  1700 05:81FF: 1B           	tcs
  1701 05:8200: 6B           	rtl
  1702                        	.endblock	408
  1703             00000000   L53	equ	0
  1704             00000001   L54	equ	1
  1705 05:8201:              	ends
  1706                        	efunc
  1707                        	.endfunc	408,1,0
  1708                        	.line	408
  1709                        ;
  1710                        ;/**
  1711                        ; *	Controller Command Routines
  1712                        ; */
  1713                        ;
  1714                        ;//! check interrupt status command
  1715                        ;void flpydsk_check_int(uint32_t* st0, uint32_t* c
                    yl)
  1716                        ;{
  1717                        	.line	415
  1718                        	.line	416
  1719                        	FLPY
  1720                        	xdef	~~flpydsk_check_int
  1721                        	func
  1722                        	.function	416
  1723                        ~~flpydsk_check_int:
  1724                        	longa	on
  1725                        	longi	on
  1726 05:8201: 3B           	tsc
  1727 05:8202: 38           	sec
  1728 05:8203: E9 04 00     	sbc	#L57
  1729 05:8206: 1B           	tcs
  1730 05:8207: 0B           	phd
  1731 05:8208: 5B           	tcd
  1732             00000004   st0_0	set	4
  1733             00000008   cyl_0	set	8
  1734                        	.block	416
  1735                        ;	k_debug_string("flpydsk_check_int\r\n");
  1736                        	.sym	st0,4,146,6,32
  1737                        	.sym	cyl,8,146,6,32
  1738                        	.line	417
  1739 05:8209: F4 xx xx     	pea	#^L52
  1740 05:820C: F4 xx xx     	pea	#<L52
  1741 05:820F: 22 xx xx xx  	jsl	~~k_debug_string
  1742                        ;
  1743                        ;	flpydsk_send_command(FDC_CMD_CHECK_INT);
  1744                        	.line	419
  1745 05:8213: F4 08 00     	pea	#<$8
  1746 05:8216: 22 97 80 05  	jsl	~~flpydsk_send_command
  1747                        ;
  1748                        ;	*st0 = flpydsk_read_data();
  1749                        	.line	421
  1750 05:821A: 22 5F 81 05  	jsl	~~flpydsk_read_data
  1751 05:821E: E2 20        	sep	#$20
  1752                        	longa	off
  1753 05:8220: 85 01        	sta	<R0
  1754 05:8222: C2 20        	rep	#$20
  1755                        	longa	on
  1756 05:8224: A5 01        	lda	<R0
  Thu Dec  3 2020 22:25                                                Page 35


  1757 05:8226: 29 FF 00     	and	#$ff
  1758 05:8229: 85 01        	sta	<R0
  1759 05:822B: 64 03        	stz	<R0+2
  1760 05:822D: A5 01        	lda	<R0
  1761 05:822F: 87 08        	sta	[<L57+st0_0]
  1762 05:8231: A5 03        	lda	<R0+2
  1763 05:8233: A0 02 00     	ldy	#$2
  1764 05:8236: 97 08        	sta	[<L57+st0_0],Y
  1765                        ;	*cyl = flpydsk_read_data();
  1766                        	.line	422
  1767 05:8238: 22 5F 81 05  	jsl	~~flpydsk_read_data
  1768 05:823C: E2 20        	sep	#$20
  1769                        	longa	off
  1770 05:823E: 85 01        	sta	<R0
  1771 05:8240: C2 20        	rep	#$20
  1772                        	longa	on
  1773 05:8242: A5 01        	lda	<R0
  1774 05:8244: 29 FF 00     	and	#$ff
  1775 05:8247: 85 01        	sta	<R0
  1776 05:8249: 64 03        	stz	<R0+2
  1777 05:824B: A5 01        	lda	<R0
  1778 05:824D: 87 0C        	sta	[<L57+cyl_0]
  1779 05:824F: A5 03        	lda	<R0+2
  1780 05:8251: A0 02 00     	ldy	#$2
  1781 05:8254: 97 0C        	sta	[<L57+cyl_0],Y
  1782                        ;
  1783                        ;	k_debug_long("flpydsk_check_int:st0:", *st0);
  1784                        	.line	424
  1785 05:8256: A0 02 00     	ldy	#$2
  1786 05:8259: B7 08        	lda	[<L57+st0_0],Y
  1787 05:825B: 48           	pha
  1788 05:825C: A7 08        	lda	[<L57+st0_0]
  1789 05:825E: 48           	pha
  1790 05:825F: F4 xx xx     	pea	#^L52+20
  1791 05:8262: F4 xx xx     	pea	#<L52+20
  1792 05:8265: 22 xx xx xx  	jsl	~~k_debug_long
  1793                        ;	k_debug_long("flpydsk_check_int:cyl:", *cyl);
  1794                        	.line	425
  1795 05:8269: A0 02 00     	ldy	#$2
  1796 05:826C: B7 0C        	lda	[<L57+cyl_0],Y
  1797 05:826E: 48           	pha
  1798 05:826F: A7 0C        	lda	[<L57+cyl_0]
  1799 05:8271: 48           	pha
  1800 05:8272: F4 xx xx     	pea	#^L52+43
  1801 05:8275: F4 xx xx     	pea	#<L52+43
  1802 05:8278: 22 xx xx xx  	jsl	~~k_debug_long
  1803                        ;}
  1804                        	.line	426
  1805                        L60:
  1806 05:827C: A5 06        	lda	<L57+2
  1807 05:827E: 85 0E        	sta	<L57+2+8
  1808 05:8280: A5 05        	lda	<L57+1
  1809 05:8282: 85 0D        	sta	<L57+1+8
  1810 05:8284: 2B           	pld
  1811 05:8285: 3B           	tsc
  1812 05:8286: 18           	clc
  1813 05:8287: 69 0C 00     	adc	#L57+8
  1814 05:828A: 1B           	tcs
  Thu Dec  3 2020 22:25                                                Page 36


  1815 05:828B: 6B           	rtl
  1816                        	.endblock	426
  1817             00000004   L57	equ	4
  1818             00000005   L58	equ	5
  1819 05:828C:              	ends
  1820                        	efunc
  1821                        	.endfunc	426,5,4
  1822                        	.line	426
  1823                        	data
  1824                        L52:
  1825 00:00BD: 66 6C 70 79  	db	$66,$6C,$70,$79,$64,$73,$6B,$5F,$63,$68,
                    $65,$63,$6B,$5F,$69
       00:00C1: 64 73 6B 5F 
       00:00C5: 63 68 65 63 
       00:00C9: 6B 5F 69 
  1826 00:00CC: 6E 74 0D 0A  	db	$6E,$74,$0D,$0A,$00,$66,$6C,$70,$79,$64,
                    $73,$6B,$5F,$63,$68
       00:00D0: 00 66 6C 70 
       00:00D4: 79 64 73 6B 
       00:00D8: 5F 63 68 
  1827 00:00DB: 65 63 6B 5F  	db	$65,$63,$6B,$5F,$69,$6E,$74,$3A,$73,$74,
                    $30,$3A,$00,$66,$6C
       00:00DF: 69 6E 74 3A 
       00:00E3: 73 74 30 3A 
       00:00E7: 00 66 6C 
  1828 00:00EA: 70 79 64 73  	db	$70,$79,$64,$73,$6B,$5F,$63,$68,$65,$63,
                    $6B,$5F,$69,$6E,$74
       00:00EE: 6B 5F 63 68 
       00:00F2: 65 63 6B 5F 
       00:00F6: 69 6E 74 
  1829 00:00F9: 3A 63 79 6C  	db	$3A,$63,$79,$6C,$3A,$00
       00:00FD: 3A 00 
  1830 00:00FF:              	ends
  1831                        ;
  1832                        ;//! turns the current floppy drives motor on/off
  1833                        ;void flpydsk_control_motor(BOOL b)
  1834                        ;{
  1835                        	.line	429
  1836                        	.line	430
  1837                        	FLPY
  1838                        	xdef	~~flpydsk_control_motor
  1839                        	func
  1840                        	.function	430
  1841                        ~~flpydsk_control_motor:
  1842                        	longa	on
  1843                        	longi	on
  1844 05:828C: 3B           	tsc
  1845 05:828D: 38           	sec
  1846 05:828E: E9 0C 00     	sbc	#L62
  1847 05:8291: 1B           	tcs
  1848 05:8292: 0B           	phd
  1849 05:8293: 5B           	tcd
  1850             00000004   b_0	set	4
  1851                        	.block	430
  1852                        ;	uint32_t motor = 0;
  1853                        ;	//! sanity check: invalid drive
  1854                        ;	if (_CurrentDrive > 3)
  1855             00000000   motor_1	set	0
  Thu Dec  3 2020 22:25                                                Page 37


  1856                        	.sym	motor,0,18,1,32
  1857                        	.sym	b,4,14,6,8
  1858 05:8294: 64 09        	stz	<L63+motor_1
  1859 05:8296: 64 0B        	stz	<L63+motor_1+2
  1860                        	.line	433
  1861                        ;		return;
  1862 05:8298: E2 20        	sep	#$20
  1863                        	longa	off
  1864 05:829A: A9 03        	lda	#$3
  1865 05:829C: CD xx xx     	cmp	|~~_CurrentDrive
  1866 05:829F: C2 20        	rep	#$20
  1867                        	longa	on
  1868 05:82A1: 90 03        	bcc	L65
  1869 05:82A3: 82 10 00     	brl	L10013
  1870                        L65:
  1871                        	.line	434
  1872                        L66:
  1873 05:82A6: A5 0E        	lda	<L62+2
  1874 05:82A8: 85 10        	sta	<L62+2+2
  1875 05:82AA: A5 0D        	lda	<L62+1
  1876 05:82AC: 85 0F        	sta	<L62+1+2
  1877 05:82AE: 2B           	pld
  1878 05:82AF: 3B           	tsc
  1879 05:82B0: 18           	clc
  1880 05:82B1: 69 0E 00     	adc	#L62+2
  1881 05:82B4: 1B           	tcs
  1882 05:82B5: 6B           	rtl
  1883                        ;
  1884                        ;	k_debug_string("flpydsk_control_motor\r\n");
  1885                        L10013:
  1886                        	.line	436
  1887 05:82B6: F4 xx xx     	pea	#^L61
  1888 05:82B9: F4 xx xx     	pea	#<L61
  1889 05:82BC: 22 xx xx xx  	jsl	~~k_debug_string
  1890                        ;
  1891                        ;	//! select the correct mask based on current dri
                    ve
  1892                        ;	switch (_CurrentDrive)
  1893                        	.line	439
  1894 05:82C0: AD xx xx     	lda	|~~_CurrentDrive
  1895 05:82C3: 29 FF 00     	and	#$ff
  1896 05:82C6: 82 34 00     	brl	L10014
  1897                        ;	{
  1898                        	.line	440
  1899                        ;	case 0:
  1900                        	.line	441
  1901                        L10016:
  1902                        ;		motor = FLPYDSK_DOR_MASK_DRIVE0_MOTOR;
  1903                        	.line	442
  1904 05:82C9: A9 10 00     	lda	#$10
  1905 05:82CC: 85 09        	sta	<L63+motor_1
  1906 05:82CE: A9 00 00     	lda	#$0
  1907 05:82D1: 85 0B        	sta	<L63+motor_1+2
  1908                        ;		break;
  1909                        	.line	443
  1910 05:82D3: 82 39 00     	brl	L10015
  1911                        ;	case 1:
  1912                        	.line	444
  Thu Dec  3 2020 22:25                                                Page 38


  1913                        L10017:
  1914                        ;		motor = FLPYDSK_DOR_MASK_DRIVE1_MOTOR;
  1915                        	.line	445
  1916 05:82D6: A9 20 00     	lda	#$20
  1917 05:82D9: 85 09        	sta	<L63+motor_1
  1918 05:82DB: A9 00 00     	lda	#$0
  1919 05:82DE: 85 0B        	sta	<L63+motor_1+2
  1920                        ;		break;
  1921                        	.line	446
  1922 05:82E0: 82 2C 00     	brl	L10015
  1923                        ;	case 2:
  1924                        	.line	447
  1925                        L10018:
  1926                        ;		motor = FLPYDSK_DOR_MASK_DRIVE2_MOTOR;
  1927                        	.line	448
  1928 05:82E3: A9 40 00     	lda	#$40
  1929 05:82E6: 85 09        	sta	<L63+motor_1
  1930 05:82E8: A9 00 00     	lda	#$0
  1931 05:82EB: 85 0B        	sta	<L63+motor_1+2
  1932                        ;		break;
  1933                        	.line	449
  1934 05:82ED: 82 1F 00     	brl	L10015
  1935                        ;	case 3:
  1936                        	.line	450
  1937                        L10019:
  1938                        ;		motor = FLPYDSK_DOR_MASK_DRIVE3_MOTOR;
  1939                        	.line	451
  1940 05:82F0: A9 80 00     	lda	#$80
  1941 05:82F3: 85 09        	sta	<L63+motor_1
  1942 05:82F5: A9 00 00     	lda	#$0
  1943 05:82F8: 85 0B        	sta	<L63+motor_1+2
  1944                        ;		break;
  1945                        	.line	452
  1946 05:82FA: 82 12 00     	brl	L10015
  1947                        ;	}
  1948                        	.line	453
  1949                        L10014:
  1950                        	xref	~~~fsw
  1951 05:82FD: 22 xx xx xx  	jsl	~~~fsw
  1952 05:8301: 00 00        	dw	0
  1953 05:8303: 04 00        	dw	4
  1954 05:8305: 0E 83        	dw	L10015-1
  1955 05:8307: C8 82        	dw	L10016-1
  1956 05:8309: D5 82        	dw	L10017-1
  1957 05:830B: E2 82        	dw	L10018-1
  1958 05:830D: EF 82        	dw	L10019-1
  1959                        L10015:
  1960                        ;
  1961                        ;	//! turn on or off the motor of that drive
  1962                        ;	if (b)
  1963                        	.line	456
  1964                        ;		//flpydsk_write_dor(_CurrentDrive | moto
                    r | FLPYDSK_DOR_MASK_RESET | FLPYDSK_DOR_MASK_DMA);
  1965                        ;		flpydsk_write_dor(_CurrentDrive | motor 
                    | FLPYDSK_DOR_MASK_RESET);
  1966 05:830F: A5 10        	lda	<L62+b_0
  1967 05:8311: 29 FF 00     	and	#$ff
  1968 05:8314: D0 03        	bne	L67
  Thu Dec  3 2020 22:25                                                Page 39


  1969 05:8316: 82 2A 00     	brl	L10020
  1970                        L67:
  1971                        	.line	458
  1972 05:8319: AD xx xx     	lda	|~~_CurrentDrive
  1973 05:831C: 29 FF 00     	and	#$ff
  1974 05:831F: 85 01        	sta	<R0
  1975 05:8321: 64 03        	stz	<R0+2
  1976 05:8323: A5 09        	lda	<L63+motor_1
  1977 05:8325: 05 01        	ora	<R0
  1978 05:8327: 85 05        	sta	<R1
  1979 05:8329: A5 0B        	lda	<L63+motor_1+2
  1980 05:832B: 05 03        	ora	<R0+2
  1981 05:832D: 85 07        	sta	<R1+2
  1982 05:832F: A5 05        	lda	<R1
  1983 05:8331: 09 04 00     	ora	#<$4
  1984 05:8334: 85 01        	sta	<R0
  1985 05:8336: A5 07        	lda	<R1+2
  1986 05:8338: 85 03        	sta	<R0+2
  1987 05:833A: D4 01        	pei	<R0
  1988 05:833C: 22 69 80 05  	jsl	~~flpydsk_write_dor
  1989                        ;	else
  1990 05:8340: 82 07 00     	brl	L10021
  1991                        L10020:
  1992                        ;		flpydsk_write_dor(FLPYDSK_DOR_MASK_RESET
                    );
  1993                        	.line	460
  1994 05:8343: F4 04 00     	pea	#<$4
  1995 05:8346: 22 69 80 05  	jsl	~~flpydsk_write_dor
  1996                        L10021:
  1997                        ;
  1998                        ;	//! in all cases; wait a little bit for the moto
                    r to spin up/turn off
  1999                        ;	k_debug_string("flpydsk_control_motor sleeping\r
                    \n");
  2000                        	.line	463
  2001 05:834A: F4 xx xx     	pea	#^L61+24
  2002 05:834D: F4 xx xx     	pea	#<L61+24
  2003 05:8350: 22 xx xx xx  	jsl	~~k_debug_string
  2004                        ;	sleep(20);
  2005                        	.line	464
  2006 05:8354: F4 14 00     	pea	#<$14
  2007 05:8357: 22 xx xx xx  	jsl	~~sleep
  2008                        ;}
  2009                        	.line	465
  2010 05:835B: 82 48 FF     	brl	L66
  2011                        	.endblock	465
  2012             0000000C   L62	equ	12
  2013             00000009   L63	equ	9
  2014 05:835E:              	ends
  2015                        	efunc
  2016                        	.endfunc	465,9,12
  2017                        	.line	465
  2018                        	data
  2019                        L61:
  2020 00:00FF: 66 6C 70 79  	db	$66,$6C,$70,$79,$64,$73,$6B,$5F,$63,$6F,
                    $6E,$74,$72,$6F,$6C
       00:0103: 64 73 6B 5F 
       00:0107: 63 6F 6E 74 
  Thu Dec  3 2020 22:25                                                Page 40


       00:010B: 72 6F 6C 
  2021 00:010E: 5F 6D 6F 74  	db	$5F,$6D,$6F,$74,$6F,$72,$0D,$0A,$00,$66,
                    $6C,$70,$79,$64,$73
       00:0112: 6F 72 0D 0A 
       00:0116: 00 66 6C 70 
       00:011A: 79 64 73 
  2022 00:011D: 6B 5F 63 6F  	db	$6B,$5F,$63,$6F,$6E,$74,$72,$6F,$6C,$5F,
                    $6D,$6F,$74,$6F,$72
       00:0121: 6E 74 72 6F 
       00:0125: 6C 5F 6D 6F 
       00:0129: 74 6F 72 
  2023 00:012C: 20 73 6C 65  	db	$20,$73,$6C,$65,$65,$70,$69,$6E,$67,$0D,
                    $0A,$00
       00:0130: 65 70 69 6E 
       00:0134: 67 0D 0A 00 
  2024 00:0138:              	ends
  2025                        ;
  2026                        ;//! configure drive flpydsk_drive_data(3, 16, 240
                    , FALSE);
  2027                        ;void flpydsk_drive_data(uint32_t stepr, uint32_t 
                    loadt, uint32_t unloadt,BOOL dma)
  2028                        ;{
  2029                        	.line	468
  2030                        	.line	469
  2031                        	FLPY
  2032                        	xdef	~~flpydsk_drive_data
  2033                        	func
  2034                        	.function	469
  2035                        ~~flpydsk_drive_data:
  2036                        	longa	on
  2037                        	longi	on
  2038 05:835E: 3B           	tsc
  2039 05:835F: 38           	sec
  2040 05:8360: E9 10 00     	sbc	#L69
  2041 05:8363: 1B           	tcs
  2042 05:8364: 0B           	phd
  2043 05:8365: 5B           	tcd
  2044             00000004   stepr_0	set	4
  2045             00000008   loadt_0	set	8
  2046             0000000C   unloadt_0	set	12
  2047             00000010   dma_0	set	16
  2048                        	.block	469
  2049                        ;
  2050                        ;	uint32_t data = 0;
  2051                        ;
  2052                        ;	k_debug_string("flpydsk_drive_data\r\n");
  2053             00000000   data_1	set	0
  2054                        	.sym	data,0,18,1,32
  2055                        	.sym	stepr,4,18,6,32
  2056                        	.sym	loadt,8,18,6,32
  2057                        	.sym	unloadt,12,18,6,32
  2058                        	.sym	dma,16,14,6,8
  2059 05:8366: 64 0D        	stz	<L70+data_1
  2060 05:8368: 64 0F        	stz	<L70+data_1+2
  2061                        	.line	473
  2062 05:836A: F4 xx xx     	pea	#^L68
  2063 05:836D: F4 xx xx     	pea	#<L68
  2064 05:8370: 22 xx xx xx  	jsl	~~k_debug_string
  Thu Dec  3 2020 22:25                                                Page 41


  2065                        ;
  2066                        ;	//! send command
  2067                        ;	flpydsk_send_command(FDC_CMD_SPECIFY);
  2068                        	.line	476
  2069 05:8374: F4 03 00     	pea	#<$3
  2070 05:8377: 22 97 80 05  	jsl	~~flpydsk_send_command
  2071                        ;	data = ((stepr & 0xf) << 4) | (unloadt & 0xf);
  2072                        	.line	477
  2073 05:837B: A5 14        	lda	<L69+stepr_0
  2074 05:837D: 29 0F 00     	and	#<$f
  2075 05:8380: 85 05        	sta	<R1
  2076 05:8382: 64 07        	stz	<R1+2
  2077 05:8384: D4 07        	pei	<R1+2
  2078 05:8386: D4 05        	pei	<R1
  2079 05:8388: A9 04 00     	lda	#$4
  2080                        	xref	~~~lasl
  2081 05:838B: 22 xx xx xx  	jsl	~~~lasl
  2082 05:838F: 85 01        	sta	<R0
  2083 05:8391: 86 03        	stx	<R0+2
  2084 05:8393: A5 1C        	lda	<L69+unloadt_0
  2085 05:8395: 29 0F 00     	and	#<$f
  2086 05:8398: 85 09        	sta	<R2
  2087 05:839A: 64 0B        	stz	<R2+2
  2088 05:839C: A5 09        	lda	<R2
  2089 05:839E: 05 01        	ora	<R0
  2090 05:83A0: 85 0D        	sta	<L70+data_1
  2091 05:83A2: A5 0B        	lda	<R2+2
  2092 05:83A4: 05 03        	ora	<R0+2
  2093 05:83A6: 85 0F        	sta	<L70+data_1+2
  2094                        ;	flpydsk_send_command(data);
  2095                        	.line	478
  2096 05:83A8: D4 0D        	pei	<L70+data_1
  2097 05:83AA: 22 97 80 05  	jsl	~~flpydsk_send_command
  2098                        ;	data = (loadt) << 1 | (dma == FALSE) ? 0 : 1;
  2099                        	.line	479
  2100 05:83AE: A5 18        	lda	<L69+loadt_0
  2101 05:83B0: 85 01        	sta	<R0
  2102 05:83B2: A5 1A        	lda	<L69+loadt_0+2
  2103 05:83B4: 85 03        	sta	<R0+2
  2104 05:83B6: 06 01        	asl	<R0
  2105 05:83B8: 26 03        	rol	<R0+2
  2106 05:83BA: 64 05        	stz	<R1
  2107 05:83BC: A5 20        	lda	<L69+dma_0
  2108 05:83BE: 29 FF 00     	and	#$ff
  2109 05:83C1: F0 03        	beq	L74
  2110 05:83C3: 82 02 00     	brl	L73
  2111                        L74:
  2112 05:83C6: E6 05        	inc	<R1
  2113                        L73:
  2114 05:83C8: A0 00 00     	ldy	#$0
  2115 05:83CB: A5 05        	lda	<R1
  2116 05:83CD: 10 01        	bpl	L75
  2117 05:83CF: 88           	dey
  2118                        L75:
  2119 05:83D0: 85 05        	sta	<R1
  2120 05:83D2: 84 07        	sty	<R1+2
  2121 05:83D4: A5 05        	lda	<R1
  2122 05:83D6: 05 01        	ora	<R0
  Thu Dec  3 2020 22:25                                                Page 42


  2123 05:83D8: 85 09        	sta	<R2
  2124 05:83DA: A5 07        	lda	<R1+2
  2125 05:83DC: 05 03        	ora	<R0+2
  2126 05:83DE: 85 0B        	sta	<R2+2
  2127 05:83E0: A5 09        	lda	<R2
  2128 05:83E2: 05 0B        	ora	<R2+2
  2129 05:83E4: D0 03        	bne	L76
  2130 05:83E6: 82 05 00     	brl	L72
  2131                        L76:
  2132 05:83E9: A9 00 00     	lda	#$0
  2133 05:83EC: 80 03        	bra	L77
  2134                        L72:
  2135 05:83EE: A9 01 00     	lda	#$1
  2136                        L77:
  2137 05:83F1: 85 01        	sta	<R0
  2138 05:83F3: A0 00 00     	ldy	#$0
  2139 05:83F6: A5 01        	lda	<R0
  2140 05:83F8: 10 01        	bpl	L78
  2141 05:83FA: 88           	dey
  2142                        L78:
  2143 05:83FB: 85 0D        	sta	<L70+data_1
  2144 05:83FD: 84 0F        	sty	<L70+data_1+2
  2145                        ;	flpydsk_send_command(data);
  2146                        	.line	480
  2147 05:83FF: D4 0D        	pei	<L70+data_1
  2148 05:8401: 22 97 80 05  	jsl	~~flpydsk_send_command
  2149                        ;}
  2150                        	.line	481
  2151                        L79:
  2152 05:8405: A5 12        	lda	<L69+2
  2153 05:8407: 85 20        	sta	<L69+2+14
  2154 05:8409: A5 11        	lda	<L69+1
  2155 05:840B: 85 1F        	sta	<L69+1+14
  2156 05:840D: 2B           	pld
  2157 05:840E: 3B           	tsc
  2158 05:840F: 18           	clc
  2159 05:8410: 69 1E 00     	adc	#L69+14
  2160 05:8413: 1B           	tcs
  2161 05:8414: 6B           	rtl
  2162                        	.endblock	481
  2163             00000010   L69	equ	16
  2164             0000000D   L70	equ	13
  2165 05:8415:              	ends
  2166                        	efunc
  2167                        	.endfunc	481,13,16
  2168                        	.line	481
  2169                        	data
  2170                        L68:
  2171 00:0138: 66 6C 70 79  	db	$66,$6C,$70,$79,$64,$73,$6B,$5F,$64,$72,
                    $69,$76,$65,$5F,$64
       00:013C: 64 73 6B 5F 
       00:0140: 64 72 69 76 
       00:0144: 65 5F 64 
  2172 00:0147: 61 74 61 0D  	db	$61,$74,$61,$0D,$0A,$00
       00:014B: 0A 00 
  2173 00:014D:              	ends
  2174                        ;
  2175                        ;//! calibrates the drive
  Thu Dec  3 2020 22:25                                                Page 43


  2176                        ;int flpydsk_calibrate(uint32_t drive)
  2177                        ;{
  2178                        	.line	484
  2179                        	.line	485
  2180                        	FLPY
  2181                        	xdef	~~flpydsk_calibrate
  2182                        	func
  2183                        	.function	485
  2184                        ~~flpydsk_calibrate:
  2185                        	longa	on
  2186                        	longi	on
  2187 05:8415: 3B           	tsc
  2188 05:8416: 38           	sec
  2189 05:8417: E9 0A 00     	sbc	#L81
  2190 05:841A: 1B           	tcs
  2191 05:841B: 0B           	phd
  2192 05:841C: 5B           	tcd
  2193             00000004   drive_0	set	4
  2194                        	.block	485
  2195                        ;	int i;
  2196                        ;	uint32_t st0, cyl;
  2197                        ;
  2198                        ;	k_debug_string("flpydsk_calibrate\r\n");
  2199             00000000   i_1	set	0
  2200             00000002   st0_1	set	2
  2201             00000006   cyl_1	set	6
  2202                        	.sym	i,0,5,1,16
  2203                        	.sym	st0,2,18,1,32
  2204                        	.sym	cyl,6,18,1,32
  2205                        	.sym	drive,4,18,6,32
  2206                        	.line	489
  2207 05:841D: F4 xx xx     	pea	#^L80
  2208 05:8420: F4 xx xx     	pea	#<L80
  2209 05:8423: 22 xx xx xx  	jsl	~~k_debug_string
  2210                        ;
  2211                        ;	if (drive >= 4)
  2212                        	.line	491
  2213                        ;		return -2;
  2214 05:8427: A5 0E        	lda	<L81+drive_0
  2215 05:8429: C9 04 00     	cmp	#<$4
  2216 05:842C: A5 10        	lda	<L81+drive_0+2
  2217 05:842E: E9 00 00     	sbc	#^$4
  2218 05:8431: B0 03        	bcs	L84
  2219 05:8433: 82 15 00     	brl	L10022
  2220                        L84:
  2221                        	.line	492
  2222 05:8436: A9 FE FF     	lda	#$fffe
  2223                        L85:
  2224 05:8439: A8           	tay
  2225 05:843A: A5 0C        	lda	<L81+2
  2226 05:843C: 85 10        	sta	<L81+2+4
  2227 05:843E: A5 0B        	lda	<L81+1
  2228 05:8440: 85 0F        	sta	<L81+1+4
  2229 05:8442: 2B           	pld
  2230 05:8443: 3B           	tsc
  2231 05:8444: 18           	clc
  2232 05:8445: 69 0E 00     	adc	#L81+4
  2233 05:8448: 1B           	tcs
  Thu Dec  3 2020 22:25                                                Page 44


  2234 05:8449: 98           	tya
  2235 05:844A: 6B           	rtl
  2236                        ;
  2237                        ;	//! turn on the motor
  2238                        ;	flpydsk_control_motor(TRUE);
  2239                        L10022:
  2240                        	.line	495
  2241 05:844B: F4 01 00     	pea	#<$1
  2242 05:844E: 22 8C 82 05  	jsl	~~flpydsk_control_motor
  2243                        ;
  2244                        ;	for (i = 0; i < 100; i++)
  2245                        	.line	497
  2246 05:8452: 64 01        	stz	<L82+i_1
  2247                        L10025:
  2248                        ;	{
  2249                        	.line	498
  2250                        ;
  2251                        ;		//! send command
  2252                        ;		flpydsk_send_command(FDC_CMD_CALIBRATE);
  2253                        	.line	501
  2254 05:8454: F4 07 00     	pea	#<$7
  2255 05:8457: 22 97 80 05  	jsl	~~flpydsk_send_command
  2256                        ;		flpydsk_send_command(drive);
  2257                        	.line	502
  2258 05:845B: D4 0E        	pei	<L81+drive_0
  2259 05:845D: 22 97 80 05  	jsl	~~flpydsk_send_command
  2260                        ;		flpydsk_wait_irq();
  2261                        	.line	503
  2262                        L10026:
  2263 05:8461: AD xx xx     	lda	|~~_FloppyDiskIRQ
  2264 05:8464: 29 FF 00     	and	#$ff
  2265 05:8467: F0 03        	beq	L86
  2266 05:8469: 82 03 00     	brl	L10027
  2267                        L86:
  2268                        	.line	503
  2269 05:846C: 82 F2 FF     	brl	L10026
  2270                        L10027:
  2271                        	.line	503
  2272 05:846F: E2 20        	sep	#$20
  2273                        	longa	off
  2274 05:8471: 9C xx xx     	stz	|~~_FloppyDiskIRQ
  2275 05:8474: C2 20        	rep	#$20
  2276                        	longa	on
  2277                        	.line	503
  2278                        ;		flpydsk_check_int(&st0, &cyl);
  2279                        	.line	504
  2280 05:8476: F4 00 00     	pea	#0
  2281 05:8479: 18           	clc
  2282 05:847A: 7B           	tdc
  2283 05:847B: 69 07 00     	adc	#<L82+cyl_1
  2284 05:847E: 48           	pha
  2285 05:847F: F4 00 00     	pea	#0
  2286 05:8482: 18           	clc
  2287 05:8483: 7B           	tdc
  2288 05:8484: 69 03 00     	adc	#<L82+st0_1
  2289 05:8487: 48           	pha
  2290 05:8488: 22 01 82 05  	jsl	~~flpydsk_check_int
  2291                        ;
  Thu Dec  3 2020 22:25                                                Page 45


  2292                        ;		//! did we fine cylinder 0? if so, we ar
                    e done
  2293                        ;		if (!cyl)
  2294                        	.line	507
  2295                        ;		{
  2296 05:848C: A5 07        	lda	<L82+cyl_1
  2297 05:848E: 05 09        	ora	<L82+cyl_1+2
  2298 05:8490: F0 03        	beq	L87
  2299 05:8492: 82 1B 00     	brl	L10028
  2300                        L87:
  2301                        	.line	508
  2302                        ;
  2303                        ;			k_debug_long("flpydsk_calibrate:
                    cy:", cyl);
  2304                        	.line	510
  2305 05:8495: D4 09        	pei	<L82+cyl_1+2
  2306 05:8497: D4 07        	pei	<L82+cyl_1
  2307 05:8499: F4 xx xx     	pea	#^L80+20
  2308 05:849C: F4 xx xx     	pea	#<L80+20
  2309 05:849F: 22 xx xx xx  	jsl	~~k_debug_long
  2310                        ;			flpydsk_control_motor(FALSE);
  2311                        	.line	511
  2312 05:84A3: F4 00 00     	pea	#<$0
  2313 05:84A6: 22 8C 82 05  	jsl	~~flpydsk_control_motor
  2314                        ;			return 0;
  2315                        	.line	512
  2316 05:84AA: A9 00 00     	lda	#$0
  2317 05:84AD: 82 89 FF     	brl	L85
  2318                        ;		}
  2319                        	.line	513
  2320                        ;	}
  2321                        L10028:
  2322                        	.line	514
  2323                        L10023:
  2324 05:84B0: E6 01        	inc	<L82+i_1
  2325 05:84B2: 38           	sec
  2326 05:84B3: A5 01        	lda	<L82+i_1
  2327 05:84B5: E9 64 00     	sbc	#<$64
  2328 05:84B8: 70 03        	bvs	L88
  2329 05:84BA: 49 00 80     	eor	#$8000
  2330                        L88:
  2331 05:84BD: 30 03        	bmi	L89
  2332 05:84BF: 82 92 FF     	brl	L10025
  2333                        L89:
  2334                        L10024:
  2335                        ;
  2336                        ;	flpydsk_control_motor(FALSE);
  2337                        	.line	516
  2338 05:84C2: F4 00 00     	pea	#<$0
  2339 05:84C5: 22 8C 82 05  	jsl	~~flpydsk_control_motor
  2340                        ;	return -1;
  2341                        	.line	517
  2342 05:84C9: A9 FF FF     	lda	#$ffff
  2343 05:84CC: 82 6A FF     	brl	L85
  2344                        ;}
  2345                        	.line	518
  2346                        	.endblock	518
  2347             0000000A   L81	equ	10
  Thu Dec  3 2020 22:25                                                Page 46


  2348             00000001   L82	equ	1
  2349 05:84CF:              	ends
  2350                        	efunc
  2351                        	.endfunc	518,1,10
  2352                        	.line	518
  2353                        	data
  2354                        L80:
  2355 00:014D: 66 6C 70 79  	db	$66,$6C,$70,$79,$64,$73,$6B,$5F,$63,$61,
                    $6C,$69,$62,$72,$61
       00:0151: 64 73 6B 5F 
       00:0155: 63 61 6C 69 
       00:0159: 62 72 61 
  2356 00:015C: 74 65 0D 0A  	db	$74,$65,$0D,$0A,$00,$66,$6C,$70,$79,$64,
                    $73,$6B,$5F,$63,$61
       00:0160: 00 66 6C 70 
       00:0164: 79 64 73 6B 
       00:0168: 5F 63 61 
  2357 00:016B: 6C 69 62 72  	db	$6C,$69,$62,$72,$61,$74,$65,$3A,$63,$79,
                    $3A,$00
       00:016F: 61 74 65 3A 
       00:0173: 63 79 3A 00 
  2358 00:0177:              	ends
  2359                        ;
  2360                        ;//! disable controller
  2361                        ;void flpydsk_disable_controller()
  2362                        ;{
  2363                        	.line	521
  2364                        	.line	522
  2365                        	FLPY
  2366                        	xdef	~~flpydsk_disable_controller
  2367                        	func
  2368                        	.function	522
  2369                        ~~flpydsk_disable_controller:
  2370                        	longa	on
  2371                        	longi	on
  2372 05:84CF: 3B           	tsc
  2373 05:84D0: 38           	sec
  2374 05:84D1: E9 00 00     	sbc	#L91
  2375 05:84D4: 1B           	tcs
  2376 05:84D5: 0B           	phd
  2377 05:84D6: 5B           	tcd
  2378                        	.block	522
  2379                        ;	k_debug_string("flpydsk_disable_controller\r\n")
                    ;
  2380                        	.line	523
  2381 05:84D7: F4 xx xx     	pea	#^L90
  2382 05:84DA: F4 xx xx     	pea	#<L90
  2383 05:84DD: 22 xx xx xx  	jsl	~~k_debug_string
  2384                        ;	flpydsk_write_dor(0);
  2385                        	.line	524
  2386 05:84E1: F4 00 00     	pea	#<$0
  2387 05:84E4: 22 69 80 05  	jsl	~~flpydsk_write_dor
  2388                        ;}
  2389                        	.line	525
  2390                        L94:
  2391 05:84E8: 2B           	pld
  2392 05:84E9: 3B           	tsc
  2393 05:84EA: 18           	clc
  Thu Dec  3 2020 22:25                                                Page 47


  2394 05:84EB: 69 00 00     	adc	#L91
  2395 05:84EE: 1B           	tcs
  2396 05:84EF: 6B           	rtl
  2397                        	.endblock	525
  2398             00000000   L91	equ	0
  2399             00000001   L92	equ	1
  2400 05:84F0:              	ends
  2401                        	efunc
  2402                        	.endfunc	525,1,0
  2403                        	.line	525
  2404                        	data
  2405                        L90:
  2406 00:0177: 66 6C 70 79  	db	$66,$6C,$70,$79,$64,$73,$6B,$5F,$64,$69,
                    $73,$61,$62,$6C,$65
       00:017B: 64 73 6B 5F 
       00:017F: 64 69 73 61 
       00:0183: 62 6C 65 
  2407 00:0186: 5F 63 6F 6E  	db	$5F,$63,$6F,$6E,$74,$72,$6F,$6C,$6C,$65,
                    $72,$0D,$0A,$00
       00:018A: 74 72 6F 6C 
       00:018E: 6C 65 72 0D 
       00:0192: 0A 00 
  2408 00:0194:              	ends
  2409                        ;
  2410                        ;//! enable controller
  2411                        ;void flpydsk_enable_controller()
  2412                        ;{
  2413                        	.line	528
  2414                        	.line	529
  2415                        	FLPY
  2416                        	xdef	~~flpydsk_enable_controller
  2417                        	func
  2418                        	.function	529
  2419                        ~~flpydsk_enable_controller:
  2420                        	longa	on
  2421                        	longi	on
  2422 05:84F0: 3B           	tsc
  2423 05:84F1: 38           	sec
  2424 05:84F2: E9 00 00     	sbc	#L96
  2425 05:84F5: 1B           	tcs
  2426 05:84F6: 0B           	phd
  2427 05:84F7: 5B           	tcd
  2428                        	.block	529
  2429                        ;	k_debug_string("flpydsk_enable_controller\r\n");
  2430                        	.line	530
  2431 05:84F8: F4 xx xx     	pea	#^L95
  2432 05:84FB: F4 xx xx     	pea	#<L95
  2433 05:84FE: 22 xx xx xx  	jsl	~~k_debug_string
  2434                        ;	flpydsk_write_dor(FLPYDSK_DOR_MASK_RESET | FLPYD
                    SK_DOR_MASK_DMA);
  2435                        	.line	531
  2436 05:8502: F4 0C 00     	pea	#<$c
  2437 05:8505: 22 69 80 05  	jsl	~~flpydsk_write_dor
  2438                        ;	//flpydsk_write_dor(FLPYDSK_DOR_MASK_RESET);
  2439                        ;}
  2440                        	.line	533
  2441                        L99:
  2442 05:8509: 2B           	pld
  Thu Dec  3 2020 22:25                                                Page 48


  2443 05:850A: 3B           	tsc
  2444 05:850B: 18           	clc
  2445 05:850C: 69 00 00     	adc	#L96
  2446 05:850F: 1B           	tcs
  2447 05:8510: 6B           	rtl
  2448                        	.endblock	533
  2449             00000000   L96	equ	0
  2450             00000001   L97	equ	1
  2451 05:8511:              	ends
  2452                        	efunc
  2453                        	.endfunc	533,1,0
  2454                        	.line	533
  2455                        	data
  2456                        L95:
  2457 00:0194: 66 6C 70 79  	db	$66,$6C,$70,$79,$64,$73,$6B,$5F,$65,$6E,
                    $61,$62,$6C,$65,$5F
       00:0198: 64 73 6B 5F 
       00:019C: 65 6E 61 62 
       00:01A0: 6C 65 5F 
  2458 00:01A3: 63 6F 6E 74  	db	$63,$6F,$6E,$74,$72,$6F,$6C,$6C,$65,$72,
                    $0D,$0A,$00
       00:01A7: 72 6F 6C 6C 
       00:01AB: 65 72 0D 0A 
       00:01AF: 00 
  2459 00:01B0:              	ends
  2460                        ;
  2461                        ;//! reset controller
  2462                        ;void flpydsk_reset()
  2463                        ;{
  2464                        	.line	536
  2465                        	.line	537
  2466                        	FLPY
  2467                        	xdef	~~flpydsk_reset
  2468                        	func
  2469                        	.function	537
  2470                        ~~flpydsk_reset:
  2471                        	longa	on
  2472                        	longi	on
  2473 05:8511: 3B           	tsc
  2474 05:8512: 38           	sec
  2475 05:8513: E9 0E 00     	sbc	#L101
  2476 05:8516: 1B           	tcs
  2477 05:8517: 0B           	phd
  2478 05:8518: 5B           	tcd
  2479                        	.block	537
  2480                        ;	int i;
  2481                        ;	uint32_t st0, cyl;
  2482                        ;
  2483                        ;	k_debug_string("flpydsk_reset\r\n");
  2484             00000000   i_1	set	0
  2485             00000002   st0_1	set	2
  2486             00000006   cyl_1	set	6
  2487                        	.sym	i,0,5,1,16
  2488                        	.sym	st0,2,18,1,32
  2489                        	.sym	cyl,6,18,1,32
  2490                        	.line	541
  2491 05:8519: F4 xx xx     	pea	#^L100
  2492 05:851C: F4 xx xx     	pea	#<L100
  Thu Dec  3 2020 22:25                                                Page 49


  2493 05:851F: 22 xx xx xx  	jsl	~~k_debug_string
  2494                        ;
  2495                        ;	//! reset the controller
  2496                        ;	flpydsk_disable_controller();
  2497                        	.line	544
  2498 05:8523: 22 CF 84 05  	jsl	~~flpydsk_disable_controller
  2499                        ;	flpydsk_enable_controller();
  2500                        	.line	545
  2501 05:8527: 22 F0 84 05  	jsl	~~flpydsk_enable_controller
  2502                        ;	flpydsk_wait_irq();
  2503                        	.line	546
  2504                        L10029:
  2505 05:852B: AD xx xx     	lda	|~~_FloppyDiskIRQ
  2506 05:852E: 29 FF 00     	and	#$ff
  2507 05:8531: F0 03        	beq	L104
  2508 05:8533: 82 03 00     	brl	L10030
  2509                        L104:
  2510                        	.line	546
  2511 05:8536: 82 F2 FF     	brl	L10029
  2512                        L10030:
  2513                        	.line	546
  2514 05:8539: E2 20        	sep	#$20
  2515                        	longa	off
  2516 05:853B: 9C xx xx     	stz	|~~_FloppyDiskIRQ
  2517 05:853E: C2 20        	rep	#$20
  2518                        	longa	on
  2519                        	.line	546
  2520                        ;
  2521                        ;	//! send CHECK_INT/SENSE INTERRUPT command to al
                    l drives
  2522                        ;	for (i = 0; i < 4; i++)
  2523                        	.line	549
  2524 05:8540: 64 05        	stz	<L102+i_1
  2525                        L10033:
  2526                        ;		flpydsk_check_int(&st0, &cyl);
  2527                        	.line	550
  2528 05:8542: F4 00 00     	pea	#0
  2529 05:8545: 18           	clc
  2530 05:8546: 7B           	tdc
  2531 05:8547: 69 0B 00     	adc	#<L102+cyl_1
  2532 05:854A: 48           	pha
  2533 05:854B: F4 00 00     	pea	#0
  2534 05:854E: 18           	clc
  2535 05:854F: 7B           	tdc
  2536 05:8550: 69 07 00     	adc	#<L102+st0_1
  2537 05:8553: 48           	pha
  2538 05:8554: 22 01 82 05  	jsl	~~flpydsk_check_int
  2539                        L10031:
  2540 05:8558: E6 05        	inc	<L102+i_1
  2541 05:855A: A5 05        	lda	<L102+i_1
  2542 05:855C: 30 06        	bmi	L105
  2543 05:855E: 3A           	dea
  2544 05:855F: 3A           	dea
  2545 05:8560: 3A           	dea
  2546 05:8561: 3A           	dea
  2547 05:8562: 10 03        	bpl	L106
  2548                        L105:
  2549 05:8564: 82 DB FF     	brl	L10033
  Thu Dec  3 2020 22:25                                                Page 50


  2550                        L106:
  2551                        L10032:
  2552                        ;
  2553                        ;	//! transfer speed 500kb/s
  2554                        ;	flpydsk_write_ccr(0);
  2555                        	.line	553
  2556 05:8567: F4 00 00     	pea	#<$0
  2557 05:856A: 22 C5 81 05  	jsl	~~flpydsk_write_ccr
  2558                        ;
  2559                        ;	//! pass mechanical drive info. steprate=3ms, un
                    load time=240ms, load time=16ms
  2560                        ;	flpydsk_drive_data(3, 16, 240, FALSE);
  2561                        	.line	556
  2562 05:856E: F4 00 00     	pea	#<$0
  2563 05:8571: F4 00 00     	pea	#^$f0
  2564 05:8574: F4 F0 00     	pea	#<$f0
  2565 05:8577: F4 00 00     	pea	#^$10
  2566 05:857A: F4 10 00     	pea	#<$10
  2567 05:857D: F4 00 00     	pea	#^$3
  2568 05:8580: F4 03 00     	pea	#<$3
  2569 05:8583: 22 5E 83 05  	jsl	~~flpydsk_drive_data
  2570                        ;
  2571                        ;	//! calibrate the disk
  2572                        ;	i = flpydsk_calibrate(_CurrentDrive);
  2573                        	.line	559
  2574 05:8587: AD xx xx     	lda	|~~_CurrentDrive
  2575 05:858A: 29 FF 00     	and	#$ff
  2576 05:858D: 85 01        	sta	<R0
  2577 05:858F: 64 03        	stz	<R0+2
  2578 05:8591: D4 03        	pei	<R0+2
  2579 05:8593: D4 01        	pei	<R0
  2580 05:8595: 22 15 84 05  	jsl	~~flpydsk_calibrate
  2581 05:8599: 85 05        	sta	<L102+i_1
  2582                        ;	k_debug_integer("flpydsk_calibrate:", i);
  2583                        	.line	560
  2584 05:859B: D4 05        	pei	<L102+i_1
  2585 05:859D: F4 xx xx     	pea	#^L100+16
  2586 05:85A0: F4 xx xx     	pea	#<L100+16
  2587 05:85A3: 22 xx xx xx  	jsl	~~k_debug_integer
  2588                        ;}
  2589                        	.line	561
  2590                        L107:
  2591 05:85A7: 2B           	pld
  2592 05:85A8: 3B           	tsc
  2593 05:85A9: 18           	clc
  2594 05:85AA: 69 0E 00     	adc	#L101
  2595 05:85AD: 1B           	tcs
  2596 05:85AE: 6B           	rtl
  2597                        	.endblock	561
  2598             0000000E   L101	equ	14
  2599             00000005   L102	equ	5
  2600 05:85AF:              	ends
  2601                        	efunc
  2602                        	.endfunc	561,5,14
  2603                        	.line	561
  2604                        	data
  2605                        L100:
  2606 00:01B0: 66 6C 70 79  	db	$66,$6C,$70,$79,$64,$73,$6B,$5F,$72,$65,
  Thu Dec  3 2020 22:25                                                Page 51


                    $73,$65,$74,$0D,$0A
       00:01B4: 64 73 6B 5F 
       00:01B8: 72 65 73 65 
       00:01BC: 74 0D 0A 
  2607 00:01BF: 00 66 6C 70  	db	$00,$66,$6C,$70,$79,$64,$73,$6B,$5F,$63,
                    $61,$6C,$69,$62,$72
       00:01C3: 79 64 73 6B 
       00:01C7: 5F 63 61 6C 
       00:01CB: 69 62 72 
  2608 00:01CE: 61 74 65 3A  	db	$61,$74,$65,$3A,$00
       00:01D2: 00 
  2609 00:01D3:              	ends
  2610                        ;
  2611                        ;//! read a sector
  2612                        ;void flpydsk_read_sector_imp(uint8_t head, uint8_
                    t track, uint8_t sector)
  2613                        ;{
  2614                        	.line	564
  2615                        	.line	565
  2616                        	FLPY
  2617                        	xdef	~~flpydsk_read_sector_imp
  2618                        	func
  2619                        	.function	565
  2620                        ~~flpydsk_read_sector_imp:
  2621                        	longa	on
  2622                        	longi	on
  2623 05:85AF: 3B           	tsc
  2624 05:85B0: 38           	sec
  2625 05:85B1: E9 12 00     	sbc	#L109
  2626 05:85B4: 1B           	tcs
  2627 05:85B5: 0B           	phd
  2628 05:85B6: 5B           	tcd
  2629             00000004   head_0	set	4
  2630             00000006   track_0	set	6
  2631             00000008   sector_0	set	8
  2632                        	.block	565
  2633                        ;	int j;
  2634                        ;	uint32_t st0, cyl;
  2635                        ;
  2636                        ;	k_debug_integer("flpydsk_read_sector_imp:", sect
                    or);
  2637             00000000   j_1	set	0
  2638             00000002   st0_1	set	2
  2639             00000006   cyl_1	set	6
  2640                        	.sym	j,0,5,1,16
  2641                        	.sym	st0,2,18,1,32
  2642                        	.sym	cyl,6,18,1,32
  2643                        	.sym	head,4,14,6,8
  2644                        	.sym	track,6,14,6,8
  2645                        	.sym	sector,8,14,6,8
  2646                        	.line	569
  2647 05:85B7: A5 1A        	lda	<L109+sector_0
  2648 05:85B9: 29 FF 00     	and	#$ff
  2649 05:85BC: 48           	pha
  2650 05:85BD: F4 xx xx     	pea	#^L108
  2651 05:85C0: F4 xx xx     	pea	#<L108
  2652 05:85C3: 22 xx xx xx  	jsl	~~k_debug_integer
  2653                        ;
  Thu Dec  3 2020 22:25                                                Page 52


  2654                        ;	//! set the DMA for read transfer
  2655                        ;	flpydsk_dma_read();
  2656                        	.line	572
  2657 05:85C7: 22 0F 80 05  	jsl	~~flpydsk_dma_read
  2658                        ;
  2659                        ;	//! read in a sector
  2660                        ;	flpydsk_send_command(
  2661                        	.line	575
  2662                        ;			FDC_CMD_READ_SECT | FDC_CMD_EXT_
                    MULTITRACK | FDC_CMD_EXT_SKIP
  2663                        ;					| FDC_CMD_EXT_DE
                    NSITY);
  2664 05:85CB: F4 E6 00     	pea	#<$e6
  2665 05:85CE: 22 97 80 05  	jsl	~~flpydsk_send_command
  2666                        ;	flpydsk_send_command(head << 2 | _CurrentDrive);
  2667                        	.line	578
  2668 05:85D2: A5 16        	lda	<L109+head_0
  2669 05:85D4: 29 FF 00     	and	#$ff
  2670 05:85D7: 85 05        	sta	<R1
  2671 05:85D9: A5 05        	lda	<R1
  2672 05:85DB: 0A           	asl	A
  2673 05:85DC: 0A           	asl	A
  2674 05:85DD: 85 01        	sta	<R0
  2675 05:85DF: AD xx xx     	lda	|~~_CurrentDrive
  2676 05:85E2: 29 FF 00     	and	#$ff
  2677 05:85E5: 85 05        	sta	<R1
  2678 05:85E7: A5 05        	lda	<R1
  2679 05:85E9: 05 01        	ora	<R0
  2680 05:85EB: 48           	pha
  2681 05:85EC: 22 97 80 05  	jsl	~~flpydsk_send_command
  2682                        ;	flpydsk_send_command(track);
  2683                        	.line	579
  2684 05:85F0: D4 18        	pei	<L109+track_0
  2685 05:85F2: 22 97 80 05  	jsl	~~flpydsk_send_command
  2686                        ;	flpydsk_send_command(head);
  2687                        	.line	580
  2688 05:85F6: D4 16        	pei	<L109+head_0
  2689 05:85F8: 22 97 80 05  	jsl	~~flpydsk_send_command
  2690                        ;	flpydsk_send_command(sector);
  2691                        	.line	581
  2692 05:85FC: D4 1A        	pei	<L109+sector_0
  2693 05:85FE: 22 97 80 05  	jsl	~~flpydsk_send_command
  2694                        ;	flpydsk_send_command(FLPYDSK_SECTOR_DTL_512);
  2695                        	.line	582
  2696 05:8602: F4 02 00     	pea	#<$2
  2697 05:8605: 22 97 80 05  	jsl	~~flpydsk_send_command
  2698                        ;	flpydsk_send_command(((sector + 1) >= FLPY_SECTO
                    RS_PER_TRACK) ? FLPY_SECTORS_PER_TRACK : sector + 1);
  2699                        	.line	583
  2700 05:8609: A5 1A        	lda	<L109+sector_0
  2701 05:860B: 29 FF 00     	and	#$ff
  2702 05:860E: 85 01        	sta	<R0
  2703 05:8610: A5 01        	lda	<R0
  2704 05:8612: 1A           	ina
  2705 05:8613: 85 05        	sta	<R1
  2706 05:8615: 38           	sec
  2707 05:8616: A5 05        	lda	<R1
  2708 05:8618: E9 12 00     	sbc	#<$12
  Thu Dec  3 2020 22:25                                                Page 53


  2709 05:861B: 70 03        	bvs	L113
  2710 05:861D: 49 00 80     	eor	#$8000
  2711                        L113:
  2712 05:8620: 30 03        	bmi	L114
  2713 05:8622: 82 09 00     	brl	L112
  2714                        L114:
  2715 05:8625: A9 00 00     	lda	#$0
  2716 05:8628: AA           	tax
  2717 05:8629: A9 12 00     	lda	#$12
  2718 05:862C: 80 1C        	bra	L115
  2719                        L112:
  2720 05:862E: A5 1A        	lda	<L109+sector_0
  2721 05:8630: 29 FF 00     	and	#$ff
  2722 05:8633: 85 01        	sta	<R0
  2723 05:8635: A5 01        	lda	<R0
  2724 05:8637: 1A           	ina
  2725 05:8638: 85 05        	sta	<R1
  2726 05:863A: A0 00 00     	ldy	#$0
  2727 05:863D: A5 05        	lda	<R1
  2728 05:863F: 10 01        	bpl	L116
  2729 05:8641: 88           	dey
  2730                        L116:
  2731 05:8642: 85 01        	sta	<R0
  2732 05:8644: 84 03        	sty	<R0+2
  2733 05:8646: A6 03        	ldx	<R0+2
  2734 05:8648: A5 01        	lda	<R0
  2735                        L115:
  2736 05:864A: 85 01        	sta	<R0
  2737 05:864C: 86 03        	stx	<R0+2
  2738 05:864E: D4 01        	pei	<R0
  2739 05:8650: 22 97 80 05  	jsl	~~flpydsk_send_command
  2740                        ;	flpydsk_send_command(FLPYDSK_GAP3_LENGTH_3_5);
  2741                        	.line	584
  2742 05:8654: F4 1B 00     	pea	#<$1b
  2743 05:8657: 22 97 80 05  	jsl	~~flpydsk_send_command
  2744                        ;	flpydsk_send_command(0xff);
  2745                        	.line	585
  2746 05:865B: F4 FF 00     	pea	#<$ff
  2747 05:865E: 22 97 80 05  	jsl	~~flpydsk_send_command
  2748                        ;
  2749                        ;	//! wait for irq
  2750                        ;	flpydsk_wait_irq();
  2751                        	.line	588
  2752                        L10034:
  2753 05:8662: AD xx xx     	lda	|~~_FloppyDiskIRQ
  2754 05:8665: 29 FF 00     	and	#$ff
  2755 05:8668: F0 03        	beq	L117
  2756 05:866A: 82 03 00     	brl	L10035
  2757                        L117:
  2758                        	.line	588
  2759 05:866D: 82 F2 FF     	brl	L10034
  2760                        L10035:
  2761                        	.line	588
  2762 05:8670: E2 20        	sep	#$20
  2763                        	longa	off
  2764 05:8672: 9C xx xx     	stz	|~~_FloppyDiskIRQ
  2765 05:8675: C2 20        	rep	#$20
  2766                        	longa	on
  Thu Dec  3 2020 22:25                                                Page 54


  2767                        	.line	588
  2768                        ;
  2769                        ;	//! read status info
  2770                        ;	for (j = 0; j < 7; j++)
  2771                        	.line	591
  2772 05:8677: 64 09        	stz	<L110+j_1
  2773                        L10038:
  2774                        ;		flpydsk_read_data();
  2775                        	.line	592
  2776 05:8679: 22 5F 81 05  	jsl	~~flpydsk_read_data
  2777                        L10036:
  2778 05:867D: E6 09        	inc	<L110+j_1
  2779 05:867F: 38           	sec
  2780 05:8680: A5 09        	lda	<L110+j_1
  2781 05:8682: E9 07 00     	sbc	#<$7
  2782 05:8685: 70 03        	bvs	L118
  2783 05:8687: 49 00 80     	eor	#$8000
  2784                        L118:
  2785 05:868A: 30 03        	bmi	L119
  2786 05:868C: 82 EA FF     	brl	L10038
  2787                        L119:
  2788                        L10037:
  2789                        ;
  2790                        ;	//! let FDC know we handled interrupt
  2791                        ;	flpydsk_check_int(&st0, &cyl);
  2792                        	.line	595
  2793 05:868F: F4 00 00     	pea	#0
  2794 05:8692: 18           	clc
  2795 05:8693: 7B           	tdc
  2796 05:8694: 69 0F 00     	adc	#<L110+cyl_1
  2797 05:8697: 48           	pha
  2798 05:8698: F4 00 00     	pea	#0
  2799 05:869B: 18           	clc
  2800 05:869C: 7B           	tdc
  2801 05:869D: 69 0B 00     	adc	#<L110+st0_1
  2802 05:86A0: 48           	pha
  2803 05:86A1: 22 01 82 05  	jsl	~~flpydsk_check_int
  2804                        ;}
  2805                        	.line	596
  2806                        L120:
  2807 05:86A5: A5 14        	lda	<L109+2
  2808 05:86A7: 85 1A        	sta	<L109+2+6
  2809 05:86A9: A5 13        	lda	<L109+1
  2810 05:86AB: 85 19        	sta	<L109+1+6
  2811 05:86AD: 2B           	pld
  2812 05:86AE: 3B           	tsc
  2813 05:86AF: 18           	clc
  2814 05:86B0: 69 18 00     	adc	#L109+6
  2815 05:86B3: 1B           	tcs
  2816 05:86B4: 6B           	rtl
  2817                        	.endblock	596
  2818             00000012   L109	equ	18
  2819             00000009   L110	equ	9
  2820 05:86B5:              	ends
  2821                        	efunc
  2822                        	.endfunc	596,9,18
  2823                        	.line	596
  2824                        	data
  Thu Dec  3 2020 22:25                                                Page 55


  2825                        L108:
  2826 00:01D3: 66 6C 70 79  	db	$66,$6C,$70,$79,$64,$73,$6B,$5F,$72,$65,
                    $61,$64,$5F,$73,$65
       00:01D7: 64 73 6B 5F 
       00:01DB: 72 65 61 64 
       00:01DF: 5F 73 65 
  2827 00:01E2: 63 74 6F 72  	db	$63,$74,$6F,$72,$5F,$69,$6D,$70,$3A,$00
       00:01E6: 5F 69 6D 70 
       00:01EA: 3A 00 
  2828 00:01EC:              	ends
  2829                        ;
  2830                        ;//! read a sector
  2831                        ;void flpydsk_read_sector_imp2(uint8_t head, uint8
                    _t track, uint8_t sector)
  2832                        ;{
  2833                        	.line	599
  2834                        	.line	600
  2835                        	FLPY
  2836                        	xdef	~~flpydsk_read_sector_imp2
  2837                        	func
  2838                        	.function	600
  2839                        ~~flpydsk_read_sector_imp2:
  2840                        	longa	on
  2841                        	longi	on
  2842 05:86B5: 3B           	tsc
  2843 05:86B6: 38           	sec
  2844 05:86B7: E9 13 00     	sbc	#L122
  2845 05:86BA: 1B           	tcs
  2846 05:86BB: 0B           	phd
  2847 05:86BC: 5B           	tcd
  2848             00000004   head_0	set	4
  2849             00000006   track_0	set	6
  2850             00000008   sector_0	set	8
  2851                        	.block	600
  2852                        ;	int j;
  2853                        ;	UCHAR data;
  2854                        ;	uint32_t st0, cyl;
  2855                        ;
  2856                        ;	k_debug_integer("flpydsk_read_sector_imp2:", sec
                    tor);
  2857             00000000   j_1	set	0
  2858             00000002   data_1	set	2
  2859             00000003   st0_1	set	3
  2860             00000007   cyl_1	set	7
  2861                        	.sym	j,0,5,1,16
  2862                        	.sym	data,2,14,1,8
  2863                        	.sym	st0,3,18,1,32
  2864                        	.sym	cyl,7,18,1,32
  2865                        	.sym	head,4,14,6,8
  2866                        	.sym	track,6,14,6,8
  2867                        	.sym	sector,8,14,6,8
  2868                        	.line	605
  2869 05:86BD: A5 1B        	lda	<L122+sector_0
  2870 05:86BF: 29 FF 00     	and	#$ff
  2871 05:86C2: 48           	pha
  2872 05:86C3: F4 xx xx     	pea	#^L121
  2873 05:86C6: F4 xx xx     	pea	#<L121
  2874 05:86C9: 22 xx xx xx  	jsl	~~k_debug_integer
  Thu Dec  3 2020 22:25                                                Page 56


  2875                        ;
  2876                        ;	//! set the DMA for read transfer
  2877                        ;	flpydsk_dma_read();
  2878                        	.line	608
  2879 05:86CD: 22 0F 80 05  	jsl	~~flpydsk_dma_read
  2880                        ;
  2881                        ;	//! read in a sector
  2882                        ;	flpydsk_send_command(
  2883                        	.line	611
  2884                        ;			FDC_CMD_READ_SECT | FDC_CMD_EXT_
                    MULTITRACK | FDC_CMD_EXT_SKIP
  2885                        ;					| FDC_CMD_EXT_DE
                    NSITY);
  2886 05:86D1: F4 E6 00     	pea	#<$e6
  2887 05:86D4: 22 97 80 05  	jsl	~~flpydsk_send_command
  2888                        ;	flpydsk_send_command(head << 2 | _CurrentDrive);
  2889                        	.line	614
  2890 05:86D8: A5 17        	lda	<L122+head_0
  2891 05:86DA: 29 FF 00     	and	#$ff
  2892 05:86DD: 85 05        	sta	<R1
  2893 05:86DF: A5 05        	lda	<R1
  2894 05:86E1: 0A           	asl	A
  2895 05:86E2: 0A           	asl	A
  2896 05:86E3: 85 01        	sta	<R0
  2897 05:86E5: AD xx xx     	lda	|~~_CurrentDrive
  2898 05:86E8: 29 FF 00     	and	#$ff
  2899 05:86EB: 85 05        	sta	<R1
  2900 05:86ED: A5 05        	lda	<R1
  2901 05:86EF: 05 01        	ora	<R0
  2902 05:86F1: 48           	pha
  2903 05:86F2: 22 97 80 05  	jsl	~~flpydsk_send_command
  2904                        ;	flpydsk_send_command(track);
  2905                        	.line	615
  2906 05:86F6: D4 19        	pei	<L122+track_0
  2907 05:86F8: 22 97 80 05  	jsl	~~flpydsk_send_command
  2908                        ;	flpydsk_send_command(head);
  2909                        	.line	616
  2910 05:86FC: D4 17        	pei	<L122+head_0
  2911 05:86FE: 22 97 80 05  	jsl	~~flpydsk_send_command
  2912                        ;	flpydsk_send_command(sector);
  2913                        	.line	617
  2914 05:8702: D4 1B        	pei	<L122+sector_0
  2915 05:8704: 22 97 80 05  	jsl	~~flpydsk_send_command
  2916                        ;	flpydsk_send_command(FLPYDSK_SECTOR_DTL_512);
  2917                        	.line	618
  2918 05:8708: F4 02 00     	pea	#<$2
  2919 05:870B: 22 97 80 05  	jsl	~~flpydsk_send_command
  2920                        ;	flpydsk_send_command(
  2921                        	.line	619
  2922                        ;			((sector + 1) >= FLPY_SECTORS_PE
                    R_TRACK) ?
  2923                        ;					FLPY_SECTORS_PER
                    _TRACK : sector + 1);
  2924 05:870F: A5 1B        	lda	<L122+sector_0
  2925 05:8711: 29 FF 00     	and	#$ff
  2926 05:8714: 85 01        	sta	<R0
  2927 05:8716: A5 01        	lda	<R0
  2928 05:8718: 1A           	ina
  Thu Dec  3 2020 22:25                                                Page 57


  2929 05:8719: 85 05        	sta	<R1
  2930 05:871B: 38           	sec
  2931 05:871C: A5 05        	lda	<R1
  2932 05:871E: E9 12 00     	sbc	#<$12
  2933 05:8721: 70 03        	bvs	L126
  2934 05:8723: 49 00 80     	eor	#$8000
  2935                        L126:
  2936 05:8726: 30 03        	bmi	L127
  2937 05:8728: 82 09 00     	brl	L125
  2938                        L127:
  2939 05:872B: A9 00 00     	lda	#$0
  2940 05:872E: AA           	tax
  2941 05:872F: A9 12 00     	lda	#$12
  2942 05:8732: 80 1C        	bra	L128
  2943                        L125:
  2944 05:8734: A5 1B        	lda	<L122+sector_0
  2945 05:8736: 29 FF 00     	and	#$ff
  2946 05:8739: 85 01        	sta	<R0
  2947 05:873B: A5 01        	lda	<R0
  2948 05:873D: 1A           	ina
  2949 05:873E: 85 05        	sta	<R1
  2950 05:8740: A0 00 00     	ldy	#$0
  2951 05:8743: A5 05        	lda	<R1
  2952 05:8745: 10 01        	bpl	L129
  2953 05:8747: 88           	dey
  2954                        L129:
  2955 05:8748: 85 01        	sta	<R0
  2956 05:874A: 84 03        	sty	<R0+2
  2957 05:874C: A6 03        	ldx	<R0+2
  2958 05:874E: A5 01        	lda	<R0
  2959                        L128:
  2960 05:8750: 85 01        	sta	<R0
  2961 05:8752: 86 03        	stx	<R0+2
  2962 05:8754: D4 01        	pei	<R0
  2963 05:8756: 22 97 80 05  	jsl	~~flpydsk_send_command
  2964                        ;	flpydsk_send_command(FLPYDSK_GAP3_LENGTH_3_5);
  2965                        	.line	622
  2966 05:875A: F4 1B 00     	pea	#<$1b
  2967 05:875D: 22 97 80 05  	jsl	~~flpydsk_send_command
  2968                        ;	flpydsk_send_command(0xff);
  2969                        	.line	623
  2970 05:8761: F4 FF 00     	pea	#<$ff
  2971 05:8764: 22 97 80 05  	jsl	~~flpydsk_send_command
  2972                        ;
  2973                        ;	//! wait for irq
  2974                        ;	flpydsk_wait_irq();
  2975                        	.line	626
  2976                        L10039:
  2977 05:8768: AD xx xx     	lda	|~~_FloppyDiskIRQ
  2978 05:876B: 29 FF 00     	and	#$ff
  2979 05:876E: F0 03        	beq	L130
  2980 05:8770: 82 03 00     	brl	L10040
  2981                        L130:
  2982                        	.line	626
  2983 05:8773: 82 F2 FF     	brl	L10039
  2984                        L10040:
  2985                        	.line	626
  2986 05:8776: E2 20        	sep	#$20
  Thu Dec  3 2020 22:25                                                Page 58


  2987                        	longa	off
  2988 05:8778: 9C xx xx     	stz	|~~_FloppyDiskIRQ
  2989 05:877B: C2 20        	rep	#$20
  2990                        	longa	on
  2991                        	.line	626
  2992                        ;
  2993                        ;	//! read status info
  2994                        ;	for (j = 0; j < 7; j++)
  2995                        	.line	629
  2996 05:877D: 64 09        	stz	<L123+j_1
  2997                        L10043:
  2998                        ;		flpydsk_read_data();
  2999                        	.line	630
  3000 05:877F: 22 5F 81 05  	jsl	~~flpydsk_read_data
  3001                        L10041:
  3002 05:8783: E6 09        	inc	<L123+j_1
  3003 05:8785: 38           	sec
  3004 05:8786: A5 09        	lda	<L123+j_1
  3005 05:8788: E9 07 00     	sbc	#<$7
  3006 05:878B: 70 03        	bvs	L131
  3007 05:878D: 49 00 80     	eor	#$8000
  3008                        L131:
  3009 05:8790: 30 03        	bmi	L132
  3010 05:8792: 82 EA FF     	brl	L10043
  3011                        L132:
  3012                        L10042:
  3013                        ;
  3014                        ;	/*
  3015                        ;	while (flpydsk_read_byte(&data))
  3016                        ;	{
  3017                        ;		k_debug_hex("flpydsk_read_sector_imp2:da
                    ta:", data);
  3018                        ;	}
  3019                        ;	*/
  3020                        ;	//! let FDC know we handled interrupt
  3021                        ;	flpydsk_check_int(&st0, &cyl);
  3022                        	.line	639
  3023 05:8795: F4 00 00     	pea	#0
  3024 05:8798: 18           	clc
  3025 05:8799: 7B           	tdc
  3026 05:879A: 69 10 00     	adc	#<L123+cyl_1
  3027 05:879D: 48           	pha
  3028 05:879E: F4 00 00     	pea	#0
  3029 05:87A1: 18           	clc
  3030 05:87A2: 7B           	tdc
  3031 05:87A3: 69 0C 00     	adc	#<L123+st0_1
  3032 05:87A6: 48           	pha
  3033 05:87A7: 22 01 82 05  	jsl	~~flpydsk_check_int
  3034                        ;}
  3035                        	.line	640
  3036                        L133:
  3037 05:87AB: A5 15        	lda	<L122+2
  3038 05:87AD: 85 1B        	sta	<L122+2+6
  3039 05:87AF: A5 14        	lda	<L122+1
  3040 05:87B1: 85 1A        	sta	<L122+1+6
  3041 05:87B3: 2B           	pld
  3042 05:87B4: 3B           	tsc
  3043 05:87B5: 18           	clc
  Thu Dec  3 2020 22:25                                                Page 59


  3044 05:87B6: 69 19 00     	adc	#L122+6
  3045 05:87B9: 1B           	tcs
  3046 05:87BA: 6B           	rtl
  3047                        	.endblock	640
  3048             00000013   L122	equ	19
  3049             00000009   L123	equ	9
  3050 05:87BB:              	ends
  3051                        	efunc
  3052                        	.endfunc	640,9,19
  3053                        	.line	640
  3054                        	data
  3055                        L121:
  3056 00:01EC: 66 6C 70 79  	db	$66,$6C,$70,$79,$64,$73,$6B,$5F,$72,$65,
                    $61,$64,$5F,$73,$65
       00:01F0: 64 73 6B 5F 
       00:01F4: 72 65 61 64 
       00:01F8: 5F 73 65 
  3057 00:01FB: 63 74 6F 72  	db	$63,$74,$6F,$72,$5F,$69,$6D,$70,$32,$3A,
                    $00
       00:01FF: 5F 69 6D 70 
       00:0203: 32 3A 00 
  3058 00:0206:              	ends
  3059                        ;
  3060                        ;//! seek to given track/cylinder
  3061                        ;int flpydsk_seek(uint32_t cyl, uint32_t head)
  3062                        ;{
  3063                        	.line	643
  3064                        	.line	644
  3065                        	FLPY
  3066                        	xdef	~~flpydsk_seek
  3067                        	func
  3068                        	.function	644
  3069                        ~~flpydsk_seek:
  3070                        	longa	on
  3071                        	longi	on
  3072 05:87BB: 3B           	tsc
  3073 05:87BC: 38           	sec
  3074 05:87BD: E9 16 00     	sbc	#L135
  3075 05:87C0: 1B           	tcs
  3076 05:87C1: 0B           	phd
  3077 05:87C2: 5B           	tcd
  3078             00000004   cyl_0	set	4
  3079             00000008   head_0	set	8
  3080                        	.block	644
  3081                        ;	int i;
  3082                        ;	uint32_t st0, cyl0;
  3083                        ;
  3084                        ;	k_debug_long("flpydsk_seek:cyl:", cyl);
  3085             00000000   i_1	set	0
  3086             00000002   st0_1	set	2
  3087             00000006   cyl0_1	set	6
  3088                        	.sym	i,0,5,1,16
  3089                        	.sym	st0,2,18,1,32
  3090                        	.sym	cyl0,6,18,1,32
  3091                        	.sym	cyl,4,18,6,32
  3092                        	.sym	head,8,18,6,32
  3093                        	.line	648
  3094 05:87C3: D4 1C        	pei	<L135+cyl_0+2
  Thu Dec  3 2020 22:25                                                Page 60


  3095 05:87C5: D4 1A        	pei	<L135+cyl_0
  3096 05:87C7: F4 xx xx     	pea	#^L134
  3097 05:87CA: F4 xx xx     	pea	#<L134
  3098 05:87CD: 22 xx xx xx  	jsl	~~k_debug_long
  3099                        ;	k_debug_long("flpydsk_seek:head:", head);
  3100                        	.line	649
  3101 05:87D1: D4 20        	pei	<L135+head_0+2
  3102 05:87D3: D4 1E        	pei	<L135+head_0
  3103 05:87D5: F4 xx xx     	pea	#^L134+18
  3104 05:87D8: F4 xx xx     	pea	#<L134+18
  3105 05:87DB: 22 xx xx xx  	jsl	~~k_debug_long
  3106                        ;
  3107                        ;	if (_CurrentDrive >= 4)
  3108                        	.line	651
  3109                        ;		return -1;
  3110 05:87DF: E2 20        	sep	#$20
  3111                        	longa	off
  3112 05:87E1: AD xx xx     	lda	|~~_CurrentDrive
  3113 05:87E4: C9 04        	cmp	#<$4
  3114 05:87E6: C2 20        	rep	#$20
  3115                        	longa	on
  3116 05:87E8: B0 03        	bcs	L138
  3117 05:87EA: 82 15 00     	brl	L10044
  3118                        L138:
  3119                        	.line	652
  3120 05:87ED: A9 FF FF     	lda	#$ffff
  3121                        L139:
  3122 05:87F0: A8           	tay
  3123 05:87F1: A5 18        	lda	<L135+2
  3124 05:87F3: 85 20        	sta	<L135+2+8
  3125 05:87F5: A5 17        	lda	<L135+1
  3126 05:87F7: 85 1F        	sta	<L135+1+8
  3127 05:87F9: 2B           	pld
  3128 05:87FA: 3B           	tsc
  3129 05:87FB: 18           	clc
  3130 05:87FC: 69 1E 00     	adc	#L135+8
  3131 05:87FF: 1B           	tcs
  3132 05:8800: 98           	tya
  3133 05:8801: 6B           	rtl
  3134                        ;
  3135                        ;	for (i = 0; i < 10; i++)
  3136                        L10044:
  3137                        	.line	654
  3138 05:8802: 64 0D        	stz	<L136+i_1
  3139                        L10047:
  3140                        ;	{
  3141                        	.line	655
  3142                        ;
  3143                        ;		//! send the command
  3144                        ;		flpydsk_send_command(FDC_CMD_SEEK);
  3145                        	.line	658
  3146 05:8804: F4 0F 00     	pea	#<$f
  3147 05:8807: 22 97 80 05  	jsl	~~flpydsk_send_command
  3148                        ;		flpydsk_send_command((head) << 2 | _Curr
                    entDrive);
  3149                        	.line	659
  3150 05:880B: A5 1E        	lda	<L135+head_0
  3151 05:880D: 85 01        	sta	<R0
  Thu Dec  3 2020 22:25                                                Page 61


  3152 05:880F: A5 20        	lda	<L135+head_0+2
  3153 05:8811: 85 03        	sta	<R0+2
  3154 05:8813: 06 01        	asl	<R0
  3155 05:8815: 26 03        	rol	<R0+2
  3156 05:8817: 06 01        	asl	<R0
  3157 05:8819: 26 03        	rol	<R0+2
  3158 05:881B: AD xx xx     	lda	|~~_CurrentDrive
  3159 05:881E: 29 FF 00     	and	#$ff
  3160 05:8821: 85 05        	sta	<R1
  3161 05:8823: 64 07        	stz	<R1+2
  3162 05:8825: A5 05        	lda	<R1
  3163 05:8827: 05 01        	ora	<R0
  3164 05:8829: 85 09        	sta	<R2
  3165 05:882B: A5 07        	lda	<R1+2
  3166 05:882D: 05 03        	ora	<R0+2
  3167 05:882F: 85 0B        	sta	<R2+2
  3168 05:8831: D4 09        	pei	<R2
  3169 05:8833: 22 97 80 05  	jsl	~~flpydsk_send_command
  3170                        ;		flpydsk_send_command(cyl);
  3171                        	.line	660
  3172 05:8837: D4 1A        	pei	<L135+cyl_0
  3173 05:8839: 22 97 80 05  	jsl	~~flpydsk_send_command
  3174                        ;
  3175                        ;		//! wait for the results phase IRQ
  3176                        ;		flpydsk_wait_irq();
  3177                        	.line	663
  3178                        L10048:
  3179 05:883D: AD xx xx     	lda	|~~_FloppyDiskIRQ
  3180 05:8840: 29 FF 00     	and	#$ff
  3181 05:8843: F0 03        	beq	L140
  3182 05:8845: 82 03 00     	brl	L10049
  3183                        L140:
  3184                        	.line	663
  3185 05:8848: 82 F2 FF     	brl	L10048
  3186                        L10049:
  3187                        	.line	663
  3188 05:884B: E2 20        	sep	#$20
  3189                        	longa	off
  3190 05:884D: 9C xx xx     	stz	|~~_FloppyDiskIRQ
  3191 05:8850: C2 20        	rep	#$20
  3192                        	longa	on
  3193                        	.line	663
  3194                        ;		flpydsk_check_int(&st0, &cyl0);
  3195                        	.line	664
  3196 05:8852: F4 00 00     	pea	#0
  3197 05:8855: 18           	clc
  3198 05:8856: 7B           	tdc
  3199 05:8857: 69 13 00     	adc	#<L136+cyl0_1
  3200 05:885A: 48           	pha
  3201 05:885B: F4 00 00     	pea	#0
  3202 05:885E: 18           	clc
  3203 05:885F: 7B           	tdc
  3204 05:8860: 69 0F 00     	adc	#<L136+st0_1
  3205 05:8863: 48           	pha
  3206 05:8864: 22 01 82 05  	jsl	~~flpydsk_check_int
  3207                        ;
  3208                        ;		//! found the cylinder?
  3209                        ;		if (cyl0 == cyl)
  Thu Dec  3 2020 22:25                                                Page 62


  3210                        	.line	667
  3211                        ;			return 0;
  3212 05:8868: A5 13        	lda	<L136+cyl0_1
  3213 05:886A: C5 1A        	cmp	<L135+cyl_0
  3214 05:886C: D0 04        	bne	L141
  3215 05:886E: A5 15        	lda	<L136+cyl0_1+2
  3216 05:8870: C5 1C        	cmp	<L135+cyl_0+2
  3217                        L141:
  3218 05:8872: F0 03        	beq	L142
  3219 05:8874: 82 06 00     	brl	L10050
  3220                        L142:
  3221                        	.line	668
  3222 05:8877: A9 00 00     	lda	#$0
  3223 05:887A: 82 73 FF     	brl	L139
  3224                        ;	}
  3225                        L10050:
  3226                        	.line	669
  3227                        L10045:
  3228 05:887D: E6 0D        	inc	<L136+i_1
  3229 05:887F: 38           	sec
  3230 05:8880: A5 0D        	lda	<L136+i_1
  3231 05:8882: E9 0A 00     	sbc	#<$a
  3232 05:8885: 70 03        	bvs	L143
  3233 05:8887: 49 00 80     	eor	#$8000
  3234                        L143:
  3235 05:888A: 30 03        	bmi	L144
  3236 05:888C: 82 75 FF     	brl	L10047
  3237                        L144:
  3238                        L10046:
  3239                        ;
  3240                        ;	return -1;
  3241                        	.line	671
  3242 05:888F: A9 FF FF     	lda	#$ffff
  3243 05:8892: 82 5B FF     	brl	L139
  3244                        ;}
  3245                        	.line	672
  3246                        	.endblock	672
  3247             00000016   L135	equ	22
  3248             0000000D   L136	equ	13
  3249 05:8895:              	ends
  3250                        	efunc
  3251                        	.endfunc	672,13,22
  3252                        	.line	672
  3253                        	data
  3254                        L134:
  3255 00:0206: 66 6C 70 79  	db	$66,$6C,$70,$79,$64,$73,$6B,$5F,$73,$65,
                    $65,$6B,$3A,$63,$79
       00:020A: 64 73 6B 5F 
       00:020E: 73 65 65 6B 
       00:0212: 3A 63 79 
  3256 00:0215: 6C 3A 00 66  	db	$6C,$3A,$00,$66,$6C,$70,$79,$64,$73,$6B,
                    $5F,$73,$65,$65,$6B
       00:0219: 6C 70 79 64 
       00:021D: 73 6B 5F 73 
       00:0221: 65 65 6B 
  3257 00:0224: 3A 68 65 61  	db	$3A,$68,$65,$61,$64,$3A,$00
       00:0228: 64 3A 00 
  3258 00:022B:              	ends
  Thu Dec  3 2020 22:25                                                Page 63


  3259                        ;
  3260                        ;//===============================================
                    =============================
  3261                        ;//    INTERFACE FUNCTIONS
  3262                        ;//===============================================
                    =============================
  3263                        ;
  3264                        ;//! convert LBA to CHS
  3265                        ;void flpydsk_lba_to_chs(int lba, int *head, int *
                    track, int *sector)
  3266                        ;{
  3267                        	.line	679
  3268                        	.line	680
  3269                        	FLPY
  3270                        	xdef	~~flpydsk_lba_to_chs
  3271                        	func
  3272                        	.function	680
  3273                        ~~flpydsk_lba_to_chs:
  3274                        	longa	on
  3275                        	longi	on
  3276 05:8895: 3B           	tsc
  3277 05:8896: 38           	sec
  3278 05:8897: E9 04 00     	sbc	#L146
  3279 05:889A: 1B           	tcs
  3280 05:889B: 0B           	phd
  3281 05:889C: 5B           	tcd
  3282             00000004   lba_0	set	4
  3283             00000006   head_0	set	6
  3284             0000000A   track_0	set	10
  3285             0000000E   sector_0	set	14
  3286                        	.block	680
  3287                        ;
  3288                        ;	*head = (lba % (FLPY_SECTORS_PER_TRACK * 2)) / (
                    FLPY_SECTORS_PER_TRACK);
  3289                        	.sym	lba,4,5,6,16
  3290                        	.sym	head,6,133,6,32
  3291                        	.sym	track,10,133,6,32
  3292                        	.sym	sector,14,133,6,32
  3293                        	.line	682
  3294 05:889D: A0 00 00     	ldy	#$0
  3295 05:88A0: A5 08        	lda	<L146+lba_0
  3296 05:88A2: 10 01        	bpl	L149
  3297 05:88A4: 88           	dey
  3298                        L149:
  3299 05:88A5: 85 01        	sta	<R0
  3300 05:88A7: 84 03        	sty	<R0+2
  3301 05:88A9: F4 00 00     	pea	#^$24
  3302 05:88AC: F4 24 00     	pea	#<$24
  3303 05:88AF: D4 03        	pei	<R0+2
  3304 05:88B1: D4 01        	pei	<R0
  3305                        	xref	~~~lmod
  3306 05:88B3: 22 xx xx xx  	jsl	~~~lmod
  3307 05:88B7: 85 01        	sta	<R0
  3308 05:88B9: 86 03        	stx	<R0+2
  3309 05:88BB: F4 00 00     	pea	#^$12
  3310 05:88BE: F4 12 00     	pea	#<$12
  3311 05:88C1: D4 03        	pei	<R0+2
  3312 05:88C3: D4 01        	pei	<R0
  Thu Dec  3 2020 22:25                                                Page 64


  3313                        	xref	~~~ldiv
  3314 05:88C5: 22 xx xx xx  	jsl	~~~ldiv
  3315 05:88C9: 85 01        	sta	<R0
  3316 05:88CB: 86 03        	stx	<R0+2
  3317 05:88CD: A5 01        	lda	<R0
  3318 05:88CF: 87 0A        	sta	[<L146+head_0]
  3319                        ;	*track = lba / (FLPY_SECTORS_PER_TRACK * 2);
  3320                        	.line	683
  3321 05:88D1: A0 00 00     	ldy	#$0
  3322 05:88D4: A5 08        	lda	<L146+lba_0
  3323 05:88D6: 10 01        	bpl	L150
  3324 05:88D8: 88           	dey
  3325                        L150:
  3326 05:88D9: 85 01        	sta	<R0
  3327 05:88DB: 84 03        	sty	<R0+2
  3328 05:88DD: F4 00 00     	pea	#^$24
  3329 05:88E0: F4 24 00     	pea	#<$24
  3330 05:88E3: D4 03        	pei	<R0+2
  3331 05:88E5: D4 01        	pei	<R0
  3332                        	xref	~~~ldiv
  3333 05:88E7: 22 xx xx xx  	jsl	~~~ldiv
  3334 05:88EB: 85 01        	sta	<R0
  3335 05:88ED: 86 03        	stx	<R0+2
  3336 05:88EF: A5 01        	lda	<R0
  3337 05:88F1: 87 0E        	sta	[<L146+track_0]
  3338                        ;	*sector = lba % FLPY_SECTORS_PER_TRACK + 1;
  3339                        	.line	684
  3340 05:88F3: A5 08        	lda	<L146+lba_0
  3341 05:88F5: A2 12 00     	ldx	#<$12
  3342                        	xref	~~~mod
  3343 05:88F8: 22 xx xx xx  	jsl	~~~mod
  3344 05:88FC: 85 01        	sta	<R0
  3345 05:88FE: A5 01        	lda	<R0
  3346 05:8900: 1A           	ina
  3347 05:8901: 87 12        	sta	[<L146+sector_0]
  3348                        ;}
  3349                        	.line	685
  3350                        L151:
  3351 05:8903: A5 06        	lda	<L146+2
  3352 05:8905: 85 14        	sta	<L146+2+14
  3353 05:8907: A5 05        	lda	<L146+1
  3354 05:8909: 85 13        	sta	<L146+1+14
  3355 05:890B: 2B           	pld
  3356 05:890C: 3B           	tsc
  3357 05:890D: 18           	clc
  3358 05:890E: 69 12 00     	adc	#L146+14
  3359 05:8911: 1B           	tcs
  3360 05:8912: 6B           	rtl
  3361                        	.endblock	685
  3362             00000004   L146	equ	4
  3363             00000005   L147	equ	5
  3364 05:8913:              	ends
  3365                        	efunc
  3366                        	.endfunc	685,5,4
  3367                        	.line	685
  3368                        ;
  3369                        ;//! install floppy driver
  3370                        ;void flpydsk_install(int irq)
  Thu Dec  3 2020 22:25                                                Page 65


  3371                        ;{
  3372                        	.line	688
  3373                        	.line	689
  3374                        	FLPY
  3375                        	xdef	~~flpydsk_install
  3376                        	func
  3377                        	.function	689
  3378                        ~~flpydsk_install:
  3379                        	longa	on
  3380                        	longi	on
  3381 05:8913: 3B           	tsc
  3382 05:8914: 38           	sec
  3383 05:8915: E9 00 00     	sbc	#L152
  3384 05:8918: 1B           	tcs
  3385 05:8919: 0B           	phd
  3386 05:891A: 5B           	tcd
  3387             00000004   irq_0	set	4
  3388                        	.block	689
  3389                        ;
  3390                        ;	//! install irq handler
  3391                        ;	//setvect(irq, i816_flpy_irq);
  3392                        ;
  3393                        ;	//! initialize the DMA for FDC
  3394                        ;	flpydsk_initialize_dma();
  3395                        	.sym	irq,4,5,6,16
  3396                        	.line	695
  3397 05:891B: 22 FF 7F 05  	jsl	~~flpydsk_initialize_dma
  3398                        ;
  3399                        ;	//! reset the fdc
  3400                        ;	flpydsk_reset();
  3401                        	.line	698
  3402 05:891F: 22 11 85 05  	jsl	~~flpydsk_reset
  3403                        ;
  3404                        ;	//flpydsk_control_motor(TRUE);
  3405                        ;
  3406                        ;	//! set drive information
  3407                        ;	flpydsk_drive_data(13, 1, 0xf, TRUE);
  3408                        	.line	703
  3409 05:8923: F4 01 00     	pea	#<$1
  3410 05:8926: F4 00 00     	pea	#^$f
  3411 05:8929: F4 0F 00     	pea	#<$f
  3412 05:892C: F4 00 00     	pea	#^$1
  3413 05:892F: F4 01 00     	pea	#<$1
  3414 05:8932: F4 00 00     	pea	#^$d
  3415 05:8935: F4 0D 00     	pea	#<$d
  3416 05:8938: 22 5E 83 05  	jsl	~~flpydsk_drive_data
  3417                        ;}
  3418                        	.line	704
  3419                        L155:
  3420 05:893C: A5 02        	lda	<L152+2
  3421 05:893E: 85 04        	sta	<L152+2+2
  3422 05:8940: A5 01        	lda	<L152+1
  3423 05:8942: 85 03        	sta	<L152+1+2
  3424 05:8944: 2B           	pld
  3425 05:8945: 3B           	tsc
  3426 05:8946: 18           	clc
  3427 05:8947: 69 02 00     	adc	#L152+2
  3428 05:894A: 1B           	tcs
  Thu Dec  3 2020 22:25                                                Page 66


  3429 05:894B: 6B           	rtl
  3430                        	.endblock	704
  3431             00000000   L152	equ	0
  3432             00000001   L153	equ	1
  3433 05:894C:              	ends
  3434                        	efunc
  3435                        	.endfunc	704,1,0
  3436                        	.line	704
  3437                        ;
  3438                        ;//! set current working drive
  3439                        ;void flpydsk_set_working_drive(uint8_t drive)
  3440                        ;{
  3441                        	.line	707
  3442                        	.line	708
  3443                        	FLPY
  3444                        	xdef	~~flpydsk_set_working_drive
  3445                        	func
  3446                        	.function	708
  3447                        ~~flpydsk_set_working_drive:
  3448                        	longa	on
  3449                        	longi	on
  3450 05:894C: 3B           	tsc
  3451 05:894D: 38           	sec
  3452 05:894E: E9 00 00     	sbc	#L156
  3453 05:8951: 1B           	tcs
  3454 05:8952: 0B           	phd
  3455 05:8953: 5B           	tcd
  3456             00000004   drive_0	set	4
  3457                        	.block	708
  3458                        ;	if (drive < 4)
  3459                        	.sym	drive,4,14,6,8
  3460                        	.line	709
  3461                        ;		_CurrentDrive = drive;
  3462 05:8954: E2 20        	sep	#$20
  3463                        	longa	off
  3464 05:8956: A5 04        	lda	<L156+drive_0
  3465 05:8958: C9 04        	cmp	#<$4
  3466 05:895A: C2 20        	rep	#$20
  3467                        	longa	on
  3468 05:895C: 90 03        	bcc	L159
  3469 05:895E: 82 09 00     	brl	L10051
  3470                        L159:
  3471                        	.line	710
  3472 05:8961: E2 20        	sep	#$20
  3473                        	longa	off
  3474 05:8963: A5 04        	lda	<L156+drive_0
  3475 05:8965: 8D xx xx     	sta	|~~_CurrentDrive
  3476 05:8968: C2 20        	rep	#$20
  3477                        	longa	on
  3478                        ;}
  3479                        L10051:
  3480                        	.line	711
  3481                        L160:
  3482 05:896A: A5 02        	lda	<L156+2
  3483 05:896C: 85 04        	sta	<L156+2+2
  3484 05:896E: A5 01        	lda	<L156+1
  3485 05:8970: 85 03        	sta	<L156+1+2
  3486 05:8972: 2B           	pld
  Thu Dec  3 2020 22:25                                                Page 67


  3487 05:8973: 3B           	tsc
  3488 05:8974: 18           	clc
  3489 05:8975: 69 02 00     	adc	#L156+2
  3490 05:8978: 1B           	tcs
  3491 05:8979: 6B           	rtl
  3492                        	.endblock	711
  3493             00000000   L156	equ	0
  3494             00000001   L157	equ	1
  3495 05:897A:              	ends
  3496                        	efunc
  3497                        	.endfunc	711,1,0
  3498                        	.line	711
  3499                        ;
  3500                        ;//! get current working drive
  3501                        ;uint8_t flpydsk_get_working_drive()
  3502                        ;{
  3503                        	.line	714
  3504                        	.line	715
  3505                        	FLPY
  3506                        	xdef	~~flpydsk_get_working_drive
  3507                        	func
  3508                        	.function	715
  3509                        ~~flpydsk_get_working_drive:
  3510                        	longa	on
  3511                        	longi	on
  3512 05:897A: 3B           	tsc
  3513 05:897B: 38           	sec
  3514 05:897C: E9 00 00     	sbc	#L161
  3515 05:897F: 1B           	tcs
  3516 05:8980: 0B           	phd
  3517 05:8981: 5B           	tcd
  3518                        	.block	715
  3519                        ;
  3520                        ;	return _CurrentDrive;
  3521                        	.line	717
  3522 05:8982: AD xx xx     	lda	|~~_CurrentDrive
  3523 05:8985: 29 FF 00     	and	#$ff
  3524                        L164:
  3525 05:8988: A8           	tay
  3526 05:8989: 2B           	pld
  3527 05:898A: 3B           	tsc
  3528 05:898B: 18           	clc
  3529 05:898C: 69 00 00     	adc	#L161
  3530 05:898F: 1B           	tcs
  3531 05:8990: 98           	tya
  3532 05:8991: 6B           	rtl
  3533                        ;}
  3534                        	.line	718
  3535                        	.endblock	718
  3536             00000000   L161	equ	0
  3537             00000001   L162	equ	1
  3538 05:8992:              	ends
  3539                        	efunc
  3540                        	.endfunc	718,1,0
  3541                        	.line	718
  3542                        ;
  3543                        ;//! read a sector
  3544                        ;uint8_t* flpydsk_read_sector(int sectorLBA)
  Thu Dec  3 2020 22:25                                                Page 68


  3545                        ;{
  3546                        	.line	721
  3547                        	.line	722
  3548                        	FLPY
  3549                        	xdef	~~flpydsk_read_sector
  3550                        	func
  3551                        	.function	722
  3552                        ~~flpydsk_read_sector:
  3553                        	longa	on
  3554                        	longi	on
  3555 05:8992: 3B           	tsc
  3556 05:8993: 38           	sec
  3557 05:8994: E9 0E 00     	sbc	#L165
  3558 05:8997: 1B           	tcs
  3559 05:8998: 0B           	phd
  3560 05:8999: 5B           	tcd
  3561             00000004   sectorLBA_0	set	4
  3562                        	.block	722
  3563                        ;	int head = 0, track = 0, sector = 1;
  3564                        ;
  3565                        ;	k_debug_long("flpydsk_read_sector:sectorLBA:", s
                    ectorLBA);
  3566             00000000   head_1	set	0
  3567             00000002   track_1	set	2
  3568             00000004   sector_1	set	4
  3569                        	.sym	head,0,5,1,16
  3570                        	.sym	track,2,5,1,16
  3571                        	.sym	sector,4,5,1,16
  3572                        	.sym	sectorLBA,4,5,6,16
  3573 05:899A: 64 09        	stz	<L166+head_1
  3574 05:899C: 64 0B        	stz	<L166+track_1
  3575 05:899E: A9 01 00     	lda	#$1
  3576 05:89A1: 85 0D        	sta	<L166+sector_1
  3577                        	.line	725
  3578 05:89A3: A0 00 00     	ldy	#$0
  3579 05:89A6: A5 12        	lda	<L165+sectorLBA_0
  3580 05:89A8: 10 01        	bpl	L168
  3581 05:89AA: 88           	dey
  3582                        L168:
  3583 05:89AB: 85 01        	sta	<R0
  3584 05:89AD: 84 03        	sty	<R0+2
  3585 05:89AF: D4 03        	pei	<R0+2
  3586 05:89B1: D4 01        	pei	<R0
  3587 05:89B3: F4 xx xx     	pea	#^L145
  3588 05:89B6: F4 xx xx     	pea	#<L145
  3589 05:89B9: 22 xx xx xx  	jsl	~~k_debug_long
  3590                        ;
  3591                        ;	if (_CurrentDrive >= 4)
  3592                        	.line	727
  3593                        ;		return 0;
  3594 05:89BD: E2 20        	sep	#$20
  3595                        	longa	off
  3596 05:89BF: AD xx xx     	lda	|~~_CurrentDrive
  3597 05:89C2: C9 04        	cmp	#<$4
  3598 05:89C4: C2 20        	rep	#$20
  3599                        	longa	on
  3600 05:89C6: B0 03        	bcs	L169
  3601 05:89C8: 82 19 00     	brl	L10052
  Thu Dec  3 2020 22:25                                                Page 69


  3602                        L169:
  3603                        	.line	728
  3604 05:89CB: A9 00 00     	lda	#$0
  3605 05:89CE: AA           	tax
  3606 05:89CF: A9 00 00     	lda	#$0
  3607                        L170:
  3608 05:89D2: A8           	tay
  3609 05:89D3: A5 10        	lda	<L165+2
  3610 05:89D5: 85 12        	sta	<L165+2+2
  3611 05:89D7: A5 0F        	lda	<L165+1
  3612 05:89D9: 85 11        	sta	<L165+1+2
  3613 05:89DB: 2B           	pld
  3614 05:89DC: 3B           	tsc
  3615 05:89DD: 18           	clc
  3616 05:89DE: 69 10 00     	adc	#L165+2
  3617 05:89E1: 1B           	tcs
  3618 05:89E2: 98           	tya
  3619 05:89E3: 6B           	rtl
  3620                        ;
  3621                        ;	//! convert LBA sector to CHS
  3622                        ;
  3623                        ;	flpydsk_lba_to_chs(sectorLBA, &head, &track, &se
                    ctor);
  3624                        L10052:
  3625                        	.line	732
  3626 05:89E4: F4 00 00     	pea	#0
  3627 05:89E7: 18           	clc
  3628 05:89E8: 7B           	tdc
  3629 05:89E9: 69 0D 00     	adc	#<L166+sector_1
  3630 05:89EC: 48           	pha
  3631 05:89ED: F4 00 00     	pea	#0
  3632 05:89F0: 18           	clc
  3633 05:89F1: 7B           	tdc
  3634 05:89F2: 69 0B 00     	adc	#<L166+track_1
  3635 05:89F5: 48           	pha
  3636 05:89F6: F4 00 00     	pea	#0
  3637 05:89F9: 18           	clc
  3638 05:89FA: 7B           	tdc
  3639 05:89FB: 69 09 00     	adc	#<L166+head_1
  3640 05:89FE: 48           	pha
  3641 05:89FF: D4 12        	pei	<L165+sectorLBA_0
  3642 05:8A01: 22 95 88 05  	jsl	~~flpydsk_lba_to_chs
  3643                        ;
  3644                        ;	//! turn motor on and seek to track
  3645                        ;	flpydsk_control_motor(TRUE);
  3646                        	.line	735
  3647 05:8A05: F4 01 00     	pea	#<$1
  3648 05:8A08: 22 8C 82 05  	jsl	~~flpydsk_control_motor
  3649                        ;	if (flpydsk_seek(track, head) != 0)
  3650                        	.line	736
  3651                        ;	{
  3652 05:8A0C: A0 00 00     	ldy	#$0
  3653 05:8A0F: A5 09        	lda	<L166+head_1
  3654 05:8A11: 10 01        	bpl	L171
  3655 05:8A13: 88           	dey
  3656                        L171:
  3657 05:8A14: 85 01        	sta	<R0
  3658 05:8A16: 84 03        	sty	<R0+2
  Thu Dec  3 2020 22:25                                                Page 70


  3659 05:8A18: D4 03        	pei	<R0+2
  3660 05:8A1A: D4 01        	pei	<R0
  3661 05:8A1C: A0 00 00     	ldy	#$0
  3662 05:8A1F: A5 0B        	lda	<L166+track_1
  3663 05:8A21: 10 01        	bpl	L172
  3664 05:8A23: 88           	dey
  3665                        L172:
  3666 05:8A24: 85 05        	sta	<R1
  3667 05:8A26: 84 07        	sty	<R1+2
  3668 05:8A28: D4 07        	pei	<R1+2
  3669 05:8A2A: D4 05        	pei	<R1
  3670 05:8A2C: 22 BB 87 05  	jsl	~~flpydsk_seek
  3671 05:8A30: AA           	tax
  3672 05:8A31: D0 03        	bne	L173
  3673 05:8A33: 82 21 00     	brl	L10053
  3674                        L173:
  3675                        	.line	737
  3676                        ;		flpydsk_control_motor(FALSE);
  3677                        	.line	738
  3678 05:8A36: F4 00 00     	pea	#<$0
  3679 05:8A39: 22 8C 82 05  	jsl	~~flpydsk_control_motor
  3680                        ;		k_debug_long("flpydsk_read_sector:sector
                    LBA:exit:", 0);
  3681                        	.line	739
  3682 05:8A3D: F4 00 00     	pea	#^$0
  3683 05:8A40: F4 00 00     	pea	#<$0
  3684 05:8A43: F4 xx xx     	pea	#^L145+31
  3685 05:8A46: F4 xx xx     	pea	#<L145+31
  3686 05:8A49: 22 xx xx xx  	jsl	~~k_debug_long
  3687                        ;		return 0;
  3688                        	.line	740
  3689 05:8A4D: A9 00 00     	lda	#$0
  3690 05:8A50: AA           	tax
  3691 05:8A51: A9 00 00     	lda	#$0
  3692 05:8A54: 82 7B FF     	brl	L170
  3693                        ;	}
  3694                        	.line	741
  3695                        ;	//! read sector and turn motor off
  3696                        ;	flpydsk_read_sector_imp2(head, track, sector);
  3697                        L10053:
  3698                        	.line	743
  3699 05:8A57: D4 0D        	pei	<L166+sector_1
  3700 05:8A59: D4 0B        	pei	<L166+track_1
  3701 05:8A5B: D4 09        	pei	<L166+head_1
  3702 05:8A5D: 22 B5 86 05  	jsl	~~flpydsk_read_sector_imp2
  3703                        ;	flpydsk_control_motor(FALSE);
  3704                        	.line	744
  3705 05:8A61: F4 00 00     	pea	#<$0
  3706 05:8A64: 22 8C 82 05  	jsl	~~flpydsk_control_motor
  3707                        ;
  3708                        ;	//! warning: this is a bit hackish
  3709                        ;	return (uint8_t*) DMA_BUFFER;
  3710                        	.line	747
  3711 05:8A68: AE xx xx     	ldx	|~~DMA_BUFFER+2
  3712 05:8A6B: AD xx xx     	lda	|~~DMA_BUFFER
  3713 05:8A6E: 82 61 FF     	brl	L170
  3714                        ;}
  3715                        	.line	748
  Thu Dec  3 2020 22:25                                                Page 71


  3716                        	.endblock	748
  3717             0000000E   L165	equ	14
  3718             00000009   L166	equ	9
  3719 05:8A71:              	ends
  3720                        	efunc
  3721                        	.endfunc	748,9,14
  3722                        	.line	748
  3723                        	data
  3724                        L145:
  3725 00:022B: 66 6C 70 79  	db	$66,$6C,$70,$79,$64,$73,$6B,$5F,$72,$65,
                    $61,$64,$5F,$73,$65
       00:022F: 64 73 6B 5F 
       00:0233: 72 65 61 64 
       00:0237: 5F 73 65 
  3726 00:023A: 63 74 6F 72  	db	$63,$74,$6F,$72,$3A,$73,$65,$63,$74,$6F,
                    $72,$4C,$42,$41,$3A
       00:023E: 3A 73 65 63 
       00:0242: 74 6F 72 4C 
       00:0246: 42 41 3A 
  3727 00:0249: 00 66 6C 70  	db	$00,$66,$6C,$70,$79,$64,$73,$6B,$5F,$72,
                    $65,$61,$64,$5F,$73
       00:024D: 79 64 73 6B 
       00:0251: 5F 72 65 61 
       00:0255: 64 5F 73 
  3728 00:0258: 65 63 74 6F  	db	$65,$63,$74,$6F,$72,$3A,$73,$65,$63,$74,
                    $6F,$72,$4C,$42,$41
       00:025C: 72 3A 73 65 
       00:0260: 63 74 6F 72 
       00:0264: 4C 42 41 
  3729 00:0267: 3A 65 78 69  	db	$3A,$65,$78,$69,$74,$3A,$00
       00:026B: 74 3A 00 
  3730 00:026E:              	ends
  3731                        ;
  3732                        ;
  3733                        ;//===============================================
                    =============================
  3734                        ;//    INTERFACE CLASS BODIES
  3735                        ;//===============================================
                    =============================
  3736                        ;//***********************************************
                    *****************************
  3737                        ;//**
  3738                        ;//**    END[flpydsk.cpp]
  3739                        ;//**
  3740                        ;//***********************************************
                    *****************************
  3741                        ;
  3742                        	.line	758
  3743                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\flpydsk.c",721
  3744                        	xref	~~k_debug_hex
  3745                        	xref	~~k_debug_long
  3746                        	xref	~~k_debug_integer
  3747                        	xref	~~k_debug_char
  3748                        	xref	~~k_debug_string
  3749                        	xref	~~sleep
  3750                        	.sym	~~flpydsk_seek,~~flpydsk_seek,69,2,0
  3751                        	.sym	~~flpydsk_read_sector_imp2,~~flpydsk_rea
  Thu Dec  3 2020 22:25                                                Page 72


                    d_sector_imp2,65,2,0
  3752                        	.sym	~~flpydsk_read_sector_imp,~~flpydsk_read
                    _sector_imp,65,2,0
  3753                        	.sym	~~flpydsk_enable_controller,~~flpydsk_en
                    able_controller,65,2,0
  3754                        	.sym	~~flpydsk_disable_controller,~~flpydsk_d
                    isable_controller,65,2,0
  3755                        	.sym	~~flpydsk_calibrate,~~flpydsk_calibrate,
                    69,2,0
  3756                        	.sym	~~flpydsk_drive_data,~~flpydsk_drive_dat
                    a,65,2,0
  3757                        	.sym	~~flpydsk_control_motor,~~flpydsk_contro
                    l_motor,65,2,0
  3758                        	.sym	~~flpydsk_check_int,~~flpydsk_check_int,
                    65,2,0
  3759                        	.sym	~~i816_flpy_irq,~~i816_flpy_irq,65,2,0
  3760                        	.sym	~~flpydsk_write_ccr,~~flpydsk_write_ccr,
                    65,2,0
  3761                        	.sym	~~flpydsk_read_data,~~flpydsk_read_data,
                    78,2,0
  3762                        	.sym	~~flpydsk_read_byte,~~flpydsk_read_byte,
                    78,2,0
  3763                        	.sym	~~flpydsk_write_dor,~~flpydsk_write_dor,
                    65,2,0
  3764                        	.sym	~~flpydsk_read_status,~~flpydsk_read_sta
                    tus,78,2,0
  3765                        	.sym	~~flpydsk_dma_write,~~flpydsk_dma_write,
                    65,2,0
  3766                        	.sym	~~flpydsk_dma_read,~~flpydsk_dma_read,65
                    ,2,0
  3767                        	.sym	~~flpydsk_initialize_dma,~~flpydsk_initi
                    alize_dma,65,2,0
  3768                        	.sym	~~_CurrentDrive,~~_CurrentDrive,14,3,8
  3769                        	.sym	~~DMA_BUFFER,~~DMA_BUFFER,142,2,32
  3770                        	.sym	~~FLPY_SECTORS_PER_TRACK,~~FLPY_SECTORS_
                    PER_TRACK,5,2,16
  3771                        	.sym	~~FLOPPY_IRQ,~~FLOPPY_IRQ,5,2,16
  3772                        	.sym	~~flpydsk_reset,~~flpydsk_reset,65,2,0
  3773                        	.sym	~~flpydsk_send_command,~~flpydsk_send_co
                    mmand,65,2,0
  3774                        	.sym	~~flpydsk_lba_to_chs,~~flpydsk_lba_to_ch
                    s,65,2,0
  3775                        	.sym	~~flpydsk_read_sector,~~flpydsk_read_sec
                    tor,1102,2,32
  3776                        	.sym	~~flpydsk_get_working_drive,~~flpydsk_ge
                    t_working_drive,78,2,0
  3777                        	.sym	~~flpydsk_set_working_drive,~~flpydsk_se
                    t_working_drive,65,2,0
  3778                        	.sym	~~flpydsk_install,~~flpydsk_install,65,2
                    ,0
  3779                        	.sym	~~_FloppyDiskIRQ,~~_FloppyDiskIRQ,14,2,8
  3780                        	.sym	PCOMMANDARGS,0,138,14,32,63
  3781                        	.sym	COMMANDARGS,0,10,14,64,63
  3782                        	.sym	PTOKENIZESTATE,0,133,14,32
  3783                        	.sym	TOKENIZESTATE,0,5,14,16
  3784                        	.sym	PTOKEN,0,138,14,32,62
  3785                        	.sym	TOKEN,0,10,14,64,62
  3786                        	.sym	PTOKENTYPE,0,133,14,32
  Thu Dec  3 2020 22:25                                                Page 73


  3787                        	.sym	TOKENTYPE,0,5,14,16
  3788                        	.sym	FXCommandHandler,0,656,14,32
  3789                        	.sym	PCONSOLECTX,0,138,14,32,61
  3790                        	.sym	CONSOLECTX,0,10,14,1144,61
  3791                        	.sym	PSPINNERCTX,0,138,14,32,60
  3792                        	.sym	SPINNERCTX,0,10,14,48,60
  3793                        	.sym	PMOUSE_MSG_STATE,0,138,14,32,59
  3794                        	.sym	MOUSE_MSG_STATE,0,10,14,184,59
  3795                        	.sym	PFXEVENTPROCESS,0,138,14,32,58
  3796                        	.sym	FXEVENTPROCESS,0,10,14,64,58
  3797                        	.sym	FXEventProc,0,641,14,32
  3798                        	.sym	PMOUSEMSGDATA,0,138,14,32,57
  3799                        	.sym	MOUSEMSGDATA,0,10,14,64,57
  3800                        	.sym	MSGIRQ,0,5,14,16
  3801                        	.sym	MAINLOOPARGS,0,10,14,16,56
  3802                        	.sym	PEACHCHILD_MSG,0,138,14,32,55
  3803                        	.sym	EACHCHILD_MSG,0,10,14,64,55
  3804                        	.sym	PCUR_PALETTE_MAP,0,138,14,32,54
  3805                        	.sym	CUR_PALETTE_MAP,0,10,14,400,54
  3806                        	.sym	PCLICKDETECTED,0,138,14,32,53
  3807                        	.sym	CLICKDETECTED,0,10,14,64,53
  3808                        	.sym	OBJECTCLICKED,0,641,14,32
  3809                        	.sym	MemoryCallback,0,641,14,32
  3810                        	.sym	PFXMEMORYMAP,0,138,14,32,52
  3811                        	.sym	FXMEMORYMAP,0,10,14,2072,52
  3812                        	.sym	UMM_HEAP_INFO,0,10,14,256,51
  3813                        	.sym	PFXSTRING,0,138,14,32,50
  3814                        	.sym	FXSTRING,0,10,14,64,50
  3815                        	.sym	DEVICEDRIVER_COMMAND,0,656,14,32
  3816                        	.sym	DEVICEDRIVER_UNLOAD,0,654,14,32
  3817                        	.sym	DEVICEDRIVER_WRITE,0,656,14,32
  3818                        	.sym	DEVICEDRIVER_READ,0,656,14,32
  3819                        	.sym	DEVICEDRIVER_LOAD,0,654,14,32
  3820                        	.sym	PFX_BLOCK_DEVICE_DRIVER,0,138,14,32,49
  3821                        	.sym	FX_BLOCK_DEVICE_DRIVER,0,10,14,1448,49
  3822                        	.sym	PFX_DEVICE_DRIVER,0,138,14,32,48
  3823                        	.sym	FX_DEVICE_DRIVER,0,10,14,1416,48
  3824                        	.sym	~~k_debug_hex,~~k_debug_hex,65,18,0
  3825                        	.sym	~~k_debug_long,~~k_debug_long,65,18,0
  3826                        	.sym	~~k_debug_integer,~~k_debug_integer,65,1
                    8,0
  3827                        	.sym	~~k_debug_char,~~k_debug_char,65,18,0
  3828                        	.sym	~~k_debug_string,~~k_debug_string,65,18,
                    0
  3829                        	.sym	~~sleep,~~sleep,65,18,0
  3830                        	.sym	PDEBUGBYTEBITS,0,138,14,32,47
  3831                        	.sym	DEBUGBYTEBITS,0,10,14,8,47
  3832                        	.sym	PFXENVIRONMENT,0,138,14,32,46
  3833                        	.sym	FXENVIRONMENT,0,10,14,96,46
  3834                        	.sym	PFXZERPOPAGE,0,138,14,32,45
  3835                        	.sym	FXZERPOPAGE,0,10,14,448,45
  3836                        	.sym	KERNELTRAPCALL,0,641,14,32
  3837                        	.sym	FOREACHNODEUNTIL,0,654,14,32
  3838                        	.sym	FOREACHNODE,0,641,14,32
  3839                        	.sym	PFXCOMBUFFER,0,138,14,32,44
  3840                        	.sym	FXCOMBUFFER,0,10,14,2080,44
  3841                        	.sym	PSUBMENULIST,0,138,14,32,43
  3842                        	.sym	SUBMENULIST,0,10,14,40,43
  Thu Dec  3 2020 22:25                                                Page 74


  3843                        	.sym	HSUBMENU,0,7,14,32
  3844                        	.sym	PSUBMENU,0,138,14,32,42
  3845                        	.sym	SUBMENU,0,10,14,64,42
  3846                        	.sym	MenuAction,0,641,14,32
  3847                        	.sym	PMENUANCHOR,0,138,14,32,41
  3848                        	.sym	MENUANCHOR,0,10,14,144,41
  3849                        	.sym	PTEXTBOX,0,138,14,32,40
  3850                        	.sym	TEXTBOX,0,10,14,144,40
  3851                        	.sym	PLISTBOX,0,138,14,32,39
  3852                        	.sym	LISTBOX,0,10,14,240,39
  3853                        	.sym	PSCROLLBAR,0,138,14,32,38
  3854                        	.sym	SCROLLBAR,0,10,14,192,38
  3855                        	.sym	PBUTTON,0,138,14,32,37
  3856                        	.sym	BUTTON,0,10,14,80,37
  3857                        	.sym	PMENUDROPDOWNDATA,0,138,14,32,36
  3858                        	.sym	MENUDROPDOWNDATA,0,10,14,3568,36
  3859                        	.sym	PMENUTAG,0,138,14,32,35
  3860                        	.sym	MENUTAG,0,10,14,112,35
  3861                        	.sym	PMENU,0,138,14,32,34
  3862                        	.sym	MENU,0,10,14,248,34
  3863                        	.sym	HMENURESOURCE,0,129,14,32
  3864                        	.sym	HTEXTBOX,0,7,14,32
  3865                        	.sym	PTEXTBOXX,0,138,14,32,33
  3866                        	.sym	TEXTBOXX,0,10,14,112,33
  3867                        	.sym	FONTMETRIC,0,10,14,32,32
  3868                        	.sym	TITLE,0,142,14,32
  3869                        	.sym	PHANDLE,0,1153,14,32
  3870                        	.sym	HANDLE,0,129,14,32
  3871                        	.sym	PWINDOWEX,0,138,14,32,31
  3872                        	.sym	WINDOWEX,0,10,14,2704,31
  3873                        	.sym	PWINDOW,0,138,14,32,30
  3874                        	.sym	WINDOW,0,10,14,2808,30
  3875                        	.sym	PDRAGDATA,0,138,14,32,29
  3876                        	.sym	DRAGDATA,0,10,14,136,29
  3877                        	.sym	PNCCLICKABLE,0,138,14,32,28
  3878                        	.sym	NCCLICKABLE,0,10,14,88,28
  3879                        	.sym	HCLICKABLE,0,7,14,32
  3880                        	.sym	PCLICKABLE,0,138,14,32,27
  3881                        	.sym	CLICKABLE,0,10,14,88,27
  3882                        	.sym	PWNDCLASS,0,138,14,32,26
  3883                        	.sym	WNDCLASS,0,10,14,256,26
  3884                        	.sym	HBRUSH,0,129,14,32
  3885                        	.sym	HCURSOR,0,129,14,32
  3886                        	.sym	HICON,0,129,14,32
  3887                        	.sym	HINSTANCE,0,129,14,32
  3888                        	.sym	FXWndProc,0,654,14,32
  3889                        	.sym	PRECT,0,138,14,32,25
  3890                        	.sym	RECT,0,10,14,64,25
  3891                        	.sym	PPOINT,0,138,14,32,24
  3892                        	.sym	POINT,0,10,14,32,24
  3893                        	.sym	PFXPROPERTY,0,138,14,32,22
  3894                        	.sym	FXPROPERTY,0,10,14,384,22
  3895                        	.sym	SCANCODE,0,14,14,8
  3896                        	.sym	KEYCODE,0,14,14,8
  3897                        	.sym	PFXPROCESSMESSAGE,0,138,14,32,21
  3898                        	.sym	FXPROCESSMESSAGE,0,10,14,112,21
  3899                        	.sym	PFXPROCESS,0,138,14,32,20
  3900                        	.sym	FXPROCESS,0,10,14,800,20
  Thu Dec  3 2020 22:25                                                Page 75


  3901                        	.sym	PDESKTOP_CONTROL,0,138,14,32,19
  3902                        	.sym	DESKTOP_CONTROL,0,10,14,392,19
  3903                        	.sym	PCONSOLE_CONTROL,0,138,14,32,18
  3904                        	.sym	CONSOLE_CONTROL,0,10,14,448,18
  3905                        	.sym	FXProcessProc,0,641,14,32
  3906                        	.sym	PFXCMDMESSAGE,0,138,14,32,17
  3907                        	.sym	FXCMDMESSAGE,0,10,14,304,17
  3908                        	.sym	PFXOSMESSAGE,0,138,14,32,16
  3909                        	.sym	FXOSMESSAGE,0,10,14,304,16
  3910                        	.sym	PINT_REGS,0,138,14,32,15
  3911                        	.sym	INT_REGS,0,10,14,104,15
  3912                        	.sym	TASK_STACK,0,10,14,32,14
  3913                        	.sym	TASK,0,10,14,48,13
  3914                        	.sym	PIRQDATA,0,138,14,32,12
  3915                        	.sym	IRQDATA,0,10,14,48,12
  3916                        	.sym	HMENU,0,129,14,32
  3917                        	.sym	HWND,0,129,14,32
  3918                        	.sym	MSGDATA,0,14,14,8
  3919                        	.sym	MSGDEST,0,18,14,32
  3920                        	.sym	MSGSRC,0,18,14,32
  3921                        	.sym	MSGTYPE,0,16,14,16
  3922                        	.sym	PROCESS_RESOURCE_LIST,0,138,14,32,6
  3923                        	.sym	PROCESS_TLS_LIST,0,138,14,32,6
  3924                        	.sym	SEMAPHORE_LIST,0,138,14,32,6
  3925                        	.sym	FILE_BLOCK_LIST,0,138,14,32,6
  3926                        	.sym	FILE_PATH_LIST,0,138,14,32,6
  3927                        	.sym	PROCEDURE_LIST,0,138,14,32,6
  3928                        	.sym	FILE_HANDLE,0,138,14,32,11
  3929                        	.sym	FILE_BLOCK,0,10,14,552,11
  3930                        	.sym	SEMAPHORE,0,10,14,16,10
  3931                        	.sym	PPROCESS_SIGNAL,0,138,14,32,9
  3932                        	.sym	PROCESS_SIGNAL,0,10,14,16,9
  3933                        	.sym	KRESULT,0,18,14,32
  3934                        	.sym	PKERNEL_ERROR,0,138,14,32,8
  3935                        	.sym	KERNEL_ERROR,0,10,14,32,8
  3936                        	.sym	PROCESS_STATUS,0,16,14,16
  3937                        	.sym	FILE_PATH_NAME,0,142,14,32
  3938                        	.sym	PROCESS_RESOURCE,0,129,14,32
  3939                        	.sym	PROCESS_TLS,0,129,14,32
  3940                        	.sym	PROCESS_CTX,0,129,14,32
  3941                        	.sym	USERID,0,16,14,16
  3942                        	.sym	PROCESS_ID,0,18,14,32
  3943                        	.sym	PROCESS_BANK,0,14,14,8
  3944                        	.sym	PFXQUEUE,0,138,14,32,7
  3945                        	.sym	FXQUEUE,0,10,14,80,7
  3946                        	.sym	PFXNODELIST,0,138,14,32,6
  3947                        	.sym	FXNODELIST,0,10,14,96,6
  3948                        	.sym	NodeListDeallocator,0,641,14,32
  3949                        	.sym	PFXNODE,0,138,14,32,5
  3950                        	.sym	FXNODE,0,10,14,384,5
  3951                        	.sym	PBYTEBITS,0,138,14,32,4
  3952                        	.sym	BYTEBITS,0,10,14,8,4
  3953                        	.sym	HCOLOR,0,129,14,32
  3954                        	.sym	HFONT,0,129,14,32
  3955                        	.sym	HDC,0,129,14,32
  3956                        	.sym	HPOINTER,0,129,14,32
  3957                        	.sym	uint32_t,0,18,14,32
  3958                        	.sym	uint8_t,0,14,14,8
  Thu Dec  3 2020 22:25                                                Page 76


  3959                        	.sym	PFAR,0,142,14,32
  3960                        	.sym	LPBOOL,0,142,14,32
  3961                        	.sym	BOOL,0,14,14,8
  3962                        	.sym	DWORD,0,18,14,32
  3963                        	.sym	ULONG,0,18,14,32
  3964                        	.sym	LPLONG,0,135,14,32
  3965                        	.sym	LONG,0,7,14,32
  3966                        	.sym	PUINT,0,144,14,32
  3967                        	.sym	USHORT,0,16,14,16
  3968                        	.sym	UINT,0,16,14,16
  3969                        	.sym	INT,0,5,14,16
  3970                        	.sym	WORD,0,5,14,16
  3971                        	.sym	PBYTE,0,142,14,32
  3972                        	.sym	BYTE,0,14,14,8
  3973                        	.sym	UCHAR,0,14,14,8
  3974                        	.sym	LPWCSTR,0,142,14,32
  3975                        	.sym	LPCSTR,0,142,14,32
  3976                        	.sym	LPSTR,0,142,14,32
  3977                        	.sym	LPCHAR,0,142,14,32
  3978                        	.sym	CHAR,0,14,14,8
  3979                        	.sym	LPVOID,0,129,14,32
  3980                        	.sym	VOID,0,1,14,32
  3981                        	.sym	Boolean_T,0,5,14,16
  3982                        	.sym	ldiv_t,0,10,14,64,2
  3983                        	.sym	div_t,0,10,14,32,1
  3984                        	.sym	wctype_t,0,16,14,16
  3985                        	.sym	wint_t,0,16,14,16
  3986                        	.sym	wchar_t,0,14,14,8
  3987                        	.sym	ptrdiff_t,0,7,14,32
  3988                        	.sym	size_t,0,16,14,16
  3989                        	end


      Lines assembled: 3989
      Errors: 0
