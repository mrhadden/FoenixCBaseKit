  Thu Dec  3 2020 22:25                                                Page 1


                     ***************************************
                     **      WDC 65C816 Macro Assembler   **
                     **                                   **
                     **     Version 3.49.1- Feb  6 2006    **
                     ***************************************

     1                        ;:ts=8
     2             00000001   R0	equ	1
     3             00000005   R1	equ	5
     4             00000009   R2	equ	9
     5             0000000D   R3	equ	13
     6                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc.c",0
     7                        ;/* ----------------------------------------------
                    ------------------------------
     8                        ; * umm_malloc.c - a memory allocator for embedded
                     systems (microcontrollers)
     9                        ; *
    10                        ; * See LICENSE for copyright notice
    11                        ; * See README.md for acknowledgements and descrip
                    tion of internals
    12                        ; * ----------------------------------------------
                    ------------------------------
    13                        ; *
    14                        ; * R.Hempel 2007-09-22 - Original
    15                        ; * R.Hempel 2008-12-11 - Added MIT License bioler
                    plate
    16                        ; *                     - realloc() now looks to s
                    ee if previous block is free
    17                        ; *                     - made common operations f
                    unctions
    18                        ; * R.Hempel 2009-03-02 - Added macros to disable 
                    tasking
    19                        ; *                     - Added function to dump h
                    eap and check for valid free
    20                        ; *                        pointer
    21                        ; * R.Hempel 2009-03-09 - Changed name to umm_mall
                    oc to avoid conflicts with
    22                        ; *                        the mm_malloc() library
                     functions
    23                        ; *                     - Added some test code to 
                    assimilate a free block
    24                        ; *                        with the very block if 
                    possible. Complicated and
    25                        ; *                        not worth the grief.
    26                        ; * D.Frank 2014-04-02  - Fixed heap configuration
                     when UMM_TEST_MAIN is NOT set,
    27                        ; *                        added user-dependent co
                    nfiguration file umm_malloc_cfg.h
    28                        ; * R.Hempel 2016-12-04 - Add support for Unity te
                    st framework
    29                        ; *                     - Reorganize source files 
                    to avoid redundant content
    30                        ; *                     - Move integrity and poiso
                    n checking to separate file
    31                        ; * R.Hempel 2017-12-29 - Fix bug in realloc when 
                    requesting a new block that
    32                        ; *                        results in OOM error - 
  Thu Dec  3 2020 22:25                                                Page 2


                    see Issue 11
    33                        ; * R.Hempel 2019-09-07 - Separate the malloc() an
                    d free() functionality into
    34                        ; *                        wrappers that use criti
                    cal section protection macros
    35                        ; *                        and static core functio
                    ns that assume they are
    36                        ; *                        running in a protected 
                    con text. Thanks @devyte
    37                        ; * ----------------------------------------------
                    ------------------------------
    38                        ; */
    39                        ;
    40                        ;#include <stdio.h>
    41                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdio.h",0
    42                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdarg.h",0
    43                        	.line	51
    44                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdio.h",40
    45                        	.stag	__stdio,160,1
    46                        	.member	_bp,0,142,8,32
    47                        	.member	_bend,32,142,8,32
    48                        	.member	_buff,64,142,8,32
    49                        	.member	_flags,96,15,8,16
    50                        	.member	_unit,112,14,8,8
    51                        	.member	_bytbuf,120,14,8,8
    52                        	.member	_buflen,128,16,8,16
    53                        	.member	_tmpnum,144,15,8,16
    54                        	.eos
    55                        	.line	219
    56                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc.c",34
    57                        ;#include <string.h>
    58                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
    59                        	.line	134
    60                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc.c",35
    61                        ;
    62                        ;#include "umm_malloc.h"
    63                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc.h",0
    64                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
    65                        	.stag	_fx_bytebits,8,2
    66                        	.member	b7,0,14,17,1
    67                        	.member	b6,1,14,17,1
    68                        	.member	b5,2,14,17,1
    69                        	.member	b4,3,14,17,1
    70                        	.member	b3,4,14,17,1
    71                        	.member	b2,5,14,17,1
    72                        	.member	b1,6,14,17,1
    73                        	.member	b0,7,14,17,1
    74                        	.eos
    75                        	.stag	_fx_node,384,3
    76                        	.member	type,0,14,8,8
  Thu Dec  3 2020 22:25                                                Page 3


    77                        	.member	Reserved0,8,14,8,8
    78                        	.member	data,16,129,8,32
    79                        	.member	last,48,138,8,32,3
    80                        	.member	next,80,138,8,32,3
    81                        	.member	name,112,110,8,0,32
    82                        	.member	Reserved1,368,16,8,16
    83                        	.eos
    84                        	.stag	_fx_nodelist,96,4
    85                        	.member	listhead,0,138,8,32,3
    86                        	.member	listData,32,129,8,32
    87                        	.member	deallocator,64,641,8,32
    88                        	.eos
    89                        	.stag	_fx_queue,80,5
    90                        	.member	count,0,5,8,16
    91                        	.member	front,16,138,8,32,3
    92                        	.member	rear,48,138,8,32,3
    93                        	.eos
    94                        	.stag	fake6_,32,6
    95                        	.member	subsystem,0,14,8,8
    96                        	.member	level,8,14,8,8
    97                        	.member	error,16,16,8,16
    98                        	.eos
    99                        	.stag	_fx_process_signal,16,7
   100                        	.member	cbSize,0,16,8,16
   101                        	.eos
   102                        	.stag	_fx_semaphore,16,8
   103                        	.member	reserved,0,5,8,16
   104                        	.eos
   105                        	.stag	_fx_fileBlock,552,9
   106                        	.member	openCount,0,16,8,16
   107                        	.member	lockCount,16,16,8,16
   108                        	.member	dirty,32,14,8,8
   109                        	.member	fileBuffer,40,110,8,0,64
   110                        	.eos
   111                        	.stag	_fx_irq_data,48,10
   112                        	.member	line,0,5,8,16
   113                        	.member	keycode,16,142,8,32
   114                        	.eos
   115                        	.stag	_task,48,11
   116                        	.member	SPL,0,14,8,8
   117                        	.member	SPH,8,14,8,8
   118                        	.member	pstack,16,142,8,32
   119                        	.eos
   120                        	.stag	_task_stack,32,12
   121                        	.member	SS,0,142,8,32
   122                        	.eos
   123                        	.stag	int_regs,104,13
   124                        	.member	PB,0,14,8,8
   125                        	.member	PH,8,14,8,8
   126                        	.member	PL,16,14,8,8
   127                        	.member	PP,24,14,8,8
   128                        	.member	DB,32,14,8,8
   129                        	.member	DH,40,14,8,8
   130                        	.member	DL,48,14,8,8
   131                        	.member	AH,56,14,8,8
   132                        	.member	AL,64,14,8,8
   133                        	.member	XH,72,14,8,8
   134                        	.member	XL,80,14,8,8
  Thu Dec  3 2020 22:25                                                Page 4


   135                        	.member	YH,88,14,8,8
   136                        	.member	YL,96,14,8,8
   137                        	.eos
   138                        	.stag	_fx_eventMessage,304,14
   139                        	.member	src,0,18,8,32
   140                        	.member	dest,32,18,8,32
   141                        	.member	type,64,16,8,16
   142                        	.member	hwnd,80,129,8,32
   143                        	.member	pheap,112,129,8,32
   144                        	.member	msgTime,144,18,8,32
   145                        	.member	data,176,110,8,0,16
   146                        	.eos
   147                        	.stag	_fx_cmdMessage,304,15
   148                        	.member	src,0,18,8,32
   149                        	.member	dest,32,18,8,32
   150                        	.member	type,64,16,8,16
   151                        	.member	hwnd,80,129,8,32
   152                        	.member	pheap,112,129,8,32
   153                        	.member	msgTime,144,18,8,32
   154                        	.member	cmdCId,176,16,8,16
   155                        	.member	cmdMId,192,16,8,16
   156                        	.member	parameter1,208,18,8,32
   157                        	.member	parameter2,240,18,8,32
   158                        	.member	parameter3,272,18,8,32
   159                        	.eos
   160                        	.stag	_fx_console_ctl,448,16
   161                        	.member	maxCols,0,5,8,16
   162                        	.member	maxRows,16,5,8,16
   163                        	.member	curX,32,5,8,16
   164                        	.member	curY,48,5,8,16
   165                        	.member	fgColor,64,5,8,16
   166                        	.member	bgColor,80,5,8,16
   167                        	.member	mode,96,14,8,8
   168                        	.member	kbBuffer,104,101,8,0,16
   169                        	.member	screenBuffer,360,142,8,32
   170                        	.member	desktopMode,392,14,8,8
   171                        	.member	lastMouseButton,400,5,8,16
   172                        	.member	lastMouseX,416,5,8,16
   173                        	.member	lastMouseY,432,5,8,16
   174                        	.eos
   175                        	.stag	_fx_desktop_ctl,392,17
   176                        	.member	desktopMode,0,14,8,8
   177                        	.member	cursorCtl,8,5,8,16
   178                        	.member	cursorState,24,5,8,16
   179                        	.member	backgroundColor,40,5,8,16
   180                        	.member	foregroundColor,56,5,8,16
   181                        	.member	menuMode,72,5,8,16
   182                        	.member	lastMouseButton,88,5,8,16
   183                        	.member	lastMouseX,104,5,8,16
   184                        	.member	lastMouseY,120,5,8,16
   185                        	.member	currentDiskName,136,142,8,32
   186                        	.member	diskNodes,168,129,8,32
   187                        	.member	titleNodes,200,129,8,32
   188                        	.member	menuNodes,232,129,8,32
   189                        	.member	iconNodes,264,129,8,32
   190                        	.member	windowNodes,296,129,8,32
   191                        	.member	fontNodes,328,129,8,32
   192                        	.member	wndProc,360,138,8,32,4
  Thu Dec  3 2020 22:25                                                Page 5


   193                        	.eos
   194                        	.stag	_fx_process,800,18
   195                        	.member	cbSize,0,5,8,16
   196                        	.member	procId,16,18,8,32
   197                        	.member	parentId,48,18,8,32
   198                        	.member	ctx,80,129,8,32
   199                        	.member	userId,112,16,8,16
   200                        	.member	status,128,16,8,16
   201                        	.member	foregroundActive,144,14,8,8
   202                        	.member	tls,152,1121,8,32,8
   203                        	.member	commandLine,408,142,8,32
   204                        	.member	semaphores,440,138,8,32,4
   205                        	.member	fileHandles,472,138,8,32,4
   206                        	.member	pathList,504,138,8,32,4
   207                        	.member	resources,536,138,8,32,4
   208                        	.member	timerAware,568,14,8,8
   209                        	.member	timerTicks,576,112,8,0,2
   210                        	.member	timerTickCount,608,112,8,0,2
   211                        	.member	kernelError,640,10,8,32,6
   212                        	.member	consoleCtl,672,138,8,32,16
   213                        	.member	desktopCtl,704,138,8,32,17
   214                        	.member	execProc,736,641,8,32
   215                        	.member	startupArgs,768,129,8,32
   216                        	.eos
   217                        	.stag	_fxProcessMessage,112,19
   218                        	.member	src,0,18,8,32
   219                        	.member	dest,32,18,8,32
   220                        	.member	type,64,16,8,16
   221                        	.member	processInfo,80,138,8,32,18
   222                        	.eos
   223                        	.stag	_fx_property,384,20
   224                        	.member	name,0,110,8,0,16
   225                        	.member	value,128,110,8,0,32
   226                        	.eos
   227                        	.utag	_24bitPointer,32,21
   228                        	.member	address,0,142,11,32
   229                        	.member	bytes,0,110,11,0,4
   230                        	.eos
   231                        	.stag	_PointStruct,32,22
   232                        	.member	x,0,5,8,16
   233                        	.member	y,16,5,8,16
   234                        	.eos
   235                        	.stag	_RectStruct,64,23
   236                        	.member	x,0,5,8,16
   237                        	.member	y,16,5,8,16
   238                        	.member	width,32,5,8,16
   239                        	.member	height,48,5,8,16
   240                        	.eos
   241                        	.stag	_k_WindowClass,256,24
   242                        	.member	cbSize,0,16,8,16
   243                        	.member	style,16,16,8,16
   244                        	.member	pWndProc,32,654,8,32
   245                        	.member	hInstance,64,129,8,32
   246                        	.member	hIcon,96,129,8,32
   247                        	.member	hCursor,128,129,8,32
   248                        	.member	hbrBackground,160,129,8,32
   249                        	.member	lpszMenuName,192,142,8,32
   250                        	.member	lpszClassName,224,142,8,32
  Thu Dec  3 2020 22:25                                                Page 6


   251                        	.eos
   252                        	.stag	_ClickableRect,88,25
   253                        	.member	area,0,10,8,64,23
   254                        	.member	z,64,5,8,16
   255                        	.member	enabled,80,14,8,8
   256                        	.eos
   257                        	.stag	_NCClickableRect,88,26
   258                        	.member	area,0,10,8,64,23
   259                        	.member	msgType,64,16,8,16
   260                        	.member	enabled,80,14,8,8
   261                        	.eos
   262                        	.stag	_DragData,136,27
   263                        	.member	area,0,10,8,64,23
   264                        	.member	xoffset,64,5,8,16
   265                        	.member	yoffset,80,5,8,16
   266                        	.member	msgType,96,16,8,16
   267                        	.member	isDrag,112,14,8,8
   268                        	.member	canDrag,120,14,8,8
   269                        	.member	canDrop,128,14,8,8
   270                        	.eos
   271                        	.stag	_k_WindowStruct,2808,28
   272                        	.member	cbSize,0,16,8,16
   273                        	.member	style,16,18,8,32
   274                        	.member	win_id,48,5,8,16
   275                        	.member	win_x,64,5,8,16
   276                        	.member	win_y,80,5,8,16
   277                        	.member	win_width,96,5,8,16
   278                        	.member	win_height,112,5,8,16
   279                        	.member	wndRect,128,10,8,64,23
   280                        	.member	clientRect,192,10,8,64,23
   281                        	.member	nonclientGadgets,256,106,8,0,26,16
   282                        	.member	clickable,1664,129,8,32
   283                        	.member	win_title,1696,110,8,0,32
   284                        	.member	Reserved0,1952,16,8,16
   285                        	.member	win_class,1968,110,8,0,16
   286                        	.member	win_class_name,2096,110,8,0,32
   287                        	.member	nBitmapLayer,2352,16,8,16
   288                        	.member	procid,2368,18,8,32
   289                        	.member	pWndClass,2400,138,8,32,24
   290                        	.member	pParentWindow,2432,129,8,32
   291                        	.member	hMenu,2464,129,8,32
   292                        	.member	pChildWindows,2496,138,8,32,4
   293                        	.member	pChildHitList,2528,138,8,32,4
   294                        	.member	isVisible,2560,14,8,8
   295                        	.member	windowData,2568,129,8,32
   296                        	.member	clientData,2600,1121,8,32,6
   297                        	.member	isClosed,2792,14,8,8
   298                        	.member	isClosing,2800,14,8,8
   299                        	.eos
   300                        	.stag	_k_WindowStructEx,2704,29
   301                        	.member	cbSize,0,16,8,16
   302                        	.member	style,16,18,8,32
   303                        	.member	win_id,48,5,8,16
   304                        	.member	win_x,64,5,8,16
   305                        	.member	win_y,80,5,8,16
   306                        	.member	win_width,96,5,8,16
   307                        	.member	win_height,112,5,8,16
   308                        	.member	wndRect,128,10,8,64,23
  Thu Dec  3 2020 22:25                                                Page 7


   309                        	.member	clientRect,192,10,8,64,23
   310                        	.member	nonclientGadgets,256,106,8,0,26,16
   311                        	.member	clickable,1664,129,8,32
   312                        	.member	win_title,1696,110,8,0,32
   313                        	.member	Reserved0,1952,16,8,16
   314                        	.member	win_class,1968,110,8,0,16
   315                        	.member	nBitmapLayer,2096,16,8,16
   316                        	.member	procid,2112,18,8,32
   317                        	.member	pWndClass,2144,138,8,32,24
   318                        	.member	pParentWindow,2176,129,8,32
   319                        	.member	hMenu,2208,129,8,32
   320                        	.member	pChildWindows,2240,138,8,32,4
   321                        	.member	pChildHitList,2272,138,8,32,4
   322                        	.member	isVisible,2304,14,8,8
   323                        	.member	windowData,2312,129,8,32
   324                        	.member	clientData,2344,1121,8,32,4
   325                        	.member	isClosed,2472,14,8,8
   326                        	.member	hWnd,2480,129,8,32
   327                        	.member	localRect,2512,10,8,64,23
   328                        	.member	globalRect,2576,10,8,64,23
   329                        	.member	clientOffsetRect,2640,10,8,64,23
   330                        	.eos
   331                        	.stag	_FontMetric,32,30
   332                        	.member	width,0,5,8,16
   333                        	.member	height,16,5,8,16
   334                        	.eos
   335                        	.stag	_ctl_Textbox,112,31
   336                        	.member	win_id,0,5,8,16
   337                        	.member	win_x,16,5,8,16
   338                        	.member	win_y,32,5,8,16
   339                        	.member	win_width,48,5,8,16
   340                        	.member	win_height,64,5,8,16
   341                        	.member	content,80,1166,8,32
   342                        	.eos
   343                        	.stag	_MenuStruct,248,32
   344                        	.member	cx,0,5,8,16
   345                        	.member	cy,16,5,8,16
   346                        	.member	width,32,5,8,16
   347                        	.member	height,48,5,8,16
   348                        	.member	fcolor,64,14,8,8
   349                        	.member	bcolor,72,14,8,8
   350                        	.member	chromeLeft,80,14,8,8
   351                        	.member	chromeRight1,88,14,8,8
   352                        	.member	chromeRight2,96,14,8,8
   353                        	.member	itemId,104,16,8,16
   354                        	.member	pCaption,120,142,8,32
   355                        	.member	subMenus,152,138,8,32,4
   356                        	.member	pBackground,184,129,8,32
   357                        	.member	hWndOwner,216,129,8,32
   358                        	.eos
   359                        	.stag	fake33_,112,33
   360                        	.member	menuId,0,16,8,16
   361                        	.member	caption,16,142,8,32
   362                        	.member	rect,48,10,8,64,23
   363                        	.eos
   364                        	.stag	fake34_,3568,34
   365                        	.member	pParent,0,138,8,32,28
   366                        	.member	rect,32,10,8,64,23
  Thu Dec  3 2020 22:25                                                Page 8


   367                        	.member	captions,96,1134,8,32,24
   368                        	.member	chrome,864,110,8,0,24
   369                        	.member	ids,1056,112,8,0,24
   370                        	.member	clickable,1440,106,8,0,25,24
   371                        	.member	selected,3552,16,8,16
   372                        	.eos
   373                        	.stag	_fx_button_t,80,35
   374                        	.member	pCaption,0,142,8,32
   375                        	.member	data,32,129,8,32
   376                        	.member	captionPixelWidth,64,16,8,16
   377                        	.eos
   378                        	.stag	_fx_scrollbar_t,192,36
   379                        	.member	min,0,16,8,16
   380                        	.member	max,16,16,8,16
   381                        	.member	increment,32,16,8,16
   382                        	.member	stopsize,48,16,8,16
   383                        	.member	location,64,5,8,16
   384                        	.member	state,80,5,8,16
   385                        	.member	rectThumb,96,10,8,64,23
   386                        	.member	data,160,129,8,32
   387                        	.eos
   388                        	.stag	_fx_listbox_t,240,37
   389                        	.member	pos,0,5,8,16
   390                        	.member	selected,16,16,8,16
   391                        	.member	offsetX,32,5,8,16
   392                        	.member	offsetY,48,5,8,16
   393                        	.member	inc,64,5,8,16
   394                        	.member	direction,80,5,8,16
   395                        	.member	top,96,5,8,16
   396                        	.member	bottom,112,5,8,16
   397                        	.member	indexTop,128,5,8,16
   398                        	.member	indexBottom,144,5,8,16
   399                        	.member	maxItems,160,16,8,16
   400                        	.member	fontSet,176,142,8,32
   401                        	.member	data,208,129,8,32
   402                        	.eos
   403                        	.stag	_fx_textbox_t,144,38
   404                        	.member	pos,0,5,8,16
   405                        	.member	selected,16,16,8,16
   406                        	.member	offsetX,32,5,8,16
   407                        	.member	offsetY,48,5,8,16
   408                        	.member	isShifted,64,14,8,8
   409                        	.member	cursorState,72,14,8,8
   410                        	.member	fontSet,80,142,8,32
   411                        	.member	data,112,129,8,32
   412                        	.eos
   413                        	.stag	_fx_menuAnchor_t,144,39
   414                        	.member	pCaption,0,142,8,32
   415                        	.member	renderLayoutX,32,16,8,16
   416                        	.member	renderLayoutY,48,16,8,16
   417                        	.member	captionPixelWidth,64,16,8,16
   418                        	.member	data,80,129,8,32
   419                        	.member	droppedWindow,112,138,8,32,28
   420                        	.eos
   421                        	.stag	_SubMenuStruct,64,40
   422                        	.member	caption,0,142,8,32
   423                        	.member	action,32,641,8,32
   424                        	.eos
  Thu Dec  3 2020 22:25                                                Page 9


   425                        	.stag	_SubMenuListStruct,40,41
   426                        	.member	cMenus,0,14,8,8
   427                        	.member	psubmenus,8,9354,8,32,40
   428                        	.eos
   429                        	.stag	_fx_ComBuffer,2080,42
   430                        	.member	cbSize,0,16,8,16
   431                        	.member	cbBuffer,16,16,8,16
   432                        	.member	buffer,32,110,8,0,256
   433                        	.eos
   434                        	.line	708
   435                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc.h",11
   436                        	.line	24
   437                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc.c",37
   438                        ;
   439                        ;#include "umm_malloc_cfg.h"   /* user-dependent *
                    /
   440                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc_cfg.h",0
   441                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos_build_parameters.h",0
   442                        	.line	32
   443                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc_cfg.h",8
   444                        	.stag	UMM_HEAP_INFO_t,256,43
   445                        	.member	totalEntries,0,18,8,32
   446                        	.member	usedEntries,32,18,8,32
   447                        	.member	freeEntries,64,18,8,32
   448                        	.member	totalBlocks,96,18,8,32
   449                        	.member	usedBlocks,128,18,8,32
   450                        	.member	freeBlocks,160,18,8,32
   451                        	.member	maxFreeContiguousBlocks,192,18,8,32
   452                        	.member	blockSize,224,18,8,32
   453                        	.eos
   454                        	.line	199
   455                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc.c",39
   456                        ;
   457                        ;/* Use the default DBGLOG_LEVEL and DBGLOG_FUNCTI
                    ON */
   458                        ;
   459                        ;#define DBGLOG_LEVEL 0
   460                        ;
   461                        ;#include "dbglog.h"
   462                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\dbglog.h",0
   463                        	.line	99
   464                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc.c",45
   465                        ;
   466                        ;/* ----------------------------------------------
                    --------------------------- */
   467                        ;
   468                        ;UMM_H_ATTPACKPRE typedef struct umm_ptr_t
   469                        ;{
   470                        ;	unsigned long next;
   471                        ;	unsigned long prev;
  Thu Dec  3 2020 22:25                                                Page 10


   472                        ;}UMM_H_ATTPACKSUF umm_ptr;
   473                        	.stag	umm_ptr_t,64,44
   474                        	.member	next,0,18,8,32
   475                        	.member	prev,32,18,8,32
   476                        	.eos
   477                        ;
   478                        ;UMM_H_ATTPACKPRE typedef struct umm_block_t
   479                        ;{
   480                        ;	union
   481                        ;	{
   482                        ;		umm_ptr used;
   483                        ;	} header;
   484                        	.utag	fake45_,64,45
   485                        	.member	used,0,10,11,64,44
   486                        	.eos
   487                        ;	union
   488                        ;	{
   489                        ;		umm_ptr free;
   490                        ;		unsigned char data[8];
   491                        ;	} body;
   492                        	.utag	fake46_,64,46
   493                        	.member	free,0,10,11,64,44
   494                        	.member	data,0,110,11,0,8
   495                        	.eos
   496                        ;}UMM_H_ATTPACKSUF umm_block;
   497                        	.stag	umm_block_t,128,47
   498                        	.member	header,0,11,8,64,45
   499                        	.member	body,64,11,8,64,46
   500                        	.eos
   501                        ;
   502                        ;#define UMM_FREELIST_MASK (0x8000)
   503                        ;#define UMM_BLOCKNO_MASK  (0x7FFF)
   504                        ;
   505                        ;/* ----------------------------------------------
                    --------------------------- */
   506                        ;
   507                        ;umm_block FAR *umm_heap = NULL;
   508                        	data
   509                        	xdef	~~umm_heap
   510                        ~~umm_heap:
   511 00:0000: 00 00 00 00  	dl	$0
   512 00:0004:              	ends
   513                        ;unsigned long umm_numblocks = 0;
   514                        	data
   515                        	xdef	~~umm_numblocks
   516                        ~~umm_numblocks:
   517 00:0004: 00 00 00 00  	dl	$0
   518 00:0008:              	ends
   519                        ;
   520                        ;#define UMM_NUMBLOCKS (umm_numblocks)
   521                        ;
   522                        ;/* ----------------------------------------------
                    -------------------------- */
   523                        ;
   524                        ;#define UMM_BLOCK(b)  (umm_heap[b])
   525                        ;
   526                        ;#define UMM_NBLOCK(b) (UMM_BLOCK(b).header.used.n
                    ext)
  Thu Dec  3 2020 22:25                                                Page 11


   527                        ;#define UMM_PBLOCK(b) (UMM_BLOCK(b).header.used.p
                    rev)
   528                        ;#define UMM_NFREE(b)  (UMM_BLOCK(b).body.free.nex
                    t)
   529                        ;#define UMM_PFREE(b)  (UMM_BLOCK(b).body.free.pre
                    v)
   530                        ;#define UMM_DATA(b)   (UMM_BLOCK(b).body.data)
   531                        ;
   532                        ;/* ----------------------------------------------
                    ---------------------------
   533                        ; * There are additional files that may be include
                    d here - normally it's
   534                        ; * not a good idea to include .c files but in thi
                    s case it keeps the
   535                        ; * main umm_malloc file clear and prevents issues
                     with exposing internal
   536                        ; * data structures to other programs.
   537                        ; * ----------------------------------------------
                    ---------------------------
   538                        ; */
   539                        ;
   540                        ;#include "umm_integrity.c"
   541                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_integrity.c",0
   542                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxkernel.h",0
   543                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   544                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   545                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stddef.h",0
   546                        	.line	88
   547                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",43
   548                        	.stag	fake48_,32,48
   549                        	.member	quot,0,5,8,16
   550                        	.member	rem,16,5,8,16
   551                        	.eos
   552                        	.stag	fake49_,64,49
   553                        	.member	quot,0,7,8,32
   554                        	.member	rem,32,7,8,32
   555                        	.eos
   556                        	.stag	int_sqrt,32,50
   557                        	.member	sqrt,0,16,8,16
   558                        	.member	frac,16,16,8,16
   559                        	.eos
   560                        	.line	205
   561                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",4
   562                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
   563                        	.line	134
   564                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",5
   565                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    ctype.h",0
   566                        	.line	103
  Thu Dec  3 2020 22:25                                                Page 12


   567                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",6
   568                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   569                        	.line	708
   570                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",8
   571                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstringtable.h",0
   572                        	.line	89
   573                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",9
   574                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256fmx.h",0
   575                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   576                        	.line	708
   577                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256fmx.h",5
   578                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fmx_vicky.h",0
   579                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   580                        	.line	708
   581                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fmx_vicky.h",11
   582                        	.line	72
   583                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256fmx.h",6
   584                        	.line	1325
   585                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",13
   586                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxkernel.h",0
   587                        	.line	270
   588                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",19
   589                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",0
   590                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
   591                        	.line	134
   592                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",5
   593                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   594                        	.line	205
   595                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",6
   596                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   597                        	.line	708
   598                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",7
   599                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256fmx.h",0
   600                        	.line	1325
   601                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
  Thu Dec  3 2020 22:25                                                Page 13


                    space\FXOSv1\src\fxconsole.h",10
   602                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",0
   603                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   604                        	.line	205
   605                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",5
   606                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
   607                        	.line	134
   608                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",6
   609                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   610                        	.line	708
   611                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",7
   612                        	.stag	_fx_string,64,51
   613                        	.member	size,0,16,8,16
   614                        	.member	pos,16,5,8,16
   615                        	.member	buffer,32,142,8,32
   616                        	.eos
   617                        	.line	71
   618                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",15
   619                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",0
   620                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   621                        	.line	25
   622                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",5
   623                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxexec.h",0
   624                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   625                        	.line	708
   626                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxexec.h",5
   627                        	.line	52
   628                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",6
   629                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",0
   630                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   631                        	.line	708
   632                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",5
   633                        	.line	61
   634                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",7
   635                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",0
   636                        	.line	171
   637                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",8
  Thu Dec  3 2020 22:25                                                Page 14


   638                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",0
   639                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   640                        	.line	708
   641                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",5
   642                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   643                        	.line	25
   644                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",6
   645                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",0
   646                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   647                        	.line	25
   648                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",5
   649                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc_cfg.h",0
   650                        	.line	199
   651                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",6
   652                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc.h",0
   653                        	.line	24
   654                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",7
   655                        	.stag	_fx_memory_map,2072,52
   656                        	.member	availableMemory,0,18,8,32
   657                        	.member	valid_segments,32,110,8,0,255
   658                        	.eos
   659                        	.line	39
   660                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",7
   661                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",0
   662                        	.line	743
   663                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",8
   664                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxgui.h",0
   665                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxfont.h",0
   666                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   667                        	.line	708
   668                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxfont.h",6
   669                        	.line	64
   670                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxgui.h",4
   671                        	.stag	_click_detected,64,53
   672                        	.member	window,0,138,8,32,28
   673                        	.member	handler,32,641,8,32
   674                        	.eos
   675                        	.stag	_current_palette_map,400,54
  Thu Dec  3 2020 22:25                                                Page 15


   676                        	.member	CUR_DESKTOP,0,5,8,16
   677                        	.member	CUR_BACKGROUND,16,5,8,16
   678                        	.member	CUR_FONT,32,5,8,16
   679                        	.member	CUR_SELECTED_FONT,48,5,8,16
   680                        	.member	CUR_HIGHLIGHT_COLOR,64,5,8,16
   681                        	.member	CUR_WINDOWFRAME,80,5,8,16
   682                        	.member	CUR_WINDOWBORDER,96,5,8,16
   683                        	.member	CUR_WINDOWSHADOW,112,5,8,16
   684                        	.member	CUR_MENU,128,5,8,16
   685                        	.member	CUR_GADGET,144,5,8,16
   686                        	.member	CUR_COLOR,160,101,8,0,15
   687                        	.eos
   688                        	.line	264
   689                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",9
   690                        	.stag	_childMessage_t,64,55
   691                        	.member	msgType,0,16,8,16
   692                        	.member	msgData,16,129,8,32
   693                        	.member	dataSize,48,16,8,16
   694                        	.eos
   695                        	.line	362
   696                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",9
   697                        	.stag	_fx_main_loopvars,16,56
   698                        	.member	dummy,0,5,8,16
   699                        	.eos
   700                        	.stag	_fxMouseMessageData,64,57
   701                        	.member	button1,0,14,8,8
   702                        	.member	button2,8,14,8,8
   703                        	.member	button3,16,14,8,8
   704                        	.member	button4,24,14,8,8
   705                        	.member	x,32,16,8,16
   706                        	.member	y,48,16,8,16
   707                        	.eos
   708                        	.stag	_fx_eventProcess,64,58
   709                        	.member	process,0,138,8,32,18
   710                        	.member	eventProc,32,641,8,32
   711                        	.eos
   712                        	.stag	_mouse_msg_state,184,59
   713                        	.member	lastEvent,0,18,8,32
   714                        	.member	buttonLeftDown,32,14,8,8
   715                        	.member	lastLeftDown,40,18,8,32
   716                        	.member	buttonRightDown,72,14,8,8
   717                        	.member	lastRightDown,80,18,8,32
   718                        	.member	buttonMiddleDown,112,14,8,8
   719                        	.member	lastMiddleDown,120,18,8,32
   720                        	.member	lastX,152,16,8,16
   721                        	.member	lastY,168,16,8,16
   722                        	.eos
   723                        	.line	743
   724                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",16
   725                        	.stag	_fx_spinner_ctx,48,60
   726                        	.member	index,0,5,8,16
   727                        	.member	spinner,16,142,8,32
   728                        	.eos
   729                        	.stag	_fx_console_ctx,1144,61
   730                        	.member	lineBufferIndex,0,5,8,16
  Thu Dec  3 2020 22:25                                                Page 16


   731                        	.member	lineBuffer,16,110,8,0,128
   732                        	.member	isShifted,1040,14,8,8
   733                        	.member	userData,1048,129,8,32
   734                        	.member	screenBuffer,1080,129,8,32
   735                        	.member	Reserved1,1112,129,8,32
   736                        	.eos
   737                        	.stag	_token,64,62
   738                        	.member	type,0,5,8,16
   739                        	.member	depth,16,16,8,16
   740                        	.member	text,32,142,8,32
   741                        	.eos
   742                        	.stag	_command_args,64,63
   743                        	.member	proc,0,656,8,32
   744                        	.member	tokens,32,138,8,32,3
   745                        	.eos
   746                        	.line	171
   747                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",20
   748                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",0
   749                        	.line	71
   750                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",21
   751                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",0
   752                        	.line	61
   753                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",22
   754                        	.line	25
   755                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxkernel.h",5
   756                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",0
   757                        	.line	61
   758                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxkernel.h",6
   759                        	.stag	_fx_zero_page,448,64
   760                        	.member	fxos_mouse_byte_0,0,14,8,8
   761                        	.member	fxos_mouse_byte_1,8,14,8,8
   762                        	.member	fxos_mouse_byte_2,16,14,8,8
   763                        	.member	fxos_mouse_byte_t,24,14,8,8
   764                        	.member	fxos_mouse_byte_x_l,32,14,8,8
   765                        	.member	fxos_mouse_byte_x_h,40,14,8,8
   766                        	.member	fxos_mouse_byte_y_l,48,14,8,8
   767                        	.member	fxos_mouse_byte_y_h,56,14,8,8
   768                        	.member	fxos_key_byte_0,64,14,8,8
   769                        	.member	fxos_key_byte_1,72,14,8,8
   770                        	.member	fxos_key_byte_2,80,14,8,8
   771                        	.member	fxos_mouse_ctl,88,14,8,8
   772                        	.member	fxos_mouse_index,96,14,8,8
   773                        	.member	fxos_mouse_status,104,14,8,8
   774                        	.member	VersionMajor,112,16,8,16
   775                        	.member	VersionMinor,128,16,8,16
   776                        	.member	VersionRelease,144,16,8,16
   777                        	.member	topMemory,160,18,8,32
   778                        	.member	bottomMemory,192,18,8,32
   779                        	.member	availableMemory,224,18,8,32
   780                        	.member	availableMemoryK,256,18,8,32
  Thu Dec  3 2020 22:25                                                Page 17


   781                        	.member	availableHeapMemory,288,18,8,32
   782                        	.member	availableHeapMemoryK,320,18,8,32
   783                        	.member	kernelFunctionCallId,352,16,8,16
   784                        	.member	kernelFunctionCallBank,368,14,8,8
   785                        	.member	kernelFunctionCallReserved,376,14,8,8
   786                        	.member	kernelFunctionCallParameter,384,129,8,32
   787                        	.member	kernelFunctionCallReturn,416,129,8,32
   788                        	.eos
   789                        	.stag	_fx_environment,96,65
   790                        	.member	variables,0,142,8,32
   791                        	.member	reserved1,32,5,8,16
   792                        	.member	reserved2,48,5,8,16
   793                        	.member	reserved3,64,5,8,16
   794                        	.member	reserved4,80,5,8,16
   795                        	.eos
   796                        	.stag	_debug_byte_bits,8,66
   797                        	.member	bit7,0,14,17,1
   798                        	.member	bit6,1,14,17,1
   799                        	.member	bit5,2,14,17,1
   800                        	.member	bit4,3,14,17,1
   801                        	.member	bit3,4,14,17,1
   802                        	.member	bit2,5,14,17,1
   803                        	.member	bit1,6,14,17,1
   804                        	.member	bit0,7,14,17,1
   805                        	.eos
   806                        	.stag	_fx_device_driver,1416,67
   807                        	.member	name,0,110,8,0,64
   808                        	.member	version,512,110,8,0,64
   809                        	.member	hmajor,1024,110,8,0,16
   810                        	.member	hminor,1152,110,8,0,16
   811                        	.member	type,1280,14,8,8
   812                        	.member	f_driver_load,1288,129,8,32
   813                        	.member	f_driver_read,1320,129,8,32
   814                        	.member	f_driver_write,1352,129,8,32
   815                        	.member	f_driver_unload,1384,129,8,32
   816                        	.eos
   817                        	.stag	_fx_block_device_driver,1448,68
   818                        	.member	name,0,110,8,0,64
   819                        	.member	version,512,110,8,0,64
   820                        	.member	hmajor,1024,110,8,0,16
   821                        	.member	hminor,1152,110,8,0,16
   822                        	.member	type,1280,14,8,8
   823                        	.member	f_driver_load,1288,129,8,32
   824                        	.member	f_driver_read,1320,129,8,32
   825                        	.member	f_driver_write,1352,129,8,32
   826                        	.member	f_driver_unload,1384,129,8,32
   827                        	.member	f_driver_command,1416,129,8,32
   828                        	.eos
   829                        	.line	270
   830                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_integrity.c",1
   831                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_integrity.c",27
   832                        	.line	28
   833                        	code
   834                        	xdef	~~umm_integrity_check
   835                        	func
   836                        	.function	28
  Thu Dec  3 2020 22:25                                                Page 18


   837                        ~~umm_integrity_check:
   838                        	longa	on
   839                        	longi	on
   840 00:0000: 3B           	tsc
   841 00:0001: 38           	sec
   842 00:0002: E9 16 00     	sbc	#L2
   843 00:0005: 1B           	tcs
   844 00:0006: 0B           	phd
   845 00:0007: 5B           	tcd
   846                        	.block	28
   847             00000000   ok_1	set	0
   848             00000002   prev_1	set	2
   849             00000006   cur_1	set	6
   850                        	.sym	ok,0,5,1,16
   851                        	.sym	prev,2,18,1,32
   852                        	.sym	cur,6,18,1,32
   853 00:0008: A9 01 00     	lda	#$1
   854 00:000B: 85 0D        	sta	<L3+ok_1
   855                        	.line	35
   856 00:000D: AD xx xx     	lda	|~~umm_heap
   857 00:0010: 0D xx xx     	ora	|~~umm_heap+2
   858 00:0013: F0 03        	beq	L5
   859 00:0015: 82 04 00     	brl	L10001
   860                        L5:
   861                        	.line	36
   862                        	.line	37
   863 00:0018: 22 xx xx xx  	jsl	~~umm_init
   864                        	.line	38
   865                        L10001:
   866                        	.line	41
   867 00:001C: 64 0F        	stz	<L3+prev_1
   868 00:001E: 64 11        	stz	<L3+prev_1+2
   869                        	.line	42
   870                        L10002:
   871                        	.line	43
   872                        	.line	44
   873 00:0020: A5 0F        	lda	<L3+prev_1
   874 00:0022: 85 01        	sta	<R0
   875 00:0024: A5 11        	lda	<L3+prev_1+2
   876 00:0026: 85 03        	sta	<R0+2
   877 00:0028: 06 01        	asl	<R0
   878 00:002A: 26 03        	rol	<R0+2
   879 00:002C: 06 01        	asl	<R0
   880 00:002E: 26 03        	rol	<R0+2
   881 00:0030: 06 01        	asl	<R0
   882 00:0032: 26 03        	rol	<R0+2
   883 00:0034: 06 01        	asl	<R0
   884 00:0036: 26 03        	rol	<R0+2
   885 00:0038: 18           	clc
   886 00:0039: A9 08 00     	lda	#$8
   887 00:003C: 6D xx xx     	adc	|~~umm_heap
   888 00:003F: 85 05        	sta	<R1
   889 00:0041: A9 00 00     	lda	#$0
   890 00:0044: 6D xx xx     	adc	|~~umm_heap+2
   891 00:0047: 85 07        	sta	<R1+2
   892 00:0049: 18           	clc
   893 00:004A: A5 05        	lda	<R1
   894 00:004C: 65 01        	adc	<R0
  Thu Dec  3 2020 22:25                                                Page 19


   895 00:004E: 85 09        	sta	<R2
   896 00:0050: A5 07        	lda	<R1+2
   897 00:0052: 65 03        	adc	<R0+2
   898 00:0054: 85 0B        	sta	<R2+2
   899 00:0056: A7 09        	lda	[<R2]
   900 00:0058: 85 13        	sta	<L3+cur_1
   901 00:005A: A0 02 00     	ldy	#$2
   902 00:005D: B7 09        	lda	[<R2],Y
   903 00:005F: 85 15        	sta	<L3+cur_1+2
   904                        	.line	47
   905 00:0061: A5 13        	lda	<L3+cur_1
   906 00:0063: CD xx xx     	cmp	|~~umm_numblocks
   907 00:0066: A5 15        	lda	<L3+cur_1+2
   908 00:0068: ED xx xx     	sbc	|~~umm_numblocks+2
   909 00:006B: B0 03        	bcs	L6
   910 00:006D: 82 13 00     	brl	L10004
   911                        L6:
   912                        	.line	48
   913                        	.line	52
   914 00:0070: D4 15        	pei	<L3+cur_1+2
   915 00:0072: D4 13        	pei	<L3+cur_1
   916 00:0074: F4 xx xx     	pea	#^L1
   917 00:0077: F4 xx xx     	pea	#<L1
   918 00:007A: 22 xx xx xx  	jsl	~~k_debug_long
   919                        	.line	54
   920 00:007E: 64 0D        	stz	<L3+ok_1
   921                        	.line	55
   922 00:0080: 82 63 03     	brl	L10005
   923                        	.line	56
   924                        L10004:
   925                        	.line	57
   926 00:0083: A5 13        	lda	<L3+cur_1
   927 00:0085: 05 15        	ora	<L3+cur_1+2
   928 00:0087: F0 03        	beq	L7
   929 00:0089: 82 03 00     	brl	L10006
   930                        L7:
   931                        	.line	58
   932                        	.line	60
   933 00:008C: 82 A3 00     	brl	L10003
   934                        	.line	61
   935                        L10006:
   936                        	.line	64
   937 00:008F: A5 13        	lda	<L3+cur_1
   938 00:0091: 85 01        	sta	<R0
   939 00:0093: A5 15        	lda	<L3+cur_1+2
   940 00:0095: 85 03        	sta	<R0+2
   941 00:0097: 06 01        	asl	<R0
   942 00:0099: 26 03        	rol	<R0+2
   943 00:009B: 06 01        	asl	<R0
   944 00:009D: 26 03        	rol	<R0+2
   945 00:009F: 06 01        	asl	<R0
   946 00:00A1: 26 03        	rol	<R0+2
   947 00:00A3: 06 01        	asl	<R0
   948 00:00A5: 26 03        	rol	<R0+2
   949 00:00A7: 18           	clc
   950 00:00A8: A9 0C 00     	lda	#$c
   951 00:00AB: 6D xx xx     	adc	|~~umm_heap
   952 00:00AE: 85 05        	sta	<R1
  Thu Dec  3 2020 22:25                                                Page 20


   953 00:00B0: A9 00 00     	lda	#$0
   954 00:00B3: 6D xx xx     	adc	|~~umm_heap+2
   955 00:00B6: 85 07        	sta	<R1+2
   956 00:00B8: 18           	clc
   957 00:00B9: A5 05        	lda	<R1
   958 00:00BB: 65 01        	adc	<R0
   959 00:00BD: 85 09        	sta	<R2
   960 00:00BF: A5 07        	lda	<R1+2
   961 00:00C1: 65 03        	adc	<R0+2
   962 00:00C3: 85 0B        	sta	<R2+2
   963 00:00C5: A7 09        	lda	[<R2]
   964 00:00C7: C5 0F        	cmp	<L3+prev_1
   965 00:00C9: D0 07        	bne	L8
   966 00:00CB: A0 02 00     	ldy	#$2
   967 00:00CE: B7 09        	lda	[<R2],Y
   968 00:00D0: C5 11        	cmp	<L3+prev_1+2
   969                        L8:
   970 00:00D2: D0 03        	bne	L9
   971 00:00D4: 82 13 00     	brl	L10007
   972                        L9:
   973                        	.line	65
   974                        	.line	69
   975 00:00D7: D4 15        	pei	<L3+cur_1+2
   976 00:00D9: D4 13        	pei	<L3+cur_1
   977 00:00DB: F4 xx xx     	pea	#^L1+48
   978 00:00DE: F4 xx xx     	pea	#<L1+48
   979 00:00E1: 22 xx xx xx  	jsl	~~k_debug_long
   980                        	.line	70
   981 00:00E5: 64 0D        	stz	<L3+ok_1
   982                        	.line	71
   983 00:00E7: 82 FC 02     	brl	L10005
   984                        	.line	72
   985                        L10007:
   986                        	.line	74
   987 00:00EA: A5 13        	lda	<L3+cur_1
   988 00:00EC: 85 01        	sta	<R0
   989 00:00EE: A5 15        	lda	<L3+cur_1+2
   990 00:00F0: 85 03        	sta	<R0+2
   991 00:00F2: 06 01        	asl	<R0
   992 00:00F4: 26 03        	rol	<R0+2
   993 00:00F6: 06 01        	asl	<R0
   994 00:00F8: 26 03        	rol	<R0+2
   995 00:00FA: 06 01        	asl	<R0
   996 00:00FC: 26 03        	rol	<R0+2
   997 00:00FE: 06 01        	asl	<R0
   998 00:0100: 26 03        	rol	<R0+2
   999 00:0102: 18           	clc
  1000 00:0103: A9 04 00     	lda	#$4
  1001 00:0106: 65 01        	adc	<R0
  1002 00:0108: 85 05        	sta	<R1
  1003 00:010A: A9 00 00     	lda	#$0
  1004 00:010D: 65 03        	adc	<R0+2
  1005 00:010F: 85 07        	sta	<R1+2
  1006 00:0111: 18           	clc
  1007 00:0112: AD xx xx     	lda	|~~umm_heap
  1008 00:0115: 65 05        	adc	<R1
  1009 00:0117: 85 01        	sta	<R0
  1010 00:0119: AD xx xx     	lda	|~~umm_heap+2
  Thu Dec  3 2020 22:25                                                Page 21


  1011 00:011C: 65 07        	adc	<R1+2
  1012 00:011E: 85 03        	sta	<R0+2
  1013 00:0120: A7 01        	lda	[<R0]
  1014 00:0122: 09 00 80     	ora	#<$8000
  1015 00:0125: 87 01        	sta	[<R0]
  1016                        	.line	76
  1017 00:0127: A5 13        	lda	<L3+cur_1
  1018 00:0129: 85 0F        	sta	<L3+prev_1
  1019 00:012B: A5 15        	lda	<L3+cur_1+2
  1020 00:012D: 85 11        	sta	<L3+prev_1+2
  1021                        	.line	77
  1022 00:012F: 82 EE FE     	brl	L10002
  1023                        L10003:
  1024                        	.line	80
  1025 00:0132: 64 0F        	stz	<L3+prev_1
  1026 00:0134: 64 11        	stz	<L3+prev_1+2
  1027                        	.line	81
  1028                        L10008:
  1029                        	.line	82
  1030                        	.line	83
  1031 00:0136: A5 0F        	lda	<L3+prev_1
  1032 00:0138: 85 01        	sta	<R0
  1033 00:013A: A5 11        	lda	<L3+prev_1+2
  1034 00:013C: 85 03        	sta	<R0+2
  1035 00:013E: 06 01        	asl	<R0
  1036 00:0140: 26 03        	rol	<R0+2
  1037 00:0142: 06 01        	asl	<R0
  1038 00:0144: 26 03        	rol	<R0+2
  1039 00:0146: 06 01        	asl	<R0
  1040 00:0148: 26 03        	rol	<R0+2
  1041 00:014A: 06 01        	asl	<R0
  1042 00:014C: 26 03        	rol	<R0+2
  1043 00:014E: 18           	clc
  1044 00:014F: AD xx xx     	lda	|~~umm_heap
  1045 00:0152: 65 01        	adc	<R0
  1046 00:0154: 85 05        	sta	<R1
  1047 00:0156: AD xx xx     	lda	|~~umm_heap+2
  1048 00:0159: 65 03        	adc	<R0+2
  1049 00:015B: 85 07        	sta	<R1+2
  1050 00:015D: A7 05        	lda	[<R1]
  1051 00:015F: 29 FF 7F     	and	#<$7fff
  1052 00:0162: 85 13        	sta	<L3+cur_1
  1053 00:0164: 64 15        	stz	<L3+cur_1+2
  1054                        	.line	86
  1055 00:0166: A5 13        	lda	<L3+cur_1
  1056 00:0168: CD xx xx     	cmp	|~~umm_numblocks
  1057 00:016B: A5 15        	lda	<L3+cur_1+2
  1058 00:016D: ED xx xx     	sbc	|~~umm_numblocks+2
  1059 00:0170: B0 03        	bcs	L10
  1060 00:0172: 82 48 00     	brl	L10010
  1061                        L10:
  1062                        	.line	87
  1063                        	.line	91
  1064 00:0175: D4 15        	pei	<L3+cur_1+2
  1065 00:0177: D4 13        	pei	<L3+cur_1
  1066 00:0179: F4 xx xx     	pea	#^L1+95
  1067 00:017C: F4 xx xx     	pea	#<L1+95
  1068 00:017F: 22 xx xx xx  	jsl	~~k_debug_long
  Thu Dec  3 2020 22:25                                                Page 22


  1069                        	.line	92
  1070 00:0183: A5 0F        	lda	<L3+prev_1
  1071 00:0185: 85 01        	sta	<R0
  1072 00:0187: A5 11        	lda	<L3+prev_1+2
  1073 00:0189: 85 03        	sta	<R0+2
  1074 00:018B: 06 01        	asl	<R0
  1075 00:018D: 26 03        	rol	<R0+2
  1076 00:018F: 06 01        	asl	<R0
  1077 00:0191: 26 03        	rol	<R0+2
  1078 00:0193: 06 01        	asl	<R0
  1079 00:0195: 26 03        	rol	<R0+2
  1080 00:0197: 06 01        	asl	<R0
  1081 00:0199: 26 03        	rol	<R0+2
  1082 00:019B: 18           	clc
  1083 00:019C: AD xx xx     	lda	|~~umm_heap
  1084 00:019F: 65 01        	adc	<R0
  1085 00:01A1: 85 05        	sta	<R1
  1086 00:01A3: AD xx xx     	lda	|~~umm_heap+2
  1087 00:01A6: 65 03        	adc	<R0+2
  1088 00:01A8: 85 07        	sta	<R1+2
  1089 00:01AA: D4 07        	pei	<R1+2
  1090 00:01AC: D4 05        	pei	<R1
  1091 00:01AE: F4 xx xx     	pea	#^L1+144
  1092 00:01B1: F4 xx xx     	pea	#<L1+144
  1093 00:01B4: 22 xx xx xx  	jsl	~~k_debug_pointer
  1094                        	.line	93
  1095 00:01B8: 64 0D        	stz	<L3+ok_1
  1096                        	.line	94
  1097 00:01BA: 82 29 02     	brl	L10005
  1098                        	.line	95
  1099                        L10010:
  1100                        	.line	96
  1101 00:01BD: A5 13        	lda	<L3+cur_1
  1102 00:01BF: 05 15        	ora	<L3+cur_1+2
  1103 00:01C1: F0 03        	beq	L11
  1104 00:01C3: 82 03 00     	brl	L10011
  1105                        L11:
  1106                        	.line	97
  1107                        	.line	99
  1108 00:01C6: 82 1D 02     	brl	L10009
  1109                        	.line	100
  1110                        L10011:
  1111                        	.line	103
  1112 00:01C9: A5 13        	lda	<L3+cur_1
  1113 00:01CB: 85 01        	sta	<R0
  1114 00:01CD: A5 15        	lda	<L3+cur_1+2
  1115 00:01CF: 85 03        	sta	<R0+2
  1116 00:01D1: 06 01        	asl	<R0
  1117 00:01D3: 26 03        	rol	<R0+2
  1118 00:01D5: 06 01        	asl	<R0
  1119 00:01D7: 26 03        	rol	<R0+2
  1120 00:01D9: 06 01        	asl	<R0
  1121 00:01DB: 26 03        	rol	<R0+2
  1122 00:01DD: 06 01        	asl	<R0
  1123 00:01DF: 26 03        	rol	<R0+2
  1124 00:01E1: 18           	clc
  1125 00:01E2: A9 04 00     	lda	#$4
  1126 00:01E5: 6D xx xx     	adc	|~~umm_heap
  Thu Dec  3 2020 22:25                                                Page 23


  1127 00:01E8: 85 05        	sta	<R1
  1128 00:01EA: A9 00 00     	lda	#$0
  1129 00:01ED: 6D xx xx     	adc	|~~umm_heap+2
  1130 00:01F0: 85 07        	sta	<R1+2
  1131 00:01F2: 18           	clc
  1132 00:01F3: A5 05        	lda	<R1
  1133 00:01F5: 65 01        	adc	<R0
  1134 00:01F7: 85 09        	sta	<R2
  1135 00:01F9: A5 07        	lda	<R1+2
  1136 00:01FB: 65 03        	adc	<R0+2
  1137 00:01FD: 85 0B        	sta	<R2+2
  1138 00:01FF: A7 09        	lda	[<R2]
  1139 00:0201: 29 00 80     	and	#<$8000
  1140 00:0204: 85 01        	sta	<R0
  1141 00:0206: 64 03        	stz	<R0+2
  1142 00:0208: A5 13        	lda	<L3+cur_1
  1143 00:020A: 85 05        	sta	<R1
  1144 00:020C: A5 15        	lda	<L3+cur_1+2
  1145 00:020E: 85 07        	sta	<R1+2
  1146 00:0210: 06 05        	asl	<R1
  1147 00:0212: 26 07        	rol	<R1+2
  1148 00:0214: 06 05        	asl	<R1
  1149 00:0216: 26 07        	rol	<R1+2
  1150 00:0218: 06 05        	asl	<R1
  1151 00:021A: 26 07        	rol	<R1+2
  1152 00:021C: 06 05        	asl	<R1
  1153 00:021E: 26 07        	rol	<R1+2
  1154 00:0220: 18           	clc
  1155 00:0221: AD xx xx     	lda	|~~umm_heap
  1156 00:0224: 65 05        	adc	<R1
  1157 00:0226: 85 09        	sta	<R2
  1158 00:0228: AD xx xx     	lda	|~~umm_heap+2
  1159 00:022B: 65 07        	adc	<R1+2
  1160 00:022D: 85 0B        	sta	<R2+2
  1161 00:022F: A7 09        	lda	[<R2]
  1162 00:0231: 29 00 80     	and	#<$8000
  1163 00:0234: 85 05        	sta	<R1
  1164 00:0236: 64 07        	stz	<R1+2
  1165 00:0238: A5 05        	lda	<R1
  1166 00:023A: C5 01        	cmp	<R0
  1167 00:023C: D0 04        	bne	L12
  1168 00:023E: A5 07        	lda	<R1+2
  1169 00:0240: C5 03        	cmp	<R0+2
  1170                        L12:
  1171 00:0242: D0 03        	bne	L13
  1172 00:0244: 82 3A 00     	brl	L10012
  1173                        L13:
  1174                        	.line	105
  1175                        	.line	111
  1176 00:0247: A5 13        	lda	<L3+cur_1
  1177 00:0249: 85 01        	sta	<R0
  1178 00:024B: A5 15        	lda	<L3+cur_1+2
  1179 00:024D: 85 03        	sta	<R0+2
  1180 00:024F: 06 01        	asl	<R0
  1181 00:0251: 26 03        	rol	<R0+2
  1182 00:0253: 06 01        	asl	<R0
  1183 00:0255: 26 03        	rol	<R0+2
  1184 00:0257: 06 01        	asl	<R0
  Thu Dec  3 2020 22:25                                                Page 24


  1185 00:0259: 26 03        	rol	<R0+2
  1186 00:025B: 06 01        	asl	<R0
  1187 00:025D: 26 03        	rol	<R0+2
  1188 00:025F: 18           	clc
  1189 00:0260: AD xx xx     	lda	|~~umm_heap
  1190 00:0263: 65 01        	adc	<R0
  1191 00:0265: 85 05        	sta	<R1
  1192 00:0267: AD xx xx     	lda	|~~umm_heap+2
  1193 00:026A: 65 03        	adc	<R0+2
  1194 00:026C: 85 07        	sta	<R1+2
  1195 00:026E: D4 07        	pei	<R1+2
  1196 00:0270: D4 05        	pei	<R1
  1197 00:0272: F4 xx xx     	pea	#^L1+193
  1198 00:0275: F4 xx xx     	pea	#<L1+193
  1199 00:0278: 22 xx xx xx  	jsl	~~k_debug_pointer
  1200                        	.line	112
  1201 00:027C: 64 0D        	stz	<L3+ok_1
  1202                        	.line	113
  1203 00:027E: 82 65 01     	brl	L10005
  1204                        	.line	114
  1205                        L10012:
  1206                        	.line	117
  1207 00:0281: A5 0F        	lda	<L3+prev_1
  1208 00:0283: C5 13        	cmp	<L3+cur_1
  1209 00:0285: A5 11        	lda	<L3+prev_1+2
  1210 00:0287: E5 15        	sbc	<L3+cur_1+2
  1211 00:0289: B0 03        	bcs	L14
  1212 00:028B: 82 56 00     	brl	L10013
  1213                        L14:
  1214                        	.line	118
  1215                        	.line	122
  1216 00:028E: D4 15        	pei	<L3+cur_1+2
  1217 00:0290: D4 13        	pei	<L3+cur_1
  1218 00:0292: F4 xx xx     	pea	#^L1+236
  1219 00:0295: F4 xx xx     	pea	#<L1+236
  1220 00:0298: 22 xx xx xx  	jsl	~~k_debug_long
  1221                        	.line	123
  1222 00:029C: D4 11        	pei	<L3+prev_1+2
  1223 00:029E: D4 0F        	pei	<L3+prev_1
  1224 00:02A0: F4 xx xx     	pea	#^L1+294
  1225 00:02A3: F4 xx xx     	pea	#<L1+294
  1226 00:02A6: 22 xx xx xx  	jsl	~~k_debug_long
  1227                        	.line	124
  1228 00:02AA: A5 0F        	lda	<L3+prev_1
  1229 00:02AC: 85 01        	sta	<R0
  1230 00:02AE: A5 11        	lda	<L3+prev_1+2
  1231 00:02B0: 85 03        	sta	<R0+2
  1232 00:02B2: 06 01        	asl	<R0
  1233 00:02B4: 26 03        	rol	<R0+2
  1234 00:02B6: 06 01        	asl	<R0
  1235 00:02B8: 26 03        	rol	<R0+2
  1236 00:02BA: 06 01        	asl	<R0
  1237 00:02BC: 26 03        	rol	<R0+2
  1238 00:02BE: 06 01        	asl	<R0
  1239 00:02C0: 26 03        	rol	<R0+2
  1240 00:02C2: 18           	clc
  1241 00:02C3: AD xx xx     	lda	|~~umm_heap
  1242 00:02C6: 65 01        	adc	<R0
  Thu Dec  3 2020 22:25                                                Page 25


  1243 00:02C8: 85 05        	sta	<R1
  1244 00:02CA: AD xx xx     	lda	|~~umm_heap+2
  1245 00:02CD: 65 03        	adc	<R0+2
  1246 00:02CF: 85 07        	sta	<R1+2
  1247 00:02D1: D4 07        	pei	<R1+2
  1248 00:02D3: D4 05        	pei	<R1
  1249 00:02D5: F4 xx xx     	pea	#^L1+352
  1250 00:02D8: F4 xx xx     	pea	#<L1+352
  1251 00:02DB: 22 xx xx xx  	jsl	~~k_debug_pointer
  1252                        	.line	125
  1253 00:02DF: 64 0D        	stz	<L3+ok_1
  1254                        	.line	126
  1255 00:02E1: 82 02 01     	brl	L10005
  1256                        	.line	127
  1257                        L10013:
  1258                        	.line	130
  1259 00:02E4: A5 13        	lda	<L3+cur_1
  1260 00:02E6: 85 01        	sta	<R0
  1261 00:02E8: A5 15        	lda	<L3+cur_1+2
  1262 00:02EA: 85 03        	sta	<R0+2
  1263 00:02EC: 06 01        	asl	<R0
  1264 00:02EE: 26 03        	rol	<R0+2
  1265 00:02F0: 06 01        	asl	<R0
  1266 00:02F2: 26 03        	rol	<R0+2
  1267 00:02F4: 06 01        	asl	<R0
  1268 00:02F6: 26 03        	rol	<R0+2
  1269 00:02F8: 06 01        	asl	<R0
  1270 00:02FA: 26 03        	rol	<R0+2
  1271 00:02FC: 18           	clc
  1272 00:02FD: A9 04 00     	lda	#$4
  1273 00:0300: 65 01        	adc	<R0
  1274 00:0302: 85 05        	sta	<R1
  1275 00:0304: A9 00 00     	lda	#$0
  1276 00:0307: 65 03        	adc	<R0+2
  1277 00:0309: 85 07        	sta	<R1+2
  1278 00:030B: 18           	clc
  1279 00:030C: AD xx xx     	lda	|~~umm_heap
  1280 00:030F: 65 05        	adc	<R1
  1281 00:0311: 85 01        	sta	<R0
  1282 00:0313: AD xx xx     	lda	|~~umm_heap+2
  1283 00:0316: 65 07        	adc	<R1+2
  1284 00:0318: 85 03        	sta	<R0+2
  1285 00:031A: A7 01        	lda	[<R0]
  1286 00:031C: 29 FF 7F     	and	#<$7fff
  1287 00:031F: 87 01        	sta	[<R0]
  1288 00:0321: A9 00 00     	lda	#$0
  1289 00:0324: A0 02 00     	ldy	#$2
  1290 00:0327: 97 01        	sta	[<R0],Y
  1291                        	.line	133
  1292 00:0329: A5 13        	lda	<L3+cur_1
  1293 00:032B: 85 01        	sta	<R0
  1294 00:032D: A5 15        	lda	<L3+cur_1+2
  1295 00:032F: 85 03        	sta	<R0+2
  1296 00:0331: 06 01        	asl	<R0
  1297 00:0333: 26 03        	rol	<R0+2
  1298 00:0335: 06 01        	asl	<R0
  1299 00:0337: 26 03        	rol	<R0+2
  1300 00:0339: 06 01        	asl	<R0
  Thu Dec  3 2020 22:25                                                Page 26


  1301 00:033B: 26 03        	rol	<R0+2
  1302 00:033D: 06 01        	asl	<R0
  1303 00:033F: 26 03        	rol	<R0+2
  1304 00:0341: 18           	clc
  1305 00:0342: A9 04 00     	lda	#$4
  1306 00:0345: 6D xx xx     	adc	|~~umm_heap
  1307 00:0348: 85 05        	sta	<R1
  1308 00:034A: A9 00 00     	lda	#$0
  1309 00:034D: 6D xx xx     	adc	|~~umm_heap+2
  1310 00:0350: 85 07        	sta	<R1+2
  1311 00:0352: 18           	clc
  1312 00:0353: A5 05        	lda	<R1
  1313 00:0355: 65 01        	adc	<R0
  1314 00:0357: 85 09        	sta	<R2
  1315 00:0359: A5 07        	lda	<R1+2
  1316 00:035B: 65 03        	adc	<R0+2
  1317 00:035D: 85 0B        	sta	<R2+2
  1318 00:035F: A7 09        	lda	[<R2]
  1319 00:0361: C5 0F        	cmp	<L3+prev_1
  1320 00:0363: D0 07        	bne	L15
  1321 00:0365: A0 02 00     	ldy	#$2
  1322 00:0368: B7 09        	lda	[<R2],Y
  1323 00:036A: C5 11        	cmp	<L3+prev_1+2
  1324                        L15:
  1325 00:036C: D0 03        	bne	L16
  1326 00:036E: 82 6A 00     	brl	L10014
  1327                        L16:
  1328                        	.line	134
  1329                        	.line	138
  1330 00:0371: D4 11        	pei	<L3+prev_1+2
  1331 00:0373: D4 0F        	pei	<L3+prev_1
  1332 00:0375: F4 xx xx     	pea	#^L1+410
  1333 00:0378: F4 xx xx     	pea	#<L1+410
  1334 00:037B: 22 xx xx xx  	jsl	~~k_debug_long
  1335                        	.line	139
  1336 00:037F: D4 15        	pei	<L3+cur_1+2
  1337 00:0381: D4 13        	pei	<L3+cur_1
  1338 00:0383: F4 xx xx     	pea	#^L1+464
  1339 00:0386: F4 xx xx     	pea	#<L1+464
  1340 00:0389: 22 xx xx xx  	jsl	~~k_debug_long
  1341                        	.line	140
  1342 00:038D: A5 13        	lda	<L3+cur_1
  1343 00:038F: 85 01        	sta	<R0
  1344 00:0391: A5 15        	lda	<L3+cur_1+2
  1345 00:0393: 85 03        	sta	<R0+2
  1346 00:0395: 06 01        	asl	<R0
  1347 00:0397: 26 03        	rol	<R0+2
  1348 00:0399: 06 01        	asl	<R0
  1349 00:039B: 26 03        	rol	<R0+2
  1350 00:039D: 06 01        	asl	<R0
  1351 00:039F: 26 03        	rol	<R0+2
  1352 00:03A1: 06 01        	asl	<R0
  1353 00:03A3: 26 03        	rol	<R0+2
  1354 00:03A5: 18           	clc
  1355 00:03A6: A9 04 00     	lda	#$4
  1356 00:03A9: 6D xx xx     	adc	|~~umm_heap
  1357 00:03AC: 85 05        	sta	<R1
  1358 00:03AE: A9 00 00     	lda	#$0
  Thu Dec  3 2020 22:25                                                Page 27


  1359 00:03B1: 6D xx xx     	adc	|~~umm_heap+2
  1360 00:03B4: 85 07        	sta	<R1+2
  1361 00:03B6: 18           	clc
  1362 00:03B7: A5 05        	lda	<R1
  1363 00:03B9: 65 01        	adc	<R0
  1364 00:03BB: 85 09        	sta	<R2
  1365 00:03BD: A5 07        	lda	<R1+2
  1366 00:03BF: 65 03        	adc	<R0+2
  1367 00:03C1: 85 0B        	sta	<R2+2
  1368 00:03C3: A0 02 00     	ldy	#$2
  1369 00:03C6: B7 09        	lda	[<R2],Y
  1370 00:03C8: 48           	pha
  1371 00:03C9: A7 09        	lda	[<R2]
  1372 00:03CB: 48           	pha
  1373 00:03CC: F4 xx xx     	pea	#^L1+518
  1374 00:03CF: F4 xx xx     	pea	#<L1+518
  1375 00:03D2: 22 xx xx xx  	jsl	~~k_debug_long
  1376                        	.line	141
  1377 00:03D6: 64 0D        	stz	<L3+ok_1
  1378                        	.line	142
  1379 00:03D8: 82 0B 00     	brl	L10005
  1380                        	.line	143
  1381                        L10014:
  1382                        	.line	145
  1383 00:03DB: A5 13        	lda	<L3+cur_1
  1384 00:03DD: 85 0F        	sta	<L3+prev_1
  1385 00:03DF: A5 15        	lda	<L3+cur_1+2
  1386 00:03E1: 85 11        	sta	<L3+prev_1+2
  1387                        	.line	146
  1388 00:03E3: 82 50 FD     	brl	L10008
  1389                        L10009:
  1390                        	.line	148
  1391                        L10005:
  1392                        	.line	149
  1393 00:03E6: A5 0D        	lda	<L3+ok_1
  1394 00:03E8: F0 03        	beq	L17
  1395 00:03EA: 82 0A 00     	brl	L10015
  1396                        L17:
  1397                        	.line	150
  1398                        	.line	151
  1399 00:03ED: F4 xx xx     	pea	#^L1+572
  1400 00:03F0: F4 xx xx     	pea	#<L1+572
  1401 00:03F3: 22 xx xx xx  	jsl	~~k_debug_string
  1402                        	.line	152
  1403                        L10015:
  1404                        	.line	153
  1405 00:03F7: A5 0D        	lda	<L3+ok_1
  1406                        L18:
  1407 00:03F9: A8           	tay
  1408 00:03FA: 2B           	pld
  1409 00:03FB: 3B           	tsc
  1410 00:03FC: 18           	clc
  1411 00:03FD: 69 16 00     	adc	#L2
  1412 00:0400: 1B           	tcs
  1413 00:0401: 98           	tya
  1414 00:0402: 6B           	rtl
  1415                        	.line	154
  1416                        	.endblock	154
  Thu Dec  3 2020 22:25                                                Page 28


  1417             00000016   L2	equ	22
  1418             0000000D   L3	equ	13
  1419                        	ends
  1420                        	efunc
  1421                        	.endfunc	154,13,22
  1422                        	.line	154
  1423                        	data
  1424                        L1:
  1425 00:0008: 68 65 61 70  	db	$68,$65,$61,$70,$20,$69,$6E,$74,$65,$67,
                    $72,$69,$74,$79,$20
       00:000C: 20 69 6E 74 
       00:0010: 65 67 72 69 
       00:0014: 74 79 20 
  1426 00:0017: 62 72 6F 6B  	db	$62,$72,$6F,$6B,$65,$6E,$3A,$20,$74,$6F,
                    $6F,$20,$6C,$61,$72
       00:001B: 65 6E 3A 20 
       00:001F: 74 6F 6F 20 
       00:0023: 6C 61 72 
  1427 00:0026: 67 65 20 6E  	db	$67,$65,$20,$6E,$65,$78,$74,$20,$66,$72,
                    $65,$65,$20,$6E,$75
       00:002A: 65 78 74 20 
       00:002E: 66 72 65 65 
       00:0032: 20 6E 75 
  1428 00:0035: 6D 3A 00 68  	db	$6D,$3A,$00,$68,$65,$61,$70,$20,$69,$6E,
                    $74,$65,$67,$72,$69
       00:0039: 65 61 70 20 
       00:003D: 69 6E 74 65 
       00:0041: 67 72 69 
  1429 00:0044: 74 79 20 62  	db	$74,$79,$20,$62,$72,$6F,$6B,$65,$6E,$3A,
                    $20,$66,$72,$65,$65
       00:0048: 72 6F 6B 65 
       00:004C: 6E 3A 20 66 
       00:0050: 72 65 65 
  1430 00:0053: 20 6C 69 6E  	db	$20,$6C,$69,$6E,$6B,$73,$20,$64,$6F,$6E,
                    $27,$74,$20,$6D,$61
       00:0057: 6B 73 20 64 
       00:005B: 6F 6E 27 74 
       00:005F: 20 6D 61 
  1431 00:0062: 74 63 68 3A  	db	$74,$63,$68,$3A,$00,$68,$65,$61,$70,$20,
                    $69,$6E,$74,$65,$67
       00:0066: 00 68 65 61 
       00:006A: 70 20 69 6E 
       00:006E: 74 65 67 
  1432 00:0071: 72 69 74 79  	db	$72,$69,$74,$79,$20,$62,$72,$6F,$6B,$65,
                    $6E,$3A,$20,$74,$6F
       00:0075: 20 62 72 6F 
       00:0079: 6B 65 6E 3A 
       00:007D: 20 74 6F 
  1433 00:0080: 6F 20 6C 61  	db	$6F,$20,$6C,$61,$72,$67,$65,$20,$6E,$65,
                    $78,$74,$20,$62,$6C
       00:0084: 72 67 65 20 
       00:0088: 6E 65 78 74 
       00:008C: 20 62 6C 
  1434 00:008F: 6F 63 6B 20  	db	$6F,$63,$6B,$20,$6E,$75,$6D,$3A,$00,$20,
                    $20,$20,$20,$20,$20
       00:0093: 6E 75 6D 3A 
       00:0097: 00 20 20 20 
       00:009B: 20 20 20 
  Thu Dec  3 2020 22:25                                                Page 29


  1435 00:009E: 20 20 20 20  	db	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
                    $20,$20,$20,$20,$20
       00:00A2: 20 20 20 20 
       00:00A6: 20 20 20 20 
       00:00AA: 20 20 20 
  1436 00:00AD: 20 20 20 20  	db	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
                    $20,$20,$20,$20,$20
       00:00B1: 20 20 20 20 
       00:00B5: 20 20 20 20 
       00:00B9: 20 20 20 
  1437 00:00BC: 20 20 20 20  	db	$20,$20,$20,$20,$20,$20,$20,$41,$44,$44,
                    $52,$3A,$00,$68,$65
       00:00C0: 20 20 20 41 
       00:00C4: 44 44 52 3A 
       00:00C8: 00 68 65 
  1438 00:00CB: 61 70 20 69  	db	$61,$70,$20,$69,$6E,$74,$65,$67,$72,$69,
                    $74,$79,$20,$62,$72
       00:00CF: 6E 74 65 67 
       00:00D3: 72 69 74 79 
       00:00D7: 20 62 72 
  1439 00:00DA: 6F 6B 65 6E  	db	$6F,$6B,$65,$6E,$3A,$20,$6D,$61,$73,$6B,
                    $20,$77,$72,$6F,$6E
       00:00DE: 3A 20 6D 61 
       00:00E2: 73 6B 20 77 
       00:00E6: 72 6F 6E 
  1440 00:00E9: 67 20 61 74  	db	$67,$20,$61,$74,$20,$61,$64,$64,$72,$3A,
                    $00,$68,$65,$61,$70
       00:00ED: 20 61 64 64 
       00:00F1: 72 3A 00 68 
       00:00F5: 65 61 70 
  1441 00:00F8: 20 69 6E 74  	db	$20,$69,$6E,$74,$65,$67,$72,$69,$74,$79,
                    $20,$62,$72,$6F,$6B
       00:00FC: 65 67 72 69 
       00:0100: 74 79 20 62 
       00:0104: 72 6F 6B 
  1442 00:0107: 65 6E 3A 6E  	db	$65,$6E,$3A,$6E,$65,$78,$74,$20,$62,$6C,
                    $6F,$63,$6B,$20,$69
       00:010B: 65 78 74 20 
       00:010F: 62 6C 6F 63 
       00:0113: 6B 20 69 
  1443 00:0116: 73 20 62 65  	db	$73,$20,$62,$65,$66,$6F,$72,$65,$20,$70,
                    $72,$65,$76,$20,$74
       00:011A: 66 6F 72 65 
       00:011E: 20 70 72 65 
       00:0122: 76 20 74 
  1444 00:0125: 68 69 73 20  	db	$68,$69,$73,$20,$6F,$6E,$65,$3A,$00,$20,
                    $20,$20,$20,$20,$20
       00:0129: 6F 6E 65 3A 
       00:012D: 00 20 20 20 
       00:0131: 20 20 20 
  1445 00:0134: 20 20 20 20  	db	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
                    $20,$20,$20,$20,$20
       00:0138: 20 20 20 20 
       00:013C: 20 20 20 20 
       00:0140: 20 20 20 
  1446 00:0143: 20 20 20 20  	db	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
                    $20,$20,$20,$20,$20
       00:0147: 20 20 20 20 
  Thu Dec  3 2020 22:25                                                Page 30


       00:014B: 20 20 20 20 
       00:014F: 20 20 20 
  1447 00:0152: 20 20 20 20  	db	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
                    $20,$20,$20,$20,$20
       00:0156: 20 20 20 20 
       00:015A: 20 20 20 20 
       00:015E: 20 20 20 
  1448 00:0161: 20 50 52 45  	db	$20,$50,$52,$45,$56,$3A,$00,$20,$20,$20,
                    $20,$20,$20,$20,$20
       00:0165: 56 3A 00 20 
       00:0169: 20 20 20 20 
       00:016D: 20 20 20 
  1449 00:0170: 20 20 20 20  	db	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
                    $20,$20,$20,$20,$20
       00:0174: 20 20 20 20 
       00:0178: 20 20 20 20 
       00:017C: 20 20 20 
  1450 00:017F: 20 20 20 20  	db	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
                    $20,$20,$20,$20,$20
       00:0183: 20 20 20 20 
       00:0187: 20 20 20 20 
       00:018B: 20 20 20 
  1451 00:018E: 20 20 20 20  	db	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
                    $20,$20,$20,$20,$41
       00:0192: 20 20 20 20 
       00:0196: 20 20 20 20 
       00:019A: 20 20 41 
  1452 00:019D: 44 44 52 3A  	db	$44,$44,$52,$3A,$00,$68,$65,$61,$70,$20,
                    $69,$6E,$74,$65,$67
       00:01A1: 00 68 65 61 
       00:01A5: 70 20 69 6E 
       00:01A9: 74 65 67 
  1453 00:01AC: 72 69 74 79  	db	$72,$69,$74,$79,$20,$62,$72,$6F,$6B,$65,
                    $6E,$3A,$20,$62,$6C
       00:01B0: 20 62 72 6F 
       00:01B4: 6B 65 6E 3A 
       00:01B8: 20 62 6C 
  1454 00:01BB: 6F 63 6B 20  	db	$6F,$63,$6B,$20,$6C,$69,$6E,$6B,$73,$20,
                    $64,$6F,$6E,$27,$74
       00:01BF: 6C 69 6E 6B 
       00:01C3: 73 20 64 6F 
       00:01C7: 6E 27 74 
  1455 00:01CA: 20 6D 61 74  	db	$20,$6D,$61,$74,$63,$68,$20,$70,$72,$65,
                    $76,$3A,$20,$00,$20
       00:01CE: 63 68 20 70 
       00:01D2: 72 65 76 3A 
       00:01D6: 20 00 20 
  1456 00:01D9: 20 20 20 20  	db	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
                    $20,$20,$20,$20,$20
       00:01DD: 20 20 20 20 
       00:01E1: 20 20 20 20 
       00:01E5: 20 20 20 
  1457 00:01E8: 20 20 20 20  	db	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
                    $20,$20,$20,$20,$20
       00:01EC: 20 20 20 20 
       00:01F0: 20 20 20 20 
       00:01F4: 20 20 20 
  1458 00:01F7: 20 20 20 20  	db	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
  Thu Dec  3 2020 22:25                                                Page 31


                    $20,$20,$20,$20,$20
       00:01FB: 20 20 20 20 
       00:01FF: 20 20 20 20 
       00:0203: 20 20 20 
  1459 00:0206: 20 20 63 75  	db	$20,$20,$63,$75,$72,$3A,$20,$00,$20,$20,
                    $20,$20,$20,$20,$20
       00:020A: 72 3A 20 00 
       00:020E: 20 20 20 20 
       00:0212: 20 20 20 
  1460 00:0215: 20 20 20 20  	db	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
                    $20,$20,$20,$20,$20
       00:0219: 20 20 20 20 
       00:021D: 20 20 20 20 
       00:0221: 20 20 20 
  1461 00:0224: 20 20 20 20  	db	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
                    $20,$20,$20,$20,$55
       00:0228: 20 20 20 20 
       00:022C: 20 20 20 20 
       00:0230: 20 20 55 
  1462 00:0233: 4D 4D 5F 50  	db	$4D,$4D,$5F,$50,$42,$4C,$4F,$43,$4B,$28,
                    $63,$75,$72,$29,$3A
       00:0237: 42 4C 4F 43 
       00:023B: 4B 28 63 75 
       00:023F: 72 29 3A 
  1463 00:0242: 20 00 48 65  	db	$20,$00,$48,$65,$61,$70,$20,$43,$6F,$72,
                    $72,$75,$70,$74,$69
       00:0246: 61 70 20 43 
       00:024A: 6F 72 72 75 
       00:024E: 70 74 69 
  1464 00:0251: 6F 6E 21 0D  	db	$6F,$6E,$21,$0D,$0A,$00
       00:0255: 0A 00 
  1465 00:0257:              	ends
  1466                        	.line	158
  1467                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc.c",96
  1468                        ;#include "umm_poison.c"
  1469                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_poison.c",0
  1470                        	.line	9
  1471                        	.line	10
  1472                        	code
  1473                        	func
  1474                        	.function	10
  1475                        ~~poison_size:
  1476                        	longa	on
  1477                        	longi	on
  1478 00:0403: 3B           	tsc
  1479 00:0404: 38           	sec
  1480 00:0405: E9 00 00     	sbc	#L20
  1481 00:0408: 1B           	tcs
  1482 00:0409: 0B           	phd
  1483 00:040A: 5B           	tcd
  1484             00000004   s_0	set	4
  1485                        	.block	10
  1486                        	.sym	s,4,16,6,16
  1487                        	.line	11
  1488 00:040B: A5 04        	lda	<L20+s_0
  1489 00:040D: D0 03        	bne	L24
  Thu Dec  3 2020 22:25                                                Page 32


  1490 00:040F: 82 05 00     	brl	L23
  1491                        L24:
  1492 00:0412: A9 0A 00     	lda	#$a
  1493 00:0415: 80 03        	bra	L25
  1494                        L23:
  1495 00:0417: A9 00 00     	lda	#$0
  1496                        L25:
  1497                        L26:
  1498 00:041A: A8           	tay
  1499 00:041B: A5 02        	lda	<L20+2
  1500 00:041D: 85 04        	sta	<L20+2+2
  1501 00:041F: A5 01        	lda	<L20+1
  1502 00:0421: 85 03        	sta	<L20+1+2
  1503 00:0423: 2B           	pld
  1504 00:0424: 3B           	tsc
  1505 00:0425: 18           	clc
  1506 00:0426: 69 02 00     	adc	#L20+2
  1507 00:0429: 1B           	tcs
  1508 00:042A: 98           	tya
  1509 00:042B: 6B           	rtl
  1510                        	.line	15
  1511                        	.endblock	15
  1512             00000000   L20	equ	0
  1513             00000001   L21	equ	1
  1514                        	ends
  1515                        	efunc
  1516                        	.endfunc	15,1,0
  1517                        	.line	15
  1518                        	.line	20
  1519                        	.line	21
  1520                        	code
  1521                        	func
  1522                        	.function	21
  1523                        ~~dump_mem:
  1524                        	longa	on
  1525                        	longi	on
  1526 00:042C: 3B           	tsc
  1527 00:042D: 38           	sec
  1528 00:042E: E9 04 00     	sbc	#L27
  1529 00:0431: 1B           	tcs
  1530 00:0432: 0B           	phd
  1531 00:0433: 5B           	tcd
  1532             00000004   ptr_0	set	4
  1533             00000008   len_0	set	8
  1534                        	.block	21
  1535                        	.sym	ptr,4,142,6,32
  1536                        	.sym	len,8,16,6,16
  1537                        	.line	22
  1538                        L10016:
  1539 00:0434: A5 0C        	lda	<L27+len_0
  1540 00:0436: 85 01        	sta	<R0
  1541 00:0438: C6 0C        	dec	<L27+len_0
  1542 00:043A: A5 01        	lda	<R0
  1543 00:043C: D0 03        	bne	L30
  1544 00:043E: 82 03 00     	brl	L10017
  1545                        L30:
  1546                        	.line	23
  1547                        	.line	25
  Thu Dec  3 2020 22:25                                                Page 33


  1548 00:0441: 82 F0 FF     	brl	L10016
  1549                        L10017:
  1550                        	.line	26
  1551                        L31:
  1552 00:0444: A5 06        	lda	<L27+2
  1553 00:0446: 85 0C        	sta	<L27+2+6
  1554 00:0448: A5 05        	lda	<L27+1
  1555 00:044A: 85 0B        	sta	<L27+1+6
  1556 00:044C: 2B           	pld
  1557 00:044D: 3B           	tsc
  1558 00:044E: 18           	clc
  1559 00:044F: 69 0A 00     	adc	#L27+6
  1560 00:0452: 1B           	tcs
  1561 00:0453: 6B           	rtl
  1562                        	.endblock	26
  1563             00000004   L27	equ	4
  1564             00000005   L28	equ	5
  1565                        	ends
  1566                        	efunc
  1567                        	.endfunc	26,5,4
  1568                        	.line	26
  1569                        	.line	31
  1570                        	.line	32
  1571                        	code
  1572                        	func
  1573                        	.function	32
  1574                        ~~put_poison:
  1575                        	longa	on
  1576                        	longi	on
  1577 00:0454: 3B           	tsc
  1578 00:0455: 38           	sec
  1579 00:0456: E9 00 00     	sbc	#L32
  1580 00:0459: 1B           	tcs
  1581 00:045A: 0B           	phd
  1582 00:045B: 5B           	tcd
  1583             00000004   ptr_0	set	4
  1584             00000008   poison_size_0	set	8
  1585                        	.block	32
  1586                        	.sym	ptr,4,142,6,32
  1587                        	.sym	poison_size,8,16,6,16
  1588                        	.line	33
  1589 00:045C: D4 08        	pei	<L32+poison_size_0
  1590 00:045E: F4 A5 00     	pea	#<$a5
  1591 00:0461: D4 06        	pei	<L32+ptr_0+2
  1592 00:0463: D4 04        	pei	<L32+ptr_0
  1593 00:0465: 22 xx xx xx  	jsl	~~memset
  1594                        	.line	34
  1595                        L35:
  1596 00:0469: A5 02        	lda	<L32+2
  1597 00:046B: 85 08        	sta	<L32+2+6
  1598 00:046D: A5 01        	lda	<L32+1
  1599 00:046F: 85 07        	sta	<L32+1+6
  1600 00:0471: 2B           	pld
  1601 00:0472: 3B           	tsc
  1602 00:0473: 18           	clc
  1603 00:0474: 69 06 00     	adc	#L32+6
  1604 00:0477: 1B           	tcs
  1605 00:0478: 6B           	rtl
  Thu Dec  3 2020 22:25                                                Page 34


  1606                        	.endblock	34
  1607             00000000   L32	equ	0
  1608             00000001   L33	equ	1
  1609                        	ends
  1610                        	efunc
  1611                        	.endfunc	34,1,0
  1612                        	.line	34
  1613                        	.line	43
  1614                        	.line	45
  1615                        	code
  1616                        	func
  1617                        	.function	45
  1618                        ~~check_poison:
  1619                        	longa	on
  1620                        	longi	on
  1621 00:0479: 3B           	tsc
  1622 00:047A: 38           	sec
  1623 00:047B: E9 04 00     	sbc	#L36
  1624 00:047E: 1B           	tcs
  1625 00:047F: 0B           	phd
  1626 00:0480: 5B           	tcd
  1627             00000004   ptr_0	set	4
  1628             00000008   poison_size_0	set	8
  1629             0000000A   where_0	set	10
  1630                        	.block	45
  1631             00000000   i_1	set	0
  1632             00000002   ok_1	set	2
  1633                        	.sym	i,0,16,1,16
  1634                        	.sym	ok,2,5,1,16
  1635                        	.sym	ptr,4,142,6,32
  1636                        	.sym	poison_size,8,16,6,16
  1637                        	.sym	where,10,142,6,32
  1638 00:0481: A9 01 00     	lda	#$1
  1639 00:0484: 85 03        	sta	<L37+ok_1
  1640                        	.line	49
  1641 00:0486: 64 01        	stz	<L37+i_1
  1642 00:0488: 82 16 00     	brl	L10021
  1643                        L10020:
  1644                        	.line	50
  1645                        	.line	51
  1646 00:048B: E2 20        	sep	#$20
  1647                        	longa	off
  1648 00:048D: A4 01        	ldy	<L37+i_1
  1649 00:048F: B7 08        	lda	[<L36+ptr_0],Y
  1650 00:0491: C9 A5        	cmp	#<$a5
  1651 00:0493: C2 20        	rep	#$20
  1652                        	longa	on
  1653 00:0495: D0 03        	bne	L39
  1654 00:0497: 82 05 00     	brl	L10022
  1655                        L39:
  1656                        	.line	52
  1657                        	.line	53
  1658 00:049A: 64 03        	stz	<L37+ok_1
  1659                        	.line	54
  1660 00:049C: 82 0B 00     	brl	L10019
  1661                        	.line	55
  1662                        L10022:
  1663                        	.line	56
  Thu Dec  3 2020 22:25                                                Page 35


  1664                        L10018:
  1665 00:049F: E6 01        	inc	<L37+i_1
  1666                        L10021:
  1667 00:04A1: A5 01        	lda	<L37+i_1
  1668 00:04A3: C5 0C        	cmp	<L36+poison_size_0
  1669 00:04A5: B0 03        	bcs	L40
  1670 00:04A7: 82 E1 FF     	brl	L10020
  1671                        L40:
  1672                        L10019:
  1673                        	.line	58
  1674 00:04AA: A5 03        	lda	<L37+ok_1
  1675 00:04AC: F0 03        	beq	L41
  1676 00:04AE: 82 0A 00     	brl	L10023
  1677                        L41:
  1678                        	.line	59
  1679                        	.line	61
  1680 00:04B1: D4 0C        	pei	<L36+poison_size_0
  1681 00:04B3: D4 0A        	pei	<L36+ptr_0+2
  1682 00:04B5: D4 08        	pei	<L36+ptr_0
  1683 00:04B7: 22 xx xx xx  	jsl	~~dump_mem
  1684                        	.line	63
  1685                        L10023:
  1686                        	.line	65
  1687 00:04BB: A5 03        	lda	<L37+ok_1
  1688                        L42:
  1689 00:04BD: A8           	tay
  1690 00:04BE: A5 06        	lda	<L36+2
  1691 00:04C0: 85 10        	sta	<L36+2+10
  1692 00:04C2: A5 05        	lda	<L36+1
  1693 00:04C4: 85 0F        	sta	<L36+1+10
  1694 00:04C6: 2B           	pld
  1695 00:04C7: 3B           	tsc
  1696 00:04C8: 18           	clc
  1697 00:04C9: 69 0E 00     	adc	#L36+10
  1698 00:04CC: 1B           	tcs
  1699 00:04CD: 98           	tya
  1700 00:04CE: 6B           	rtl
  1701                        	.line	66
  1702                        	.endblock	66
  1703             00000004   L36	equ	4
  1704             00000001   L37	equ	1
  1705                        	ends
  1706                        	efunc
  1707                        	.endfunc	66,1,4
  1708                        	.line	66
  1709                        	.line	72
  1710                        	.line	73
  1711                        	code
  1712                        	func
  1713                        	.function	73
  1714                        ~~check_poison_block:
  1715                        	longa	on
  1716                        	longi	on
  1717 00:04CF: 3B           	tsc
  1718 00:04D0: 38           	sec
  1719 00:04D1: E9 12 00     	sbc	#L43
  1720 00:04D4: 1B           	tcs
  1721 00:04D5: 0B           	phd
  Thu Dec  3 2020 22:25                                                Page 36


  1722 00:04D6: 5B           	tcd
  1723             00000004   pblock_0	set	4
  1724                        	.block	73
  1725             00000000   ok_1	set	0
  1726                        	.sym	ok,0,5,1,16
  1727                        	.sym	pblock,4,138,6,32,47
  1728 00:04D7: A9 01 00     	lda	#$1
  1729 00:04DA: 85 09        	sta	<L44+ok_1
  1730                        	.line	76
  1731 00:04DC: A7 16        	lda	[<L43+pblock_0]
  1732 00:04DE: 29 00 80     	and	#<$8000
  1733 00:04E1: D0 03        	bne	L46
  1734 00:04E3: 82 03 00     	brl	L10024
  1735                        L46:
  1736                        	.line	77
  1737                        	.line	79
  1738 00:04E6: 82 7E 00     	brl	L10025
  1739                        L10024:
  1740                        	.line	81
  1741                        	.block	86
  1742             00000002   pc_2	set	2
  1743             00000006   pc_cur_2	set	6
  1744                        	.sym	pc,2,142,1,32
  1745                        	.sym	pc_cur,6,142,1,32
  1746 00:04E9: 18           	clc
  1747 00:04EA: A9 08 00     	lda	#$8
  1748 00:04ED: 65 16        	adc	<L43+pblock_0
  1749 00:04EF: 85 0B        	sta	<L44+pc_2
  1750 00:04F1: A9 00 00     	lda	#$0
  1751 00:04F4: 65 18        	adc	<L43+pblock_0+2
  1752 00:04F6: 85 0D        	sta	<L44+pc_2+2
  1753                        	.line	86
  1754 00:04F8: 18           	clc
  1755 00:04F9: A9 02 00     	lda	#$2
  1756 00:04FC: 65 0B        	adc	<L44+pc_2
  1757 00:04FE: 85 0F        	sta	<L44+pc_cur_2
  1758 00:0500: A9 00 00     	lda	#$0
  1759 00:0503: 65 0D        	adc	<L44+pc_2+2
  1760 00:0505: 85 11        	sta	<L44+pc_cur_2+2
  1761                        	.line	87
  1762 00:0507: F4 xx xx     	pea	#^L19
  1763 00:050A: F4 xx xx     	pea	#<L19
  1764 00:050D: F4 04 00     	pea	#<$4
  1765 00:0510: D4 11        	pei	<L44+pc_cur_2+2
  1766 00:0512: D4 0F        	pei	<L44+pc_cur_2
  1767 00:0514: 22 xx xx xx  	jsl	~~check_poison
  1768 00:0518: AA           	tax
  1769 00:0519: F0 03        	beq	L48
  1770 00:051B: 82 05 00     	brl	L10026
  1771                        L48:
  1772                        	.line	88
  1773                        	.line	89
  1774 00:051E: 64 09        	stz	<L44+ok_1
  1775                        	.line	90
  1776 00:0520: 82 44 00     	brl	L10027
  1777                        	.line	91
  1778                        L10026:
  1779                        	.line	93
  Thu Dec  3 2020 22:25                                                Page 37


  1780 00:0523: A0 00 00     	ldy	#$0
  1781 00:0526: A7 0B        	lda	[<L44+pc_2]
  1782 00:0528: 10 01        	bpl	L49
  1783 00:052A: 88           	dey
  1784                        L49:
  1785 00:052B: 85 01        	sta	<R0
  1786 00:052D: 84 03        	sty	<R0+2
  1787 00:052F: 18           	clc
  1788 00:0530: A9 FC FF     	lda	#$fffc
  1789 00:0533: 65 01        	adc	<R0
  1790 00:0535: 85 05        	sta	<R1
  1791 00:0537: A9 FF FF     	lda	#$ffff
  1792 00:053A: 65 03        	adc	<R0+2
  1793 00:053C: 85 07        	sta	<R1+2
  1794 00:053E: 18           	clc
  1795 00:053F: A5 0B        	lda	<L44+pc_2
  1796 00:0541: 65 05        	adc	<R1
  1797 00:0543: 85 0F        	sta	<L44+pc_cur_2
  1798 00:0545: A5 0D        	lda	<L44+pc_2+2
  1799 00:0547: 65 07        	adc	<R1+2
  1800 00:0549: 85 11        	sta	<L44+pc_cur_2+2
  1801                        	.line	94
  1802 00:054B: F4 xx xx     	pea	#^L19+7
  1803 00:054E: F4 xx xx     	pea	#<L19+7
  1804 00:0551: F4 04 00     	pea	#<$4
  1805 00:0554: D4 11        	pei	<L44+pc_cur_2+2
  1806 00:0556: D4 0F        	pei	<L44+pc_cur_2
  1807 00:0558: 22 xx xx xx  	jsl	~~check_poison
  1808 00:055C: AA           	tax
  1809 00:055D: F0 03        	beq	L50
  1810 00:055F: 82 05 00     	brl	L10028
  1811                        L50:
  1812                        	.line	95
  1813                        	.line	96
  1814 00:0562: 64 09        	stz	<L44+ok_1
  1815                        	.line	97
  1816 00:0564: 82 00 00     	brl	L10027
  1817                        	.line	98
  1818                        L10028:
  1819                        	.endblock	99
  1820                        	.line	99
  1821                        L10025:
  1822                        	.line	101
  1823                        L10027:
  1824                        	.line	102
  1825 00:0567: A5 09        	lda	<L44+ok_1
  1826                        L51:
  1827 00:0569: A8           	tay
  1828 00:056A: A5 14        	lda	<L43+2
  1829 00:056C: 85 18        	sta	<L43+2+4
  1830 00:056E: A5 13        	lda	<L43+1
  1831 00:0570: 85 17        	sta	<L43+1+4
  1832 00:0572: 2B           	pld
  1833 00:0573: 3B           	tsc
  1834 00:0574: 18           	clc
  1835 00:0575: 69 16 00     	adc	#L43+4
  1836 00:0578: 1B           	tcs
  1837 00:0579: 98           	tya
  Thu Dec  3 2020 22:25                                                Page 38


  1838 00:057A: 6B           	rtl
  1839                        	.line	103
  1840                        	.endblock	103
  1841             00000012   L43	equ	18
  1842             00000009   L44	equ	9
  1843                        	ends
  1844                        	efunc
  1845                        	.endfunc	103,9,18
  1846                        	.line	103
  1847                        	data
  1848                        L19:
  1849 00:0257: 62 65 66 6F  	db	$62,$65,$66,$6F,$72,$65,$00,$61,$66,$74,
                    $65,$72,$00
       00:025B: 72 65 00 61 
       00:025F: 66 74 65 72 
       00:0263: 00 
  1850 00:0264:              	ends
  1851                        	.line	112
  1852                        	.line	113
  1853                        	code
  1854                        	func
  1855                        	.function	113
  1856                        ~~get_poisoned:
  1857                        	longa	on
  1858                        	longi	on
  1859 00:057B: 3B           	tsc
  1860 00:057C: 38           	sec
  1861 00:057D: E9 08 00     	sbc	#L53
  1862 00:0580: 1B           	tcs
  1863 00:0581: 0B           	phd
  1864 00:0582: 5B           	tcd
  1865             00000004   ptr_0	set	4
  1866             00000008   size_w_poison_0	set	8
  1867                        	.block	113
  1868                        	.sym	ptr,4,142,6,32
  1869                        	.sym	size_w_poison,8,16,6,16
  1870                        	.line	114
  1871 00:0583: A5 10        	lda	<L53+size_w_poison_0
  1872 00:0585: D0 03        	bne	L56
  1873 00:0587: 82 79 00     	brl	L10029
  1874                        L56:
  1875 00:058A: A5 0C        	lda	<L53+ptr_0
  1876 00:058C: 05 0E        	ora	<L53+ptr_0+2
  1877 00:058E: D0 03        	bne	L57
  1878 00:0590: 82 70 00     	brl	L10029
  1879                        L57:
  1880                        	.line	115
  1881                        	.line	118
  1882 00:0593: F4 04 00     	pea	#<$4
  1883 00:0596: 18           	clc
  1884 00:0597: A9 02 00     	lda	#$2
  1885 00:059A: 65 0C        	adc	<L53+ptr_0
  1886 00:059C: 85 01        	sta	<R0
  1887 00:059E: A9 00 00     	lda	#$0
  1888 00:05A1: 65 0E        	adc	<L53+ptr_0+2
  1889 00:05A3: 85 03        	sta	<R0+2
  1890 00:05A5: D4 03        	pei	<R0+2
  1891 00:05A7: D4 01        	pei	<R0
  Thu Dec  3 2020 22:25                                                Page 39


  1892 00:05A9: 22 xx xx xx  	jsl	~~put_poison
  1893                        	.line	120
  1894 00:05AD: F4 04 00     	pea	#<$4
  1895 00:05B0: A5 10        	lda	<L53+size_w_poison_0
  1896 00:05B2: 85 01        	sta	<R0
  1897 00:05B4: 64 03        	stz	<R0+2
  1898 00:05B6: 18           	clc
  1899 00:05B7: A9 FC FF     	lda	#$fffc
  1900 00:05BA: 65 01        	adc	<R0
  1901 00:05BC: 85 05        	sta	<R1
  1902 00:05BE: A9 FF FF     	lda	#$ffff
  1903 00:05C1: 65 03        	adc	<R0+2
  1904 00:05C3: 85 07        	sta	<R1+2
  1905 00:05C5: 18           	clc
  1906 00:05C6: A5 0C        	lda	<L53+ptr_0
  1907 00:05C8: 65 05        	adc	<R1
  1908 00:05CA: 85 01        	sta	<R0
  1909 00:05CC: A5 0E        	lda	<L53+ptr_0+2
  1910 00:05CE: 65 07        	adc	<R1+2
  1911 00:05D0: 85 03        	sta	<R0+2
  1912 00:05D2: D4 03        	pei	<R0+2
  1913 00:05D4: D4 01        	pei	<R0
  1914 00:05D6: 22 xx xx xx  	jsl	~~put_poison
  1915                        	.line	124
  1916 00:05DA: A5 10        	lda	<L53+size_w_poison_0
  1917 00:05DC: 87 0C        	sta	[<L53+ptr_0]
  1918                        	.line	127
  1919 00:05DE: 18           	clc
  1920 00:05DF: A9 06 00     	lda	#$6
  1921 00:05E2: 65 0C        	adc	<L53+ptr_0
  1922 00:05E4: 85 01        	sta	<R0
  1923 00:05E6: A9 00 00     	lda	#$0
  1924 00:05E9: 65 0E        	adc	<L53+ptr_0+2
  1925 00:05EB: 85 03        	sta	<R0+2
  1926 00:05ED: A6 03        	ldx	<R0+2
  1927 00:05EF: A5 01        	lda	<R0
  1928                        L58:
  1929 00:05F1: A8           	tay
  1930 00:05F2: A5 0A        	lda	<L53+2
  1931 00:05F4: 85 10        	sta	<L53+2+6
  1932 00:05F6: A5 09        	lda	<L53+1
  1933 00:05F8: 85 0F        	sta	<L53+1+6
  1934 00:05FA: 2B           	pld
  1935 00:05FB: 3B           	tsc
  1936 00:05FC: 18           	clc
  1937 00:05FD: 69 0E 00     	adc	#L53+6
  1938 00:0600: 1B           	tcs
  1939 00:0601: 98           	tya
  1940 00:0602: 6B           	rtl
  1941                        	.line	128
  1942                        L10029:
  1943                        	.line	130
  1944                        	.line	131
  1945 00:0603: A6 0E        	ldx	<L53+ptr_0+2
  1946 00:0605: A5 0C        	lda	<L53+ptr_0
  1947 00:0607: 82 E7 FF     	brl	L58
  1948                        	.line	132
  1949                        	.line	133
  Thu Dec  3 2020 22:25                                                Page 40


  1950                        	.endblock	133
  1951             00000008   L53	equ	8
  1952             00000009   L54	equ	9
  1953                        	ends
  1954                        	efunc
  1955                        	.endfunc	133,9,8
  1956                        	.line	133
  1957                        	.line	141
  1958                        	.line	142
  1959                        	code
  1960                        	func
  1961                        	.function	142
  1962                        ~~get_unpoisoned:
  1963                        	longa	on
  1964                        	longi	on
  1965 00:060A: 3B           	tsc
  1966 00:060B: 38           	sec
  1967 00:060C: E9 0C 00     	sbc	#L59
  1968 00:060F: 1B           	tcs
  1969 00:0610: 0B           	phd
  1970 00:0611: 5B           	tcd
  1971             00000004   ptr_0	set	4
  1972                        	.block	142
  1973                        	.sym	ptr,4,142,6,32
  1974                        	.line	143
  1975 00:0612: A5 10        	lda	<L59+ptr_0
  1976 00:0614: 05 12        	ora	<L59+ptr_0+2
  1977 00:0616: D0 03        	bne	L62
  1978 00:0618: 82 5F 00     	brl	L10030
  1979                        L62:
  1980                        	.line	144
  1981                        	.block	147
  1982             00000000   c_2	set	0
  1983                        	.sym	c,0,18,1,32
  1984                        	.line	147
  1985 00:061B: 18           	clc
  1986 00:061C: A9 FA FF     	lda	#$fffa
  1987 00:061F: 65 10        	adc	<L59+ptr_0
  1988 00:0621: 85 10        	sta	<L59+ptr_0
  1989 00:0623: A9 FF FF     	lda	#$ffff
  1990 00:0626: 65 12        	adc	<L59+ptr_0+2
  1991 00:0628: 85 12        	sta	<L59+ptr_0+2
  1992                        	.line	150
  1993 00:062A: 38           	sec
  1994 00:062B: A5 10        	lda	<L59+ptr_0
  1995 00:062D: ED xx xx     	sbc	|~~umm_heap
  1996 00:0630: 85 01        	sta	<R0
  1997 00:0632: A5 12        	lda	<L59+ptr_0+2
  1998 00:0634: ED xx xx     	sbc	|~~umm_heap+2
  1999 00:0637: 85 03        	sta	<R0+2
  2000 00:0639: F4 00 00     	pea	#^$10
  2001 00:063C: F4 10 00     	pea	#<$10
  2002 00:063F: D4 03        	pei	<R0+2
  2003 00:0641: D4 01        	pei	<R0
  2004                        	xref	~~~ldiv
  2005 00:0643: 22 xx xx xx  	jsl	~~~ldiv
  2006 00:0647: 85 09        	sta	<L60+c_2
  2007 00:0649: 86 0B        	stx	<L60+c_2+2
  Thu Dec  3 2020 22:25                                                Page 41


  2008                        	.line	152
  2009 00:064B: A5 09        	lda	<L60+c_2
  2010 00:064D: 85 01        	sta	<R0
  2011 00:064F: A5 0B        	lda	<L60+c_2+2
  2012 00:0651: 85 03        	sta	<R0+2
  2013 00:0653: 06 01        	asl	<R0
  2014 00:0655: 26 03        	rol	<R0+2
  2015 00:0657: 06 01        	asl	<R0
  2016 00:0659: 26 03        	rol	<R0+2
  2017 00:065B: 06 01        	asl	<R0
  2018 00:065D: 26 03        	rol	<R0+2
  2019 00:065F: 06 01        	asl	<R0
  2020 00:0661: 26 03        	rol	<R0+2
  2021 00:0663: 18           	clc
  2022 00:0664: AD xx xx     	lda	|~~umm_heap
  2023 00:0667: 65 01        	adc	<R0
  2024 00:0669: 85 05        	sta	<R1
  2025 00:066B: AD xx xx     	lda	|~~umm_heap+2
  2026 00:066E: 65 03        	adc	<R0+2
  2027 00:0670: 85 07        	sta	<R1+2
  2028 00:0672: D4 07        	pei	<R1+2
  2029 00:0674: D4 05        	pei	<R1
  2030 00:0676: 22 xx xx xx  	jsl	~~check_poison_block
  2031                        	.endblock	153
  2032                        	.line	153
  2033                        L10030:
  2034                        	.line	155
  2035 00:067A: A6 12        	ldx	<L59+ptr_0+2
  2036 00:067C: A5 10        	lda	<L59+ptr_0
  2037                        L64:
  2038 00:067E: A8           	tay
  2039 00:067F: A5 0E        	lda	<L59+2
  2040 00:0681: 85 12        	sta	<L59+2+4
  2041 00:0683: A5 0D        	lda	<L59+1
  2042 00:0685: 85 11        	sta	<L59+1+4
  2043 00:0687: 2B           	pld
  2044 00:0688: 3B           	tsc
  2045 00:0689: 18           	clc
  2046 00:068A: 69 10 00     	adc	#L59+4
  2047 00:068D: 1B           	tcs
  2048 00:068E: 98           	tya
  2049 00:068F: 6B           	rtl
  2050                        	.line	156
  2051                        	.endblock	156
  2052             0000000C   L59	equ	12
  2053             00000009   L60	equ	9
  2054                        	ends
  2055                        	efunc
  2056                        	.endfunc	156,9,12
  2057                        	.line	156
  2058                        	.line	162
  2059                        	.line	163
  2060                        	code
  2061                        	xdef	~~umm_poison_malloc
  2062                        	func
  2063                        	.function	163
  2064                        ~~umm_poison_malloc:
  2065                        	longa	on
  Thu Dec  3 2020 22:25                                                Page 42


  2066                        	longi	on
  2067 00:0690: 3B           	tsc
  2068 00:0691: 38           	sec
  2069 00:0692: E9 08 00     	sbc	#L65
  2070 00:0695: 1B           	tcs
  2071 00:0696: 0B           	phd
  2072 00:0697: 5B           	tcd
  2073             00000004   size_0	set	4
  2074                        	.block	163
  2075             00000000   ret_1	set	0
  2076                        	.sym	ret,0,129,1,32
  2077                        	.sym	size,4,16,6,16
  2078                        	.line	166
  2079 00:0698: D4 0C        	pei	<L65+size_0
  2080 00:069A: 22 xx xx xx  	jsl	~~poison_size
  2081 00:069E: 85 01        	sta	<R0
  2082 00:06A0: 18           	clc
  2083 00:06A1: A5 01        	lda	<R0
  2084 00:06A3: 65 0C        	adc	<L65+size_0
  2085 00:06A5: 85 0C        	sta	<L65+size_0
  2086                        	.line	168
  2087 00:06A7: A5 0C        	lda	<L65+size_0
  2088 00:06A9: 85 01        	sta	<R0
  2089 00:06AB: 64 03        	stz	<R0+2
  2090 00:06AD: D4 03        	pei	<R0+2
  2091 00:06AF: D4 01        	pei	<R0
  2092 00:06B1: 22 xx xx xx  	jsl	~~umm_malloc
  2093 00:06B5: 85 05        	sta	<L66+ret_1
  2094 00:06B7: 86 07        	stx	<L66+ret_1+2
  2095                        	.line	170
  2096 00:06B9: D4 0C        	pei	<L65+size_0
  2097 00:06BB: D4 07        	pei	<L66+ret_1+2
  2098 00:06BD: D4 05        	pei	<L66+ret_1
  2099 00:06BF: 22 xx xx xx  	jsl	~~get_poisoned
  2100 00:06C3: 85 05        	sta	<L66+ret_1
  2101 00:06C5: 86 07        	stx	<L66+ret_1+2
  2102                        	.line	172
  2103 00:06C7: A6 07        	ldx	<L66+ret_1+2
  2104 00:06C9: A5 05        	lda	<L66+ret_1
  2105                        L68:
  2106 00:06CB: A8           	tay
  2107 00:06CC: A5 0A        	lda	<L65+2
  2108 00:06CE: 85 0C        	sta	<L65+2+2
  2109 00:06D0: A5 09        	lda	<L65+1
  2110 00:06D2: 85 0B        	sta	<L65+1+2
  2111 00:06D4: 2B           	pld
  2112 00:06D5: 3B           	tsc
  2113 00:06D6: 18           	clc
  2114 00:06D7: 69 0A 00     	adc	#L65+2
  2115 00:06DA: 1B           	tcs
  2116 00:06DB: 98           	tya
  2117 00:06DC: 6B           	rtl
  2118                        	.line	173
  2119                        	.endblock	173
  2120             00000008   L65	equ	8
  2121             00000005   L66	equ	5
  2122                        	ends
  2123                        	efunc
  Thu Dec  3 2020 22:25                                                Page 43


  2124                        	.endfunc	173,5,8
  2125                        	.line	173
  2126                        	.line	177
  2127                        	.line	178
  2128                        	code
  2129                        	xdef	~~umm_poison_calloc
  2130                        	func
  2131                        	.function	178
  2132                        ~~umm_poison_calloc:
  2133                        	longa	on
  2134                        	longi	on
  2135 00:06DD: 3B           	tsc
  2136 00:06DE: 38           	sec
  2137 00:06DF: E9 0A 00     	sbc	#L69
  2138 00:06E2: 1B           	tcs
  2139 00:06E3: 0B           	phd
  2140 00:06E4: 5B           	tcd
  2141             00000004   num_0	set	4
  2142             00000006   item_size_0	set	6
  2143                        	.block	178
  2144             00000000   ret_1	set	0
  2145             00000004   size_1	set	4
  2146                        	.sym	ret,0,129,1,32
  2147                        	.sym	size,4,16,1,16
  2148                        	.sym	num,4,16,6,16
  2149                        	.sym	item_size,6,16,6,16
  2150 00:06E5: A5 10        	lda	<L69+item_size_0
  2151 00:06E7: A6 0E        	ldx	<L69+num_0
  2152                        	xref	~~~mul
  2153 00:06E9: 22 xx xx xx  	jsl	~~~mul
  2154 00:06ED: 85 09        	sta	<L70+size_1
  2155                        	.line	182
  2156 00:06EF: D4 09        	pei	<L70+size_1
  2157 00:06F1: 22 xx xx xx  	jsl	~~poison_size
  2158 00:06F5: 85 01        	sta	<R0
  2159 00:06F7: 18           	clc
  2160 00:06F8: A5 01        	lda	<R0
  2161 00:06FA: 65 09        	adc	<L70+size_1
  2162 00:06FC: 85 09        	sta	<L70+size_1
  2163                        	.line	184
  2164 00:06FE: A5 09        	lda	<L70+size_1
  2165 00:0700: 85 01        	sta	<R0
  2166 00:0702: 64 03        	stz	<R0+2
  2167 00:0704: D4 03        	pei	<R0+2
  2168 00:0706: D4 01        	pei	<R0
  2169 00:0708: 22 xx xx xx  	jsl	~~umm_malloc
  2170 00:070C: 85 05        	sta	<L70+ret_1
  2171 00:070E: 86 07        	stx	<L70+ret_1+2
  2172                        	.line	186
  2173 00:0710: A5 05        	lda	<L70+ret_1
  2174 00:0712: 05 07        	ora	<L70+ret_1+2
  2175 00:0714: D0 03        	bne	L72
  2176 00:0716: 82 0D 00     	brl	L10031
  2177                        L72:
  2178                        	.line	187
  2179 00:0719: D4 09        	pei	<L70+size_1
  2180 00:071B: F4 00 00     	pea	#<$0
  2181 00:071E: D4 07        	pei	<L70+ret_1+2
  Thu Dec  3 2020 22:25                                                Page 44


  2182 00:0720: D4 05        	pei	<L70+ret_1
  2183 00:0722: 22 xx xx xx  	jsl	~~memset
  2184                        L10031:
  2185                        	.line	189
  2186 00:0726: D4 09        	pei	<L70+size_1
  2187 00:0728: D4 07        	pei	<L70+ret_1+2
  2188 00:072A: D4 05        	pei	<L70+ret_1
  2189 00:072C: 22 xx xx xx  	jsl	~~get_poisoned
  2190 00:0730: 85 05        	sta	<L70+ret_1
  2191 00:0732: 86 07        	stx	<L70+ret_1+2
  2192                        	.line	191
  2193 00:0734: A6 07        	ldx	<L70+ret_1+2
  2194 00:0736: A5 05        	lda	<L70+ret_1
  2195                        L73:
  2196 00:0738: A8           	tay
  2197 00:0739: A5 0C        	lda	<L69+2
  2198 00:073B: 85 10        	sta	<L69+2+4
  2199 00:073D: A5 0B        	lda	<L69+1
  2200 00:073F: 85 0F        	sta	<L69+1+4
  2201 00:0741: 2B           	pld
  2202 00:0742: 3B           	tsc
  2203 00:0743: 18           	clc
  2204 00:0744: 69 0E 00     	adc	#L69+4
  2205 00:0747: 1B           	tcs
  2206 00:0748: 98           	tya
  2207 00:0749: 6B           	rtl
  2208                        	.line	192
  2209                        	.endblock	192
  2210             0000000A   L69	equ	10
  2211             00000005   L70	equ	5
  2212                        	ends
  2213                        	efunc
  2214                        	.endfunc	192,5,10
  2215                        	.line	192
  2216                        	.line	196
  2217                        	.line	197
  2218                        	code
  2219                        	xdef	~~umm_poison_realloc
  2220                        	func
  2221                        	.function	197
  2222                        ~~umm_poison_realloc:
  2223                        	longa	on
  2224                        	longi	on
  2225 00:074A: 3B           	tsc
  2226 00:074B: 38           	sec
  2227 00:074C: E9 08 00     	sbc	#L74
  2228 00:074F: 1B           	tcs
  2229 00:0750: 0B           	phd
  2230 00:0751: 5B           	tcd
  2231             00000004   ptr_0	set	4
  2232             00000008   size_0	set	8
  2233                        	.block	197
  2234             00000000   ret_1	set	0
  2235                        	.sym	ret,0,129,1,32
  2236                        	.sym	ptr,4,129,6,32
  2237                        	.sym	size,8,16,6,16
  2238                        	.line	200
  2239 00:0752: D4 0E        	pei	<L74+ptr_0+2
  Thu Dec  3 2020 22:25                                                Page 45


  2240 00:0754: D4 0C        	pei	<L74+ptr_0
  2241 00:0756: 22 xx xx xx  	jsl	~~get_unpoisoned
  2242 00:075A: 85 0C        	sta	<L74+ptr_0
  2243 00:075C: 86 0E        	stx	<L74+ptr_0+2
  2244                        	.line	202
  2245 00:075E: D4 10        	pei	<L74+size_0
  2246 00:0760: 22 xx xx xx  	jsl	~~poison_size
  2247 00:0764: 85 01        	sta	<R0
  2248 00:0766: 18           	clc
  2249 00:0767: A5 01        	lda	<R0
  2250 00:0769: 65 10        	adc	<L74+size_0
  2251 00:076B: 85 10        	sta	<L74+size_0
  2252                        	.line	203
  2253 00:076D: A5 10        	lda	<L74+size_0
  2254 00:076F: 85 01        	sta	<R0
  2255 00:0771: 64 03        	stz	<R0+2
  2256 00:0773: D4 03        	pei	<R0+2
  2257 00:0775: D4 01        	pei	<R0
  2258 00:0777: D4 0E        	pei	<L74+ptr_0+2
  2259 00:0779: D4 0C        	pei	<L74+ptr_0
  2260 00:077B: 22 xx xx xx  	jsl	~~umm_realloc
  2261 00:077F: 85 05        	sta	<L75+ret_1
  2262 00:0781: 86 07        	stx	<L75+ret_1+2
  2263                        	.line	205
  2264 00:0783: D4 10        	pei	<L74+size_0
  2265 00:0785: D4 07        	pei	<L75+ret_1+2
  2266 00:0787: D4 05        	pei	<L75+ret_1
  2267 00:0789: 22 xx xx xx  	jsl	~~get_poisoned
  2268 00:078D: 85 05        	sta	<L75+ret_1
  2269 00:078F: 86 07        	stx	<L75+ret_1+2
  2270                        	.line	207
  2271 00:0791: A6 07        	ldx	<L75+ret_1+2
  2272 00:0793: A5 05        	lda	<L75+ret_1
  2273                        L77:
  2274 00:0795: A8           	tay
  2275 00:0796: A5 0A        	lda	<L74+2
  2276 00:0798: 85 10        	sta	<L74+2+6
  2277 00:079A: A5 09        	lda	<L74+1
  2278 00:079C: 85 0F        	sta	<L74+1+6
  2279 00:079E: 2B           	pld
  2280 00:079F: 3B           	tsc
  2281 00:07A0: 18           	clc
  2282 00:07A1: 69 0E 00     	adc	#L74+6
  2283 00:07A4: 1B           	tcs
  2284 00:07A5: 98           	tya
  2285 00:07A6: 6B           	rtl
  2286                        	.line	208
  2287                        	.endblock	208
  2288             00000008   L74	equ	8
  2289             00000005   L75	equ	5
  2290                        	ends
  2291                        	efunc
  2292                        	.endfunc	208,5,8
  2293                        	.line	208
  2294                        	.line	212
  2295                        	.line	213
  2296                        	code
  2297                        	xdef	~~umm_poison_free
  Thu Dec  3 2020 22:25                                                Page 46


  2298                        	func
  2299                        	.function	213
  2300                        ~~umm_poison_free:
  2301                        	longa	on
  2302                        	longi	on
  2303 00:07A7: 3B           	tsc
  2304 00:07A8: 38           	sec
  2305 00:07A9: E9 00 00     	sbc	#L78
  2306 00:07AC: 1B           	tcs
  2307 00:07AD: 0B           	phd
  2308 00:07AE: 5B           	tcd
  2309             00000004   ptr_0	set	4
  2310                        	.block	213
  2311                        	.sym	ptr,4,129,6,32
  2312                        	.line	215
  2313 00:07AF: D4 06        	pei	<L78+ptr_0+2
  2314 00:07B1: D4 04        	pei	<L78+ptr_0
  2315 00:07B3: 22 xx xx xx  	jsl	~~get_unpoisoned
  2316 00:07B7: 85 04        	sta	<L78+ptr_0
  2317 00:07B9: 86 06        	stx	<L78+ptr_0+2
  2318                        	.line	217
  2319 00:07BB: D4 06        	pei	<L78+ptr_0+2
  2320 00:07BD: D4 04        	pei	<L78+ptr_0
  2321 00:07BF: 22 xx xx xx  	jsl	~~umm_free
  2322                        	.line	218
  2323                        L81:
  2324 00:07C3: A5 02        	lda	<L78+2
  2325 00:07C5: 85 06        	sta	<L78+2+4
  2326 00:07C7: A5 01        	lda	<L78+1
  2327 00:07C9: 85 05        	sta	<L78+1+4
  2328 00:07CB: 2B           	pld
  2329 00:07CC: 3B           	tsc
  2330 00:07CD: 18           	clc
  2331 00:07CE: 69 04 00     	adc	#L78+4
  2332 00:07D1: 1B           	tcs
  2333 00:07D2: 6B           	rtl
  2334                        	.endblock	218
  2335             00000000   L78	equ	0
  2336             00000001   L79	equ	1
  2337                        	ends
  2338                        	efunc
  2339                        	.endfunc	218,1,0
  2340                        	.line	218
  2341                        	.line	225
  2342                        	.line	226
  2343                        	code
  2344                        	xdef	~~umm_poison_check
  2345                        	func
  2346                        	.function	226
  2347                        ~~umm_poison_check:
  2348                        	longa	on
  2349                        	longi	on
  2350 00:07D3: 3B           	tsc
  2351 00:07D4: 38           	sec
  2352 00:07D5: E9 0E 00     	sbc	#L82
  2353 00:07D8: 1B           	tcs
  2354 00:07D9: 0B           	phd
  2355 00:07DA: 5B           	tcd
  Thu Dec  3 2020 22:25                                                Page 47


  2356                        	.block	226
  2357             00000000   ok_1	set	0
  2358             00000002   cur_1	set	2
  2359                        	.sym	ok,0,5,1,16
  2360                        	.sym	cur,2,18,1,32
  2361 00:07DB: A9 01 00     	lda	#$1
  2362 00:07DE: 85 09        	sta	<L83+ok_1
  2363                        	.line	230
  2364 00:07E0: AD xx xx     	lda	|~~umm_heap
  2365 00:07E3: 0D xx xx     	ora	|~~umm_heap+2
  2366 00:07E6: F0 03        	beq	L85
  2367 00:07E8: 82 04 00     	brl	L10032
  2368                        L85:
  2369                        	.line	231
  2370                        	.line	232
  2371 00:07EB: 22 xx xx xx  	jsl	~~umm_init
  2372                        	.line	233
  2373                        L10032:
  2374                        	.line	236
  2375 00:07EF: AD xx xx     	lda	|~~umm_heap
  2376 00:07F2: 85 01        	sta	<R0
  2377 00:07F4: AD xx xx     	lda	|~~umm_heap+2
  2378 00:07F7: 85 03        	sta	<R0+2
  2379 00:07F9: A7 01        	lda	[<R0]
  2380 00:07FB: 29 FF 7F     	and	#<$7fff
  2381 00:07FE: 85 0B        	sta	<L83+cur_1
  2382 00:0800: 64 0D        	stz	<L83+cur_1+2
  2383                        	.line	238
  2384                        L10033:
  2385 00:0802: A5 0B        	lda	<L83+cur_1
  2386 00:0804: 85 01        	sta	<R0
  2387 00:0806: A5 0D        	lda	<L83+cur_1+2
  2388 00:0808: 85 03        	sta	<R0+2
  2389 00:080A: 06 01        	asl	<R0
  2390 00:080C: 26 03        	rol	<R0+2
  2391 00:080E: 06 01        	asl	<R0
  2392 00:0810: 26 03        	rol	<R0+2
  2393 00:0812: 06 01        	asl	<R0
  2394 00:0814: 26 03        	rol	<R0+2
  2395 00:0816: 06 01        	asl	<R0
  2396 00:0818: 26 03        	rol	<R0+2
  2397 00:081A: 18           	clc
  2398 00:081B: AD xx xx     	lda	|~~umm_heap
  2399 00:081E: 65 01        	adc	<R0
  2400 00:0820: 85 05        	sta	<R1
  2401 00:0822: AD xx xx     	lda	|~~umm_heap+2
  2402 00:0825: 65 03        	adc	<R0+2
  2403 00:0827: 85 07        	sta	<R1+2
  2404 00:0829: A7 05        	lda	[<R1]
  2405 00:082B: 29 FF 7F     	and	#<$7fff
  2406 00:082E: D0 03        	bne	L86
  2407 00:0830: 82 9F 00     	brl	L10034
  2408                        L86:
  2409                        	.line	239
  2410                        	.line	240
  2411 00:0833: A5 0B        	lda	<L83+cur_1
  2412 00:0835: 85 01        	sta	<R0
  2413 00:0837: A5 0D        	lda	<L83+cur_1+2
  Thu Dec  3 2020 22:25                                                Page 48


  2414 00:0839: 85 03        	sta	<R0+2
  2415 00:083B: 06 01        	asl	<R0
  2416 00:083D: 26 03        	rol	<R0+2
  2417 00:083F: 06 01        	asl	<R0
  2418 00:0841: 26 03        	rol	<R0+2
  2419 00:0843: 06 01        	asl	<R0
  2420 00:0845: 26 03        	rol	<R0+2
  2421 00:0847: 06 01        	asl	<R0
  2422 00:0849: 26 03        	rol	<R0+2
  2423 00:084B: 18           	clc
  2424 00:084C: AD xx xx     	lda	|~~umm_heap
  2425 00:084F: 65 01        	adc	<R0
  2426 00:0851: 85 05        	sta	<R1
  2427 00:0853: AD xx xx     	lda	|~~umm_heap+2
  2428 00:0856: 65 03        	adc	<R0+2
  2429 00:0858: 85 07        	sta	<R1+2
  2430 00:085A: A7 05        	lda	[<R1]
  2431 00:085C: 29 00 80     	and	#<$8000
  2432 00:085F: F0 03        	beq	L87
  2433 00:0861: 82 3B 00     	brl	L10035
  2434                        L87:
  2435                        	.line	241
  2436                        	.line	243
  2437 00:0864: A5 0B        	lda	<L83+cur_1
  2438 00:0866: 85 01        	sta	<R0
  2439 00:0868: A5 0D        	lda	<L83+cur_1+2
  2440 00:086A: 85 03        	sta	<R0+2
  2441 00:086C: 06 01        	asl	<R0
  2442 00:086E: 26 03        	rol	<R0+2
  2443 00:0870: 06 01        	asl	<R0
  2444 00:0872: 26 03        	rol	<R0+2
  2445 00:0874: 06 01        	asl	<R0
  2446 00:0876: 26 03        	rol	<R0+2
  2447 00:0878: 06 01        	asl	<R0
  2448 00:087A: 26 03        	rol	<R0+2
  2449 00:087C: 18           	clc
  2450 00:087D: AD xx xx     	lda	|~~umm_heap
  2451 00:0880: 65 01        	adc	<R0
  2452 00:0882: 85 05        	sta	<R1
  2453 00:0884: AD xx xx     	lda	|~~umm_heap+2
  2454 00:0887: 65 03        	adc	<R0+2
  2455 00:0889: 85 07        	sta	<R1+2
  2456 00:088B: D4 07        	pei	<R1+2
  2457 00:088D: D4 05        	pei	<R1
  2458 00:088F: 22 xx xx xx  	jsl	~~check_poison_block
  2459 00:0893: 85 09        	sta	<L83+ok_1
  2460                        	.line	244
  2461 00:0895: A5 09        	lda	<L83+ok_1
  2462 00:0897: F0 03        	beq	L88
  2463 00:0899: 82 03 00     	brl	L10036
  2464                        L88:
  2465                        	.line	245
  2466                        	.line	246
  2467 00:089C: 82 33 00     	brl	L10034
  2468                        	.line	247
  2469                        L10036:
  2470                        	.line	248
  2471                        L10035:
  Thu Dec  3 2020 22:25                                                Page 49


  2472                        	.line	250
  2473 00:089F: A5 0B        	lda	<L83+cur_1
  2474 00:08A1: 85 01        	sta	<R0
  2475 00:08A3: A5 0D        	lda	<L83+cur_1+2
  2476 00:08A5: 85 03        	sta	<R0+2
  2477 00:08A7: 06 01        	asl	<R0
  2478 00:08A9: 26 03        	rol	<R0+2
  2479 00:08AB: 06 01        	asl	<R0
  2480 00:08AD: 26 03        	rol	<R0+2
  2481 00:08AF: 06 01        	asl	<R0
  2482 00:08B1: 26 03        	rol	<R0+2
  2483 00:08B3: 06 01        	asl	<R0
  2484 00:08B5: 26 03        	rol	<R0+2
  2485 00:08B7: 18           	clc
  2486 00:08B8: AD xx xx     	lda	|~~umm_heap
  2487 00:08BB: 65 01        	adc	<R0
  2488 00:08BD: 85 05        	sta	<R1
  2489 00:08BF: AD xx xx     	lda	|~~umm_heap+2
  2490 00:08C2: 65 03        	adc	<R0+2
  2491 00:08C4: 85 07        	sta	<R1+2
  2492 00:08C6: A7 05        	lda	[<R1]
  2493 00:08C8: 29 FF 7F     	and	#<$7fff
  2494 00:08CB: 85 0B        	sta	<L83+cur_1
  2495 00:08CD: 64 0D        	stz	<L83+cur_1+2
  2496                        	.line	251
  2497 00:08CF: 82 30 FF     	brl	L10033
  2498                        L10034:
  2499                        	.line	253
  2500 00:08D2: A5 09        	lda	<L83+ok_1
  2501                        L89:
  2502 00:08D4: A8           	tay
  2503 00:08D5: 2B           	pld
  2504 00:08D6: 3B           	tsc
  2505 00:08D7: 18           	clc
  2506 00:08D8: 69 0E 00     	adc	#L82
  2507 00:08DB: 1B           	tcs
  2508 00:08DC: 98           	tya
  2509 00:08DD: 6B           	rtl
  2510                        	.line	254
  2511                        	.endblock	254
  2512             0000000E   L82	equ	14
  2513             00000009   L83	equ	9
  2514                        	ends
  2515                        	efunc
  2516                        	.endfunc	254,9,14
  2517                        	.line	254
  2518                        	.line	259
  2519                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc.c",97
  2520                        ;#include "umm_info.c"
  2521                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_info.c",0
  2522                        	.line	20
  2523                        	.line	21
  2524                        	code
  2525                        	xdef	~~umm_info
  2526                        	func
  2527                        	.function	21
  Thu Dec  3 2020 22:25                                                Page 50


  2528                        ~~umm_info:
  2529                        	longa	on
  2530                        	longi	on
  2531 00:08DE: 3B           	tsc
  2532 00:08DF: 38           	sec
  2533 00:08E0: E9 14 00     	sbc	#L90
  2534 00:08E3: 1B           	tcs
  2535 00:08E4: 0B           	phd
  2536 00:08E5: 5B           	tcd
  2537             00000004   ptr_0	set	4
  2538             00000008   force_0	set	8
  2539                        	.block	21
  2540             00000000   blockNo_1	set	0
  2541                        	.sym	blockNo,0,15,1,16
  2542                        	.sym	ptr,4,129,6,32
  2543                        	.sym	force,8,5,6,16
  2544 00:08E6: 64 11        	stz	<L91+blockNo_1
  2545                        	.line	26
  2546                        	.line	32
  2547 00:08E8: F4 20 00     	pea	#<$20
  2548 00:08EB: F4 00 00     	pea	#<$0
  2549 00:08EE: A9 xx xx     	lda	#<~~ummHeapInfo
  2550 00:08F1: 85 01        	sta	<R0
  2551                        	xref	_BEG_DATA
  2552 00:08F3: A9 xx xx     	lda	#_BEG_DATA>>16
  2553 00:08F6: 85 03        	sta	<R0+2
  2554 00:08F8: D4 03        	pei	<R0+2
  2555 00:08FA: D4 01        	pei	<R0
  2556 00:08FC: 22 xx xx xx  	jsl	~~memset
  2557                        	.line	51
  2558 00:0900: A5 11        	lda	<L91+blockNo_1
  2559 00:0902: 85 05        	sta	<R1
  2560 00:0904: 64 07        	stz	<R1+2
  2561 00:0906: D4 07        	pei	<R1+2
  2562 00:0908: D4 05        	pei	<R1
  2563 00:090A: A9 04 00     	lda	#$4
  2564                        	xref	~~~lasl
  2565 00:090D: 22 xx xx xx  	jsl	~~~lasl
  2566 00:0911: 85 01        	sta	<R0
  2567 00:0913: 86 03        	stx	<R0+2
  2568 00:0915: 18           	clc
  2569 00:0916: AD xx xx     	lda	|~~umm_heap
  2570 00:0919: 65 01        	adc	<R0
  2571 00:091B: 85 09        	sta	<R2
  2572 00:091D: AD xx xx     	lda	|~~umm_heap+2
  2573 00:0920: 65 03        	adc	<R0+2
  2574 00:0922: 85 0B        	sta	<R2+2
  2575 00:0924: A7 09        	lda	[<R2]
  2576 00:0926: 29 FF 7F     	and	#<$7fff
  2577 00:0929: 85 01        	sta	<R0
  2578 00:092B: 64 03        	stz	<R0+2
  2579 00:092D: A5 01        	lda	<R0
  2580 00:092F: 85 11        	sta	<L91+blockNo_1
  2581                        	.line	53
  2582 00:0931: A9 10 00     	lda	#$10
  2583 00:0934: 8D xx xx     	sta	|~~ummHeapInfo+28
  2584 00:0937: A9 00 00     	lda	#$0
  2585 00:093A: 8D xx xx     	sta	|~~ummHeapInfo+28+2
  Thu Dec  3 2020 22:25                                                Page 51


  2586                        	.line	55
  2587                        L10037:
  2588 00:093D: A5 11        	lda	<L91+blockNo_1
  2589 00:093F: 85 05        	sta	<R1
  2590 00:0941: 64 07        	stz	<R1+2
  2591 00:0943: D4 07        	pei	<R1+2
  2592 00:0945: D4 05        	pei	<R1
  2593 00:0947: A9 04 00     	lda	#$4
  2594                        	xref	~~~lasl
  2595 00:094A: 22 xx xx xx  	jsl	~~~lasl
  2596 00:094E: 85 01        	sta	<R0
  2597 00:0950: 86 03        	stx	<R0+2
  2598 00:0952: 18           	clc
  2599 00:0953: AD xx xx     	lda	|~~umm_heap
  2600 00:0956: 65 01        	adc	<R0
  2601 00:0958: 85 09        	sta	<R2
  2602 00:095A: AD xx xx     	lda	|~~umm_heap+2
  2603 00:095D: 65 03        	adc	<R0+2
  2604 00:095F: 85 0B        	sta	<R2+2
  2605 00:0961: A7 09        	lda	[<R2]
  2606 00:0963: 29 FF 7F     	and	#<$7fff
  2607 00:0966: D0 03        	bne	L93
  2608 00:0968: 82 6C 01     	brl	L10038
  2609                        L93:
  2610                        	.line	56
  2611                        	.block	59
  2612             00000002   curBlocks_2	set	2
  2613                        	.sym	curBlocks,2,16,1,16
  2614 00:096B: A5 11        	lda	<L91+blockNo_1
  2615 00:096D: 85 01        	sta	<R0
  2616 00:096F: 64 03        	stz	<R0+2
  2617 00:0971: A5 11        	lda	<L91+blockNo_1
  2618 00:0973: 85 09        	sta	<R2
  2619 00:0975: 64 0B        	stz	<R2+2
  2620 00:0977: D4 0B        	pei	<R2+2
  2621 00:0979: D4 09        	pei	<R2
  2622 00:097B: A9 04 00     	lda	#$4
  2623                        	xref	~~~lasl
  2624 00:097E: 22 xx xx xx  	jsl	~~~lasl
  2625 00:0982: 85 05        	sta	<R1
  2626 00:0984: 86 07        	stx	<R1+2
  2627 00:0986: 18           	clc
  2628 00:0987: AD xx xx     	lda	|~~umm_heap
  2629 00:098A: 65 05        	adc	<R1
  2630 00:098C: 85 0D        	sta	<R3
  2631 00:098E: AD xx xx     	lda	|~~umm_heap+2
  2632 00:0991: 65 07        	adc	<R1+2
  2633 00:0993: 85 0F        	sta	<R3+2
  2634 00:0995: A7 0D        	lda	[<R3]
  2635 00:0997: 29 FF 7F     	and	#<$7fff
  2636 00:099A: 85 05        	sta	<R1
  2637 00:099C: 64 07        	stz	<R1+2
  2638 00:099E: 38           	sec
  2639 00:099F: A5 05        	lda	<R1
  2640 00:09A1: E5 01        	sbc	<R0
  2641 00:09A3: 85 0D        	sta	<R3
  2642 00:09A5: A5 07        	lda	<R1+2
  2643 00:09A7: E5 03        	sbc	<R0+2
  Thu Dec  3 2020 22:25                                                Page 52


  2644 00:09A9: 85 0F        	sta	<R3+2
  2645 00:09AB: A5 0D        	lda	<R3
  2646 00:09AD: 85 13        	sta	<L91+curBlocks_2
  2647                        	.line	59
  2648 00:09AF: EE xx xx     	inc	|~~ummHeapInfo
  2649 00:09B2: D0 03        	bne	L95
  2650 00:09B4: EE xx xx     	inc	|~~ummHeapInfo+2
  2651                        L95:
  2652                        	.line	60
  2653 00:09B7: A5 13        	lda	<L91+curBlocks_2
  2654 00:09B9: 85 01        	sta	<R0
  2655 00:09BB: 64 03        	stz	<R0+2
  2656 00:09BD: 18           	clc
  2657 00:09BE: A5 01        	lda	<R0
  2658 00:09C0: 6D xx xx     	adc	|~~ummHeapInfo+12
  2659 00:09C3: 8D xx xx     	sta	|~~ummHeapInfo+12
  2660 00:09C6: A5 03        	lda	<R0+2
  2661 00:09C8: 6D xx xx     	adc	|~~ummHeapInfo+12+2
  2662 00:09CB: 8D xx xx     	sta	|~~ummHeapInfo+12+2
  2663                        	.line	64
  2664 00:09CE: A5 11        	lda	<L91+blockNo_1
  2665 00:09D0: 85 05        	sta	<R1
  2666 00:09D2: 64 07        	stz	<R1+2
  2667 00:09D4: D4 07        	pei	<R1+2
  2668 00:09D6: D4 05        	pei	<R1
  2669 00:09D8: A9 04 00     	lda	#$4
  2670                        	xref	~~~lasl
  2671 00:09DB: 22 xx xx xx  	jsl	~~~lasl
  2672 00:09DF: 85 01        	sta	<R0
  2673 00:09E1: 86 03        	stx	<R0+2
  2674 00:09E3: 18           	clc
  2675 00:09E4: AD xx xx     	lda	|~~umm_heap
  2676 00:09E7: 65 01        	adc	<R0
  2677 00:09E9: 85 09        	sta	<R2
  2678 00:09EB: AD xx xx     	lda	|~~umm_heap+2
  2679 00:09EE: 65 03        	adc	<R0+2
  2680 00:09F0: 85 0B        	sta	<R2+2
  2681 00:09F2: A7 09        	lda	[<R2]
  2682 00:09F4: 29 00 80     	and	#<$8000
  2683 00:09F7: D0 03        	bne	L96
  2684 00:09F9: 82 88 00     	brl	L10039
  2685                        L96:
  2686                        	.line	65
  2687                        	.line	66
  2688 00:09FC: EE xx xx     	inc	|~~ummHeapInfo+8
  2689 00:09FF: D0 03        	bne	L97
  2690 00:0A01: EE xx xx     	inc	|~~ummHeapInfo+8+2
  2691                        L97:
  2692                        	.line	67
  2693 00:0A04: A5 13        	lda	<L91+curBlocks_2
  2694 00:0A06: 85 01        	sta	<R0
  2695 00:0A08: 64 03        	stz	<R0+2
  2696 00:0A0A: 18           	clc
  2697 00:0A0B: A5 01        	lda	<R0
  2698 00:0A0D: 6D xx xx     	adc	|~~ummHeapInfo+20
  2699 00:0A10: 8D xx xx     	sta	|~~ummHeapInfo+20
  2700 00:0A13: A5 03        	lda	<R0+2
  2701 00:0A15: 6D xx xx     	adc	|~~ummHeapInfo+20+2
  Thu Dec  3 2020 22:25                                                Page 53


  2702 00:0A18: 8D xx xx     	sta	|~~ummHeapInfo+20+2
  2703                        	.line	69
  2704 00:0A1B: A5 13        	lda	<L91+curBlocks_2
  2705 00:0A1D: 85 01        	sta	<R0
  2706 00:0A1F: 64 03        	stz	<R0+2
  2707 00:0A21: AD xx xx     	lda	|~~ummHeapInfo+24
  2708 00:0A24: C5 01        	cmp	<R0
  2709 00:0A26: AD xx xx     	lda	|~~ummHeapInfo+24+2
  2710 00:0A29: E5 03        	sbc	<R0+2
  2711 00:0A2B: 90 03        	bcc	L98
  2712 00:0A2D: 82 08 00     	brl	L10040
  2713                        L98:
  2714                        	.line	70
  2715                        	.line	71
  2716 00:0A30: A5 13        	lda	<L91+curBlocks_2
  2717 00:0A32: 8D xx xx     	sta	|~~ummHeapInfo+24
  2718 00:0A35: 9C xx xx     	stz	|~~ummHeapInfo+24+2
  2719                        	.line	72
  2720                        L10040:
  2721                        	.line	86
  2722 00:0A38: A5 11        	lda	<L91+blockNo_1
  2723 00:0A3A: 85 05        	sta	<R1
  2724 00:0A3C: 64 07        	stz	<R1+2
  2725 00:0A3E: D4 07        	pei	<R1+2
  2726 00:0A40: D4 05        	pei	<R1
  2727 00:0A42: A9 04 00     	lda	#$4
  2728                        	xref	~~~lasl
  2729 00:0A45: 22 xx xx xx  	jsl	~~~lasl
  2730 00:0A49: 85 01        	sta	<R0
  2731 00:0A4B: 86 03        	stx	<R0+2
  2732 00:0A4D: 18           	clc
  2733 00:0A4E: AD xx xx     	lda	|~~umm_heap
  2734 00:0A51: 65 01        	adc	<R0
  2735 00:0A53: 85 09        	sta	<R2
  2736 00:0A55: AD xx xx     	lda	|~~umm_heap+2
  2737 00:0A58: 65 03        	adc	<R0+2
  2738 00:0A5A: 85 0B        	sta	<R2+2
  2739 00:0A5C: A5 09        	lda	<R2
  2740 00:0A5E: C5 18        	cmp	<L90+ptr_0
  2741 00:0A60: D0 04        	bne	L99
  2742 00:0A62: A5 0B        	lda	<R2+2
  2743 00:0A64: C5 1A        	cmp	<L90+ptr_0+2
  2744                        L99:
  2745 00:0A66: F0 03        	beq	L100
  2746 00:0A68: 82 16 00     	brl	L10041
  2747                        L100:
  2748                        	.line	87
  2749                        	.line	90
  2750                        	.line	92
  2751 00:0A6B: A6 1A        	ldx	<L90+ptr_0+2
  2752 00:0A6D: A5 18        	lda	<L90+ptr_0
  2753                        L101:
  2754 00:0A6F: A8           	tay
  2755 00:0A70: A5 16        	lda	<L90+2
  2756 00:0A72: 85 1C        	sta	<L90+2+6
  2757 00:0A74: A5 15        	lda	<L90+1
  2758 00:0A76: 85 1B        	sta	<L90+1+6
  2759 00:0A78: 2B           	pld
  Thu Dec  3 2020 22:25                                                Page 54


  2760 00:0A79: 3B           	tsc
  2761 00:0A7A: 18           	clc
  2762 00:0A7B: 69 1A 00     	adc	#L90+6
  2763 00:0A7E: 1B           	tcs
  2764 00:0A7F: 98           	tya
  2765 00:0A80: 6B           	rtl
  2766                        	.line	93
  2767                        L10041:
  2768                        	.line	94
  2769 00:0A81: 82 1F 00     	brl	L10042
  2770                        L10039:
  2771                        	.line	96
  2772                        	.line	97
  2773 00:0A84: EE xx xx     	inc	|~~ummHeapInfo+4
  2774 00:0A87: D0 03        	bne	L102
  2775 00:0A89: EE xx xx     	inc	|~~ummHeapInfo+4+2
  2776                        L102:
  2777                        	.line	98
  2778 00:0A8C: A5 13        	lda	<L91+curBlocks_2
  2779 00:0A8E: 85 01        	sta	<R0
  2780 00:0A90: 64 03        	stz	<R0+2
  2781 00:0A92: 18           	clc
  2782 00:0A93: A5 01        	lda	<R0
  2783 00:0A95: 6D xx xx     	adc	|~~ummHeapInfo+16
  2784 00:0A98: 8D xx xx     	sta	|~~ummHeapInfo+16
  2785 00:0A9B: A5 03        	lda	<R0+2
  2786 00:0A9D: 6D xx xx     	adc	|~~ummHeapInfo+16+2
  2787 00:0AA0: 8D xx xx     	sta	|~~ummHeapInfo+16+2
  2788                        	.line	106
  2789                        L10042:
  2790                        	.line	108
  2791 00:0AA3: A5 11        	lda	<L91+blockNo_1
  2792 00:0AA5: 85 05        	sta	<R1
  2793 00:0AA7: 64 07        	stz	<R1+2
  2794 00:0AA9: D4 07        	pei	<R1+2
  2795 00:0AAB: D4 05        	pei	<R1
  2796 00:0AAD: A9 04 00     	lda	#$4
  2797                        	xref	~~~lasl
  2798 00:0AB0: 22 xx xx xx  	jsl	~~~lasl
  2799 00:0AB4: 85 01        	sta	<R0
  2800 00:0AB6: 86 03        	stx	<R0+2
  2801 00:0AB8: 18           	clc
  2802 00:0AB9: AD xx xx     	lda	|~~umm_heap
  2803 00:0ABC: 65 01        	adc	<R0
  2804 00:0ABE: 85 09        	sta	<R2
  2805 00:0AC0: AD xx xx     	lda	|~~umm_heap+2
  2806 00:0AC3: 65 03        	adc	<R0+2
  2807 00:0AC5: 85 0B        	sta	<R2+2
  2808 00:0AC7: A7 09        	lda	[<R2]
  2809 00:0AC9: 29 FF 7F     	and	#<$7fff
  2810 00:0ACC: 85 01        	sta	<R0
  2811 00:0ACE: 64 03        	stz	<R0+2
  2812 00:0AD0: A5 01        	lda	<R0
  2813 00:0AD2: 85 11        	sta	<L91+blockNo_1
  2814                        	.endblock	109
  2815                        	.line	109
  2816 00:0AD4: 82 66 FE     	brl	L10037
  2817                        L10038:
  Thu Dec  3 2020 22:25                                                Page 55


  2818                        	.line	116
  2819                        	.block	118
  2820             00000002   curBlocks_3	set	2
  2821                        	.sym	curBlocks,2,16,1,16
  2822 00:0AD7: A5 11        	lda	<L91+blockNo_1
  2823 00:0AD9: 85 01        	sta	<R0
  2824 00:0ADB: 64 03        	stz	<R0+2
  2825 00:0ADD: 38           	sec
  2826 00:0ADE: AD xx xx     	lda	|~~umm_numblocks
  2827 00:0AE1: E5 01        	sbc	<R0
  2828 00:0AE3: 85 05        	sta	<R1
  2829 00:0AE5: AD xx xx     	lda	|~~umm_numblocks+2
  2830 00:0AE8: E5 03        	sbc	<R0+2
  2831 00:0AEA: 85 07        	sta	<R1+2
  2832 00:0AEC: A5 05        	lda	<R1
  2833 00:0AEE: 85 13        	sta	<L91+curBlocks_3
  2834                        	.line	118
  2835 00:0AF0: A5 13        	lda	<L91+curBlocks_3
  2836 00:0AF2: 85 01        	sta	<R0
  2837 00:0AF4: 64 03        	stz	<R0+2
  2838 00:0AF6: 18           	clc
  2839 00:0AF7: A5 01        	lda	<R0
  2840 00:0AF9: 6D xx xx     	adc	|~~ummHeapInfo+20
  2841 00:0AFC: 8D xx xx     	sta	|~~ummHeapInfo+20
  2842 00:0AFF: A5 03        	lda	<R0+2
  2843 00:0B01: 6D xx xx     	adc	|~~ummHeapInfo+20+2
  2844 00:0B04: 8D xx xx     	sta	|~~ummHeapInfo+20+2
  2845                        	.line	119
  2846 00:0B07: A5 13        	lda	<L91+curBlocks_3
  2847 00:0B09: 85 01        	sta	<R0
  2848 00:0B0B: 64 03        	stz	<R0+2
  2849 00:0B0D: 18           	clc
  2850 00:0B0E: A5 01        	lda	<R0
  2851 00:0B10: 6D xx xx     	adc	|~~ummHeapInfo+12
  2852 00:0B13: 8D xx xx     	sta	|~~ummHeapInfo+12
  2853 00:0B16: A5 03        	lda	<R0+2
  2854 00:0B18: 6D xx xx     	adc	|~~ummHeapInfo+12+2
  2855 00:0B1B: 8D xx xx     	sta	|~~ummHeapInfo+12+2
  2856                        	.line	121
  2857 00:0B1E: A5 13        	lda	<L91+curBlocks_3
  2858 00:0B20: 85 01        	sta	<R0
  2859 00:0B22: 64 03        	stz	<R0+2
  2860 00:0B24: AD xx xx     	lda	|~~ummHeapInfo+24
  2861 00:0B27: C5 01        	cmp	<R0
  2862 00:0B29: AD xx xx     	lda	|~~ummHeapInfo+24+2
  2863 00:0B2C: E5 03        	sbc	<R0+2
  2864 00:0B2E: 90 03        	bcc	L104
  2865 00:0B30: 82 08 00     	brl	L10043
  2866                        L104:
  2867                        	.line	122
  2868                        	.line	123
  2869 00:0B33: A5 13        	lda	<L91+curBlocks_3
  2870 00:0B35: 8D xx xx     	sta	|~~ummHeapInfo+24
  2871 00:0B38: 9C xx xx     	stz	|~~ummHeapInfo+24+2
  2872                        	.line	124
  2873                        L10043:
  2874                        	.endblock	125
  2875                        	.line	125
  Thu Dec  3 2020 22:25                                                Page 56


  2876                        	.line	152
  2877                        	.line	154
  2878 00:0B3B: A9 xx xx     	lda	#<~~ummHeapInfo
  2879 00:0B3E: 85 01        	sta	<R0
  2880                        	xref	_BEG_DATA
  2881 00:0B40: A9 xx xx     	lda	#_BEG_DATA>>16
  2882 00:0B43: 85 03        	sta	<R0+2
  2883 00:0B45: A6 03        	ldx	<R0+2
  2884 00:0B47: A5 01        	lda	<R0
  2885 00:0B49: 82 23 FF     	brl	L101
  2886                        	.line	155
  2887                        	.endblock	155
  2888             00000014   L90	equ	20
  2889             00000011   L91	equ	17
  2890                        	ends
  2891                        	efunc
  2892                        	.endfunc	155,17,20
  2893                        	.line	155
  2894                        	.line	159
  2895                        	.line	160
  2896                        	code
  2897                        	xdef	~~umm_free_heap_size
  2898                        	func
  2899                        	.function	160
  2900                        ~~umm_free_heap_size:
  2901                        	longa	on
  2902                        	longi	on
  2903 00:0B4C: 3B           	tsc
  2904 00:0B4D: 38           	sec
  2905 00:0B4E: E9 00 00     	sbc	#L105
  2906 00:0B51: 1B           	tcs
  2907 00:0B52: 0B           	phd
  2908 00:0B53: 5B           	tcd
  2909                        	.block	160
  2910                        	.line	161
  2911 00:0B54: F4 00 00     	pea	#<$0
  2912 00:0B57: F4 00 00     	pea	#^$0
  2913 00:0B5A: F4 00 00     	pea	#<$0
  2914 00:0B5D: 22 xx xx xx  	jsl	~~umm_info
  2915                        	.line	162
  2916 00:0B61: AD xx xx     	lda	|~~ummHeapInfo+20
  2917 00:0B64: 0A           	asl	A
  2918 00:0B65: 0A           	asl	A
  2919 00:0B66: 0A           	asl	A
  2920 00:0B67: 0A           	asl	A
  2921                        L108:
  2922 00:0B68: A8           	tay
  2923 00:0B69: 2B           	pld
  2924 00:0B6A: 3B           	tsc
  2925 00:0B6B: 18           	clc
  2926 00:0B6C: 69 00 00     	adc	#L105
  2927 00:0B6F: 1B           	tcs
  2928 00:0B70: 98           	tya
  2929 00:0B71: 6B           	rtl
  2930                        	.line	163
  2931                        	.endblock	163
  2932             00000000   L105	equ	0
  2933             00000001   L106	equ	1
  Thu Dec  3 2020 22:25                                                Page 57


  2934                        	ends
  2935                        	efunc
  2936                        	.endfunc	163,1,0
  2937                        	.line	163
  2938                        	.line	166
  2939                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc.c",98
  2940                        ;
  2941                        ;/* ----------------------------------------------
                    -------------------------- */
  2942                        ;
  2943                        ;static unsigned long umm_blocks(size_t size)
  2944                        ;{
  2945                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc.c",102
  2946                        	.line	103
  2947                        	code
  2948                        	func
  2949                        	.function	103
  2950                        ~~umm_blocks:
  2951                        	longa	on
  2952                        	longi	on
  2953 00:0B72: 3B           	tsc
  2954 00:0B73: 38           	sec
  2955 00:0B74: E9 08 00     	sbc	#L109
  2956 00:0B77: 1B           	tcs
  2957 00:0B78: 0B           	phd
  2958 00:0B79: 5B           	tcd
  2959             00000004   size_0	set	4
  2960                        	.block	103
  2961                        ;
  2962                        ;	/*
  2963                        ;	 * The calculation of the block size is not too 
                    difficult, but there are
  2964                        ;	 * a few little things that we need to be mindfu
                    l of.
  2965                        ;	 *
  2966                        ;	 * When a block removed from the free list, the 
                    space used by the free
  2967                        ;	 * pointers is available for data. That's what t
                    he first calculation
  2968                        ;	 * of size is doing.
  2969                        ;	 */
  2970                        ;
  2971                        ;	if (size <= (sizeof(((umm_block *) 0)->body)))
  2972                        	.sym	size,4,16,6,16
  2973                        	.line	114
  2974                        ;		return (1);
  2975 00:0B7A: A9 08 00     	lda	#$8
  2976 00:0B7D: C5 0C        	cmp	<L109+size_0
  2977 00:0B7F: B0 03        	bcs	L112
  2978 00:0B81: 82 19 00     	brl	L10044
  2979                        L112:
  2980                        	.line	115
  2981 00:0B84: A9 00 00     	lda	#$0
  2982 00:0B87: AA           	tax
  2983 00:0B88: A9 01 00     	lda	#$1
  2984                        L113:
  Thu Dec  3 2020 22:25                                                Page 58


  2985 00:0B8B: A8           	tay
  2986 00:0B8C: A5 0A        	lda	<L109+2
  2987 00:0B8E: 85 0C        	sta	<L109+2+2
  2988 00:0B90: A5 09        	lda	<L109+1
  2989 00:0B92: 85 0B        	sta	<L109+1+2
  2990 00:0B94: 2B           	pld
  2991 00:0B95: 3B           	tsc
  2992 00:0B96: 18           	clc
  2993 00:0B97: 69 0A 00     	adc	#L109+2
  2994 00:0B9A: 1B           	tcs
  2995 00:0B9B: 98           	tya
  2996 00:0B9C: 6B           	rtl
  2997                        ;
  2998                        ;	/*
  2999                        ;	 * If it's for more than that, then we need to f
                    igure out the number of
  3000                        ;	 * additional whole blocks the size of an umm_bl
                    ock are required.
  3001                        ;	 */
  3002                        ;
  3003                        ;	size -= (1 + (sizeof(((umm_block *) 0)->body)));
  3004                        L10044:
  3005                        	.line	122
  3006 00:0B9D: 18           	clc
  3007 00:0B9E: A9 F7 FF     	lda	#$fff7
  3008 00:0BA1: 65 0C        	adc	<L109+size_0
  3009 00:0BA3: 85 0C        	sta	<L109+size_0
  3010                        ;
  3011                        ;	return (2 + size / (sizeof(umm_block)));
  3012                        	.line	124
  3013 00:0BA5: A5 0C        	lda	<L109+size_0
  3014 00:0BA7: 4A           	lsr	A
  3015 00:0BA8: 4A           	lsr	A
  3016 00:0BA9: 4A           	lsr	A
  3017 00:0BAA: 4A           	lsr	A
  3018 00:0BAB: 85 01        	sta	<R0
  3019 00:0BAD: 18           	clc
  3020 00:0BAE: A9 02 00     	lda	#$2
  3021 00:0BB1: 65 01        	adc	<R0
  3022 00:0BB3: 85 05        	sta	<R1
  3023 00:0BB5: A5 05        	lda	<R1
  3024 00:0BB7: 85 01        	sta	<R0
  3025 00:0BB9: 64 03        	stz	<R0+2
  3026 00:0BBB: A6 03        	ldx	<R0+2
  3027 00:0BBD: A5 01        	lda	<R0
  3028 00:0BBF: 82 C9 FF     	brl	L113
  3029                        ;}
  3030                        	.line	125
  3031                        	.endblock	125
  3032             00000008   L109	equ	8
  3033             00000009   L110	equ	9
  3034                        	ends
  3035                        	efunc
  3036                        	.endfunc	125,9,8
  3037                        	.line	125
  3038                        ;
  3039                        ;/* ----------------------------------------------
                    -------------------------- */
  Thu Dec  3 2020 22:25                                                Page 59


  3040                        ;/*
  3041                        ; * Split the block `c` into two blocks: `c` and `
                    c + blocks`.
  3042                        ; *
  3043                        ; * - `new_freemask` should be `0` if `c + blocks`
                     used, or `UMM_FREELIST_MASK`
  3044                        ; *   otherwise.
  3045                        ; *
  3046                        ; * Note that free pointers are NOT modified by th
                    is function.
  3047                        ; */
  3048                        ;static void umm_split_block(unsigned long c, unsi
                    gned long blocks,
  3049                        ;		unsigned long new_freemask)
  3050                        ;{
  3051                        	.line	136
  3052                        	.line	138
  3053                        	code
  3054                        	func
  3055                        	.function	138
  3056                        ~~umm_split_block:
  3057                        	longa	on
  3058                        	longi	on
  3059 00:0BC2: 3B           	tsc
  3060 00:0BC3: 38           	sec
  3061 00:0BC4: E9 10 00     	sbc	#L114
  3062 00:0BC7: 1B           	tcs
  3063 00:0BC8: 0B           	phd
  3064 00:0BC9: 5B           	tcd
  3065             00000004   c_0	set	4
  3066             00000008   blocks_0	set	8
  3067             0000000C   new_freemask_0	set	12
  3068                        	.block	138
  3069                        ;
  3070                        ;	UMM_NBLOCK(c+blocks) = (UMM_NBLOCK(c) & UMM_BLOC
                    KNO_MASK) | new_freemask;
  3071                        	.sym	c,4,18,6,32
  3072                        	.sym	blocks,8,18,6,32
  3073                        	.sym	new_freemask,12,18,6,32
  3074                        	.line	140
  3075 00:0BCA: 18           	clc
  3076 00:0BCB: A5 14        	lda	<L114+c_0
  3077 00:0BCD: 65 18        	adc	<L114+blocks_0
  3078 00:0BCF: 85 05        	sta	<R1
  3079 00:0BD1: A5 16        	lda	<L114+c_0+2
  3080 00:0BD3: 65 1A        	adc	<L114+blocks_0+2
  3081 00:0BD5: 85 07        	sta	<R1+2
  3082 00:0BD7: D4 07        	pei	<R1+2
  3083 00:0BD9: D4 05        	pei	<R1
  3084 00:0BDB: A9 04 00     	lda	#$4
  3085                        	xref	~~~lasl
  3086 00:0BDE: 22 xx xx xx  	jsl	~~~lasl
  3087 00:0BE2: 85 01        	sta	<R0
  3088 00:0BE4: 86 03        	stx	<R0+2
  3089 00:0BE6: 18           	clc
  3090 00:0BE7: AD xx xx     	lda	|~~umm_heap
  3091 00:0BEA: 65 01        	adc	<R0
  3092 00:0BEC: 85 09        	sta	<R2
  Thu Dec  3 2020 22:25                                                Page 60


  3093 00:0BEE: AD xx xx     	lda	|~~umm_heap+2
  3094 00:0BF1: 65 03        	adc	<R0+2
  3095 00:0BF3: 85 0B        	sta	<R2+2
  3096 00:0BF5: A5 14        	lda	<L114+c_0
  3097 00:0BF7: 85 01        	sta	<R0
  3098 00:0BF9: A5 16        	lda	<L114+c_0+2
  3099 00:0BFB: 85 03        	sta	<R0+2
  3100 00:0BFD: 06 01        	asl	<R0
  3101 00:0BFF: 26 03        	rol	<R0+2
  3102 00:0C01: 06 01        	asl	<R0
  3103 00:0C03: 26 03        	rol	<R0+2
  3104 00:0C05: 06 01        	asl	<R0
  3105 00:0C07: 26 03        	rol	<R0+2
  3106 00:0C09: 06 01        	asl	<R0
  3107 00:0C0B: 26 03        	rol	<R0+2
  3108 00:0C0D: 18           	clc
  3109 00:0C0E: AD xx xx     	lda	|~~umm_heap
  3110 00:0C11: 65 01        	adc	<R0
  3111 00:0C13: 85 0D        	sta	<R3
  3112 00:0C15: AD xx xx     	lda	|~~umm_heap+2
  3113 00:0C18: 65 03        	adc	<R0+2
  3114 00:0C1A: 85 0F        	sta	<R3+2
  3115 00:0C1C: A7 0D        	lda	[<R3]
  3116 00:0C1E: 29 FF 7F     	and	#<$7fff
  3117 00:0C21: 85 01        	sta	<R0
  3118 00:0C23: 64 03        	stz	<R0+2
  3119 00:0C25: A5 1C        	lda	<L114+new_freemask_0
  3120 00:0C27: 05 01        	ora	<R0
  3121 00:0C29: 85 0D        	sta	<R3
  3122 00:0C2B: A5 1E        	lda	<L114+new_freemask_0+2
  3123 00:0C2D: 05 03        	ora	<R0+2
  3124 00:0C2F: 85 0F        	sta	<R3+2
  3125 00:0C31: A5 0D        	lda	<R3
  3126 00:0C33: 87 09        	sta	[<R2]
  3127 00:0C35: A5 0F        	lda	<R3+2
  3128 00:0C37: A0 02 00     	ldy	#$2
  3129 00:0C3A: 97 09        	sta	[<R2],Y
  3130                        ;	UMM_PBLOCK(c+blocks) = c;
  3131                        	.line	141
  3132 00:0C3C: 18           	clc
  3133 00:0C3D: A5 14        	lda	<L114+c_0
  3134 00:0C3F: 65 18        	adc	<L114+blocks_0
  3135 00:0C41: 85 05        	sta	<R1
  3136 00:0C43: A5 16        	lda	<L114+c_0+2
  3137 00:0C45: 65 1A        	adc	<L114+blocks_0+2
  3138 00:0C47: 85 07        	sta	<R1+2
  3139 00:0C49: D4 07        	pei	<R1+2
  3140 00:0C4B: D4 05        	pei	<R1
  3141 00:0C4D: A9 04 00     	lda	#$4
  3142                        	xref	~~~lasl
  3143 00:0C50: 22 xx xx xx  	jsl	~~~lasl
  3144 00:0C54: 85 01        	sta	<R0
  3145 00:0C56: 86 03        	stx	<R0+2
  3146 00:0C58: 18           	clc
  3147 00:0C59: A9 04 00     	lda	#$4
  3148 00:0C5C: 6D xx xx     	adc	|~~umm_heap
  3149 00:0C5F: 85 09        	sta	<R2
  3150 00:0C61: A9 00 00     	lda	#$0
  Thu Dec  3 2020 22:25                                                Page 61


  3151 00:0C64: 6D xx xx     	adc	|~~umm_heap+2
  3152 00:0C67: 85 0B        	sta	<R2+2
  3153 00:0C69: 18           	clc
  3154 00:0C6A: A5 09        	lda	<R2
  3155 00:0C6C: 65 01        	adc	<R0
  3156 00:0C6E: 85 0D        	sta	<R3
  3157 00:0C70: A5 0B        	lda	<R2+2
  3158 00:0C72: 65 03        	adc	<R0+2
  3159 00:0C74: 85 0F        	sta	<R3+2
  3160 00:0C76: A5 14        	lda	<L114+c_0
  3161 00:0C78: 87 0D        	sta	[<R3]
  3162 00:0C7A: A5 16        	lda	<L114+c_0+2
  3163 00:0C7C: A0 02 00     	ldy	#$2
  3164 00:0C7F: 97 0D        	sta	[<R3],Y
  3165                        ;
  3166                        ;	UMM_PBLOCK(UMM_NBLOCK(c) & UMM_BLOCKNO_MASK) = (
                    c + blocks);
  3167                        	.line	143
  3168 00:0C81: A5 14        	lda	<L114+c_0
  3169 00:0C83: 85 05        	sta	<R1
  3170 00:0C85: A5 16        	lda	<L114+c_0+2
  3171 00:0C87: 85 07        	sta	<R1+2
  3172 00:0C89: 06 05        	asl	<R1
  3173 00:0C8B: 26 07        	rol	<R1+2
  3174 00:0C8D: 06 05        	asl	<R1
  3175 00:0C8F: 26 07        	rol	<R1+2
  3176 00:0C91: 06 05        	asl	<R1
  3177 00:0C93: 26 07        	rol	<R1+2
  3178 00:0C95: 06 05        	asl	<R1
  3179 00:0C97: 26 07        	rol	<R1+2
  3180 00:0C99: 18           	clc
  3181 00:0C9A: AD xx xx     	lda	|~~umm_heap
  3182 00:0C9D: 65 05        	adc	<R1
  3183 00:0C9F: 85 09        	sta	<R2
  3184 00:0CA1: AD xx xx     	lda	|~~umm_heap+2
  3185 00:0CA4: 65 07        	adc	<R1+2
  3186 00:0CA6: 85 0B        	sta	<R2+2
  3187 00:0CA8: A7 09        	lda	[<R2]
  3188 00:0CAA: 29 FF 7F     	and	#<$7fff
  3189 00:0CAD: 85 05        	sta	<R1
  3190 00:0CAF: 64 07        	stz	<R1+2
  3191 00:0CB1: D4 07        	pei	<R1+2
  3192 00:0CB3: D4 05        	pei	<R1
  3193 00:0CB5: A9 04 00     	lda	#$4
  3194                        	xref	~~~lasl
  3195 00:0CB8: 22 xx xx xx  	jsl	~~~lasl
  3196 00:0CBC: 85 01        	sta	<R0
  3197 00:0CBE: 86 03        	stx	<R0+2
  3198 00:0CC0: 18           	clc
  3199 00:0CC1: A9 04 00     	lda	#$4
  3200 00:0CC4: 6D xx xx     	adc	|~~umm_heap
  3201 00:0CC7: 85 09        	sta	<R2
  3202 00:0CC9: A9 00 00     	lda	#$0
  3203 00:0CCC: 6D xx xx     	adc	|~~umm_heap+2
  3204 00:0CCF: 85 0B        	sta	<R2+2
  3205 00:0CD1: 18           	clc
  3206 00:0CD2: A5 09        	lda	<R2
  3207 00:0CD4: 65 01        	adc	<R0
  Thu Dec  3 2020 22:25                                                Page 62


  3208 00:0CD6: 85 0D        	sta	<R3
  3209 00:0CD8: A5 0B        	lda	<R2+2
  3210 00:0CDA: 65 03        	adc	<R0+2
  3211 00:0CDC: 85 0F        	sta	<R3+2
  3212 00:0CDE: 18           	clc
  3213 00:0CDF: A5 14        	lda	<L114+c_0
  3214 00:0CE1: 65 18        	adc	<L114+blocks_0
  3215 00:0CE3: 85 01        	sta	<R0
  3216 00:0CE5: A5 16        	lda	<L114+c_0+2
  3217 00:0CE7: 65 1A        	adc	<L114+blocks_0+2
  3218 00:0CE9: 85 03        	sta	<R0+2
  3219 00:0CEB: A5 01        	lda	<R0
  3220 00:0CED: 87 0D        	sta	[<R3]
  3221 00:0CEF: A5 03        	lda	<R0+2
  3222 00:0CF1: A0 02 00     	ldy	#$2
  3223 00:0CF4: 97 0D        	sta	[<R3],Y
  3224                        ;	UMM_NBLOCK(c) = (c + blocks);
  3225                        	.line	144
  3226 00:0CF6: A5 14        	lda	<L114+c_0
  3227 00:0CF8: 85 01        	sta	<R0
  3228 00:0CFA: A5 16        	lda	<L114+c_0+2
  3229 00:0CFC: 85 03        	sta	<R0+2
  3230 00:0CFE: 06 01        	asl	<R0
  3231 00:0D00: 26 03        	rol	<R0+2
  3232 00:0D02: 06 01        	asl	<R0
  3233 00:0D04: 26 03        	rol	<R0+2
  3234 00:0D06: 06 01        	asl	<R0
  3235 00:0D08: 26 03        	rol	<R0+2
  3236 00:0D0A: 06 01        	asl	<R0
  3237 00:0D0C: 26 03        	rol	<R0+2
  3238 00:0D0E: 18           	clc
  3239 00:0D0F: AD xx xx     	lda	|~~umm_heap
  3240 00:0D12: 65 01        	adc	<R0
  3241 00:0D14: 85 05        	sta	<R1
  3242 00:0D16: AD xx xx     	lda	|~~umm_heap+2
  3243 00:0D19: 65 03        	adc	<R0+2
  3244 00:0D1B: 85 07        	sta	<R1+2
  3245 00:0D1D: 18           	clc
  3246 00:0D1E: A5 14        	lda	<L114+c_0
  3247 00:0D20: 65 18        	adc	<L114+blocks_0
  3248 00:0D22: 85 01        	sta	<R0
  3249 00:0D24: A5 16        	lda	<L114+c_0+2
  3250 00:0D26: 65 1A        	adc	<L114+blocks_0+2
  3251 00:0D28: 85 03        	sta	<R0+2
  3252 00:0D2A: A5 01        	lda	<R0
  3253 00:0D2C: 87 05        	sta	[<R1]
  3254 00:0D2E: A5 03        	lda	<R0+2
  3255 00:0D30: A0 02 00     	ldy	#$2
  3256 00:0D33: 97 05        	sta	[<R1],Y
  3257                        ;}
  3258                        	.line	145
  3259                        L117:
  3260 00:0D35: A5 12        	lda	<L114+2
  3261 00:0D37: 85 1E        	sta	<L114+2+12
  3262 00:0D39: A5 11        	lda	<L114+1
  3263 00:0D3B: 85 1D        	sta	<L114+1+12
  3264 00:0D3D: 2B           	pld
  3265 00:0D3E: 3B           	tsc
  Thu Dec  3 2020 22:25                                                Page 63


  3266 00:0D3F: 18           	clc
  3267 00:0D40: 69 1C 00     	adc	#L114+12
  3268 00:0D43: 1B           	tcs
  3269 00:0D44: 6B           	rtl
  3270                        	.endblock	145
  3271             00000010   L114	equ	16
  3272             00000011   L115	equ	17
  3273                        	ends
  3274                        	efunc
  3275                        	.endfunc	145,17,16
  3276                        	.line	145
  3277                        ;
  3278                        ;/* ----------------------------------------------
                    -------------------------- */
  3279                        ;
  3280                        ;static void umm_disconnect_from_free_list(unsigne
                    d long c)
  3281                        ;{
  3282                        	.line	149
  3283                        	.line	150
  3284                        	code
  3285                        	func
  3286                        	.function	150
  3287                        ~~umm_disconnect_from_free_list:
  3288                        	longa	on
  3289                        	longi	on
  3290 00:0D45: 3B           	tsc
  3291 00:0D46: 38           	sec
  3292 00:0D47: E9 10 00     	sbc	#L118
  3293 00:0D4A: 1B           	tcs
  3294 00:0D4B: 0B           	phd
  3295 00:0D4C: 5B           	tcd
  3296             00000004   c_0	set	4
  3297                        	.block	150
  3298                        ;	/* Disconnect this block from the FREE list */
  3299                        ;
  3300                        ;	UMM_NFREE(UMM_PFREE(c)) = UMM_NFREE(c);
  3301                        	.sym	c,4,18,6,32
  3302                        	.line	153
  3303 00:0D4D: A5 14        	lda	<L118+c_0
  3304 00:0D4F: 85 05        	sta	<R1
  3305 00:0D51: A5 16        	lda	<L118+c_0+2
  3306 00:0D53: 85 07        	sta	<R1+2
  3307 00:0D55: 06 05        	asl	<R1
  3308 00:0D57: 26 07        	rol	<R1+2
  3309 00:0D59: 06 05        	asl	<R1
  3310 00:0D5B: 26 07        	rol	<R1+2
  3311 00:0D5D: 06 05        	asl	<R1
  3312 00:0D5F: 26 07        	rol	<R1+2
  3313 00:0D61: 06 05        	asl	<R1
  3314 00:0D63: 26 07        	rol	<R1+2
  3315 00:0D65: 18           	clc
  3316 00:0D66: A9 0C 00     	lda	#$c
  3317 00:0D69: 6D xx xx     	adc	|~~umm_heap
  3318 00:0D6C: 85 09        	sta	<R2
  3319 00:0D6E: A9 00 00     	lda	#$0
  3320 00:0D71: 6D xx xx     	adc	|~~umm_heap+2
  3321 00:0D74: 85 0B        	sta	<R2+2
  Thu Dec  3 2020 22:25                                                Page 64


  3322 00:0D76: 18           	clc
  3323 00:0D77: A5 09        	lda	<R2
  3324 00:0D79: 65 05        	adc	<R1
  3325 00:0D7B: 85 0D        	sta	<R3
  3326 00:0D7D: A5 0B        	lda	<R2+2
  3327 00:0D7F: 65 07        	adc	<R1+2
  3328 00:0D81: 85 0F        	sta	<R3+2
  3329 00:0D83: A0 02 00     	ldy	#$2
  3330 00:0D86: B7 0D        	lda	[<R3],Y
  3331 00:0D88: 48           	pha
  3332 00:0D89: A7 0D        	lda	[<R3]
  3333 00:0D8B: 48           	pha
  3334 00:0D8C: A9 04 00     	lda	#$4
  3335                        	xref	~~~lasl
  3336 00:0D8F: 22 xx xx xx  	jsl	~~~lasl
  3337 00:0D93: 85 01        	sta	<R0
  3338 00:0D95: 86 03        	stx	<R0+2
  3339 00:0D97: 18           	clc
  3340 00:0D98: A9 08 00     	lda	#$8
  3341 00:0D9B: 6D xx xx     	adc	|~~umm_heap
  3342 00:0D9E: 85 05        	sta	<R1
  3343 00:0DA0: A9 00 00     	lda	#$0
  3344 00:0DA3: 6D xx xx     	adc	|~~umm_heap+2
  3345 00:0DA6: 85 07        	sta	<R1+2
  3346 00:0DA8: 18           	clc
  3347 00:0DA9: A5 05        	lda	<R1
  3348 00:0DAB: 65 01        	adc	<R0
  3349 00:0DAD: 85 09        	sta	<R2
  3350 00:0DAF: A5 07        	lda	<R1+2
  3351 00:0DB1: 65 03        	adc	<R0+2
  3352 00:0DB3: 85 0B        	sta	<R2+2
  3353 00:0DB5: A5 14        	lda	<L118+c_0
  3354 00:0DB7: 85 01        	sta	<R0
  3355 00:0DB9: A5 16        	lda	<L118+c_0+2
  3356 00:0DBB: 85 03        	sta	<R0+2
  3357 00:0DBD: 06 01        	asl	<R0
  3358 00:0DBF: 26 03        	rol	<R0+2
  3359 00:0DC1: 06 01        	asl	<R0
  3360 00:0DC3: 26 03        	rol	<R0+2
  3361 00:0DC5: 06 01        	asl	<R0
  3362 00:0DC7: 26 03        	rol	<R0+2
  3363 00:0DC9: 06 01        	asl	<R0
  3364 00:0DCB: 26 03        	rol	<R0+2
  3365 00:0DCD: 18           	clc
  3366 00:0DCE: A9 08 00     	lda	#$8
  3367 00:0DD1: 6D xx xx     	adc	|~~umm_heap
  3368 00:0DD4: 85 05        	sta	<R1
  3369 00:0DD6: A9 00 00     	lda	#$0
  3370 00:0DD9: 6D xx xx     	adc	|~~umm_heap+2
  3371 00:0DDC: 85 07        	sta	<R1+2
  3372 00:0DDE: 18           	clc
  3373 00:0DDF: A5 05        	lda	<R1
  3374 00:0DE1: 65 01        	adc	<R0
  3375 00:0DE3: 85 0D        	sta	<R3
  3376 00:0DE5: A5 07        	lda	<R1+2
  3377 00:0DE7: 65 03        	adc	<R0+2
  3378 00:0DE9: 85 0F        	sta	<R3+2
  3379 00:0DEB: A7 0D        	lda	[<R3]
  Thu Dec  3 2020 22:25                                                Page 65


  3380 00:0DED: 87 09        	sta	[<R2]
  3381 00:0DEF: A0 02 00     	ldy	#$2
  3382 00:0DF2: B7 0D        	lda	[<R3],Y
  3383 00:0DF4: A0 02 00     	ldy	#$2
  3384 00:0DF7: 97 09        	sta	[<R2],Y
  3385                        ;	UMM_PFREE(UMM_NFREE(c)) = UMM_PFREE(c);
  3386                        	.line	154
  3387 00:0DF9: A5 14        	lda	<L118+c_0
  3388 00:0DFB: 85 05        	sta	<R1
  3389 00:0DFD: A5 16        	lda	<L118+c_0+2
  3390 00:0DFF: 85 07        	sta	<R1+2
  3391 00:0E01: 06 05        	asl	<R1
  3392 00:0E03: 26 07        	rol	<R1+2
  3393 00:0E05: 06 05        	asl	<R1
  3394 00:0E07: 26 07        	rol	<R1+2
  3395 00:0E09: 06 05        	asl	<R1
  3396 00:0E0B: 26 07        	rol	<R1+2
  3397 00:0E0D: 06 05        	asl	<R1
  3398 00:0E0F: 26 07        	rol	<R1+2
  3399 00:0E11: 18           	clc
  3400 00:0E12: A9 08 00     	lda	#$8
  3401 00:0E15: 6D xx xx     	adc	|~~umm_heap
  3402 00:0E18: 85 09        	sta	<R2
  3403 00:0E1A: A9 00 00     	lda	#$0
  3404 00:0E1D: 6D xx xx     	adc	|~~umm_heap+2
  3405 00:0E20: 85 0B        	sta	<R2+2
  3406 00:0E22: 18           	clc
  3407 00:0E23: A5 09        	lda	<R2
  3408 00:0E25: 65 05        	adc	<R1
  3409 00:0E27: 85 0D        	sta	<R3
  3410 00:0E29: A5 0B        	lda	<R2+2
  3411 00:0E2B: 65 07        	adc	<R1+2
  3412 00:0E2D: 85 0F        	sta	<R3+2
  3413 00:0E2F: A0 02 00     	ldy	#$2
  3414 00:0E32: B7 0D        	lda	[<R3],Y
  3415 00:0E34: 48           	pha
  3416 00:0E35: A7 0D        	lda	[<R3]
  3417 00:0E37: 48           	pha
  3418 00:0E38: A9 04 00     	lda	#$4
  3419                        	xref	~~~lasl
  3420 00:0E3B: 22 xx xx xx  	jsl	~~~lasl
  3421 00:0E3F: 85 01        	sta	<R0
  3422 00:0E41: 86 03        	stx	<R0+2
  3423 00:0E43: 18           	clc
  3424 00:0E44: A9 0C 00     	lda	#$c
  3425 00:0E47: 6D xx xx     	adc	|~~umm_heap
  3426 00:0E4A: 85 05        	sta	<R1
  3427 00:0E4C: A9 00 00     	lda	#$0
  3428 00:0E4F: 6D xx xx     	adc	|~~umm_heap+2
  3429 00:0E52: 85 07        	sta	<R1+2
  3430 00:0E54: 18           	clc
  3431 00:0E55: A5 05        	lda	<R1
  3432 00:0E57: 65 01        	adc	<R0
  3433 00:0E59: 85 09        	sta	<R2
  3434 00:0E5B: A5 07        	lda	<R1+2
  3435 00:0E5D: 65 03        	adc	<R0+2
  3436 00:0E5F: 85 0B        	sta	<R2+2
  3437 00:0E61: A5 14        	lda	<L118+c_0
  Thu Dec  3 2020 22:25                                                Page 66


  3438 00:0E63: 85 01        	sta	<R0
  3439 00:0E65: A5 16        	lda	<L118+c_0+2
  3440 00:0E67: 85 03        	sta	<R0+2
  3441 00:0E69: 06 01        	asl	<R0
  3442 00:0E6B: 26 03        	rol	<R0+2
  3443 00:0E6D: 06 01        	asl	<R0
  3444 00:0E6F: 26 03        	rol	<R0+2
  3445 00:0E71: 06 01        	asl	<R0
  3446 00:0E73: 26 03        	rol	<R0+2
  3447 00:0E75: 06 01        	asl	<R0
  3448 00:0E77: 26 03        	rol	<R0+2
  3449 00:0E79: 18           	clc
  3450 00:0E7A: A9 0C 00     	lda	#$c
  3451 00:0E7D: 6D xx xx     	adc	|~~umm_heap
  3452 00:0E80: 85 05        	sta	<R1
  3453 00:0E82: A9 00 00     	lda	#$0
  3454 00:0E85: 6D xx xx     	adc	|~~umm_heap+2
  3455 00:0E88: 85 07        	sta	<R1+2
  3456 00:0E8A: 18           	clc
  3457 00:0E8B: A5 05        	lda	<R1
  3458 00:0E8D: 65 01        	adc	<R0
  3459 00:0E8F: 85 0D        	sta	<R3
  3460 00:0E91: A5 07        	lda	<R1+2
  3461 00:0E93: 65 03        	adc	<R0+2
  3462 00:0E95: 85 0F        	sta	<R3+2
  3463 00:0E97: A7 0D        	lda	[<R3]
  3464 00:0E99: 87 09        	sta	[<R2]
  3465 00:0E9B: A0 02 00     	ldy	#$2
  3466 00:0E9E: B7 0D        	lda	[<R3],Y
  3467 00:0EA0: A0 02 00     	ldy	#$2
  3468 00:0EA3: 97 09        	sta	[<R2],Y
  3469                        ;
  3470                        ;	/* And clear the free block indicator */
  3471                        ;
  3472                        ;	UMM_NBLOCK(c) &= (~UMM_FREELIST_MASK);
  3473                        	.line	158
  3474 00:0EA5: A5 14        	lda	<L118+c_0
  3475 00:0EA7: 85 01        	sta	<R0
  3476 00:0EA9: A5 16        	lda	<L118+c_0+2
  3477 00:0EAB: 85 03        	sta	<R0+2
  3478 00:0EAD: 06 01        	asl	<R0
  3479 00:0EAF: 26 03        	rol	<R0+2
  3480 00:0EB1: 06 01        	asl	<R0
  3481 00:0EB3: 26 03        	rol	<R0+2
  3482 00:0EB5: 06 01        	asl	<R0
  3483 00:0EB7: 26 03        	rol	<R0+2
  3484 00:0EB9: 06 01        	asl	<R0
  3485 00:0EBB: 26 03        	rol	<R0+2
  3486 00:0EBD: 18           	clc
  3487 00:0EBE: AD xx xx     	lda	|~~umm_heap
  3488 00:0EC1: 65 01        	adc	<R0
  3489 00:0EC3: 85 05        	sta	<R1
  3490 00:0EC5: AD xx xx     	lda	|~~umm_heap+2
  3491 00:0EC8: 65 03        	adc	<R0+2
  3492 00:0ECA: 85 07        	sta	<R1+2
  3493 00:0ECC: A7 05        	lda	[<R1]
  3494 00:0ECE: 29 FF 7F     	and	#<$7fff
  3495 00:0ED1: 87 05        	sta	[<R1]
  Thu Dec  3 2020 22:25                                                Page 67


  3496 00:0ED3: A9 00 00     	lda	#$0
  3497 00:0ED6: A0 02 00     	ldy	#$2
  3498 00:0ED9: 97 05        	sta	[<R1],Y
  3499                        ;}
  3500                        	.line	159
  3501                        L121:
  3502 00:0EDB: A5 12        	lda	<L118+2
  3503 00:0EDD: 85 16        	sta	<L118+2+4
  3504 00:0EDF: A5 11        	lda	<L118+1
  3505 00:0EE1: 85 15        	sta	<L118+1+4
  3506 00:0EE3: 2B           	pld
  3507 00:0EE4: 3B           	tsc
  3508 00:0EE5: 18           	clc
  3509 00:0EE6: 69 14 00     	adc	#L118+4
  3510 00:0EE9: 1B           	tcs
  3511 00:0EEA: 6B           	rtl
  3512                        	.endblock	159
  3513             00000010   L118	equ	16
  3514             00000011   L119	equ	17
  3515                        	ends
  3516                        	efunc
  3517                        	.endfunc	159,17,16
  3518                        	.line	159
  3519                        ;
  3520                        ;/* ----------------------------------------------
                    --------------------------
  3521                        ; * The umm_assimilate_up() function assumes that 
                    UMM_NBLOCK(c) does NOT
  3522                        ; * have the UMM_FREELIST_MASK bit set!
  3523                        ; */
  3524                        ;
  3525                        ;static void umm_assimilate_up(unsigned long c)
  3526                        ;{
  3527                        	.line	166
  3528                        	.line	167
  3529                        	code
  3530                        	func
  3531                        	.function	167
  3532                        ~~umm_assimilate_up:
  3533                        	longa	on
  3534                        	longi	on
  3535 00:0EEB: 3B           	tsc
  3536 00:0EEC: 38           	sec
  3537 00:0EED: E9 10 00     	sbc	#L122
  3538 00:0EF0: 1B           	tcs
  3539 00:0EF1: 0B           	phd
  3540 00:0EF2: 5B           	tcd
  3541             00000004   c_0	set	4
  3542                        	.block	167
  3543                        ;
  3544                        ;	if ( UMM_NBLOCK(UMM_NBLOCK(c)) & UMM_FREELIST_MA
                    SK)
  3545                        	.sym	c,4,18,6,32
  3546                        	.line	169
  3547                        ;	{
  3548 00:0EF3: A5 14        	lda	<L122+c_0
  3549 00:0EF5: 85 05        	sta	<R1
  3550 00:0EF7: A5 16        	lda	<L122+c_0+2
  Thu Dec  3 2020 22:25                                                Page 68


  3551 00:0EF9: 85 07        	sta	<R1+2
  3552 00:0EFB: 06 05        	asl	<R1
  3553 00:0EFD: 26 07        	rol	<R1+2
  3554 00:0EFF: 06 05        	asl	<R1
  3555 00:0F01: 26 07        	rol	<R1+2
  3556 00:0F03: 06 05        	asl	<R1
  3557 00:0F05: 26 07        	rol	<R1+2
  3558 00:0F07: 06 05        	asl	<R1
  3559 00:0F09: 26 07        	rol	<R1+2
  3560 00:0F0B: 18           	clc
  3561 00:0F0C: AD xx xx     	lda	|~~umm_heap
  3562 00:0F0F: 65 05        	adc	<R1
  3563 00:0F11: 85 09        	sta	<R2
  3564 00:0F13: AD xx xx     	lda	|~~umm_heap+2
  3565 00:0F16: 65 07        	adc	<R1+2
  3566 00:0F18: 85 0B        	sta	<R2+2
  3567 00:0F1A: A0 02 00     	ldy	#$2
  3568 00:0F1D: B7 09        	lda	[<R2],Y
  3569 00:0F1F: 48           	pha
  3570 00:0F20: A7 09        	lda	[<R2]
  3571 00:0F22: 48           	pha
  3572 00:0F23: A9 04 00     	lda	#$4
  3573                        	xref	~~~lasl
  3574 00:0F26: 22 xx xx xx  	jsl	~~~lasl
  3575 00:0F2A: 85 01        	sta	<R0
  3576 00:0F2C: 86 03        	stx	<R0+2
  3577 00:0F2E: 18           	clc
  3578 00:0F2F: AD xx xx     	lda	|~~umm_heap
  3579 00:0F32: 65 01        	adc	<R0
  3580 00:0F34: 85 05        	sta	<R1
  3581 00:0F36: AD xx xx     	lda	|~~umm_heap+2
  3582 00:0F39: 65 03        	adc	<R0+2
  3583 00:0F3B: 85 07        	sta	<R1+2
  3584 00:0F3D: A7 05        	lda	[<R1]
  3585 00:0F3F: 29 00 80     	and	#<$8000
  3586 00:0F42: D0 03        	bne	L125
  3587 00:0F44: 82 44 01     	brl	L10045
  3588                        L125:
  3589                        	.line	170
  3590                        ;		/*
  3591                        ;		 * The next block is a free block, so as
                    similate up and remove it from
  3592                        ;		 * the free list
  3593                        ;		 */
  3594                        ;
  3595                        ;		//DBGLOG_DEBUG( "Assimilate up to next b
                    lock, which is FREE\n" );
  3596                        ;		/* Disconnect the next block from the FR
                    EE list */
  3597                        ;
  3598                        ;		umm_disconnect_from_free_list(UMM_NBLOCK
                    (c));
  3599                        	.line	179
  3600 00:0F47: A5 14        	lda	<L122+c_0
  3601 00:0F49: 85 01        	sta	<R0
  3602 00:0F4B: A5 16        	lda	<L122+c_0+2
  3603 00:0F4D: 85 03        	sta	<R0+2
  3604 00:0F4F: 06 01        	asl	<R0
  Thu Dec  3 2020 22:25                                                Page 69


  3605 00:0F51: 26 03        	rol	<R0+2
  3606 00:0F53: 06 01        	asl	<R0
  3607 00:0F55: 26 03        	rol	<R0+2
  3608 00:0F57: 06 01        	asl	<R0
  3609 00:0F59: 26 03        	rol	<R0+2
  3610 00:0F5B: 06 01        	asl	<R0
  3611 00:0F5D: 26 03        	rol	<R0+2
  3612 00:0F5F: 18           	clc
  3613 00:0F60: AD xx xx     	lda	|~~umm_heap
  3614 00:0F63: 65 01        	adc	<R0
  3615 00:0F65: 85 05        	sta	<R1
  3616 00:0F67: AD xx xx     	lda	|~~umm_heap+2
  3617 00:0F6A: 65 03        	adc	<R0+2
  3618 00:0F6C: 85 07        	sta	<R1+2
  3619 00:0F6E: A0 02 00     	ldy	#$2
  3620 00:0F71: B7 05        	lda	[<R1],Y
  3621 00:0F73: 48           	pha
  3622 00:0F74: A7 05        	lda	[<R1]
  3623 00:0F76: 48           	pha
  3624 00:0F77: 22 xx xx xx  	jsl	~~umm_disconnect_from_free_list
  3625                        ;
  3626                        ;		/* Assimilate the next block with this o
                    ne */
  3627                        ;
  3628                        ;		UMM_PBLOCK(UMM_NBLOCK(UMM_NBLOCK(c)) & U
                    MM_BLOCKNO_MASK) = c;
  3629                        	.line	183
  3630 00:0F7B: A5 14        	lda	<L122+c_0
  3631 00:0F7D: 85 09        	sta	<R2
  3632 00:0F7F: A5 16        	lda	<L122+c_0+2
  3633 00:0F81: 85 0B        	sta	<R2+2
  3634 00:0F83: 06 09        	asl	<R2
  3635 00:0F85: 26 0B        	rol	<R2+2
  3636 00:0F87: 06 09        	asl	<R2
  3637 00:0F89: 26 0B        	rol	<R2+2
  3638 00:0F8B: 06 09        	asl	<R2
  3639 00:0F8D: 26 0B        	rol	<R2+2
  3640 00:0F8F: 06 09        	asl	<R2
  3641 00:0F91: 26 0B        	rol	<R2+2
  3642 00:0F93: 18           	clc
  3643 00:0F94: AD xx xx     	lda	|~~umm_heap
  3644 00:0F97: 65 09        	adc	<R2
  3645 00:0F99: 85 0D        	sta	<R3
  3646 00:0F9B: AD xx xx     	lda	|~~umm_heap+2
  3647 00:0F9E: 65 0B        	adc	<R2+2
  3648 00:0FA0: 85 0F        	sta	<R3+2
  3649 00:0FA2: A0 02 00     	ldy	#$2
  3650 00:0FA5: B7 0D        	lda	[<R3],Y
  3651 00:0FA7: 48           	pha
  3652 00:0FA8: A7 0D        	lda	[<R3]
  3653 00:0FAA: 48           	pha
  3654 00:0FAB: A9 04 00     	lda	#$4
  3655                        	xref	~~~lasl
  3656 00:0FAE: 22 xx xx xx  	jsl	~~~lasl
  3657 00:0FB2: 85 05        	sta	<R1
  3658 00:0FB4: 86 07        	stx	<R1+2
  3659 00:0FB6: 18           	clc
  3660 00:0FB7: AD xx xx     	lda	|~~umm_heap
  Thu Dec  3 2020 22:25                                                Page 70


  3661 00:0FBA: 65 05        	adc	<R1
  3662 00:0FBC: 85 09        	sta	<R2
  3663 00:0FBE: AD xx xx     	lda	|~~umm_heap+2
  3664 00:0FC1: 65 07        	adc	<R1+2
  3665 00:0FC3: 85 0B        	sta	<R2+2
  3666 00:0FC5: A7 09        	lda	[<R2]
  3667 00:0FC7: 29 FF 7F     	and	#<$7fff
  3668 00:0FCA: 85 05        	sta	<R1
  3669 00:0FCC: 64 07        	stz	<R1+2
  3670 00:0FCE: D4 07        	pei	<R1+2
  3671 00:0FD0: D4 05        	pei	<R1
  3672 00:0FD2: A9 04 00     	lda	#$4
  3673                        	xref	~~~lasl
  3674 00:0FD5: 22 xx xx xx  	jsl	~~~lasl
  3675 00:0FD9: 85 01        	sta	<R0
  3676 00:0FDB: 86 03        	stx	<R0+2
  3677 00:0FDD: 18           	clc
  3678 00:0FDE: A9 04 00     	lda	#$4
  3679 00:0FE1: 6D xx xx     	adc	|~~umm_heap
  3680 00:0FE4: 85 09        	sta	<R2
  3681 00:0FE6: A9 00 00     	lda	#$0
  3682 00:0FE9: 6D xx xx     	adc	|~~umm_heap+2
  3683 00:0FEC: 85 0B        	sta	<R2+2
  3684 00:0FEE: 18           	clc
  3685 00:0FEF: A5 09        	lda	<R2
  3686 00:0FF1: 65 01        	adc	<R0
  3687 00:0FF3: 85 0D        	sta	<R3
  3688 00:0FF5: A5 0B        	lda	<R2+2
  3689 00:0FF7: 65 03        	adc	<R0+2
  3690 00:0FF9: 85 0F        	sta	<R3+2
  3691 00:0FFB: A5 14        	lda	<L122+c_0
  3692 00:0FFD: 87 0D        	sta	[<R3]
  3693 00:0FFF: A5 16        	lda	<L122+c_0+2
  3694 00:1001: A0 02 00     	ldy	#$2
  3695 00:1004: 97 0D        	sta	[<R3],Y
  3696                        ;		UMM_NBLOCK(c) = UMM_NBLOCK(UMM_NBLOCK(c)
                    ) & UMM_BLOCKNO_MASK;
  3697                        	.line	184
  3698 00:1006: A5 14        	lda	<L122+c_0
  3699 00:1008: 85 01        	sta	<R0
  3700 00:100A: A5 16        	lda	<L122+c_0+2
  3701 00:100C: 85 03        	sta	<R0+2
  3702 00:100E: 06 01        	asl	<R0
  3703 00:1010: 26 03        	rol	<R0+2
  3704 00:1012: 06 01        	asl	<R0
  3705 00:1014: 26 03        	rol	<R0+2
  3706 00:1016: 06 01        	asl	<R0
  3707 00:1018: 26 03        	rol	<R0+2
  3708 00:101A: 06 01        	asl	<R0
  3709 00:101C: 26 03        	rol	<R0+2
  3710 00:101E: 18           	clc
  3711 00:101F: AD xx xx     	lda	|~~umm_heap
  3712 00:1022: 65 01        	adc	<R0
  3713 00:1024: 85 05        	sta	<R1
  3714 00:1026: AD xx xx     	lda	|~~umm_heap+2
  3715 00:1029: 65 03        	adc	<R0+2
  3716 00:102B: 85 07        	sta	<R1+2
  3717 00:102D: A5 14        	lda	<L122+c_0
  Thu Dec  3 2020 22:25                                                Page 71


  3718 00:102F: 85 09        	sta	<R2
  3719 00:1031: A5 16        	lda	<L122+c_0+2
  3720 00:1033: 85 0B        	sta	<R2+2
  3721 00:1035: 06 09        	asl	<R2
  3722 00:1037: 26 0B        	rol	<R2+2
  3723 00:1039: 06 09        	asl	<R2
  3724 00:103B: 26 0B        	rol	<R2+2
  3725 00:103D: 06 09        	asl	<R2
  3726 00:103F: 26 0B        	rol	<R2+2
  3727 00:1041: 06 09        	asl	<R2
  3728 00:1043: 26 0B        	rol	<R2+2
  3729 00:1045: 18           	clc
  3730 00:1046: AD xx xx     	lda	|~~umm_heap
  3731 00:1049: 65 09        	adc	<R2
  3732 00:104B: 85 0D        	sta	<R3
  3733 00:104D: AD xx xx     	lda	|~~umm_heap+2
  3734 00:1050: 65 0B        	adc	<R2+2
  3735 00:1052: 85 0F        	sta	<R3+2
  3736 00:1054: A0 02 00     	ldy	#$2
  3737 00:1057: B7 0D        	lda	[<R3],Y
  3738 00:1059: 48           	pha
  3739 00:105A: A7 0D        	lda	[<R3]
  3740 00:105C: 48           	pha
  3741 00:105D: A9 04 00     	lda	#$4
  3742                        	xref	~~~lasl
  3743 00:1060: 22 xx xx xx  	jsl	~~~lasl
  3744 00:1064: 85 01        	sta	<R0
  3745 00:1066: 86 03        	stx	<R0+2
  3746 00:1068: 18           	clc
  3747 00:1069: AD xx xx     	lda	|~~umm_heap
  3748 00:106C: 65 01        	adc	<R0
  3749 00:106E: 85 09        	sta	<R2
  3750 00:1070: AD xx xx     	lda	|~~umm_heap+2
  3751 00:1073: 65 03        	adc	<R0+2
  3752 00:1075: 85 0B        	sta	<R2+2
  3753 00:1077: A7 09        	lda	[<R2]
  3754 00:1079: 29 FF 7F     	and	#<$7fff
  3755 00:107C: 85 01        	sta	<R0
  3756 00:107E: 64 03        	stz	<R0+2
  3757 00:1080: A5 01        	lda	<R0
  3758 00:1082: 87 05        	sta	[<R1]
  3759 00:1084: A5 03        	lda	<R0+2
  3760 00:1086: A0 02 00     	ldy	#$2
  3761 00:1089: 97 05        	sta	[<R1],Y
  3762                        ;	}
  3763                        	.line	185
  3764                        ;}
  3765                        L10045:
  3766                        	.line	186
  3767                        L126:
  3768 00:108B: A5 12        	lda	<L122+2
  3769 00:108D: 85 16        	sta	<L122+2+4
  3770 00:108F: A5 11        	lda	<L122+1
  3771 00:1091: 85 15        	sta	<L122+1+4
  3772 00:1093: 2B           	pld
  3773 00:1094: 3B           	tsc
  3774 00:1095: 18           	clc
  3775 00:1096: 69 14 00     	adc	#L122+4
  Thu Dec  3 2020 22:25                                                Page 72


  3776 00:1099: 1B           	tcs
  3777 00:109A: 6B           	rtl
  3778                        	.endblock	186
  3779             00000010   L122	equ	16
  3780             00000011   L123	equ	17
  3781                        	ends
  3782                        	efunc
  3783                        	.endfunc	186,17,16
  3784                        	.line	186
  3785                        ;
  3786                        ;/* ----------------------------------------------
                    --------------------------
  3787                        ; * The umm_assimilate_down() function assumes tha
                    t UMM_NBLOCK(c) does NOT
  3788                        ; * have the UMM_FREELIST_MASK bit set!
  3789                        ; */
  3790                        ;
  3791                        ;static unsigned long umm_assimilate_down(unsigned
                     long c,
  3792                        ;		unsigned long freemask)
  3793                        ;{
  3794                        	.line	193
  3795                        	.line	195
  3796                        	code
  3797                        	func
  3798                        	.function	195
  3799                        ~~umm_assimilate_down:
  3800                        	longa	on
  3801                        	longi	on
  3802 00:109B: 3B           	tsc
  3803 00:109C: 38           	sec
  3804 00:109D: E9 10 00     	sbc	#L127
  3805 00:10A0: 1B           	tcs
  3806 00:10A1: 0B           	phd
  3807 00:10A2: 5B           	tcd
  3808             00000004   c_0	set	4
  3809             00000008   freemask_0	set	8
  3810                        	.block	195
  3811                        ;
  3812                        ;	UMM_NBLOCK(UMM_PBLOCK(c)) = UMM_NBLOCK(c) | free
                    mask;
  3813                        	.sym	c,4,18,6,32
  3814                        	.sym	freemask,8,18,6,32
  3815                        	.line	197
  3816 00:10A3: A5 14        	lda	<L127+c_0
  3817 00:10A5: 85 05        	sta	<R1
  3818 00:10A7: A5 16        	lda	<L127+c_0+2
  3819 00:10A9: 85 07        	sta	<R1+2
  3820 00:10AB: 06 05        	asl	<R1
  3821 00:10AD: 26 07        	rol	<R1+2
  3822 00:10AF: 06 05        	asl	<R1
  3823 00:10B1: 26 07        	rol	<R1+2
  3824 00:10B3: 06 05        	asl	<R1
  3825 00:10B5: 26 07        	rol	<R1+2
  3826 00:10B7: 06 05        	asl	<R1
  3827 00:10B9: 26 07        	rol	<R1+2
  3828 00:10BB: 18           	clc
  3829 00:10BC: A9 04 00     	lda	#$4
  Thu Dec  3 2020 22:25                                                Page 73


  3830 00:10BF: 6D xx xx     	adc	|~~umm_heap
  3831 00:10C2: 85 09        	sta	<R2
  3832 00:10C4: A9 00 00     	lda	#$0
  3833 00:10C7: 6D xx xx     	adc	|~~umm_heap+2
  3834 00:10CA: 85 0B        	sta	<R2+2
  3835 00:10CC: 18           	clc
  3836 00:10CD: A5 09        	lda	<R2
  3837 00:10CF: 65 05        	adc	<R1
  3838 00:10D1: 85 0D        	sta	<R3
  3839 00:10D3: A5 0B        	lda	<R2+2
  3840 00:10D5: 65 07        	adc	<R1+2
  3841 00:10D7: 85 0F        	sta	<R3+2
  3842 00:10D9: A0 02 00     	ldy	#$2
  3843 00:10DC: B7 0D        	lda	[<R3],Y
  3844 00:10DE: 48           	pha
  3845 00:10DF: A7 0D        	lda	[<R3]
  3846 00:10E1: 48           	pha
  3847 00:10E2: A9 04 00     	lda	#$4
  3848                        	xref	~~~lasl
  3849 00:10E5: 22 xx xx xx  	jsl	~~~lasl
  3850 00:10E9: 85 01        	sta	<R0
  3851 00:10EB: 86 03        	stx	<R0+2
  3852 00:10ED: 18           	clc
  3853 00:10EE: AD xx xx     	lda	|~~umm_heap
  3854 00:10F1: 65 01        	adc	<R0
  3855 00:10F3: 85 05        	sta	<R1
  3856 00:10F5: AD xx xx     	lda	|~~umm_heap+2
  3857 00:10F8: 65 03        	adc	<R0+2
  3858 00:10FA: 85 07        	sta	<R1+2
  3859 00:10FC: A5 14        	lda	<L127+c_0
  3860 00:10FE: 85 01        	sta	<R0
  3861 00:1100: A5 16        	lda	<L127+c_0+2
  3862 00:1102: 85 03        	sta	<R0+2
  3863 00:1104: 06 01        	asl	<R0
  3864 00:1106: 26 03        	rol	<R0+2
  3865 00:1108: 06 01        	asl	<R0
  3866 00:110A: 26 03        	rol	<R0+2
  3867 00:110C: 06 01        	asl	<R0
  3868 00:110E: 26 03        	rol	<R0+2
  3869 00:1110: 06 01        	asl	<R0
  3870 00:1112: 26 03        	rol	<R0+2
  3871 00:1114: 18           	clc
  3872 00:1115: AD xx xx     	lda	|~~umm_heap
  3873 00:1118: 65 01        	adc	<R0
  3874 00:111A: 85 09        	sta	<R2
  3875 00:111C: AD xx xx     	lda	|~~umm_heap+2
  3876 00:111F: 65 03        	adc	<R0+2
  3877 00:1121: 85 0B        	sta	<R2+2
  3878 00:1123: A5 18        	lda	<L127+freemask_0
  3879 00:1125: 07 09        	ora	[<R2]
  3880 00:1127: 85 01        	sta	<R0
  3881 00:1129: A5 1A        	lda	<L127+freemask_0+2
  3882 00:112B: A0 02 00     	ldy	#$2
  3883 00:112E: 17 09        	ora	[<R2],Y
  3884 00:1130: 85 03        	sta	<R0+2
  3885 00:1132: A5 01        	lda	<R0
  3886 00:1134: 87 05        	sta	[<R1]
  3887 00:1136: A5 03        	lda	<R0+2
  Thu Dec  3 2020 22:25                                                Page 74


  3888 00:1138: A0 02 00     	ldy	#$2
  3889 00:113B: 97 05        	sta	[<R1],Y
  3890                        ;	UMM_PBLOCK(UMM_NBLOCK(c)) = UMM_PBLOCK(c);
  3891                        	.line	198
  3892 00:113D: A5 14        	lda	<L127+c_0
  3893 00:113F: 85 05        	sta	<R1
  3894 00:1141: A5 16        	lda	<L127+c_0+2
  3895 00:1143: 85 07        	sta	<R1+2
  3896 00:1145: 06 05        	asl	<R1
  3897 00:1147: 26 07        	rol	<R1+2
  3898 00:1149: 06 05        	asl	<R1
  3899 00:114B: 26 07        	rol	<R1+2
  3900 00:114D: 06 05        	asl	<R1
  3901 00:114F: 26 07        	rol	<R1+2
  3902 00:1151: 06 05        	asl	<R1
  3903 00:1153: 26 07        	rol	<R1+2
  3904 00:1155: 18           	clc
  3905 00:1156: AD xx xx     	lda	|~~umm_heap
  3906 00:1159: 65 05        	adc	<R1
  3907 00:115B: 85 09        	sta	<R2
  3908 00:115D: AD xx xx     	lda	|~~umm_heap+2
  3909 00:1160: 65 07        	adc	<R1+2
  3910 00:1162: 85 0B        	sta	<R2+2
  3911 00:1164: A0 02 00     	ldy	#$2
  3912 00:1167: B7 09        	lda	[<R2],Y
  3913 00:1169: 48           	pha
  3914 00:116A: A7 09        	lda	[<R2]
  3915 00:116C: 48           	pha
  3916 00:116D: A9 04 00     	lda	#$4
  3917                        	xref	~~~lasl
  3918 00:1170: 22 xx xx xx  	jsl	~~~lasl
  3919 00:1174: 85 01        	sta	<R0
  3920 00:1176: 86 03        	stx	<R0+2
  3921 00:1178: 18           	clc
  3922 00:1179: A9 04 00     	lda	#$4
  3923 00:117C: 6D xx xx     	adc	|~~umm_heap
  3924 00:117F: 85 05        	sta	<R1
  3925 00:1181: A9 00 00     	lda	#$0
  3926 00:1184: 6D xx xx     	adc	|~~umm_heap+2
  3927 00:1187: 85 07        	sta	<R1+2
  3928 00:1189: 18           	clc
  3929 00:118A: A5 05        	lda	<R1
  3930 00:118C: 65 01        	adc	<R0
  3931 00:118E: 85 09        	sta	<R2
  3932 00:1190: A5 07        	lda	<R1+2
  3933 00:1192: 65 03        	adc	<R0+2
  3934 00:1194: 85 0B        	sta	<R2+2
  3935 00:1196: A5 14        	lda	<L127+c_0
  3936 00:1198: 85 01        	sta	<R0
  3937 00:119A: A5 16        	lda	<L127+c_0+2
  3938 00:119C: 85 03        	sta	<R0+2
  3939 00:119E: 06 01        	asl	<R0
  3940 00:11A0: 26 03        	rol	<R0+2
  3941 00:11A2: 06 01        	asl	<R0
  3942 00:11A4: 26 03        	rol	<R0+2
  3943 00:11A6: 06 01        	asl	<R0
  3944 00:11A8: 26 03        	rol	<R0+2
  3945 00:11AA: 06 01        	asl	<R0
  Thu Dec  3 2020 22:25                                                Page 75


  3946 00:11AC: 26 03        	rol	<R0+2
  3947 00:11AE: 18           	clc
  3948 00:11AF: A9 04 00     	lda	#$4
  3949 00:11B2: 6D xx xx     	adc	|~~umm_heap
  3950 00:11B5: 85 05        	sta	<R1
  3951 00:11B7: A9 00 00     	lda	#$0
  3952 00:11BA: 6D xx xx     	adc	|~~umm_heap+2
  3953 00:11BD: 85 07        	sta	<R1+2
  3954 00:11BF: 18           	clc
  3955 00:11C0: A5 05        	lda	<R1
  3956 00:11C2: 65 01        	adc	<R0
  3957 00:11C4: 85 0D        	sta	<R3
  3958 00:11C6: A5 07        	lda	<R1+2
  3959 00:11C8: 65 03        	adc	<R0+2
  3960 00:11CA: 85 0F        	sta	<R3+2
  3961 00:11CC: A7 0D        	lda	[<R3]
  3962 00:11CE: 87 09        	sta	[<R2]
  3963 00:11D0: A0 02 00     	ldy	#$2
  3964 00:11D3: B7 0D        	lda	[<R3],Y
  3965 00:11D5: A0 02 00     	ldy	#$2
  3966 00:11D8: 97 09        	sta	[<R2],Y
  3967                        ;
  3968                        ;	return (UMM_PBLOCK(c));
  3969                        	.line	200
  3970 00:11DA: A5 14        	lda	<L127+c_0
  3971 00:11DC: 85 01        	sta	<R0
  3972 00:11DE: A5 16        	lda	<L127+c_0+2
  3973 00:11E0: 85 03        	sta	<R0+2
  3974 00:11E2: 06 01        	asl	<R0
  3975 00:11E4: 26 03        	rol	<R0+2
  3976 00:11E6: 06 01        	asl	<R0
  3977 00:11E8: 26 03        	rol	<R0+2
  3978 00:11EA: 06 01        	asl	<R0
  3979 00:11EC: 26 03        	rol	<R0+2
  3980 00:11EE: 06 01        	asl	<R0
  3981 00:11F0: 26 03        	rol	<R0+2
  3982 00:11F2: 18           	clc
  3983 00:11F3: A9 04 00     	lda	#$4
  3984 00:11F6: 6D xx xx     	adc	|~~umm_heap
  3985 00:11F9: 85 05        	sta	<R1
  3986 00:11FB: A9 00 00     	lda	#$0
  3987 00:11FE: 6D xx xx     	adc	|~~umm_heap+2
  3988 00:1201: 85 07        	sta	<R1+2
  3989 00:1203: 18           	clc
  3990 00:1204: A5 05        	lda	<R1
  3991 00:1206: 65 01        	adc	<R0
  3992 00:1208: 85 09        	sta	<R2
  3993 00:120A: A5 07        	lda	<R1+2
  3994 00:120C: 65 03        	adc	<R0+2
  3995 00:120E: 85 0B        	sta	<R2+2
  3996 00:1210: A0 02 00     	ldy	#$2
  3997 00:1213: B7 09        	lda	[<R2],Y
  3998 00:1215: AA           	tax
  3999 00:1216: A7 09        	lda	[<R2]
  4000                        L130:
  4001 00:1218: A8           	tay
  4002 00:1219: A5 12        	lda	<L127+2
  4003 00:121B: 85 1A        	sta	<L127+2+8
  Thu Dec  3 2020 22:25                                                Page 76


  4004 00:121D: A5 11        	lda	<L127+1
  4005 00:121F: 85 19        	sta	<L127+1+8
  4006 00:1221: 2B           	pld
  4007 00:1222: 3B           	tsc
  4008 00:1223: 18           	clc
  4009 00:1224: 69 18 00     	adc	#L127+8
  4010 00:1227: 1B           	tcs
  4011 00:1228: 98           	tya
  4012 00:1229: 6B           	rtl
  4013                        ;}
  4014                        	.line	201
  4015                        	.endblock	201
  4016             00000010   L127	equ	16
  4017             00000011   L128	equ	17
  4018                        	ends
  4019                        	efunc
  4020                        	.endfunc	201,17,16
  4021                        	.line	201
  4022                        ;
  4023                        ;/* ----------------------------------------------
                    --------------------------- */
  4024                        ;
  4025                        ;void umm_init(void)
  4026                        ;{
  4027                        	.line	205
  4028                        	.line	206
  4029                        	code
  4030                        	xdef	~~umm_init
  4031                        	func
  4032                        	.function	206
  4033                        ~~umm_init:
  4034                        	longa	on
  4035                        	longi	on
  4036 00:122A: 3B           	tsc
  4037 00:122B: 38           	sec
  4038 00:122C: E9 1C 00     	sbc	#L131
  4039 00:122F: 1B           	tcs
  4040 00:1230: 0B           	phd
  4041 00:1231: 5B           	tcd
  4042                        	.block	206
  4043                        ;	unsigned long i = 0L;
  4044                        ;	/* init heap pointer and size, and memset it to 
                    0 */
  4045                        ;	umm_heap = (umm_block *) UMM_MALLOC_CFG_HEAP_ADD
                    R;
  4046             00000000   i_1	set	0
  4047                        	.sym	i,0,18,1,32
  4048 00:1232: 64 0D        	stz	<L132+i_1
  4049 00:1234: 64 0F        	stz	<L132+i_1+2
  4050                        	.line	209
  4051 00:1236: A9 00 00     	lda	#$0
  4052 00:1239: 8D xx xx     	sta	|~~umm_heap
  4053 00:123C: A9 10 00     	lda	#$10
  4054 00:123F: 8D xx xx     	sta	|~~umm_heap+2
  4055                        ;	umm_numblocks = (UMM_MALLOC_CFG_HEAP_SIZE / size
                    of(umm_block));
  4056                        	.line	210
  4057 00:1242: A9 00 50     	lda	#$5000
  Thu Dec  3 2020 22:25                                                Page 77


  4058 00:1245: 8D xx xx     	sta	|~~umm_numblocks
  4059 00:1248: A9 00 00     	lda	#$0
  4060 00:124B: 8D xx xx     	sta	|~~umm_numblocks+2
  4061                        ;	//memset(umm_heap, 0x00, UMM_MALLOC_CFG_HEAP_SIZ
                    E);
  4062                        ;	for(i=0;i<UMM_MALLOC_CFG_HEAP_SIZE;i++)
  4063                        	.line	212
  4064 00:124E: 64 0D        	stz	<L132+i_1
  4065 00:1250: 64 0F        	stz	<L132+i_1+2
  4066                        L10048:
  4067                        ;		((char FAR*)umm_heap)[i] = 0x00;
  4068                        	.line	213
  4069 00:1252: 18           	clc
  4070 00:1253: AD xx xx     	lda	|~~umm_heap
  4071 00:1256: 65 0D        	adc	<L132+i_1
  4072 00:1258: 85 01        	sta	<R0
  4073 00:125A: AD xx xx     	lda	|~~umm_heap+2
  4074 00:125D: 65 0F        	adc	<L132+i_1+2
  4075 00:125F: 85 03        	sta	<R0+2
  4076 00:1261: E2 20        	sep	#$20
  4077                        	longa	off
  4078 00:1263: A9 00        	lda	#$0
  4079 00:1265: 87 01        	sta	[<R0]
  4080 00:1267: C2 20        	rep	#$20
  4081                        	longa	on
  4082                        L10046:
  4083 00:1269: E6 0D        	inc	<L132+i_1
  4084 00:126B: D0 02        	bne	L134
  4085 00:126D: E6 0F        	inc	<L132+i_1+2
  4086                        L134:
  4087 00:126F: A5 0D        	lda	<L132+i_1
  4088 00:1271: C9 00 00     	cmp	#<$50000
  4089 00:1274: A5 0F        	lda	<L132+i_1+2
  4090 00:1276: E9 05 00     	sbc	#^$50000
  4091 00:1279: B0 03        	bcs	L135
  4092 00:127B: 82 D4 FF     	brl	L10048
  4093                        L135:
  4094                        L10047:
  4095                        ;
  4096                        ;	/* setup initial blank heap structure */
  4097                        ;	{
  4098                        	.line	216
  4099                        ;		/* index of the 0th `umm_block` */
  4100                        ;		const unsigned long block_0th = 0;
  4101                        ;		/* index of the 1st `umm_block` */
  4102                        ;		const unsigned long block_1th = 1;
  4103                        ;		/* index of the latest `umm_block` */
  4104                        ;		const unsigned long block_last = UMM_NUM
                    BLOCKS - 1;
  4105                        ;
  4106                        ;		/* setup the 0th `umm_block`, which just
                     points to the 1st */
  4107                        ;		UMM_NBLOCK(block_0th) = block_1th;
  4108                        	.block	225
  4109             00000004   block_0th_2	set	4
  4110             00000008   block_1th_2	set	8
  4111             0000000C   block_last_2	set	12
  4112                        	.sym	block_0th,4,18,1,32
  Thu Dec  3 2020 22:25                                                Page 78


  4113                        	.sym	block_1th,8,18,1,32
  4114                        	.sym	block_last,12,18,1,32
  4115 00:127E: 64 11        	stz	<L132+block_0th_2
  4116 00:1280: 64 13        	stz	<L132+block_0th_2+2
  4117 00:1282: A9 01 00     	lda	#$1
  4118 00:1285: 85 15        	sta	<L132+block_1th_2
  4119 00:1287: A9 00 00     	lda	#$0
  4120 00:128A: 85 17        	sta	<L132+block_1th_2+2
  4121 00:128C: 18           	clc
  4122 00:128D: A9 FF FF     	lda	#$ffff
  4123 00:1290: 6D xx xx     	adc	|~~umm_numblocks
  4124 00:1293: 85 19        	sta	<L132+block_last_2
  4125 00:1295: A9 FF FF     	lda	#$ffff
  4126 00:1298: 6D xx xx     	adc	|~~umm_numblocks+2
  4127 00:129B: 85 1B        	sta	<L132+block_last_2+2
  4128                        	.line	225
  4129 00:129D: AD xx xx     	lda	|~~umm_heap
  4130 00:12A0: 85 01        	sta	<R0
  4131 00:12A2: AD xx xx     	lda	|~~umm_heap+2
  4132 00:12A5: 85 03        	sta	<R0+2
  4133 00:12A7: A9 01 00     	lda	#$1
  4134 00:12AA: 87 01        	sta	[<R0]
  4135 00:12AC: A9 00 00     	lda	#$0
  4136 00:12AF: A0 02 00     	ldy	#$2
  4137 00:12B2: 97 01        	sta	[<R0],Y
  4138                        ;		UMM_NFREE(block_0th) = block_1th;
  4139                        	.line	226
  4140 00:12B4: AD xx xx     	lda	|~~umm_heap
  4141 00:12B7: 85 01        	sta	<R0
  4142 00:12B9: AD xx xx     	lda	|~~umm_heap+2
  4143 00:12BC: 85 03        	sta	<R0+2
  4144 00:12BE: A9 01 00     	lda	#$1
  4145 00:12C1: A0 08 00     	ldy	#$8
  4146 00:12C4: 97 01        	sta	[<R0],Y
  4147 00:12C6: A9 00 00     	lda	#$0
  4148 00:12C9: A0 0A 00     	ldy	#$a
  4149 00:12CC: 97 01        	sta	[<R0],Y
  4150                        ;		UMM_PFREE(block_0th) = block_1th;
  4151                        	.line	227
  4152 00:12CE: AD xx xx     	lda	|~~umm_heap
  4153 00:12D1: 85 01        	sta	<R0
  4154 00:12D3: AD xx xx     	lda	|~~umm_heap+2
  4155 00:12D6: 85 03        	sta	<R0+2
  4156 00:12D8: A9 01 00     	lda	#$1
  4157 00:12DB: A0 0C 00     	ldy	#$c
  4158 00:12DE: 97 01        	sta	[<R0],Y
  4159 00:12E0: A9 00 00     	lda	#$0
  4160 00:12E3: A0 0E 00     	ldy	#$e
  4161 00:12E6: 97 01        	sta	[<R0],Y
  4162                        ;
  4163                        ;		/*
  4164                        ;		 * Now, we need to set the whole heap sp
                    ace as a huge free block. We should
  4165                        ;		 * not touch the 0th `umm_block`, since 
                    it's special: the 0th `umm_block`
  4166                        ;		 * is the head of the free block list. I
                    t's a part of the heap invariant.
  4167                        ;		 *
  Thu Dec  3 2020 22:25                                                Page 79


  4168                        ;		 * See the detailed explanation at the b
                    eginning of the file.
  4169                        ;		 */
  4170                        ;
  4171                        ;		/*
  4172                        ;		 * 1th `umm_block` has pointers:
  4173                        ;		 *
  4174                        ;		 * - next `umm_block`: the latest one
  4175                        ;		 * - prev `umm_block`: the 0th
  4176                        ;		 *
  4177                        ;		 * Plus, it's a free `umm_block`, so we 
                    need to apply `UMM_FREELIST_MASK`
  4178                        ;		 *
  4179                        ;		 * And it's the last free block, so the 
                    next free block is 0.
  4180                        ;		 */
  4181                        ;		UMM_NBLOCK(block_1th) = block_last | UMM
                    _FREELIST_MASK;
  4182                        	.line	247
  4183 00:12E8: AD xx xx     	lda	|~~umm_heap
  4184 00:12EB: 85 01        	sta	<R0
  4185 00:12ED: AD xx xx     	lda	|~~umm_heap+2
  4186 00:12F0: 85 03        	sta	<R0+2
  4187 00:12F2: A5 19        	lda	<L132+block_last_2
  4188 00:12F4: 09 00 80     	ora	#<$8000
  4189 00:12F7: 85 05        	sta	<R1
  4190 00:12F9: A5 1B        	lda	<L132+block_last_2+2
  4191 00:12FB: 85 07        	sta	<R1+2
  4192 00:12FD: A5 05        	lda	<R1
  4193 00:12FF: A0 10 00     	ldy	#$10
  4194 00:1302: 97 01        	sta	[<R0],Y
  4195 00:1304: A5 07        	lda	<R1+2
  4196 00:1306: A0 12 00     	ldy	#$12
  4197 00:1309: 97 01        	sta	[<R0],Y
  4198                        ;		UMM_NFREE(block_1th) = 0;
  4199                        	.line	248
  4200 00:130B: AD xx xx     	lda	|~~umm_heap
  4201 00:130E: 85 01        	sta	<R0
  4202 00:1310: AD xx xx     	lda	|~~umm_heap+2
  4203 00:1313: 85 03        	sta	<R0+2
  4204 00:1315: A9 00 00     	lda	#$0
  4205 00:1318: A0 18 00     	ldy	#$18
  4206 00:131B: 97 01        	sta	[<R0],Y
  4207 00:131D: A9 00 00     	lda	#$0
  4208 00:1320: A0 1A 00     	ldy	#$1a
  4209 00:1323: 97 01        	sta	[<R0],Y
  4210                        ;		UMM_PBLOCK(block_1th) = block_0th;
  4211                        	.line	249
  4212 00:1325: AD xx xx     	lda	|~~umm_heap
  4213 00:1328: 85 01        	sta	<R0
  4214 00:132A: AD xx xx     	lda	|~~umm_heap+2
  4215 00:132D: 85 03        	sta	<R0+2
  4216 00:132F: A9 00 00     	lda	#$0
  4217 00:1332: A0 14 00     	ldy	#$14
  4218 00:1335: 97 01        	sta	[<R0],Y
  4219 00:1337: A9 00 00     	lda	#$0
  4220 00:133A: A0 16 00     	ldy	#$16
  4221 00:133D: 97 01        	sta	[<R0],Y
  Thu Dec  3 2020 22:25                                                Page 80


  4222                        ;		UMM_PFREE(block_1th) = block_0th;
  4223                        	.line	250
  4224 00:133F: AD xx xx     	lda	|~~umm_heap
  4225 00:1342: 85 01        	sta	<R0
  4226 00:1344: AD xx xx     	lda	|~~umm_heap+2
  4227 00:1347: 85 03        	sta	<R0+2
  4228 00:1349: A9 00 00     	lda	#$0
  4229 00:134C: A0 1C 00     	ldy	#$1c
  4230 00:134F: 97 01        	sta	[<R0],Y
  4231 00:1351: A9 00 00     	lda	#$0
  4232 00:1354: A0 1E 00     	ldy	#$1e
  4233 00:1357: 97 01        	sta	[<R0],Y
  4234                        ;
  4235                        ;		/*
  4236                        ;		 * latest `umm_block` has pointers:
  4237                        ;		 *
  4238                        ;		 * - next `umm_block`: 0 (meaning, there
                     are no more `umm_blocks`)
  4239                        ;		 * - prev `umm_block`: the 1st
  4240                        ;		 *
  4241                        ;		 * It's not a free block, so we don't to
                    uch NFREE / PFREE at all.
  4242                        ;		 */
  4243                        ;		UMM_NBLOCK(block_last) = 0;
  4244                        	.line	260
  4245 00:1359: A5 19        	lda	<L132+block_last_2
  4246 00:135B: 85 01        	sta	<R0
  4247 00:135D: A5 1B        	lda	<L132+block_last_2+2
  4248 00:135F: 85 03        	sta	<R0+2
  4249 00:1361: 06 01        	asl	<R0
  4250 00:1363: 26 03        	rol	<R0+2
  4251 00:1365: 06 01        	asl	<R0
  4252 00:1367: 26 03        	rol	<R0+2
  4253 00:1369: 06 01        	asl	<R0
  4254 00:136B: 26 03        	rol	<R0+2
  4255 00:136D: 06 01        	asl	<R0
  4256 00:136F: 26 03        	rol	<R0+2
  4257 00:1371: 18           	clc
  4258 00:1372: AD xx xx     	lda	|~~umm_heap
  4259 00:1375: 65 01        	adc	<R0
  4260 00:1377: 85 05        	sta	<R1
  4261 00:1379: AD xx xx     	lda	|~~umm_heap+2
  4262 00:137C: 65 03        	adc	<R0+2
  4263 00:137E: 85 07        	sta	<R1+2
  4264 00:1380: A9 00 00     	lda	#$0
  4265 00:1383: 87 05        	sta	[<R1]
  4266 00:1385: A9 00 00     	lda	#$0
  4267 00:1388: A0 02 00     	ldy	#$2
  4268 00:138B: 97 05        	sta	[<R1],Y
  4269                        ;		UMM_PBLOCK(block_last) = block_1th;
  4270                        	.line	261
  4271 00:138D: A5 19        	lda	<L132+block_last_2
  4272 00:138F: 85 01        	sta	<R0
  4273 00:1391: A5 1B        	lda	<L132+block_last_2+2
  4274 00:1393: 85 03        	sta	<R0+2
  4275 00:1395: 06 01        	asl	<R0
  4276 00:1397: 26 03        	rol	<R0+2
  4277 00:1399: 06 01        	asl	<R0
  Thu Dec  3 2020 22:25                                                Page 81


  4278 00:139B: 26 03        	rol	<R0+2
  4279 00:139D: 06 01        	asl	<R0
  4280 00:139F: 26 03        	rol	<R0+2
  4281 00:13A1: 06 01        	asl	<R0
  4282 00:13A3: 26 03        	rol	<R0+2
  4283 00:13A5: 18           	clc
  4284 00:13A6: A9 04 00     	lda	#$4
  4285 00:13A9: 6D xx xx     	adc	|~~umm_heap
  4286 00:13AC: 85 05        	sta	<R1
  4287 00:13AE: A9 00 00     	lda	#$0
  4288 00:13B1: 6D xx xx     	adc	|~~umm_heap+2
  4289 00:13B4: 85 07        	sta	<R1+2
  4290 00:13B6: 18           	clc
  4291 00:13B7: A5 05        	lda	<R1
  4292 00:13B9: 65 01        	adc	<R0
  4293 00:13BB: 85 09        	sta	<R2
  4294 00:13BD: A5 07        	lda	<R1+2
  4295 00:13BF: 65 03        	adc	<R0+2
  4296 00:13C1: 85 0B        	sta	<R2+2
  4297 00:13C3: A9 01 00     	lda	#$1
  4298 00:13C6: 87 09        	sta	[<R2]
  4299 00:13C8: A9 00 00     	lda	#$0
  4300 00:13CB: A0 02 00     	ldy	#$2
  4301 00:13CE: 97 09        	sta	[<R2],Y
  4302                        ;	}
  4303                        	.endblock	262
  4304                        	.line	262
  4305                        ;}
  4306                        	.line	263
  4307                        L137:
  4308 00:13D0: 2B           	pld
  4309 00:13D1: 3B           	tsc
  4310 00:13D2: 18           	clc
  4311 00:13D3: 69 1C 00     	adc	#L131
  4312 00:13D6: 1B           	tcs
  4313 00:13D7: 6B           	rtl
  4314                        	.endblock	263
  4315             0000001C   L131	equ	28
  4316             0000000D   L132	equ	13
  4317                        	ends
  4318                        	efunc
  4319                        	.endfunc	263,13,28
  4320                        	.line	263
  4321                        ;
  4322                        ;/* ----------------------------------------------
                    --------------------------
  4323                        ; * Must be called only from within critical secti
                    ons guarded by
  4324                        ; * UMM_CRITICAL_ENTRY() and UMM_CRITICAL_EXIT().
  4325                        ; */
  4326                        ;
  4327                        ;static void umm_free_core(void *ptr)
  4328                        ;{
  4329                        	.line	270
  4330                        	.line	271
  4331                        	code
  4332                        	func
  4333                        	.function	271
  Thu Dec  3 2020 22:25                                                Page 82


  4334                        ~~umm_free_core:
  4335                        	longa	on
  4336                        	longi	on
  4337 00:13D8: 3B           	tsc
  4338 00:13D9: 38           	sec
  4339 00:13DA: E9 14 00     	sbc	#L138
  4340 00:13DD: 1B           	tcs
  4341 00:13DE: 0B           	phd
  4342 00:13DF: 5B           	tcd
  4343             00000004   ptr_0	set	4
  4344                        	.block	271
  4345                        ;
  4346                        ;	unsigned long c;
  4347                        ;
  4348                        ;	/*
  4349                        ;	 * FIXME: At some point it might be a good idea 
                    to add a check to make sure
  4350                        ;	 *        that the pointer we're being asked to 
                    free up is actually within
  4351                        ;	 *        the umm_heap!
  4352                        ;	 *
  4353                        ;	 * NOTE:  See the new umm_info() function that y
                    ou can use to see if a ptr is
  4354                        ;	 *        on the free list!
  4355                        ;	 */
  4356                        ;
  4357                        ;	/* Figure out which block we're in. Note the use
                     of truncated division... */
  4358                        ;
  4359                        ;	c = (((char *) ptr) - (char *) (&(umm_heap[0])))
                     / sizeof(umm_block);
  4360             00000000   c_1	set	0
  4361                        	.sym	c,0,18,1,32
  4362                        	.sym	ptr,4,129,6,32
  4363                        	.line	286
  4364 00:13E0: 38           	sec
  4365 00:13E1: A5 18        	lda	<L138+ptr_0
  4366 00:13E3: ED xx xx     	sbc	|~~umm_heap
  4367 00:13E6: 85 01        	sta	<R0
  4368 00:13E8: A5 1A        	lda	<L138+ptr_0+2
  4369 00:13EA: ED xx xx     	sbc	|~~umm_heap+2
  4370 00:13ED: 85 03        	sta	<R0+2
  4371 00:13EF: F4 00 00     	pea	#^$10
  4372 00:13F2: F4 10 00     	pea	#<$10
  4373 00:13F5: D4 03        	pei	<R0+2
  4374 00:13F7: D4 01        	pei	<R0
  4375                        	xref	~~~ldiv
  4376 00:13F9: 22 xx xx xx  	jsl	~~~ldiv
  4377 00:13FD: 85 11        	sta	<L139+c_1
  4378 00:13FF: 86 13        	stx	<L139+c_1+2
  4379                        ;
  4380                        ;	//DBGLOG_DEBUG( "Freeing block %6i\n", c );
  4381                        ;
  4382                        ;	/* Now let's assimilate this block with the next
                     one if possible. */
  4383                        ;
  4384                        ;	umm_assimilate_up(c);
  4385                        	.line	292
  Thu Dec  3 2020 22:25                                                Page 83


  4386 00:1401: D4 13        	pei	<L139+c_1+2
  4387 00:1403: D4 11        	pei	<L139+c_1
  4388 00:1405: 22 xx xx xx  	jsl	~~umm_assimilate_up
  4389                        ;
  4390                        ;	/* Then assimilate with the previous block if po
                    ssible */
  4391                        ;
  4392                        ;	if ( UMM_NBLOCK(UMM_PBLOCK(c)) & UMM_FREELIST_MA
                    SK)
  4393                        	.line	296
  4394                        ;	{
  4395 00:1409: A5 11        	lda	<L139+c_1
  4396 00:140B: 85 05        	sta	<R1
  4397 00:140D: A5 13        	lda	<L139+c_1+2
  4398 00:140F: 85 07        	sta	<R1+2
  4399 00:1411: 06 05        	asl	<R1
  4400 00:1413: 26 07        	rol	<R1+2
  4401 00:1415: 06 05        	asl	<R1
  4402 00:1417: 26 07        	rol	<R1+2
  4403 00:1419: 06 05        	asl	<R1
  4404 00:141B: 26 07        	rol	<R1+2
  4405 00:141D: 06 05        	asl	<R1
  4406 00:141F: 26 07        	rol	<R1+2
  4407 00:1421: 18           	clc
  4408 00:1422: A9 04 00     	lda	#$4
  4409 00:1425: 6D xx xx     	adc	|~~umm_heap
  4410 00:1428: 85 09        	sta	<R2
  4411 00:142A: A9 00 00     	lda	#$0
  4412 00:142D: 6D xx xx     	adc	|~~umm_heap+2
  4413 00:1430: 85 0B        	sta	<R2+2
  4414 00:1432: 18           	clc
  4415 00:1433: A5 09        	lda	<R2
  4416 00:1435: 65 05        	adc	<R1
  4417 00:1437: 85 0D        	sta	<R3
  4418 00:1439: A5 0B        	lda	<R2+2
  4419 00:143B: 65 07        	adc	<R1+2
  4420 00:143D: 85 0F        	sta	<R3+2
  4421 00:143F: A0 02 00     	ldy	#$2
  4422 00:1442: B7 0D        	lda	[<R3],Y
  4423 00:1444: 48           	pha
  4424 00:1445: A7 0D        	lda	[<R3]
  4425 00:1447: 48           	pha
  4426 00:1448: A9 04 00     	lda	#$4
  4427                        	xref	~~~lasl
  4428 00:144B: 22 xx xx xx  	jsl	~~~lasl
  4429 00:144F: 85 01        	sta	<R0
  4430 00:1451: 86 03        	stx	<R0+2
  4431 00:1453: 18           	clc
  4432 00:1454: AD xx xx     	lda	|~~umm_heap
  4433 00:1457: 65 01        	adc	<R0
  4434 00:1459: 85 05        	sta	<R1
  4435 00:145B: AD xx xx     	lda	|~~umm_heap+2
  4436 00:145E: 65 03        	adc	<R0+2
  4437 00:1460: 85 07        	sta	<R1+2
  4438 00:1462: A7 05        	lda	[<R1]
  4439 00:1464: 29 00 80     	and	#<$8000
  4440 00:1467: D0 03        	bne	L141
  4441 00:1469: 82 15 00     	brl	L10049
  Thu Dec  3 2020 22:25                                                Page 84


  4442                        L141:
  4443                        	.line	297
  4444                        ;
  4445                        ;		//DBGLOG_DEBUG( "Assimilate down to next
                     block, which is FREE\n" );
  4446                        ;
  4447                        ;		c = umm_assimilate_down(c, UMM_FREELIST_
                    MASK);
  4448                        	.line	301
  4449 00:146C: F4 00 00     	pea	#^$8000
  4450 00:146F: F4 00 80     	pea	#<$8000
  4451 00:1472: D4 13        	pei	<L139+c_1+2
  4452 00:1474: D4 11        	pei	<L139+c_1
  4453 00:1476: 22 xx xx xx  	jsl	~~umm_assimilate_down
  4454 00:147A: 85 11        	sta	<L139+c_1
  4455 00:147C: 86 13        	stx	<L139+c_1+2
  4456                        ;	}
  4457                        	.line	302
  4458                        ;	else
  4459 00:147E: 82 24 01     	brl	L10050
  4460                        L10049:
  4461                        ;	{
  4462                        	.line	304
  4463                        ;		/*
  4464                        ;		 * The previous block is not a free bloc
                    k, so add this one to the head
  4465                        ;		 * of the free list
  4466                        ;		 */
  4467                        ;
  4468                        ;		//DBGLOG_DEBUG( "Just add to head of fre
                    e list\n" );
  4469                        ;		UMM_PFREE(UMM_NFREE(0)) = c;
  4470                        	.line	311
  4471 00:1481: AD xx xx     	lda	|~~umm_heap
  4472 00:1484: 85 05        	sta	<R1
  4473 00:1486: AD xx xx     	lda	|~~umm_heap+2
  4474 00:1489: 85 07        	sta	<R1+2
  4475 00:148B: A0 0A 00     	ldy	#$a
  4476 00:148E: B7 05        	lda	[<R1],Y
  4477 00:1490: 48           	pha
  4478 00:1491: A0 08 00     	ldy	#$8
  4479 00:1494: B7 05        	lda	[<R1],Y
  4480 00:1496: 48           	pha
  4481 00:1497: A9 04 00     	lda	#$4
  4482                        	xref	~~~lasl
  4483 00:149A: 22 xx xx xx  	jsl	~~~lasl
  4484 00:149E: 85 01        	sta	<R0
  4485 00:14A0: 86 03        	stx	<R0+2
  4486 00:14A2: 18           	clc
  4487 00:14A3: A9 0C 00     	lda	#$c
  4488 00:14A6: 6D xx xx     	adc	|~~umm_heap
  4489 00:14A9: 85 05        	sta	<R1
  4490 00:14AB: A9 00 00     	lda	#$0
  4491 00:14AE: 6D xx xx     	adc	|~~umm_heap+2
  4492 00:14B1: 85 07        	sta	<R1+2
  4493 00:14B3: 18           	clc
  4494 00:14B4: A5 05        	lda	<R1
  4495 00:14B6: 65 01        	adc	<R0
  Thu Dec  3 2020 22:25                                                Page 85


  4496 00:14B8: 85 09        	sta	<R2
  4497 00:14BA: A5 07        	lda	<R1+2
  4498 00:14BC: 65 03        	adc	<R0+2
  4499 00:14BE: 85 0B        	sta	<R2+2
  4500 00:14C0: A5 11        	lda	<L139+c_1
  4501 00:14C2: 87 09        	sta	[<R2]
  4502 00:14C4: A5 13        	lda	<L139+c_1+2
  4503 00:14C6: A0 02 00     	ldy	#$2
  4504 00:14C9: 97 09        	sta	[<R2],Y
  4505                        ;		UMM_NFREE(c) = UMM_NFREE(0);
  4506                        	.line	312
  4507 00:14CB: A5 11        	lda	<L139+c_1
  4508 00:14CD: 85 01        	sta	<R0
  4509 00:14CF: A5 13        	lda	<L139+c_1+2
  4510 00:14D1: 85 03        	sta	<R0+2
  4511 00:14D3: 06 01        	asl	<R0
  4512 00:14D5: 26 03        	rol	<R0+2
  4513 00:14D7: 06 01        	asl	<R0
  4514 00:14D9: 26 03        	rol	<R0+2
  4515 00:14DB: 06 01        	asl	<R0
  4516 00:14DD: 26 03        	rol	<R0+2
  4517 00:14DF: 06 01        	asl	<R0
  4518 00:14E1: 26 03        	rol	<R0+2
  4519 00:14E3: 18           	clc
  4520 00:14E4: A9 08 00     	lda	#$8
  4521 00:14E7: 6D xx xx     	adc	|~~umm_heap
  4522 00:14EA: 85 05        	sta	<R1
  4523 00:14EC: A9 00 00     	lda	#$0
  4524 00:14EF: 6D xx xx     	adc	|~~umm_heap+2
  4525 00:14F2: 85 07        	sta	<R1+2
  4526 00:14F4: 18           	clc
  4527 00:14F5: A5 05        	lda	<R1
  4528 00:14F7: 65 01        	adc	<R0
  4529 00:14F9: 85 09        	sta	<R2
  4530 00:14FB: A5 07        	lda	<R1+2
  4531 00:14FD: 65 03        	adc	<R0+2
  4532 00:14FF: 85 0B        	sta	<R2+2
  4533 00:1501: AD xx xx     	lda	|~~umm_heap
  4534 00:1504: 85 01        	sta	<R0
  4535 00:1506: AD xx xx     	lda	|~~umm_heap+2
  4536 00:1509: 85 03        	sta	<R0+2
  4537 00:150B: A0 08 00     	ldy	#$8
  4538 00:150E: B7 01        	lda	[<R0],Y
  4539 00:1510: 87 09        	sta	[<R2]
  4540 00:1512: A0 0A 00     	ldy	#$a
  4541 00:1515: B7 01        	lda	[<R0],Y
  4542 00:1517: A0 02 00     	ldy	#$2
  4543 00:151A: 97 09        	sta	[<R2],Y
  4544                        ;		UMM_PFREE(c) = 0;
  4545                        	.line	313
  4546 00:151C: A5 11        	lda	<L139+c_1
  4547 00:151E: 85 01        	sta	<R0
  4548 00:1520: A5 13        	lda	<L139+c_1+2
  4549 00:1522: 85 03        	sta	<R0+2
  4550 00:1524: 06 01        	asl	<R0
  4551 00:1526: 26 03        	rol	<R0+2
  4552 00:1528: 06 01        	asl	<R0
  4553 00:152A: 26 03        	rol	<R0+2
  Thu Dec  3 2020 22:25                                                Page 86


  4554 00:152C: 06 01        	asl	<R0
  4555 00:152E: 26 03        	rol	<R0+2
  4556 00:1530: 06 01        	asl	<R0
  4557 00:1532: 26 03        	rol	<R0+2
  4558 00:1534: 18           	clc
  4559 00:1535: A9 0C 00     	lda	#$c
  4560 00:1538: 6D xx xx     	adc	|~~umm_heap
  4561 00:153B: 85 05        	sta	<R1
  4562 00:153D: A9 00 00     	lda	#$0
  4563 00:1540: 6D xx xx     	adc	|~~umm_heap+2
  4564 00:1543: 85 07        	sta	<R1+2
  4565 00:1545: 18           	clc
  4566 00:1546: A5 05        	lda	<R1
  4567 00:1548: 65 01        	adc	<R0
  4568 00:154A: 85 09        	sta	<R2
  4569 00:154C: A5 07        	lda	<R1+2
  4570 00:154E: 65 03        	adc	<R0+2
  4571 00:1550: 85 0B        	sta	<R2+2
  4572 00:1552: A9 00 00     	lda	#$0
  4573 00:1555: 87 09        	sta	[<R2]
  4574 00:1557: A9 00 00     	lda	#$0
  4575 00:155A: A0 02 00     	ldy	#$2
  4576 00:155D: 97 09        	sta	[<R2],Y
  4577                        ;		UMM_NFREE(0) = c;
  4578                        	.line	314
  4579 00:155F: AD xx xx     	lda	|~~umm_heap
  4580 00:1562: 85 01        	sta	<R0
  4581 00:1564: AD xx xx     	lda	|~~umm_heap+2
  4582 00:1567: 85 03        	sta	<R0+2
  4583 00:1569: A5 11        	lda	<L139+c_1
  4584 00:156B: A0 08 00     	ldy	#$8
  4585 00:156E: 97 01        	sta	[<R0],Y
  4586 00:1570: A5 13        	lda	<L139+c_1+2
  4587 00:1572: A0 0A 00     	ldy	#$a
  4588 00:1575: 97 01        	sta	[<R0],Y
  4589                        ;
  4590                        ;		UMM_NBLOCK(c) |= UMM_FREELIST_MASK;
  4591                        	.line	316
  4592 00:1577: A5 11        	lda	<L139+c_1
  4593 00:1579: 85 01        	sta	<R0
  4594 00:157B: A5 13        	lda	<L139+c_1+2
  4595 00:157D: 85 03        	sta	<R0+2
  4596 00:157F: 06 01        	asl	<R0
  4597 00:1581: 26 03        	rol	<R0+2
  4598 00:1583: 06 01        	asl	<R0
  4599 00:1585: 26 03        	rol	<R0+2
  4600 00:1587: 06 01        	asl	<R0
  4601 00:1589: 26 03        	rol	<R0+2
  4602 00:158B: 06 01        	asl	<R0
  4603 00:158D: 26 03        	rol	<R0+2
  4604 00:158F: 18           	clc
  4605 00:1590: AD xx xx     	lda	|~~umm_heap
  4606 00:1593: 65 01        	adc	<R0
  4607 00:1595: 85 05        	sta	<R1
  4608 00:1597: AD xx xx     	lda	|~~umm_heap+2
  4609 00:159A: 65 03        	adc	<R0+2
  4610 00:159C: 85 07        	sta	<R1+2
  4611 00:159E: A7 05        	lda	[<R1]
  Thu Dec  3 2020 22:25                                                Page 87


  4612 00:15A0: 09 00 80     	ora	#<$8000
  4613 00:15A3: 87 05        	sta	[<R1]
  4614                        ;	}
  4615                        	.line	317
  4616                        L10050:
  4617                        ;}
  4618                        	.line	318
  4619                        L142:
  4620 00:15A5: A5 16        	lda	<L138+2
  4621 00:15A7: 85 1A        	sta	<L138+2+4
  4622 00:15A9: A5 15        	lda	<L138+1
  4623 00:15AB: 85 19        	sta	<L138+1+4
  4624 00:15AD: 2B           	pld
  4625 00:15AE: 3B           	tsc
  4626 00:15AF: 18           	clc
  4627 00:15B0: 69 18 00     	adc	#L138+4
  4628 00:15B3: 1B           	tcs
  4629 00:15B4: 6B           	rtl
  4630                        	.endblock	318
  4631             00000014   L138	equ	20
  4632             00000011   L139	equ	17
  4633                        	ends
  4634                        	efunc
  4635                        	.endfunc	318,17,20
  4636                        	.line	318
  4637                        ;
  4638                        ;/* ----------------------------------------------
                    -------------------------- */
  4639                        ;
  4640                        ;void umm_free(void FAR *ptr)
  4641                        ;{
  4642                        	.line	322
  4643                        	.line	323
  4644                        	code
  4645                        	xdef	~~umm_free
  4646                        	func
  4647                        	.function	323
  4648                        ~~umm_free:
  4649                        	longa	on
  4650                        	longi	on
  4651 00:15B5: 3B           	tsc
  4652 00:15B6: 38           	sec
  4653 00:15B7: E9 00 00     	sbc	#L143
  4654 00:15BA: 1B           	tcs
  4655 00:15BB: 0B           	phd
  4656 00:15BC: 5B           	tcd
  4657             00000004   ptr_0	set	4
  4658                        	.block	323
  4659                        ;
  4660                        ;	if (umm_heap == NULL)
  4661                        	.sym	ptr,4,129,6,32
  4662                        	.line	325
  4663                        ;	{
  4664 00:15BD: AD xx xx     	lda	|~~umm_heap
  4665 00:15C0: 0D xx xx     	ora	|~~umm_heap+2
  4666 00:15C3: F0 03        	beq	L146
  4667 00:15C5: 82 04 00     	brl	L10051
  4668                        L146:
  Thu Dec  3 2020 22:25                                                Page 88


  4669                        	.line	326
  4670                        ;		umm_init();
  4671                        	.line	327
  4672 00:15C8: 22 xx xx xx  	jsl	~~umm_init
  4673                        ;	}
  4674                        	.line	328
  4675                        ;
  4676                        ;	/* If we're being asked to free a NULL pointer, 
                    well that's just silly! */
  4677                        ;
  4678                        ;	if ((void FAR *) 0 == ptr)
  4679                        L10051:
  4680                        	.line	332
  4681                        ;	{
  4682 00:15CC: A5 04        	lda	<L143+ptr_0
  4683 00:15CE: 05 06        	ora	<L143+ptr_0+2
  4684 00:15D0: F0 03        	beq	L147
  4685 00:15D2: 82 10 00     	brl	L10052
  4686                        L147:
  4687                        	.line	333
  4688                        ;		//DBGLOG_DEBUG( "free a null pointer -> 
                    do nothing\n" );
  4689                        ;
  4690                        ;		return;
  4691                        	.line	336
  4692                        L148:
  4693 00:15D5: A5 02        	lda	<L143+2
  4694 00:15D7: 85 06        	sta	<L143+2+4
  4695 00:15D9: A5 01        	lda	<L143+1
  4696 00:15DB: 85 05        	sta	<L143+1+4
  4697 00:15DD: 2B           	pld
  4698 00:15DE: 3B           	tsc
  4699 00:15DF: 18           	clc
  4700 00:15E0: 69 04 00     	adc	#L143+4
  4701 00:15E3: 1B           	tcs
  4702 00:15E4: 6B           	rtl
  4703                        ;	}
  4704                        	.line	337
  4705                        ;
  4706                        ;	/* Free the memory withing a protected critical 
                    section */
  4707                        ;
  4708                        ;	UMM_CRITICAL_ENTRY();
  4709                        L10052:
  4710                        	.line	341
  4711                        ;
  4712                        ;	umm_free_core(ptr);
  4713                        	.line	343
  4714 00:15E5: D4 06        	pei	<L143+ptr_0+2
  4715 00:15E7: D4 04        	pei	<L143+ptr_0
  4716 00:15E9: 22 xx xx xx  	jsl	~~umm_free_core
  4717                        ;
  4718                        ;	UMM_CRITICAL_EXIT();
  4719                        	.line	345
  4720                        ;}
  4721                        	.line	346
  4722 00:15ED: 82 E5 FF     	brl	L148
  4723                        	.endblock	346
  Thu Dec  3 2020 22:25                                                Page 89


  4724             00000000   L143	equ	0
  4725             00000001   L144	equ	1
  4726                        	ends
  4727                        	efunc
  4728                        	.endfunc	346,1,0
  4729                        	.line	346
  4730                        ;
  4731                        ;/* ----------------------------------------------
                    --------------------------
  4732                        ; * Must be called only from within critical secti
                    ons guarded by
  4733                        ; * UMM_CRITICAL_ENTRY() and UMM_CRITICAL_EXIT().
  4734                        ; */
  4735                        ;
  4736                        ;static void FAR *umm_malloc_core(unsigned long si
                    ze)
  4737                        ;{
  4738                        	.line	353
  4739                        	.line	354
  4740                        	code
  4741                        	func
  4742                        	.function	354
  4743                        ~~umm_malloc_core:
  4744                        	longa	on
  4745                        	longi	on
  4746 00:15F0: 3B           	tsc
  4747 00:15F1: 38           	sec
  4748 00:15F2: E9 28 00     	sbc	#L149
  4749 00:15F5: 1B           	tcs
  4750 00:15F6: 0B           	phd
  4751 00:15F7: 5B           	tcd
  4752             00000004   size_0	set	4
  4753                        	.block	354
  4754                        ;	unsigned long blocks;
  4755                        ;	unsigned long blockSize = 0;
  4756                        ;
  4757                        ;	unsigned long bestSize;
  4758                        ;	unsigned long bestBlock;
  4759                        ;
  4760                        ;	unsigned long cf;
  4761                        ;
  4762                        ;	blocks = umm_blocks(size);
  4763             00000000   blocks_1	set	0
  4764             00000004   blockSize_1	set	4
  4765             00000008   bestSize_1	set	8
  4766             0000000C   bestBlock_1	set	12
  4767             00000010   cf_1	set	16
  4768                        	.sym	blocks,0,18,1,32
  4769                        	.sym	blockSize,4,18,1,32
  4770                        	.sym	bestSize,8,18,1,32
  4771                        	.sym	bestBlock,12,18,1,32
  4772                        	.sym	cf,16,18,1,32
  4773                        	.sym	size,4,18,6,32
  4774 00:15F8: 64 19        	stz	<L150+blockSize_1
  4775 00:15FA: 64 1B        	stz	<L150+blockSize_1+2
  4776                        	.line	363
  4777 00:15FC: D4 2C        	pei	<L149+size_0
  4778 00:15FE: 22 xx xx xx  	jsl	~~umm_blocks
  Thu Dec  3 2020 22:25                                                Page 90


  4779 00:1602: 85 15        	sta	<L150+blocks_1
  4780 00:1604: 86 17        	stx	<L150+blocks_1+2
  4781                        ;
  4782                        ;	/*
  4783                        ;	 * Now we can scan through the free list until w
                    e find a space that's big
  4784                        ;	 * enough to hold the number of blocks we need.
  4785                        ;	 *
  4786                        ;	 * This part may be customized to be a best-fit,
                     worst-fit, or first-fit
  4787                        ;	 * algorithm
  4788                        ;	 */
  4789                        ;
  4790                        ;	cf = UMM_NFREE(0);
  4791                        	.line	373
  4792 00:1606: AD xx xx     	lda	|~~umm_heap
  4793 00:1609: 85 01        	sta	<R0
  4794 00:160B: AD xx xx     	lda	|~~umm_heap+2
  4795 00:160E: 85 03        	sta	<R0+2
  4796 00:1610: A0 08 00     	ldy	#$8
  4797 00:1613: B7 01        	lda	[<R0],Y
  4798 00:1615: 85 25        	sta	<L150+cf_1
  4799 00:1617: A0 0A 00     	ldy	#$a
  4800 00:161A: B7 01        	lda	[<R0],Y
  4801 00:161C: 85 27        	sta	<L150+cf_1+2
  4802                        ;
  4803                        ;	bestBlock = UMM_NFREE(0);
  4804                        	.line	375
  4805 00:161E: AD xx xx     	lda	|~~umm_heap
  4806 00:1621: 85 01        	sta	<R0
  4807 00:1623: AD xx xx     	lda	|~~umm_heap+2
  4808 00:1626: 85 03        	sta	<R0+2
  4809 00:1628: A0 08 00     	ldy	#$8
  4810 00:162B: B7 01        	lda	[<R0],Y
  4811 00:162D: 85 21        	sta	<L150+bestBlock_1
  4812 00:162F: A0 0A 00     	ldy	#$a
  4813 00:1632: B7 01        	lda	[<R0],Y
  4814 00:1634: 85 23        	sta	<L150+bestBlock_1+2
  4815                        ;	bestSize = 0x7FFF;
  4816                        	.line	376
  4817 00:1636: A9 FF 7F     	lda	#$7fff
  4818 00:1639: 85 1D        	sta	<L150+bestSize_1
  4819 00:163B: A9 00 00     	lda	#$0
  4820 00:163E: 85 1F        	sta	<L150+bestSize_1+2
  4821                        ;
  4822                        ;	while (cf)
  4823                        	.line	378
  4824                        L10053:
  4825 00:1640: A5 25        	lda	<L150+cf_1
  4826 00:1642: 05 27        	ora	<L150+cf_1+2
  4827 00:1644: D0 03        	bne	L152
  4828 00:1646: 82 AB 00     	brl	L10054
  4829                        L152:
  4830                        ;	{
  4831                        	.line	379
  4832                        ;		blockSize = (UMM_NBLOCK(cf) & UMM_BLOCKN
                    O_MASK) - cf;
  4833                        	.line	380
  Thu Dec  3 2020 22:25                                                Page 91


  4834 00:1649: A5 25        	lda	<L150+cf_1
  4835 00:164B: 85 01        	sta	<R0
  4836 00:164D: A5 27        	lda	<L150+cf_1+2
  4837 00:164F: 85 03        	sta	<R0+2
  4838 00:1651: 06 01        	asl	<R0
  4839 00:1653: 26 03        	rol	<R0+2
  4840 00:1655: 06 01        	asl	<R0
  4841 00:1657: 26 03        	rol	<R0+2
  4842 00:1659: 06 01        	asl	<R0
  4843 00:165B: 26 03        	rol	<R0+2
  4844 00:165D: 06 01        	asl	<R0
  4845 00:165F: 26 03        	rol	<R0+2
  4846 00:1661: 18           	clc
  4847 00:1662: AD xx xx     	lda	|~~umm_heap
  4848 00:1665: 65 01        	adc	<R0
  4849 00:1667: 85 05        	sta	<R1
  4850 00:1669: AD xx xx     	lda	|~~umm_heap+2
  4851 00:166C: 65 03        	adc	<R0+2
  4852 00:166E: 85 07        	sta	<R1+2
  4853 00:1670: A7 05        	lda	[<R1]
  4854 00:1672: 29 FF 7F     	and	#<$7fff
  4855 00:1675: 85 01        	sta	<R0
  4856 00:1677: 64 03        	stz	<R0+2
  4857 00:1679: 38           	sec
  4858 00:167A: A5 01        	lda	<R0
  4859 00:167C: E5 25        	sbc	<L150+cf_1
  4860 00:167E: 85 19        	sta	<L150+blockSize_1
  4861 00:1680: A5 03        	lda	<R0+2
  4862 00:1682: E5 27        	sbc	<L150+cf_1+2
  4863 00:1684: 85 1B        	sta	<L150+blockSize_1+2
  4864                        ;
  4865                        ;		//DBGLOG_TRACE( "Looking at block %6i si
                    ze %6i\n", cf, blockSize );
  4866                        ;
  4867                        ;#if defined UMM_BEST_FIT
  4868                        ;		if ((blockSize >= blocks) && (blockSize 
                    < bestSize))
  4869                        	.line	385
  4870                        ;		{
  4871 00:1686: A5 19        	lda	<L150+blockSize_1
  4872 00:1688: C5 15        	cmp	<L150+blocks_1
  4873 00:168A: A5 1B        	lda	<L150+blockSize_1+2
  4874 00:168C: E5 17        	sbc	<L150+blocks_1+2
  4875 00:168E: B0 03        	bcs	L153
  4876 00:1690: 82 1D 00     	brl	L10055
  4877                        L153:
  4878 00:1693: A5 19        	lda	<L150+blockSize_1
  4879 00:1695: C5 1D        	cmp	<L150+bestSize_1
  4880 00:1697: A5 1B        	lda	<L150+blockSize_1+2
  4881 00:1699: E5 1F        	sbc	<L150+bestSize_1+2
  4882 00:169B: 90 03        	bcc	L154
  4883 00:169D: 82 10 00     	brl	L10055
  4884                        L154:
  4885                        	.line	386
  4886                        ;			bestBlock = cf;
  4887                        	.line	387
  4888 00:16A0: A5 25        	lda	<L150+cf_1
  4889 00:16A2: 85 21        	sta	<L150+bestBlock_1
  Thu Dec  3 2020 22:25                                                Page 92


  4890 00:16A4: A5 27        	lda	<L150+cf_1+2
  4891 00:16A6: 85 23        	sta	<L150+bestBlock_1+2
  4892                        ;			bestSize = blockSize;
  4893                        	.line	388
  4894 00:16A8: A5 19        	lda	<L150+blockSize_1
  4895 00:16AA: 85 1D        	sta	<L150+bestSize_1
  4896 00:16AC: A5 1B        	lda	<L150+blockSize_1+2
  4897 00:16AE: 85 1F        	sta	<L150+bestSize_1+2
  4898                        ;		}
  4899                        	.line	389
  4900                        ;#elif defined UMM_FIRST_FIT
  4901                        ;		/* This is the first block that fits! */
  4902                        ;		if( (blockSize >= blocks) )
  4903                        ;		break;
  4904                        ;#else
  4905                        ;#  error "No UMM_*_FIT is defined - check umm_mal
                    loc_cfg.h"
  4906                        ;#endif
  4907                        ;
  4908                        ;		cf = UMM_NFREE(cf);
  4909                        L10055:
  4910                        	.line	398
  4911 00:16B0: A5 25        	lda	<L150+cf_1
  4912 00:16B2: 85 01        	sta	<R0
  4913 00:16B4: A5 27        	lda	<L150+cf_1+2
  4914 00:16B6: 85 03        	sta	<R0+2
  4915 00:16B8: 06 01        	asl	<R0
  4916 00:16BA: 26 03        	rol	<R0+2
  4917 00:16BC: 06 01        	asl	<R0
  4918 00:16BE: 26 03        	rol	<R0+2
  4919 00:16C0: 06 01        	asl	<R0
  4920 00:16C2: 26 03        	rol	<R0+2
  4921 00:16C4: 06 01        	asl	<R0
  4922 00:16C6: 26 03        	rol	<R0+2
  4923 00:16C8: 18           	clc
  4924 00:16C9: A9 08 00     	lda	#$8
  4925 00:16CC: 6D xx xx     	adc	|~~umm_heap
  4926 00:16CF: 85 05        	sta	<R1
  4927 00:16D1: A9 00 00     	lda	#$0
  4928 00:16D4: 6D xx xx     	adc	|~~umm_heap+2
  4929 00:16D7: 85 07        	sta	<R1+2
  4930 00:16D9: 18           	clc
  4931 00:16DA: A5 05        	lda	<R1
  4932 00:16DC: 65 01        	adc	<R0
  4933 00:16DE: 85 09        	sta	<R2
  4934 00:16E0: A5 07        	lda	<R1+2
  4935 00:16E2: 65 03        	adc	<R0+2
  4936 00:16E4: 85 0B        	sta	<R2+2
  4937 00:16E6: A7 09        	lda	[<R2]
  4938 00:16E8: 85 25        	sta	<L150+cf_1
  4939 00:16EA: A0 02 00     	ldy	#$2
  4940 00:16ED: B7 09        	lda	[<R2],Y
  4941 00:16EF: 85 27        	sta	<L150+cf_1+2
  4942                        ;	}
  4943                        	.line	399
  4944 00:16F1: 82 4C FF     	brl	L10053
  4945                        L10054:
  4946                        ;
  Thu Dec  3 2020 22:25                                                Page 93


  4947                        ;	if (0x7FFF != bestSize)
  4948                        	.line	401
  4949                        ;	{
  4950 00:16F4: A5 1D        	lda	<L150+bestSize_1
  4951 00:16F6: C9 FF 7F     	cmp	#<$7fff
  4952 00:16F9: D0 05        	bne	L155
  4953 00:16FB: A5 1F        	lda	<L150+bestSize_1+2
  4954 00:16FD: C9 00 00     	cmp	#^$7fff
  4955                        L155:
  4956 00:1700: D0 03        	bne	L156
  4957 00:1702: 82 10 00     	brl	L10056
  4958                        L156:
  4959                        	.line	402
  4960                        ;		cf = bestBlock;
  4961                        	.line	403
  4962 00:1705: A5 21        	lda	<L150+bestBlock_1
  4963 00:1707: 85 25        	sta	<L150+cf_1
  4964 00:1709: A5 23        	lda	<L150+bestBlock_1+2
  4965 00:170B: 85 27        	sta	<L150+cf_1+2
  4966                        ;		blockSize = bestSize;
  4967                        	.line	404
  4968 00:170D: A5 1D        	lda	<L150+bestSize_1
  4969 00:170F: 85 19        	sta	<L150+blockSize_1
  4970 00:1711: A5 1F        	lda	<L150+bestSize_1+2
  4971 00:1713: 85 1B        	sta	<L150+blockSize_1+2
  4972                        ;	}
  4973                        	.line	405
  4974                        ;
  4975                        ;	if (( UMM_NBLOCK(cf) & UMM_BLOCKNO_MASK) && bloc
                    kSize >= blocks)
  4976                        L10056:
  4977                        	.line	407
  4978                        ;	{
  4979 00:1715: A5 25        	lda	<L150+cf_1
  4980 00:1717: 85 01        	sta	<R0
  4981 00:1719: A5 27        	lda	<L150+cf_1+2
  4982 00:171B: 85 03        	sta	<R0+2
  4983 00:171D: 06 01        	asl	<R0
  4984 00:171F: 26 03        	rol	<R0+2
  4985 00:1721: 06 01        	asl	<R0
  4986 00:1723: 26 03        	rol	<R0+2
  4987 00:1725: 06 01        	asl	<R0
  4988 00:1727: 26 03        	rol	<R0+2
  4989 00:1729: 06 01        	asl	<R0
  4990 00:172B: 26 03        	rol	<R0+2
  4991 00:172D: 18           	clc
  4992 00:172E: AD xx xx     	lda	|~~umm_heap
  4993 00:1731: 65 01        	adc	<R0
  4994 00:1733: 85 05        	sta	<R1
  4995 00:1735: AD xx xx     	lda	|~~umm_heap+2
  4996 00:1738: 65 03        	adc	<R0+2
  4997 00:173A: 85 07        	sta	<R1+2
  4998 00:173C: A7 05        	lda	[<R1]
  4999 00:173E: 29 FF 7F     	and	#<$7fff
  5000 00:1741: D0 03        	bne	L157
  5001 00:1743: 82 38 02     	brl	L10057
  5002                        L157:
  5003 00:1746: A5 19        	lda	<L150+blockSize_1
  Thu Dec  3 2020 22:25                                                Page 94


  5004 00:1748: C5 15        	cmp	<L150+blocks_1
  5005 00:174A: A5 1B        	lda	<L150+blockSize_1+2
  5006 00:174C: E5 17        	sbc	<L150+blocks_1+2
  5007 00:174E: B0 03        	bcs	L158
  5008 00:1750: 82 2B 02     	brl	L10057
  5009                        L158:
  5010                        	.line	408
  5011                        ;		/*
  5012                        ;		 * This is an existing block in the memo
                    ry heap, we just need to split off
  5013                        ;		 * what we need, unlink it from the free
                     list and mark it as in use, and
  5014                        ;		 * link the rest of the block back into 
                    the freelist as if it was a new
  5015                        ;		 * block on the free list...
  5016                        ;		 */
  5017                        ;
  5018                        ;		if (blockSize == blocks)
  5019                        	.line	416
  5020                        ;		{
  5021 00:1753: A5 19        	lda	<L150+blockSize_1
  5022 00:1755: C5 15        	cmp	<L150+blocks_1
  5023 00:1757: D0 04        	bne	L159
  5024 00:1759: A5 1B        	lda	<L150+blockSize_1+2
  5025 00:175B: C5 17        	cmp	<L150+blocks_1+2
  5026                        L159:
  5027 00:175D: F0 03        	beq	L160
  5028 00:175F: 82 0B 00     	brl	L10058
  5029                        L160:
  5030                        	.line	417
  5031                        ;			/* It's an exact fit and we don'
                    t neet to split off a block. */
  5032                        ;			//DBGLOG_DEBUG( "Allocating %6i 
                    blocks starting at %6i - exact\n", blocks, cf );
  5033                        ;			/* Disconnect this block from th
                    e FREE list */
  5034                        ;
  5035                        ;			umm_disconnect_from_free_list(cf
                    );
  5036                        	.line	422
  5037 00:1762: D4 27        	pei	<L150+cf_1+2
  5038 00:1764: D4 25        	pei	<L150+cf_1
  5039 00:1766: 22 xx xx xx  	jsl	~~umm_disconnect_from_free_list
  5040                        ;
  5041                        ;		}
  5042                        	.line	424
  5043                        ;		else
  5044 00:176A: 82 0E 02     	brl	L10059
  5045                        L10058:
  5046                        ;		{
  5047                        	.line	426
  5048                        ;			/* It's not an exact fit and we 
                    need to split off a block. */
  5049                        ;			//DBGLOG_DEBUG( "Allocating %6i 
                    blocks starting at %6i - existing\n", blocks, cf );
  5050                        ;			/*
  5051                        ;			 * split current free block `cf`
                     into two blocks. The first one will be
  Thu Dec  3 2020 22:25                                                Page 95


  5052                        ;			 * returned to user, so it's not
                     free, and the second one will be free.
  5053                        ;			 */
  5054                        ;			umm_split_block(cf, blocks,
  5055                        	.line	433
  5056                        ;					UMM_FREELIST_MAS
                    K /*new block is free*/);
  5057 00:176D: F4 00 00     	pea	#^$8000
  5058 00:1770: F4 00 80     	pea	#<$8000
  5059 00:1773: D4 17        	pei	<L150+blocks_1+2
  5060 00:1775: D4 15        	pei	<L150+blocks_1
  5061 00:1777: D4 27        	pei	<L150+cf_1+2
  5062 00:1779: D4 25        	pei	<L150+cf_1
  5063 00:177B: 22 xx xx xx  	jsl	~~umm_split_block
  5064                        ;
  5065                        ;			/*
  5066                        ;			 * `umm_split_block()` does not 
                    update the free pointers (it affects
  5067                        ;			 * only free flags), but effecti
                    vely we've just moved beginning of the
  5068                        ;			 * free block from `cf` to `cf +
                     blocks`. So we have to adjust pointers
  5069                        ;			 * to and from adjacent free blo
                    cks.
  5070                        ;			 */
  5071                        ;
  5072                        ;			/* previous free block */
  5073                        ;			UMM_NFREE( UMM_PFREE(cf) ) = cf 
                    + blocks;
  5074                        	.line	444
  5075 00:177F: A5 25        	lda	<L150+cf_1
  5076 00:1781: 85 05        	sta	<R1
  5077 00:1783: A5 27        	lda	<L150+cf_1+2
  5078 00:1785: 85 07        	sta	<R1+2
  5079 00:1787: 06 05        	asl	<R1
  5080 00:1789: 26 07        	rol	<R1+2
  5081 00:178B: 06 05        	asl	<R1
  5082 00:178D: 26 07        	rol	<R1+2
  5083 00:178F: 06 05        	asl	<R1
  5084 00:1791: 26 07        	rol	<R1+2
  5085 00:1793: 06 05        	asl	<R1
  5086 00:1795: 26 07        	rol	<R1+2
  5087 00:1797: 18           	clc
  5088 00:1798: A9 0C 00     	lda	#$c
  5089 00:179B: 6D xx xx     	adc	|~~umm_heap
  5090 00:179E: 85 09        	sta	<R2
  5091 00:17A0: A9 00 00     	lda	#$0
  5092 00:17A3: 6D xx xx     	adc	|~~umm_heap+2
  5093 00:17A6: 85 0B        	sta	<R2+2
  5094 00:17A8: 18           	clc
  5095 00:17A9: A5 09        	lda	<R2
  5096 00:17AB: 65 05        	adc	<R1
  5097 00:17AD: 85 0D        	sta	<R3
  5098 00:17AF: A5 0B        	lda	<R2+2
  5099 00:17B1: 65 07        	adc	<R1+2
  5100 00:17B3: 85 0F        	sta	<R3+2
  5101 00:17B5: A0 02 00     	ldy	#$2
  5102 00:17B8: B7 0D        	lda	[<R3],Y
  Thu Dec  3 2020 22:25                                                Page 96


  5103 00:17BA: 48           	pha
  5104 00:17BB: A7 0D        	lda	[<R3]
  5105 00:17BD: 48           	pha
  5106 00:17BE: A9 04 00     	lda	#$4
  5107                        	xref	~~~lasl
  5108 00:17C1: 22 xx xx xx  	jsl	~~~lasl
  5109 00:17C5: 85 01        	sta	<R0
  5110 00:17C7: 86 03        	stx	<R0+2
  5111 00:17C9: 18           	clc
  5112 00:17CA: A9 08 00     	lda	#$8
  5113 00:17CD: 6D xx xx     	adc	|~~umm_heap
  5114 00:17D0: 85 05        	sta	<R1
  5115 00:17D2: A9 00 00     	lda	#$0
  5116 00:17D5: 6D xx xx     	adc	|~~umm_heap+2
  5117 00:17D8: 85 07        	sta	<R1+2
  5118 00:17DA: 18           	clc
  5119 00:17DB: A5 05        	lda	<R1
  5120 00:17DD: 65 01        	adc	<R0
  5121 00:17DF: 85 09        	sta	<R2
  5122 00:17E1: A5 07        	lda	<R1+2
  5123 00:17E3: 65 03        	adc	<R0+2
  5124 00:17E5: 85 0B        	sta	<R2+2
  5125 00:17E7: 18           	clc
  5126 00:17E8: A5 25        	lda	<L150+cf_1
  5127 00:17EA: 65 15        	adc	<L150+blocks_1
  5128 00:17EC: 85 01        	sta	<R0
  5129 00:17EE: A5 27        	lda	<L150+cf_1+2
  5130 00:17F0: 65 17        	adc	<L150+blocks_1+2
  5131 00:17F2: 85 03        	sta	<R0+2
  5132 00:17F4: A5 01        	lda	<R0
  5133 00:17F6: 87 09        	sta	[<R2]
  5134 00:17F8: A5 03        	lda	<R0+2
  5135 00:17FA: A0 02 00     	ldy	#$2
  5136 00:17FD: 97 09        	sta	[<R2],Y
  5137                        ;			UMM_PFREE( cf + blocks ) = UMM_P
                    FREE(cf);
  5138                        	.line	445
  5139 00:17FF: 18           	clc
  5140 00:1800: A5 25        	lda	<L150+cf_1
  5141 00:1802: 65 15        	adc	<L150+blocks_1
  5142 00:1804: 85 05        	sta	<R1
  5143 00:1806: A5 27        	lda	<L150+cf_1+2
  5144 00:1808: 65 17        	adc	<L150+blocks_1+2
  5145 00:180A: 85 07        	sta	<R1+2
  5146 00:180C: D4 07        	pei	<R1+2
  5147 00:180E: D4 05        	pei	<R1
  5148 00:1810: A9 04 00     	lda	#$4
  5149                        	xref	~~~lasl
  5150 00:1813: 22 xx xx xx  	jsl	~~~lasl
  5151 00:1817: 85 01        	sta	<R0
  5152 00:1819: 86 03        	stx	<R0+2
  5153 00:181B: 18           	clc
  5154 00:181C: A9 0C 00     	lda	#$c
  5155 00:181F: 6D xx xx     	adc	|~~umm_heap
  5156 00:1822: 85 09        	sta	<R2
  5157 00:1824: A9 00 00     	lda	#$0
  5158 00:1827: 6D xx xx     	adc	|~~umm_heap+2
  5159 00:182A: 85 0B        	sta	<R2+2
  Thu Dec  3 2020 22:25                                                Page 97


  5160 00:182C: 18           	clc
  5161 00:182D: A5 09        	lda	<R2
  5162 00:182F: 65 01        	adc	<R0
  5163 00:1831: 85 0D        	sta	<R3
  5164 00:1833: A5 0B        	lda	<R2+2
  5165 00:1835: 65 03        	adc	<R0+2
  5166 00:1837: 85 0F        	sta	<R3+2
  5167 00:1839: A5 25        	lda	<L150+cf_1
  5168 00:183B: 85 01        	sta	<R0
  5169 00:183D: A5 27        	lda	<L150+cf_1+2
  5170 00:183F: 85 03        	sta	<R0+2
  5171 00:1841: 06 01        	asl	<R0
  5172 00:1843: 26 03        	rol	<R0+2
  5173 00:1845: 06 01        	asl	<R0
  5174 00:1847: 26 03        	rol	<R0+2
  5175 00:1849: 06 01        	asl	<R0
  5176 00:184B: 26 03        	rol	<R0+2
  5177 00:184D: 06 01        	asl	<R0
  5178 00:184F: 26 03        	rol	<R0+2
  5179 00:1851: 18           	clc
  5180 00:1852: A9 0C 00     	lda	#$c
  5181 00:1855: 6D xx xx     	adc	|~~umm_heap
  5182 00:1858: 85 09        	sta	<R2
  5183 00:185A: A9 00 00     	lda	#$0
  5184 00:185D: 6D xx xx     	adc	|~~umm_heap+2
  5185 00:1860: 85 0B        	sta	<R2+2
  5186 00:1862: 18           	clc
  5187 00:1863: A5 09        	lda	<R2
  5188 00:1865: 65 01        	adc	<R0
  5189 00:1867: 85 11        	sta	<17
  5190 00:1869: A5 0B        	lda	<R2+2
  5191 00:186B: 65 03        	adc	<R0+2
  5192 00:186D: 85 13        	sta	<17+2
  5193 00:186F: A7 11        	lda	[<17]
  5194 00:1871: 87 0D        	sta	[<R3]
  5195 00:1873: A0 02 00     	ldy	#$2
  5196 00:1876: B7 11        	lda	[<17],Y
  5197 00:1878: A0 02 00     	ldy	#$2
  5198 00:187B: 97 0D        	sta	[<R3],Y
  5199                        ;
  5200                        ;			/* next free block */
  5201                        ;			UMM_PFREE( UMM_NFREE(cf) ) = cf 
                    + blocks;
  5202                        	.line	448
  5203 00:187D: A5 25        	lda	<L150+cf_1
  5204 00:187F: 85 05        	sta	<R1
  5205 00:1881: A5 27        	lda	<L150+cf_1+2
  5206 00:1883: 85 07        	sta	<R1+2
  5207 00:1885: 06 05        	asl	<R1
  5208 00:1887: 26 07        	rol	<R1+2
  5209 00:1889: 06 05        	asl	<R1
  5210 00:188B: 26 07        	rol	<R1+2
  5211 00:188D: 06 05        	asl	<R1
  5212 00:188F: 26 07        	rol	<R1+2
  5213 00:1891: 06 05        	asl	<R1
  5214 00:1893: 26 07        	rol	<R1+2
  5215 00:1895: 18           	clc
  5216 00:1896: A9 08 00     	lda	#$8
  Thu Dec  3 2020 22:25                                                Page 98


  5217 00:1899: 6D xx xx     	adc	|~~umm_heap
  5218 00:189C: 85 09        	sta	<R2
  5219 00:189E: A9 00 00     	lda	#$0
  5220 00:18A1: 6D xx xx     	adc	|~~umm_heap+2
  5221 00:18A4: 85 0B        	sta	<R2+2
  5222 00:18A6: 18           	clc
  5223 00:18A7: A5 09        	lda	<R2
  5224 00:18A9: 65 05        	adc	<R1
  5225 00:18AB: 85 0D        	sta	<R3
  5226 00:18AD: A5 0B        	lda	<R2+2
  5227 00:18AF: 65 07        	adc	<R1+2
  5228 00:18B1: 85 0F        	sta	<R3+2
  5229 00:18B3: A0 02 00     	ldy	#$2
  5230 00:18B6: B7 0D        	lda	[<R3],Y
  5231 00:18B8: 48           	pha
  5232 00:18B9: A7 0D        	lda	[<R3]
  5233 00:18BB: 48           	pha
  5234 00:18BC: A9 04 00     	lda	#$4
  5235                        	xref	~~~lasl
  5236 00:18BF: 22 xx xx xx  	jsl	~~~lasl
  5237 00:18C3: 85 01        	sta	<R0
  5238 00:18C5: 86 03        	stx	<R0+2
  5239 00:18C7: 18           	clc
  5240 00:18C8: A9 0C 00     	lda	#$c
  5241 00:18CB: 6D xx xx     	adc	|~~umm_heap
  5242 00:18CE: 85 05        	sta	<R1
  5243 00:18D0: A9 00 00     	lda	#$0
  5244 00:18D3: 6D xx xx     	adc	|~~umm_heap+2
  5245 00:18D6: 85 07        	sta	<R1+2
  5246 00:18D8: 18           	clc
  5247 00:18D9: A5 05        	lda	<R1
  5248 00:18DB: 65 01        	adc	<R0
  5249 00:18DD: 85 09        	sta	<R2
  5250 00:18DF: A5 07        	lda	<R1+2
  5251 00:18E1: 65 03        	adc	<R0+2
  5252 00:18E3: 85 0B        	sta	<R2+2
  5253 00:18E5: 18           	clc
  5254 00:18E6: A5 25        	lda	<L150+cf_1
  5255 00:18E8: 65 15        	adc	<L150+blocks_1
  5256 00:18EA: 85 01        	sta	<R0
  5257 00:18EC: A5 27        	lda	<L150+cf_1+2
  5258 00:18EE: 65 17        	adc	<L150+blocks_1+2
  5259 00:18F0: 85 03        	sta	<R0+2
  5260 00:18F2: A5 01        	lda	<R0
  5261 00:18F4: 87 09        	sta	[<R2]
  5262 00:18F6: A5 03        	lda	<R0+2
  5263 00:18F8: A0 02 00     	ldy	#$2
  5264 00:18FB: 97 09        	sta	[<R2],Y
  5265                        ;			UMM_NFREE( cf + blocks ) = UMM_N
                    FREE(cf);
  5266                        	.line	449
  5267 00:18FD: 18           	clc
  5268 00:18FE: A5 25        	lda	<L150+cf_1
  5269 00:1900: 65 15        	adc	<L150+blocks_1
  5270 00:1902: 85 05        	sta	<R1
  5271 00:1904: A5 27        	lda	<L150+cf_1+2
  5272 00:1906: 65 17        	adc	<L150+blocks_1+2
  5273 00:1908: 85 07        	sta	<R1+2
  Thu Dec  3 2020 22:25                                                Page 99


  5274 00:190A: D4 07        	pei	<R1+2
  5275 00:190C: D4 05        	pei	<R1
  5276 00:190E: A9 04 00     	lda	#$4
  5277                        	xref	~~~lasl
  5278 00:1911: 22 xx xx xx  	jsl	~~~lasl
  5279 00:1915: 85 01        	sta	<R0
  5280 00:1917: 86 03        	stx	<R0+2
  5281 00:1919: 18           	clc
  5282 00:191A: A9 08 00     	lda	#$8
  5283 00:191D: 6D xx xx     	adc	|~~umm_heap
  5284 00:1920: 85 09        	sta	<R2
  5285 00:1922: A9 00 00     	lda	#$0
  5286 00:1925: 6D xx xx     	adc	|~~umm_heap+2
  5287 00:1928: 85 0B        	sta	<R2+2
  5288 00:192A: 18           	clc
  5289 00:192B: A5 09        	lda	<R2
  5290 00:192D: 65 01        	adc	<R0
  5291 00:192F: 85 0D        	sta	<R3
  5292 00:1931: A5 0B        	lda	<R2+2
  5293 00:1933: 65 03        	adc	<R0+2
  5294 00:1935: 85 0F        	sta	<R3+2
  5295 00:1937: A5 25        	lda	<L150+cf_1
  5296 00:1939: 85 01        	sta	<R0
  5297 00:193B: A5 27        	lda	<L150+cf_1+2
  5298 00:193D: 85 03        	sta	<R0+2
  5299 00:193F: 06 01        	asl	<R0
  5300 00:1941: 26 03        	rol	<R0+2
  5301 00:1943: 06 01        	asl	<R0
  5302 00:1945: 26 03        	rol	<R0+2
  5303 00:1947: 06 01        	asl	<R0
  5304 00:1949: 26 03        	rol	<R0+2
  5305 00:194B: 06 01        	asl	<R0
  5306 00:194D: 26 03        	rol	<R0+2
  5307 00:194F: 18           	clc
  5308 00:1950: A9 08 00     	lda	#$8
  5309 00:1953: 6D xx xx     	adc	|~~umm_heap
  5310 00:1956: 85 09        	sta	<R2
  5311 00:1958: A9 00 00     	lda	#$0
  5312 00:195B: 6D xx xx     	adc	|~~umm_heap+2
  5313 00:195E: 85 0B        	sta	<R2+2
  5314 00:1960: 18           	clc
  5315 00:1961: A5 09        	lda	<R2
  5316 00:1963: 65 01        	adc	<R0
  5317 00:1965: 85 11        	sta	<17
  5318 00:1967: A5 0B        	lda	<R2+2
  5319 00:1969: 65 03        	adc	<R0+2
  5320 00:196B: 85 13        	sta	<17+2
  5321 00:196D: A7 11        	lda	[<17]
  5322 00:196F: 87 0D        	sta	[<R3]
  5323 00:1971: A0 02 00     	ldy	#$2
  5324 00:1974: B7 11        	lda	[<17],Y
  5325 00:1976: A0 02 00     	ldy	#$2
  5326 00:1979: 97 0D        	sta	[<R3],Y
  5327                        ;		}
  5328                        	.line	450
  5329                        L10059:
  5330                        ;	}
  5331                        	.line	451
  Thu Dec  3 2020 22:25                                                Page 100


  5332                        ;	else
  5333 00:197B: 82 19 00     	brl	L10060
  5334                        L10057:
  5335                        ;	{
  5336                        	.line	453
  5337                        ;		/* Out of memory */
  5338                        ;
  5339                        ;		//DBGLOG_DEBUG(  "Can't allocate %5i blo
                    cks\n", blocks );
  5340                        ;		return ((void FAR*) NULL);
  5341                        	.line	457
  5342 00:197E: A9 00 00     	lda	#$0
  5343 00:1981: AA           	tax
  5344 00:1982: A9 00 00     	lda	#$0
  5345                        L161:
  5346 00:1985: A8           	tay
  5347 00:1986: A5 2A        	lda	<L149+2
  5348 00:1988: 85 2E        	sta	<L149+2+4
  5349 00:198A: A5 29        	lda	<L149+1
  5350 00:198C: 85 2D        	sta	<L149+1+4
  5351 00:198E: 2B           	pld
  5352 00:198F: 3B           	tsc
  5353 00:1990: 18           	clc
  5354 00:1991: 69 2C 00     	adc	#L149+4
  5355 00:1994: 1B           	tcs
  5356 00:1995: 98           	tya
  5357 00:1996: 6B           	rtl
  5358                        ;	}
  5359                        	.line	458
  5360                        L10060:
  5361                        ;
  5362                        ;	return ((void FAR*) &UMM_DATA(cf));
  5363                        	.line	460
  5364 00:1997: A5 25        	lda	<L150+cf_1
  5365 00:1999: 85 01        	sta	<R0
  5366 00:199B: A5 27        	lda	<L150+cf_1+2
  5367 00:199D: 85 03        	sta	<R0+2
  5368 00:199F: 06 01        	asl	<R0
  5369 00:19A1: 26 03        	rol	<R0+2
  5370 00:19A3: 06 01        	asl	<R0
  5371 00:19A5: 26 03        	rol	<R0+2
  5372 00:19A7: 06 01        	asl	<R0
  5373 00:19A9: 26 03        	rol	<R0+2
  5374 00:19AB: 06 01        	asl	<R0
  5375 00:19AD: 26 03        	rol	<R0+2
  5376 00:19AF: 18           	clc
  5377 00:19B0: A9 08 00     	lda	#$8
  5378 00:19B3: 65 01        	adc	<R0
  5379 00:19B5: 85 05        	sta	<R1
  5380 00:19B7: A9 00 00     	lda	#$0
  5381 00:19BA: 65 03        	adc	<R0+2
  5382 00:19BC: 85 07        	sta	<R1+2
  5383 00:19BE: 18           	clc
  5384 00:19BF: AD xx xx     	lda	|~~umm_heap
  5385 00:19C2: 65 05        	adc	<R1
  5386 00:19C4: 85 01        	sta	<R0
  5387 00:19C6: AD xx xx     	lda	|~~umm_heap+2
  5388 00:19C9: 65 07        	adc	<R1+2
  Thu Dec  3 2020 22:25                                                Page 101


  5389 00:19CB: 85 03        	sta	<R0+2
  5390 00:19CD: A6 03        	ldx	<R0+2
  5391 00:19CF: A5 01        	lda	<R0
  5392 00:19D1: 82 B1 FF     	brl	L161
  5393                        ;}
  5394                        	.line	461
  5395                        	.endblock	461
  5396             00000028   L149	equ	40
  5397             00000015   L150	equ	21
  5398                        	ends
  5399                        	efunc
  5400                        	.endfunc	461,21,40
  5401                        	.line	461
  5402                        ;
  5403                        ;/* ----------------------------------------------
                    -------------------------- */
  5404                        ;
  5405                        ;void FAR *umm_malloc(unsigned long size)
  5406                        ;{
  5407                        	.line	465
  5408                        	.line	466
  5409                        	code
  5410                        	xdef	~~umm_malloc
  5411                        	func
  5412                        	.function	466
  5413                        ~~umm_malloc:
  5414                        	longa	on
  5415                        	longi	on
  5416 00:19D4: 3B           	tsc
  5417 00:19D5: 38           	sec
  5418 00:19D6: E9 04 00     	sbc	#L162
  5419 00:19D9: 1B           	tcs
  5420 00:19DA: 0B           	phd
  5421 00:19DB: 5B           	tcd
  5422             00000004   size_0	set	4
  5423                        	.block	466
  5424                        ;
  5425                        ;	void FAR *ptr = NULL;
  5426                        ;
  5427                        ;	if (umm_heap == NULL)
  5428             00000000   ptr_1	set	0
  5429                        	.sym	ptr,0,129,1,32
  5430                        	.sym	size,4,18,6,32
  5431 00:19DC: 64 01        	stz	<L163+ptr_1
  5432 00:19DE: 64 03        	stz	<L163+ptr_1+2
  5433                        	.line	470
  5434                        ;	{
  5435 00:19E0: AD xx xx     	lda	|~~umm_heap
  5436 00:19E3: 0D xx xx     	ora	|~~umm_heap+2
  5437 00:19E6: F0 03        	beq	L165
  5438 00:19E8: 82 04 00     	brl	L10061
  5439                        L165:
  5440                        	.line	471
  5441                        ;		umm_init();
  5442                        	.line	472
  5443 00:19EB: 22 xx xx xx  	jsl	~~umm_init
  5444                        ;	}
  5445                        	.line	473
  Thu Dec  3 2020 22:25                                                Page 102


  5446                        ;
  5447                        ;	/*
  5448                        ;	 * the very first thing we do is figure out if w
                    e're being asked to allocate
  5449                        ;	 * a size of 0 - and if we are we'll simply retu
                    rn a null pointer. if not
  5450                        ;	 * then reduce the size by 1 byte so that the su
                    bsequent calculations on
  5451                        ;	 * the number of blocks to allocate are easier..
                    .
  5452                        ;	 */
  5453                        ;
  5454                        ;	if (0 == size)
  5455                        L10061:
  5456                        	.line	482
  5457                        ;	{
  5458 00:19EF: A5 08        	lda	<L162+size_0
  5459 00:19F1: 05 0A        	ora	<L162+size_0+2
  5460 00:19F3: F0 03        	beq	L166
  5461 00:19F5: 82 16 00     	brl	L10062
  5462                        L166:
  5463                        	.line	483
  5464                        ;		//DBGLOG_DEBUG( "malloc a block of 0 byt
                    es -> do nothing\n" );
  5465                        ;
  5466                        ;		return (ptr);
  5467                        	.line	486
  5468 00:19F8: A6 03        	ldx	<L163+ptr_1+2
  5469 00:19FA: A5 01        	lda	<L163+ptr_1
  5470                        L167:
  5471 00:19FC: A8           	tay
  5472 00:19FD: A5 06        	lda	<L162+2
  5473 00:19FF: 85 0A        	sta	<L162+2+4
  5474 00:1A01: A5 05        	lda	<L162+1
  5475 00:1A03: 85 09        	sta	<L162+1+4
  5476 00:1A05: 2B           	pld
  5477 00:1A06: 3B           	tsc
  5478 00:1A07: 18           	clc
  5479 00:1A08: 69 08 00     	adc	#L162+4
  5480 00:1A0B: 1B           	tcs
  5481 00:1A0C: 98           	tya
  5482 00:1A0D: 6B           	rtl
  5483                        ;	}
  5484                        	.line	487
  5485                        ;
  5486                        ;	/* Allocate the memory withing a protected criti
                    cal section */
  5487                        ;
  5488                        ;	UMM_CRITICAL_ENTRY();
  5489                        L10062:
  5490                        	.line	491
  5491                        ;
  5492                        ;	ptr = umm_malloc_core(size);
  5493                        	.line	493
  5494 00:1A0E: D4 0A        	pei	<L162+size_0+2
  5495 00:1A10: D4 08        	pei	<L162+size_0
  5496 00:1A12: 22 xx xx xx  	jsl	~~umm_malloc_core
  5497 00:1A16: 85 01        	sta	<L163+ptr_1
  Thu Dec  3 2020 22:25                                                Page 103


  5498 00:1A18: 86 03        	stx	<L163+ptr_1+2
  5499                        ;
  5500                        ;	UMM_CRITICAL_EXIT();
  5501                        	.line	495
  5502                        ;
  5503                        ;	return (ptr);
  5504                        	.line	497
  5505 00:1A1A: A6 03        	ldx	<L163+ptr_1+2
  5506 00:1A1C: A5 01        	lda	<L163+ptr_1
  5507 00:1A1E: 82 DB FF     	brl	L167
  5508                        ;}
  5509                        	.line	498
  5510                        	.endblock	498
  5511             00000004   L162	equ	4
  5512             00000001   L163	equ	1
  5513                        	ends
  5514                        	efunc
  5515                        	.endfunc	498,1,4
  5516                        	.line	498
  5517                        ;
  5518                        ;/* ----------------------------------------------
                    -------------------------- */
  5519                        ;
  5520                        ;void FAR *umm_realloc(void FAR *ptr, unsigned lon
                    g size)
  5521                        ;{
  5522                        	.line	502
  5523                        	.line	503
  5524                        	code
  5525                        	xdef	~~umm_realloc
  5526                        	func
  5527                        	.function	503
  5528                        ~~umm_realloc:
  5529                        	longa	on
  5530                        	longi	on
  5531 00:1A21: 3B           	tsc
  5532 00:1A22: 38           	sec
  5533 00:1A23: E9 2A 00     	sbc	#L168
  5534 00:1A26: 1B           	tcs
  5535 00:1A27: 0B           	phd
  5536 00:1A28: 5B           	tcd
  5537             00000004   ptr_0	set	4
  5538             00000008   size_0	set	8
  5539                        	.block	503
  5540                        ;
  5541                        ;	unsigned long blocks;
  5542                        ;	unsigned long blockSize;
  5543                        ;	unsigned long prevBlockSize = 0;
  5544                        ;	unsigned long nextBlockSize = 0;
  5545                        ;
  5546                        ;	unsigned long c;
  5547                        ;
  5548                        ;	size_t curSize;
  5549                        ;
  5550                        ;	if (umm_heap == NULL)
  5551             00000000   blocks_1	set	0
  5552             00000004   blockSize_1	set	4
  5553             00000008   prevBlockSize_1	set	8
  Thu Dec  3 2020 22:25                                                Page 104


  5554             0000000C   nextBlockSize_1	set	12
  5555             00000010   c_1	set	16
  5556             00000014   curSize_1	set	20
  5557                        	.sym	blocks,0,18,1,32
  5558                        	.sym	blockSize,4,18,1,32
  5559                        	.sym	prevBlockSize,8,18,1,32
  5560                        	.sym	nextBlockSize,12,18,1,32
  5561                        	.sym	c,16,18,1,32
  5562                        	.sym	curSize,20,16,1,16
  5563                        	.sym	ptr,4,129,6,32
  5564                        	.sym	size,8,18,6,32
  5565 00:1A29: 64 19        	stz	<L169+prevBlockSize_1
  5566 00:1A2B: 64 1B        	stz	<L169+prevBlockSize_1+2
  5567 00:1A2D: 64 1D        	stz	<L169+nextBlockSize_1
  5568 00:1A2F: 64 1F        	stz	<L169+nextBlockSize_1+2
  5569                        	.line	514
  5570                        ;	{
  5571 00:1A31: AD xx xx     	lda	|~~umm_heap
  5572 00:1A34: 0D xx xx     	ora	|~~umm_heap+2
  5573 00:1A37: F0 03        	beq	L171
  5574 00:1A39: 82 04 00     	brl	L10063
  5575                        L171:
  5576                        	.line	515
  5577                        ;		umm_init();
  5578                        	.line	516
  5579 00:1A3C: 22 xx xx xx  	jsl	~~umm_init
  5580                        ;	}
  5581                        	.line	517
  5582                        ;
  5583                        ;	/*
  5584                        ;	 * This code looks after the case of a NULL valu
                    e for ptr. The ANSI C
  5585                        ;	 * standard says that if ptr is NULL and size is
                     non-zero, then we've
  5586                        ;	 * got to work the same a malloc(). If size is a
                    lso 0, then our version
  5587                        ;	 * of malloc() returns a NULL pointer, which is 
                    OK as FAR as the ANSI C
  5588                        ;	 * standard is concerned.
  5589                        ;	 */
  5590                        ;
  5591                        ;	if (((void FAR*) NULL == ptr))
  5592                        L10063:
  5593                        	.line	527
  5594                        ;	{
  5595 00:1A40: A5 2E        	lda	<L168+ptr_0
  5596 00:1A42: 05 30        	ora	<L168+ptr_0+2
  5597 00:1A44: F0 03        	beq	L172
  5598 00:1A46: 82 22 00     	brl	L10064
  5599                        L172:
  5600                        	.line	528
  5601                        ;		//DBGLOG_DEBUG( "realloc the NULL pointe
                    r - call malloc()\n" );
  5602                        ;
  5603                        ;		return (umm_malloc(size));
  5604                        	.line	531
  5605 00:1A49: D4 34        	pei	<L168+size_0+2
  5606 00:1A4B: D4 32        	pei	<L168+size_0
  Thu Dec  3 2020 22:25                                                Page 105


  5607 00:1A4D: 22 xx xx xx  	jsl	~~umm_malloc
  5608 00:1A51: 85 01        	sta	<R0
  5609 00:1A53: 86 03        	stx	<R0+2
  5610 00:1A55: A6 03        	ldx	<R0+2
  5611 00:1A57: A5 01        	lda	<R0
  5612                        L173:
  5613 00:1A59: A8           	tay
  5614 00:1A5A: A5 2C        	lda	<L168+2
  5615 00:1A5C: 85 34        	sta	<L168+2+8
  5616 00:1A5E: A5 2B        	lda	<L168+1
  5617 00:1A60: 85 33        	sta	<L168+1+8
  5618 00:1A62: 2B           	pld
  5619 00:1A63: 3B           	tsc
  5620 00:1A64: 18           	clc
  5621 00:1A65: 69 32 00     	adc	#L168+8
  5622 00:1A68: 1B           	tcs
  5623 00:1A69: 98           	tya
  5624 00:1A6A: 6B           	rtl
  5625                        ;	}
  5626                        	.line	532
  5627                        ;
  5628                        ;	/*
  5629                        ;	 * Now we're sure that we have a non_NULL ptr, b
                    ut we're not sure what
  5630                        ;	 * we should do with it. If the size is 0, then 
                    the ANSI C standard says that
  5631                        ;	 * we should operate the same as free.
  5632                        ;	 */
  5633                        ;
  5634                        ;	if (0 == size)
  5635                        L10064:
  5636                        	.line	540
  5637                        ;	{
  5638 00:1A6B: A5 32        	lda	<L168+size_0
  5639 00:1A6D: 05 34        	ora	<L168+size_0+2
  5640 00:1A6F: F0 03        	beq	L174
  5641 00:1A71: 82 12 00     	brl	L10065
  5642                        L174:
  5643                        	.line	541
  5644                        ;		//DBGLOG_DEBUG( "realloc to 0 size, just
                     free the block\n" );
  5645                        ;
  5646                        ;		umm_free(ptr);
  5647                        	.line	544
  5648 00:1A74: D4 30        	pei	<L168+ptr_0+2
  5649 00:1A76: D4 2E        	pei	<L168+ptr_0
  5650 00:1A78: 22 xx xx xx  	jsl	~~umm_free
  5651                        ;
  5652                        ;		return ((void FAR *) NULL);
  5653                        	.line	546
  5654 00:1A7C: A9 00 00     	lda	#$0
  5655 00:1A7F: AA           	tax
  5656 00:1A80: A9 00 00     	lda	#$0
  5657 00:1A83: 82 D3 FF     	brl	L173
  5658                        ;	}
  5659                        	.line	547
  5660                        ;
  5661                        ;	/*
  Thu Dec  3 2020 22:25                                                Page 106


  5662                        ;	 * Otherwise we need to actually do a reallocati
                    on. A naiive approach
  5663                        ;	 * would be to malloc() a new block of the corre
                    ct size, copy the old data
  5664                        ;	 * to the new block, and then free the old block
                    .
  5665                        ;	 *
  5666                        ;	 * While this will work, we end up doing a lot o
                    f possibly unnecessary
  5667                        ;	 * copying. So first, let's figure out how many 
                    blocks we'll need.
  5668                        ;	 */
  5669                        ;
  5670                        ;	blocks = umm_blocks(size);
  5671                        L10065:
  5672                        	.line	558
  5673 00:1A86: D4 32        	pei	<L168+size_0
  5674 00:1A88: 22 xx xx xx  	jsl	~~umm_blocks
  5675 00:1A8C: 85 11        	sta	<L169+blocks_1
  5676 00:1A8E: 86 13        	stx	<L169+blocks_1+2
  5677                        ;
  5678                        ;	/* Figure out which block we're in. Note the use
                     of truncated division... */
  5679                        ;
  5680                        ;	c = (((char FAR *) ptr) - (char FAR *) (&(umm_he
                    ap[0]))) / sizeof(umm_block);
  5681                        	.line	562
  5682 00:1A90: 38           	sec
  5683 00:1A91: A5 2E        	lda	<L168+ptr_0
  5684 00:1A93: ED xx xx     	sbc	|~~umm_heap
  5685 00:1A96: 85 01        	sta	<R0
  5686 00:1A98: A5 30        	lda	<L168+ptr_0+2
  5687 00:1A9A: ED xx xx     	sbc	|~~umm_heap+2
  5688 00:1A9D: 85 03        	sta	<R0+2
  5689 00:1A9F: F4 00 00     	pea	#^$10
  5690 00:1AA2: F4 10 00     	pea	#<$10
  5691 00:1AA5: D4 03        	pei	<R0+2
  5692 00:1AA7: D4 01        	pei	<R0
  5693                        	xref	~~~ldiv
  5694 00:1AA9: 22 xx xx xx  	jsl	~~~ldiv
  5695 00:1AAD: 85 21        	sta	<L169+c_1
  5696 00:1AAF: 86 23        	stx	<L169+c_1+2
  5697                        ;
  5698                        ;	/* Figure out how big this block is ... the free
                     bit is not set :-) */
  5699                        ;
  5700                        ;	blockSize = (UMM_NBLOCK(c) - c);
  5701                        	.line	566
  5702 00:1AB1: A5 21        	lda	<L169+c_1
  5703 00:1AB3: 85 01        	sta	<R0
  5704 00:1AB5: A5 23        	lda	<L169+c_1+2
  5705 00:1AB7: 85 03        	sta	<R0+2
  5706 00:1AB9: 06 01        	asl	<R0
  5707 00:1ABB: 26 03        	rol	<R0+2
  5708 00:1ABD: 06 01        	asl	<R0
  5709 00:1ABF: 26 03        	rol	<R0+2
  5710 00:1AC1: 06 01        	asl	<R0
  5711 00:1AC3: 26 03        	rol	<R0+2
  Thu Dec  3 2020 22:25                                                Page 107


  5712 00:1AC5: 06 01        	asl	<R0
  5713 00:1AC7: 26 03        	rol	<R0+2
  5714 00:1AC9: 18           	clc
  5715 00:1ACA: AD xx xx     	lda	|~~umm_heap
  5716 00:1ACD: 65 01        	adc	<R0
  5717 00:1ACF: 85 05        	sta	<R1
  5718 00:1AD1: AD xx xx     	lda	|~~umm_heap+2
  5719 00:1AD4: 65 03        	adc	<R0+2
  5720 00:1AD6: 85 07        	sta	<R1+2
  5721 00:1AD8: 38           	sec
  5722 00:1AD9: A7 05        	lda	[<R1]
  5723 00:1ADB: E5 21        	sbc	<L169+c_1
  5724 00:1ADD: 85 15        	sta	<L169+blockSize_1
  5725 00:1ADF: A0 02 00     	ldy	#$2
  5726 00:1AE2: B7 05        	lda	[<R1],Y
  5727 00:1AE4: E5 23        	sbc	<L169+c_1+2
  5728 00:1AE6: 85 17        	sta	<L169+blockSize_1+2
  5729                        ;
  5730                        ;	/* Figure out how many bytes are in this block *
                    /
  5731                        ;
  5732                        ;	curSize = (blockSize * sizeof(umm_block))
  5733                        	.line	570
  5734                        ;			- (sizeof(((umm_block *) 0)->hea
                    der));
  5735 00:1AE8: A5 15        	lda	<L169+blockSize_1
  5736 00:1AEA: 85 01        	sta	<R0
  5737 00:1AEC: A5 17        	lda	<L169+blockSize_1+2
  5738 00:1AEE: 85 03        	sta	<R0+2
  5739 00:1AF0: 06 01        	asl	<R0
  5740 00:1AF2: 26 03        	rol	<R0+2
  5741 00:1AF4: 06 01        	asl	<R0
  5742 00:1AF6: 26 03        	rol	<R0+2
  5743 00:1AF8: 06 01        	asl	<R0
  5744 00:1AFA: 26 03        	rol	<R0+2
  5745 00:1AFC: 06 01        	asl	<R0
  5746 00:1AFE: 26 03        	rol	<R0+2
  5747 00:1B00: 18           	clc
  5748 00:1B01: A9 F8 FF     	lda	#$fff8
  5749 00:1B04: 65 01        	adc	<R0
  5750 00:1B06: 85 05        	sta	<R1
  5751 00:1B08: A9 FF FF     	lda	#$ffff
  5752 00:1B0B: 65 03        	adc	<R0+2
  5753 00:1B0D: 85 07        	sta	<R1+2
  5754 00:1B0F: A5 05        	lda	<R1
  5755 00:1B11: 85 25        	sta	<L169+curSize_1
  5756                        ;
  5757                        ;	/* Protect the critical section... */
  5758                        ;	UMM_CRITICAL_ENTRY();
  5759                        	.line	574
  5760                        ;
  5761                        ;	/* Now figure out if the previous and/or next bl
                    ocks are free as well as
  5762                        ;	 * their sizes - this will help us to minimize s
                    pecial code later when we
  5763                        ;	 * decide if it's possible to use the adjacent b
                    locks.
  5764                        ;	 *
  Thu Dec  3 2020 22:25                                                Page 108


  5765                        ;	 * We set prevBlockSize and nextBlockSize to non
                    -zero values ONLY if they
  5766                        ;	 * are free!
  5767                        ;	 */
  5768                        ;
  5769                        ;	if ((UMM_NBLOCK(UMM_NBLOCK(c)) & UMM_FREELIST_MA
                    SK))
  5770                        	.line	584
  5771                        ;	{
  5772 00:1B13: A5 21        	lda	<L169+c_1
  5773 00:1B15: 85 05        	sta	<R1
  5774 00:1B17: A5 23        	lda	<L169+c_1+2
  5775 00:1B19: 85 07        	sta	<R1+2
  5776 00:1B1B: 06 05        	asl	<R1
  5777 00:1B1D: 26 07        	rol	<R1+2
  5778 00:1B1F: 06 05        	asl	<R1
  5779 00:1B21: 26 07        	rol	<R1+2
  5780 00:1B23: 06 05        	asl	<R1
  5781 00:1B25: 26 07        	rol	<R1+2
  5782 00:1B27: 06 05        	asl	<R1
  5783 00:1B29: 26 07        	rol	<R1+2
  5784 00:1B2B: 18           	clc
  5785 00:1B2C: AD xx xx     	lda	|~~umm_heap
  5786 00:1B2F: 65 05        	adc	<R1
  5787 00:1B31: 85 09        	sta	<R2
  5788 00:1B33: AD xx xx     	lda	|~~umm_heap+2
  5789 00:1B36: 65 07        	adc	<R1+2
  5790 00:1B38: 85 0B        	sta	<R2+2
  5791 00:1B3A: A0 02 00     	ldy	#$2
  5792 00:1B3D: B7 09        	lda	[<R2],Y
  5793 00:1B3F: 48           	pha
  5794 00:1B40: A7 09        	lda	[<R2]
  5795 00:1B42: 48           	pha
  5796 00:1B43: A9 04 00     	lda	#$4
  5797                        	xref	~~~lasl
  5798 00:1B46: 22 xx xx xx  	jsl	~~~lasl
  5799 00:1B4A: 85 01        	sta	<R0
  5800 00:1B4C: 86 03        	stx	<R0+2
  5801 00:1B4E: 18           	clc
  5802 00:1B4F: AD xx xx     	lda	|~~umm_heap
  5803 00:1B52: 65 01        	adc	<R0
  5804 00:1B54: 85 05        	sta	<R1
  5805 00:1B56: AD xx xx     	lda	|~~umm_heap+2
  5806 00:1B59: 65 03        	adc	<R0+2
  5807 00:1B5B: 85 07        	sta	<R1+2
  5808 00:1B5D: A7 05        	lda	[<R1]
  5809 00:1B5F: 29 00 80     	and	#<$8000
  5810 00:1B62: D0 03        	bne	L175
  5811 00:1B64: 82 8A 00     	brl	L10066
  5812                        L175:
  5813                        	.line	585
  5814                        ;		nextBlockSize = (UMM_NBLOCK(UMM_NBLOCK(c
                    )) & UMM_BLOCKNO_MASK)
  5815                        	.line	586
  5816                        ;				- UMM_NBLOCK(c);
  5817 00:1B67: A5 21        	lda	<L169+c_1
  5818 00:1B69: 85 01        	sta	<R0
  5819 00:1B6B: A5 23        	lda	<L169+c_1+2
  Thu Dec  3 2020 22:25                                                Page 109


  5820 00:1B6D: 85 03        	sta	<R0+2
  5821 00:1B6F: 06 01        	asl	<R0
  5822 00:1B71: 26 03        	rol	<R0+2
  5823 00:1B73: 06 01        	asl	<R0
  5824 00:1B75: 26 03        	rol	<R0+2
  5825 00:1B77: 06 01        	asl	<R0
  5826 00:1B79: 26 03        	rol	<R0+2
  5827 00:1B7B: 06 01        	asl	<R0
  5828 00:1B7D: 26 03        	rol	<R0+2
  5829 00:1B7F: 18           	clc
  5830 00:1B80: AD xx xx     	lda	|~~umm_heap
  5831 00:1B83: 65 01        	adc	<R0
  5832 00:1B85: 85 05        	sta	<R1
  5833 00:1B87: AD xx xx     	lda	|~~umm_heap+2
  5834 00:1B8A: 65 03        	adc	<R0+2
  5835 00:1B8C: 85 07        	sta	<R1+2
  5836 00:1B8E: A5 21        	lda	<L169+c_1
  5837 00:1B90: 85 09        	sta	<R2
  5838 00:1B92: A5 23        	lda	<L169+c_1+2
  5839 00:1B94: 85 0B        	sta	<R2+2
  5840 00:1B96: 06 09        	asl	<R2
  5841 00:1B98: 26 0B        	rol	<R2+2
  5842 00:1B9A: 06 09        	asl	<R2
  5843 00:1B9C: 26 0B        	rol	<R2+2
  5844 00:1B9E: 06 09        	asl	<R2
  5845 00:1BA0: 26 0B        	rol	<R2+2
  5846 00:1BA2: 06 09        	asl	<R2
  5847 00:1BA4: 26 0B        	rol	<R2+2
  5848 00:1BA6: 18           	clc
  5849 00:1BA7: AD xx xx     	lda	|~~umm_heap
  5850 00:1BAA: 65 09        	adc	<R2
  5851 00:1BAC: 85 0D        	sta	<R3
  5852 00:1BAE: AD xx xx     	lda	|~~umm_heap+2
  5853 00:1BB1: 65 0B        	adc	<R2+2
  5854 00:1BB3: 85 0F        	sta	<R3+2
  5855 00:1BB5: A0 02 00     	ldy	#$2
  5856 00:1BB8: B7 0D        	lda	[<R3],Y
  5857 00:1BBA: 48           	pha
  5858 00:1BBB: A7 0D        	lda	[<R3]
  5859 00:1BBD: 48           	pha
  5860 00:1BBE: A9 04 00     	lda	#$4
  5861                        	xref	~~~lasl
  5862 00:1BC1: 22 xx xx xx  	jsl	~~~lasl
  5863 00:1BC5: 85 01        	sta	<R0
  5864 00:1BC7: 86 03        	stx	<R0+2
  5865 00:1BC9: 18           	clc
  5866 00:1BCA: AD xx xx     	lda	|~~umm_heap
  5867 00:1BCD: 65 01        	adc	<R0
  5868 00:1BCF: 85 09        	sta	<R2
  5869 00:1BD1: AD xx xx     	lda	|~~umm_heap+2
  5870 00:1BD4: 65 03        	adc	<R0+2
  5871 00:1BD6: 85 0B        	sta	<R2+2
  5872 00:1BD8: A7 09        	lda	[<R2]
  5873 00:1BDA: 29 FF 7F     	and	#<$7fff
  5874 00:1BDD: 85 01        	sta	<R0
  5875 00:1BDF: 64 03        	stz	<R0+2
  5876 00:1BE1: 38           	sec
  5877 00:1BE2: A5 01        	lda	<R0
  Thu Dec  3 2020 22:25                                                Page 110


  5878 00:1BE4: E7 05        	sbc	[<R1]
  5879 00:1BE6: 85 1D        	sta	<L169+nextBlockSize_1
  5880 00:1BE8: A5 03        	lda	<R0+2
  5881 00:1BEA: A0 02 00     	ldy	#$2
  5882 00:1BED: F7 05        	sbc	[<R1],Y
  5883 00:1BEF: 85 1F        	sta	<L169+nextBlockSize_1+2
  5884                        ;	}
  5885                        	.line	588
  5886                        ;
  5887                        ;	if ((UMM_NBLOCK(UMM_PBLOCK(c)) & UMM_FREELIST_MA
                    SK))
  5888                        L10066:
  5889                        	.line	590
  5890                        ;	{
  5891 00:1BF1: A5 21        	lda	<L169+c_1
  5892 00:1BF3: 85 05        	sta	<R1
  5893 00:1BF5: A5 23        	lda	<L169+c_1+2
  5894 00:1BF7: 85 07        	sta	<R1+2
  5895 00:1BF9: 06 05        	asl	<R1
  5896 00:1BFB: 26 07        	rol	<R1+2
  5897 00:1BFD: 06 05        	asl	<R1
  5898 00:1BFF: 26 07        	rol	<R1+2
  5899 00:1C01: 06 05        	asl	<R1
  5900 00:1C03: 26 07        	rol	<R1+2
  5901 00:1C05: 06 05        	asl	<R1
  5902 00:1C07: 26 07        	rol	<R1+2
  5903 00:1C09: 18           	clc
  5904 00:1C0A: A9 04 00     	lda	#$4
  5905 00:1C0D: 6D xx xx     	adc	|~~umm_heap
  5906 00:1C10: 85 09        	sta	<R2
  5907 00:1C12: A9 00 00     	lda	#$0
  5908 00:1C15: 6D xx xx     	adc	|~~umm_heap+2
  5909 00:1C18: 85 0B        	sta	<R2+2
  5910 00:1C1A: 18           	clc
  5911 00:1C1B: A5 09        	lda	<R2
  5912 00:1C1D: 65 05        	adc	<R1
  5913 00:1C1F: 85 0D        	sta	<R3
  5914 00:1C21: A5 0B        	lda	<R2+2
  5915 00:1C23: 65 07        	adc	<R1+2
  5916 00:1C25: 85 0F        	sta	<R3+2
  5917 00:1C27: A0 02 00     	ldy	#$2
  5918 00:1C2A: B7 0D        	lda	[<R3],Y
  5919 00:1C2C: 48           	pha
  5920 00:1C2D: A7 0D        	lda	[<R3]
  5921 00:1C2F: 48           	pha
  5922 00:1C30: A9 04 00     	lda	#$4
  5923                        	xref	~~~lasl
  5924 00:1C33: 22 xx xx xx  	jsl	~~~lasl
  5925 00:1C37: 85 01        	sta	<R0
  5926 00:1C39: 86 03        	stx	<R0+2
  5927 00:1C3B: 18           	clc
  5928 00:1C3C: AD xx xx     	lda	|~~umm_heap
  5929 00:1C3F: 65 01        	adc	<R0
  5930 00:1C41: 85 05        	sta	<R1
  5931 00:1C43: AD xx xx     	lda	|~~umm_heap+2
  5932 00:1C46: 65 03        	adc	<R0+2
  5933 00:1C48: 85 07        	sta	<R1+2
  5934 00:1C4A: A7 05        	lda	[<R1]
  Thu Dec  3 2020 22:25                                                Page 111


  5935 00:1C4C: 29 00 80     	and	#<$8000
  5936 00:1C4F: D0 03        	bne	L176
  5937 00:1C51: 82 46 00     	brl	L10067
  5938                        L176:
  5939                        	.line	591
  5940                        ;		prevBlockSize = (c - UMM_PBLOCK(c));
  5941                        	.line	592
  5942 00:1C54: A5 21        	lda	<L169+c_1
  5943 00:1C56: 85 01        	sta	<R0
  5944 00:1C58: A5 23        	lda	<L169+c_1+2
  5945 00:1C5A: 85 03        	sta	<R0+2
  5946 00:1C5C: 06 01        	asl	<R0
  5947 00:1C5E: 26 03        	rol	<R0+2
  5948 00:1C60: 06 01        	asl	<R0
  5949 00:1C62: 26 03        	rol	<R0+2
  5950 00:1C64: 06 01        	asl	<R0
  5951 00:1C66: 26 03        	rol	<R0+2
  5952 00:1C68: 06 01        	asl	<R0
  5953 00:1C6A: 26 03        	rol	<R0+2
  5954 00:1C6C: 18           	clc
  5955 00:1C6D: A9 04 00     	lda	#$4
  5956 00:1C70: 6D xx xx     	adc	|~~umm_heap
  5957 00:1C73: 85 05        	sta	<R1
  5958 00:1C75: A9 00 00     	lda	#$0
  5959 00:1C78: 6D xx xx     	adc	|~~umm_heap+2
  5960 00:1C7B: 85 07        	sta	<R1+2
  5961 00:1C7D: 18           	clc
  5962 00:1C7E: A5 05        	lda	<R1
  5963 00:1C80: 65 01        	adc	<R0
  5964 00:1C82: 85 09        	sta	<R2
  5965 00:1C84: A5 07        	lda	<R1+2
  5966 00:1C86: 65 03        	adc	<R0+2
  5967 00:1C88: 85 0B        	sta	<R2+2
  5968 00:1C8A: 38           	sec
  5969 00:1C8B: A5 21        	lda	<L169+c_1
  5970 00:1C8D: E7 09        	sbc	[<R2]
  5971 00:1C8F: 85 19        	sta	<L169+prevBlockSize_1
  5972 00:1C91: A5 23        	lda	<L169+c_1+2
  5973 00:1C93: A0 02 00     	ldy	#$2
  5974 00:1C96: F7 09        	sbc	[<R2],Y
  5975 00:1C98: 85 1B        	sta	<L169+prevBlockSize_1+2
  5976                        ;	}
  5977                        	.line	593
  5978                        ;
  5979                        ;	//DBGLOG_DEBUG( "realloc blocks %i blockSize %i 
                    nextBlockSize %i prevBlockSize %i\n", blocks, blockSize, nex
                    tBlockSize, prevBlockSize );
  5980                        ;
  5981                        ;	/*
  5982                        ;	 * Ok, now that we're here we know how many bloc
                    ks we want and the current
  5983                        ;	 * blockSize. The prevBlockSize and nextBlockSiz
                    e are set and we can figure
  5984                        ;	 * out the best strategy for the new allocation 
                    as follows:
  5985                        ;	 *
  5986                        ;	 * 1. If the new block is the same size or small
                    er than the current block do
  Thu Dec  3 2020 22:25                                                Page 112


  5987                        ;	 *    nothing.
  5988                        ;	 * 2. If the next block is free and adding it to
                     the current block gives us
  5989                        ;	 *    enough memory, assimilate the next block.
  5990                        ;	 * 3. If the prev block is free and adding it to
                     the current block gives us
  5991                        ;	 *    enough memory, remove the previous block f
                    rom the free list, assimilate
  5992                        ;	 *    it, copy to the new block.
  5993                        ;	 * 4. If the prev and next blocks are free and a
                    dding them to the current
  5994                        ;	 *    block gives us enough memory, assimilate t
                    he next block, remove the
  5995                        ;	 *    previous block from the free list, assimil
                    ate it, copy to the new block.
  5996                        ;	 * 5. Otherwise try to allocate an entirely new 
                    block of memory. If the
  5997                        ;	 *    allocation works free the old block and re
                    turn the new pointer. If
  5998                        ;	 *    the allocation fails, return NULL and leav
                    e the old block intact.
  5999                        ;	 *
  6000                        ;	 * All that's left to do is decide if the fit wa
                    s exact or not. If the fit
  6001                        ;	 * was not exact, then split the memory block so
                     that we use only the requested
  6002                        ;	 * number of blocks and add what's left to the f
                    ree list.
  6003                        ;	 */
  6004                        ;
  6005                        ;	if (blockSize >= blocks)
  6006                        L10067:
  6007                        	.line	621
  6008                        ;	{
  6009 00:1C9A: A5 15        	lda	<L169+blockSize_1
  6010 00:1C9C: C5 11        	cmp	<L169+blocks_1
  6011 00:1C9E: A5 17        	lda	<L169+blockSize_1+2
  6012 00:1CA0: E5 13        	sbc	<L169+blocks_1+2
  6013 00:1CA2: B0 03        	bcs	L177
  6014 00:1CA4: 82 03 00     	brl	L10068
  6015                        L177:
  6016                        	.line	622
  6017                        ;		//DBGLOG_DEBUG( "realloc the same or sma
                    ller size block - %i, do nothing\n", blocks );
  6018                        ;		/* This space intentionally left blank *
                    /
  6019                        ;	}
  6020                        	.line	625
  6021                        ;	else if ((blockSize + nextBlockSize) >= blocks)
  6022 00:1CA7: 82 84 02     	brl	L10069
  6023                        L10068:
  6024                        	.line	626
  6025                        ;	{
  6026 00:1CAA: 18           	clc
  6027 00:1CAB: A5 15        	lda	<L169+blockSize_1
  6028 00:1CAD: 65 1D        	adc	<L169+nextBlockSize_1
  6029 00:1CAF: 85 01        	sta	<R0
  6030 00:1CB1: A5 17        	lda	<L169+blockSize_1+2
  Thu Dec  3 2020 22:25                                                Page 113


  6031 00:1CB3: 65 1F        	adc	<L169+nextBlockSize_1+2
  6032 00:1CB5: 85 03        	sta	<R0+2
  6033 00:1CB7: A5 01        	lda	<R0
  6034 00:1CB9: C5 11        	cmp	<L169+blocks_1
  6035 00:1CBB: A5 03        	lda	<R0+2
  6036 00:1CBD: E5 13        	sbc	<L169+blocks_1+2
  6037 00:1CBF: B0 03        	bcs	L178
  6038 00:1CC1: 82 18 00     	brl	L10070
  6039                        L178:
  6040                        	.line	627
  6041                        ;		//DBGLOG_DEBUG( "realloc using next bloc
                    k - %i\n", blocks );
  6042                        ;		umm_assimilate_up(c);
  6043                        	.line	629
  6044 00:1CC4: D4 23        	pei	<L169+c_1+2
  6045 00:1CC6: D4 21        	pei	<L169+c_1
  6046 00:1CC8: 22 xx xx xx  	jsl	~~umm_assimilate_up
  6047                        ;		blockSize += nextBlockSize;
  6048                        	.line	630
  6049 00:1CCC: 18           	clc
  6050 00:1CCD: A5 15        	lda	<L169+blockSize_1
  6051 00:1CCF: 65 1D        	adc	<L169+nextBlockSize_1
  6052 00:1CD1: 85 15        	sta	<L169+blockSize_1
  6053 00:1CD3: A5 17        	lda	<L169+blockSize_1+2
  6054 00:1CD5: 65 1F        	adc	<L169+nextBlockSize_1+2
  6055 00:1CD7: 85 17        	sta	<L169+blockSize_1+2
  6056                        ;	}
  6057                        	.line	631
  6058                        ;	else if ((prevBlockSize + blockSize) >= blocks)
  6059 00:1CD9: 82 52 02     	brl	L10071
  6060                        L10070:
  6061                        	.line	632
  6062                        ;	{
  6063 00:1CDC: 18           	clc
  6064 00:1CDD: A5 19        	lda	<L169+prevBlockSize_1
  6065 00:1CDF: 65 15        	adc	<L169+blockSize_1
  6066 00:1CE1: 85 01        	sta	<R0
  6067 00:1CE3: A5 1B        	lda	<L169+prevBlockSize_1+2
  6068 00:1CE5: 65 17        	adc	<L169+blockSize_1+2
  6069 00:1CE7: 85 03        	sta	<R0+2
  6070 00:1CE9: A5 01        	lda	<R0
  6071 00:1CEB: C5 11        	cmp	<L169+blocks_1
  6072 00:1CED: A5 03        	lda	<R0+2
  6073 00:1CEF: E5 13        	sbc	<L169+blocks_1+2
  6074 00:1CF1: B0 03        	bcs	L179
  6075 00:1CF3: 82 DF 00     	brl	L10072
  6076                        L179:
  6077                        	.line	633
  6078                        ;		//DBGLOG_DEBUG( "realloc using prev bloc
                    k - %i\n", blocks );
  6079                        ;		umm_disconnect_from_free_list(UMM_PBLOCK
                    (c));
  6080                        	.line	635
  6081 00:1CF6: A5 21        	lda	<L169+c_1
  6082 00:1CF8: 85 01        	sta	<R0
  6083 00:1CFA: A5 23        	lda	<L169+c_1+2
  6084 00:1CFC: 85 03        	sta	<R0+2
  6085 00:1CFE: 06 01        	asl	<R0
  Thu Dec  3 2020 22:25                                                Page 114


  6086 00:1D00: 26 03        	rol	<R0+2
  6087 00:1D02: 06 01        	asl	<R0
  6088 00:1D04: 26 03        	rol	<R0+2
  6089 00:1D06: 06 01        	asl	<R0
  6090 00:1D08: 26 03        	rol	<R0+2
  6091 00:1D0A: 06 01        	asl	<R0
  6092 00:1D0C: 26 03        	rol	<R0+2
  6093 00:1D0E: 18           	clc
  6094 00:1D0F: A9 04 00     	lda	#$4
  6095 00:1D12: 6D xx xx     	adc	|~~umm_heap
  6096 00:1D15: 85 05        	sta	<R1
  6097 00:1D17: A9 00 00     	lda	#$0
  6098 00:1D1A: 6D xx xx     	adc	|~~umm_heap+2
  6099 00:1D1D: 85 07        	sta	<R1+2
  6100 00:1D1F: 18           	clc
  6101 00:1D20: A5 05        	lda	<R1
  6102 00:1D22: 65 01        	adc	<R0
  6103 00:1D24: 85 09        	sta	<R2
  6104 00:1D26: A5 07        	lda	<R1+2
  6105 00:1D28: 65 03        	adc	<R0+2
  6106 00:1D2A: 85 0B        	sta	<R2+2
  6107 00:1D2C: A0 02 00     	ldy	#$2
  6108 00:1D2F: B7 09        	lda	[<R2],Y
  6109 00:1D31: 48           	pha
  6110 00:1D32: A7 09        	lda	[<R2]
  6111 00:1D34: 48           	pha
  6112 00:1D35: 22 xx xx xx  	jsl	~~umm_disconnect_from_free_list
  6113                        ;		c = umm_assimilate_down(c, 0);
  6114                        	.line	636
  6115 00:1D39: F4 00 00     	pea	#^$0
  6116 00:1D3C: F4 00 00     	pea	#<$0
  6117 00:1D3F: D4 23        	pei	<L169+c_1+2
  6118 00:1D41: D4 21        	pei	<L169+c_1
  6119 00:1D43: 22 xx xx xx  	jsl	~~umm_assimilate_down
  6120 00:1D47: 85 21        	sta	<L169+c_1
  6121 00:1D49: 86 23        	stx	<L169+c_1+2
  6122                        ;		memmove((void *) &UMM_DATA(c), ptr, curS
                    ize);
  6123                        	.line	637
  6124 00:1D4B: D4 25        	pei	<L169+curSize_1
  6125 00:1D4D: D4 30        	pei	<L168+ptr_0+2
  6126 00:1D4F: D4 2E        	pei	<L168+ptr_0
  6127 00:1D51: A5 21        	lda	<L169+c_1
  6128 00:1D53: 85 01        	sta	<R0
  6129 00:1D55: A5 23        	lda	<L169+c_1+2
  6130 00:1D57: 85 03        	sta	<R0+2
  6131 00:1D59: 06 01        	asl	<R0
  6132 00:1D5B: 26 03        	rol	<R0+2
  6133 00:1D5D: 06 01        	asl	<R0
  6134 00:1D5F: 26 03        	rol	<R0+2
  6135 00:1D61: 06 01        	asl	<R0
  6136 00:1D63: 26 03        	rol	<R0+2
  6137 00:1D65: 06 01        	asl	<R0
  6138 00:1D67: 26 03        	rol	<R0+2
  6139 00:1D69: 18           	clc
  6140 00:1D6A: A9 08 00     	lda	#$8
  6141 00:1D6D: 65 01        	adc	<R0
  6142 00:1D6F: 85 05        	sta	<R1
  Thu Dec  3 2020 22:25                                                Page 115


  6143 00:1D71: A9 00 00     	lda	#$0
  6144 00:1D74: 65 03        	adc	<R0+2
  6145 00:1D76: 85 07        	sta	<R1+2
  6146 00:1D78: 18           	clc
  6147 00:1D79: AD xx xx     	lda	|~~umm_heap
  6148 00:1D7C: 65 05        	adc	<R1
  6149 00:1D7E: 85 01        	sta	<R0
  6150 00:1D80: AD xx xx     	lda	|~~umm_heap+2
  6151 00:1D83: 65 07        	adc	<R1+2
  6152 00:1D85: 85 03        	sta	<R0+2
  6153 00:1D87: D4 03        	pei	<R0+2
  6154 00:1D89: D4 01        	pei	<R0
  6155 00:1D8B: 22 xx xx xx  	jsl	~~memmove
  6156                        ;		ptr = (void *) &UMM_DATA(c);
  6157                        	.line	638
  6158 00:1D8F: A5 21        	lda	<L169+c_1
  6159 00:1D91: 85 01        	sta	<R0
  6160 00:1D93: A5 23        	lda	<L169+c_1+2
  6161 00:1D95: 85 03        	sta	<R0+2
  6162 00:1D97: 06 01        	asl	<R0
  6163 00:1D99: 26 03        	rol	<R0+2
  6164 00:1D9B: 06 01        	asl	<R0
  6165 00:1D9D: 26 03        	rol	<R0+2
  6166 00:1D9F: 06 01        	asl	<R0
  6167 00:1DA1: 26 03        	rol	<R0+2
  6168 00:1DA3: 06 01        	asl	<R0
  6169 00:1DA5: 26 03        	rol	<R0+2
  6170 00:1DA7: 18           	clc
  6171 00:1DA8: A9 08 00     	lda	#$8
  6172 00:1DAB: 65 01        	adc	<R0
  6173 00:1DAD: 85 05        	sta	<R1
  6174 00:1DAF: A9 00 00     	lda	#$0
  6175 00:1DB2: 65 03        	adc	<R0+2
  6176 00:1DB4: 85 07        	sta	<R1+2
  6177 00:1DB6: 18           	clc
  6178 00:1DB7: AD xx xx     	lda	|~~umm_heap
  6179 00:1DBA: 65 05        	adc	<R1
  6180 00:1DBC: 85 2E        	sta	<L168+ptr_0
  6181 00:1DBE: AD xx xx     	lda	|~~umm_heap+2
  6182 00:1DC1: 65 07        	adc	<R1+2
  6183 00:1DC3: 85 30        	sta	<L168+ptr_0+2
  6184                        ;		blockSize += prevBlockSize;
  6185                        	.line	639
  6186 00:1DC5: 18           	clc
  6187 00:1DC6: A5 15        	lda	<L169+blockSize_1
  6188 00:1DC8: 65 19        	adc	<L169+prevBlockSize_1
  6189 00:1DCA: 85 15        	sta	<L169+blockSize_1
  6190 00:1DCC: A5 17        	lda	<L169+blockSize_1+2
  6191 00:1DCE: 65 1B        	adc	<L169+prevBlockSize_1+2
  6192 00:1DD0: 85 17        	sta	<L169+blockSize_1+2
  6193                        ;	}
  6194                        	.line	640
  6195                        ;	else if ((prevBlockSize + blockSize + nextBlockS
                    ize) >= blocks)
  6196 00:1DD2: 82 59 01     	brl	L10073
  6197                        L10072:
  6198                        	.line	641
  6199                        ;	{
  Thu Dec  3 2020 22:25                                                Page 116


  6200 00:1DD5: 18           	clc
  6201 00:1DD6: A5 19        	lda	<L169+prevBlockSize_1
  6202 00:1DD8: 65 15        	adc	<L169+blockSize_1
  6203 00:1DDA: 85 01        	sta	<R0
  6204 00:1DDC: A5 1B        	lda	<L169+prevBlockSize_1+2
  6205 00:1DDE: 65 17        	adc	<L169+blockSize_1+2
  6206 00:1DE0: 85 03        	sta	<R0+2
  6207 00:1DE2: 18           	clc
  6208 00:1DE3: A5 01        	lda	<R0
  6209 00:1DE5: 65 1D        	adc	<L169+nextBlockSize_1
  6210 00:1DE7: 85 05        	sta	<R1
  6211 00:1DE9: A5 03        	lda	<R0+2
  6212 00:1DEB: 65 1F        	adc	<L169+nextBlockSize_1+2
  6213 00:1DED: 85 07        	sta	<R1+2
  6214 00:1DEF: A5 05        	lda	<R1
  6215 00:1DF1: C5 11        	cmp	<L169+blocks_1
  6216 00:1DF3: A5 07        	lda	<R1+2
  6217 00:1DF5: E5 13        	sbc	<L169+blocks_1+2
  6218 00:1DF7: B0 03        	bcs	L180
  6219 00:1DF9: 82 F4 00     	brl	L10074
  6220                        L180:
  6221                        	.line	642
  6222                        ;		//DBGLOG_DEBUG( "realloc using prev and 
                    next block - %i\n", blocks );
  6223                        ;		umm_assimilate_up(c);
  6224                        	.line	644
  6225 00:1DFC: D4 23        	pei	<L169+c_1+2
  6226 00:1DFE: D4 21        	pei	<L169+c_1
  6227 00:1E00: 22 xx xx xx  	jsl	~~umm_assimilate_up
  6228                        ;		umm_disconnect_from_free_list(UMM_PBLOCK
                    (c));
  6229                        	.line	645
  6230 00:1E04: A5 21        	lda	<L169+c_1
  6231 00:1E06: 85 01        	sta	<R0
  6232 00:1E08: A5 23        	lda	<L169+c_1+2
  6233 00:1E0A: 85 03        	sta	<R0+2
  6234 00:1E0C: 06 01        	asl	<R0
  6235 00:1E0E: 26 03        	rol	<R0+2
  6236 00:1E10: 06 01        	asl	<R0
  6237 00:1E12: 26 03        	rol	<R0+2
  6238 00:1E14: 06 01        	asl	<R0
  6239 00:1E16: 26 03        	rol	<R0+2
  6240 00:1E18: 06 01        	asl	<R0
  6241 00:1E1A: 26 03        	rol	<R0+2
  6242 00:1E1C: 18           	clc
  6243 00:1E1D: A9 04 00     	lda	#$4
  6244 00:1E20: 6D xx xx     	adc	|~~umm_heap
  6245 00:1E23: 85 05        	sta	<R1
  6246 00:1E25: A9 00 00     	lda	#$0
  6247 00:1E28: 6D xx xx     	adc	|~~umm_heap+2
  6248 00:1E2B: 85 07        	sta	<R1+2
  6249 00:1E2D: 18           	clc
  6250 00:1E2E: A5 05        	lda	<R1
  6251 00:1E30: 65 01        	adc	<R0
  6252 00:1E32: 85 09        	sta	<R2
  6253 00:1E34: A5 07        	lda	<R1+2
  6254 00:1E36: 65 03        	adc	<R0+2
  6255 00:1E38: 85 0B        	sta	<R2+2
  Thu Dec  3 2020 22:25                                                Page 117


  6256 00:1E3A: A0 02 00     	ldy	#$2
  6257 00:1E3D: B7 09        	lda	[<R2],Y
  6258 00:1E3F: 48           	pha
  6259 00:1E40: A7 09        	lda	[<R2]
  6260 00:1E42: 48           	pha
  6261 00:1E43: 22 xx xx xx  	jsl	~~umm_disconnect_from_free_list
  6262                        ;		c = umm_assimilate_down(c, 0);
  6263                        	.line	646
  6264 00:1E47: F4 00 00     	pea	#^$0
  6265 00:1E4A: F4 00 00     	pea	#<$0
  6266 00:1E4D: D4 23        	pei	<L169+c_1+2
  6267 00:1E4F: D4 21        	pei	<L169+c_1
  6268 00:1E51: 22 xx xx xx  	jsl	~~umm_assimilate_down
  6269 00:1E55: 85 21        	sta	<L169+c_1
  6270 00:1E57: 86 23        	stx	<L169+c_1+2
  6271                        ;		memmove((void *) &UMM_DATA(c), ptr, curS
                    ize);
  6272                        	.line	647
  6273 00:1E59: D4 25        	pei	<L169+curSize_1
  6274 00:1E5B: D4 30        	pei	<L168+ptr_0+2
  6275 00:1E5D: D4 2E        	pei	<L168+ptr_0
  6276 00:1E5F: A5 21        	lda	<L169+c_1
  6277 00:1E61: 85 01        	sta	<R0
  6278 00:1E63: A5 23        	lda	<L169+c_1+2
  6279 00:1E65: 85 03        	sta	<R0+2
  6280 00:1E67: 06 01        	asl	<R0
  6281 00:1E69: 26 03        	rol	<R0+2
  6282 00:1E6B: 06 01        	asl	<R0
  6283 00:1E6D: 26 03        	rol	<R0+2
  6284 00:1E6F: 06 01        	asl	<R0
  6285 00:1E71: 26 03        	rol	<R0+2
  6286 00:1E73: 06 01        	asl	<R0
  6287 00:1E75: 26 03        	rol	<R0+2
  6288 00:1E77: 18           	clc
  6289 00:1E78: A9 08 00     	lda	#$8
  6290 00:1E7B: 65 01        	adc	<R0
  6291 00:1E7D: 85 05        	sta	<R1
  6292 00:1E7F: A9 00 00     	lda	#$0
  6293 00:1E82: 65 03        	adc	<R0+2
  6294 00:1E84: 85 07        	sta	<R1+2
  6295 00:1E86: 18           	clc
  6296 00:1E87: AD xx xx     	lda	|~~umm_heap
  6297 00:1E8A: 65 05        	adc	<R1
  6298 00:1E8C: 85 01        	sta	<R0
  6299 00:1E8E: AD xx xx     	lda	|~~umm_heap+2
  6300 00:1E91: 65 07        	adc	<R1+2
  6301 00:1E93: 85 03        	sta	<R0+2
  6302 00:1E95: D4 03        	pei	<R0+2
  6303 00:1E97: D4 01        	pei	<R0
  6304 00:1E99: 22 xx xx xx  	jsl	~~memmove
  6305                        ;		ptr = (void *) &UMM_DATA(c);
  6306                        	.line	648
  6307 00:1E9D: A5 21        	lda	<L169+c_1
  6308 00:1E9F: 85 01        	sta	<R0
  6309 00:1EA1: A5 23        	lda	<L169+c_1+2
  6310 00:1EA3: 85 03        	sta	<R0+2
  6311 00:1EA5: 06 01        	asl	<R0
  6312 00:1EA7: 26 03        	rol	<R0+2
  Thu Dec  3 2020 22:25                                                Page 118


  6313 00:1EA9: 06 01        	asl	<R0
  6314 00:1EAB: 26 03        	rol	<R0+2
  6315 00:1EAD: 06 01        	asl	<R0
  6316 00:1EAF: 26 03        	rol	<R0+2
  6317 00:1EB1: 06 01        	asl	<R0
  6318 00:1EB3: 26 03        	rol	<R0+2
  6319 00:1EB5: 18           	clc
  6320 00:1EB6: A9 08 00     	lda	#$8
  6321 00:1EB9: 65 01        	adc	<R0
  6322 00:1EBB: 85 05        	sta	<R1
  6323 00:1EBD: A9 00 00     	lda	#$0
  6324 00:1EC0: 65 03        	adc	<R0+2
  6325 00:1EC2: 85 07        	sta	<R1+2
  6326 00:1EC4: 18           	clc
  6327 00:1EC5: AD xx xx     	lda	|~~umm_heap
  6328 00:1EC8: 65 05        	adc	<R1
  6329 00:1ECA: 85 2E        	sta	<L168+ptr_0
  6330 00:1ECC: AD xx xx     	lda	|~~umm_heap+2
  6331 00:1ECF: 65 07        	adc	<R1+2
  6332 00:1ED1: 85 30        	sta	<L168+ptr_0+2
  6333                        ;		blockSize += (prevBlockSize + nextBlockS
                    ize);
  6334                        	.line	649
  6335 00:1ED3: 18           	clc
  6336 00:1ED4: A5 15        	lda	<L169+blockSize_1
  6337 00:1ED6: 65 1D        	adc	<L169+nextBlockSize_1
  6338 00:1ED8: 85 01        	sta	<R0
  6339 00:1EDA: A5 17        	lda	<L169+blockSize_1+2
  6340 00:1EDC: 65 1F        	adc	<L169+nextBlockSize_1+2
  6341 00:1EDE: 85 03        	sta	<R0+2
  6342 00:1EE0: 18           	clc
  6343 00:1EE1: A5 01        	lda	<R0
  6344 00:1EE3: 65 19        	adc	<L169+prevBlockSize_1
  6345 00:1EE5: 85 15        	sta	<L169+blockSize_1
  6346 00:1EE7: A5 03        	lda	<R0+2
  6347 00:1EE9: 65 1B        	adc	<L169+prevBlockSize_1+2
  6348 00:1EEB: 85 17        	sta	<L169+blockSize_1+2
  6349                        ;	}
  6350                        	.line	650
  6351                        ;	else
  6352 00:1EED: 82 3E 00     	brl	L10075
  6353                        L10074:
  6354                        ;	{
  6355                        	.line	652
  6356                        ;		//DBGLOG_DEBUG( "realloc a completely ne
                    w block %i\n", blocks );
  6357                        ;		void *oldptr = ptr;
  6358                        ;		if ((ptr = umm_malloc_core(size)))
  6359                        	.block	655
  6360             00000016   oldptr_2	set	22
  6361                        	.sym	oldptr,22,129,1,32
  6362 00:1EF0: A5 2E        	lda	<L168+ptr_0
  6363 00:1EF2: 85 27        	sta	<L169+oldptr_2
  6364 00:1EF4: A5 30        	lda	<L168+ptr_0+2
  6365 00:1EF6: 85 29        	sta	<L169+oldptr_2+2
  6366                        	.line	655
  6367                        ;		{
  6368 00:1EF8: D4 34        	pei	<L168+size_0+2
  Thu Dec  3 2020 22:25                                                Page 119


  6369 00:1EFA: D4 32        	pei	<L168+size_0
  6370 00:1EFC: 22 xx xx xx  	jsl	~~umm_malloc_core
  6371 00:1F00: 85 2E        	sta	<L168+ptr_0
  6372 00:1F02: 86 30        	stx	<L168+ptr_0+2
  6373 00:1F04: A5 2E        	lda	<L168+ptr_0
  6374 00:1F06: 05 30        	ora	<L168+ptr_0+2
  6375 00:1F08: D0 03        	bne	L182
  6376 00:1F0A: 82 19 00     	brl	L10076
  6377                        L182:
  6378                        	.line	656
  6379                        ;			//DBGLOG_DEBUG( "realloc %i to a
                     bigger block %i, copy, and free the old\n", blockSize, bloc
                    ks );
  6380                        ;			memcpy(ptr, oldptr, curSize);
  6381                        	.line	658
  6382 00:1F0D: D4 25        	pei	<L169+curSize_1
  6383 00:1F0F: D4 29        	pei	<L169+oldptr_2+2
  6384 00:1F11: D4 27        	pei	<L169+oldptr_2
  6385 00:1F13: D4 30        	pei	<L168+ptr_0+2
  6386 00:1F15: D4 2E        	pei	<L168+ptr_0
  6387 00:1F17: 22 xx xx xx  	jsl	~~memcpy
  6388                        ;			umm_free_core(oldptr);
  6389                        	.line	659
  6390 00:1F1B: D4 29        	pei	<L169+oldptr_2+2
  6391 00:1F1D: D4 27        	pei	<L169+oldptr_2
  6392 00:1F1F: 22 xx xx xx  	jsl	~~umm_free_core
  6393                        ;		}
  6394                        	.line	660
  6395                        ;		else
  6396 00:1F23: 82 00 00     	brl	L10077
  6397                        L10076:
  6398                        ;		{
  6399                        	.line	662
  6400                        ;			//DBGLOG_DEBUG( "realloc %i to a
                     bigger block %i failed - return NULL and leave the old bloc
                    k!\n", blockSize, blocks );
  6401                        ;			/* This space intentionally left
                     blnk */
  6402                        ;		}
  6403                        	.line	665
  6404                        L10077:
  6405                        ;		blockSize = blocks;
  6406                        	.line	666
  6407 00:1F26: A5 11        	lda	<L169+blocks_1
  6408 00:1F28: 85 15        	sta	<L169+blockSize_1
  6409 00:1F2A: A5 13        	lda	<L169+blocks_1+2
  6410 00:1F2C: 85 17        	sta	<L169+blockSize_1+2
  6411                        ;	}
  6412                        	.endblock	667
  6413                        	.line	667
  6414                        L10075:
  6415                        L10073:
  6416                        L10071:
  6417                        L10069:
  6418                        ;
  6419                        ;	/* Now all we need to do is figure out if the bl
                    ock fit exactly or if we
  6420                        ;	 * need to split and free ...
  Thu Dec  3 2020 22:25                                                Page 120


  6421                        ;	 */
  6422                        ;
  6423                        ;	if (blockSize > blocks)
  6424                        	.line	673
  6425                        ;	{
  6426 00:1F2E: A5 11        	lda	<L169+blocks_1
  6427 00:1F30: C5 15        	cmp	<L169+blockSize_1
  6428 00:1F32: A5 13        	lda	<L169+blocks_1+2
  6429 00:1F34: E5 17        	sbc	<L169+blockSize_1+2
  6430 00:1F36: 90 03        	bcc	L183
  6431 00:1F38: 82 54 00     	brl	L10078
  6432                        L183:
  6433                        	.line	674
  6434                        ;		//DBGLOG_DEBUG( "split and free %i block
                    s from %i\n", blocks, blockSize );
  6435                        ;		umm_split_block(c, blocks, 0);
  6436                        	.line	676
  6437 00:1F3B: F4 00 00     	pea	#^$0
  6438 00:1F3E: F4 00 00     	pea	#<$0
  6439 00:1F41: D4 13        	pei	<L169+blocks_1+2
  6440 00:1F43: D4 11        	pei	<L169+blocks_1
  6441 00:1F45: D4 23        	pei	<L169+c_1+2
  6442 00:1F47: D4 21        	pei	<L169+c_1
  6443 00:1F49: 22 xx xx xx  	jsl	~~umm_split_block
  6444                        ;		umm_free_core((void *) &UMM_DATA(c + blo
                    cks));
  6445                        	.line	677
  6446 00:1F4D: 18           	clc
  6447 00:1F4E: A5 21        	lda	<L169+c_1
  6448 00:1F50: 65 11        	adc	<L169+blocks_1
  6449 00:1F52: 85 05        	sta	<R1
  6450 00:1F54: A5 23        	lda	<L169+c_1+2
  6451 00:1F56: 65 13        	adc	<L169+blocks_1+2
  6452 00:1F58: 85 07        	sta	<R1+2
  6453 00:1F5A: D4 07        	pei	<R1+2
  6454 00:1F5C: D4 05        	pei	<R1
  6455 00:1F5E: A9 04 00     	lda	#$4
  6456                        	xref	~~~lasl
  6457 00:1F61: 22 xx xx xx  	jsl	~~~lasl
  6458 00:1F65: 85 01        	sta	<R0
  6459 00:1F67: 86 03        	stx	<R0+2
  6460 00:1F69: 18           	clc
  6461 00:1F6A: A9 08 00     	lda	#$8
  6462 00:1F6D: 65 01        	adc	<R0
  6463 00:1F6F: 85 09        	sta	<R2
  6464 00:1F71: A9 00 00     	lda	#$0
  6465 00:1F74: 65 03        	adc	<R0+2
  6466 00:1F76: 85 0B        	sta	<R2+2
  6467 00:1F78: 18           	clc
  6468 00:1F79: AD xx xx     	lda	|~~umm_heap
  6469 00:1F7C: 65 09        	adc	<R2
  6470 00:1F7E: 85 01        	sta	<R0
  6471 00:1F80: AD xx xx     	lda	|~~umm_heap+2
  6472 00:1F83: 65 0B        	adc	<R2+2
  6473 00:1F85: 85 03        	sta	<R0+2
  6474 00:1F87: D4 03        	pei	<R0+2
  6475 00:1F89: D4 01        	pei	<R0
  6476 00:1F8B: 22 xx xx xx  	jsl	~~umm_free_core
  Thu Dec  3 2020 22:25                                                Page 121


  6477                        ;	}
  6478                        	.line	678
  6479                        ;
  6480                        ;	/* Release the critical section... */
  6481                        ;	UMM_CRITICAL_EXIT();
  6482                        L10078:
  6483                        	.line	681
  6484                        ;
  6485                        ;	return (ptr);
  6486                        	.line	683
  6487 00:1F8F: A6 30        	ldx	<L168+ptr_0+2
  6488 00:1F91: A5 2E        	lda	<L168+ptr_0
  6489 00:1F93: 82 C3 FA     	brl	L173
  6490                        ;}
  6491                        	.line	684
  6492                        	.endblock	684
  6493             0000002A   L168	equ	42
  6494             00000011   L169	equ	17
  6495                        	ends
  6496                        	efunc
  6497                        	.endfunc	684,17,42
  6498                        	.line	684
  6499                        ;
  6500                        ;/* ----------------------------------------------
                    -------------------------- */
  6501                        ;
  6502                        ;void FAR *umm_calloc(unsigned long num, unsigned 
                    long item_size)
  6503                        ;{
  6504                        	.line	688
  6505                        	.line	689
  6506                        	code
  6507                        	xdef	~~umm_calloc
  6508                        	func
  6509                        	.function	689
  6510                        ~~umm_calloc:
  6511                        	longa	on
  6512                        	longi	on
  6513 00:1F96: 3B           	tsc
  6514 00:1F97: 38           	sec
  6515 00:1F98: E9 08 00     	sbc	#L184
  6516 00:1F9B: 1B           	tcs
  6517 00:1F9C: 0B           	phd
  6518 00:1F9D: 5B           	tcd
  6519             00000004   num_0	set	4
  6520             00000008   item_size_0	set	8
  6521                        	.block	689
  6522                        ;	void FAR *ret;
  6523                        ;
  6524                        ;	ret = umm_malloc((size_t) (item_size * num));
  6525             00000000   ret_1	set	0
  6526                        	.sym	ret,0,129,1,32
  6527                        	.sym	num,4,18,6,32
  6528                        	.sym	item_size,8,18,6,32
  6529                        	.line	692
  6530 00:1F9E: D4 0E        	pei	<L184+num_0+2
  6531 00:1FA0: D4 0C        	pei	<L184+num_0
  6532 00:1FA2: D4 12        	pei	<L184+item_size_0+2
  Thu Dec  3 2020 22:25                                                Page 122


  6533 00:1FA4: D4 10        	pei	<L184+item_size_0
  6534                        	xref	~~~lmul
  6535 00:1FA6: 22 xx xx xx  	jsl	~~~lmul
  6536 00:1FAA: 85 01        	sta	<R0
  6537 00:1FAC: 86 03        	stx	<R0+2
  6538 00:1FAE: A5 01        	lda	<R0
  6539 00:1FB0: 85 01        	sta	<R0
  6540 00:1FB2: 64 03        	stz	<R0+2
  6541 00:1FB4: D4 03        	pei	<R0+2
  6542 00:1FB6: D4 01        	pei	<R0
  6543 00:1FB8: 22 xx xx xx  	jsl	~~umm_malloc
  6544 00:1FBC: 85 05        	sta	<L185+ret_1
  6545 00:1FBE: 86 07        	stx	<L185+ret_1+2
  6546                        ;
  6547                        ;	if (ret)
  6548                        	.line	694
  6549                        ;		memset(ret, 0x00, (size_t) (item_size * 
                    num));
  6550 00:1FC0: A5 05        	lda	<L185+ret_1
  6551 00:1FC2: 05 07        	ora	<L185+ret_1+2
  6552 00:1FC4: D0 03        	bne	L187
  6553 00:1FC6: 82 1D 00     	brl	L10079
  6554                        L187:
  6555                        	.line	695
  6556 00:1FC9: D4 0E        	pei	<L184+num_0+2
  6557 00:1FCB: D4 0C        	pei	<L184+num_0
  6558 00:1FCD: D4 12        	pei	<L184+item_size_0+2
  6559 00:1FCF: D4 10        	pei	<L184+item_size_0
  6560                        	xref	~~~lmul
  6561 00:1FD1: 22 xx xx xx  	jsl	~~~lmul
  6562 00:1FD5: 85 01        	sta	<R0
  6563 00:1FD7: 86 03        	stx	<R0+2
  6564 00:1FD9: D4 01        	pei	<R0
  6565 00:1FDB: F4 00 00     	pea	#<$0
  6566 00:1FDE: D4 07        	pei	<L185+ret_1+2
  6567 00:1FE0: D4 05        	pei	<L185+ret_1
  6568 00:1FE2: 22 xx xx xx  	jsl	~~memset
  6569                        ;
  6570                        ;	return ret;
  6571                        L10079:
  6572                        	.line	697
  6573 00:1FE6: A6 07        	ldx	<L185+ret_1+2
  6574 00:1FE8: A5 05        	lda	<L185+ret_1
  6575                        L188:
  6576 00:1FEA: A8           	tay
  6577 00:1FEB: A5 0A        	lda	<L184+2
  6578 00:1FED: 85 12        	sta	<L184+2+8
  6579 00:1FEF: A5 09        	lda	<L184+1
  6580 00:1FF1: 85 11        	sta	<L184+1+8
  6581 00:1FF3: 2B           	pld
  6582 00:1FF4: 3B           	tsc
  6583 00:1FF5: 18           	clc
  6584 00:1FF6: 69 10 00     	adc	#L184+8
  6585 00:1FF9: 1B           	tcs
  6586 00:1FFA: 98           	tya
  6587 00:1FFB: 6B           	rtl
  6588                        ;}
  6589                        	.line	698
  Thu Dec  3 2020 22:25                                                Page 123


  6590                        	.endblock	698
  6591             00000008   L184	equ	8
  6592             00000005   L185	equ	5
  6593                        	ends
  6594                        	efunc
  6595                        	.endfunc	698,5,8
  6596                        	.line	698
  6597                        ;
  6598                        ;/* ----------------------------------------------
                    -------------------------- */
  6599                        ;
  6600                        	.line	700
  6601                        	xref	~~k_debug_long
  6602                        	xref	~~k_debug_pointer
  6603                        	xref	~~k_debug_string
  6604                        	xref	~~memset
  6605                        	xref	~~memmove
  6606                        	xref	~~memcpy
  6607                        	udata
  6608                        	xdef	~~ummHeapInfo
  6609                        ~~ummHeapInfo
  6610 00:0000:              	ds	32
  6611 00:0020:              	ends
  6612                        	.sym	~~umm_malloc_core,~~umm_malloc_core,1089
                    ,3,32
  6613                        	.sym	~~umm_free_core,~~umm_free_core,65,3,0
  6614                        	.sym	~~umm_assimilate_down,~~umm_assimilate_d
                    own,82,3,0
  6615                        	.sym	~~umm_assimilate_up,~~umm_assimilate_up,
                    65,3,0
  6616                        	.sym	~~umm_disconnect_from_free_list,~~umm_di
                    sconnect_from_free_list,65,3,0
  6617                        	.sym	~~umm_split_block,~~umm_split_block,65,3
                    ,0
  6618                        	.sym	~~umm_blocks,~~umm_blocks,82,3,0
  6619                        	.sym	~~get_unpoisoned,~~get_unpoisoned,1089,3
                    ,32
  6620                        	.sym	~~get_poisoned,~~get_poisoned,1089,3,32
  6621                        	.sym	~~check_poison_block,~~check_poison_bloc
                    k,69,3,0
  6622                        	.sym	~~check_poison,~~check_poison,69,3,0
  6623                        	.sym	~~put_poison,~~put_poison,65,3,0
  6624                        	.sym	~~dump_mem,~~dump_mem,65,3,0
  6625                        	.sym	~~poison_size,~~poison_size,80,3,0
  6626                        	.sym	DEVICEDRIVER_COMMAND,0,656,14,32
  6627                        	.sym	DEVICEDRIVER_UNLOAD,0,654,14,32
  6628                        	.sym	DEVICEDRIVER_WRITE,0,656,14,32
  6629                        	.sym	DEVICEDRIVER_READ,0,656,14,32
  6630                        	.sym	DEVICEDRIVER_LOAD,0,654,14,32
  6631                        	.sym	PFX_BLOCK_DEVICE_DRIVER,0,138,14,32,68
  6632                        	.sym	FX_BLOCK_DEVICE_DRIVER,0,10,14,1448,68
  6633                        	.sym	PFX_DEVICE_DRIVER,0,138,14,32,67
  6634                        	.sym	FX_DEVICE_DRIVER,0,10,14,1416,67
  6635                        	.sym	~~k_debug_long,~~k_debug_long,65,18,0
  6636                        	.sym	~~k_debug_pointer,~~k_debug_pointer,65,1
                    8,0
  6637                        	.sym	~~k_debug_string,~~k_debug_string,65,18,
                    0
  Thu Dec  3 2020 22:25                                                Page 124


  6638                        	.sym	PDEBUGBYTEBITS,0,138,14,32,66
  6639                        	.sym	DEBUGBYTEBITS,0,10,14,8,66
  6640                        	.sym	PFXENVIRONMENT,0,138,14,32,65
  6641                        	.sym	FXENVIRONMENT,0,10,14,96,65
  6642                        	.sym	PFXZERPOPAGE,0,138,14,32,64
  6643                        	.sym	FXZERPOPAGE,0,10,14,448,64
  6644                        	.sym	KERNELTRAPCALL,0,641,14,32
  6645                        	.sym	PCOMMANDARGS,0,138,14,32,63
  6646                        	.sym	COMMANDARGS,0,10,14,64,63
  6647                        	.sym	PTOKENIZESTATE,0,133,14,32
  6648                        	.sym	TOKENIZESTATE,0,5,14,16
  6649                        	.sym	PTOKEN,0,138,14,32,62
  6650                        	.sym	TOKEN,0,10,14,64,62
  6651                        	.sym	PTOKENTYPE,0,133,14,32
  6652                        	.sym	TOKENTYPE,0,5,14,16
  6653                        	.sym	FXCommandHandler,0,656,14,32
  6654                        	.sym	PCONSOLECTX,0,138,14,32,61
  6655                        	.sym	CONSOLECTX,0,10,14,1144,61
  6656                        	.sym	PSPINNERCTX,0,138,14,32,60
  6657                        	.sym	SPINNERCTX,0,10,14,48,60
  6658                        	.sym	PMOUSE_MSG_STATE,0,138,14,32,59
  6659                        	.sym	MOUSE_MSG_STATE,0,10,14,184,59
  6660                        	.sym	PFXEVENTPROCESS,0,138,14,32,58
  6661                        	.sym	FXEVENTPROCESS,0,10,14,64,58
  6662                        	.sym	FXEventProc,0,641,14,32
  6663                        	.sym	PMOUSEMSGDATA,0,138,14,32,57
  6664                        	.sym	MOUSEMSGDATA,0,10,14,64,57
  6665                        	.sym	MSGIRQ,0,5,14,16
  6666                        	.sym	MAINLOOPARGS,0,10,14,16,56
  6667                        	.sym	PEACHCHILD_MSG,0,138,14,32,55
  6668                        	.sym	EACHCHILD_MSG,0,10,14,64,55
  6669                        	.sym	PCUR_PALETTE_MAP,0,138,14,32,54
  6670                        	.sym	CUR_PALETTE_MAP,0,10,14,400,54
  6671                        	.sym	PCLICKDETECTED,0,138,14,32,53
  6672                        	.sym	CLICKDETECTED,0,10,14,64,53
  6673                        	.sym	OBJECTCLICKED,0,641,14,32
  6674                        	.sym	MemoryCallback,0,641,14,32
  6675                        	.sym	PFXMEMORYMAP,0,138,14,32,52
  6676                        	.sym	FXMEMORYMAP,0,10,14,2072,52
  6677                        	.sym	FOREACHNODEUNTIL,0,654,14,32
  6678                        	.sym	FOREACHNODE,0,641,14,32
  6679                        	.sym	PFXSTRING,0,138,14,32,51
  6680                        	.sym	FXSTRING,0,10,14,64,51
  6681                        	.sym	ldiv_t,0,10,14,64,49
  6682                        	.sym	div_t,0,10,14,32,48
  6683                        	.sym	wctype_t,0,16,14,16
  6684                        	.sym	wint_t,0,16,14,16
  6685                        	.sym	wchar_t,0,14,14,8
  6686                        	.sym	ptrdiff_t,0,7,14,32
  6687                        	.sym	~~umm_numblocks,~~umm_numblocks,18,2,32
  6688                        	.sym	~~umm_heap,~~umm_heap,138,2,32,47
  6689                        	.sym	umm_block,0,10,14,128,47
  6690                        	.sym	umm_ptr,0,10,14,64,44
  6691                        	.sym	~~umm_poison_check,~~umm_poison_check,69
                    ,2,0
  6692                        	.sym	~~umm_poison_free,~~umm_poison_free,65,2
                    ,0
  6693                        	.sym	~~umm_poison_realloc,~~umm_poison_reallo
  Thu Dec  3 2020 22:25                                                Page 125


                    c,1089,2,32
  6694                        	.sym	~~umm_poison_calloc,~~umm_poison_calloc,
                    1089,2,32
  6695                        	.sym	~~umm_poison_malloc,~~umm_poison_malloc,
                    1089,2,32
  6696                        	.sym	~~umm_integrity_check,~~umm_integrity_ch
                    eck,69,2,0
  6697                        	.sym	~~umm_free_heap_size,~~umm_free_heap_siz
                    e,80,2,0
  6698                        	.sym	~~umm_info,~~umm_info,1089,2,32
  6699                        	.sym	~~ummHeapInfo,~~ummHeapInfo,10,2,256,43
  6700                        	.sym	UMM_HEAP_INFO,0,10,14,256,43
  6701                        	.sym	~~umm_free,~~umm_free,65,2,0
  6702                        	.sym	~~umm_realloc,~~umm_realloc,1089,2,32
  6703                        	.sym	~~umm_calloc,~~umm_calloc,1089,2,32
  6704                        	.sym	~~umm_malloc,~~umm_malloc,1089,2,32
  6705                        	.sym	~~umm_init,~~umm_init,65,2,0
  6706                        	.sym	PFXCOMBUFFER,0,138,14,32,42
  6707                        	.sym	FXCOMBUFFER,0,10,14,2080,42
  6708                        	.sym	PSUBMENULIST,0,138,14,32,41
  6709                        	.sym	SUBMENULIST,0,10,14,40,41
  6710                        	.sym	HSUBMENU,0,7,14,32
  6711                        	.sym	PSUBMENU,0,138,14,32,40
  6712                        	.sym	SUBMENU,0,10,14,64,40
  6713                        	.sym	MenuAction,0,641,14,32
  6714                        	.sym	PMENUANCHOR,0,138,14,32,39
  6715                        	.sym	MENUANCHOR,0,10,14,144,39
  6716                        	.sym	PTEXTBOX,0,138,14,32,38
  6717                        	.sym	TEXTBOX,0,10,14,144,38
  6718                        	.sym	PLISTBOX,0,138,14,32,37
  6719                        	.sym	LISTBOX,0,10,14,240,37
  6720                        	.sym	PSCROLLBAR,0,138,14,32,36
  6721                        	.sym	SCROLLBAR,0,10,14,192,36
  6722                        	.sym	PBUTTON,0,138,14,32,35
  6723                        	.sym	BUTTON,0,10,14,80,35
  6724                        	.sym	PMENUDROPDOWNDATA,0,138,14,32,34
  6725                        	.sym	MENUDROPDOWNDATA,0,10,14,3568,34
  6726                        	.sym	PMENUTAG,0,138,14,32,33
  6727                        	.sym	MENUTAG,0,10,14,112,33
  6728                        	.sym	PMENU,0,138,14,32,32
  6729                        	.sym	MENU,0,10,14,248,32
  6730                        	.sym	HMENURESOURCE,0,129,14,32
  6731                        	.sym	HTEXTBOX,0,7,14,32
  6732                        	.sym	PTEXTBOXX,0,138,14,32,31
  6733                        	.sym	TEXTBOXX,0,10,14,112,31
  6734                        	.sym	FONTMETRIC,0,10,14,32,30
  6735                        	.sym	TITLE,0,142,14,32
  6736                        	.sym	PHANDLE,0,1153,14,32
  6737                        	.sym	HANDLE,0,129,14,32
  6738                        	.sym	PWINDOWEX,0,138,14,32,29
  6739                        	.sym	WINDOWEX,0,10,14,2704,29
  6740                        	.sym	PWINDOW,0,138,14,32,28
  6741                        	.sym	WINDOW,0,10,14,2808,28
  6742                        	.sym	PDRAGDATA,0,138,14,32,27
  6743                        	.sym	DRAGDATA,0,10,14,136,27
  6744                        	.sym	PNCCLICKABLE,0,138,14,32,26
  6745                        	.sym	NCCLICKABLE,0,10,14,88,26
  6746                        	.sym	HCLICKABLE,0,7,14,32
  Thu Dec  3 2020 22:25                                                Page 126


  6747                        	.sym	PCLICKABLE,0,138,14,32,25
  6748                        	.sym	CLICKABLE,0,10,14,88,25
  6749                        	.sym	PWNDCLASS,0,138,14,32,24
  6750                        	.sym	WNDCLASS,0,10,14,256,24
  6751                        	.sym	HBRUSH,0,129,14,32
  6752                        	.sym	HCURSOR,0,129,14,32
  6753                        	.sym	HICON,0,129,14,32
  6754                        	.sym	HINSTANCE,0,129,14,32
  6755                        	.sym	FXWndProc,0,654,14,32
  6756                        	.sym	PRECT,0,138,14,32,23
  6757                        	.sym	RECT,0,10,14,64,23
  6758                        	.sym	PPOINT,0,138,14,32,22
  6759                        	.sym	POINT,0,10,14,32,22
  6760                        	.sym	PFXPROPERTY,0,138,14,32,20
  6761                        	.sym	FXPROPERTY,0,10,14,384,20
  6762                        	.sym	SCANCODE,0,14,14,8
  6763                        	.sym	KEYCODE,0,14,14,8
  6764                        	.sym	PFXPROCESSMESSAGE,0,138,14,32,19
  6765                        	.sym	FXPROCESSMESSAGE,0,10,14,112,19
  6766                        	.sym	PFXPROCESS,0,138,14,32,18
  6767                        	.sym	FXPROCESS,0,10,14,800,18
  6768                        	.sym	PDESKTOP_CONTROL,0,138,14,32,17
  6769                        	.sym	DESKTOP_CONTROL,0,10,14,392,17
  6770                        	.sym	PCONSOLE_CONTROL,0,138,14,32,16
  6771                        	.sym	CONSOLE_CONTROL,0,10,14,448,16
  6772                        	.sym	FXProcessProc,0,641,14,32
  6773                        	.sym	PFXCMDMESSAGE,0,138,14,32,15
  6774                        	.sym	FXCMDMESSAGE,0,10,14,304,15
  6775                        	.sym	PFXOSMESSAGE,0,138,14,32,14
  6776                        	.sym	FXOSMESSAGE,0,10,14,304,14
  6777                        	.sym	PINT_REGS,0,138,14,32,13
  6778                        	.sym	INT_REGS,0,10,14,104,13
  6779                        	.sym	TASK_STACK,0,10,14,32,12
  6780                        	.sym	TASK,0,10,14,48,11
  6781                        	.sym	PIRQDATA,0,138,14,32,10
  6782                        	.sym	IRQDATA,0,10,14,48,10
  6783                        	.sym	HMENU,0,129,14,32
  6784                        	.sym	HWND,0,129,14,32
  6785                        	.sym	MSGDATA,0,14,14,8
  6786                        	.sym	MSGDEST,0,18,14,32
  6787                        	.sym	MSGSRC,0,18,14,32
  6788                        	.sym	MSGTYPE,0,16,14,16
  6789                        	.sym	PROCESS_RESOURCE_LIST,0,138,14,32,4
  6790                        	.sym	PROCESS_TLS_LIST,0,138,14,32,4
  6791                        	.sym	SEMAPHORE_LIST,0,138,14,32,4
  6792                        	.sym	FILE_BLOCK_LIST,0,138,14,32,4
  6793                        	.sym	FILE_PATH_LIST,0,138,14,32,4
  6794                        	.sym	PROCEDURE_LIST,0,138,14,32,4
  6795                        	.sym	FILE_HANDLE,0,138,14,32,9
  6796                        	.sym	FILE_BLOCK,0,10,14,552,9
  6797                        	.sym	SEMAPHORE,0,10,14,16,8
  6798                        	.sym	PPROCESS_SIGNAL,0,138,14,32,7
  6799                        	.sym	PROCESS_SIGNAL,0,10,14,16,7
  6800                        	.sym	KRESULT,0,18,14,32
  6801                        	.sym	PKERNEL_ERROR,0,138,14,32,6
  6802                        	.sym	KERNEL_ERROR,0,10,14,32,6
  6803                        	.sym	PROCESS_STATUS,0,16,14,16
  6804                        	.sym	FILE_PATH_NAME,0,142,14,32
  Thu Dec  3 2020 22:25                                                Page 127


  6805                        	.sym	PROCESS_RESOURCE,0,129,14,32
  6806                        	.sym	PROCESS_TLS,0,129,14,32
  6807                        	.sym	PROCESS_CTX,0,129,14,32
  6808                        	.sym	USERID,0,16,14,16
  6809                        	.sym	PROCESS_ID,0,18,14,32
  6810                        	.sym	PROCESS_BANK,0,14,14,8
  6811                        	.sym	PFXQUEUE,0,138,14,32,5
  6812                        	.sym	FXQUEUE,0,10,14,80,5
  6813                        	.sym	PFXNODELIST,0,138,14,32,4
  6814                        	.sym	FXNODELIST,0,10,14,96,4
  6815                        	.sym	NodeListDeallocator,0,641,14,32
  6816                        	.sym	PFXNODE,0,138,14,32,3
  6817                        	.sym	FXNODE,0,10,14,384,3
  6818                        	.sym	PBYTEBITS,0,138,14,32,2
  6819                        	.sym	BYTEBITS,0,10,14,8,2
  6820                        	.sym	HCOLOR,0,129,14,32
  6821                        	.sym	HFONT,0,129,14,32
  6822                        	.sym	HDC,0,129,14,32
  6823                        	.sym	HPOINTER,0,129,14,32
  6824                        	.sym	uint32_t,0,18,14,32
  6825                        	.sym	uint8_t,0,14,14,8
  6826                        	.sym	PFAR,0,142,14,32
  6827                        	.sym	LPBOOL,0,142,14,32
  6828                        	.sym	BOOL,0,14,14,8
  6829                        	.sym	DWORD,0,18,14,32
  6830                        	.sym	ULONG,0,18,14,32
  6831                        	.sym	LPLONG,0,135,14,32
  6832                        	.sym	LONG,0,7,14,32
  6833                        	.sym	PUINT,0,144,14,32
  6834                        	.sym	USHORT,0,16,14,16
  6835                        	.sym	UINT,0,16,14,16
  6836                        	.sym	INT,0,5,14,16
  6837                        	.sym	WORD,0,5,14,16
  6838                        	.sym	PBYTE,0,142,14,32
  6839                        	.sym	BYTE,0,14,14,8
  6840                        	.sym	UCHAR,0,14,14,8
  6841                        	.sym	LPWCSTR,0,142,14,32
  6842                        	.sym	LPCSTR,0,142,14,32
  6843                        	.sym	LPSTR,0,142,14,32
  6844                        	.sym	LPCHAR,0,142,14,32
  6845                        	.sym	CHAR,0,14,14,8
  6846                        	.sym	LPVOID,0,129,14,32
  6847                        	.sym	VOID,0,1,14,32
  6848                        	.sym	~~memset,~~memset,1089,18,32
  6849                        	.sym	~~memmove,~~memmove,1089,18,32
  6850                        	.sym	~~memcpy,~~memcpy,1089,18,32
  6851                        	.sym	Boolean_T,0,5,14,16
  6852                        	.sym	FILE,0,10,14,160,1
  6853                        	.sym	fpos_t,0,7,14,32
  6854                        	.sym	size_t,0,16,14,16
  6855                        	.sym	va_list,0,142,14,32
  6856                        	end


      Lines assembled: 6856
      Errors: 0
