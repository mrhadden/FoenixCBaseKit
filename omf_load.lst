  Thu Dec  3 2020 22:25                                                Page 1


                     ***************************************
                     **      WDC 65C816 Macro Assembler   **
                     **                                   **
                     **     Version 3.49.1- Feb  6 2006    **
                     ***************************************

     1                        ;:ts=8
     2             00000001   R0	equ	1
     3             00000005   R1	equ	5
     4             00000009   R2	equ	9
     5             0000000D   R3	equ	13
     6                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\OMF_Load.c",0
     7                        ;/************************************************
                    ************************/
     8                        ;/*                                               
                                           */
     9                        ;/*  OMF_Load.c : Module pour le chargement/décoda
                    ge des fichiers OMF.   */
    10                        ;/*                                               
                                           */
    11                        ;/************************************************
                    ************************/
    12                        ;/*  Auteur : Olivier ZARDINI  *  Brutal Deluxe So
                    ftware  *  Avril 2013  */
    13                        ;/************************************************
                    ************************/
    14                        ;
    15                        ;#include "fxtypes.h"
    16                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
    17                        	.stag	_fx_bytebits,8,1
    18                        	.member	b7,0,14,17,1
    19                        	.member	b6,1,14,17,1
    20                        	.member	b5,2,14,17,1
    21                        	.member	b4,3,14,17,1
    22                        	.member	b3,4,14,17,1
    23                        	.member	b2,5,14,17,1
    24                        	.member	b1,6,14,17,1
    25                        	.member	b0,7,14,17,1
    26                        	.eos
    27                        	.stag	_fx_node,384,2
    28                        	.member	type,0,14,8,8
    29                        	.member	Reserved0,8,14,8,8
    30                        	.member	data,16,129,8,32
    31                        	.member	last,48,138,8,32,2
    32                        	.member	next,80,138,8,32,2
    33                        	.member	name,112,110,8,0,32
    34                        	.member	Reserved1,368,16,8,16
    35                        	.eos
    36                        	.stag	_fx_nodelist,96,3
    37                        	.member	listhead,0,138,8,32,2
    38                        	.member	listData,32,129,8,32
    39                        	.member	deallocator,64,641,8,32
    40                        	.eos
    41                        	.stag	_fx_queue,80,4
    42                        	.member	count,0,5,8,16
    43                        	.member	front,16,138,8,32,2
  Thu Dec  3 2020 22:25                                                Page 2


    44                        	.member	rear,48,138,8,32,2
    45                        	.eos
    46                        	.stag	fake5_,32,5
    47                        	.member	subsystem,0,14,8,8
    48                        	.member	level,8,14,8,8
    49                        	.member	error,16,16,8,16
    50                        	.eos
    51                        	.stag	_fx_process_signal,16,6
    52                        	.member	cbSize,0,16,8,16
    53                        	.eos
    54                        	.stag	_fx_semaphore,16,7
    55                        	.member	reserved,0,5,8,16
    56                        	.eos
    57                        	.stag	_fx_fileBlock,552,8
    58                        	.member	openCount,0,16,8,16
    59                        	.member	lockCount,16,16,8,16
    60                        	.member	dirty,32,14,8,8
    61                        	.member	fileBuffer,40,110,8,0,64
    62                        	.eos
    63                        	.stag	_fx_irq_data,48,9
    64                        	.member	line,0,5,8,16
    65                        	.member	keycode,16,142,8,32
    66                        	.eos
    67                        	.stag	_task,48,10
    68                        	.member	SPL,0,14,8,8
    69                        	.member	SPH,8,14,8,8
    70                        	.member	pstack,16,142,8,32
    71                        	.eos
    72                        	.stag	_task_stack,32,11
    73                        	.member	SS,0,142,8,32
    74                        	.eos
    75                        	.stag	int_regs,104,12
    76                        	.member	PB,0,14,8,8
    77                        	.member	PH,8,14,8,8
    78                        	.member	PL,16,14,8,8
    79                        	.member	PP,24,14,8,8
    80                        	.member	DB,32,14,8,8
    81                        	.member	DH,40,14,8,8
    82                        	.member	DL,48,14,8,8
    83                        	.member	AH,56,14,8,8
    84                        	.member	AL,64,14,8,8
    85                        	.member	XH,72,14,8,8
    86                        	.member	XL,80,14,8,8
    87                        	.member	YH,88,14,8,8
    88                        	.member	YL,96,14,8,8
    89                        	.eos
    90                        	.stag	_fx_eventMessage,304,13
    91                        	.member	src,0,18,8,32
    92                        	.member	dest,32,18,8,32
    93                        	.member	type,64,16,8,16
    94                        	.member	hwnd,80,129,8,32
    95                        	.member	pheap,112,129,8,32
    96                        	.member	msgTime,144,18,8,32
    97                        	.member	data,176,110,8,0,16
    98                        	.eos
    99                        	.stag	_fx_cmdMessage,304,14
   100                        	.member	src,0,18,8,32
   101                        	.member	dest,32,18,8,32
  Thu Dec  3 2020 22:25                                                Page 3


   102                        	.member	type,64,16,8,16
   103                        	.member	hwnd,80,129,8,32
   104                        	.member	pheap,112,129,8,32
   105                        	.member	msgTime,144,18,8,32
   106                        	.member	cmdCId,176,16,8,16
   107                        	.member	cmdMId,192,16,8,16
   108                        	.member	parameter1,208,18,8,32
   109                        	.member	parameter2,240,18,8,32
   110                        	.member	parameter3,272,18,8,32
   111                        	.eos
   112                        	.stag	_fx_console_ctl,448,15
   113                        	.member	maxCols,0,5,8,16
   114                        	.member	maxRows,16,5,8,16
   115                        	.member	curX,32,5,8,16
   116                        	.member	curY,48,5,8,16
   117                        	.member	fgColor,64,5,8,16
   118                        	.member	bgColor,80,5,8,16
   119                        	.member	mode,96,14,8,8
   120                        	.member	kbBuffer,104,101,8,0,16
   121                        	.member	screenBuffer,360,142,8,32
   122                        	.member	desktopMode,392,14,8,8
   123                        	.member	lastMouseButton,400,5,8,16
   124                        	.member	lastMouseX,416,5,8,16
   125                        	.member	lastMouseY,432,5,8,16
   126                        	.eos
   127                        	.stag	_fx_desktop_ctl,392,16
   128                        	.member	desktopMode,0,14,8,8
   129                        	.member	cursorCtl,8,5,8,16
   130                        	.member	cursorState,24,5,8,16
   131                        	.member	backgroundColor,40,5,8,16
   132                        	.member	foregroundColor,56,5,8,16
   133                        	.member	menuMode,72,5,8,16
   134                        	.member	lastMouseButton,88,5,8,16
   135                        	.member	lastMouseX,104,5,8,16
   136                        	.member	lastMouseY,120,5,8,16
   137                        	.member	currentDiskName,136,142,8,32
   138                        	.member	diskNodes,168,129,8,32
   139                        	.member	titleNodes,200,129,8,32
   140                        	.member	menuNodes,232,129,8,32
   141                        	.member	iconNodes,264,129,8,32
   142                        	.member	windowNodes,296,129,8,32
   143                        	.member	fontNodes,328,129,8,32
   144                        	.member	wndProc,360,138,8,32,3
   145                        	.eos
   146                        	.stag	_fx_process,800,17
   147                        	.member	cbSize,0,5,8,16
   148                        	.member	procId,16,18,8,32
   149                        	.member	parentId,48,18,8,32
   150                        	.member	ctx,80,129,8,32
   151                        	.member	userId,112,16,8,16
   152                        	.member	status,128,16,8,16
   153                        	.member	foregroundActive,144,14,8,8
   154                        	.member	tls,152,1121,8,32,8
   155                        	.member	commandLine,408,142,8,32
   156                        	.member	semaphores,440,138,8,32,3
   157                        	.member	fileHandles,472,138,8,32,3
   158                        	.member	pathList,504,138,8,32,3
   159                        	.member	resources,536,138,8,32,3
  Thu Dec  3 2020 22:25                                                Page 4


   160                        	.member	timerAware,568,14,8,8
   161                        	.member	timerTicks,576,112,8,0,2
   162                        	.member	timerTickCount,608,112,8,0,2
   163                        	.member	kernelError,640,10,8,32,5
   164                        	.member	consoleCtl,672,138,8,32,15
   165                        	.member	desktopCtl,704,138,8,32,16
   166                        	.member	execProc,736,641,8,32
   167                        	.member	startupArgs,768,129,8,32
   168                        	.eos
   169                        	.stag	_fxProcessMessage,112,18
   170                        	.member	src,0,18,8,32
   171                        	.member	dest,32,18,8,32
   172                        	.member	type,64,16,8,16
   173                        	.member	processInfo,80,138,8,32,17
   174                        	.eos
   175                        	.stag	_fx_property,384,19
   176                        	.member	name,0,110,8,0,16
   177                        	.member	value,128,110,8,0,32
   178                        	.eos
   179                        	.utag	_24bitPointer,32,20
   180                        	.member	address,0,142,11,32
   181                        	.member	bytes,0,110,11,0,4
   182                        	.eos
   183                        	.stag	_PointStruct,32,21
   184                        	.member	x,0,5,8,16
   185                        	.member	y,16,5,8,16
   186                        	.eos
   187                        	.stag	_RectStruct,64,22
   188                        	.member	x,0,5,8,16
   189                        	.member	y,16,5,8,16
   190                        	.member	width,32,5,8,16
   191                        	.member	height,48,5,8,16
   192                        	.eos
   193                        	.stag	_k_WindowClass,256,23
   194                        	.member	cbSize,0,16,8,16
   195                        	.member	style,16,16,8,16
   196                        	.member	pWndProc,32,654,8,32
   197                        	.member	hInstance,64,129,8,32
   198                        	.member	hIcon,96,129,8,32
   199                        	.member	hCursor,128,129,8,32
   200                        	.member	hbrBackground,160,129,8,32
   201                        	.member	lpszMenuName,192,142,8,32
   202                        	.member	lpszClassName,224,142,8,32
   203                        	.eos
   204                        	.stag	_ClickableRect,88,24
   205                        	.member	area,0,10,8,64,22
   206                        	.member	z,64,5,8,16
   207                        	.member	enabled,80,14,8,8
   208                        	.eos
   209                        	.stag	_NCClickableRect,88,25
   210                        	.member	area,0,10,8,64,22
   211                        	.member	msgType,64,16,8,16
   212                        	.member	enabled,80,14,8,8
   213                        	.eos
   214                        	.stag	_DragData,136,26
   215                        	.member	area,0,10,8,64,22
   216                        	.member	xoffset,64,5,8,16
   217                        	.member	yoffset,80,5,8,16
  Thu Dec  3 2020 22:25                                                Page 5


   218                        	.member	msgType,96,16,8,16
   219                        	.member	isDrag,112,14,8,8
   220                        	.member	canDrag,120,14,8,8
   221                        	.member	canDrop,128,14,8,8
   222                        	.eos
   223                        	.stag	_k_WindowStruct,2808,27
   224                        	.member	cbSize,0,16,8,16
   225                        	.member	style,16,18,8,32
   226                        	.member	win_id,48,5,8,16
   227                        	.member	win_x,64,5,8,16
   228                        	.member	win_y,80,5,8,16
   229                        	.member	win_width,96,5,8,16
   230                        	.member	win_height,112,5,8,16
   231                        	.member	wndRect,128,10,8,64,22
   232                        	.member	clientRect,192,10,8,64,22
   233                        	.member	nonclientGadgets,256,106,8,0,25,16
   234                        	.member	clickable,1664,129,8,32
   235                        	.member	win_title,1696,110,8,0,32
   236                        	.member	Reserved0,1952,16,8,16
   237                        	.member	win_class,1968,110,8,0,16
   238                        	.member	win_class_name,2096,110,8,0,32
   239                        	.member	nBitmapLayer,2352,16,8,16
   240                        	.member	procid,2368,18,8,32
   241                        	.member	pWndClass,2400,138,8,32,23
   242                        	.member	pParentWindow,2432,129,8,32
   243                        	.member	hMenu,2464,129,8,32
   244                        	.member	pChildWindows,2496,138,8,32,3
   245                        	.member	pChildHitList,2528,138,8,32,3
   246                        	.member	isVisible,2560,14,8,8
   247                        	.member	windowData,2568,129,8,32
   248                        	.member	clientData,2600,1121,8,32,6
   249                        	.member	isClosed,2792,14,8,8
   250                        	.member	isClosing,2800,14,8,8
   251                        	.eos
   252                        	.stag	_k_WindowStructEx,2704,28
   253                        	.member	cbSize,0,16,8,16
   254                        	.member	style,16,18,8,32
   255                        	.member	win_id,48,5,8,16
   256                        	.member	win_x,64,5,8,16
   257                        	.member	win_y,80,5,8,16
   258                        	.member	win_width,96,5,8,16
   259                        	.member	win_height,112,5,8,16
   260                        	.member	wndRect,128,10,8,64,22
   261                        	.member	clientRect,192,10,8,64,22
   262                        	.member	nonclientGadgets,256,106,8,0,25,16
   263                        	.member	clickable,1664,129,8,32
   264                        	.member	win_title,1696,110,8,0,32
   265                        	.member	Reserved0,1952,16,8,16
   266                        	.member	win_class,1968,110,8,0,16
   267                        	.member	nBitmapLayer,2096,16,8,16
   268                        	.member	procid,2112,18,8,32
   269                        	.member	pWndClass,2144,138,8,32,23
   270                        	.member	pParentWindow,2176,129,8,32
   271                        	.member	hMenu,2208,129,8,32
   272                        	.member	pChildWindows,2240,138,8,32,3
   273                        	.member	pChildHitList,2272,138,8,32,3
   274                        	.member	isVisible,2304,14,8,8
   275                        	.member	windowData,2312,129,8,32
  Thu Dec  3 2020 22:25                                                Page 6


   276                        	.member	clientData,2344,1121,8,32,4
   277                        	.member	isClosed,2472,14,8,8
   278                        	.member	hWnd,2480,129,8,32
   279                        	.member	localRect,2512,10,8,64,22
   280                        	.member	globalRect,2576,10,8,64,22
   281                        	.member	clientOffsetRect,2640,10,8,64,22
   282                        	.eos
   283                        	.stag	_FontMetric,32,29
   284                        	.member	width,0,5,8,16
   285                        	.member	height,16,5,8,16
   286                        	.eos
   287                        	.stag	_ctl_Textbox,112,30
   288                        	.member	win_id,0,5,8,16
   289                        	.member	win_x,16,5,8,16
   290                        	.member	win_y,32,5,8,16
   291                        	.member	win_width,48,5,8,16
   292                        	.member	win_height,64,5,8,16
   293                        	.member	content,80,1166,8,32
   294                        	.eos
   295                        	.stag	_MenuStruct,248,31
   296                        	.member	cx,0,5,8,16
   297                        	.member	cy,16,5,8,16
   298                        	.member	width,32,5,8,16
   299                        	.member	height,48,5,8,16
   300                        	.member	fcolor,64,14,8,8
   301                        	.member	bcolor,72,14,8,8
   302                        	.member	chromeLeft,80,14,8,8
   303                        	.member	chromeRight1,88,14,8,8
   304                        	.member	chromeRight2,96,14,8,8
   305                        	.member	itemId,104,16,8,16
   306                        	.member	pCaption,120,142,8,32
   307                        	.member	subMenus,152,138,8,32,3
   308                        	.member	pBackground,184,129,8,32
   309                        	.member	hWndOwner,216,129,8,32
   310                        	.eos
   311                        	.stag	fake32_,112,32
   312                        	.member	menuId,0,16,8,16
   313                        	.member	caption,16,142,8,32
   314                        	.member	rect,48,10,8,64,22
   315                        	.eos
   316                        	.stag	fake33_,3568,33
   317                        	.member	pParent,0,138,8,32,27
   318                        	.member	rect,32,10,8,64,22
   319                        	.member	captions,96,1134,8,32,24
   320                        	.member	chrome,864,110,8,0,24
   321                        	.member	ids,1056,112,8,0,24
   322                        	.member	clickable,1440,106,8,0,24,24
   323                        	.member	selected,3552,16,8,16
   324                        	.eos
   325                        	.stag	_fx_button_t,80,34
   326                        	.member	pCaption,0,142,8,32
   327                        	.member	data,32,129,8,32
   328                        	.member	captionPixelWidth,64,16,8,16
   329                        	.eos
   330                        	.stag	_fx_scrollbar_t,192,35
   331                        	.member	min,0,16,8,16
   332                        	.member	max,16,16,8,16
   333                        	.member	increment,32,16,8,16
  Thu Dec  3 2020 22:25                                                Page 7


   334                        	.member	stopsize,48,16,8,16
   335                        	.member	location,64,5,8,16
   336                        	.member	state,80,5,8,16
   337                        	.member	rectThumb,96,10,8,64,22
   338                        	.member	data,160,129,8,32
   339                        	.eos
   340                        	.stag	_fx_listbox_t,240,36
   341                        	.member	pos,0,5,8,16
   342                        	.member	selected,16,16,8,16
   343                        	.member	offsetX,32,5,8,16
   344                        	.member	offsetY,48,5,8,16
   345                        	.member	inc,64,5,8,16
   346                        	.member	direction,80,5,8,16
   347                        	.member	top,96,5,8,16
   348                        	.member	bottom,112,5,8,16
   349                        	.member	indexTop,128,5,8,16
   350                        	.member	indexBottom,144,5,8,16
   351                        	.member	maxItems,160,16,8,16
   352                        	.member	fontSet,176,142,8,32
   353                        	.member	data,208,129,8,32
   354                        	.eos
   355                        	.stag	_fx_textbox_t,144,37
   356                        	.member	pos,0,5,8,16
   357                        	.member	selected,16,16,8,16
   358                        	.member	offsetX,32,5,8,16
   359                        	.member	offsetY,48,5,8,16
   360                        	.member	isShifted,64,14,8,8
   361                        	.member	cursorState,72,14,8,8
   362                        	.member	fontSet,80,142,8,32
   363                        	.member	data,112,129,8,32
   364                        	.eos
   365                        	.stag	_fx_menuAnchor_t,144,38
   366                        	.member	pCaption,0,142,8,32
   367                        	.member	renderLayoutX,32,16,8,16
   368                        	.member	renderLayoutY,48,16,8,16
   369                        	.member	captionPixelWidth,64,16,8,16
   370                        	.member	data,80,129,8,32
   371                        	.member	droppedWindow,112,138,8,32,27
   372                        	.eos
   373                        	.stag	_SubMenuStruct,64,39
   374                        	.member	caption,0,142,8,32
   375                        	.member	action,32,641,8,32
   376                        	.eos
   377                        	.stag	_SubMenuListStruct,40,40
   378                        	.member	cMenus,0,14,8,8
   379                        	.member	psubmenus,8,9354,8,32,39
   380                        	.eos
   381                        	.stag	_fx_ComBuffer,2080,41
   382                        	.member	cbSize,0,16,8,16
   383                        	.member	cbBuffer,16,16,8,16
   384                        	.member	buffer,32,110,8,0,256
   385                        	.eos
   386                        	.line	708
   387                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\OMF_Load.c",9
   388                        ;#include "fxmemorymanager.h"
   389                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",0
  Thu Dec  3 2020 22:25                                                Page 8


   390                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   391                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   392                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stddef.h",0
   393                        	.line	88
   394                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",43
   395                        	.stag	fake42_,32,42
   396                        	.member	quot,0,5,8,16
   397                        	.member	rem,16,5,8,16
   398                        	.eos
   399                        	.stag	fake43_,64,43
   400                        	.member	quot,0,7,8,32
   401                        	.member	rem,32,7,8,32
   402                        	.eos
   403                        	.stag	int_sqrt,32,44
   404                        	.member	sqrt,0,16,8,16
   405                        	.member	frac,16,16,8,16
   406                        	.eos
   407                        	.line	205
   408                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",4
   409                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
   410                        	.line	134
   411                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",5
   412                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    ctype.h",0
   413                        	.line	103
   414                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",6
   415                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   416                        	.line	708
   417                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",8
   418                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstringtable.h",0
   419                        	.line	89
   420                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",9
   421                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256fmx.h",0
   422                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   423                        	.line	708
   424                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256fmx.h",5
   425                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fmx_vicky.h",0
   426                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   427                        	.line	708
   428                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fmx_vicky.h",11
  Thu Dec  3 2020 22:25                                                Page 9


   429                        	.line	72
   430                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256fmx.h",6
   431                        	.line	1325
   432                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",13
   433                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxkernel.h",0
   434                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   435                        	.line	25
   436                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxkernel.h",5
   437                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",0
   438                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   439                        	.line	708
   440                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",5
   441                        	.line	61
   442                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxkernel.h",6
   443                        	.stag	_fx_zero_page,448,45
   444                        	.member	fxos_mouse_byte_0,0,14,8,8
   445                        	.member	fxos_mouse_byte_1,8,14,8,8
   446                        	.member	fxos_mouse_byte_2,16,14,8,8
   447                        	.member	fxos_mouse_byte_t,24,14,8,8
   448                        	.member	fxos_mouse_byte_x_l,32,14,8,8
   449                        	.member	fxos_mouse_byte_x_h,40,14,8,8
   450                        	.member	fxos_mouse_byte_y_l,48,14,8,8
   451                        	.member	fxos_mouse_byte_y_h,56,14,8,8
   452                        	.member	fxos_key_byte_0,64,14,8,8
   453                        	.member	fxos_key_byte_1,72,14,8,8
   454                        	.member	fxos_key_byte_2,80,14,8,8
   455                        	.member	fxos_mouse_ctl,88,14,8,8
   456                        	.member	fxos_mouse_index,96,14,8,8
   457                        	.member	fxos_mouse_status,104,14,8,8
   458                        	.member	VersionMajor,112,16,8,16
   459                        	.member	VersionMinor,128,16,8,16
   460                        	.member	VersionRelease,144,16,8,16
   461                        	.member	topMemory,160,18,8,32
   462                        	.member	bottomMemory,192,18,8,32
   463                        	.member	availableMemory,224,18,8,32
   464                        	.member	availableMemoryK,256,18,8,32
   465                        	.member	availableHeapMemory,288,18,8,32
   466                        	.member	availableHeapMemoryK,320,18,8,32
   467                        	.member	kernelFunctionCallId,352,16,8,16
   468                        	.member	kernelFunctionCallBank,368,14,8,8
   469                        	.member	kernelFunctionCallReserved,376,14,8,8
   470                        	.member	kernelFunctionCallParameter,384,129,8,32
   471                        	.member	kernelFunctionCallReturn,416,129,8,32
   472                        	.eos
   473                        	.stag	_fx_environment,96,46
   474                        	.member	variables,0,142,8,32
   475                        	.member	reserved1,32,5,8,16
   476                        	.member	reserved2,48,5,8,16
   477                        	.member	reserved3,64,5,8,16
  Thu Dec  3 2020 22:25                                                Page 10


   478                        	.member	reserved4,80,5,8,16
   479                        	.eos
   480                        	.stag	_debug_byte_bits,8,47
   481                        	.member	bit7,0,14,17,1
   482                        	.member	bit6,1,14,17,1
   483                        	.member	bit5,2,14,17,1
   484                        	.member	bit4,3,14,17,1
   485                        	.member	bit3,4,14,17,1
   486                        	.member	bit2,5,14,17,1
   487                        	.member	bit1,6,14,17,1
   488                        	.member	bit0,7,14,17,1
   489                        	.eos
   490                        	.stag	_fx_device_driver,1416,48
   491                        	.member	name,0,110,8,0,64
   492                        	.member	version,512,110,8,0,64
   493                        	.member	hmajor,1024,110,8,0,16
   494                        	.member	hminor,1152,110,8,0,16
   495                        	.member	type,1280,14,8,8
   496                        	.member	f_driver_load,1288,129,8,32
   497                        	.member	f_driver_read,1320,129,8,32
   498                        	.member	f_driver_write,1352,129,8,32
   499                        	.member	f_driver_unload,1384,129,8,32
   500                        	.eos
   501                        	.stag	_fx_block_device_driver,1448,49
   502                        	.member	name,0,110,8,0,64
   503                        	.member	version,512,110,8,0,64
   504                        	.member	hmajor,1024,110,8,0,16
   505                        	.member	hminor,1152,110,8,0,16
   506                        	.member	type,1280,14,8,8
   507                        	.member	f_driver_load,1288,129,8,32
   508                        	.member	f_driver_read,1320,129,8,32
   509                        	.member	f_driver_write,1352,129,8,32
   510                        	.member	f_driver_unload,1384,129,8,32
   511                        	.member	f_driver_command,1416,129,8,32
   512                        	.eos
   513                        	.line	270
   514                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",19
   515                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",0
   516                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
   517                        	.line	134
   518                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",5
   519                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   520                        	.line	205
   521                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",6
   522                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   523                        	.line	708
   524                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",7
   525                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256fmx.h",0
   526                        	.line	1325
  Thu Dec  3 2020 22:25                                                Page 11


   527                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",10
   528                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",0
   529                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   530                        	.line	205
   531                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",5
   532                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
   533                        	.line	134
   534                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",6
   535                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   536                        	.line	708
   537                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",7
   538                        	.stag	_fx_string,64,50
   539                        	.member	size,0,16,8,16
   540                        	.member	pos,16,5,8,16
   541                        	.member	buffer,32,142,8,32
   542                        	.eos
   543                        	.line	71
   544                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",15
   545                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",0
   546                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   547                        	.line	25
   548                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",5
   549                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxexec.h",0
   550                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   551                        	.line	708
   552                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxexec.h",5
   553                        	.line	52
   554                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",6
   555                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",0
   556                        	.line	61
   557                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",7
   558                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",0
   559                        	.line	171
   560                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",8
   561                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",0
   562                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
  Thu Dec  3 2020 22:25                                                Page 12


   563                        	.line	708
   564                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",5
   565                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   566                        	.line	25
   567                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",6
   568                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",0
   569                        	.line	39
   570                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",7
   571                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",0
   572                        	.line	743
   573                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",8
   574                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxgui.h",0
   575                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxfont.h",0
   576                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   577                        	.line	708
   578                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxfont.h",6
   579                        	.line	64
   580                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxgui.h",4
   581                        	.stag	_click_detected,64,51
   582                        	.member	window,0,138,8,32,27
   583                        	.member	handler,32,641,8,32
   584                        	.eos
   585                        	.stag	_current_palette_map,400,52
   586                        	.member	CUR_DESKTOP,0,5,8,16
   587                        	.member	CUR_BACKGROUND,16,5,8,16
   588                        	.member	CUR_FONT,32,5,8,16
   589                        	.member	CUR_SELECTED_FONT,48,5,8,16
   590                        	.member	CUR_HIGHLIGHT_COLOR,64,5,8,16
   591                        	.member	CUR_WINDOWFRAME,80,5,8,16
   592                        	.member	CUR_WINDOWBORDER,96,5,8,16
   593                        	.member	CUR_WINDOWSHADOW,112,5,8,16
   594                        	.member	CUR_MENU,128,5,8,16
   595                        	.member	CUR_GADGET,144,5,8,16
   596                        	.member	CUR_COLOR,160,101,8,0,15
   597                        	.eos
   598                        	.line	264
   599                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",9
   600                        	.stag	_childMessage_t,64,53
   601                        	.member	msgType,0,16,8,16
   602                        	.member	msgData,16,129,8,32
   603                        	.member	dataSize,48,16,8,16
   604                        	.eos
   605                        	.line	362
   606                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",9
  Thu Dec  3 2020 22:25                                                Page 13


   607                        	.stag	_fx_main_loopvars,16,54
   608                        	.member	dummy,0,5,8,16
   609                        	.eos
   610                        	.stag	_fxMouseMessageData,64,55
   611                        	.member	button1,0,14,8,8
   612                        	.member	button2,8,14,8,8
   613                        	.member	button3,16,14,8,8
   614                        	.member	button4,24,14,8,8
   615                        	.member	x,32,16,8,16
   616                        	.member	y,48,16,8,16
   617                        	.eos
   618                        	.stag	_fx_eventProcess,64,56
   619                        	.member	process,0,138,8,32,17
   620                        	.member	eventProc,32,641,8,32
   621                        	.eos
   622                        	.stag	_mouse_msg_state,184,57
   623                        	.member	lastEvent,0,18,8,32
   624                        	.member	buttonLeftDown,32,14,8,8
   625                        	.member	lastLeftDown,40,18,8,32
   626                        	.member	buttonRightDown,72,14,8,8
   627                        	.member	lastRightDown,80,18,8,32
   628                        	.member	buttonMiddleDown,112,14,8,8
   629                        	.member	lastMiddleDown,120,18,8,32
   630                        	.member	lastX,152,16,8,16
   631                        	.member	lastY,168,16,8,16
   632                        	.eos
   633                        	.line	743
   634                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",16
   635                        	.stag	_fx_spinner_ctx,48,58
   636                        	.member	index,0,5,8,16
   637                        	.member	spinner,16,142,8,32
   638                        	.eos
   639                        	.stag	_fx_console_ctx,1144,59
   640                        	.member	lineBufferIndex,0,5,8,16
   641                        	.member	lineBuffer,16,110,8,0,128
   642                        	.member	isShifted,1040,14,8,8
   643                        	.member	userData,1048,129,8,32
   644                        	.member	screenBuffer,1080,129,8,32
   645                        	.member	Reserved1,1112,129,8,32
   646                        	.eos
   647                        	.stag	_token,64,60
   648                        	.member	type,0,5,8,16
   649                        	.member	depth,16,16,8,16
   650                        	.member	text,32,142,8,32
   651                        	.eos
   652                        	.stag	_command_args,64,61
   653                        	.member	proc,0,656,8,32
   654                        	.member	tokens,32,138,8,32,2
   655                        	.eos
   656                        	.line	171
   657                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",20
   658                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",0
   659                        	.line	71
   660                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",21
  Thu Dec  3 2020 22:25                                                Page 14


   661                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",0
   662                        	.line	61
   663                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",22
   664                        	.line	25
   665                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",5
   666                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc_cfg.h",0
   667                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos_build_parameters.h",0
   668                        	.line	32
   669                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc_cfg.h",8
   670                        	.stag	UMM_HEAP_INFO_t,256,62
   671                        	.member	totalEntries,0,18,8,32
   672                        	.member	usedEntries,32,18,8,32
   673                        	.member	freeEntries,64,18,8,32
   674                        	.member	totalBlocks,96,18,8,32
   675                        	.member	usedBlocks,128,18,8,32
   676                        	.member	freeBlocks,160,18,8,32
   677                        	.member	maxFreeContiguousBlocks,192,18,8,32
   678                        	.member	blockSize,224,18,8,32
   679                        	.eos
   680                        	.line	199
   681                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",6
   682                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc.h",0
   683                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   684                        	.line	708
   685                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc.h",11
   686                        	.line	24
   687                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",7
   688                        	.stag	_fx_memory_map,2072,63
   689                        	.member	availableMemory,0,18,8,32
   690                        	.member	valid_segments,32,110,8,0,255
   691                        	.eos
   692                        	.line	39
   693                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\OMF_Load.c",10
   694                        ;/*
   695                        ;#include <stdlib.h>
   696                        ;#include <string.h>
   697                        ;*/
   698                        ;
   699                        ;
   700                        ;#include "OMF_Dc_Memory.h"
   701                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\OMF_Dc_Memory.h",0
   702                        	.line	24
   703                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\OMF_Load.c",17
   704                        ;#include "OMF_Dc_Shared.h"
  Thu Dec  3 2020 22:25                                                Page 15


   705                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\OMF_Dc_Shared.h",0
   706                        	.line	18
   707                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\OMF_Load.c",18
   708                        ;#include "OMF_Record.h"
   709                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\OMF_Record.h",0
   710                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   711                        	.line	708
   712                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\OMF_Record.h",8
   713                        	.stag	omf_body_record,168,64
   714                        	.member	FileOffset,0,18,8,32
   715                        	.member	SegmentOffset,32,18,8,32
   716                        	.member	operation_code,64,14,8,8
   717                        	.member	length,72,5,8,16
   718                        	.member	record_data,88,129,8,32
   719                        	.member	processed,120,5,8,16
   720                        	.member	next,136,138,8,32,64
   721                        	.eos
   722                        	.stag	subrecord_SuperReloc2,16520,65
   723                        	.member	FileOffset,0,18,8,32
   724                        	.member	SegmentOffset,32,18,8,32
   725                        	.member	Count,64,14,8,8
   726                        	.member	ByteCnt,72,14,8,8
   727                        	.member	BitShiftCnt,80,14,8,8
   728                        	.member	nb_address,88,5,8,16
   729                        	.member	OffsetPatch,104,114,8,0,256
   730                        	.member	OffsetReference,8296,114,8,0,256
   731                        	.member	next,16488,138,8,32,65
   732                        	.eos
   733                        	.stag	subrecord_SuperReloc3,16520,66
   734                        	.member	FileOffset,0,18,8,32
   735                        	.member	SegmentOffset,32,18,8,32
   736                        	.member	Count,64,14,8,8
   737                        	.member	ByteCnt,72,14,8,8
   738                        	.member	BitShiftCnt,80,14,8,8
   739                        	.member	nb_address,88,5,8,16
   740                        	.member	OffsetPatch,104,114,8,0,256
   741                        	.member	OffsetReference,8296,114,8,0,256
   742                        	.member	next,16488,138,8,32,66
   743                        	.eos
   744                        	.stag	subrecord_SuperInterseg1,20632,67
   745                        	.member	FileOffset,0,18,8,32
   746                        	.member	SegmentOffset,32,18,8,32
   747                        	.member	Count,64,14,8,8
   748                        	.member	ByteCnt,72,14,8,8
   749                        	.member	BitShiftCnt,80,14,8,8
   750                        	.member	FileNum,88,5,8,16
   751                        	.member	nb_address,104,5,8,16
   752                        	.member	OffsetPatch,120,114,8,0,256
   753                        	.member	OffsetReference,8312,114,8,0,256
   754                        	.member	SegNum,16504,101,8,0,256
   755                        	.member	next,20600,138,8,32,67
   756                        	.eos
   757                        	.stag	subrecord_SuperInterseg212,20632,68
  Thu Dec  3 2020 22:25                                                Page 16


   758                        	.member	FileOffset,0,18,8,32
   759                        	.member	SegmentOffset,32,18,8,32
   760                        	.member	Count,64,14,8,8
   761                        	.member	ByteCnt,72,14,8,8
   762                        	.member	BitShiftCnt,80,14,8,8
   763                        	.member	FileNum,88,5,8,16
   764                        	.member	nb_address,104,5,8,16
   765                        	.member	OffsetPatch,120,114,8,0,256
   766                        	.member	OffsetReference,8312,114,8,0,256
   767                        	.member	SegNum,16504,101,8,0,256
   768                        	.member	next,20600,138,8,32,68
   769                        	.eos
   770                        	.stag	subrecord_SuperInterseg1324,16544,69
   771                        	.member	FileOffset,0,18,8,32
   772                        	.member	SegmentOffset,32,18,8,32
   773                        	.member	Count,64,14,8,8
   774                        	.member	ByteCnt,72,14,8,8
   775                        	.member	BitShiftCnt,80,14,8,8
   776                        	.member	SegNum,88,14,8,8
   777                        	.member	FileNum,96,5,8,16
   778                        	.member	nb_address,112,5,8,16
   779                        	.member	OffsetPatch,128,114,8,0,256
   780                        	.member	OffsetReference,8320,114,8,0,256
   781                        	.member	next,16512,138,8,32,69
   782                        	.eos
   783                        	.stag	subrecord_SuperInterseg2536,16544,70
   784                        	.member	FileOffset,0,18,8,32
   785                        	.member	SegmentOffset,32,18,8,32
   786                        	.member	Count,64,14,8,8
   787                        	.member	ByteCnt,72,14,8,8
   788                        	.member	BitShiftCnt,80,14,8,8
   789                        	.member	SegNum,88,14,8,8
   790                        	.member	FileNum,96,5,8,16
   791                        	.member	nb_address,112,5,8,16
   792                        	.member	OffsetPatch,128,114,8,0,256
   793                        	.member	OffsetReference,8320,114,8,0,256
   794                        	.member	next,16512,138,8,32,70
   795                        	.eos
   796                        	.stag	record_END,72,71
   797                        	.member	FileOffset,0,18,8,32
   798                        	.member	SegmentOffset,32,18,8,32
   799                        	.member	operation_code,64,14,8,8
   800                        	.eos
   801                        	.stag	record_CONST,112,72
   802                        	.member	FileOffset,0,18,8,32
   803                        	.member	SegmentOffset,32,18,8,32
   804                        	.member	operation_code,64,14,8,8
   805                        	.member	ByteCnt,72,14,8,8
   806                        	.member	data,80,142,8,32
   807                        	.eos
   808                        	.stag	record_ALIGN,72,73
   809                        	.member	FileOffset,0,18,8,32
   810                        	.member	SegmentOffset,32,18,8,32
   811                        	.member	operation_code,64,14,8,8
   812                        	.eos
   813                        	.stag	record_ORG,72,74
   814                        	.member	FileOffset,0,18,8,32
   815                        	.member	SegmentOffset,32,18,8,32
  Thu Dec  3 2020 22:25                                                Page 17


   816                        	.member	operation_code,64,14,8,8
   817                        	.eos
   818                        	.stag	record_RELOC,152,75
   819                        	.member	FileOffset,0,18,8,32
   820                        	.member	SegmentOffset,32,18,8,32
   821                        	.member	operation_code,64,14,8,8
   822                        	.member	ByteCnt,72,14,8,8
   823                        	.member	BitShiftCnt,80,14,8,8
   824                        	.member	OffsetPatch,88,18,8,32
   825                        	.member	OffsetReference,120,18,8,32
   826                        	.eos
   827                        	.stag	record_INTERSEG,184,76
   828                        	.member	FileOffset,0,18,8,32
   829                        	.member	SegmentOffset,32,18,8,32
   830                        	.member	operation_code,64,14,8,8
   831                        	.member	ByteCnt,72,14,8,8
   832                        	.member	BitShiftCnt,80,14,8,8
   833                        	.member	OffsetPatch,88,18,8,32
   834                        	.member	FileNum,120,5,8,16
   835                        	.member	SegNum,136,5,8,16
   836                        	.member	OffsetReference,152,18,8,32
   837                        	.eos
   838                        	.stag	record_USING,72,77
   839                        	.member	FileOffset,0,18,8,32
   840                        	.member	SegmentOffset,32,18,8,32
   841                        	.member	operation_code,64,14,8,8
   842                        	.eos
   843                        	.stag	record_STRONG,72,78
   844                        	.member	FileOffset,0,18,8,32
   845                        	.member	SegmentOffset,32,18,8,32
   846                        	.member	operation_code,64,14,8,8
   847                        	.eos
   848                        	.stag	record_GLOBAL,72,79
   849                        	.member	FileOffset,0,18,8,32
   850                        	.member	SegmentOffset,32,18,8,32
   851                        	.member	operation_code,64,14,8,8
   852                        	.eos
   853                        	.stag	record_GEQU,72,80
   854                        	.member	FileOffset,0,18,8,32
   855                        	.member	SegmentOffset,32,18,8,32
   856                        	.member	operation_code,64,14,8,8
   857                        	.eos
   858                        	.stag	record_MEM,72,81
   859                        	.member	FileOffset,0,18,8,32
   860                        	.member	SegmentOffset,32,18,8,32
   861                        	.member	operation_code,64,14,8,8
   862                        	.eos
   863                        	.stag	record_EXPR,72,82
   864                        	.member	FileOffset,0,18,8,32
   865                        	.member	SegmentOffset,32,18,8,32
   866                        	.member	operation_code,64,14,8,8
   867                        	.eos
   868                        	.stag	record_ZEXPR,72,83
   869                        	.member	FileOffset,0,18,8,32
   870                        	.member	SegmentOffset,32,18,8,32
   871                        	.member	operation_code,64,14,8,8
   872                        	.eos
   873                        	.stag	record_BEXPR,72,84
  Thu Dec  3 2020 22:25                                                Page 18


   874                        	.member	FileOffset,0,18,8,32
   875                        	.member	SegmentOffset,32,18,8,32
   876                        	.member	operation_code,64,14,8,8
   877                        	.eos
   878                        	.stag	record_RELEXPR,72,85
   879                        	.member	FileOffset,0,18,8,32
   880                        	.member	SegmentOffset,32,18,8,32
   881                        	.member	operation_code,64,14,8,8
   882                        	.eos
   883                        	.stag	record_LOCAL,72,86
   884                        	.member	FileOffset,0,18,8,32
   885                        	.member	SegmentOffset,32,18,8,32
   886                        	.member	operation_code,64,14,8,8
   887                        	.eos
   888                        	.stag	record_EQU,72,87
   889                        	.member	FileOffset,0,18,8,32
   890                        	.member	SegmentOffset,32,18,8,32
   891                        	.member	operation_code,64,14,8,8
   892                        	.eos
   893                        	.stag	record_DS,104,88
   894                        	.member	FileOffset,0,18,8,32
   895                        	.member	SegmentOffset,32,18,8,32
   896                        	.member	operation_code,64,14,8,8
   897                        	.member	nb_zero_byte,72,18,8,32
   898                        	.eos
   899                        	.stag	record_LCONST,136,89
   900                        	.member	FileOffset,0,18,8,32
   901                        	.member	SegmentOffset,32,18,8,32
   902                        	.member	operation_code,64,14,8,8
   903                        	.member	ByteCnt,72,18,8,32
   904                        	.member	data,104,142,8,32
   905                        	.eos
   906                        	.stag	record_LEXPR,72,90
   907                        	.member	FileOffset,0,18,8,32
   908                        	.member	SegmentOffset,32,18,8,32
   909                        	.member	operation_code,64,14,8,8
   910                        	.eos
   911                        	.stag	record_ENTRY,72,91
   912                        	.member	FileOffset,0,18,8,32
   913                        	.member	SegmentOffset,32,18,8,32
   914                        	.member	operation_code,64,14,8,8
   915                        	.eos
   916                        	.stag	record_cRELOC,152,92
   917                        	.member	FileOffset,0,18,8,32
   918                        	.member	SegmentOffset,32,18,8,32
   919                        	.member	operation_code,64,14,8,8
   920                        	.member	ByteCnt,72,14,8,8
   921                        	.member	BitShiftCnt,80,14,8,8
   922                        	.member	OffsetPatch,88,18,8,32
   923                        	.member	OffsetReference,120,18,8,32
   924                        	.eos
   925                        	.stag	record_cINTERSEG,176,93
   926                        	.member	FileOffset,0,18,8,32
   927                        	.member	SegmentOffset,32,18,8,32
   928                        	.member	operation_code,64,14,8,8
   929                        	.member	ByteCnt,72,14,8,8
   930                        	.member	BitShiftCnt,80,14,8,8
   931                        	.member	OffsetPatch,88,18,8,32
  Thu Dec  3 2020 22:25                                                Page 19


   932                        	.member	FileNum,120,5,8,16
   933                        	.member	SegNum,136,14,8,8
   934                        	.member	OffsetReference,144,18,8,32
   935                        	.eos
   936                        	.stag	record_SUPER,592,94
   937                        	.member	FileOffset,0,18,8,32
   938                        	.member	SegmentOffset,32,18,8,32
   939                        	.member	operation_code,64,14,8,8
   940                        	.member	ByteCnt,72,18,8,32
   941                        	.member	RecordType,104,14,8,8
   942                        	.member	nb_SuperReloc2,112,5,8,16
   943                        	.member	first_SuperReloc2,128,138,8,32,65
   944                        	.member	last_SuperReloc2,160,138,8,32,65
   945                        	.member	nb_SuperReloc3,192,5,8,16
   946                        	.member	first_SuperReloc3,208,138,8,32,66
   947                        	.member	last_SuperReloc3,240,138,8,32,66
   948                        	.member	nb_SuperInterseg1,272,5,8,16
   949                        	.member	first_SuperInterseg1,288,138,8,32,67
   950                        	.member	last_SuperInterseg1,320,138,8,32,67
   951                        	.member	nb_SuperInterseg212,352,5,8,16
   952                        	.member	first_SuperInterseg212,368,138,8,32,68
   953                        	.member	last_SuperInterseg212,400,138,8,32,68
   954                        	.member	nb_SuperInterseg1324,432,5,8,16
   955                        	.member	first_SuperInterseg1324,448,138,8,32,69
   956                        	.member	last_SuperInterseg1324,480,138,8,32,69
   957                        	.member	nb_SuperInterseg2536,512,5,8,16
   958                        	.member	first_SuperInterseg2536,528,138,8,32,70
   959                        	.member	last_SuperInterseg2536,560,138,8,32,70
   960                        	.eos
   961                        	.stag	record_General,72,95
   962                        	.member	FileOffset,0,18,8,32
   963                        	.member	SegmentOffset,32,18,8,32
   964                        	.member	operation_code,64,14,8,8
   965                        	.eos
   966                        	.stag	record_Experimental,72,96
   967                        	.member	FileOffset,0,18,8,32
   968                        	.member	SegmentOffset,32,18,8,32
   969                        	.member	operation_code,64,14,8,8
   970                        	.eos
   971                        	.stag	omf_reloc,128,97
   972                        	.member	ByteCnt,0,14,8,8
   973                        	.member	BitShiftCnt,8,14,8,8
   974                        	.member	OffsetPatch,16,18,8,32
   975                        	.member	OffsetReference,48,18,8,32
   976                        	.member	origin,80,5,8,16
   977                        	.member	next,96,138,8,32,97
   978                        	.eos
   979                        	.stag	omf_interseg,160,98
   980                        	.member	ByteCnt,0,14,8,8
   981                        	.member	BitShiftCnt,8,14,8,8
   982                        	.member	OffsetPatch,16,18,8,32
   983                        	.member	OffsetReference,48,18,8,32
   984                        	.member	FileNum,80,5,8,16
   985                        	.member	SegNum,96,5,8,16
   986                        	.member	origin,112,5,8,16
   987                        	.member	next,128,138,8,32,98
   988                        	.eos
   989                        	.line	458
  Thu Dec  3 2020 22:25                                                Page 20


   990                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\OMF_Load.c",19
   991                        ;#include "OMF_Load.h"
   992                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\OMF_Load.h",0
   993                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   994                        	.line	708
   995                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\OMF_Load.h",9
   996                        	.stag	omf_segment_header,20984,99
   997                        	.member	FileOffset,0,18,8,32
   998                        	.member	SegmentOffset,32,18,8,32
   999                        	.member	BlockCnt,64,18,8,32
  1000                        	.member	ByteCnt,96,18,8,32
  1001                        	.member	ResSpc,128,18,8,32
  1002                        	.member	Length,160,18,8,32
  1003                        	.member	Type,192,14,8,8
  1004                        	.member	undefine_1,200,14,8,8
  1005                        	.member	LabLen,208,14,8,8
  1006                        	.member	NumLen,216,14,8,8
  1007                        	.member	Version,224,14,8,8
  1008                        	.member	BankSize,232,18,8,32
  1009                        	.member	Kind,264,5,8,16
  1010                        	.member	undefine_2,280,14,8,8
  1011                        	.member	undefine_3,288,14,8,8
  1012                        	.member	Org,296,18,8,32
  1013                        	.member	Align,328,18,8,32
  1014                        	.member	NumSEx,360,14,8,8
  1015                        	.member	LCBank,368,14,8,8
  1016                        	.member	undefine_4,376,14,8,8
  1017                        	.member	SegNum,384,5,8,16
  1018                        	.member	EntryPointOffset,400,18,8,32
  1019                        	.member	DispNameOffset,432,5,8,16
  1020                        	.member	DispDataOffset,448,5,8,16
  1021                        	.member	TempOrgLength,464,5,8,16
  1022                        	.member	TempOrg,480,110,8,0,2048
  1023                        	.member	LoadName,16864,110,8,0,256
  1024                        	.member	SegName,18912,110,8,0,256
  1025                        	.member	undefine_5,20960,14,8,8
  1026                        	.member	undefine_6,20968,14,8,8
  1027                        	.member	undefine_7,20976,14,8,8
  1028                        	.eos
  1029                        	.stag	omf_segment,21288,100
  1030                        	.member	header,0,10,8,20984,99
  1031                        	.member	nb_record,20984,5,8,16
  1032                        	.member	first_record,21000,138,8,32,64
  1033                        	.member	last_record,21032,138,8,32,64
  1034                        	.member	data_offset,21064,5,8,16
  1035                        	.member	data_length,21080,5,8,16
  1036                        	.member	data,21096,142,8,32
  1037                        	.member	reloc_offset,21128,5,8,16
  1038                        	.member	reloc_length,21144,5,8,16
  1039                        	.member	nb_reloc,21160,5,8,16
  1040                        	.member	tab_reloc,21176,1162,8,32,97
  1041                        	.member	nb_interseg,21208,5,8,16
  1042                        	.member	tab_interseg,21224,1162,8,32,98
  1043                        	.member	next,21256,138,8,32,100
  Thu Dec  3 2020 22:25                                                Page 21


  1044                        	.eos
  1045                        	.stag	omf_file,192,101
  1046                        	.member	file_path,0,142,8,32
  1047                        	.member	file_name,32,142,8,32
  1048                        	.member	data_length,64,5,8,16
  1049                        	.member	data,80,142,8,32
  1050                        	.member	nb_segment,112,5,8,16
  1051                        	.member	first_segment,128,138,8,32,100
  1052                        	.member	last_segment,160,138,8,32,100
  1053                        	.eos
  1054                        	.line	113
  1055                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\OMF_Load.c",20
  1056                        ;
  1057                        ;static int DecodeOMFFile(struct omf_file *f);
  1058                        ;static struct omf_segment *DecodeOneSegment(struc
                    t omf_file *f,int i,int *ii);
  1059                        ;static int DecodeSegmentHeader(struct omf_file *f
                    ,int i,struct omf_segment_header *sh);
  1060                        ;static int DecodeSegmentHeaderV0(struct omf_file 
                    *f,int i,struct omf_segment_header *sh);
  1061                        ;static int DecodeSegmentHeaderV1(struct omf_file 
                    *f,int i,struct omf_segment_header *sh);
  1062                        ;static int DecodeSegmentHeaderV2(struct omf_file 
                    *f,int i,struct omf_segment_header *sh);
  1063                        ;static int DecodeSegmentBody(struct omf_file *f,i
                    nt i,struct omf_segment *s);
  1064                        ;static void mem_free_segment(struct omf_segment *
                    s);
  1065                        ;
  1066                        ;#pragma section CODE=LOADER,offset $9:B1CE
  1067                        LOADER	section	offset $9:B1CE
  1068 09:B1CE:              	ends
  1069                        ;
  1070                        ;/************************************************
                    ***********/
  1071                        ;/*  LoadOMFFile() :  Chargement/Décodage d'un fic
                    hier OMF. */
  1072                        ;/************************************************
                    ***********/
  1073                        ;struct omf_file *LoadOMFFile(char *file_path)
  1074                        ;{
  1075                        	.line	36
  1076                        	.line	37
  1077                        	LOADER
  1078                        	xdef	~~LoadOMFFile
  1079                        	func
  1080                        	.function	37
  1081                        ~~LoadOMFFile:
  1082                        	longa	on
  1083                        	longi	on
  1084 09:B1CE: 3B           	tsc
  1085 09:B1CF: 38           	sec
  1086 09:B1D0: E9 10 00     	sbc	#L2
  1087 09:B1D3: 1B           	tcs
  1088 09:B1D4: 0B           	phd
  1089 09:B1D5: 5B           	tcd
  1090             00000004   file_path_0	set	4
  Thu Dec  3 2020 22:25                                                Page 22


  1091                        	.block	37
  1092                        ;  int i, result;
  1093                        ;  struct omf_file *current_file;
  1094                        ;
  1095                        ;  k_debug_string("LoadOMFFile enter... \r\n");
  1096             00000000   i_1	set	0
  1097             00000002   result_1	set	2
  1098             00000004   current_file_1	set	4
  1099                        	.sym	i,0,5,1,16
  1100                        	.sym	result,2,5,1,16
  1101                        	.sym	current_file,4,138,1,32,101
  1102                        	.sym	file_path,4,142,6,32
  1103                        	.line	41
  1104 09:B1D6: F4 xx xx     	pea	#^L1
  1105 09:B1D9: F4 xx xx     	pea	#<L1
  1106 09:B1DC: 22 xx xx xx  	jsl	~~k_debug_string
  1107                        ;
  1108                        ;  /* Allocation mémoire */
  1109                        ;  current_file = (struct omf_file *) k_calloc(1,s
                    izeof(struct omf_file));
  1110                        	.line	44
  1111 09:B1E0: F4 18 00     	pea	#<$18
  1112 09:B1E3: F4 01 00     	pea	#<$1
  1113 09:B1E6: 22 xx xx xx  	jsl	~~k_calloc
  1114 09:B1EA: 85 0D        	sta	<L3+current_file_1
  1115 09:B1EC: 86 0F        	stx	<L3+current_file_1+2
  1116                        ;  if(current_file == NULL)
  1117                        	.line	45
  1118                        ;    {
  1119 09:B1EE: A5 0D        	lda	<L3+current_file_1
  1120 09:B1F0: 05 0F        	ora	<L3+current_file_1+2
  1121 09:B1F2: F0 03        	beq	L5
  1122 09:B1F4: 82 19 00     	brl	L10001
  1123                        L5:
  1124                        	.line	46
  1125                        ;      //printf("  Error : Impossible to allocate 
                    memory to process OMF file.\n");
  1126                        ;      return(NULL);
  1127                        	.line	48
  1128 09:B1F7: A9 00 00     	lda	#$0
  1129 09:B1FA: AA           	tax
  1130 09:B1FB: A9 00 00     	lda	#$0
  1131                        L6:
  1132 09:B1FE: A8           	tay
  1133 09:B1FF: A5 12        	lda	<L2+2
  1134 09:B201: 85 16        	sta	<L2+2+4
  1135 09:B203: A5 11        	lda	<L2+1
  1136 09:B205: 85 15        	sta	<L2+1+4
  1137 09:B207: 2B           	pld
  1138 09:B208: 3B           	tsc
  1139 09:B209: 18           	clc
  1140 09:B20A: 69 14 00     	adc	#L2+4
  1141 09:B20D: 1B           	tcs
  1142 09:B20E: 98           	tya
  1143 09:B20F: 6B           	rtl
  1144                        ;    }
  1145                        	.line	49
  1146                        ;
  Thu Dec  3 2020 22:25                                                Page 23


  1147                        ;  /* Conservation du nom */
  1148                        ;  current_file->file_path = k_string_copy_string(
                    file_path);
  1149                        L10001:
  1150                        	.line	52
  1151 09:B210: D4 16        	pei	<L2+file_path_0+2
  1152 09:B212: D4 14        	pei	<L2+file_path_0
  1153 09:B214: 22 xx xx xx  	jsl	~~k_string_copy_string
  1154 09:B218: 85 01        	sta	<R0
  1155 09:B21A: 86 03        	stx	<R0+2
  1156 09:B21C: A5 01        	lda	<R0
  1157 09:B21E: 87 0D        	sta	[<L3+current_file_1]
  1158 09:B220: A5 03        	lda	<R0+2
  1159 09:B222: A0 02 00     	ldy	#$2
  1160 09:B225: 97 0D        	sta	[<L3+current_file_1],Y
  1161                        ;  if(current_file->file_path == NULL)
  1162                        	.line	53
  1163                        ;    {
  1164 09:B227: A7 0D        	lda	[<L3+current_file_1]
  1165 09:B229: A0 02 00     	ldy	#$2
  1166 09:B22C: 17 0D        	ora	[<L3+current_file_1],Y
  1167 09:B22E: F0 03        	beq	L7
  1168 09:B230: 82 12 00     	brl	L10002
  1169                        L7:
  1170                        	.line	54
  1171                        ;      mem_free_omf(current_file);
  1172                        	.line	55
  1173 09:B233: D4 0F        	pei	<L3+current_file_1+2
  1174 09:B235: D4 0D        	pei	<L3+current_file_1
  1175 09:B237: 22 C0 D5 09  	jsl	~~mem_free_omf
  1176                        ;      //printf("  Error : Impossible to allocate 
                    memory to process OMF file.\n");
  1177                        ;      return(NULL);
  1178                        	.line	57
  1179 09:B23B: A9 00 00     	lda	#$0
  1180 09:B23E: AA           	tax
  1181 09:B23F: A9 00 00     	lda	#$0
  1182 09:B242: 82 B9 FF     	brl	L6
  1183                        ;    }
  1184                        	.line	58
  1185                        ;
  1186                        ;  k_debug_strings("LoadOMFFile current_file->file
                    _path:",current_file->file_path);
  1187                        L10002:
  1188                        	.line	60
  1189 09:B245: A0 02 00     	ldy	#$2
  1190 09:B248: B7 0D        	lda	[<L3+current_file_1],Y
  1191 09:B24A: 48           	pha
  1192 09:B24B: A7 0D        	lda	[<L3+current_file_1]
  1193 09:B24D: 48           	pha
  1194 09:B24E: F4 xx xx     	pea	#^L1+24
  1195 09:B251: F4 xx xx     	pea	#<L1+24
  1196 09:B254: 22 xx xx xx  	jsl	~~k_debug_strings
  1197                        ;
  1198                        ;  for(i=(int)strlen(current_file->file_path); i>=
                    0; i--)
  1199                        	.line	62
  1200 09:B258: A0 02 00     	ldy	#$2
  Thu Dec  3 2020 22:25                                                Page 24


  1201 09:B25B: B7 0D        	lda	[<L3+current_file_1],Y
  1202 09:B25D: 48           	pha
  1203 09:B25E: A7 0D        	lda	[<L3+current_file_1]
  1204 09:B260: 48           	pha
  1205 09:B261: 22 xx xx xx  	jsl	~~strlen
  1206 09:B265: 85 09        	sta	<L3+i_1
  1207 09:B267: 82 68 00     	brl	L10006
  1208                        L10005:
  1209                        ;    if(current_file->file_path[i] == '\\' || curr
                    ent_file->file_path[i] == '/')
  1210                        	.line	63
  1211                        ;      {
  1212 09:B26A: A7 0D        	lda	[<L3+current_file_1]
  1213 09:B26C: 85 01        	sta	<R0
  1214 09:B26E: A0 02 00     	ldy	#$2
  1215 09:B271: B7 0D        	lda	[<L3+current_file_1],Y
  1216 09:B273: 85 03        	sta	<R0+2
  1217 09:B275: E2 20        	sep	#$20
  1218                        	longa	off
  1219 09:B277: A4 09        	ldy	<L3+i_1
  1220 09:B279: B7 01        	lda	[<R0],Y
  1221 09:B27B: C9 5C        	cmp	#<$5c
  1222 09:B27D: C2 20        	rep	#$20
  1223                        	longa	on
  1224 09:B27F: D0 03        	bne	L9
  1225 09:B281: 82 1A 00     	brl	L8
  1226                        L9:
  1227 09:B284: A7 0D        	lda	[<L3+current_file_1]
  1228 09:B286: 85 01        	sta	<R0
  1229 09:B288: A0 02 00     	ldy	#$2
  1230 09:B28B: B7 0D        	lda	[<L3+current_file_1],Y
  1231 09:B28D: 85 03        	sta	<R0+2
  1232 09:B28F: E2 20        	sep	#$20
  1233                        	longa	off
  1234 09:B291: A4 09        	ldy	<L3+i_1
  1235 09:B293: B7 01        	lda	[<R0],Y
  1236 09:B295: C9 2F        	cmp	#<$2f
  1237 09:B297: C2 20        	rep	#$20
  1238                        	longa	on
  1239 09:B299: F0 03        	beq	L10
  1240 09:B29B: 82 32 00     	brl	L10007
  1241                        L10:
  1242                        L8:
  1243                        	.line	64
  1244                        ;        current_file->file_name = &current_file->
                    file_path[i+1];
  1245                        	.line	65
  1246 09:B29E: A5 09        	lda	<L3+i_1
  1247 09:B2A0: 1A           	ina
  1248 09:B2A1: 85 01        	sta	<R0
  1249 09:B2A3: A0 00 00     	ldy	#$0
  1250 09:B2A6: A5 01        	lda	<R0
  1251 09:B2A8: 10 01        	bpl	L11
  1252 09:B2AA: 88           	dey
  1253                        L11:
  1254 09:B2AB: 85 01        	sta	<R0
  1255 09:B2AD: 84 03        	sty	<R0+2
  1256 09:B2AF: 18           	clc
  Thu Dec  3 2020 22:25                                                Page 25


  1257 09:B2B0: A7 0D        	lda	[<L3+current_file_1]
  1258 09:B2B2: 65 01        	adc	<R0
  1259 09:B2B4: 85 05        	sta	<R1
  1260 09:B2B6: A0 02 00     	ldy	#$2
  1261 09:B2B9: B7 0D        	lda	[<L3+current_file_1],Y
  1262 09:B2BB: 65 03        	adc	<R0+2
  1263 09:B2BD: 85 07        	sta	<R1+2
  1264 09:B2BF: A5 05        	lda	<R1
  1265 09:B2C1: A0 04 00     	ldy	#$4
  1266 09:B2C4: 97 0D        	sta	[<L3+current_file_1],Y
  1267 09:B2C6: A5 07        	lda	<R1+2
  1268 09:B2C8: A0 06 00     	ldy	#$6
  1269 09:B2CB: 97 0D        	sta	[<L3+current_file_1],Y
  1270                        ;        break;
  1271                        	.line	66
  1272 09:B2CD: 82 09 00     	brl	L10004
  1273                        ;      }
  1274                        	.line	67
  1275                        ;  if(current_file->file_name == NULL)
  1276                        L10007:
  1277                        L10003:
  1278 09:B2D0: C6 09        	dec	<L3+i_1
  1279                        L10006:
  1280 09:B2D2: A5 09        	lda	<L3+i_1
  1281 09:B2D4: 30 03        	bmi	L12
  1282 09:B2D6: 82 91 FF     	brl	L10005
  1283                        L12:
  1284                        L10004:
  1285                        	.line	68
  1286                        ;    current_file->file_name = current_file->file_
                    path;
  1287 09:B2D9: A0 04 00     	ldy	#$4
  1288 09:B2DC: B7 0D        	lda	[<L3+current_file_1],Y
  1289 09:B2DE: A0 06 00     	ldy	#$6
  1290 09:B2E1: 17 0D        	ora	[<L3+current_file_1],Y
  1291 09:B2E3: F0 03        	beq	L13
  1292 09:B2E5: 82 11 00     	brl	L10008
  1293                        L13:
  1294                        	.line	69
  1295 09:B2E8: A7 0D        	lda	[<L3+current_file_1]
  1296 09:B2EA: A0 04 00     	ldy	#$4
  1297 09:B2ED: 97 0D        	sta	[<L3+current_file_1],Y
  1298 09:B2EF: A0 02 00     	ldy	#$2
  1299 09:B2F2: B7 0D        	lda	[<L3+current_file_1],Y
  1300 09:B2F4: A0 06 00     	ldy	#$6
  1301 09:B2F7: 97 0D        	sta	[<L3+current_file_1],Y
  1302                        ;
  1303                        ;  /* Chargement des Data du fichier OMF */
  1304                        ;  current_file->data = LoadFileData(file_path,&cu
                    rrent_file->data_length);
  1305                        L10008:
  1306                        	.line	72
  1307 09:B2F9: 18           	clc
  1308 09:B2FA: A9 08 00     	lda	#$8
  1309 09:B2FD: 65 0D        	adc	<L3+current_file_1
  1310 09:B2FF: 85 01        	sta	<R0
  1311 09:B301: A9 00 00     	lda	#$0
  1312 09:B304: 65 0F        	adc	<L3+current_file_1+2
  Thu Dec  3 2020 22:25                                                Page 26


  1313 09:B306: 85 03        	sta	<R0+2
  1314 09:B308: D4 03        	pei	<R0+2
  1315 09:B30A: D4 01        	pei	<R0
  1316 09:B30C: D4 16        	pei	<L2+file_path_0+2
  1317 09:B30E: D4 14        	pei	<L2+file_path_0
  1318 09:B310: 22 xx xx xx  	jsl	~~LoadFileData
  1319 09:B314: 85 05        	sta	<R1
  1320 09:B316: 86 07        	stx	<R1+2
  1321 09:B318: A5 05        	lda	<R1
  1322 09:B31A: A0 0A 00     	ldy	#$a
  1323 09:B31D: 97 0D        	sta	[<L3+current_file_1],Y
  1324 09:B31F: A5 07        	lda	<R1+2
  1325 09:B321: A0 0C 00     	ldy	#$c
  1326 09:B324: 97 0D        	sta	[<L3+current_file_1],Y
  1327                        ;  if(current_file->data == NULL)
  1328                        	.line	73
  1329                        ;    {
  1330 09:B326: A0 0A 00     	ldy	#$a
  1331 09:B329: B7 0D        	lda	[<L3+current_file_1],Y
  1332 09:B32B: A0 0C 00     	ldy	#$c
  1333 09:B32E: 17 0D        	ora	[<L3+current_file_1],Y
  1334 09:B330: F0 03        	beq	L14
  1335 09:B332: 82 12 00     	brl	L10009
  1336                        L14:
  1337                        	.line	74
  1338                        ;      mem_free_omf(current_file);
  1339                        	.line	75
  1340 09:B335: D4 0F        	pei	<L3+current_file_1+2
  1341 09:B337: D4 0D        	pei	<L3+current_file_1
  1342 09:B339: 22 C0 D5 09  	jsl	~~mem_free_omf
  1343                        ;      //printf("  Error : Impossible to load OMF 
                    file '%s'.\n",file_path);
  1344                        ;      return(NULL);
  1345                        	.line	77
  1346 09:B33D: A9 00 00     	lda	#$0
  1347 09:B340: AA           	tax
  1348 09:B341: A9 00 00     	lda	#$0
  1349 09:B344: 82 B7 FE     	brl	L6
  1350                        ;    }
  1351                        	.line	78
  1352                        ;
  1353                        ;  /** Décodage du contenu du fichier OMF **/
  1354                        ;  result = DecodeOMFFile(current_file);
  1355                        L10009:
  1356                        	.line	81
  1357 09:B347: D4 0F        	pei	<L3+current_file_1+2
  1358 09:B349: D4 0D        	pei	<L3+current_file_1
  1359 09:B34B: 22 62 B3 09  	jsl	~~DecodeOMFFile
  1360 09:B34F: 85 0B        	sta	<L3+result_1
  1361                        ;
  1362                        ;  k_debug_string("LoadOMFFile exit... \r\n");
  1363                        	.line	83
  1364 09:B351: F4 xx xx     	pea	#^L1+61
  1365 09:B354: F4 xx xx     	pea	#<L1+61
  1366 09:B357: 22 xx xx xx  	jsl	~~k_debug_string
  1367                        ;
  1368                        ;  /* Renvoie la structure */
  1369                        ;  return(current_file);
  Thu Dec  3 2020 22:25                                                Page 27


  1370                        	.line	86
  1371 09:B35B: A6 0F        	ldx	<L3+current_file_1+2
  1372 09:B35D: A5 0D        	lda	<L3+current_file_1
  1373 09:B35F: 82 9C FE     	brl	L6
  1374                        ;}
  1375                        	.line	87
  1376                        	.endblock	87
  1377             00000010   L2	equ	16
  1378             00000009   L3	equ	9
  1379 09:B362:              	ends
  1380                        	efunc
  1381                        	.endfunc	87,9,16
  1382                        	.line	87
  1383                        	data
  1384                        L1:
  1385 00:0000: 4C 6F 61 64  	db	$4C,$6F,$61,$64,$4F,$4D,$46,$46,$69,$6C,
                    $65,$20,$65,$6E,$74
       00:0004: 4F 4D 46 46 
       00:0008: 69 6C 65 20 
       00:000C: 65 6E 74 
  1386 00:000F: 65 72 2E 2E  	db	$65,$72,$2E,$2E,$2E,$20,$0D,$0A,$00,$4C,
                    $6F,$61,$64,$4F,$4D
       00:0013: 2E 20 0D 0A 
       00:0017: 00 4C 6F 61 
       00:001B: 64 4F 4D 
  1387 00:001E: 46 46 69 6C  	db	$46,$46,$69,$6C,$65,$20,$63,$75,$72,$72,
                    $65,$6E,$74,$5F,$66
       00:0022: 65 20 63 75 
       00:0026: 72 72 65 6E 
       00:002A: 74 5F 66 
  1388 00:002D: 69 6C 65 2D  	db	$69,$6C,$65,$2D,$3E,$66,$69,$6C,$65,$5F,
                    $70,$61,$74,$68,$3A
       00:0031: 3E 66 69 6C 
       00:0035: 65 5F 70 61 
       00:0039: 74 68 3A 
  1389 00:003C: 00 4C 6F 61  	db	$00,$4C,$6F,$61,$64,$4F,$4D,$46,$46,$69,
                    $6C,$65,$20,$65,$78
       00:0040: 64 4F 4D 46 
       00:0044: 46 69 6C 65 
       00:0048: 20 65 78 
  1390 00:004B: 69 74 2E 2E  	db	$69,$74,$2E,$2E,$2E,$20,$0D,$0A,$00
       00:004F: 2E 20 0D 0A 
       00:0053: 00 
  1391 00:0054:              	ends
  1392                        ;
  1393                        ;
  1394                        ;/************************************************
                    ***************/
  1395                        ;/*  DecodeOMFFile() :  Décodage des structures du
                     fichier OMF. */
  1396                        ;/************************************************
                    ***************/
  1397                        ;static int DecodeOMFFile(struct omf_file *current
                    _file)
  1398                        ;{
  1399                        	.line	93
  1400                        	.line	94
  1401                        	LOADER
  Thu Dec  3 2020 22:25                                                Page 28


  1402                        	func
  1403                        	.function	94
  1404                        ~~DecodeOMFFile:
  1405                        	longa	on
  1406                        	longi	on
  1407 09:B362: 3B           	tsc
  1408 09:B363: 38           	sec
  1409 09:B364: E9 0C 00     	sbc	#L16
  1410 09:B367: 1B           	tcs
  1411 09:B368: 0B           	phd
  1412 09:B369: 5B           	tcd
  1413             00000004   current_file_0	set	4
  1414                        	.block	94
  1415                        ;  int file_offset, segment_length;
  1416                        ;  struct omf_segment *current_segment;
  1417                        ;
  1418                        ;  /* Init */
  1419                        ;  file_offset = 0;
  1420             00000000   file_offset_1	set	0
  1421             00000002   segment_length_1	set	2
  1422             00000004   current_segment_1	set	4
  1423                        	.sym	file_offset,0,5,1,16
  1424                        	.sym	segment_length,2,5,1,16
  1425                        	.sym	current_segment,4,138,1,32,100
  1426                        	.sym	current_file,4,138,6,32,101
  1427                        	.line	99
  1428 09:B36A: 64 05        	stz	<L17+file_offset_1
  1429                        ;
  1430                        ;  /** On va itérer sur tous les segments **/
  1431                        ;  while(1)
  1432                        	.line	102
  1433                        L10010:
  1434                        ;    {
  1435                        	.line	103
  1436                        ;      /** Décode 1 segment **/
  1437                        ;      current_segment = DecodeOneSegment(current_
                    file,file_offset,&segment_length);
  1438                        	.line	105
  1439 09:B36C: F4 00 00     	pea	#0
  1440 09:B36F: 18           	clc
  1441 09:B370: 7B           	tdc
  1442 09:B371: 69 07 00     	adc	#<L17+segment_length_1
  1443 09:B374: 48           	pha
  1444 09:B375: D4 05        	pei	<L17+file_offset_1
  1445 09:B377: D4 12        	pei	<L16+current_file_0+2
  1446 09:B379: D4 10        	pei	<L16+current_file_0
  1447 09:B37B: 22 12 B4 09  	jsl	~~DecodeOneSegment
  1448 09:B37F: 85 09        	sta	<L17+current_segment_1
  1449 09:B381: 86 0B        	stx	<L17+current_segment_1+2
  1450                        ;      if(current_segment == NULL)
  1451                        	.line	106
  1452                        ;        {
  1453 09:B383: A5 09        	lda	<L17+current_segment_1
  1454 09:B385: 05 0B        	ora	<L17+current_segment_1+2
  1455 09:B387: F0 03        	beq	L19
  1456 09:B389: 82 15 00     	brl	L10012
  1457                        L19:
  1458                        	.line	107
  Thu Dec  3 2020 22:25                                                Page 29


  1459                        ;          /* Erreur */
  1460                        ;          return(1);
  1461                        	.line	109
  1462 09:B38C: A9 01 00     	lda	#$1
  1463                        L20:
  1464 09:B38F: A8           	tay
  1465 09:B390: A5 0E        	lda	<L16+2
  1466 09:B392: 85 12        	sta	<L16+2+4
  1467 09:B394: A5 0D        	lda	<L16+1
  1468 09:B396: 85 11        	sta	<L16+1+4
  1469 09:B398: 2B           	pld
  1470 09:B399: 3B           	tsc
  1471 09:B39A: 18           	clc
  1472 09:B39B: 69 10 00     	adc	#L16+4
  1473 09:B39E: 1B           	tcs
  1474 09:B39F: 98           	tya
  1475 09:B3A0: 6B           	rtl
  1476                        ;        }
  1477                        	.line	110
  1478                        ;
  1479                        ;      /* Rattache ce segment au fichier OMF */
  1480                        ;      if(current_file->first_segment == NULL)
  1481                        L10012:
  1482                        	.line	113
  1483                        ;        current_file->first_segment = current_seg
                    ment;
  1484 09:B3A1: A0 10 00     	ldy	#$10
  1485 09:B3A4: B7 10        	lda	[<L16+current_file_0],Y
  1486 09:B3A6: A0 12 00     	ldy	#$12
  1487 09:B3A9: 17 10        	ora	[<L16+current_file_0],Y
  1488 09:B3AB: F0 03        	beq	L21
  1489 09:B3AD: 82 11 00     	brl	L10013
  1490                        L21:
  1491                        	.line	114
  1492 09:B3B0: A5 09        	lda	<L17+current_segment_1
  1493 09:B3B2: A0 10 00     	ldy	#$10
  1494 09:B3B5: 97 10        	sta	[<L16+current_file_0],Y
  1495 09:B3B7: A5 0B        	lda	<L17+current_segment_1+2
  1496 09:B3B9: A0 12 00     	ldy	#$12
  1497 09:B3BC: 97 10        	sta	[<L16+current_file_0],Y
  1498                        ;      else
  1499 09:B3BE: 82 1C 00     	brl	L10014
  1500                        L10013:
  1501                        ;        current_file->last_segment->next = curren
                    t_segment;
  1502                        	.line	116
  1503 09:B3C1: A0 14 00     	ldy	#$14
  1504 09:B3C4: B7 10        	lda	[<L16+current_file_0],Y
  1505 09:B3C6: 85 01        	sta	<R0
  1506 09:B3C8: A0 16 00     	ldy	#$16
  1507 09:B3CB: B7 10        	lda	[<L16+current_file_0],Y
  1508 09:B3CD: 85 03        	sta	<R0+2
  1509 09:B3CF: A5 09        	lda	<L17+current_segment_1
  1510 09:B3D1: A0 61 0A     	ldy	#$a61
  1511 09:B3D4: 97 01        	sta	[<R0],Y
  1512 09:B3D6: A5 0B        	lda	<L17+current_segment_1+2
  1513 09:B3D8: A0 63 0A     	ldy	#$a63
  1514 09:B3DB: 97 01        	sta	[<R0],Y
  Thu Dec  3 2020 22:25                                                Page 30


  1515                        L10014:
  1516                        ;      current_file->last_segment = current_segmen
                    t;
  1517                        	.line	117
  1518 09:B3DD: A5 09        	lda	<L17+current_segment_1
  1519 09:B3DF: A0 14 00     	ldy	#$14
  1520 09:B3E2: 97 10        	sta	[<L16+current_file_0],Y
  1521 09:B3E4: A5 0B        	lda	<L17+current_segment_1+2
  1522 09:B3E6: A0 16 00     	ldy	#$16
  1523 09:B3E9: 97 10        	sta	[<L16+current_file_0],Y
  1524                        ;      current_file->nb_segment++;
  1525                        	.line	118
  1526 09:B3EB: A0 0E 00     	ldy	#$e
  1527 09:B3EE: B7 10        	lda	[<L16+current_file_0],Y
  1528 09:B3F0: 1A           	ina
  1529 09:B3F1: A0 0E 00     	ldy	#$e
  1530 09:B3F4: 97 10        	sta	[<L16+current_file_0],Y
  1531                        ;
  1532                        ;      /* Segment suivant */
  1533                        ;      file_offset += segment_length;
  1534                        	.line	121
  1535 09:B3F6: 18           	clc
  1536 09:B3F7: A5 05        	lda	<L17+file_offset_1
  1537 09:B3F9: 65 07        	adc	<L17+segment_length_1
  1538 09:B3FB: 85 05        	sta	<L17+file_offset_1
  1539                        ;
  1540                        ;      /* Fin de fichier */
  1541                        ;      if(file_offset == current_file->data_length
                    )
  1542                        	.line	124
  1543                        ;        break;
  1544 09:B3FD: A5 05        	lda	<L17+file_offset_1
  1545 09:B3FF: A0 08 00     	ldy	#$8
  1546 09:B402: D7 10        	cmp	[<L16+current_file_0],Y
  1547 09:B404: D0 03        	bne	L22
  1548 09:B406: 82 03 00     	brl	L10011
  1549                        L22:
  1550                        ;    }
  1551                        	.line	126
  1552 09:B409: 82 60 FF     	brl	L10010
  1553                        L10011:
  1554                        ;
  1555                        ;  /* OK */
  1556                        ;  return(0);
  1557                        	.line	129
  1558 09:B40C: A9 00 00     	lda	#$0
  1559 09:B40F: 82 7D FF     	brl	L20
  1560                        ;}
  1561                        	.line	130
  1562                        	.endblock	130
  1563             0000000C   L16	equ	12
  1564             00000005   L17	equ	5
  1565 09:B412:              	ends
  1566                        	efunc
  1567                        	.endfunc	130,5,12
  1568                        	.line	130
  1569                        ;
  1570                        ;
  Thu Dec  3 2020 22:25                                                Page 31


  1571                        ;/************************************************
                    ****************/
  1572                        ;/*  DecodeOneSegment() :  Décodage d'un Segment d
                    u fichier OMF. */
  1573                        ;/************************************************
                    ****************/
  1574                        ;static struct omf_segment *DecodeOneSegment(struc
                    t omf_file *current_file, int data_offset, int *segment_leng
                    th_rtn)
  1575                        ;{
  1576                        	.line	136
  1577                        	.line	137
  1578                        	LOADER
  1579                        	func
  1580                        	.function	137
  1581                        ~~DecodeOneSegment:
  1582                        	longa	on
  1583                        	longi	on
  1584 09:B412: 3B           	tsc
  1585 09:B413: 38           	sec
  1586 09:B414: E9 0A 00     	sbc	#L23
  1587 09:B417: 1B           	tcs
  1588 09:B418: 0B           	phd
  1589 09:B419: 5B           	tcd
  1590             00000004   current_file_0	set	4
  1591             00000008   data_offset_0	set	8
  1592             0000000A   segment_length_rtn_0	set	10
  1593                        	.block	137
  1594                        ;  int result;
  1595                        ;  struct omf_segment *current_segment;
  1596                        ;
  1597                        ;  /* Allocation mémoire */
  1598                        ;  current_segment = (struct omf_segment *) k_call
                    oc(1,sizeof(struct omf_segment));
  1599             00000000   result_1	set	0
  1600             00000002   current_segment_1	set	2
  1601                        	.sym	result,0,5,1,16
  1602                        	.sym	current_segment,2,138,1,32,100
  1603                        	.sym	current_file,4,138,6,32,101
  1604                        	.sym	data_offset,8,5,6,16
  1605                        	.sym	segment_length_rtn,10,133,6,32
  1606                        	.line	142
  1607 09:B41A: F4 65 0A     	pea	#<$a65
  1608 09:B41D: F4 01 00     	pea	#<$1
  1609 09:B420: 22 xx xx xx  	jsl	~~k_calloc
  1610 09:B424: 85 07        	sta	<L24+current_segment_1
  1611 09:B426: 86 09        	stx	<L24+current_segment_1+2
  1612                        ;  if(current_segment == NULL)
  1613                        	.line	143
  1614                        ;    {
  1615 09:B428: A5 07        	lda	<L24+current_segment_1
  1616 09:B42A: 05 09        	ora	<L24+current_segment_1+2
  1617 09:B42C: F0 03        	beq	L26
  1618 09:B42E: 82 19 00     	brl	L10015
  1619                        L26:
  1620                        	.line	144
  1621                        ;      //printf("  Error : Impossible to allocate 
                    memory to process Segment #%d.\n",current_file->nb_segment+1
  Thu Dec  3 2020 22:25                                                Page 32


                    );
  1622                        ;      return(NULL);
  1623                        	.line	146
  1624 09:B431: A9 00 00     	lda	#$0
  1625 09:B434: AA           	tax
  1626 09:B435: A9 00 00     	lda	#$0
  1627                        L27:
  1628 09:B438: A8           	tay
  1629 09:B439: A5 0C        	lda	<L23+2
  1630 09:B43B: 85 16        	sta	<L23+2+10
  1631 09:B43D: A5 0B        	lda	<L23+1
  1632 09:B43F: 85 15        	sta	<L23+1+10
  1633 09:B441: 2B           	pld
  1634 09:B442: 3B           	tsc
  1635 09:B443: 18           	clc
  1636 09:B444: 69 14 00     	adc	#L23+10
  1637 09:B447: 1B           	tcs
  1638 09:B448: 98           	tya
  1639 09:B449: 6B           	rtl
  1640                        ;    }
  1641                        	.line	147
  1642                        ;
  1643                        ;  /** Décodage du Segment Header **/
  1644                        ;  result = DecodeSegmentHeader(current_file,data_
                    offset,&current_segment->header);
  1645                        L10015:
  1646                        	.line	150
  1647 09:B44A: D4 09        	pei	<L24+current_segment_1+2
  1648 09:B44C: D4 07        	pei	<L24+current_segment_1
  1649 09:B44E: D4 12        	pei	<L23+data_offset_0
  1650 09:B450: D4 10        	pei	<L23+current_file_0+2
  1651 09:B452: D4 0E        	pei	<L23+current_file_0
  1652 09:B454: 22 D8 B4 09  	jsl	~~DecodeSegmentHeader
  1653 09:B458: 85 05        	sta	<L24+result_1
  1654                        ;  if(result)
  1655                        	.line	151
  1656                        ;    {
  1657 09:B45A: A5 05        	lda	<L24+result_1
  1658 09:B45C: D0 03        	bne	L28
  1659 09:B45E: 82 12 00     	brl	L10016
  1660                        L28:
  1661                        	.line	152
  1662                        ;      mem_free_segment(current_segment);
  1663                        	.line	153
  1664 09:B461: D4 09        	pei	<L24+current_segment_1+2
  1665 09:B463: D4 07        	pei	<L24+current_segment_1
  1666 09:B465: 22 59 D6 09  	jsl	~~mem_free_segment
  1667                        ;      return(NULL);
  1668                        	.line	154
  1669 09:B469: A9 00 00     	lda	#$0
  1670 09:B46C: AA           	tax
  1671 09:B46D: A9 00 00     	lda	#$0
  1672 09:B470: 82 C5 FF     	brl	L27
  1673                        ;    }
  1674                        	.line	155
  1675                        ;  current_segment->header.FileOffset = data_offse
                    t;
  1676                        L10016:
  Thu Dec  3 2020 22:25                                                Page 33


  1677                        	.line	156
  1678 09:B473: A0 00 00     	ldy	#$0
  1679 09:B476: A5 12        	lda	<L23+data_offset_0
  1680 09:B478: 10 01        	bpl	L29
  1681 09:B47A: 88           	dey
  1682                        L29:
  1683 09:B47B: 85 01        	sta	<R0
  1684 09:B47D: 84 03        	sty	<R0+2
  1685 09:B47F: A5 01        	lda	<R0
  1686 09:B481: 87 07        	sta	[<L24+current_segment_1]
  1687 09:B483: A5 03        	lda	<R0+2
  1688 09:B485: A0 02 00     	ldy	#$2
  1689 09:B488: 97 07        	sta	[<L24+current_segment_1],Y
  1690                        ;  current_segment->header.SegmentOffset = 0;
  1691                        	.line	157
  1692 09:B48A: A9 00 00     	lda	#$0
  1693 09:B48D: A0 04 00     	ldy	#$4
  1694 09:B490: 97 07        	sta	[<L24+current_segment_1],Y
  1695 09:B492: A9 00 00     	lda	#$0
  1696 09:B495: A0 06 00     	ldy	#$6
  1697 09:B498: 97 07        	sta	[<L24+current_segment_1],Y
  1698                        ;
  1699                        ;  /** Décodage du Segment Body **/
  1700                        ;  result = DecodeSegmentBody(current_file,data_of
                    fset+current_segment->header.DispDataOffset,current_segment)
                    ;
  1701                        	.line	160
  1702 09:B49A: D4 09        	pei	<L24+current_segment_1+2
  1703 09:B49C: D4 07        	pei	<L24+current_segment_1
  1704 09:B49E: 18           	clc
  1705 09:B49F: A5 12        	lda	<L23+data_offset_0
  1706 09:B4A1: A0 38 00     	ldy	#$38
  1707 09:B4A4: 77 07        	adc	[<L24+current_segment_1],Y
  1708 09:B4A6: 48           	pha
  1709 09:B4A7: D4 10        	pei	<L23+current_file_0+2
  1710 09:B4A9: D4 0E        	pei	<L23+current_file_0
  1711 09:B4AB: 22 5F CF 09  	jsl	~~DecodeSegmentBody
  1712 09:B4AF: 85 05        	sta	<L24+result_1
  1713                        ;  if(result)
  1714                        	.line	161
  1715                        ;    {
  1716 09:B4B1: A5 05        	lda	<L24+result_1
  1717 09:B4B3: D0 03        	bne	L30
  1718 09:B4B5: 82 12 00     	brl	L10017
  1719                        L30:
  1720                        	.line	162
  1721                        ;      mem_free_segment(current_segment);
  1722                        	.line	163
  1723 09:B4B8: D4 09        	pei	<L24+current_segment_1+2
  1724 09:B4BA: D4 07        	pei	<L24+current_segment_1
  1725 09:B4BC: 22 59 D6 09  	jsl	~~mem_free_segment
  1726                        ;      return(NULL);
  1727                        	.line	164
  1728 09:B4C0: A9 00 00     	lda	#$0
  1729 09:B4C3: AA           	tax
  1730 09:B4C4: A9 00 00     	lda	#$0
  1731 09:B4C7: 82 6E FF     	brl	L27
  1732                        ;    }
  Thu Dec  3 2020 22:25                                                Page 34


  1733                        	.line	165
  1734                        ;
  1735                        ;  /* Renvoie le segment */
  1736                        ;  *segment_length_rtn = (int) current_segment->he
                    ader.ByteCnt;
  1737                        L10017:
  1738                        	.line	168
  1739 09:B4CA: A0 0C 00     	ldy	#$c
  1740 09:B4CD: B7 07        	lda	[<L24+current_segment_1],Y
  1741 09:B4CF: 87 14        	sta	[<L23+segment_length_rtn_0]
  1742                        ;  return(current_segment);
  1743                        	.line	169
  1744 09:B4D1: A6 09        	ldx	<L24+current_segment_1+2
  1745 09:B4D3: A5 07        	lda	<L24+current_segment_1
  1746 09:B4D5: 82 60 FF     	brl	L27
  1747                        ;}
  1748                        	.line	170
  1749                        	.endblock	170
  1750             0000000A   L23	equ	10
  1751             00000005   L24	equ	5
  1752 09:B4D8:              	ends
  1753                        	efunc
  1754                        	.endfunc	170,5,10
  1755                        	.line	170
  1756                        ;
  1757                        ;
  1758                        ;/************************************************
                    **********/
  1759                        ;/*  DecodeSegmentHeader() :  Décode le Header du 
                    Segment. */
  1760                        ;/************************************************
                    **********/
  1761                        ;static int DecodeSegmentHeader(struct omf_file *c
                    urrent_file, int data_offset, struct omf_segment_header *cur
                    rent_header)
  1762                        ;{
  1763                        	.line	176
  1764                        	.line	177
  1765                        	LOADER
  1766                        	func
  1767                        	.function	177
  1768                        ~~DecodeSegmentHeader:
  1769                        	longa	on
  1770                        	longi	on
  1771 09:B4D8: 3B           	tsc
  1772 09:B4D9: 38           	sec
  1773 09:B4DA: E9 0A 00     	sbc	#L31
  1774 09:B4DD: 1B           	tcs
  1775 09:B4DE: 0B           	phd
  1776 09:B4DF: 5B           	tcd
  1777             00000004   current_file_0	set	4
  1778             00000008   data_offset_0	set	8
  1779             0000000A   current_header_0	set	10
  1780                        	.block	177
  1781                        ;  int error;
  1782                        ;
  1783                        ;  /* Vérifie la taille */
  1784                        ;  if(data_offset + SEGMENT_HEADER_VERSION_OFFSET 
  Thu Dec  3 2020 22:25                                                Page 35


                    > current_file->data_length)
  1785             00000000   error_1	set	0
  1786                        	.sym	error,0,5,1,16
  1787                        	.sym	current_file,4,138,6,32,101
  1788                        	.sym	data_offset,8,5,6,16
  1789                        	.sym	current_header,10,138,6,32,99
  1790                        	.line	181
  1791                        ;    {
  1792 09:B4E0: 18           	clc
  1793 09:B4E1: A9 0F 00     	lda	#$f
  1794 09:B4E4: 65 12        	adc	<L31+data_offset_0
  1795 09:B4E6: 85 01        	sta	<R0
  1796 09:B4E8: 38           	sec
  1797 09:B4E9: A0 08 00     	ldy	#$8
  1798 09:B4EC: B7 0E        	lda	[<L31+current_file_0],Y
  1799 09:B4EE: E5 01        	sbc	<R0
  1800 09:B4F0: 70 03        	bvs	L34
  1801 09:B4F2: 49 00 80     	eor	#$8000
  1802                        L34:
  1803 09:B4F5: 10 03        	bpl	L35
  1804 09:B4F7: 82 15 00     	brl	L10018
  1805                        L35:
  1806                        	.line	182
  1807                        ;      //printf("  Error : Not enough data to enco
                    de a Segment Header (offset=%d, Segment #%d).\n",data_offset
                    ,current_file->nb_segment+1);
  1808                        ;      return(1);
  1809                        	.line	184
  1810 09:B4FA: A9 01 00     	lda	#$1
  1811                        L36:
  1812 09:B4FD: A8           	tay
  1813 09:B4FE: A5 0C        	lda	<L31+2
  1814 09:B500: 85 16        	sta	<L31+2+10
  1815 09:B502: A5 0B        	lda	<L31+1
  1816 09:B504: 85 15        	sta	<L31+1+10
  1817 09:B506: 2B           	pld
  1818 09:B507: 3B           	tsc
  1819 09:B508: 18           	clc
  1820 09:B509: 69 14 00     	adc	#L31+10
  1821 09:B50C: 1B           	tcs
  1822 09:B50D: 98           	tya
  1823 09:B50E: 6B           	rtl
  1824                        ;    }
  1825                        	.line	185
  1826                        ;
  1827                        ;  /**  On va déterminer la version de l'OMF utili
                    sé  **/
  1828                        ;  memcpy(&current_header->Version,&current_file->
                    data[data_offset+SEGMENT_HEADER_VERSION_OFFSET],sizeof(BYTE)
                    );
  1829                        L10018:
  1830                        	.line	188
  1831 09:B50F: F4 01 00     	pea	#<$1
  1832 09:B512: 18           	clc
  1833 09:B513: A9 0F 00     	lda	#$f
  1834 09:B516: 65 12        	adc	<L31+data_offset_0
  1835 09:B518: 85 01        	sta	<R0
  1836 09:B51A: A0 00 00     	ldy	#$0
  Thu Dec  3 2020 22:25                                                Page 36


  1837 09:B51D: A5 01        	lda	<R0
  1838 09:B51F: 10 01        	bpl	L37
  1839 09:B521: 88           	dey
  1840                        L37:
  1841 09:B522: 85 01        	sta	<R0
  1842 09:B524: 84 03        	sty	<R0+2
  1843 09:B526: 18           	clc
  1844 09:B527: A0 0A 00     	ldy	#$a
  1845 09:B52A: B7 0E        	lda	[<L31+current_file_0],Y
  1846 09:B52C: 65 01        	adc	<R0
  1847 09:B52E: 85 05        	sta	<R1
  1848 09:B530: A0 0C 00     	ldy	#$c
  1849 09:B533: B7 0E        	lda	[<L31+current_file_0],Y
  1850 09:B535: 65 03        	adc	<R0+2
  1851 09:B537: 85 07        	sta	<R1+2
  1852 09:B539: D4 07        	pei	<R1+2
  1853 09:B53B: D4 05        	pei	<R1
  1854 09:B53D: 18           	clc
  1855 09:B53E: A9 1C 00     	lda	#$1c
  1856 09:B541: 65 14        	adc	<L31+current_header_0
  1857 09:B543: 85 01        	sta	<R0
  1858 09:B545: A9 00 00     	lda	#$0
  1859 09:B548: 65 16        	adc	<L31+current_header_0+2
  1860 09:B54A: 85 03        	sta	<R0+2
  1861 09:B54C: D4 03        	pei	<R0+2
  1862 09:B54E: D4 01        	pei	<R0
  1863 09:B550: 22 xx xx xx  	jsl	~~memcpy
  1864                        ;
  1865                        ;  /** On décode selon le type **/
  1866                        ;  if(current_header->Version == 0x00)
  1867                        	.line	191
  1868                        ;    error = DecodeSegmentHeaderV0(current_file,da
                    ta_offset,current_header);
  1869 09:B554: A0 1C 00     	ldy	#$1c
  1870 09:B557: B7 14        	lda	[<L31+current_header_0],Y
  1871 09:B559: 29 FF 00     	and	#$ff
  1872 09:B55C: F0 03        	beq	L38
  1873 09:B55E: 82 13 00     	brl	L10019
  1874                        L38:
  1875                        	.line	192
  1876 09:B561: D4 16        	pei	<L31+current_header_0+2
  1877 09:B563: D4 14        	pei	<L31+current_header_0
  1878 09:B565: D4 12        	pei	<L31+data_offset_0
  1879 09:B567: D4 10        	pei	<L31+current_file_0+2
  1880 09:B569: D4 0E        	pei	<L31+current_file_0
  1881 09:B56B: 22 C5 B5 09  	jsl	~~DecodeSegmentHeaderV0
  1882 09:B56F: 85 09        	sta	<L32+error_1
  1883                        ;  else if(current_header->Version == 0x01)
  1884 09:B571: 82 4C 00     	brl	L10020
  1885                        L10019:
  1886                        	.line	193
  1887                        ;    error = DecodeSegmentHeaderV1(current_file,da
                    ta_offset,current_header);
  1888 09:B574: E2 20        	sep	#$20
  1889                        	longa	off
  1890 09:B576: A0 1C 00     	ldy	#$1c
  1891 09:B579: B7 14        	lda	[<L31+current_header_0],Y
  1892 09:B57B: C9 01        	cmp	#<$1
  Thu Dec  3 2020 22:25                                                Page 37


  1893 09:B57D: C2 20        	rep	#$20
  1894                        	longa	on
  1895 09:B57F: F0 03        	beq	L39
  1896 09:B581: 82 13 00     	brl	L10021
  1897                        L39:
  1898                        	.line	194
  1899 09:B584: D4 16        	pei	<L31+current_header_0+2
  1900 09:B586: D4 14        	pei	<L31+current_header_0
  1901 09:B588: D4 12        	pei	<L31+data_offset_0
  1902 09:B58A: D4 10        	pei	<L31+current_file_0+2
  1903 09:B58C: D4 0E        	pei	<L31+current_file_0
  1904 09:B58E: 22 E2 BC 09  	jsl	~~DecodeSegmentHeaderV1
  1905 09:B592: 85 09        	sta	<L32+error_1
  1906                        ;  else if(current_header->Version == 0x02)
  1907 09:B594: 82 29 00     	brl	L10022
  1908                        L10021:
  1909                        	.line	195
  1910                        ;    error = DecodeSegmentHeaderV2(current_file,da
                    ta_offset,current_header);
  1911 09:B597: E2 20        	sep	#$20
  1912                        	longa	off
  1913 09:B599: A0 1C 00     	ldy	#$1c
  1914 09:B59C: B7 14        	lda	[<L31+current_header_0],Y
  1915 09:B59E: C9 02        	cmp	#<$2
  1916 09:B5A0: C2 20        	rep	#$20
  1917                        	longa	on
  1918 09:B5A2: F0 03        	beq	L40
  1919 09:B5A4: 82 13 00     	brl	L10023
  1920                        L40:
  1921                        	.line	196
  1922 09:B5A7: D4 16        	pei	<L31+current_header_0+2
  1923 09:B5A9: D4 14        	pei	<L31+current_header_0
  1924 09:B5AB: D4 12        	pei	<L31+data_offset_0
  1925 09:B5AD: D4 10        	pei	<L31+current_file_0+2
  1926 09:B5AF: D4 0E        	pei	<L31+current_file_0
  1927 09:B5B1: 22 21 C6 09  	jsl	~~DecodeSegmentHeaderV2
  1928 09:B5B5: 85 09        	sta	<L32+error_1
  1929                        ;  else
  1930 09:B5B7: 82 06 00     	brl	L10024
  1931                        L10023:
  1932                        ;    {
  1933                        	.line	198
  1934                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'Version' value (the value should be 0, 1 or 2 for the A
                    pple IIgs).\n",current_file->nb_segment+1);
  1935                        ;      return(1);
  1936                        	.line	200
  1937 09:B5BA: A9 01 00     	lda	#$1
  1938 09:B5BD: 82 3D FF     	brl	L36
  1939                        ;    }
  1940                        	.line	201
  1941                        L10024:
  1942                        L10022:
  1943                        L10020:
  1944                        ;
  1945                        ;  /* Code d'erreur */
  1946                        ;  return(error);
  1947                        	.line	204
  Thu Dec  3 2020 22:25                                                Page 38


  1948 09:B5C0: A5 09        	lda	<L32+error_1
  1949 09:B5C2: 82 38 FF     	brl	L36
  1950                        ;}
  1951                        	.line	205
  1952                        	.endblock	205
  1953             0000000A   L31	equ	10
  1954             00000009   L32	equ	9
  1955 09:B5C5:              	ends
  1956                        	efunc
  1957                        	.endfunc	205,9,10
  1958                        	.line	205
  1959                        ;
  1960                        ;
  1961                        ;/************************************************
                    ************/
  1962                        ;/*  DecodeSegmentHeaderV0() :  Décode le Header d
                    u Segment. */
  1963                        ;/************************************************
                    ************/
  1964                        ;static int DecodeSegmentHeaderV0(struct omf_file 
                    *current_file, int data_offset, struct omf_segment_header *c
                    urrent_header)
  1965                        ;{
  1966                        	.line	211
  1967                        	.line	212
  1968                        	LOADER
  1969                        	func
  1970                        	.function	212
  1971                        ~~DecodeSegmentHeaderV0:
  1972                        	longa	on
  1973                        	longi	on
  1974 09:B5C5: 3B           	tsc
  1975 09:B5C6: 38           	sec
  1976 09:B5C7: E9 08 00     	sbc	#L41
  1977 09:B5CA: 1B           	tcs
  1978 09:B5CB: 0B           	phd
  1979 09:B5CC: 5B           	tcd
  1980             00000004   current_file_0	set	4
  1981             00000008   data_offset_0	set	8
  1982             0000000A   current_header_0	set	10
  1983                        	.block	212
  1984                        ;  /* Vérifie la taille */
  1985                        ;  if(data_offset + SEGMENT_HEADER_SIZE_V0 > curre
                    nt_file->data_length)
  1986                        	.sym	current_file,4,138,6,32,101
  1987                        	.sym	data_offset,8,5,6,16
  1988                        	.sym	current_header,10,138,6,32,99
  1989                        	.line	214
  1990                        ;    {
  1991 09:B5CD: 18           	clc
  1992 09:B5CE: A9 2E 00     	lda	#$2e
  1993 09:B5D1: 65 10        	adc	<L41+data_offset_0
  1994 09:B5D3: 85 01        	sta	<R0
  1995 09:B5D5: 38           	sec
  1996 09:B5D6: A0 08 00     	ldy	#$8
  1997 09:B5D9: B7 0C        	lda	[<L41+current_file_0],Y
  1998 09:B5DB: E5 01        	sbc	<R0
  1999 09:B5DD: 70 03        	bvs	L44
  Thu Dec  3 2020 22:25                                                Page 39


  2000 09:B5DF: 49 00 80     	eor	#$8000
  2001                        L44:
  2002 09:B5E2: 10 03        	bpl	L45
  2003 09:B5E4: 82 15 00     	brl	L10025
  2004                        L45:
  2005                        	.line	215
  2006                        ;      //printf("  Error : Not enough data to enco
                    de a Segment Header (offset=%d, Segment #%d).\n",data_offset
                    ,current_file->nb_segment+1);
  2007                        ;      return(1);
  2008                        	.line	217
  2009 09:B5E7: A9 01 00     	lda	#$1
  2010                        L46:
  2011 09:B5EA: A8           	tay
  2012 09:B5EB: A5 0A        	lda	<L41+2
  2013 09:B5ED: 85 14        	sta	<L41+2+10
  2014 09:B5EF: A5 09        	lda	<L41+1
  2015 09:B5F1: 85 13        	sta	<L41+1+10
  2016 09:B5F3: 2B           	pld
  2017 09:B5F4: 3B           	tsc
  2018 09:B5F5: 18           	clc
  2019 09:B5F6: 69 12 00     	adc	#L41+10
  2020 09:B5F9: 1B           	tcs
  2021 09:B5FA: 98           	tya
  2022 09:B5FB: 6B           	rtl
  2023                        ;    }
  2024                        	.line	218
  2025                        ;
  2026                        ;  /**********************************************
                    *********/
  2027                        ;  /**  On va décoder tous les éléments fixes du H
                    eader  **/
  2028                        ;  /**********************************************
                    *********/
  2029                        ;  memcpy(&current_header->BlockCnt,&current_file-
                    >data[data_offset+0x00],sizeof(DWORD));     /* Block Count *
                     512 = ByteCount */
  2030                        L10025:
  2031                        	.line	223
  2032 09:B5FC: F4 04 00     	pea	#<$4
  2033 09:B5FF: A0 00 00     	ldy	#$0
  2034 09:B602: A5 10        	lda	<L41+data_offset_0
  2035 09:B604: 10 01        	bpl	L47
  2036 09:B606: 88           	dey
  2037                        L47:
  2038 09:B607: 85 01        	sta	<R0
  2039 09:B609: 84 03        	sty	<R0+2
  2040 09:B60B: 18           	clc
  2041 09:B60C: A0 0A 00     	ldy	#$a
  2042 09:B60F: B7 0C        	lda	[<L41+current_file_0],Y
  2043 09:B611: 65 01        	adc	<R0
  2044 09:B613: 85 05        	sta	<R1
  2045 09:B615: A0 0C 00     	ldy	#$c
  2046 09:B618: B7 0C        	lda	[<L41+current_file_0],Y
  2047 09:B61A: 65 03        	adc	<R0+2
  2048 09:B61C: 85 07        	sta	<R1+2
  2049 09:B61E: D4 07        	pei	<R1+2
  2050 09:B620: D4 05        	pei	<R1
  Thu Dec  3 2020 22:25                                                Page 40


  2051 09:B622: 18           	clc
  2052 09:B623: A9 08 00     	lda	#$8
  2053 09:B626: 65 12        	adc	<L41+current_header_0
  2054 09:B628: 85 01        	sta	<R0
  2055 09:B62A: A9 00 00     	lda	#$0
  2056 09:B62D: 65 14        	adc	<L41+current_header_0+2
  2057 09:B62F: 85 03        	sta	<R0+2
  2058 09:B631: D4 03        	pei	<R0+2
  2059 09:B633: D4 01        	pei	<R0
  2060 09:B635: 22 xx xx xx  	jsl	~~memcpy
  2061                        ;  current_header->ByteCnt = 512*current_header->B
                    lockCnt;
  2062                        	.line	224
  2063 09:B639: A0 0A 00     	ldy	#$a
  2064 09:B63C: B7 12        	lda	[<L41+current_header_0],Y
  2065 09:B63E: 48           	pha
  2066 09:B63F: A0 08 00     	ldy	#$8
  2067 09:B642: B7 12        	lda	[<L41+current_header_0],Y
  2068 09:B644: 48           	pha
  2069 09:B645: A9 09 00     	lda	#$9
  2070                        	xref	~~~lasl
  2071 09:B648: 22 xx xx xx  	jsl	~~~lasl
  2072 09:B64C: 85 01        	sta	<R0
  2073 09:B64E: 86 03        	stx	<R0+2
  2074 09:B650: A5 01        	lda	<R0
  2075 09:B652: A0 0C 00     	ldy	#$c
  2076 09:B655: 97 12        	sta	[<L41+current_header_0],Y
  2077 09:B657: A5 03        	lda	<R0+2
  2078 09:B659: A0 0E 00     	ldy	#$e
  2079 09:B65C: 97 12        	sta	[<L41+current_header_0],Y
  2080                        ;  memcpy(&current_header->ResSpc,&current_file->d
                    ata[data_offset+0x04],sizeof(DWORD));
  2081                        	.line	225
  2082 09:B65E: F4 04 00     	pea	#<$4
  2083 09:B661: 18           	clc
  2084 09:B662: A9 04 00     	lda	#$4
  2085 09:B665: 65 10        	adc	<L41+data_offset_0
  2086 09:B667: 85 01        	sta	<R0
  2087 09:B669: A0 00 00     	ldy	#$0
  2088 09:B66C: A5 01        	lda	<R0
  2089 09:B66E: 10 01        	bpl	L48
  2090 09:B670: 88           	dey
  2091                        L48:
  2092 09:B671: 85 01        	sta	<R0
  2093 09:B673: 84 03        	sty	<R0+2
  2094 09:B675: 18           	clc
  2095 09:B676: A0 0A 00     	ldy	#$a
  2096 09:B679: B7 0C        	lda	[<L41+current_file_0],Y
  2097 09:B67B: 65 01        	adc	<R0
  2098 09:B67D: 85 05        	sta	<R1
  2099 09:B67F: A0 0C 00     	ldy	#$c
  2100 09:B682: B7 0C        	lda	[<L41+current_file_0],Y
  2101 09:B684: 65 03        	adc	<R0+2
  2102 09:B686: 85 07        	sta	<R1+2
  2103 09:B688: D4 07        	pei	<R1+2
  2104 09:B68A: D4 05        	pei	<R1
  2105 09:B68C: 18           	clc
  2106 09:B68D: A9 10 00     	lda	#$10
  Thu Dec  3 2020 22:25                                                Page 41


  2107 09:B690: 65 12        	adc	<L41+current_header_0
  2108 09:B692: 85 01        	sta	<R0
  2109 09:B694: A9 00 00     	lda	#$0
  2110 09:B697: 65 14        	adc	<L41+current_header_0+2
  2111 09:B699: 85 03        	sta	<R0+2
  2112 09:B69B: D4 03        	pei	<R0+2
  2113 09:B69D: D4 01        	pei	<R0
  2114 09:B69F: 22 xx xx xx  	jsl	~~memcpy
  2115                        ;  memcpy(&current_header->Length,&current_file->d
                    ata[data_offset+0x08],sizeof(DWORD));
  2116                        	.line	226
  2117 09:B6A3: F4 04 00     	pea	#<$4
  2118 09:B6A6: 18           	clc
  2119 09:B6A7: A9 08 00     	lda	#$8
  2120 09:B6AA: 65 10        	adc	<L41+data_offset_0
  2121 09:B6AC: 85 01        	sta	<R0
  2122 09:B6AE: A0 00 00     	ldy	#$0
  2123 09:B6B1: A5 01        	lda	<R0
  2124 09:B6B3: 10 01        	bpl	L49
  2125 09:B6B5: 88           	dey
  2126                        L49:
  2127 09:B6B6: 85 01        	sta	<R0
  2128 09:B6B8: 84 03        	sty	<R0+2
  2129 09:B6BA: 18           	clc
  2130 09:B6BB: A0 0A 00     	ldy	#$a
  2131 09:B6BE: B7 0C        	lda	[<L41+current_file_0],Y
  2132 09:B6C0: 65 01        	adc	<R0
  2133 09:B6C2: 85 05        	sta	<R1
  2134 09:B6C4: A0 0C 00     	ldy	#$c
  2135 09:B6C7: B7 0C        	lda	[<L41+current_file_0],Y
  2136 09:B6C9: 65 03        	adc	<R0+2
  2137 09:B6CB: 85 07        	sta	<R1+2
  2138 09:B6CD: D4 07        	pei	<R1+2
  2139 09:B6CF: D4 05        	pei	<R1
  2140 09:B6D1: 18           	clc
  2141 09:B6D2: A9 14 00     	lda	#$14
  2142 09:B6D5: 65 12        	adc	<L41+current_header_0
  2143 09:B6D7: 85 01        	sta	<R0
  2144 09:B6D9: A9 00 00     	lda	#$0
  2145 09:B6DC: 65 14        	adc	<L41+current_header_0+2
  2146 09:B6DE: 85 03        	sta	<R0+2
  2147 09:B6E0: D4 03        	pei	<R0+2
  2148 09:B6E2: D4 01        	pei	<R0
  2149 09:B6E4: 22 xx xx xx  	jsl	~~memcpy
  2150                        ;  memcpy(&current_header->Type,&current_file->dat
                    a[data_offset+0x0C],sizeof(BYTE));
  2151                        	.line	227
  2152 09:B6E8: F4 01 00     	pea	#<$1
  2153 09:B6EB: 18           	clc
  2154 09:B6EC: A9 0C 00     	lda	#$c
  2155 09:B6EF: 65 10        	adc	<L41+data_offset_0
  2156 09:B6F1: 85 01        	sta	<R0
  2157 09:B6F3: A0 00 00     	ldy	#$0
  2158 09:B6F6: A5 01        	lda	<R0
  2159 09:B6F8: 10 01        	bpl	L50
  2160 09:B6FA: 88           	dey
  2161                        L50:
  2162 09:B6FB: 85 01        	sta	<R0
  Thu Dec  3 2020 22:25                                                Page 42


  2163 09:B6FD: 84 03        	sty	<R0+2
  2164 09:B6FF: 18           	clc
  2165 09:B700: A0 0A 00     	ldy	#$a
  2166 09:B703: B7 0C        	lda	[<L41+current_file_0],Y
  2167 09:B705: 65 01        	adc	<R0
  2168 09:B707: 85 05        	sta	<R1
  2169 09:B709: A0 0C 00     	ldy	#$c
  2170 09:B70C: B7 0C        	lda	[<L41+current_file_0],Y
  2171 09:B70E: 65 03        	adc	<R0+2
  2172 09:B710: 85 07        	sta	<R1+2
  2173 09:B712: D4 07        	pei	<R1+2
  2174 09:B714: D4 05        	pei	<R1
  2175 09:B716: 18           	clc
  2176 09:B717: A9 18 00     	lda	#$18
  2177 09:B71A: 65 12        	adc	<L41+current_header_0
  2178 09:B71C: 85 01        	sta	<R0
  2179 09:B71E: A9 00 00     	lda	#$0
  2180 09:B721: 65 14        	adc	<L41+current_header_0+2
  2181 09:B723: 85 03        	sta	<R0+2
  2182 09:B725: D4 03        	pei	<R0+2
  2183 09:B727: D4 01        	pei	<R0
  2184 09:B729: 22 xx xx xx  	jsl	~~memcpy
  2185                        ;  memcpy(&current_header->LabLen,&current_file->d
                    ata[data_offset+0x0D],sizeof(BYTE));
  2186                        	.line	228
  2187 09:B72D: F4 01 00     	pea	#<$1
  2188 09:B730: 18           	clc
  2189 09:B731: A9 0D 00     	lda	#$d
  2190 09:B734: 65 10        	adc	<L41+data_offset_0
  2191 09:B736: 85 01        	sta	<R0
  2192 09:B738: A0 00 00     	ldy	#$0
  2193 09:B73B: A5 01        	lda	<R0
  2194 09:B73D: 10 01        	bpl	L51
  2195 09:B73F: 88           	dey
  2196                        L51:
  2197 09:B740: 85 01        	sta	<R0
  2198 09:B742: 84 03        	sty	<R0+2
  2199 09:B744: 18           	clc
  2200 09:B745: A0 0A 00     	ldy	#$a
  2201 09:B748: B7 0C        	lda	[<L41+current_file_0],Y
  2202 09:B74A: 65 01        	adc	<R0
  2203 09:B74C: 85 05        	sta	<R1
  2204 09:B74E: A0 0C 00     	ldy	#$c
  2205 09:B751: B7 0C        	lda	[<L41+current_file_0],Y
  2206 09:B753: 65 03        	adc	<R0+2
  2207 09:B755: 85 07        	sta	<R1+2
  2208 09:B757: D4 07        	pei	<R1+2
  2209 09:B759: D4 05        	pei	<R1
  2210 09:B75B: 18           	clc
  2211 09:B75C: A9 1A 00     	lda	#$1a
  2212 09:B75F: 65 12        	adc	<L41+current_header_0
  2213 09:B761: 85 01        	sta	<R0
  2214 09:B763: A9 00 00     	lda	#$0
  2215 09:B766: 65 14        	adc	<L41+current_header_0+2
  2216 09:B768: 85 03        	sta	<R0+2
  2217 09:B76A: D4 03        	pei	<R0+2
  2218 09:B76C: D4 01        	pei	<R0
  2219 09:B76E: 22 xx xx xx  	jsl	~~memcpy
  Thu Dec  3 2020 22:25                                                Page 43


  2220                        ;  memcpy(&current_header->NumLen,&current_file->d
                    ata[data_offset+0x0E],sizeof(BYTE));
  2221                        	.line	229
  2222 09:B772: F4 01 00     	pea	#<$1
  2223 09:B775: 18           	clc
  2224 09:B776: A9 0E 00     	lda	#$e
  2225 09:B779: 65 10        	adc	<L41+data_offset_0
  2226 09:B77B: 85 01        	sta	<R0
  2227 09:B77D: A0 00 00     	ldy	#$0
  2228 09:B780: A5 01        	lda	<R0
  2229 09:B782: 10 01        	bpl	L52
  2230 09:B784: 88           	dey
  2231                        L52:
  2232 09:B785: 85 01        	sta	<R0
  2233 09:B787: 84 03        	sty	<R0+2
  2234 09:B789: 18           	clc
  2235 09:B78A: A0 0A 00     	ldy	#$a
  2236 09:B78D: B7 0C        	lda	[<L41+current_file_0],Y
  2237 09:B78F: 65 01        	adc	<R0
  2238 09:B791: 85 05        	sta	<R1
  2239 09:B793: A0 0C 00     	ldy	#$c
  2240 09:B796: B7 0C        	lda	[<L41+current_file_0],Y
  2241 09:B798: 65 03        	adc	<R0+2
  2242 09:B79A: 85 07        	sta	<R1+2
  2243 09:B79C: D4 07        	pei	<R1+2
  2244 09:B79E: D4 05        	pei	<R1
  2245 09:B7A0: 18           	clc
  2246 09:B7A1: A9 1B 00     	lda	#$1b
  2247 09:B7A4: 65 12        	adc	<L41+current_header_0
  2248 09:B7A6: 85 01        	sta	<R0
  2249 09:B7A8: A9 00 00     	lda	#$0
  2250 09:B7AB: 65 14        	adc	<L41+current_header_0+2
  2251 09:B7AD: 85 03        	sta	<R0+2
  2252 09:B7AF: D4 03        	pei	<R0+2
  2253 09:B7B1: D4 01        	pei	<R0
  2254 09:B7B3: 22 xx xx xx  	jsl	~~memcpy
  2255                        ;  /* Version Byte */
  2256                        ;  memcpy(&current_header->BankSize,&current_file-
                    >data[data_offset+0x10],sizeof(DWORD));
  2257                        	.line	231
  2258 09:B7B7: F4 04 00     	pea	#<$4
  2259 09:B7BA: 18           	clc
  2260 09:B7BB: A9 10 00     	lda	#$10
  2261 09:B7BE: 65 10        	adc	<L41+data_offset_0
  2262 09:B7C0: 85 01        	sta	<R0
  2263 09:B7C2: A0 00 00     	ldy	#$0
  2264 09:B7C5: A5 01        	lda	<R0
  2265 09:B7C7: 10 01        	bpl	L53
  2266 09:B7C9: 88           	dey
  2267                        L53:
  2268 09:B7CA: 85 01        	sta	<R0
  2269 09:B7CC: 84 03        	sty	<R0+2
  2270 09:B7CE: 18           	clc
  2271 09:B7CF: A0 0A 00     	ldy	#$a
  2272 09:B7D2: B7 0C        	lda	[<L41+current_file_0],Y
  2273 09:B7D4: 65 01        	adc	<R0
  2274 09:B7D6: 85 05        	sta	<R1
  2275 09:B7D8: A0 0C 00     	ldy	#$c
  Thu Dec  3 2020 22:25                                                Page 44


  2276 09:B7DB: B7 0C        	lda	[<L41+current_file_0],Y
  2277 09:B7DD: 65 03        	adc	<R0+2
  2278 09:B7DF: 85 07        	sta	<R1+2
  2279 09:B7E1: D4 07        	pei	<R1+2
  2280 09:B7E3: D4 05        	pei	<R1
  2281 09:B7E5: 18           	clc
  2282 09:B7E6: A9 1D 00     	lda	#$1d
  2283 09:B7E9: 65 12        	adc	<L41+current_header_0
  2284 09:B7EB: 85 01        	sta	<R0
  2285 09:B7ED: A9 00 00     	lda	#$0
  2286 09:B7F0: 65 14        	adc	<L41+current_header_0+2
  2287 09:B7F2: 85 03        	sta	<R0+2
  2288 09:B7F4: D4 03        	pei	<R0+2
  2289 09:B7F6: D4 01        	pei	<R0
  2290 09:B7F8: 22 xx xx xx  	jsl	~~memcpy
  2291                        ;  memcpy(&current_header->Org,&current_file->data
                    [data_offset+0x14],sizeof(DWORD));
  2292                        	.line	232
  2293 09:B7FC: F4 04 00     	pea	#<$4
  2294 09:B7FF: 18           	clc
  2295 09:B800: A9 14 00     	lda	#$14
  2296 09:B803: 65 10        	adc	<L41+data_offset_0
  2297 09:B805: 85 01        	sta	<R0
  2298 09:B807: A0 00 00     	ldy	#$0
  2299 09:B80A: A5 01        	lda	<R0
  2300 09:B80C: 10 01        	bpl	L54
  2301 09:B80E: 88           	dey
  2302                        L54:
  2303 09:B80F: 85 01        	sta	<R0
  2304 09:B811: 84 03        	sty	<R0+2
  2305 09:B813: 18           	clc
  2306 09:B814: A0 0A 00     	ldy	#$a
  2307 09:B817: B7 0C        	lda	[<L41+current_file_0],Y
  2308 09:B819: 65 01        	adc	<R0
  2309 09:B81B: 85 05        	sta	<R1
  2310 09:B81D: A0 0C 00     	ldy	#$c
  2311 09:B820: B7 0C        	lda	[<L41+current_file_0],Y
  2312 09:B822: 65 03        	adc	<R0+2
  2313 09:B824: 85 07        	sta	<R1+2
  2314 09:B826: D4 07        	pei	<R1+2
  2315 09:B828: D4 05        	pei	<R1
  2316 09:B82A: 18           	clc
  2317 09:B82B: A9 25 00     	lda	#$25
  2318 09:B82E: 65 12        	adc	<L41+current_header_0
  2319 09:B830: 85 01        	sta	<R0
  2320 09:B832: A9 00 00     	lda	#$0
  2321 09:B835: 65 14        	adc	<L41+current_header_0+2
  2322 09:B837: 85 03        	sta	<R0+2
  2323 09:B839: D4 03        	pei	<R0+2
  2324 09:B83B: D4 01        	pei	<R0
  2325 09:B83D: 22 xx xx xx  	jsl	~~memcpy
  2326                        ;  memcpy(&current_header->Align,&current_file->da
                    ta[data_offset+0x18],sizeof(DWORD));
  2327                        	.line	233
  2328 09:B841: F4 04 00     	pea	#<$4
  2329 09:B844: 18           	clc
  2330 09:B845: A9 18 00     	lda	#$18
  2331 09:B848: 65 10        	adc	<L41+data_offset_0
  Thu Dec  3 2020 22:25                                                Page 45


  2332 09:B84A: 85 01        	sta	<R0
  2333 09:B84C: A0 00 00     	ldy	#$0
  2334 09:B84F: A5 01        	lda	<R0
  2335 09:B851: 10 01        	bpl	L55
  2336 09:B853: 88           	dey
  2337                        L55:
  2338 09:B854: 85 01        	sta	<R0
  2339 09:B856: 84 03        	sty	<R0+2
  2340 09:B858: 18           	clc
  2341 09:B859: A0 0A 00     	ldy	#$a
  2342 09:B85C: B7 0C        	lda	[<L41+current_file_0],Y
  2343 09:B85E: 65 01        	adc	<R0
  2344 09:B860: 85 05        	sta	<R1
  2345 09:B862: A0 0C 00     	ldy	#$c
  2346 09:B865: B7 0C        	lda	[<L41+current_file_0],Y
  2347 09:B867: 65 03        	adc	<R0+2
  2348 09:B869: 85 07        	sta	<R1+2
  2349 09:B86B: D4 07        	pei	<R1+2
  2350 09:B86D: D4 05        	pei	<R1
  2351 09:B86F: 18           	clc
  2352 09:B870: A9 29 00     	lda	#$29
  2353 09:B873: 65 12        	adc	<L41+current_header_0
  2354 09:B875: 85 01        	sta	<R0
  2355 09:B877: A9 00 00     	lda	#$0
  2356 09:B87A: 65 14        	adc	<L41+current_header_0+2
  2357 09:B87C: 85 03        	sta	<R0+2
  2358 09:B87E: D4 03        	pei	<R0+2
  2359 09:B880: D4 01        	pei	<R0
  2360 09:B882: 22 xx xx xx  	jsl	~~memcpy
  2361                        ;  memcpy(&current_header->NumSEx,&current_file->d
                    ata[data_offset+0x1C],sizeof(BYTE));
  2362                        	.line	234
  2363 09:B886: F4 01 00     	pea	#<$1
  2364 09:B889: 18           	clc
  2365 09:B88A: A9 1C 00     	lda	#$1c
  2366 09:B88D: 65 10        	adc	<L41+data_offset_0
  2367 09:B88F: 85 01        	sta	<R0
  2368 09:B891: A0 00 00     	ldy	#$0
  2369 09:B894: A5 01        	lda	<R0
  2370 09:B896: 10 01        	bpl	L56
  2371 09:B898: 88           	dey
  2372                        L56:
  2373 09:B899: 85 01        	sta	<R0
  2374 09:B89B: 84 03        	sty	<R0+2
  2375 09:B89D: 18           	clc
  2376 09:B89E: A0 0A 00     	ldy	#$a
  2377 09:B8A1: B7 0C        	lda	[<L41+current_file_0],Y
  2378 09:B8A3: 65 01        	adc	<R0
  2379 09:B8A5: 85 05        	sta	<R1
  2380 09:B8A7: A0 0C 00     	ldy	#$c
  2381 09:B8AA: B7 0C        	lda	[<L41+current_file_0],Y
  2382 09:B8AC: 65 03        	adc	<R0+2
  2383 09:B8AE: 85 07        	sta	<R1+2
  2384 09:B8B0: D4 07        	pei	<R1+2
  2385 09:B8B2: D4 05        	pei	<R1
  2386 09:B8B4: 18           	clc
  2387 09:B8B5: A9 2D 00     	lda	#$2d
  2388 09:B8B8: 65 12        	adc	<L41+current_header_0
  Thu Dec  3 2020 22:25                                                Page 46


  2389 09:B8BA: 85 01        	sta	<R0
  2390 09:B8BC: A9 00 00     	lda	#$0
  2391 09:B8BF: 65 14        	adc	<L41+current_header_0+2
  2392 09:B8C1: 85 03        	sta	<R0+2
  2393 09:B8C3: D4 03        	pei	<R0+2
  2394 09:B8C5: D4 01        	pei	<R0
  2395 09:B8C7: 22 xx xx xx  	jsl	~~memcpy
  2396                        ;  memcpy(&current_header->undefine_1,&current_fil
                    e->data[data_offset+0x1D],sizeof(BYTE));
  2397                        	.line	235
  2398 09:B8CB: F4 01 00     	pea	#<$1
  2399 09:B8CE: 18           	clc
  2400 09:B8CF: A9 1D 00     	lda	#$1d
  2401 09:B8D2: 65 10        	adc	<L41+data_offset_0
  2402 09:B8D4: 85 01        	sta	<R0
  2403 09:B8D6: A0 00 00     	ldy	#$0
  2404 09:B8D9: A5 01        	lda	<R0
  2405 09:B8DB: 10 01        	bpl	L57
  2406 09:B8DD: 88           	dey
  2407                        L57:
  2408 09:B8DE: 85 01        	sta	<R0
  2409 09:B8E0: 84 03        	sty	<R0+2
  2410 09:B8E2: 18           	clc
  2411 09:B8E3: A0 0A 00     	ldy	#$a
  2412 09:B8E6: B7 0C        	lda	[<L41+current_file_0],Y
  2413 09:B8E8: 65 01        	adc	<R0
  2414 09:B8EA: 85 05        	sta	<R1
  2415 09:B8EC: A0 0C 00     	ldy	#$c
  2416 09:B8EF: B7 0C        	lda	[<L41+current_file_0],Y
  2417 09:B8F1: 65 03        	adc	<R0+2
  2418 09:B8F3: 85 07        	sta	<R1+2
  2419 09:B8F5: D4 07        	pei	<R1+2
  2420 09:B8F7: D4 05        	pei	<R1
  2421 09:B8F9: 18           	clc
  2422 09:B8FA: A9 19 00     	lda	#$19
  2423 09:B8FD: 65 12        	adc	<L41+current_header_0
  2424 09:B8FF: 85 01        	sta	<R0
  2425 09:B901: A9 00 00     	lda	#$0
  2426 09:B904: 65 14        	adc	<L41+current_header_0+2
  2427 09:B906: 85 03        	sta	<R0+2
  2428 09:B908: D4 03        	pei	<R0+2
  2429 09:B90A: D4 01        	pei	<R0
  2430 09:B90C: 22 xx xx xx  	jsl	~~memcpy
  2431                        ;  memcpy(&current_header->undefine_2,&current_fil
                    e->data[data_offset+0x1E],sizeof(BYTE));
  2432                        	.line	236
  2433 09:B910: F4 01 00     	pea	#<$1
  2434 09:B913: 18           	clc
  2435 09:B914: A9 1E 00     	lda	#$1e
  2436 09:B917: 65 10        	adc	<L41+data_offset_0
  2437 09:B919: 85 01        	sta	<R0
  2438 09:B91B: A0 00 00     	ldy	#$0
  2439 09:B91E: A5 01        	lda	<R0
  2440 09:B920: 10 01        	bpl	L58
  2441 09:B922: 88           	dey
  2442                        L58:
  2443 09:B923: 85 01        	sta	<R0
  2444 09:B925: 84 03        	sty	<R0+2
  Thu Dec  3 2020 22:25                                                Page 47


  2445 09:B927: 18           	clc
  2446 09:B928: A0 0A 00     	ldy	#$a
  2447 09:B92B: B7 0C        	lda	[<L41+current_file_0],Y
  2448 09:B92D: 65 01        	adc	<R0
  2449 09:B92F: 85 05        	sta	<R1
  2450 09:B931: A0 0C 00     	ldy	#$c
  2451 09:B934: B7 0C        	lda	[<L41+current_file_0],Y
  2452 09:B936: 65 03        	adc	<R0+2
  2453 09:B938: 85 07        	sta	<R1+2
  2454 09:B93A: D4 07        	pei	<R1+2
  2455 09:B93C: D4 05        	pei	<R1
  2456 09:B93E: 18           	clc
  2457 09:B93F: A9 23 00     	lda	#$23
  2458 09:B942: 65 12        	adc	<L41+current_header_0
  2459 09:B944: 85 01        	sta	<R0
  2460 09:B946: A9 00 00     	lda	#$0
  2461 09:B949: 65 14        	adc	<L41+current_header_0+2
  2462 09:B94B: 85 03        	sta	<R0+2
  2463 09:B94D: D4 03        	pei	<R0+2
  2464 09:B94F: D4 01        	pei	<R0
  2465 09:B951: 22 xx xx xx  	jsl	~~memcpy
  2466                        ;  memcpy(&current_header->undefine_3,&current_fil
                    e->data[data_offset+0x1F],sizeof(BYTE));
  2467                        	.line	237
  2468 09:B955: F4 01 00     	pea	#<$1
  2469 09:B958: 18           	clc
  2470 09:B959: A9 1F 00     	lda	#$1f
  2471 09:B95C: 65 10        	adc	<L41+data_offset_0
  2472 09:B95E: 85 01        	sta	<R0
  2473 09:B960: A0 00 00     	ldy	#$0
  2474 09:B963: A5 01        	lda	<R0
  2475 09:B965: 10 01        	bpl	L59
  2476 09:B967: 88           	dey
  2477                        L59:
  2478 09:B968: 85 01        	sta	<R0
  2479 09:B96A: 84 03        	sty	<R0+2
  2480 09:B96C: 18           	clc
  2481 09:B96D: A0 0A 00     	ldy	#$a
  2482 09:B970: B7 0C        	lda	[<L41+current_file_0],Y
  2483 09:B972: 65 01        	adc	<R0
  2484 09:B974: 85 05        	sta	<R1
  2485 09:B976: A0 0C 00     	ldy	#$c
  2486 09:B979: B7 0C        	lda	[<L41+current_file_0],Y
  2487 09:B97B: 65 03        	adc	<R0+2
  2488 09:B97D: 85 07        	sta	<R1+2
  2489 09:B97F: D4 07        	pei	<R1+2
  2490 09:B981: D4 05        	pei	<R1
  2491 09:B983: 18           	clc
  2492 09:B984: A9 24 00     	lda	#$24
  2493 09:B987: 65 12        	adc	<L41+current_header_0
  2494 09:B989: 85 01        	sta	<R0
  2495 09:B98B: A9 00 00     	lda	#$0
  2496 09:B98E: 65 14        	adc	<L41+current_header_0+2
  2497 09:B990: 85 03        	sta	<R0+2
  2498 09:B992: D4 03        	pei	<R0+2
  2499 09:B994: D4 01        	pei	<R0
  2500 09:B996: 22 xx xx xx  	jsl	~~memcpy
  2501                        ;  memcpy(&current_header->undefine_4,&current_fil
  Thu Dec  3 2020 22:25                                                Page 48


                    e->data[data_offset+0x20],sizeof(BYTE));
  2502                        	.line	238
  2503 09:B99A: F4 01 00     	pea	#<$1
  2504 09:B99D: 18           	clc
  2505 09:B99E: A9 20 00     	lda	#$20
  2506 09:B9A1: 65 10        	adc	<L41+data_offset_0
  2507 09:B9A3: 85 01        	sta	<R0
  2508 09:B9A5: A0 00 00     	ldy	#$0
  2509 09:B9A8: A5 01        	lda	<R0
  2510 09:B9AA: 10 01        	bpl	L60
  2511 09:B9AC: 88           	dey
  2512                        L60:
  2513 09:B9AD: 85 01        	sta	<R0
  2514 09:B9AF: 84 03        	sty	<R0+2
  2515 09:B9B1: 18           	clc
  2516 09:B9B2: A0 0A 00     	ldy	#$a
  2517 09:B9B5: B7 0C        	lda	[<L41+current_file_0],Y
  2518 09:B9B7: 65 01        	adc	<R0
  2519 09:B9B9: 85 05        	sta	<R1
  2520 09:B9BB: A0 0C 00     	ldy	#$c
  2521 09:B9BE: B7 0C        	lda	[<L41+current_file_0],Y
  2522 09:B9C0: 65 03        	adc	<R0+2
  2523 09:B9C2: 85 07        	sta	<R1+2
  2524 09:B9C4: D4 07        	pei	<R1+2
  2525 09:B9C6: D4 05        	pei	<R1
  2526 09:B9C8: 18           	clc
  2527 09:B9C9: A9 2F 00     	lda	#$2f
  2528 09:B9CC: 65 12        	adc	<L41+current_header_0
  2529 09:B9CE: 85 01        	sta	<R0
  2530 09:B9D0: A9 00 00     	lda	#$0
  2531 09:B9D3: 65 14        	adc	<L41+current_header_0+2
  2532 09:B9D5: 85 03        	sta	<R0+2
  2533 09:B9D7: D4 03        	pei	<R0+2
  2534 09:B9D9: D4 01        	pei	<R0
  2535 09:B9DB: 22 xx xx xx  	jsl	~~memcpy
  2536                        ;  memcpy(&current_header->undefine_5,&current_fil
                    e->data[data_offset+0x21],sizeof(BYTE));
  2537                        	.line	239
  2538 09:B9DF: F4 01 00     	pea	#<$1
  2539 09:B9E2: 18           	clc
  2540 09:B9E3: A9 21 00     	lda	#$21
  2541 09:B9E6: 65 10        	adc	<L41+data_offset_0
  2542 09:B9E8: 85 01        	sta	<R0
  2543 09:B9EA: A0 00 00     	ldy	#$0
  2544 09:B9ED: A5 01        	lda	<R0
  2545 09:B9EF: 10 01        	bpl	L61
  2546 09:B9F1: 88           	dey
  2547                        L61:
  2548 09:B9F2: 85 01        	sta	<R0
  2549 09:B9F4: 84 03        	sty	<R0+2
  2550 09:B9F6: 18           	clc
  2551 09:B9F7: A0 0A 00     	ldy	#$a
  2552 09:B9FA: B7 0C        	lda	[<L41+current_file_0],Y
  2553 09:B9FC: 65 01        	adc	<R0
  2554 09:B9FE: 85 05        	sta	<R1
  2555 09:BA00: A0 0C 00     	ldy	#$c
  2556 09:BA03: B7 0C        	lda	[<L41+current_file_0],Y
  2557 09:BA05: 65 03        	adc	<R0+2
  Thu Dec  3 2020 22:25                                                Page 49


  2558 09:BA07: 85 07        	sta	<R1+2
  2559 09:BA09: D4 07        	pei	<R1+2
  2560 09:BA0B: D4 05        	pei	<R1
  2561 09:BA0D: 18           	clc
  2562 09:BA0E: A9 3C 0A     	lda	#$a3c
  2563 09:BA11: 65 12        	adc	<L41+current_header_0
  2564 09:BA13: 85 01        	sta	<R0
  2565 09:BA15: A9 00 00     	lda	#$0
  2566 09:BA18: 65 14        	adc	<L41+current_header_0+2
  2567 09:BA1A: 85 03        	sta	<R0+2
  2568 09:BA1C: D4 03        	pei	<R0+2
  2569 09:BA1E: D4 01        	pei	<R0
  2570 09:BA20: 22 xx xx xx  	jsl	~~memcpy
  2571                        ;  memcpy(&current_header->undefine_6,&current_fil
                    e->data[data_offset+0x22],sizeof(BYTE));
  2572                        	.line	240
  2573 09:BA24: F4 01 00     	pea	#<$1
  2574 09:BA27: 18           	clc
  2575 09:BA28: A9 22 00     	lda	#$22
  2576 09:BA2B: 65 10        	adc	<L41+data_offset_0
  2577 09:BA2D: 85 01        	sta	<R0
  2578 09:BA2F: A0 00 00     	ldy	#$0
  2579 09:BA32: A5 01        	lda	<R0
  2580 09:BA34: 10 01        	bpl	L62
  2581 09:BA36: 88           	dey
  2582                        L62:
  2583 09:BA37: 85 01        	sta	<R0
  2584 09:BA39: 84 03        	sty	<R0+2
  2585 09:BA3B: 18           	clc
  2586 09:BA3C: A0 0A 00     	ldy	#$a
  2587 09:BA3F: B7 0C        	lda	[<L41+current_file_0],Y
  2588 09:BA41: 65 01        	adc	<R0
  2589 09:BA43: 85 05        	sta	<R1
  2590 09:BA45: A0 0C 00     	ldy	#$c
  2591 09:BA48: B7 0C        	lda	[<L41+current_file_0],Y
  2592 09:BA4A: 65 03        	adc	<R0+2
  2593 09:BA4C: 85 07        	sta	<R1+2
  2594 09:BA4E: D4 07        	pei	<R1+2
  2595 09:BA50: D4 05        	pei	<R1
  2596 09:BA52: 18           	clc
  2597 09:BA53: A9 3D 0A     	lda	#$a3d
  2598 09:BA56: 65 12        	adc	<L41+current_header_0
  2599 09:BA58: 85 01        	sta	<R0
  2600 09:BA5A: A9 00 00     	lda	#$0
  2601 09:BA5D: 65 14        	adc	<L41+current_header_0+2
  2602 09:BA5F: 85 03        	sta	<R0+2
  2603 09:BA61: D4 03        	pei	<R0+2
  2604 09:BA63: D4 01        	pei	<R0
  2605 09:BA65: 22 xx xx xx  	jsl	~~memcpy
  2606                        ;  memcpy(&current_header->undefine_7,&current_fil
                    e->data[data_offset+0x23],sizeof(BYTE));
  2607                        	.line	241
  2608 09:BA69: F4 01 00     	pea	#<$1
  2609 09:BA6C: 18           	clc
  2610 09:BA6D: A9 23 00     	lda	#$23
  2611 09:BA70: 65 10        	adc	<L41+data_offset_0
  2612 09:BA72: 85 01        	sta	<R0
  2613 09:BA74: A0 00 00     	ldy	#$0
  Thu Dec  3 2020 22:25                                                Page 50


  2614 09:BA77: A5 01        	lda	<R0
  2615 09:BA79: 10 01        	bpl	L63
  2616 09:BA7B: 88           	dey
  2617                        L63:
  2618 09:BA7C: 85 01        	sta	<R0
  2619 09:BA7E: 84 03        	sty	<R0+2
  2620 09:BA80: 18           	clc
  2621 09:BA81: A0 0A 00     	ldy	#$a
  2622 09:BA84: B7 0C        	lda	[<L41+current_file_0],Y
  2623 09:BA86: 65 01        	adc	<R0
  2624 09:BA88: 85 05        	sta	<R1
  2625 09:BA8A: A0 0C 00     	ldy	#$c
  2626 09:BA8D: B7 0C        	lda	[<L41+current_file_0],Y
  2627 09:BA8F: 65 03        	adc	<R0+2
  2628 09:BA91: 85 07        	sta	<R1+2
  2629 09:BA93: D4 07        	pei	<R1+2
  2630 09:BA95: D4 05        	pei	<R1
  2631 09:BA97: 18           	clc
  2632 09:BA98: A9 3E 0A     	lda	#$a3e
  2633 09:BA9B: 65 12        	adc	<L41+current_header_0
  2634 09:BA9D: 85 01        	sta	<R0
  2635 09:BA9F: A9 00 00     	lda	#$0
  2636 09:BAA2: 65 14        	adc	<L41+current_header_0+2
  2637 09:BAA4: 85 03        	sta	<R0+2
  2638 09:BAA6: D4 03        	pei	<R0+2
  2639 09:BAA8: D4 01        	pei	<R0
  2640 09:BAAA: 22 xx xx xx  	jsl	~~memcpy
  2641                        ;
  2642                        ;  /********************************************/
  2643                        ;  /**  On va valider les données récupérées  **/
  2644                        ;  /********************************************/
  2645                        ;  /* Taille du Segment */
  2646                        ;  if((int)(data_offset + current_header->ByteCnt)
                     > (int) current_file->data_length)
  2647                        	.line	247
  2648                        ;    {
  2649 09:BAAE: A0 00 00     	ldy	#$0
  2650 09:BAB1: A5 10        	lda	<L41+data_offset_0
  2651 09:BAB3: 10 01        	bpl	L64
  2652 09:BAB5: 88           	dey
  2653                        L64:
  2654 09:BAB6: 85 01        	sta	<R0
  2655 09:BAB8: 84 03        	sty	<R0+2
  2656 09:BABA: 18           	clc
  2657 09:BABB: A5 01        	lda	<R0
  2658 09:BABD: A0 0C 00     	ldy	#$c
  2659 09:BAC0: 77 12        	adc	[<L41+current_header_0],Y
  2660 09:BAC2: 85 05        	sta	<R1
  2661 09:BAC4: A5 03        	lda	<R0+2
  2662 09:BAC6: A0 0E 00     	ldy	#$e
  2663 09:BAC9: 77 12        	adc	[<L41+current_header_0],Y
  2664 09:BACB: 85 07        	sta	<R1+2
  2665 09:BACD: 38           	sec
  2666 09:BACE: A0 08 00     	ldy	#$8
  2667 09:BAD1: B7 0C        	lda	[<L41+current_file_0],Y
  2668 09:BAD3: E5 05        	sbc	<R1
  2669 09:BAD5: 70 03        	bvs	L65
  2670 09:BAD7: 49 00 80     	eor	#$8000
  Thu Dec  3 2020 22:25                                                Page 51


  2671                        L65:
  2672 09:BADA: 10 03        	bpl	L66
  2673 09:BADC: 82 06 00     	brl	L10026
  2674                        L66:
  2675                        	.line	248
  2676                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'BlockCnt' value (the segment size can't be larger than 
                    the OMF file).\n",current_file->nb_segment+1);
  2677                        ;      return(1);
  2678                        	.line	250
  2679 09:BADF: A9 01 00     	lda	#$1
  2680 09:BAE2: 82 05 FB     	brl	L46
  2681                        ;    }
  2682                        	.line	251
  2683                        ;  if(current_header->ByteCnt < SEGMENT_HEADER_SIZ
                    E_V1)
  2684                        L10026:
  2685                        	.line	252
  2686                        ;    {
  2687 09:BAE5: A0 0C 00     	ldy	#$c
  2688 09:BAE8: B7 12        	lda	[<L41+current_header_0],Y
  2689 09:BAEA: C9 40 00     	cmp	#<$40
  2690 09:BAED: A0 0E 00     	ldy	#$e
  2691 09:BAF0: B7 12        	lda	[<L41+current_header_0],Y
  2692 09:BAF2: E9 00 00     	sbc	#^$40
  2693 09:BAF5: 90 03        	bcc	L67
  2694 09:BAF7: 82 06 00     	brl	L10027
  2695                        L67:
  2696                        	.line	253
  2697                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'BlockCnt' value (the segment size can't be smaller than
                     the Sgement Header size).\n",current_file->nb_segment+1);
  2698                        ;      return(1);
  2699                        	.line	255
  2700 09:BAFA: A9 01 00     	lda	#$1
  2701 09:BAFD: 82 EA FA     	brl	L46
  2702                        ;    }
  2703                        	.line	256
  2704                        ;
  2705                        ;  /* Nombre de 0x00 à ajouter à la fin */
  2706                        ;  if(current_header->ResSpc >= 0x010000)
  2707                        L10027:
  2708                        	.line	259
  2709                        ;    {
  2710 09:BB00: A0 10 00     	ldy	#$10
  2711 09:BB03: B7 12        	lda	[<L41+current_header_0],Y
  2712 09:BB05: C9 00 00     	cmp	#<$10000
  2713 09:BB08: A0 12 00     	ldy	#$12
  2714 09:BB0B: B7 12        	lda	[<L41+current_header_0],Y
  2715 09:BB0D: E9 01 00     	sbc	#^$10000
  2716 09:BB10: B0 03        	bcs	L68
  2717 09:BB12: 82 06 00     	brl	L10028
  2718                        L68:
  2719                        	.line	260
  2720                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'ResSpc' value (the size can't be larger than 64 KB).\n"
                    ,current_file->nb_segment+1);
  2721                        ;      return(1);
  Thu Dec  3 2020 22:25                                                Page 52


  2722                        	.line	262
  2723 09:BB15: A9 01 00     	lda	#$1
  2724 09:BB18: 82 CF FA     	brl	L46
  2725                        ;    }
  2726                        	.line	263
  2727                        ;
  2728                        ;  /* La taille d'un Segment en mémoire ne peut pa
                    s dépasser 64 KB */
  2729                        ;  if(current_header->Length >= 0x010000)
  2730                        L10028:
  2731                        	.line	266
  2732                        ;    //printf("  Segment #%d Header Warning : Weir
                    d 'Length' value (the segment size is usually < 64 KB).\n",c
                    urrent_file->nb_segment+1);
  2733                        ;
  2734                        ;  /* Type */
  2735                        ;  if((current_header->Type & 0x1F) != 0x00 && (cu
                    rrent_header->Type & 0x1F) != 0x01 && (current_header->Type 
                    & 0x1F) != 0x02 &&
  2736 09:BB1B: A0 14 00     	ldy	#$14
  2737 09:BB1E: B7 12        	lda	[<L41+current_header_0],Y
  2738 09:BB20: C9 00 00     	cmp	#<$10000
  2739 09:BB23: A0 16 00     	ldy	#$16
  2740 09:BB26: B7 12        	lda	[<L41+current_header_0],Y
  2741 09:BB28: E9 01 00     	sbc	#^$10000
  2742 09:BB2B: B0 03        	bcs	L69
  2743 09:BB2D: 82 A2 00     	brl	L10029
  2744                        L69:
  2745                        	.line	270
  2746                        ;     (current_header->Type & 0x1F) != 0x04 && (cu
                    rrent_header->Type & 0x1F) != 0x08 && (current_header->Type 
                    & 0x1F) != 0x10 &&
  2747                        ;     (current_header->Type & 0x1F) != 0x11 && (cu
                    rrent_header->Type & 0x1F) != 0x12)
  2748                        ;    {
  2749 09:BB30: E2 20        	sep	#$20
  2750                        	longa	off
  2751 09:BB32: A0 18 00     	ldy	#$18
  2752 09:BB35: B7 12        	lda	[<L41+current_header_0],Y
  2753 09:BB37: 29 1F        	and	#<$1f
  2754 09:BB39: C2 20        	rep	#$20
  2755                        	longa	on
  2756 09:BB3B: D0 03        	bne	L70
  2757 09:BB3D: 82 92 00     	brl	L10030
  2758                        L70:
  2759 09:BB40: A0 18 00     	ldy	#$18
  2760 09:BB43: B7 12        	lda	[<L41+current_header_0],Y
  2761 09:BB45: 29 1F 00     	and	#<$1f
  2762 09:BB48: 85 01        	sta	<R0
  2763 09:BB4A: A5 01        	lda	<R0
  2764 09:BB4C: C9 01 00     	cmp	#<$1
  2765 09:BB4F: D0 03        	bne	L71
  2766 09:BB51: 82 7E 00     	brl	L10030
  2767                        L71:
  2768 09:BB54: A0 18 00     	ldy	#$18
  2769 09:BB57: B7 12        	lda	[<L41+current_header_0],Y
  2770 09:BB59: 29 1F 00     	and	#<$1f
  2771 09:BB5C: 85 01        	sta	<R0
  Thu Dec  3 2020 22:25                                                Page 53


  2772 09:BB5E: A5 01        	lda	<R0
  2773 09:BB60: C9 02 00     	cmp	#<$2
  2774 09:BB63: D0 03        	bne	L72
  2775 09:BB65: 82 6A 00     	brl	L10030
  2776                        L72:
  2777 09:BB68: A0 18 00     	ldy	#$18
  2778 09:BB6B: B7 12        	lda	[<L41+current_header_0],Y
  2779 09:BB6D: 29 1F 00     	and	#<$1f
  2780 09:BB70: 85 01        	sta	<R0
  2781 09:BB72: A5 01        	lda	<R0
  2782 09:BB74: C9 04 00     	cmp	#<$4
  2783 09:BB77: D0 03        	bne	L73
  2784 09:BB79: 82 56 00     	brl	L10030
  2785                        L73:
  2786 09:BB7C: A0 18 00     	ldy	#$18
  2787 09:BB7F: B7 12        	lda	[<L41+current_header_0],Y
  2788 09:BB81: 29 1F 00     	and	#<$1f
  2789 09:BB84: 85 01        	sta	<R0
  2790 09:BB86: A5 01        	lda	<R0
  2791 09:BB88: C9 08 00     	cmp	#<$8
  2792 09:BB8B: D0 03        	bne	L74
  2793 09:BB8D: 82 42 00     	brl	L10030
  2794                        L74:
  2795 09:BB90: A0 18 00     	ldy	#$18
  2796 09:BB93: B7 12        	lda	[<L41+current_header_0],Y
  2797 09:BB95: 29 1F 00     	and	#<$1f
  2798 09:BB98: 85 01        	sta	<R0
  2799 09:BB9A: A5 01        	lda	<R0
  2800 09:BB9C: C9 10 00     	cmp	#<$10
  2801 09:BB9F: D0 03        	bne	L75
  2802 09:BBA1: 82 2E 00     	brl	L10030
  2803                        L75:
  2804 09:BBA4: A0 18 00     	ldy	#$18
  2805 09:BBA7: B7 12        	lda	[<L41+current_header_0],Y
  2806 09:BBA9: 29 1F 00     	and	#<$1f
  2807 09:BBAC: 85 01        	sta	<R0
  2808 09:BBAE: A5 01        	lda	<R0
  2809 09:BBB0: C9 11 00     	cmp	#<$11
  2810 09:BBB3: D0 03        	bne	L76
  2811 09:BBB5: 82 1A 00     	brl	L10030
  2812                        L76:
  2813 09:BBB8: A0 18 00     	ldy	#$18
  2814 09:BBBB: B7 12        	lda	[<L41+current_header_0],Y
  2815 09:BBBD: 29 1F 00     	and	#<$1f
  2816 09:BBC0: 85 01        	sta	<R0
  2817 09:BBC2: A5 01        	lda	<R0
  2818 09:BBC4: C9 12 00     	cmp	#<$12
  2819 09:BBC7: D0 03        	bne	L77
  2820 09:BBC9: 82 06 00     	brl	L10030
  2821                        L77:
  2822                        	.line	273
  2823                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'Type' value (possible values are $0,$1,$2,$4,$8,$10,$11
                     or $12).\n",current_file->nb_segment+1);
  2824                        ;      return(1);
  2825                        	.line	275
  2826 09:BBCC: A9 01 00     	lda	#$1
  2827 09:BBCF: 82 18 FA     	brl	L46
  Thu Dec  3 2020 22:25                                                Page 54


  2828                        ;    }
  2829                        	.line	276
  2830                        ;
  2831                        ;  /* LabLen : 0 ou 10 */
  2832                        ;  if(current_header->LabLen != 0x00 && current_he
                    ader->LabLen != 0x0A)
  2833                        L10030:
  2834                        L10029:
  2835                        	.line	279
  2836                        ;    {
  2837 09:BBD2: A0 1A 00     	ldy	#$1a
  2838 09:BBD5: B7 12        	lda	[<L41+current_header_0],Y
  2839 09:BBD7: 29 FF 00     	and	#$ff
  2840 09:BBDA: D0 03        	bne	L78
  2841 09:BBDC: 82 16 00     	brl	L10031
  2842                        L78:
  2843 09:BBDF: E2 20        	sep	#$20
  2844                        	longa	off
  2845 09:BBE1: A0 1A 00     	ldy	#$1a
  2846 09:BBE4: B7 12        	lda	[<L41+current_header_0],Y
  2847 09:BBE6: C9 0A        	cmp	#<$a
  2848 09:BBE8: C2 20        	rep	#$20
  2849                        	longa	on
  2850 09:BBEA: D0 03        	bne	L79
  2851 09:BBEC: 82 06 00     	brl	L10031
  2852                        L79:
  2853                        	.line	280
  2854                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'LabLen' value (the value should be 0 or 10 for the Appl
                    e IIgs).\n",current_file->nb_segment+1);
  2855                        ;      return(1);
  2856                        	.line	282
  2857 09:BBEF: A9 01 00     	lda	#$1
  2858 09:BBF2: 82 F5 F9     	brl	L46
  2859                        ;    }
  2860                        	.line	283
  2861                        ;
  2862                        ;  /* Num Len : Tjs à 4 pour le IIgs */
  2863                        ;  if(current_header->NumLen != 0x04)
  2864                        L10031:
  2865                        	.line	286
  2866                        ;    {
  2867 09:BBF5: E2 20        	sep	#$20
  2868                        	longa	off
  2869 09:BBF7: A0 1B 00     	ldy	#$1b
  2870 09:BBFA: B7 12        	lda	[<L41+current_header_0],Y
  2871 09:BBFC: C9 04        	cmp	#<$4
  2872 09:BBFE: C2 20        	rep	#$20
  2873                        	longa	on
  2874 09:BC00: D0 03        	bne	L80
  2875 09:BC02: 82 06 00     	brl	L10032
  2876                        L80:
  2877                        	.line	287
  2878                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'NumLen' value (the value should be 4 for the Apple IIgs
                    ).\n",current_file->nb_segment+1);
  2879                        ;      return(1);
  2880                        	.line	289
  Thu Dec  3 2020 22:25                                                Page 55


  2881 09:BC05: A9 01 00     	lda	#$1
  2882 09:BC08: 82 DF F9     	brl	L46
  2883                        ;    }
  2884                        	.line	290
  2885                        ;
  2886                        ;  /* BankSize : <= 64 KB */
  2887                        ;  if(current_header->BankSize > 0x010000)
  2888                        L10032:
  2889                        	.line	293
  2890                        ;    {
  2891 09:BC0B: A9 00 00     	lda	#$0
  2892 09:BC0E: A0 1D 00     	ldy	#$1d
  2893 09:BC11: D7 12        	cmp	[<L41+current_header_0],Y
  2894 09:BC13: A9 01 00     	lda	#$1
  2895 09:BC16: A0 1F 00     	ldy	#$1f
  2896 09:BC19: F7 12        	sbc	[<L41+current_header_0],Y
  2897 09:BC1B: 90 03        	bcc	L81
  2898 09:BC1D: 82 06 00     	brl	L10033
  2899                        L81:
  2900                        	.line	294
  2901                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'BankSize' value (the value can't be larger than 64 KB).
                    \n",current_file->nb_segment+1);
  2902                        ;      return(1);
  2903                        	.line	296
  2904 09:BC20: A9 01 00     	lda	#$1
  2905 09:BC23: 82 C4 F9     	brl	L46
  2906                        ;    }
  2907                        	.line	297
  2908                        ;
  2909                        ;  /* Org : < 64 KB */
  2910                        ;  if(current_header->Org >= 0x010000)
  2911                        L10033:
  2912                        	.line	300
  2913                        ;    //printf("  Segment #%d Header Warning : Unus
                    ual 'Org' value (the value in usually < 64 KB).\n",current_f
                    ile->nb_segment+1);
  2914                        ;
  2915                        ;  /* Align : 0, 0x0100 ou 0x010000 */
  2916                        ;  if(current_header->Align != 0x00 && current_hea
                    der->Align != 0x0100 && current_header->Align != 0x010000)
  2917 09:BC26: A0 25 00     	ldy	#$25
  2918 09:BC29: B7 12        	lda	[<L41+current_header_0],Y
  2919 09:BC2B: C9 00 00     	cmp	#<$10000
  2920 09:BC2E: A0 27 00     	ldy	#$27
  2921 09:BC31: B7 12        	lda	[<L41+current_header_0],Y
  2922 09:BC33: E9 01 00     	sbc	#^$10000
  2923 09:BC36: B0 03        	bcs	L82
  2924 09:BC38: 82 43 00     	brl	L10034
  2925                        L82:
  2926                        	.line	304
  2927                        ;    {
  2928 09:BC3B: A0 29 00     	ldy	#$29
  2929 09:BC3E: B7 12        	lda	[<L41+current_header_0],Y
  2930 09:BC40: A0 2B 00     	ldy	#$2b
  2931 09:BC43: 17 12        	ora	[<L41+current_header_0],Y
  2932 09:BC45: D0 03        	bne	L83
  2933 09:BC47: 82 34 00     	brl	L10035
  Thu Dec  3 2020 22:25                                                Page 56


  2934                        L83:
  2935 09:BC4A: A0 29 00     	ldy	#$29
  2936 09:BC4D: B7 12        	lda	[<L41+current_header_0],Y
  2937 09:BC4F: C9 00 01     	cmp	#<$100
  2938 09:BC52: D0 08        	bne	L84
  2939 09:BC54: A0 2B 00     	ldy	#$2b
  2940 09:BC57: B7 12        	lda	[<L41+current_header_0],Y
  2941 09:BC59: C9 00 00     	cmp	#^$100
  2942                        L84:
  2943 09:BC5C: D0 03        	bne	L85
  2944 09:BC5E: 82 1D 00     	brl	L10035
  2945                        L85:
  2946 09:BC61: A0 29 00     	ldy	#$29
  2947 09:BC64: B7 12        	lda	[<L41+current_header_0],Y
  2948 09:BC66: C9 00 00     	cmp	#<$10000
  2949 09:BC69: D0 08        	bne	L86
  2950 09:BC6B: A0 2B 00     	ldy	#$2b
  2951 09:BC6E: B7 12        	lda	[<L41+current_header_0],Y
  2952 09:BC70: C9 01 00     	cmp	#^$10000
  2953                        L86:
  2954 09:BC73: D0 03        	bne	L87
  2955 09:BC75: 82 06 00     	brl	L10035
  2956                        L87:
  2957                        	.line	305
  2958                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'Align' value (the value should be 0, 256 or 64KB or for
                     the Apple IIgs).\n",current_file->nb_segment+1);
  2959                        ;      return(1);
  2960                        	.line	307
  2961 09:BC78: A9 01 00     	lda	#$1
  2962 09:BC7B: 82 6C F9     	brl	L46
  2963                        ;    }
  2964                        	.line	308
  2965                        ;
  2966                        ;  /* NumSEx : Tjs à 0 */
  2967                        ;  if(current_header->NumSEx != 0x00)
  2968                        L10035:
  2969                        L10034:
  2970                        	.line	311
  2971                        ;    {
  2972 09:BC7E: A0 2D 00     	ldy	#$2d
  2973 09:BC81: B7 12        	lda	[<L41+current_header_0],Y
  2974 09:BC83: 29 FF 00     	and	#$ff
  2975 09:BC86: D0 03        	bne	L88
  2976 09:BC88: 82 06 00     	brl	L10036
  2977                        L88:
  2978                        	.line	312
  2979                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'NumSEx' value (the value should be 0 for the Apple IIgs
                    ).\n",current_file->nb_segment+1);
  2980                        ;      return(1);
  2981                        	.line	314
  2982 09:BC8B: A9 01 00     	lda	#$1
  2983 09:BC8E: 82 59 F9     	brl	L46
  2984                        ;    }
  2985                        	.line	315
  2986                        ;
  2987                        ;  /* Noms */
  Thu Dec  3 2020 22:25                                                Page 57


  2988                        ;  memcpy(current_header->SegName,&current_file->d
                    ata[data_offset+0x24],current_header->LabLen);
  2989                        L10036:
  2990                        	.line	318
  2991 09:BC91: A0 1A 00     	ldy	#$1a
  2992 09:BC94: B7 12        	lda	[<L41+current_header_0],Y
  2993 09:BC96: 29 FF 00     	and	#$ff
  2994 09:BC99: 48           	pha
  2995 09:BC9A: 18           	clc
  2996 09:BC9B: A9 24 00     	lda	#$24
  2997 09:BC9E: 65 10        	adc	<L41+data_offset_0
  2998 09:BCA0: 85 01        	sta	<R0
  2999 09:BCA2: A0 00 00     	ldy	#$0
  3000 09:BCA5: A5 01        	lda	<R0
  3001 09:BCA7: 10 01        	bpl	L89
  3002 09:BCA9: 88           	dey
  3003                        L89:
  3004 09:BCAA: 85 01        	sta	<R0
  3005 09:BCAC: 84 03        	sty	<R0+2
  3006 09:BCAE: 18           	clc
  3007 09:BCAF: A0 0A 00     	ldy	#$a
  3008 09:BCB2: B7 0C        	lda	[<L41+current_file_0],Y
  3009 09:BCB4: 65 01        	adc	<R0
  3010 09:BCB6: 85 05        	sta	<R1
  3011 09:BCB8: A0 0C 00     	ldy	#$c
  3012 09:BCBB: B7 0C        	lda	[<L41+current_file_0],Y
  3013 09:BCBD: 65 03        	adc	<R0+2
  3014 09:BCBF: 85 07        	sta	<R1+2
  3015 09:BCC1: D4 07        	pei	<R1+2
  3016 09:BCC3: D4 05        	pei	<R1
  3017 09:BCC5: 18           	clc
  3018 09:BCC6: A9 3C 09     	lda	#$93c
  3019 09:BCC9: 65 12        	adc	<L41+current_header_0
  3020 09:BCCB: 85 01        	sta	<R0
  3021 09:BCCD: A9 00 00     	lda	#$0
  3022 09:BCD0: 65 14        	adc	<L41+current_header_0+2
  3023 09:BCD2: 85 03        	sta	<R0+2
  3024 09:BCD4: D4 03        	pei	<R0+2
  3025 09:BCD6: D4 01        	pei	<R0
  3026 09:BCD8: 22 xx xx xx  	jsl	~~memcpy
  3027                        ;
  3028                        ;  /* OK */
  3029                        ;  return(0);
  3030                        	.line	321
  3031 09:BCDC: A9 00 00     	lda	#$0
  3032 09:BCDF: 82 08 F9     	brl	L46
  3033                        ;}
  3034                        	.line	322
  3035                        	.endblock	322
  3036             00000008   L41	equ	8
  3037             00000009   L42	equ	9
  3038 09:BCE2:              	ends
  3039                        	efunc
  3040                        	.endfunc	322,9,8
  3041                        	.line	322
  3042                        ;
  3043                        ;
  3044                        ;/************************************************
  Thu Dec  3 2020 22:25                                                Page 58


                    ************/
  3045                        ;/*  DecodeSegmentHeaderV1() :  Décode le Header d
                    u Segment. */
  3046                        ;/************************************************
                    ************/
  3047                        ;static int DecodeSegmentHeaderV1(struct omf_file 
                    *current_file, int data_offset, struct omf_segment_header *c
                    urrent_header)
  3048                        ;{
  3049                        	.line	328
  3050                        	.line	329
  3051                        	LOADER
  3052                        	func
  3053                        	.function	329
  3054                        ~~DecodeSegmentHeaderV1:
  3055                        	longa	on
  3056                        	longi	on
  3057 09:BCE2: 3B           	tsc
  3058 09:BCE3: 38           	sec
  3059 09:BCE4: E9 0A 00     	sbc	#L90
  3060 09:BCE7: 1B           	tcs
  3061 09:BCE8: 0B           	phd
  3062 09:BCE9: 5B           	tcd
  3063             00000004   current_file_0	set	4
  3064             00000008   data_offset_0	set	8
  3065             0000000A   current_header_0	set	10
  3066                        	.block	329
  3067                        ;  int length;
  3068                        ;
  3069                        ;  /* Vérifie la taille */
  3070                        ;  if(data_offset + SEGMENT_HEADER_SIZE_V1 > curre
                    nt_file->data_length)
  3071             00000000   length_1	set	0
  3072                        	.sym	length,0,5,1,16
  3073                        	.sym	current_file,4,138,6,32,101
  3074                        	.sym	data_offset,8,5,6,16
  3075                        	.sym	current_header,10,138,6,32,99
  3076                        	.line	333
  3077                        ;    {
  3078 09:BCEA: 18           	clc
  3079 09:BCEB: A9 40 00     	lda	#$40
  3080 09:BCEE: 65 12        	adc	<L90+data_offset_0
  3081 09:BCF0: 85 01        	sta	<R0
  3082 09:BCF2: 38           	sec
  3083 09:BCF3: A0 08 00     	ldy	#$8
  3084 09:BCF6: B7 0E        	lda	[<L90+current_file_0],Y
  3085 09:BCF8: E5 01        	sbc	<R0
  3086 09:BCFA: 70 03        	bvs	L93
  3087 09:BCFC: 49 00 80     	eor	#$8000
  3088                        L93:
  3089 09:BCFF: 10 03        	bpl	L94
  3090 09:BD01: 82 15 00     	brl	L10037
  3091                        L94:
  3092                        	.line	334
  3093                        ;      //printf("  Error : Not enough data to enco
                    de a Segment Header (offset=%d, Segment #%d).\n",data_offset
                    ,current_file->nb_segment+1);
  3094                        ;      return(1);
  Thu Dec  3 2020 22:25                                                Page 59


  3095                        	.line	336
  3096 09:BD04: A9 01 00     	lda	#$1
  3097                        L95:
  3098 09:BD07: A8           	tay
  3099 09:BD08: A5 0C        	lda	<L90+2
  3100 09:BD0A: 85 16        	sta	<L90+2+10
  3101 09:BD0C: A5 0B        	lda	<L90+1
  3102 09:BD0E: 85 15        	sta	<L90+1+10
  3103 09:BD10: 2B           	pld
  3104 09:BD11: 3B           	tsc
  3105 09:BD12: 18           	clc
  3106 09:BD13: 69 14 00     	adc	#L90+10
  3107 09:BD16: 1B           	tcs
  3108 09:BD17: 98           	tya
  3109 09:BD18: 6B           	rtl
  3110                        ;    }
  3111                        	.line	337
  3112                        ;
  3113                        ;  /**********************************************
                    *********/
  3114                        ;  /**  On va décoder tous les éléments fixes du H
                    eader  **/
  3115                        ;  /**********************************************
                    *********/
  3116                        ;  memcpy(&current_header->BlockCnt,&current_file-
                    >data[data_offset+0x00],sizeof(DWORD));     /* Block Count *
                     512 = ByteCount */
  3117                        L10037:
  3118                        	.line	342
  3119 09:BD19: F4 04 00     	pea	#<$4
  3120 09:BD1C: A0 00 00     	ldy	#$0
  3121 09:BD1F: A5 12        	lda	<L90+data_offset_0
  3122 09:BD21: 10 01        	bpl	L96
  3123 09:BD23: 88           	dey
  3124                        L96:
  3125 09:BD24: 85 01        	sta	<R0
  3126 09:BD26: 84 03        	sty	<R0+2
  3127 09:BD28: 18           	clc
  3128 09:BD29: A0 0A 00     	ldy	#$a
  3129 09:BD2C: B7 0E        	lda	[<L90+current_file_0],Y
  3130 09:BD2E: 65 01        	adc	<R0
  3131 09:BD30: 85 05        	sta	<R1
  3132 09:BD32: A0 0C 00     	ldy	#$c
  3133 09:BD35: B7 0E        	lda	[<L90+current_file_0],Y
  3134 09:BD37: 65 03        	adc	<R0+2
  3135 09:BD39: 85 07        	sta	<R1+2
  3136 09:BD3B: D4 07        	pei	<R1+2
  3137 09:BD3D: D4 05        	pei	<R1
  3138 09:BD3F: 18           	clc
  3139 09:BD40: A9 08 00     	lda	#$8
  3140 09:BD43: 65 14        	adc	<L90+current_header_0
  3141 09:BD45: 85 01        	sta	<R0
  3142 09:BD47: A9 00 00     	lda	#$0
  3143 09:BD4A: 65 16        	adc	<L90+current_header_0+2
  3144 09:BD4C: 85 03        	sta	<R0+2
  3145 09:BD4E: D4 03        	pei	<R0+2
  3146 09:BD50: D4 01        	pei	<R0
  3147 09:BD52: 22 xx xx xx  	jsl	~~memcpy
  Thu Dec  3 2020 22:25                                                Page 60


  3148                        ;  current_header->ByteCnt = 512*current_header->B
                    lockCnt;
  3149                        	.line	343
  3150 09:BD56: A0 0A 00     	ldy	#$a
  3151 09:BD59: B7 14        	lda	[<L90+current_header_0],Y
  3152 09:BD5B: 48           	pha
  3153 09:BD5C: A0 08 00     	ldy	#$8
  3154 09:BD5F: B7 14        	lda	[<L90+current_header_0],Y
  3155 09:BD61: 48           	pha
  3156 09:BD62: A9 09 00     	lda	#$9
  3157                        	xref	~~~lasl
  3158 09:BD65: 22 xx xx xx  	jsl	~~~lasl
  3159 09:BD69: 85 01        	sta	<R0
  3160 09:BD6B: 86 03        	stx	<R0+2
  3161 09:BD6D: A5 01        	lda	<R0
  3162 09:BD6F: A0 0C 00     	ldy	#$c
  3163 09:BD72: 97 14        	sta	[<L90+current_header_0],Y
  3164 09:BD74: A5 03        	lda	<R0+2
  3165 09:BD76: A0 0E 00     	ldy	#$e
  3166 09:BD79: 97 14        	sta	[<L90+current_header_0],Y
  3167                        ;  memcpy(&current_header->ResSpc,&current_file->d
                    ata[data_offset+0x04],sizeof(DWORD));
  3168                        	.line	344
  3169 09:BD7B: F4 04 00     	pea	#<$4
  3170 09:BD7E: 18           	clc
  3171 09:BD7F: A9 04 00     	lda	#$4
  3172 09:BD82: 65 12        	adc	<L90+data_offset_0
  3173 09:BD84: 85 01        	sta	<R0
  3174 09:BD86: A0 00 00     	ldy	#$0
  3175 09:BD89: A5 01        	lda	<R0
  3176 09:BD8B: 10 01        	bpl	L97
  3177 09:BD8D: 88           	dey
  3178                        L97:
  3179 09:BD8E: 85 01        	sta	<R0
  3180 09:BD90: 84 03        	sty	<R0+2
  3181 09:BD92: 18           	clc
  3182 09:BD93: A0 0A 00     	ldy	#$a
  3183 09:BD96: B7 0E        	lda	[<L90+current_file_0],Y
  3184 09:BD98: 65 01        	adc	<R0
  3185 09:BD9A: 85 05        	sta	<R1
  3186 09:BD9C: A0 0C 00     	ldy	#$c
  3187 09:BD9F: B7 0E        	lda	[<L90+current_file_0],Y
  3188 09:BDA1: 65 03        	adc	<R0+2
  3189 09:BDA3: 85 07        	sta	<R1+2
  3190 09:BDA5: D4 07        	pei	<R1+2
  3191 09:BDA7: D4 05        	pei	<R1
  3192 09:BDA9: 18           	clc
  3193 09:BDAA: A9 10 00     	lda	#$10
  3194 09:BDAD: 65 14        	adc	<L90+current_header_0
  3195 09:BDAF: 85 01        	sta	<R0
  3196 09:BDB1: A9 00 00     	lda	#$0
  3197 09:BDB4: 65 16        	adc	<L90+current_header_0+2
  3198 09:BDB6: 85 03        	sta	<R0+2
  3199 09:BDB8: D4 03        	pei	<R0+2
  3200 09:BDBA: D4 01        	pei	<R0
  3201 09:BDBC: 22 xx xx xx  	jsl	~~memcpy
  3202                        ;  memcpy(&current_header->Length,&current_file->d
                    ata[data_offset+0x08],sizeof(DWORD));
  Thu Dec  3 2020 22:25                                                Page 61


  3203                        	.line	345
  3204 09:BDC0: F4 04 00     	pea	#<$4
  3205 09:BDC3: 18           	clc
  3206 09:BDC4: A9 08 00     	lda	#$8
  3207 09:BDC7: 65 12        	adc	<L90+data_offset_0
  3208 09:BDC9: 85 01        	sta	<R0
  3209 09:BDCB: A0 00 00     	ldy	#$0
  3210 09:BDCE: A5 01        	lda	<R0
  3211 09:BDD0: 10 01        	bpl	L98
  3212 09:BDD2: 88           	dey
  3213                        L98:
  3214 09:BDD3: 85 01        	sta	<R0
  3215 09:BDD5: 84 03        	sty	<R0+2
  3216 09:BDD7: 18           	clc
  3217 09:BDD8: A0 0A 00     	ldy	#$a
  3218 09:BDDB: B7 0E        	lda	[<L90+current_file_0],Y
  3219 09:BDDD: 65 01        	adc	<R0
  3220 09:BDDF: 85 05        	sta	<R1
  3221 09:BDE1: A0 0C 00     	ldy	#$c
  3222 09:BDE4: B7 0E        	lda	[<L90+current_file_0],Y
  3223 09:BDE6: 65 03        	adc	<R0+2
  3224 09:BDE8: 85 07        	sta	<R1+2
  3225 09:BDEA: D4 07        	pei	<R1+2
  3226 09:BDEC: D4 05        	pei	<R1
  3227 09:BDEE: 18           	clc
  3228 09:BDEF: A9 14 00     	lda	#$14
  3229 09:BDF2: 65 14        	adc	<L90+current_header_0
  3230 09:BDF4: 85 01        	sta	<R0
  3231 09:BDF6: A9 00 00     	lda	#$0
  3232 09:BDF9: 65 16        	adc	<L90+current_header_0+2
  3233 09:BDFB: 85 03        	sta	<R0+2
  3234 09:BDFD: D4 03        	pei	<R0+2
  3235 09:BDFF: D4 01        	pei	<R0
  3236 09:BE01: 22 xx xx xx  	jsl	~~memcpy
  3237                        ;  memcpy(&current_header->Type,&current_file->dat
                    a[data_offset+0x0C],sizeof(BYTE));
  3238                        	.line	346
  3239 09:BE05: F4 01 00     	pea	#<$1
  3240 09:BE08: 18           	clc
  3241 09:BE09: A9 0C 00     	lda	#$c
  3242 09:BE0C: 65 12        	adc	<L90+data_offset_0
  3243 09:BE0E: 85 01        	sta	<R0
  3244 09:BE10: A0 00 00     	ldy	#$0
  3245 09:BE13: A5 01        	lda	<R0
  3246 09:BE15: 10 01        	bpl	L99
  3247 09:BE17: 88           	dey
  3248                        L99:
  3249 09:BE18: 85 01        	sta	<R0
  3250 09:BE1A: 84 03        	sty	<R0+2
  3251 09:BE1C: 18           	clc
  3252 09:BE1D: A0 0A 00     	ldy	#$a
  3253 09:BE20: B7 0E        	lda	[<L90+current_file_0],Y
  3254 09:BE22: 65 01        	adc	<R0
  3255 09:BE24: 85 05        	sta	<R1
  3256 09:BE26: A0 0C 00     	ldy	#$c
  3257 09:BE29: B7 0E        	lda	[<L90+current_file_0],Y
  3258 09:BE2B: 65 03        	adc	<R0+2
  3259 09:BE2D: 85 07        	sta	<R1+2
  Thu Dec  3 2020 22:25                                                Page 62


  3260 09:BE2F: D4 07        	pei	<R1+2
  3261 09:BE31: D4 05        	pei	<R1
  3262 09:BE33: 18           	clc
  3263 09:BE34: A9 18 00     	lda	#$18
  3264 09:BE37: 65 14        	adc	<L90+current_header_0
  3265 09:BE39: 85 01        	sta	<R0
  3266 09:BE3B: A9 00 00     	lda	#$0
  3267 09:BE3E: 65 16        	adc	<L90+current_header_0+2
  3268 09:BE40: 85 03        	sta	<R0+2
  3269 09:BE42: D4 03        	pei	<R0+2
  3270 09:BE44: D4 01        	pei	<R0
  3271 09:BE46: 22 xx xx xx  	jsl	~~memcpy
  3272                        ;  memcpy(&current_header->LabLen,&current_file->d
                    ata[data_offset+0x0D],sizeof(BYTE));
  3273                        	.line	347
  3274 09:BE4A: F4 01 00     	pea	#<$1
  3275 09:BE4D: 18           	clc
  3276 09:BE4E: A9 0D 00     	lda	#$d
  3277 09:BE51: 65 12        	adc	<L90+data_offset_0
  3278 09:BE53: 85 01        	sta	<R0
  3279 09:BE55: A0 00 00     	ldy	#$0
  3280 09:BE58: A5 01        	lda	<R0
  3281 09:BE5A: 10 01        	bpl	L100
  3282 09:BE5C: 88           	dey
  3283                        L100:
  3284 09:BE5D: 85 01        	sta	<R0
  3285 09:BE5F: 84 03        	sty	<R0+2
  3286 09:BE61: 18           	clc
  3287 09:BE62: A0 0A 00     	ldy	#$a
  3288 09:BE65: B7 0E        	lda	[<L90+current_file_0],Y
  3289 09:BE67: 65 01        	adc	<R0
  3290 09:BE69: 85 05        	sta	<R1
  3291 09:BE6B: A0 0C 00     	ldy	#$c
  3292 09:BE6E: B7 0E        	lda	[<L90+current_file_0],Y
  3293 09:BE70: 65 03        	adc	<R0+2
  3294 09:BE72: 85 07        	sta	<R1+2
  3295 09:BE74: D4 07        	pei	<R1+2
  3296 09:BE76: D4 05        	pei	<R1
  3297 09:BE78: 18           	clc
  3298 09:BE79: A9 1A 00     	lda	#$1a
  3299 09:BE7C: 65 14        	adc	<L90+current_header_0
  3300 09:BE7E: 85 01        	sta	<R0
  3301 09:BE80: A9 00 00     	lda	#$0
  3302 09:BE83: 65 16        	adc	<L90+current_header_0+2
  3303 09:BE85: 85 03        	sta	<R0+2
  3304 09:BE87: D4 03        	pei	<R0+2
  3305 09:BE89: D4 01        	pei	<R0
  3306 09:BE8B: 22 xx xx xx  	jsl	~~memcpy
  3307                        ;  memcpy(&current_header->NumLen,&current_file->d
                    ata[data_offset+0x0E],sizeof(BYTE));
  3308                        	.line	348
  3309 09:BE8F: F4 01 00     	pea	#<$1
  3310 09:BE92: 18           	clc
  3311 09:BE93: A9 0E 00     	lda	#$e
  3312 09:BE96: 65 12        	adc	<L90+data_offset_0
  3313 09:BE98: 85 01        	sta	<R0
  3314 09:BE9A: A0 00 00     	ldy	#$0
  3315 09:BE9D: A5 01        	lda	<R0
  Thu Dec  3 2020 22:25                                                Page 63


  3316 09:BE9F: 10 01        	bpl	L101
  3317 09:BEA1: 88           	dey
  3318                        L101:
  3319 09:BEA2: 85 01        	sta	<R0
  3320 09:BEA4: 84 03        	sty	<R0+2
  3321 09:BEA6: 18           	clc
  3322 09:BEA7: A0 0A 00     	ldy	#$a
  3323 09:BEAA: B7 0E        	lda	[<L90+current_file_0],Y
  3324 09:BEAC: 65 01        	adc	<R0
  3325 09:BEAE: 85 05        	sta	<R1
  3326 09:BEB0: A0 0C 00     	ldy	#$c
  3327 09:BEB3: B7 0E        	lda	[<L90+current_file_0],Y
  3328 09:BEB5: 65 03        	adc	<R0+2
  3329 09:BEB7: 85 07        	sta	<R1+2
  3330 09:BEB9: D4 07        	pei	<R1+2
  3331 09:BEBB: D4 05        	pei	<R1
  3332 09:BEBD: 18           	clc
  3333 09:BEBE: A9 1B 00     	lda	#$1b
  3334 09:BEC1: 65 14        	adc	<L90+current_header_0
  3335 09:BEC3: 85 01        	sta	<R0
  3336 09:BEC5: A9 00 00     	lda	#$0
  3337 09:BEC8: 65 16        	adc	<L90+current_header_0+2
  3338 09:BECA: 85 03        	sta	<R0+2
  3339 09:BECC: D4 03        	pei	<R0+2
  3340 09:BECE: D4 01        	pei	<R0
  3341 09:BED0: 22 xx xx xx  	jsl	~~memcpy
  3342                        ;  /* Version Byte */
  3343                        ;  memcpy(&current_header->BankSize,&current_file-
                    >data[data_offset+0x10],sizeof(DWORD));
  3344                        	.line	350
  3345 09:BED4: F4 04 00     	pea	#<$4
  3346 09:BED7: 18           	clc
  3347 09:BED8: A9 10 00     	lda	#$10
  3348 09:BEDB: 65 12        	adc	<L90+data_offset_0
  3349 09:BEDD: 85 01        	sta	<R0
  3350 09:BEDF: A0 00 00     	ldy	#$0
  3351 09:BEE2: A5 01        	lda	<R0
  3352 09:BEE4: 10 01        	bpl	L102
  3353 09:BEE6: 88           	dey
  3354                        L102:
  3355 09:BEE7: 85 01        	sta	<R0
  3356 09:BEE9: 84 03        	sty	<R0+2
  3357 09:BEEB: 18           	clc
  3358 09:BEEC: A0 0A 00     	ldy	#$a
  3359 09:BEEF: B7 0E        	lda	[<L90+current_file_0],Y
  3360 09:BEF1: 65 01        	adc	<R0
  3361 09:BEF3: 85 05        	sta	<R1
  3362 09:BEF5: A0 0C 00     	ldy	#$c
  3363 09:BEF8: B7 0E        	lda	[<L90+current_file_0],Y
  3364 09:BEFA: 65 03        	adc	<R0+2
  3365 09:BEFC: 85 07        	sta	<R1+2
  3366 09:BEFE: D4 07        	pei	<R1+2
  3367 09:BF00: D4 05        	pei	<R1
  3368 09:BF02: 18           	clc
  3369 09:BF03: A9 1D 00     	lda	#$1d
  3370 09:BF06: 65 14        	adc	<L90+current_header_0
  3371 09:BF08: 85 01        	sta	<R0
  3372 09:BF0A: A9 00 00     	lda	#$0
  Thu Dec  3 2020 22:25                                                Page 64


  3373 09:BF0D: 65 16        	adc	<L90+current_header_0+2
  3374 09:BF0F: 85 03        	sta	<R0+2
  3375 09:BF11: D4 03        	pei	<R0+2
  3376 09:BF13: D4 01        	pei	<R0
  3377 09:BF15: 22 xx xx xx  	jsl	~~memcpy
  3378                        ;  memcpy(&current_header->undefine_1,&current_fil
                    e->data[data_offset+0x14],sizeof(BYTE));
  3379                        	.line	351
  3380 09:BF19: F4 01 00     	pea	#<$1
  3381 09:BF1C: 18           	clc
  3382 09:BF1D: A9 14 00     	lda	#$14
  3383 09:BF20: 65 12        	adc	<L90+data_offset_0
  3384 09:BF22: 85 01        	sta	<R0
  3385 09:BF24: A0 00 00     	ldy	#$0
  3386 09:BF27: A5 01        	lda	<R0
  3387 09:BF29: 10 01        	bpl	L103
  3388 09:BF2B: 88           	dey
  3389                        L103:
  3390 09:BF2C: 85 01        	sta	<R0
  3391 09:BF2E: 84 03        	sty	<R0+2
  3392 09:BF30: 18           	clc
  3393 09:BF31: A0 0A 00     	ldy	#$a
  3394 09:BF34: B7 0E        	lda	[<L90+current_file_0],Y
  3395 09:BF36: 65 01        	adc	<R0
  3396 09:BF38: 85 05        	sta	<R1
  3397 09:BF3A: A0 0C 00     	ldy	#$c
  3398 09:BF3D: B7 0E        	lda	[<L90+current_file_0],Y
  3399 09:BF3F: 65 03        	adc	<R0+2
  3400 09:BF41: 85 07        	sta	<R1+2
  3401 09:BF43: D4 07        	pei	<R1+2
  3402 09:BF45: D4 05        	pei	<R1
  3403 09:BF47: 18           	clc
  3404 09:BF48: A9 19 00     	lda	#$19
  3405 09:BF4B: 65 14        	adc	<L90+current_header_0
  3406 09:BF4D: 85 01        	sta	<R0
  3407 09:BF4F: A9 00 00     	lda	#$0
  3408 09:BF52: 65 16        	adc	<L90+current_header_0+2
  3409 09:BF54: 85 03        	sta	<R0+2
  3410 09:BF56: D4 03        	pei	<R0+2
  3411 09:BF58: D4 01        	pei	<R0
  3412 09:BF5A: 22 xx xx xx  	jsl	~~memcpy
  3413                        ;  memcpy(&current_header->undefine_2,&current_fil
                    e->data[data_offset+0x15],sizeof(BYTE));
  3414                        	.line	352
  3415 09:BF5E: F4 01 00     	pea	#<$1
  3416 09:BF61: 18           	clc
  3417 09:BF62: A9 15 00     	lda	#$15
  3418 09:BF65: 65 12        	adc	<L90+data_offset_0
  3419 09:BF67: 85 01        	sta	<R0
  3420 09:BF69: A0 00 00     	ldy	#$0
  3421 09:BF6C: A5 01        	lda	<R0
  3422 09:BF6E: 10 01        	bpl	L104
  3423 09:BF70: 88           	dey
  3424                        L104:
  3425 09:BF71: 85 01        	sta	<R0
  3426 09:BF73: 84 03        	sty	<R0+2
  3427 09:BF75: 18           	clc
  3428 09:BF76: A0 0A 00     	ldy	#$a
  Thu Dec  3 2020 22:25                                                Page 65


  3429 09:BF79: B7 0E        	lda	[<L90+current_file_0],Y
  3430 09:BF7B: 65 01        	adc	<R0
  3431 09:BF7D: 85 05        	sta	<R1
  3432 09:BF7F: A0 0C 00     	ldy	#$c
  3433 09:BF82: B7 0E        	lda	[<L90+current_file_0],Y
  3434 09:BF84: 65 03        	adc	<R0+2
  3435 09:BF86: 85 07        	sta	<R1+2
  3436 09:BF88: D4 07        	pei	<R1+2
  3437 09:BF8A: D4 05        	pei	<R1
  3438 09:BF8C: 18           	clc
  3439 09:BF8D: A9 23 00     	lda	#$23
  3440 09:BF90: 65 14        	adc	<L90+current_header_0
  3441 09:BF92: 85 01        	sta	<R0
  3442 09:BF94: A9 00 00     	lda	#$0
  3443 09:BF97: 65 16        	adc	<L90+current_header_0+2
  3444 09:BF99: 85 03        	sta	<R0+2
  3445 09:BF9B: D4 03        	pei	<R0+2
  3446 09:BF9D: D4 01        	pei	<R0
  3447 09:BF9F: 22 xx xx xx  	jsl	~~memcpy
  3448                        ;  memcpy(&current_header->undefine_3,&current_fil
                    e->data[data_offset+0x16],sizeof(BYTE));
  3449                        	.line	353
  3450 09:BFA3: F4 01 00     	pea	#<$1
  3451 09:BFA6: 18           	clc
  3452 09:BFA7: A9 16 00     	lda	#$16
  3453 09:BFAA: 65 12        	adc	<L90+data_offset_0
  3454 09:BFAC: 85 01        	sta	<R0
  3455 09:BFAE: A0 00 00     	ldy	#$0
  3456 09:BFB1: A5 01        	lda	<R0
  3457 09:BFB3: 10 01        	bpl	L105
  3458 09:BFB5: 88           	dey
  3459                        L105:
  3460 09:BFB6: 85 01        	sta	<R0
  3461 09:BFB8: 84 03        	sty	<R0+2
  3462 09:BFBA: 18           	clc
  3463 09:BFBB: A0 0A 00     	ldy	#$a
  3464 09:BFBE: B7 0E        	lda	[<L90+current_file_0],Y
  3465 09:BFC0: 65 01        	adc	<R0
  3466 09:BFC2: 85 05        	sta	<R1
  3467 09:BFC4: A0 0C 00     	ldy	#$c
  3468 09:BFC7: B7 0E        	lda	[<L90+current_file_0],Y
  3469 09:BFC9: 65 03        	adc	<R0+2
  3470 09:BFCB: 85 07        	sta	<R1+2
  3471 09:BFCD: D4 07        	pei	<R1+2
  3472 09:BFCF: D4 05        	pei	<R1
  3473 09:BFD1: 18           	clc
  3474 09:BFD2: A9 24 00     	lda	#$24
  3475 09:BFD5: 65 14        	adc	<L90+current_header_0
  3476 09:BFD7: 85 01        	sta	<R0
  3477 09:BFD9: A9 00 00     	lda	#$0
  3478 09:BFDC: 65 16        	adc	<L90+current_header_0+2
  3479 09:BFDE: 85 03        	sta	<R0+2
  3480 09:BFE0: D4 03        	pei	<R0+2
  3481 09:BFE2: D4 01        	pei	<R0
  3482 09:BFE4: 22 xx xx xx  	jsl	~~memcpy
  3483                        ;  memcpy(&current_header->undefine_4,&current_fil
                    e->data[data_offset+0x17],sizeof(BYTE));
  3484                        	.line	354
  Thu Dec  3 2020 22:25                                                Page 66


  3485 09:BFE8: F4 01 00     	pea	#<$1
  3486 09:BFEB: 18           	clc
  3487 09:BFEC: A9 17 00     	lda	#$17
  3488 09:BFEF: 65 12        	adc	<L90+data_offset_0
  3489 09:BFF1: 85 01        	sta	<R0
  3490 09:BFF3: A0 00 00     	ldy	#$0
  3491 09:BFF6: A5 01        	lda	<R0
  3492 09:BFF8: 10 01        	bpl	L106
  3493 09:BFFA: 88           	dey
  3494                        L106:
  3495 09:BFFB: 85 01        	sta	<R0
  3496 09:BFFD: 84 03        	sty	<R0+2
  3497 09:BFFF: 18           	clc
  3498 09:C000: A0 0A 00     	ldy	#$a
  3499 09:C003: B7 0E        	lda	[<L90+current_file_0],Y
  3500 09:C005: 65 01        	adc	<R0
  3501 09:C007: 85 05        	sta	<R1
  3502 09:C009: A0 0C 00     	ldy	#$c
  3503 09:C00C: B7 0E        	lda	[<L90+current_file_0],Y
  3504 09:C00E: 65 03        	adc	<R0+2
  3505 09:C010: 85 07        	sta	<R1+2
  3506 09:C012: D4 07        	pei	<R1+2
  3507 09:C014: D4 05        	pei	<R1
  3508 09:C016: 18           	clc
  3509 09:C017: A9 2F 00     	lda	#$2f
  3510 09:C01A: 65 14        	adc	<L90+current_header_0
  3511 09:C01C: 85 01        	sta	<R0
  3512 09:C01E: A9 00 00     	lda	#$0
  3513 09:C021: 65 16        	adc	<L90+current_header_0+2
  3514 09:C023: 85 03        	sta	<R0+2
  3515 09:C025: D4 03        	pei	<R0+2
  3516 09:C027: D4 01        	pei	<R0
  3517 09:C029: 22 xx xx xx  	jsl	~~memcpy
  3518                        ;  memcpy(&current_header->Org,&current_file->data
                    [data_offset+0x18],sizeof(DWORD));
  3519                        	.line	355
  3520 09:C02D: F4 04 00     	pea	#<$4
  3521 09:C030: 18           	clc
  3522 09:C031: A9 18 00     	lda	#$18
  3523 09:C034: 65 12        	adc	<L90+data_offset_0
  3524 09:C036: 85 01        	sta	<R0
  3525 09:C038: A0 00 00     	ldy	#$0
  3526 09:C03B: A5 01        	lda	<R0
  3527 09:C03D: 10 01        	bpl	L107
  3528 09:C03F: 88           	dey
  3529                        L107:
  3530 09:C040: 85 01        	sta	<R0
  3531 09:C042: 84 03        	sty	<R0+2
  3532 09:C044: 18           	clc
  3533 09:C045: A0 0A 00     	ldy	#$a
  3534 09:C048: B7 0E        	lda	[<L90+current_file_0],Y
  3535 09:C04A: 65 01        	adc	<R0
  3536 09:C04C: 85 05        	sta	<R1
  3537 09:C04E: A0 0C 00     	ldy	#$c
  3538 09:C051: B7 0E        	lda	[<L90+current_file_0],Y
  3539 09:C053: 65 03        	adc	<R0+2
  3540 09:C055: 85 07        	sta	<R1+2
  3541 09:C057: D4 07        	pei	<R1+2
  Thu Dec  3 2020 22:25                                                Page 67


  3542 09:C059: D4 05        	pei	<R1
  3543 09:C05B: 18           	clc
  3544 09:C05C: A9 25 00     	lda	#$25
  3545 09:C05F: 65 14        	adc	<L90+current_header_0
  3546 09:C061: 85 01        	sta	<R0
  3547 09:C063: A9 00 00     	lda	#$0
  3548 09:C066: 65 16        	adc	<L90+current_header_0+2
  3549 09:C068: 85 03        	sta	<R0+2
  3550 09:C06A: D4 03        	pei	<R0+2
  3551 09:C06C: D4 01        	pei	<R0
  3552 09:C06E: 22 xx xx xx  	jsl	~~memcpy
  3553                        ;  memcpy(&current_header->Align,&current_file->da
                    ta[data_offset+0x1C],sizeof(DWORD));
  3554                        	.line	356
  3555 09:C072: F4 04 00     	pea	#<$4
  3556 09:C075: 18           	clc
  3557 09:C076: A9 1C 00     	lda	#$1c
  3558 09:C079: 65 12        	adc	<L90+data_offset_0
  3559 09:C07B: 85 01        	sta	<R0
  3560 09:C07D: A0 00 00     	ldy	#$0
  3561 09:C080: A5 01        	lda	<R0
  3562 09:C082: 10 01        	bpl	L108
  3563 09:C084: 88           	dey
  3564                        L108:
  3565 09:C085: 85 01        	sta	<R0
  3566 09:C087: 84 03        	sty	<R0+2
  3567 09:C089: 18           	clc
  3568 09:C08A: A0 0A 00     	ldy	#$a
  3569 09:C08D: B7 0E        	lda	[<L90+current_file_0],Y
  3570 09:C08F: 65 01        	adc	<R0
  3571 09:C091: 85 05        	sta	<R1
  3572 09:C093: A0 0C 00     	ldy	#$c
  3573 09:C096: B7 0E        	lda	[<L90+current_file_0],Y
  3574 09:C098: 65 03        	adc	<R0+2
  3575 09:C09A: 85 07        	sta	<R1+2
  3576 09:C09C: D4 07        	pei	<R1+2
  3577 09:C09E: D4 05        	pei	<R1
  3578 09:C0A0: 18           	clc
  3579 09:C0A1: A9 29 00     	lda	#$29
  3580 09:C0A4: 65 14        	adc	<L90+current_header_0
  3581 09:C0A6: 85 01        	sta	<R0
  3582 09:C0A8: A9 00 00     	lda	#$0
  3583 09:C0AB: 65 16        	adc	<L90+current_header_0+2
  3584 09:C0AD: 85 03        	sta	<R0+2
  3585 09:C0AF: D4 03        	pei	<R0+2
  3586 09:C0B1: D4 01        	pei	<R0
  3587 09:C0B3: 22 xx xx xx  	jsl	~~memcpy
  3588                        ;  memcpy(&current_header->NumSEx,&current_file->d
                    ata[data_offset+0x20],sizeof(BYTE));
  3589                        	.line	357
  3590 09:C0B7: F4 01 00     	pea	#<$1
  3591 09:C0BA: 18           	clc
  3592 09:C0BB: A9 20 00     	lda	#$20
  3593 09:C0BE: 65 12        	adc	<L90+data_offset_0
  3594 09:C0C0: 85 01        	sta	<R0
  3595 09:C0C2: A0 00 00     	ldy	#$0
  3596 09:C0C5: A5 01        	lda	<R0
  3597 09:C0C7: 10 01        	bpl	L109
  Thu Dec  3 2020 22:25                                                Page 68


  3598 09:C0C9: 88           	dey
  3599                        L109:
  3600 09:C0CA: 85 01        	sta	<R0
  3601 09:C0CC: 84 03        	sty	<R0+2
  3602 09:C0CE: 18           	clc
  3603 09:C0CF: A0 0A 00     	ldy	#$a
  3604 09:C0D2: B7 0E        	lda	[<L90+current_file_0],Y
  3605 09:C0D4: 65 01        	adc	<R0
  3606 09:C0D6: 85 05        	sta	<R1
  3607 09:C0D8: A0 0C 00     	ldy	#$c
  3608 09:C0DB: B7 0E        	lda	[<L90+current_file_0],Y
  3609 09:C0DD: 65 03        	adc	<R0+2
  3610 09:C0DF: 85 07        	sta	<R1+2
  3611 09:C0E1: D4 07        	pei	<R1+2
  3612 09:C0E3: D4 05        	pei	<R1
  3613 09:C0E5: 18           	clc
  3614 09:C0E6: A9 2D 00     	lda	#$2d
  3615 09:C0E9: 65 14        	adc	<L90+current_header_0
  3616 09:C0EB: 85 01        	sta	<R0
  3617 09:C0ED: A9 00 00     	lda	#$0
  3618 09:C0F0: 65 16        	adc	<L90+current_header_0+2
  3619 09:C0F2: 85 03        	sta	<R0+2
  3620 09:C0F4: D4 03        	pei	<R0+2
  3621 09:C0F6: D4 01        	pei	<R0
  3622 09:C0F8: 22 xx xx xx  	jsl	~~memcpy
  3623                        ;  memcpy(&current_header->LCBank,&current_file->d
                    ata[data_offset+0x21],sizeof(BYTE));               /* Langua
                    ge Card */
  3624                        	.line	358
  3625 09:C0FC: F4 01 00     	pea	#<$1
  3626 09:C0FF: 18           	clc
  3627 09:C100: A9 21 00     	lda	#$21
  3628 09:C103: 65 12        	adc	<L90+data_offset_0
  3629 09:C105: 85 01        	sta	<R0
  3630 09:C107: A0 00 00     	ldy	#$0
  3631 09:C10A: A5 01        	lda	<R0
  3632 09:C10C: 10 01        	bpl	L110
  3633 09:C10E: 88           	dey
  3634                        L110:
  3635 09:C10F: 85 01        	sta	<R0
  3636 09:C111: 84 03        	sty	<R0+2
  3637 09:C113: 18           	clc
  3638 09:C114: A0 0A 00     	ldy	#$a
  3639 09:C117: B7 0E        	lda	[<L90+current_file_0],Y
  3640 09:C119: 65 01        	adc	<R0
  3641 09:C11B: 85 05        	sta	<R1
  3642 09:C11D: A0 0C 00     	ldy	#$c
  3643 09:C120: B7 0E        	lda	[<L90+current_file_0],Y
  3644 09:C122: 65 03        	adc	<R0+2
  3645 09:C124: 85 07        	sta	<R1+2
  3646 09:C126: D4 07        	pei	<R1+2
  3647 09:C128: D4 05        	pei	<R1
  3648 09:C12A: 18           	clc
  3649 09:C12B: A9 2E 00     	lda	#$2e
  3650 09:C12E: 65 14        	adc	<L90+current_header_0
  3651 09:C130: 85 01        	sta	<R0
  3652 09:C132: A9 00 00     	lda	#$0
  3653 09:C135: 65 16        	adc	<L90+current_header_0+2
  Thu Dec  3 2020 22:25                                                Page 69


  3654 09:C137: 85 03        	sta	<R0+2
  3655 09:C139: D4 03        	pei	<R0+2
  3656 09:C13B: D4 01        	pei	<R0
  3657 09:C13D: 22 xx xx xx  	jsl	~~memcpy
  3658                        ;  memcpy(&current_header->SegNum,&current_file->d
                    ata[data_offset+0x22],sizeof(WORD));
  3659                        	.line	359
  3660 09:C141: F4 02 00     	pea	#<$2
  3661 09:C144: 18           	clc
  3662 09:C145: A9 22 00     	lda	#$22
  3663 09:C148: 65 12        	adc	<L90+data_offset_0
  3664 09:C14A: 85 01        	sta	<R0
  3665 09:C14C: A0 00 00     	ldy	#$0
  3666 09:C14F: A5 01        	lda	<R0
  3667 09:C151: 10 01        	bpl	L111
  3668 09:C153: 88           	dey
  3669                        L111:
  3670 09:C154: 85 01        	sta	<R0
  3671 09:C156: 84 03        	sty	<R0+2
  3672 09:C158: 18           	clc
  3673 09:C159: A0 0A 00     	ldy	#$a
  3674 09:C15C: B7 0E        	lda	[<L90+current_file_0],Y
  3675 09:C15E: 65 01        	adc	<R0
  3676 09:C160: 85 05        	sta	<R1
  3677 09:C162: A0 0C 00     	ldy	#$c
  3678 09:C165: B7 0E        	lda	[<L90+current_file_0],Y
  3679 09:C167: 65 03        	adc	<R0+2
  3680 09:C169: 85 07        	sta	<R1+2
  3681 09:C16B: D4 07        	pei	<R1+2
  3682 09:C16D: D4 05        	pei	<R1
  3683 09:C16F: 18           	clc
  3684 09:C170: A9 30 00     	lda	#$30
  3685 09:C173: 65 14        	adc	<L90+current_header_0
  3686 09:C175: 85 01        	sta	<R0
  3687 09:C177: A9 00 00     	lda	#$0
  3688 09:C17A: 65 16        	adc	<L90+current_header_0+2
  3689 09:C17C: 85 03        	sta	<R0+2
  3690 09:C17E: D4 03        	pei	<R0+2
  3691 09:C180: D4 01        	pei	<R0
  3692 09:C182: 22 xx xx xx  	jsl	~~memcpy
  3693                        ;  memcpy(&current_header->EntryPointOffset,&curre
                    nt_file->data[data_offset+0x24],sizeof(DWORD));
  3694                        	.line	360
  3695 09:C186: F4 04 00     	pea	#<$4
  3696 09:C189: 18           	clc
  3697 09:C18A: A9 24 00     	lda	#$24
  3698 09:C18D: 65 12        	adc	<L90+data_offset_0
  3699 09:C18F: 85 01        	sta	<R0
  3700 09:C191: A0 00 00     	ldy	#$0
  3701 09:C194: A5 01        	lda	<R0
  3702 09:C196: 10 01        	bpl	L112
  3703 09:C198: 88           	dey
  3704                        L112:
  3705 09:C199: 85 01        	sta	<R0
  3706 09:C19B: 84 03        	sty	<R0+2
  3707 09:C19D: 18           	clc
  3708 09:C19E: A0 0A 00     	ldy	#$a
  3709 09:C1A1: B7 0E        	lda	[<L90+current_file_0],Y
  Thu Dec  3 2020 22:25                                                Page 70


  3710 09:C1A3: 65 01        	adc	<R0
  3711 09:C1A5: 85 05        	sta	<R1
  3712 09:C1A7: A0 0C 00     	ldy	#$c
  3713 09:C1AA: B7 0E        	lda	[<L90+current_file_0],Y
  3714 09:C1AC: 65 03        	adc	<R0+2
  3715 09:C1AE: 85 07        	sta	<R1+2
  3716 09:C1B0: D4 07        	pei	<R1+2
  3717 09:C1B2: D4 05        	pei	<R1
  3718 09:C1B4: 18           	clc
  3719 09:C1B5: A9 32 00     	lda	#$32
  3720 09:C1B8: 65 14        	adc	<L90+current_header_0
  3721 09:C1BA: 85 01        	sta	<R0
  3722 09:C1BC: A9 00 00     	lda	#$0
  3723 09:C1BF: 65 16        	adc	<L90+current_header_0+2
  3724 09:C1C1: 85 03        	sta	<R0+2
  3725 09:C1C3: D4 03        	pei	<R0+2
  3726 09:C1C5: D4 01        	pei	<R0
  3727 09:C1C7: 22 xx xx xx  	jsl	~~memcpy
  3728                        ;  memcpy(&current_header->DispNameOffset,&current
                    _file->data[data_offset+0x28],sizeof(WORD));       /* Load N
                    ame Offset */
  3729                        	.line	361
  3730 09:C1CB: F4 02 00     	pea	#<$2
  3731 09:C1CE: 18           	clc
  3732 09:C1CF: A9 28 00     	lda	#$28
  3733 09:C1D2: 65 12        	adc	<L90+data_offset_0
  3734 09:C1D4: 85 01        	sta	<R0
  3735 09:C1D6: A0 00 00     	ldy	#$0
  3736 09:C1D9: A5 01        	lda	<R0
  3737 09:C1DB: 10 01        	bpl	L113
  3738 09:C1DD: 88           	dey
  3739                        L113:
  3740 09:C1DE: 85 01        	sta	<R0
  3741 09:C1E0: 84 03        	sty	<R0+2
  3742 09:C1E2: 18           	clc
  3743 09:C1E3: A0 0A 00     	ldy	#$a
  3744 09:C1E6: B7 0E        	lda	[<L90+current_file_0],Y
  3745 09:C1E8: 65 01        	adc	<R0
  3746 09:C1EA: 85 05        	sta	<R1
  3747 09:C1EC: A0 0C 00     	ldy	#$c
  3748 09:C1EF: B7 0E        	lda	[<L90+current_file_0],Y
  3749 09:C1F1: 65 03        	adc	<R0+2
  3750 09:C1F3: 85 07        	sta	<R1+2
  3751 09:C1F5: D4 07        	pei	<R1+2
  3752 09:C1F7: D4 05        	pei	<R1
  3753 09:C1F9: 18           	clc
  3754 09:C1FA: A9 36 00     	lda	#$36
  3755 09:C1FD: 65 14        	adc	<L90+current_header_0
  3756 09:C1FF: 85 01        	sta	<R0
  3757 09:C201: A9 00 00     	lda	#$0
  3758 09:C204: 65 16        	adc	<L90+current_header_0+2
  3759 09:C206: 85 03        	sta	<R0+2
  3760 09:C208: D4 03        	pei	<R0+2
  3761 09:C20A: D4 01        	pei	<R0
  3762 09:C20C: 22 xx xx xx  	jsl	~~memcpy
  3763                        ;  memcpy(&current_header->DispDataOffset,&current
                    _file->data[data_offset+0x2A],sizeof(WORD));       /* Segmen
                    t Name Offset */
  Thu Dec  3 2020 22:25                                                Page 71


  3764                        	.line	362
  3765 09:C210: F4 02 00     	pea	#<$2
  3766 09:C213: 18           	clc
  3767 09:C214: A9 2A 00     	lda	#$2a
  3768 09:C217: 65 12        	adc	<L90+data_offset_0
  3769 09:C219: 85 01        	sta	<R0
  3770 09:C21B: A0 00 00     	ldy	#$0
  3771 09:C21E: A5 01        	lda	<R0
  3772 09:C220: 10 01        	bpl	L114
  3773 09:C222: 88           	dey
  3774                        L114:
  3775 09:C223: 85 01        	sta	<R0
  3776 09:C225: 84 03        	sty	<R0+2
  3777 09:C227: 18           	clc
  3778 09:C228: A0 0A 00     	ldy	#$a
  3779 09:C22B: B7 0E        	lda	[<L90+current_file_0],Y
  3780 09:C22D: 65 01        	adc	<R0
  3781 09:C22F: 85 05        	sta	<R1
  3782 09:C231: A0 0C 00     	ldy	#$c
  3783 09:C234: B7 0E        	lda	[<L90+current_file_0],Y
  3784 09:C236: 65 03        	adc	<R0+2
  3785 09:C238: 85 07        	sta	<R1+2
  3786 09:C23A: D4 07        	pei	<R1+2
  3787 09:C23C: D4 05        	pei	<R1
  3788 09:C23E: 18           	clc
  3789 09:C23F: A9 38 00     	lda	#$38
  3790 09:C242: 65 14        	adc	<L90+current_header_0
  3791 09:C244: 85 01        	sta	<R0
  3792 09:C246: A9 00 00     	lda	#$0
  3793 09:C249: 65 16        	adc	<L90+current_header_0+2
  3794 09:C24B: 85 03        	sta	<R0+2
  3795 09:C24D: D4 03        	pei	<R0+2
  3796 09:C24F: D4 01        	pei	<R0
  3797 09:C251: 22 xx xx xx  	jsl	~~memcpy
  3798                        ;
  3799                        ;  /********************************************/
  3800                        ;  /**  On va valider les données récupérées  **/
  3801                        ;  /********************************************/
  3802                        ;  /* Taille du Segment */
  3803                        ;  if((int)(data_offset + current_header->ByteCnt)
                     > (int) current_file->data_length)
  3804                        	.line	368
  3805                        ;    {
  3806 09:C255: A0 00 00     	ldy	#$0
  3807 09:C258: A5 12        	lda	<L90+data_offset_0
  3808 09:C25A: 10 01        	bpl	L115
  3809 09:C25C: 88           	dey
  3810                        L115:
  3811 09:C25D: 85 01        	sta	<R0
  3812 09:C25F: 84 03        	sty	<R0+2
  3813 09:C261: 18           	clc
  3814 09:C262: A5 01        	lda	<R0
  3815 09:C264: A0 0C 00     	ldy	#$c
  3816 09:C267: 77 14        	adc	[<L90+current_header_0],Y
  3817 09:C269: 85 05        	sta	<R1
  3818 09:C26B: A5 03        	lda	<R0+2
  3819 09:C26D: A0 0E 00     	ldy	#$e
  3820 09:C270: 77 14        	adc	[<L90+current_header_0],Y
  Thu Dec  3 2020 22:25                                                Page 72


  3821 09:C272: 85 07        	sta	<R1+2
  3822 09:C274: 38           	sec
  3823 09:C275: A0 08 00     	ldy	#$8
  3824 09:C278: B7 0E        	lda	[<L90+current_file_0],Y
  3825 09:C27A: E5 05        	sbc	<R1
  3826 09:C27C: 70 03        	bvs	L116
  3827 09:C27E: 49 00 80     	eor	#$8000
  3828                        L116:
  3829 09:C281: 10 03        	bpl	L117
  3830 09:C283: 82 06 00     	brl	L10038
  3831                        L117:
  3832                        	.line	369
  3833                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'BlockCnt' value (the segment size can't be larger than 
                    the OMF file).\n",current_file->nb_segment+1);
  3834                        ;      return(1);
  3835                        	.line	371
  3836 09:C286: A9 01 00     	lda	#$1
  3837 09:C289: 82 7B FA     	brl	L95
  3838                        ;    }
  3839                        	.line	372
  3840                        ;  if(current_header->ByteCnt < SEGMENT_HEADER_SIZ
                    E_V1)
  3841                        L10038:
  3842                        	.line	373
  3843                        ;    {
  3844 09:C28C: A0 0C 00     	ldy	#$c
  3845 09:C28F: B7 14        	lda	[<L90+current_header_0],Y
  3846 09:C291: C9 40 00     	cmp	#<$40
  3847 09:C294: A0 0E 00     	ldy	#$e
  3848 09:C297: B7 14        	lda	[<L90+current_header_0],Y
  3849 09:C299: E9 00 00     	sbc	#^$40
  3850 09:C29C: 90 03        	bcc	L118
  3851 09:C29E: 82 06 00     	brl	L10039
  3852                        L118:
  3853                        	.line	374
  3854                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'BlockCnt' value (the segment size can't be smaller than
                     the Sgement Header size).\n",current_file->nb_segment+1);
  3855                        ;      return(1);
  3856                        	.line	376
  3857 09:C2A1: A9 01 00     	lda	#$1
  3858 09:C2A4: 82 60 FA     	brl	L95
  3859                        ;    }
  3860                        	.line	377
  3861                        ;
  3862                        ;  /* Nombre de 0x00 à ajouter à la fin */
  3863                        ;  if(current_header->ResSpc >= 0x010000)
  3864                        L10039:
  3865                        	.line	380
  3866                        ;    {
  3867 09:C2A7: A0 10 00     	ldy	#$10
  3868 09:C2AA: B7 14        	lda	[<L90+current_header_0],Y
  3869 09:C2AC: C9 00 00     	cmp	#<$10000
  3870 09:C2AF: A0 12 00     	ldy	#$12
  3871 09:C2B2: B7 14        	lda	[<L90+current_header_0],Y
  3872 09:C2B4: E9 01 00     	sbc	#^$10000
  3873 09:C2B7: B0 03        	bcs	L119
  Thu Dec  3 2020 22:25                                                Page 73


  3874 09:C2B9: 82 06 00     	brl	L10040
  3875                        L119:
  3876                        	.line	381
  3877                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'ResSpc' value (the size can't be larger than 64 KB).\n"
                    ,current_file->nb_segment+1);
  3878                        ;      return(1);
  3879                        	.line	383
  3880 09:C2BC: A9 01 00     	lda	#$1
  3881 09:C2BF: 82 45 FA     	brl	L95
  3882                        ;    }
  3883                        	.line	384
  3884                        ;
  3885                        ;  /* La taille d'un Segment en mémoire ne peut pa
                    s dépasser 64 KB */
  3886                        ;  if(current_header->Length >= 0x010000)
  3887                        L10040:
  3888                        	.line	387
  3889                        ;    //printf("  Segment #%d Header Warning : Weir
                    d 'Length' value (the segment size is usually < 64 KB).\n",c
                    urrent_file->nb_segment+1);
  3890                        ;
  3891                        ;  /* Type */
  3892                        ;  if((current_header->Type & 0x1F) != 0x00 && (cu
                    rrent_header->Type & 0x1F) != 0x01 && (current_header->Type 
                    & 0x1F) != 0x02 &&
  3893 09:C2C2: A0 14 00     	ldy	#$14
  3894 09:C2C5: B7 14        	lda	[<L90+current_header_0],Y
  3895 09:C2C7: C9 00 00     	cmp	#<$10000
  3896 09:C2CA: A0 16 00     	ldy	#$16
  3897 09:C2CD: B7 14        	lda	[<L90+current_header_0],Y
  3898 09:C2CF: E9 01 00     	sbc	#^$10000
  3899 09:C2D2: B0 03        	bcs	L120
  3900 09:C2D4: 82 A2 00     	brl	L10041
  3901                        L120:
  3902                        	.line	391
  3903                        ;     (current_header->Type & 0x1F) != 0x04 && (cu
                    rrent_header->Type & 0x1F) != 0x08 && (current_header->Type 
                    & 0x1F) != 0x10 &&
  3904                        ;     (current_header->Type & 0x1F) != 0x11 && (cu
                    rrent_header->Type & 0x1F) != 0x12)
  3905                        ;    {
  3906 09:C2D7: E2 20        	sep	#$20
  3907                        	longa	off
  3908 09:C2D9: A0 18 00     	ldy	#$18
  3909 09:C2DC: B7 14        	lda	[<L90+current_header_0],Y
  3910 09:C2DE: 29 1F        	and	#<$1f
  3911 09:C2E0: C2 20        	rep	#$20
  3912                        	longa	on
  3913 09:C2E2: D0 03        	bne	L121
  3914 09:C2E4: 82 92 00     	brl	L10042
  3915                        L121:
  3916 09:C2E7: A0 18 00     	ldy	#$18
  3917 09:C2EA: B7 14        	lda	[<L90+current_header_0],Y
  3918 09:C2EC: 29 1F 00     	and	#<$1f
  3919 09:C2EF: 85 01        	sta	<R0
  3920 09:C2F1: A5 01        	lda	<R0
  3921 09:C2F3: C9 01 00     	cmp	#<$1
  Thu Dec  3 2020 22:25                                                Page 74


  3922 09:C2F6: D0 03        	bne	L122
  3923 09:C2F8: 82 7E 00     	brl	L10042
  3924                        L122:
  3925 09:C2FB: A0 18 00     	ldy	#$18
  3926 09:C2FE: B7 14        	lda	[<L90+current_header_0],Y
  3927 09:C300: 29 1F 00     	and	#<$1f
  3928 09:C303: 85 01        	sta	<R0
  3929 09:C305: A5 01        	lda	<R0
  3930 09:C307: C9 02 00     	cmp	#<$2
  3931 09:C30A: D0 03        	bne	L123
  3932 09:C30C: 82 6A 00     	brl	L10042
  3933                        L123:
  3934 09:C30F: A0 18 00     	ldy	#$18
  3935 09:C312: B7 14        	lda	[<L90+current_header_0],Y
  3936 09:C314: 29 1F 00     	and	#<$1f
  3937 09:C317: 85 01        	sta	<R0
  3938 09:C319: A5 01        	lda	<R0
  3939 09:C31B: C9 04 00     	cmp	#<$4
  3940 09:C31E: D0 03        	bne	L124
  3941 09:C320: 82 56 00     	brl	L10042
  3942                        L124:
  3943 09:C323: A0 18 00     	ldy	#$18
  3944 09:C326: B7 14        	lda	[<L90+current_header_0],Y
  3945 09:C328: 29 1F 00     	and	#<$1f
  3946 09:C32B: 85 01        	sta	<R0
  3947 09:C32D: A5 01        	lda	<R0
  3948 09:C32F: C9 08 00     	cmp	#<$8
  3949 09:C332: D0 03        	bne	L125
  3950 09:C334: 82 42 00     	brl	L10042
  3951                        L125:
  3952 09:C337: A0 18 00     	ldy	#$18
  3953 09:C33A: B7 14        	lda	[<L90+current_header_0],Y
  3954 09:C33C: 29 1F 00     	and	#<$1f
  3955 09:C33F: 85 01        	sta	<R0
  3956 09:C341: A5 01        	lda	<R0
  3957 09:C343: C9 10 00     	cmp	#<$10
  3958 09:C346: D0 03        	bne	L126
  3959 09:C348: 82 2E 00     	brl	L10042
  3960                        L126:
  3961 09:C34B: A0 18 00     	ldy	#$18
  3962 09:C34E: B7 14        	lda	[<L90+current_header_0],Y
  3963 09:C350: 29 1F 00     	and	#<$1f
  3964 09:C353: 85 01        	sta	<R0
  3965 09:C355: A5 01        	lda	<R0
  3966 09:C357: C9 11 00     	cmp	#<$11
  3967 09:C35A: D0 03        	bne	L127
  3968 09:C35C: 82 1A 00     	brl	L10042
  3969                        L127:
  3970 09:C35F: A0 18 00     	ldy	#$18
  3971 09:C362: B7 14        	lda	[<L90+current_header_0],Y
  3972 09:C364: 29 1F 00     	and	#<$1f
  3973 09:C367: 85 01        	sta	<R0
  3974 09:C369: A5 01        	lda	<R0
  3975 09:C36B: C9 12 00     	cmp	#<$12
  3976 09:C36E: D0 03        	bne	L128
  3977 09:C370: 82 06 00     	brl	L10042
  3978                        L128:
  3979                        	.line	394
  Thu Dec  3 2020 22:25                                                Page 75


  3980                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'Type' value (possible values are $0,$1,$2,$4,$8,$10,$11
                     or $12).\n",current_file->nb_segment+1);
  3981                        ;      return(1);
  3982                        	.line	396
  3983 09:C373: A9 01 00     	lda	#$1
  3984 09:C376: 82 8E F9     	brl	L95
  3985                        ;    }
  3986                        	.line	397
  3987                        ;
  3988                        ;  /* LabLen : 0 ou 10 */
  3989                        ;  if(current_header->LabLen != 0x00 && current_he
                    ader->LabLen != 0x0A)
  3990                        L10042:
  3991                        L10041:
  3992                        	.line	400
  3993                        ;    {
  3994 09:C379: A0 1A 00     	ldy	#$1a
  3995 09:C37C: B7 14        	lda	[<L90+current_header_0],Y
  3996 09:C37E: 29 FF 00     	and	#$ff
  3997 09:C381: D0 03        	bne	L129
  3998 09:C383: 82 16 00     	brl	L10043
  3999                        L129:
  4000 09:C386: E2 20        	sep	#$20
  4001                        	longa	off
  4002 09:C388: A0 1A 00     	ldy	#$1a
  4003 09:C38B: B7 14        	lda	[<L90+current_header_0],Y
  4004 09:C38D: C9 0A        	cmp	#<$a
  4005 09:C38F: C2 20        	rep	#$20
  4006                        	longa	on
  4007 09:C391: D0 03        	bne	L130
  4008 09:C393: 82 06 00     	brl	L10043
  4009                        L130:
  4010                        	.line	401
  4011                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'LabLen' value (the value should be 0 or 10 for the Appl
                    e IIgs).\n",current_file->nb_segment+1);
  4012                        ;      return(1);
  4013                        	.line	403
  4014 09:C396: A9 01 00     	lda	#$1
  4015 09:C399: 82 6B F9     	brl	L95
  4016                        ;    }
  4017                        	.line	404
  4018                        ;
  4019                        ;  /* Num Len : Tjs à 4 pour le IIgs */
  4020                        ;  if(current_header->NumLen != 0x04)
  4021                        L10043:
  4022                        	.line	407
  4023                        ;    {
  4024 09:C39C: E2 20        	sep	#$20
  4025                        	longa	off
  4026 09:C39E: A0 1B 00     	ldy	#$1b
  4027 09:C3A1: B7 14        	lda	[<L90+current_header_0],Y
  4028 09:C3A3: C9 04        	cmp	#<$4
  4029 09:C3A5: C2 20        	rep	#$20
  4030                        	longa	on
  4031 09:C3A7: D0 03        	bne	L131
  4032 09:C3A9: 82 06 00     	brl	L10044
  Thu Dec  3 2020 22:25                                                Page 76


  4033                        L131:
  4034                        	.line	408
  4035                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'NumLen' value (the value should be 4 for the Apple IIgs
                    ).\n",current_file->nb_segment+1);
  4036                        ;      return(1);
  4037                        	.line	410
  4038 09:C3AC: A9 01 00     	lda	#$1
  4039 09:C3AF: 82 55 F9     	brl	L95
  4040                        ;    }
  4041                        	.line	411
  4042                        ;
  4043                        ;  /* BankSize : <= 64 KB */
  4044                        ;  if(current_header->BankSize > 0x010000)
  4045                        L10044:
  4046                        	.line	414
  4047                        ;    {
  4048 09:C3B2: A9 00 00     	lda	#$0
  4049 09:C3B5: A0 1D 00     	ldy	#$1d
  4050 09:C3B8: D7 14        	cmp	[<L90+current_header_0],Y
  4051 09:C3BA: A9 01 00     	lda	#$1
  4052 09:C3BD: A0 1F 00     	ldy	#$1f
  4053 09:C3C0: F7 14        	sbc	[<L90+current_header_0],Y
  4054 09:C3C2: 90 03        	bcc	L132
  4055 09:C3C4: 82 06 00     	brl	L10045
  4056                        L132:
  4057                        	.line	415
  4058                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'BankSize' value (the value can't be larger than 64 KB).
                    \n",current_file->nb_segment+1);
  4059                        ;      return(1);
  4060                        	.line	417
  4061 09:C3C7: A9 01 00     	lda	#$1
  4062 09:C3CA: 82 3A F9     	brl	L95
  4063                        ;    }
  4064                        	.line	418
  4065                        ;
  4066                        ;  /* Org : < 64 KB */
  4067                        ;  if(current_header->Org >= 0x010000)
  4068                        L10045:
  4069                        	.line	421
  4070                        ;    //printf("  Segment #%d Header Warning : Unus
                    ual 'Org' value (the value is usually < 64 KB) and it is set
                     to 0x%X.\n",current_file->nb_segment+1,current_header->Org)
                    ;
  4071                        ;
  4072                        ;  /* Align : 0, 0x0100 ou 0x010000 (0x200 avec Gs
                    Basic) */
  4073                        ;  if(current_header->Align != 0x00 && current_hea
                    der->Align != 0x0100 && current_header->Align != 0x010000)
  4074 09:C3CD: A0 25 00     	ldy	#$25
  4075 09:C3D0: B7 14        	lda	[<L90+current_header_0],Y
  4076 09:C3D2: C9 00 00     	cmp	#<$10000
  4077 09:C3D5: A0 27 00     	ldy	#$27
  4078 09:C3D8: B7 14        	lda	[<L90+current_header_0],Y
  4079 09:C3DA: E9 01 00     	sbc	#^$10000
  4080 09:C3DD: B0 03        	bcs	L133
  4081 09:C3DF: 82 50 00     	brl	L10046
  Thu Dec  3 2020 22:25                                                Page 77


  4082                        L133:
  4083                        	.line	425
  4084                        ;    //printf("  Segment #%d Header Warning : Unus
                    ual 'Align' value (the value should be 0, 256 or 64KB or for
                     the Apple IIgs) and it is set to 0x%X.\n",current_file->nb_
                    segment+1,current_header->Align);
  4085                        ;
  4086                        ;  /* NumSEx : Tjs à 0 */
  4087                        ;  if(current_header->NumSEx != 0x00)
  4088 09:C3E2: A0 29 00     	ldy	#$29
  4089 09:C3E5: B7 14        	lda	[<L90+current_header_0],Y
  4090 09:C3E7: A0 2B 00     	ldy	#$2b
  4091 09:C3EA: 17 14        	ora	[<L90+current_header_0],Y
  4092 09:C3EC: D0 03        	bne	L134
  4093 09:C3EE: 82 41 00     	brl	L10047
  4094                        L134:
  4095 09:C3F1: A0 29 00     	ldy	#$29
  4096 09:C3F4: B7 14        	lda	[<L90+current_header_0],Y
  4097 09:C3F6: C9 00 01     	cmp	#<$100
  4098 09:C3F9: D0 08        	bne	L135
  4099 09:C3FB: A0 2B 00     	ldy	#$2b
  4100 09:C3FE: B7 14        	lda	[<L90+current_header_0],Y
  4101 09:C400: C9 00 00     	cmp	#^$100
  4102                        L135:
  4103 09:C403: D0 03        	bne	L136
  4104 09:C405: 82 2A 00     	brl	L10047
  4105                        L136:
  4106 09:C408: A0 29 00     	ldy	#$29
  4107 09:C40B: B7 14        	lda	[<L90+current_header_0],Y
  4108 09:C40D: C9 00 00     	cmp	#<$10000
  4109 09:C410: D0 08        	bne	L137
  4110 09:C412: A0 2B 00     	ldy	#$2b
  4111 09:C415: B7 14        	lda	[<L90+current_header_0],Y
  4112 09:C417: C9 01 00     	cmp	#^$10000
  4113                        L137:
  4114 09:C41A: D0 03        	bne	L138
  4115 09:C41C: 82 13 00     	brl	L10047
  4116                        L138:
  4117                        	.line	429
  4118                        ;    {
  4119 09:C41F: A0 2D 00     	ldy	#$2d
  4120 09:C422: B7 14        	lda	[<L90+current_header_0],Y
  4121 09:C424: 29 FF 00     	and	#$ff
  4122 09:C427: D0 03        	bne	L139
  4123 09:C429: 82 06 00     	brl	L10048
  4124                        L139:
  4125                        	.line	430
  4126                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'NumSEx' value (the value should be 0 for the Apple IIgs
                    ).\n",current_file->nb_segment+1);
  4127                        ;      return(1);
  4128                        	.line	432
  4129 09:C42C: A9 01 00     	lda	#$1
  4130 09:C42F: 82 D5 F8     	brl	L95
  4131                        ;    }
  4132                        	.line	433
  4133                        ;
  4134                        ;  /* SegNum : 1 -> N */
  Thu Dec  3 2020 22:25                                                Page 78


  4135                        ;  if(current_header->SegNum != (WORD) current_fil
                    e->nb_segment+1)
  4136                        L10048:
  4137                        L10047:
  4138                        L10046:
  4139                        	.line	436
  4140                        ;    {
  4141 09:C432: A0 0E 00     	ldy	#$e
  4142 09:C435: B7 0E        	lda	[<L90+current_file_0],Y
  4143 09:C437: 1A           	ina
  4144 09:C438: 85 01        	sta	<R0
  4145 09:C43A: A5 01        	lda	<R0
  4146 09:C43C: A0 30 00     	ldy	#$30
  4147 09:C43F: D7 14        	cmp	[<L90+current_header_0],Y
  4148 09:C441: D0 03        	bne	L140
  4149 09:C443: 82 06 00     	brl	L10049
  4150                        L140:
  4151                        	.line	437
  4152                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'SegNum' value (the value should be %d and we have %d fo
                    r the Apple IIgs).\n",current_file->nb_segment+1,current_fil
                    e->nb_segment+1,current_header->SegNum);
  4153                        ;      return(1);
  4154                        	.line	439
  4155 09:C446: A9 01 00     	lda	#$1
  4156 09:C449: 82 BB F8     	brl	L95
  4157                        ;    }
  4158                        	.line	440
  4159                        ;
  4160                        ;  /* Entry Point */
  4161                        ;  if(current_header->EntryPointOffset > current_h
                    eader->Length)
  4162                        L10049:
  4163                        	.line	443
  4164                        ;    {
  4165 09:C44C: A0 14 00     	ldy	#$14
  4166 09:C44F: B7 14        	lda	[<L90+current_header_0],Y
  4167 09:C451: A0 32 00     	ldy	#$32
  4168 09:C454: D7 14        	cmp	[<L90+current_header_0],Y
  4169 09:C456: A0 16 00     	ldy	#$16
  4170 09:C459: B7 14        	lda	[<L90+current_header_0],Y
  4171 09:C45B: A0 34 00     	ldy	#$34
  4172 09:C45E: F7 14        	sbc	[<L90+current_header_0],Y
  4173 09:C460: 90 03        	bcc	L141
  4174 09:C462: 82 06 00     	brl	L10050
  4175                        L141:
  4176                        	.line	444
  4177                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'EntryPointOffset' value (the value can't be larger than
                     the Segment size).\n",current_file->nb_segment+1);
  4178                        ;      return(1);
  4179                        	.line	446
  4180 09:C465: A9 01 00     	lda	#$1
  4181 09:C468: 82 9C F8     	brl	L95
  4182                        ;    }
  4183                        	.line	447
  4184                        ;
  4185                        ;  /* DispName offset devrait être 44 ($2C) */
  Thu Dec  3 2020 22:25                                                Page 79


  4186                        ;  if(current_header->DispNameOffset < SEGMENT_HEA
                    DER_MIN_SIZE_V1)
  4187                        L10050:
  4188                        	.line	450
  4189                        ;    {
  4190 09:C46B: 38           	sec
  4191 09:C46C: A0 36 00     	ldy	#$36
  4192 09:C46F: B7 14        	lda	[<L90+current_header_0],Y
  4193 09:C471: E9 2C 00     	sbc	#<$2c
  4194 09:C474: 70 03        	bvs	L142
  4195 09:C476: 49 00 80     	eor	#$8000
  4196                        L142:
  4197 09:C479: 10 03        	bpl	L143
  4198 09:C47B: 82 06 00     	brl	L10051
  4199                        L143:
  4200                        	.line	451
  4201                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'DispNameOffset' value (the value can't be smaller than 
                    the Segment Header size).\n",current_file->nb_segment+1);
  4202                        ;      return(1);
  4203                        	.line	453
  4204 09:C47E: A9 01 00     	lda	#$1
  4205 09:C481: 82 83 F8     	brl	L95
  4206                        ;    }
  4207                        	.line	454
  4208                        ;  if(current_header->DispNameOffset > current_hea
                    der->ByteCnt)
  4209                        L10051:
  4210                        	.line	455
  4211                        ;    {
  4212 09:C484: A0 00 00     	ldy	#$0
  4213 09:C487: 5A           	phy
  4214 09:C488: A0 36 00     	ldy	#$36
  4215 09:C48B: B7 14        	lda	[<L90+current_header_0],Y
  4216 09:C48D: 7A           	ply
  4217 09:C48E: 2A           	rol	A
  4218 09:C48F: 6A           	ror	A
  4219 09:C490: 10 01        	bpl	L144
  4220 09:C492: 88           	dey
  4221                        L144:
  4222 09:C493: 85 01        	sta	<R0
  4223 09:C495: 84 03        	sty	<R0+2
  4224 09:C497: A0 0C 00     	ldy	#$c
  4225 09:C49A: B7 14        	lda	[<L90+current_header_0],Y
  4226 09:C49C: C5 01        	cmp	<R0
  4227 09:C49E: A0 0E 00     	ldy	#$e
  4228 09:C4A1: B7 14        	lda	[<L90+current_header_0],Y
  4229 09:C4A3: E5 03        	sbc	<R0+2
  4230 09:C4A5: 90 03        	bcc	L145
  4231 09:C4A7: 82 06 00     	brl	L10052
  4232                        L145:
  4233                        	.line	456
  4234                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'DispNameOffset' value (the value can't be larger than t
                    he Segment size).\n",current_file->nb_segment+1);
  4235                        ;      return(1);
  4236                        	.line	458
  4237 09:C4AA: A9 01 00     	lda	#$1
  Thu Dec  3 2020 22:25                                                Page 80


  4238 09:C4AD: 82 57 F8     	brl	L95
  4239                        ;    }
  4240                        	.line	459
  4241                        ;
  4242                        ;  /* DispData offset devrait être 64 ($40) */
  4243                        ;  if(current_header->DispDataOffset < SEGMENT_HEA
                    DER_MIN_SIZE_V1)
  4244                        L10052:
  4245                        	.line	462
  4246                        ;    {
  4247 09:C4B0: 38           	sec
  4248 09:C4B1: A0 38 00     	ldy	#$38
  4249 09:C4B4: B7 14        	lda	[<L90+current_header_0],Y
  4250 09:C4B6: E9 2C 00     	sbc	#<$2c
  4251 09:C4B9: 70 03        	bvs	L146
  4252 09:C4BB: 49 00 80     	eor	#$8000
  4253                        L146:
  4254 09:C4BE: 10 03        	bpl	L147
  4255 09:C4C0: 82 06 00     	brl	L10053
  4256                        L147:
  4257                        	.line	463
  4258                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'DispDataOffset' value (the value can't be smaller than 
                    the Segment Header size).\n",current_file->nb_segment+1);
  4259                        ;      return(1);
  4260                        	.line	465
  4261 09:C4C3: A9 01 00     	lda	#$1
  4262 09:C4C6: 82 3E F8     	brl	L95
  4263                        ;    }
  4264                        	.line	466
  4265                        ;  if(current_header->DispNameOffset > current_hea
                    der->ByteCnt)
  4266                        L10053:
  4267                        	.line	467
  4268                        ;    {
  4269 09:C4C9: A0 00 00     	ldy	#$0
  4270 09:C4CC: 5A           	phy
  4271 09:C4CD: A0 36 00     	ldy	#$36
  4272 09:C4D0: B7 14        	lda	[<L90+current_header_0],Y
  4273 09:C4D2: 7A           	ply
  4274 09:C4D3: 2A           	rol	A
  4275 09:C4D4: 6A           	ror	A
  4276 09:C4D5: 10 01        	bpl	L148
  4277 09:C4D7: 88           	dey
  4278                        L148:
  4279 09:C4D8: 85 01        	sta	<R0
  4280 09:C4DA: 84 03        	sty	<R0+2
  4281 09:C4DC: A0 0C 00     	ldy	#$c
  4282 09:C4DF: B7 14        	lda	[<L90+current_header_0],Y
  4283 09:C4E1: C5 01        	cmp	<R0
  4284 09:C4E3: A0 0E 00     	ldy	#$e
  4285 09:C4E6: B7 14        	lda	[<L90+current_header_0],Y
  4286 09:C4E8: E5 03        	sbc	<R0+2
  4287 09:C4EA: 90 03        	bcc	L149
  4288 09:C4EC: 82 06 00     	brl	L10054
  4289                        L149:
  4290                        	.line	468
  4291                        ;      //printf("  Segment #%d Header Error : Inva
  Thu Dec  3 2020 22:25                                                Page 81


                    lid 'DispDataOffset' value (the value can't be larger than t
                    he Segment size).\n",current_file->nb_segment+1);
  4292                        ;      return(1);
  4293                        	.line	470
  4294 09:C4EF: A9 01 00     	lda	#$1
  4295 09:C4F2: 82 12 F8     	brl	L95
  4296                        ;    }
  4297                        	.line	471
  4298                        ;
  4299                        ;  /*********************************************/
  4300                        ;  /**  On va récupérer les données variables  **/
  4301                        ;  /*********************************************/
  4302                        ;  /* Noms */
  4303                        ;  memcpy(current_header->LoadName,&current_file->
                    data[data_offset+current_header->DispNameOffset],10);
  4304                        L10054:
  4305                        	.line	477
  4306 09:C4F5: F4 0A 00     	pea	#<$a
  4307 09:C4F8: 18           	clc
  4308 09:C4F9: A5 12        	lda	<L90+data_offset_0
  4309 09:C4FB: A0 36 00     	ldy	#$36
  4310 09:C4FE: 77 14        	adc	[<L90+current_header_0],Y
  4311 09:C500: 85 01        	sta	<R0
  4312 09:C502: A0 00 00     	ldy	#$0
  4313 09:C505: A5 01        	lda	<R0
  4314 09:C507: 10 01        	bpl	L150
  4315 09:C509: 88           	dey
  4316                        L150:
  4317 09:C50A: 85 01        	sta	<R0
  4318 09:C50C: 84 03        	sty	<R0+2
  4319 09:C50E: 18           	clc
  4320 09:C50F: A0 0A 00     	ldy	#$a
  4321 09:C512: B7 0E        	lda	[<L90+current_file_0],Y
  4322 09:C514: 65 01        	adc	<R0
  4323 09:C516: 85 05        	sta	<R1
  4324 09:C518: A0 0C 00     	ldy	#$c
  4325 09:C51B: B7 0E        	lda	[<L90+current_file_0],Y
  4326 09:C51D: 65 03        	adc	<R0+2
  4327 09:C51F: 85 07        	sta	<R1+2
  4328 09:C521: D4 07        	pei	<R1+2
  4329 09:C523: D4 05        	pei	<R1
  4330 09:C525: 18           	clc
  4331 09:C526: A9 3C 08     	lda	#$83c
  4332 09:C529: 65 14        	adc	<L90+current_header_0
  4333 09:C52B: 85 01        	sta	<R0
  4334 09:C52D: A9 00 00     	lda	#$0
  4335 09:C530: 65 16        	adc	<L90+current_header_0+2
  4336 09:C532: 85 03        	sta	<R0+2
  4337 09:C534: D4 03        	pei	<R0+2
  4338 09:C536: D4 01        	pei	<R0
  4339 09:C538: 22 xx xx xx  	jsl	~~memcpy
  4340                        ;  if(current_header->LabLen > 0)
  4341                        	.line	478
  4342                        ;    memcpy(current_header->SegName,&current_file-
                    >data[data_offset+current_header->DispNameOffset+10],current
                    _header->LabLen);
  4343 09:C53C: E2 20        	sep	#$20
  4344                        	longa	off
  Thu Dec  3 2020 22:25                                                Page 82


  4345 09:C53E: A9 00        	lda	#$0
  4346 09:C540: A0 1A 00     	ldy	#$1a
  4347 09:C543: D7 14        	cmp	[<L90+current_header_0],Y
  4348 09:C545: C2 20        	rep	#$20
  4349                        	longa	on
  4350 09:C547: 90 03        	bcc	L151
  4351 09:C549: 82 58 00     	brl	L10055
  4352                        L151:
  4353                        	.line	479
  4354 09:C54C: A0 1A 00     	ldy	#$1a
  4355 09:C54F: B7 14        	lda	[<L90+current_header_0],Y
  4356 09:C551: 29 FF 00     	and	#$ff
  4357 09:C554: 48           	pha
  4358 09:C555: 18           	clc
  4359 09:C556: A5 12        	lda	<L90+data_offset_0
  4360 09:C558: A0 36 00     	ldy	#$36
  4361 09:C55B: 77 14        	adc	[<L90+current_header_0],Y
  4362 09:C55D: 85 01        	sta	<R0
  4363 09:C55F: 18           	clc
  4364 09:C560: A9 0A 00     	lda	#$a
  4365 09:C563: 65 01        	adc	<R0
  4366 09:C565: 85 05        	sta	<R1
  4367 09:C567: A0 00 00     	ldy	#$0
  4368 09:C56A: A5 05        	lda	<R1
  4369 09:C56C: 10 01        	bpl	L152
  4370 09:C56E: 88           	dey
  4371                        L152:
  4372 09:C56F: 85 01        	sta	<R0
  4373 09:C571: 84 03        	sty	<R0+2
  4374 09:C573: 18           	clc
  4375 09:C574: A0 0A 00     	ldy	#$a
  4376 09:C577: B7 0E        	lda	[<L90+current_file_0],Y
  4377 09:C579: 65 01        	adc	<R0
  4378 09:C57B: 85 05        	sta	<R1
  4379 09:C57D: A0 0C 00     	ldy	#$c
  4380 09:C580: B7 0E        	lda	[<L90+current_file_0],Y
  4381 09:C582: 65 03        	adc	<R0+2
  4382 09:C584: 85 07        	sta	<R1+2
  4383 09:C586: D4 07        	pei	<R1+2
  4384 09:C588: D4 05        	pei	<R1
  4385 09:C58A: 18           	clc
  4386 09:C58B: A9 3C 09     	lda	#$93c
  4387 09:C58E: 65 14        	adc	<L90+current_header_0
  4388 09:C590: 85 01        	sta	<R0
  4389 09:C592: A9 00 00     	lda	#$0
  4390 09:C595: 65 16        	adc	<L90+current_header_0+2
  4391 09:C597: 85 03        	sta	<R0+2
  4392 09:C599: D4 03        	pei	<R0+2
  4393 09:C59B: D4 01        	pei	<R0
  4394 09:C59D: 22 xx xx xx  	jsl	~~memcpy
  4395                        ;  else
  4396 09:C5A1: 82 77 00     	brl	L10056
  4397                        L10055:
  4398                        ;    {
  4399                        	.line	481
  4400                        ;      /* La longueur est codée au début */
  4401                        ;      length = (int) current_file->data[data_offs
                    et+current_header->DispNameOffset+10];
  Thu Dec  3 2020 22:25                                                Page 83


  4402                        	.line	483
  4403 09:C5A4: 18           	clc
  4404 09:C5A5: A5 12        	lda	<L90+data_offset_0
  4405 09:C5A7: A0 36 00     	ldy	#$36
  4406 09:C5AA: 77 14        	adc	[<L90+current_header_0],Y
  4407 09:C5AC: 85 01        	sta	<R0
  4408 09:C5AE: 18           	clc
  4409 09:C5AF: A9 0A 00     	lda	#$a
  4410 09:C5B2: 65 01        	adc	<R0
  4411 09:C5B4: 85 05        	sta	<R1
  4412 09:C5B6: A0 0A 00     	ldy	#$a
  4413 09:C5B9: B7 0E        	lda	[<L90+current_file_0],Y
  4414 09:C5BB: 85 01        	sta	<R0
  4415 09:C5BD: A0 0C 00     	ldy	#$c
  4416 09:C5C0: B7 0E        	lda	[<L90+current_file_0],Y
  4417 09:C5C2: 85 03        	sta	<R0+2
  4418 09:C5C4: A4 05        	ldy	<R1
  4419 09:C5C6: B7 01        	lda	[<R0],Y
  4420 09:C5C8: 29 FF 00     	and	#$ff
  4421 09:C5CB: 85 09        	sta	<L91+length_1
  4422                        ;      memcpy(&current_header->SegName,&current_fi
                    le->data[data_offset+current_header->DispNameOffset+10+1],le
                    ngth);
  4423                        	.line	484
  4424 09:C5CD: D4 09        	pei	<L91+length_1
  4425 09:C5CF: 18           	clc
  4426 09:C5D0: A5 12        	lda	<L90+data_offset_0
  4427 09:C5D2: A0 36 00     	ldy	#$36
  4428 09:C5D5: 77 14        	adc	[<L90+current_header_0],Y
  4429 09:C5D7: 85 01        	sta	<R0
  4430 09:C5D9: 18           	clc
  4431 09:C5DA: A9 0B 00     	lda	#$b
  4432 09:C5DD: 65 01        	adc	<R0
  4433 09:C5DF: 85 05        	sta	<R1
  4434 09:C5E1: A0 00 00     	ldy	#$0
  4435 09:C5E4: A5 05        	lda	<R1
  4436 09:C5E6: 10 01        	bpl	L153
  4437 09:C5E8: 88           	dey
  4438                        L153:
  4439 09:C5E9: 85 01        	sta	<R0
  4440 09:C5EB: 84 03        	sty	<R0+2
  4441 09:C5ED: 18           	clc
  4442 09:C5EE: A0 0A 00     	ldy	#$a
  4443 09:C5F1: B7 0E        	lda	[<L90+current_file_0],Y
  4444 09:C5F3: 65 01        	adc	<R0
  4445 09:C5F5: 85 05        	sta	<R1
  4446 09:C5F7: A0 0C 00     	ldy	#$c
  4447 09:C5FA: B7 0E        	lda	[<L90+current_file_0],Y
  4448 09:C5FC: 65 03        	adc	<R0+2
  4449 09:C5FE: 85 07        	sta	<R1+2
  4450 09:C600: D4 07        	pei	<R1+2
  4451 09:C602: D4 05        	pei	<R1
  4452 09:C604: 18           	clc
  4453 09:C605: A9 3C 09     	lda	#$93c
  4454 09:C608: 65 14        	adc	<L90+current_header_0
  4455 09:C60A: 85 01        	sta	<R0
  4456 09:C60C: A9 00 00     	lda	#$0
  4457 09:C60F: 65 16        	adc	<L90+current_header_0+2
  Thu Dec  3 2020 22:25                                                Page 84


  4458 09:C611: 85 03        	sta	<R0+2
  4459 09:C613: D4 03        	pei	<R0+2
  4460 09:C615: D4 01        	pei	<R0
  4461 09:C617: 22 xx xx xx  	jsl	~~memcpy
  4462                        ;    }
  4463                        	.line	485
  4464                        L10056:
  4465                        ;
  4466                        ;  /* OK */
  4467                        ;  return(0);
  4468                        	.line	488
  4469 09:C61B: A9 00 00     	lda	#$0
  4470 09:C61E: 82 E6 F6     	brl	L95
  4471                        ;}
  4472                        	.line	489
  4473                        	.endblock	489
  4474             0000000A   L90	equ	10
  4475             00000009   L91	equ	9
  4476 09:C621:              	ends
  4477                        	efunc
  4478                        	.endfunc	489,9,10
  4479                        	.line	489
  4480                        ;
  4481                        ;
  4482                        ;/************************************************
                    ************/
  4483                        ;/*  DecodeSegmentHeaderV2() :  Décode le Header d
                    u Segment. */
  4484                        ;/************************************************
                    ************/
  4485                        ;static int DecodeSegmentHeaderV2(struct omf_file 
                    *current_file, int data_offset, struct omf_segment_header *c
                    urrent_header)
  4486                        ;{
  4487                        	.line	495
  4488                        	.line	496
  4489                        	LOADER
  4490                        	func
  4491                        	.function	496
  4492                        ~~DecodeSegmentHeaderV2:
  4493                        	longa	on
  4494                        	longi	on
  4495 09:C621: 3B           	tsc
  4496 09:C622: 38           	sec
  4497 09:C623: E9 0A 00     	sbc	#L154
  4498 09:C626: 1B           	tcs
  4499 09:C627: 0B           	phd
  4500 09:C628: 5B           	tcd
  4501             00000004   current_file_0	set	4
  4502             00000008   data_offset_0	set	8
  4503             0000000A   current_header_0	set	10
  4504                        	.block	496
  4505                        ;  int length;
  4506                        ;
  4507                        ;  /* Vérifie la taille */
  4508                        ;  if(data_offset + SEGMENT_HEADER_SIZE_V2 > curre
                    nt_file->data_length)
  4509             00000000   length_1	set	0
  Thu Dec  3 2020 22:25                                                Page 85


  4510                        	.sym	length,0,5,1,16
  4511                        	.sym	current_file,4,138,6,32,101
  4512                        	.sym	data_offset,8,5,6,16
  4513                        	.sym	current_header,10,138,6,32,99
  4514                        	.line	500
  4515                        ;    {
  4516 09:C629: 18           	clc
  4517 09:C62A: A9 40 00     	lda	#$40
  4518 09:C62D: 65 12        	adc	<L154+data_offset_0
  4519 09:C62F: 85 01        	sta	<R0
  4520 09:C631: 38           	sec
  4521 09:C632: A0 08 00     	ldy	#$8
  4522 09:C635: B7 0E        	lda	[<L154+current_file_0],Y
  4523 09:C637: E5 01        	sbc	<R0
  4524 09:C639: 70 03        	bvs	L157
  4525 09:C63B: 49 00 80     	eor	#$8000
  4526                        L157:
  4527 09:C63E: 10 03        	bpl	L158
  4528 09:C640: 82 15 00     	brl	L10057
  4529                        L158:
  4530                        	.line	501
  4531                        ;      //printf("  Error : Not enough data to enco
                    de a Segment Header (offset=%d, Segment #%d).\n",data_offset
                    ,current_file->nb_segment+1);
  4532                        ;      return(1);
  4533                        	.line	503
  4534 09:C643: A9 01 00     	lda	#$1
  4535                        L159:
  4536 09:C646: A8           	tay
  4537 09:C647: A5 0C        	lda	<L154+2
  4538 09:C649: 85 16        	sta	<L154+2+10
  4539 09:C64B: A5 0B        	lda	<L154+1
  4540 09:C64D: 85 15        	sta	<L154+1+10
  4541 09:C64F: 2B           	pld
  4542 09:C650: 3B           	tsc
  4543 09:C651: 18           	clc
  4544 09:C652: 69 14 00     	adc	#L154+10
  4545 09:C655: 1B           	tcs
  4546 09:C656: 98           	tya
  4547 09:C657: 6B           	rtl
  4548                        ;    }
  4549                        	.line	504
  4550                        ;
  4551                        ;  /**********************************************
                    *********/
  4552                        ;  /**  On va décoder tous les éléments fixes du H
                    eader  **/
  4553                        ;  /**********************************************
                    *********/
  4554                        ;  memcpy(&current_header->ByteCnt,&current_file->
                    data[data_offset+0x00],sizeof(DWORD));
  4555                        L10057:
  4556                        	.line	509
  4557 09:C658: F4 04 00     	pea	#<$4
  4558 09:C65B: A0 00 00     	ldy	#$0
  4559 09:C65E: A5 12        	lda	<L154+data_offset_0
  4560 09:C660: 10 01        	bpl	L160
  4561 09:C662: 88           	dey
  Thu Dec  3 2020 22:25                                                Page 86


  4562                        L160:
  4563 09:C663: 85 01        	sta	<R0
  4564 09:C665: 84 03        	sty	<R0+2
  4565 09:C667: 18           	clc
  4566 09:C668: A0 0A 00     	ldy	#$a
  4567 09:C66B: B7 0E        	lda	[<L154+current_file_0],Y
  4568 09:C66D: 65 01        	adc	<R0
  4569 09:C66F: 85 05        	sta	<R1
  4570 09:C671: A0 0C 00     	ldy	#$c
  4571 09:C674: B7 0E        	lda	[<L154+current_file_0],Y
  4572 09:C676: 65 03        	adc	<R0+2
  4573 09:C678: 85 07        	sta	<R1+2
  4574 09:C67A: D4 07        	pei	<R1+2
  4575 09:C67C: D4 05        	pei	<R1
  4576 09:C67E: 18           	clc
  4577 09:C67F: A9 0C 00     	lda	#$c
  4578 09:C682: 65 14        	adc	<L154+current_header_0
  4579 09:C684: 85 01        	sta	<R0
  4580 09:C686: A9 00 00     	lda	#$0
  4581 09:C689: 65 16        	adc	<L154+current_header_0+2
  4582 09:C68B: 85 03        	sta	<R0+2
  4583 09:C68D: D4 03        	pei	<R0+2
  4584 09:C68F: D4 01        	pei	<R0
  4585 09:C691: 22 xx xx xx  	jsl	~~memcpy
  4586                        ;  memcpy(&current_header->ResSpc,&current_file->d
                    ata[data_offset+0x04],sizeof(DWORD));
  4587                        	.line	510
  4588 09:C695: F4 04 00     	pea	#<$4
  4589 09:C698: 18           	clc
  4590 09:C699: A9 04 00     	lda	#$4
  4591 09:C69C: 65 12        	adc	<L154+data_offset_0
  4592 09:C69E: 85 01        	sta	<R0
  4593 09:C6A0: A0 00 00     	ldy	#$0
  4594 09:C6A3: A5 01        	lda	<R0
  4595 09:C6A5: 10 01        	bpl	L161
  4596 09:C6A7: 88           	dey
  4597                        L161:
  4598 09:C6A8: 85 01        	sta	<R0
  4599 09:C6AA: 84 03        	sty	<R0+2
  4600 09:C6AC: 18           	clc
  4601 09:C6AD: A0 0A 00     	ldy	#$a
  4602 09:C6B0: B7 0E        	lda	[<L154+current_file_0],Y
  4603 09:C6B2: 65 01        	adc	<R0
  4604 09:C6B4: 85 05        	sta	<R1
  4605 09:C6B6: A0 0C 00     	ldy	#$c
  4606 09:C6B9: B7 0E        	lda	[<L154+current_file_0],Y
  4607 09:C6BB: 65 03        	adc	<R0+2
  4608 09:C6BD: 85 07        	sta	<R1+2
  4609 09:C6BF: D4 07        	pei	<R1+2
  4610 09:C6C1: D4 05        	pei	<R1
  4611 09:C6C3: 18           	clc
  4612 09:C6C4: A9 10 00     	lda	#$10
  4613 09:C6C7: 65 14        	adc	<L154+current_header_0
  4614 09:C6C9: 85 01        	sta	<R0
  4615 09:C6CB: A9 00 00     	lda	#$0
  4616 09:C6CE: 65 16        	adc	<L154+current_header_0+2
  4617 09:C6D0: 85 03        	sta	<R0+2
  4618 09:C6D2: D4 03        	pei	<R0+2
  Thu Dec  3 2020 22:25                                                Page 87


  4619 09:C6D4: D4 01        	pei	<R0
  4620 09:C6D6: 22 xx xx xx  	jsl	~~memcpy
  4621                        ;  memcpy(&current_header->Length,&current_file->d
                    ata[data_offset+0x08],sizeof(DWORD));
  4622                        	.line	511
  4623 09:C6DA: F4 04 00     	pea	#<$4
  4624 09:C6DD: 18           	clc
  4625 09:C6DE: A9 08 00     	lda	#$8
  4626 09:C6E1: 65 12        	adc	<L154+data_offset_0
  4627 09:C6E3: 85 01        	sta	<R0
  4628 09:C6E5: A0 00 00     	ldy	#$0
  4629 09:C6E8: A5 01        	lda	<R0
  4630 09:C6EA: 10 01        	bpl	L162
  4631 09:C6EC: 88           	dey
  4632                        L162:
  4633 09:C6ED: 85 01        	sta	<R0
  4634 09:C6EF: 84 03        	sty	<R0+2
  4635 09:C6F1: 18           	clc
  4636 09:C6F2: A0 0A 00     	ldy	#$a
  4637 09:C6F5: B7 0E        	lda	[<L154+current_file_0],Y
  4638 09:C6F7: 65 01        	adc	<R0
  4639 09:C6F9: 85 05        	sta	<R1
  4640 09:C6FB: A0 0C 00     	ldy	#$c
  4641 09:C6FE: B7 0E        	lda	[<L154+current_file_0],Y
  4642 09:C700: 65 03        	adc	<R0+2
  4643 09:C702: 85 07        	sta	<R1+2
  4644 09:C704: D4 07        	pei	<R1+2
  4645 09:C706: D4 05        	pei	<R1
  4646 09:C708: 18           	clc
  4647 09:C709: A9 14 00     	lda	#$14
  4648 09:C70C: 65 14        	adc	<L154+current_header_0
  4649 09:C70E: 85 01        	sta	<R0
  4650 09:C710: A9 00 00     	lda	#$0
  4651 09:C713: 65 16        	adc	<L154+current_header_0+2
  4652 09:C715: 85 03        	sta	<R0+2
  4653 09:C717: D4 03        	pei	<R0+2
  4654 09:C719: D4 01        	pei	<R0
  4655 09:C71B: 22 xx xx xx  	jsl	~~memcpy
  4656                        ;  memcpy(&current_header->undefine_1,&current_fil
                    e->data[data_offset+0x0C],sizeof(BYTE));
  4657                        	.line	512
  4658 09:C71F: F4 01 00     	pea	#<$1
  4659 09:C722: 18           	clc
  4660 09:C723: A9 0C 00     	lda	#$c
  4661 09:C726: 65 12        	adc	<L154+data_offset_0
  4662 09:C728: 85 01        	sta	<R0
  4663 09:C72A: A0 00 00     	ldy	#$0
  4664 09:C72D: A5 01        	lda	<R0
  4665 09:C72F: 10 01        	bpl	L163
  4666 09:C731: 88           	dey
  4667                        L163:
  4668 09:C732: 85 01        	sta	<R0
  4669 09:C734: 84 03        	sty	<R0+2
  4670 09:C736: 18           	clc
  4671 09:C737: A0 0A 00     	ldy	#$a
  4672 09:C73A: B7 0E        	lda	[<L154+current_file_0],Y
  4673 09:C73C: 65 01        	adc	<R0
  4674 09:C73E: 85 05        	sta	<R1
  Thu Dec  3 2020 22:25                                                Page 88


  4675 09:C740: A0 0C 00     	ldy	#$c
  4676 09:C743: B7 0E        	lda	[<L154+current_file_0],Y
  4677 09:C745: 65 03        	adc	<R0+2
  4678 09:C747: 85 07        	sta	<R1+2
  4679 09:C749: D4 07        	pei	<R1+2
  4680 09:C74B: D4 05        	pei	<R1
  4681 09:C74D: 18           	clc
  4682 09:C74E: A9 19 00     	lda	#$19
  4683 09:C751: 65 14        	adc	<L154+current_header_0
  4684 09:C753: 85 01        	sta	<R0
  4685 09:C755: A9 00 00     	lda	#$0
  4686 09:C758: 65 16        	adc	<L154+current_header_0+2
  4687 09:C75A: 85 03        	sta	<R0+2
  4688 09:C75C: D4 03        	pei	<R0+2
  4689 09:C75E: D4 01        	pei	<R0
  4690 09:C760: 22 xx xx xx  	jsl	~~memcpy
  4691                        ;  memcpy(&current_header->LabLen,&current_file->d
                    ata[data_offset+0x0D],sizeof(BYTE));
  4692                        	.line	513
  4693 09:C764: F4 01 00     	pea	#<$1
  4694 09:C767: 18           	clc
  4695 09:C768: A9 0D 00     	lda	#$d
  4696 09:C76B: 65 12        	adc	<L154+data_offset_0
  4697 09:C76D: 85 01        	sta	<R0
  4698 09:C76F: A0 00 00     	ldy	#$0
  4699 09:C772: A5 01        	lda	<R0
  4700 09:C774: 10 01        	bpl	L164
  4701 09:C776: 88           	dey
  4702                        L164:
  4703 09:C777: 85 01        	sta	<R0
  4704 09:C779: 84 03        	sty	<R0+2
  4705 09:C77B: 18           	clc
  4706 09:C77C: A0 0A 00     	ldy	#$a
  4707 09:C77F: B7 0E        	lda	[<L154+current_file_0],Y
  4708 09:C781: 65 01        	adc	<R0
  4709 09:C783: 85 05        	sta	<R1
  4710 09:C785: A0 0C 00     	ldy	#$c
  4711 09:C788: B7 0E        	lda	[<L154+current_file_0],Y
  4712 09:C78A: 65 03        	adc	<R0+2
  4713 09:C78C: 85 07        	sta	<R1+2
  4714 09:C78E: D4 07        	pei	<R1+2
  4715 09:C790: D4 05        	pei	<R1
  4716 09:C792: 18           	clc
  4717 09:C793: A9 1A 00     	lda	#$1a
  4718 09:C796: 65 14        	adc	<L154+current_header_0
  4719 09:C798: 85 01        	sta	<R0
  4720 09:C79A: A9 00 00     	lda	#$0
  4721 09:C79D: 65 16        	adc	<L154+current_header_0+2
  4722 09:C79F: 85 03        	sta	<R0+2
  4723 09:C7A1: D4 03        	pei	<R0+2
  4724 09:C7A3: D4 01        	pei	<R0
  4725 09:C7A5: 22 xx xx xx  	jsl	~~memcpy
  4726                        ;  memcpy(&current_header->NumLen,&current_file->d
                    ata[data_offset+0x0E],sizeof(BYTE));
  4727                        	.line	514
  4728 09:C7A9: F4 01 00     	pea	#<$1
  4729 09:C7AC: 18           	clc
  4730 09:C7AD: A9 0E 00     	lda	#$e
  Thu Dec  3 2020 22:25                                                Page 89


  4731 09:C7B0: 65 12        	adc	<L154+data_offset_0
  4732 09:C7B2: 85 01        	sta	<R0
  4733 09:C7B4: A0 00 00     	ldy	#$0
  4734 09:C7B7: A5 01        	lda	<R0
  4735 09:C7B9: 10 01        	bpl	L165
  4736 09:C7BB: 88           	dey
  4737                        L165:
  4738 09:C7BC: 85 01        	sta	<R0
  4739 09:C7BE: 84 03        	sty	<R0+2
  4740 09:C7C0: 18           	clc
  4741 09:C7C1: A0 0A 00     	ldy	#$a
  4742 09:C7C4: B7 0E        	lda	[<L154+current_file_0],Y
  4743 09:C7C6: 65 01        	adc	<R0
  4744 09:C7C8: 85 05        	sta	<R1
  4745 09:C7CA: A0 0C 00     	ldy	#$c
  4746 09:C7CD: B7 0E        	lda	[<L154+current_file_0],Y
  4747 09:C7CF: 65 03        	adc	<R0+2
  4748 09:C7D1: 85 07        	sta	<R1+2
  4749 09:C7D3: D4 07        	pei	<R1+2
  4750 09:C7D5: D4 05        	pei	<R1
  4751 09:C7D7: 18           	clc
  4752 09:C7D8: A9 1B 00     	lda	#$1b
  4753 09:C7DB: 65 14        	adc	<L154+current_header_0
  4754 09:C7DD: 85 01        	sta	<R0
  4755 09:C7DF: A9 00 00     	lda	#$0
  4756 09:C7E2: 65 16        	adc	<L154+current_header_0+2
  4757 09:C7E4: 85 03        	sta	<R0+2
  4758 09:C7E6: D4 03        	pei	<R0+2
  4759 09:C7E8: D4 01        	pei	<R0
  4760 09:C7EA: 22 xx xx xx  	jsl	~~memcpy
  4761                        ;  memcpy(&current_header->BankSize,&current_file-
                    >data[data_offset+0x10],sizeof(DWORD));
  4762                        	.line	515
  4763 09:C7EE: F4 04 00     	pea	#<$4
  4764 09:C7F1: 18           	clc
  4765 09:C7F2: A9 10 00     	lda	#$10
  4766 09:C7F5: 65 12        	adc	<L154+data_offset_0
  4767 09:C7F7: 85 01        	sta	<R0
  4768 09:C7F9: A0 00 00     	ldy	#$0
  4769 09:C7FC: A5 01        	lda	<R0
  4770 09:C7FE: 10 01        	bpl	L166
  4771 09:C800: 88           	dey
  4772                        L166:
  4773 09:C801: 85 01        	sta	<R0
  4774 09:C803: 84 03        	sty	<R0+2
  4775 09:C805: 18           	clc
  4776 09:C806: A0 0A 00     	ldy	#$a
  4777 09:C809: B7 0E        	lda	[<L154+current_file_0],Y
  4778 09:C80B: 65 01        	adc	<R0
  4779 09:C80D: 85 05        	sta	<R1
  4780 09:C80F: A0 0C 00     	ldy	#$c
  4781 09:C812: B7 0E        	lda	[<L154+current_file_0],Y
  4782 09:C814: 65 03        	adc	<R0+2
  4783 09:C816: 85 07        	sta	<R1+2
  4784 09:C818: D4 07        	pei	<R1+2
  4785 09:C81A: D4 05        	pei	<R1
  4786 09:C81C: 18           	clc
  4787 09:C81D: A9 1D 00     	lda	#$1d
  Thu Dec  3 2020 22:25                                                Page 90


  4788 09:C820: 65 14        	adc	<L154+current_header_0
  4789 09:C822: 85 01        	sta	<R0
  4790 09:C824: A9 00 00     	lda	#$0
  4791 09:C827: 65 16        	adc	<L154+current_header_0+2
  4792 09:C829: 85 03        	sta	<R0+2
  4793 09:C82B: D4 03        	pei	<R0+2
  4794 09:C82D: D4 01        	pei	<R0
  4795 09:C82F: 22 xx xx xx  	jsl	~~memcpy
  4796                        ;  memcpy(&current_header->Kind,&current_file->dat
                    a[data_offset+0x14],sizeof(WORD));
  4797                        	.line	516
  4798 09:C833: F4 02 00     	pea	#<$2
  4799 09:C836: 18           	clc
  4800 09:C837: A9 14 00     	lda	#$14
  4801 09:C83A: 65 12        	adc	<L154+data_offset_0
  4802 09:C83C: 85 01        	sta	<R0
  4803 09:C83E: A0 00 00     	ldy	#$0
  4804 09:C841: A5 01        	lda	<R0
  4805 09:C843: 10 01        	bpl	L167
  4806 09:C845: 88           	dey
  4807                        L167:
  4808 09:C846: 85 01        	sta	<R0
  4809 09:C848: 84 03        	sty	<R0+2
  4810 09:C84A: 18           	clc
  4811 09:C84B: A0 0A 00     	ldy	#$a
  4812 09:C84E: B7 0E        	lda	[<L154+current_file_0],Y
  4813 09:C850: 65 01        	adc	<R0
  4814 09:C852: 85 05        	sta	<R1
  4815 09:C854: A0 0C 00     	ldy	#$c
  4816 09:C857: B7 0E        	lda	[<L154+current_file_0],Y
  4817 09:C859: 65 03        	adc	<R0+2
  4818 09:C85B: 85 07        	sta	<R1+2
  4819 09:C85D: D4 07        	pei	<R1+2
  4820 09:C85F: D4 05        	pei	<R1
  4821 09:C861: 18           	clc
  4822 09:C862: A9 21 00     	lda	#$21
  4823 09:C865: 65 14        	adc	<L154+current_header_0
  4824 09:C867: 85 01        	sta	<R0
  4825 09:C869: A9 00 00     	lda	#$0
  4826 09:C86C: 65 16        	adc	<L154+current_header_0+2
  4827 09:C86E: 85 03        	sta	<R0+2
  4828 09:C870: D4 03        	pei	<R0+2
  4829 09:C872: D4 01        	pei	<R0
  4830 09:C874: 22 xx xx xx  	jsl	~~memcpy
  4831                        ;  memcpy(&current_header->undefine_2,&current_fil
                    e->data[data_offset+0x16],sizeof(BYTE));
  4832                        	.line	517
  4833 09:C878: F4 01 00     	pea	#<$1
  4834 09:C87B: 18           	clc
  4835 09:C87C: A9 16 00     	lda	#$16
  4836 09:C87F: 65 12        	adc	<L154+data_offset_0
  4837 09:C881: 85 01        	sta	<R0
  4838 09:C883: A0 00 00     	ldy	#$0
  4839 09:C886: A5 01        	lda	<R0
  4840 09:C888: 10 01        	bpl	L168
  4841 09:C88A: 88           	dey
  4842                        L168:
  4843 09:C88B: 85 01        	sta	<R0
  Thu Dec  3 2020 22:25                                                Page 91


  4844 09:C88D: 84 03        	sty	<R0+2
  4845 09:C88F: 18           	clc
  4846 09:C890: A0 0A 00     	ldy	#$a
  4847 09:C893: B7 0E        	lda	[<L154+current_file_0],Y
  4848 09:C895: 65 01        	adc	<R0
  4849 09:C897: 85 05        	sta	<R1
  4850 09:C899: A0 0C 00     	ldy	#$c
  4851 09:C89C: B7 0E        	lda	[<L154+current_file_0],Y
  4852 09:C89E: 65 03        	adc	<R0+2
  4853 09:C8A0: 85 07        	sta	<R1+2
  4854 09:C8A2: D4 07        	pei	<R1+2
  4855 09:C8A4: D4 05        	pei	<R1
  4856 09:C8A6: 18           	clc
  4857 09:C8A7: A9 23 00     	lda	#$23
  4858 09:C8AA: 65 14        	adc	<L154+current_header_0
  4859 09:C8AC: 85 01        	sta	<R0
  4860 09:C8AE: A9 00 00     	lda	#$0
  4861 09:C8B1: 65 16        	adc	<L154+current_header_0+2
  4862 09:C8B3: 85 03        	sta	<R0+2
  4863 09:C8B5: D4 03        	pei	<R0+2
  4864 09:C8B7: D4 01        	pei	<R0
  4865 09:C8B9: 22 xx xx xx  	jsl	~~memcpy
  4866                        ;  memcpy(&current_header->undefine_3,&current_fil
                    e->data[data_offset+0x17],sizeof(BYTE));
  4867                        	.line	518
  4868 09:C8BD: F4 01 00     	pea	#<$1
  4869 09:C8C0: 18           	clc
  4870 09:C8C1: A9 17 00     	lda	#$17
  4871 09:C8C4: 65 12        	adc	<L154+data_offset_0
  4872 09:C8C6: 85 01        	sta	<R0
  4873 09:C8C8: A0 00 00     	ldy	#$0
  4874 09:C8CB: A5 01        	lda	<R0
  4875 09:C8CD: 10 01        	bpl	L169
  4876 09:C8CF: 88           	dey
  4877                        L169:
  4878 09:C8D0: 85 01        	sta	<R0
  4879 09:C8D2: 84 03        	sty	<R0+2
  4880 09:C8D4: 18           	clc
  4881 09:C8D5: A0 0A 00     	ldy	#$a
  4882 09:C8D8: B7 0E        	lda	[<L154+current_file_0],Y
  4883 09:C8DA: 65 01        	adc	<R0
  4884 09:C8DC: 85 05        	sta	<R1
  4885 09:C8DE: A0 0C 00     	ldy	#$c
  4886 09:C8E1: B7 0E        	lda	[<L154+current_file_0],Y
  4887 09:C8E3: 65 03        	adc	<R0+2
  4888 09:C8E5: 85 07        	sta	<R1+2
  4889 09:C8E7: D4 07        	pei	<R1+2
  4890 09:C8E9: D4 05        	pei	<R1
  4891 09:C8EB: 18           	clc
  4892 09:C8EC: A9 24 00     	lda	#$24
  4893 09:C8EF: 65 14        	adc	<L154+current_header_0
  4894 09:C8F1: 85 01        	sta	<R0
  4895 09:C8F3: A9 00 00     	lda	#$0
  4896 09:C8F6: 65 16        	adc	<L154+current_header_0+2
  4897 09:C8F8: 85 03        	sta	<R0+2
  4898 09:C8FA: D4 03        	pei	<R0+2
  4899 09:C8FC: D4 01        	pei	<R0
  4900 09:C8FE: 22 xx xx xx  	jsl	~~memcpy
  Thu Dec  3 2020 22:25                                                Page 92


  4901                        ;  memcpy(&current_header->Org,&current_file->data
                    [data_offset+0x18],sizeof(DWORD));
  4902                        	.line	519
  4903 09:C902: F4 04 00     	pea	#<$4
  4904 09:C905: 18           	clc
  4905 09:C906: A9 18 00     	lda	#$18
  4906 09:C909: 65 12        	adc	<L154+data_offset_0
  4907 09:C90B: 85 01        	sta	<R0
  4908 09:C90D: A0 00 00     	ldy	#$0
  4909 09:C910: A5 01        	lda	<R0
  4910 09:C912: 10 01        	bpl	L170
  4911 09:C914: 88           	dey
  4912                        L170:
  4913 09:C915: 85 01        	sta	<R0
  4914 09:C917: 84 03        	sty	<R0+2
  4915 09:C919: 18           	clc
  4916 09:C91A: A0 0A 00     	ldy	#$a
  4917 09:C91D: B7 0E        	lda	[<L154+current_file_0],Y
  4918 09:C91F: 65 01        	adc	<R0
  4919 09:C921: 85 05        	sta	<R1
  4920 09:C923: A0 0C 00     	ldy	#$c
  4921 09:C926: B7 0E        	lda	[<L154+current_file_0],Y
  4922 09:C928: 65 03        	adc	<R0+2
  4923 09:C92A: 85 07        	sta	<R1+2
  4924 09:C92C: D4 07        	pei	<R1+2
  4925 09:C92E: D4 05        	pei	<R1
  4926 09:C930: 18           	clc
  4927 09:C931: A9 25 00     	lda	#$25
  4928 09:C934: 65 14        	adc	<L154+current_header_0
  4929 09:C936: 85 01        	sta	<R0
  4930 09:C938: A9 00 00     	lda	#$0
  4931 09:C93B: 65 16        	adc	<L154+current_header_0+2
  4932 09:C93D: 85 03        	sta	<R0+2
  4933 09:C93F: D4 03        	pei	<R0+2
  4934 09:C941: D4 01        	pei	<R0
  4935 09:C943: 22 xx xx xx  	jsl	~~memcpy
  4936                        ;  memcpy(&current_header->Align,&current_file->da
                    ta[data_offset+0x1C],sizeof(DWORD));
  4937                        	.line	520
  4938 09:C947: F4 04 00     	pea	#<$4
  4939 09:C94A: 18           	clc
  4940 09:C94B: A9 1C 00     	lda	#$1c
  4941 09:C94E: 65 12        	adc	<L154+data_offset_0
  4942 09:C950: 85 01        	sta	<R0
  4943 09:C952: A0 00 00     	ldy	#$0
  4944 09:C955: A5 01        	lda	<R0
  4945 09:C957: 10 01        	bpl	L171
  4946 09:C959: 88           	dey
  4947                        L171:
  4948 09:C95A: 85 01        	sta	<R0
  4949 09:C95C: 84 03        	sty	<R0+2
  4950 09:C95E: 18           	clc
  4951 09:C95F: A0 0A 00     	ldy	#$a
  4952 09:C962: B7 0E        	lda	[<L154+current_file_0],Y
  4953 09:C964: 65 01        	adc	<R0
  4954 09:C966: 85 05        	sta	<R1
  4955 09:C968: A0 0C 00     	ldy	#$c
  4956 09:C96B: B7 0E        	lda	[<L154+current_file_0],Y
  Thu Dec  3 2020 22:25                                                Page 93


  4957 09:C96D: 65 03        	adc	<R0+2
  4958 09:C96F: 85 07        	sta	<R1+2
  4959 09:C971: D4 07        	pei	<R1+2
  4960 09:C973: D4 05        	pei	<R1
  4961 09:C975: 18           	clc
  4962 09:C976: A9 29 00     	lda	#$29
  4963 09:C979: 65 14        	adc	<L154+current_header_0
  4964 09:C97B: 85 01        	sta	<R0
  4965 09:C97D: A9 00 00     	lda	#$0
  4966 09:C980: 65 16        	adc	<L154+current_header_0+2
  4967 09:C982: 85 03        	sta	<R0+2
  4968 09:C984: D4 03        	pei	<R0+2
  4969 09:C986: D4 01        	pei	<R0
  4970 09:C988: 22 xx xx xx  	jsl	~~memcpy
  4971                        ;  memcpy(&current_header->NumSEx,&current_file->d
                    ata[data_offset+0x20],sizeof(BYTE));
  4972                        	.line	521
  4973 09:C98C: F4 01 00     	pea	#<$1
  4974 09:C98F: 18           	clc
  4975 09:C990: A9 20 00     	lda	#$20
  4976 09:C993: 65 12        	adc	<L154+data_offset_0
  4977 09:C995: 85 01        	sta	<R0
  4978 09:C997: A0 00 00     	ldy	#$0
  4979 09:C99A: A5 01        	lda	<R0
  4980 09:C99C: 10 01        	bpl	L172
  4981 09:C99E: 88           	dey
  4982                        L172:
  4983 09:C99F: 85 01        	sta	<R0
  4984 09:C9A1: 84 03        	sty	<R0+2
  4985 09:C9A3: 18           	clc
  4986 09:C9A4: A0 0A 00     	ldy	#$a
  4987 09:C9A7: B7 0E        	lda	[<L154+current_file_0],Y
  4988 09:C9A9: 65 01        	adc	<R0
  4989 09:C9AB: 85 05        	sta	<R1
  4990 09:C9AD: A0 0C 00     	ldy	#$c
  4991 09:C9B0: B7 0E        	lda	[<L154+current_file_0],Y
  4992 09:C9B2: 65 03        	adc	<R0+2
  4993 09:C9B4: 85 07        	sta	<R1+2
  4994 09:C9B6: D4 07        	pei	<R1+2
  4995 09:C9B8: D4 05        	pei	<R1
  4996 09:C9BA: 18           	clc
  4997 09:C9BB: A9 2D 00     	lda	#$2d
  4998 09:C9BE: 65 14        	adc	<L154+current_header_0
  4999 09:C9C0: 85 01        	sta	<R0
  5000 09:C9C2: A9 00 00     	lda	#$0
  5001 09:C9C5: 65 16        	adc	<L154+current_header_0+2
  5002 09:C9C7: 85 03        	sta	<R0+2
  5003 09:C9C9: D4 03        	pei	<R0+2
  5004 09:C9CB: D4 01        	pei	<R0
  5005 09:C9CD: 22 xx xx xx  	jsl	~~memcpy
  5006                        ;  memcpy(&current_header->undefine_4,&current_fil
                    e->data[data_offset+0x21],sizeof(BYTE));
  5007                        	.line	522
  5008 09:C9D1: F4 01 00     	pea	#<$1
  5009 09:C9D4: 18           	clc
  5010 09:C9D5: A9 21 00     	lda	#$21
  5011 09:C9D8: 65 12        	adc	<L154+data_offset_0
  5012 09:C9DA: 85 01        	sta	<R0
  Thu Dec  3 2020 22:25                                                Page 94


  5013 09:C9DC: A0 00 00     	ldy	#$0
  5014 09:C9DF: A5 01        	lda	<R0
  5015 09:C9E1: 10 01        	bpl	L173
  5016 09:C9E3: 88           	dey
  5017                        L173:
  5018 09:C9E4: 85 01        	sta	<R0
  5019 09:C9E6: 84 03        	sty	<R0+2
  5020 09:C9E8: 18           	clc
  5021 09:C9E9: A0 0A 00     	ldy	#$a
  5022 09:C9EC: B7 0E        	lda	[<L154+current_file_0],Y
  5023 09:C9EE: 65 01        	adc	<R0
  5024 09:C9F0: 85 05        	sta	<R1
  5025 09:C9F2: A0 0C 00     	ldy	#$c
  5026 09:C9F5: B7 0E        	lda	[<L154+current_file_0],Y
  5027 09:C9F7: 65 03        	adc	<R0+2
  5028 09:C9F9: 85 07        	sta	<R1+2
  5029 09:C9FB: D4 07        	pei	<R1+2
  5030 09:C9FD: D4 05        	pei	<R1
  5031 09:C9FF: 18           	clc
  5032 09:CA00: A9 2F 00     	lda	#$2f
  5033 09:CA03: 65 14        	adc	<L154+current_header_0
  5034 09:CA05: 85 01        	sta	<R0
  5035 09:CA07: A9 00 00     	lda	#$0
  5036 09:CA0A: 65 16        	adc	<L154+current_header_0+2
  5037 09:CA0C: 85 03        	sta	<R0+2
  5038 09:CA0E: D4 03        	pei	<R0+2
  5039 09:CA10: D4 01        	pei	<R0
  5040 09:CA12: 22 xx xx xx  	jsl	~~memcpy
  5041                        ;  memcpy(&current_header->SegNum,&current_file->d
                    ata[data_offset+0x22],sizeof(WORD));
  5042                        	.line	523
  5043 09:CA16: F4 02 00     	pea	#<$2
  5044 09:CA19: 18           	clc
  5045 09:CA1A: A9 22 00     	lda	#$22
  5046 09:CA1D: 65 12        	adc	<L154+data_offset_0
  5047 09:CA1F: 85 01        	sta	<R0
  5048 09:CA21: A0 00 00     	ldy	#$0
  5049 09:CA24: A5 01        	lda	<R0
  5050 09:CA26: 10 01        	bpl	L174
  5051 09:CA28: 88           	dey
  5052                        L174:
  5053 09:CA29: 85 01        	sta	<R0
  5054 09:CA2B: 84 03        	sty	<R0+2
  5055 09:CA2D: 18           	clc
  5056 09:CA2E: A0 0A 00     	ldy	#$a
  5057 09:CA31: B7 0E        	lda	[<L154+current_file_0],Y
  5058 09:CA33: 65 01        	adc	<R0
  5059 09:CA35: 85 05        	sta	<R1
  5060 09:CA37: A0 0C 00     	ldy	#$c
  5061 09:CA3A: B7 0E        	lda	[<L154+current_file_0],Y
  5062 09:CA3C: 65 03        	adc	<R0+2
  5063 09:CA3E: 85 07        	sta	<R1+2
  5064 09:CA40: D4 07        	pei	<R1+2
  5065 09:CA42: D4 05        	pei	<R1
  5066 09:CA44: 18           	clc
  5067 09:CA45: A9 30 00     	lda	#$30
  5068 09:CA48: 65 14        	adc	<L154+current_header_0
  5069 09:CA4A: 85 01        	sta	<R0
  Thu Dec  3 2020 22:25                                                Page 95


  5070 09:CA4C: A9 00 00     	lda	#$0
  5071 09:CA4F: 65 16        	adc	<L154+current_header_0+2
  5072 09:CA51: 85 03        	sta	<R0+2
  5073 09:CA53: D4 03        	pei	<R0+2
  5074 09:CA55: D4 01        	pei	<R0
  5075 09:CA57: 22 xx xx xx  	jsl	~~memcpy
  5076                        ;  memcpy(&current_header->EntryPointOffset,&curre
                    nt_file->data[data_offset+0x24],sizeof(DWORD));
  5077                        	.line	524
  5078 09:CA5B: F4 04 00     	pea	#<$4
  5079 09:CA5E: 18           	clc
  5080 09:CA5F: A9 24 00     	lda	#$24
  5081 09:CA62: 65 12        	adc	<L154+data_offset_0
  5082 09:CA64: 85 01        	sta	<R0
  5083 09:CA66: A0 00 00     	ldy	#$0
  5084 09:CA69: A5 01        	lda	<R0
  5085 09:CA6B: 10 01        	bpl	L175
  5086 09:CA6D: 88           	dey
  5087                        L175:
  5088 09:CA6E: 85 01        	sta	<R0
  5089 09:CA70: 84 03        	sty	<R0+2
  5090 09:CA72: 18           	clc
  5091 09:CA73: A0 0A 00     	ldy	#$a
  5092 09:CA76: B7 0E        	lda	[<L154+current_file_0],Y
  5093 09:CA78: 65 01        	adc	<R0
  5094 09:CA7A: 85 05        	sta	<R1
  5095 09:CA7C: A0 0C 00     	ldy	#$c
  5096 09:CA7F: B7 0E        	lda	[<L154+current_file_0],Y
  5097 09:CA81: 65 03        	adc	<R0+2
  5098 09:CA83: 85 07        	sta	<R1+2
  5099 09:CA85: D4 07        	pei	<R1+2
  5100 09:CA87: D4 05        	pei	<R1
  5101 09:CA89: 18           	clc
  5102 09:CA8A: A9 32 00     	lda	#$32
  5103 09:CA8D: 65 14        	adc	<L154+current_header_0
  5104 09:CA8F: 85 01        	sta	<R0
  5105 09:CA91: A9 00 00     	lda	#$0
  5106 09:CA94: 65 16        	adc	<L154+current_header_0+2
  5107 09:CA96: 85 03        	sta	<R0+2
  5108 09:CA98: D4 03        	pei	<R0+2
  5109 09:CA9A: D4 01        	pei	<R0
  5110 09:CA9C: 22 xx xx xx  	jsl	~~memcpy
  5111                        ;  memcpy(&current_header->DispNameOffset,&current
                    _file->data[data_offset+0x28],sizeof(WORD));       /* Load N
                    ame Offset */
  5112                        	.line	525
  5113 09:CAA0: F4 02 00     	pea	#<$2
  5114 09:CAA3: 18           	clc
  5115 09:CAA4: A9 28 00     	lda	#$28
  5116 09:CAA7: 65 12        	adc	<L154+data_offset_0
  5117 09:CAA9: 85 01        	sta	<R0
  5118 09:CAAB: A0 00 00     	ldy	#$0
  5119 09:CAAE: A5 01        	lda	<R0
  5120 09:CAB0: 10 01        	bpl	L176
  5121 09:CAB2: 88           	dey
  5122                        L176:
  5123 09:CAB3: 85 01        	sta	<R0
  5124 09:CAB5: 84 03        	sty	<R0+2
  Thu Dec  3 2020 22:25                                                Page 96


  5125 09:CAB7: 18           	clc
  5126 09:CAB8: A0 0A 00     	ldy	#$a
  5127 09:CABB: B7 0E        	lda	[<L154+current_file_0],Y
  5128 09:CABD: 65 01        	adc	<R0
  5129 09:CABF: 85 05        	sta	<R1
  5130 09:CAC1: A0 0C 00     	ldy	#$c
  5131 09:CAC4: B7 0E        	lda	[<L154+current_file_0],Y
  5132 09:CAC6: 65 03        	adc	<R0+2
  5133 09:CAC8: 85 07        	sta	<R1+2
  5134 09:CACA: D4 07        	pei	<R1+2
  5135 09:CACC: D4 05        	pei	<R1
  5136 09:CACE: 18           	clc
  5137 09:CACF: A9 36 00     	lda	#$36
  5138 09:CAD2: 65 14        	adc	<L154+current_header_0
  5139 09:CAD4: 85 01        	sta	<R0
  5140 09:CAD6: A9 00 00     	lda	#$0
  5141 09:CAD9: 65 16        	adc	<L154+current_header_0+2
  5142 09:CADB: 85 03        	sta	<R0+2
  5143 09:CADD: D4 03        	pei	<R0+2
  5144 09:CADF: D4 01        	pei	<R0
  5145 09:CAE1: 22 xx xx xx  	jsl	~~memcpy
  5146                        ;  memcpy(&current_header->DispDataOffset,&current
                    _file->data[data_offset+0x2A],sizeof(WORD));       /* Segmen
                    t Name Offset */
  5147                        	.line	526
  5148 09:CAE5: F4 02 00     	pea	#<$2
  5149 09:CAE8: 18           	clc
  5150 09:CAE9: A9 2A 00     	lda	#$2a
  5151 09:CAEC: 65 12        	adc	<L154+data_offset_0
  5152 09:CAEE: 85 01        	sta	<R0
  5153 09:CAF0: A0 00 00     	ldy	#$0
  5154 09:CAF3: A5 01        	lda	<R0
  5155 09:CAF5: 10 01        	bpl	L177
  5156 09:CAF7: 88           	dey
  5157                        L177:
  5158 09:CAF8: 85 01        	sta	<R0
  5159 09:CAFA: 84 03        	sty	<R0+2
  5160 09:CAFC: 18           	clc
  5161 09:CAFD: A0 0A 00     	ldy	#$a
  5162 09:CB00: B7 0E        	lda	[<L154+current_file_0],Y
  5163 09:CB02: 65 01        	adc	<R0
  5164 09:CB04: 85 05        	sta	<R1
  5165 09:CB06: A0 0C 00     	ldy	#$c
  5166 09:CB09: B7 0E        	lda	[<L154+current_file_0],Y
  5167 09:CB0B: 65 03        	adc	<R0+2
  5168 09:CB0D: 85 07        	sta	<R1+2
  5169 09:CB0F: D4 07        	pei	<R1+2
  5170 09:CB11: D4 05        	pei	<R1
  5171 09:CB13: 18           	clc
  5172 09:CB14: A9 38 00     	lda	#$38
  5173 09:CB17: 65 14        	adc	<L154+current_header_0
  5174 09:CB19: 85 01        	sta	<R0
  5175 09:CB1B: A9 00 00     	lda	#$0
  5176 09:CB1E: 65 16        	adc	<L154+current_header_0+2
  5177 09:CB20: 85 03        	sta	<R0+2
  5178 09:CB22: D4 03        	pei	<R0+2
  5179 09:CB24: D4 01        	pei	<R0
  5180 09:CB26: 22 xx xx xx  	jsl	~~memcpy
  Thu Dec  3 2020 22:25                                                Page 97


  5181                        ;
  5182                        ;  /********************************************/
  5183                        ;  /**  On va valider les données récupérées  **/
  5184                        ;  /********************************************/
  5185                        ;  /* Taille du Segment */
  5186                        ;  if((int)(data_offset + current_header->ByteCnt)
                     > (int) current_file->data_length)
  5187                        	.line	532
  5188                        ;    {
  5189 09:CB2A: A0 00 00     	ldy	#$0
  5190 09:CB2D: A5 12        	lda	<L154+data_offset_0
  5191 09:CB2F: 10 01        	bpl	L178
  5192 09:CB31: 88           	dey
  5193                        L178:
  5194 09:CB32: 85 01        	sta	<R0
  5195 09:CB34: 84 03        	sty	<R0+2
  5196 09:CB36: 18           	clc
  5197 09:CB37: A5 01        	lda	<R0
  5198 09:CB39: A0 0C 00     	ldy	#$c
  5199 09:CB3C: 77 14        	adc	[<L154+current_header_0],Y
  5200 09:CB3E: 85 05        	sta	<R1
  5201 09:CB40: A5 03        	lda	<R0+2
  5202 09:CB42: A0 0E 00     	ldy	#$e
  5203 09:CB45: 77 14        	adc	[<L154+current_header_0],Y
  5204 09:CB47: 85 07        	sta	<R1+2
  5205 09:CB49: 38           	sec
  5206 09:CB4A: A0 08 00     	ldy	#$8
  5207 09:CB4D: B7 0E        	lda	[<L154+current_file_0],Y
  5208 09:CB4F: E5 05        	sbc	<R1
  5209 09:CB51: 70 03        	bvs	L179
  5210 09:CB53: 49 00 80     	eor	#$8000
  5211                        L179:
  5212 09:CB56: 10 03        	bpl	L180
  5213 09:CB58: 82 06 00     	brl	L10058
  5214                        L180:
  5215                        	.line	533
  5216                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'ByteCnt' value (the segment size can't be larger than t
                    he OMF file).\n",current_file->nb_segment+1);
  5217                        ;      return(1);
  5218                        	.line	535
  5219 09:CB5B: A9 01 00     	lda	#$1
  5220 09:CB5E: 82 E5 FA     	brl	L159
  5221                        ;    }
  5222                        	.line	536
  5223                        ;  if(current_header->ByteCnt < SEGMENT_HEADER_SIZ
                    E_V2)
  5224                        L10058:
  5225                        	.line	537
  5226                        ;    {
  5227 09:CB61: A0 0C 00     	ldy	#$c
  5228 09:CB64: B7 14        	lda	[<L154+current_header_0],Y
  5229 09:CB66: C9 40 00     	cmp	#<$40
  5230 09:CB69: A0 0E 00     	ldy	#$e
  5231 09:CB6C: B7 14        	lda	[<L154+current_header_0],Y
  5232 09:CB6E: E9 00 00     	sbc	#^$40
  5233 09:CB71: 90 03        	bcc	L181
  5234 09:CB73: 82 06 00     	brl	L10059
  Thu Dec  3 2020 22:25                                                Page 98


  5235                        L181:
  5236                        	.line	538
  5237                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'ByteCnt' value (the segment size can't be smaller than 
                    the Sgement Header size).\n",current_file->nb_segment+1);
  5238                        ;      return(1);
  5239                        	.line	540
  5240 09:CB76: A9 01 00     	lda	#$1
  5241 09:CB79: 82 CA FA     	brl	L159
  5242                        ;    }
  5243                        	.line	541
  5244                        ;
  5245                        ;  /* Nombre de 0x00 à ajouter à la fin */
  5246                        ;  if(current_header->ResSpc >= 0x010000)
  5247                        L10059:
  5248                        	.line	544
  5249                        ;    {
  5250 09:CB7C: A0 10 00     	ldy	#$10
  5251 09:CB7F: B7 14        	lda	[<L154+current_header_0],Y
  5252 09:CB81: C9 00 00     	cmp	#<$10000
  5253 09:CB84: A0 12 00     	ldy	#$12
  5254 09:CB87: B7 14        	lda	[<L154+current_header_0],Y
  5255 09:CB89: E9 01 00     	sbc	#^$10000
  5256 09:CB8C: B0 03        	bcs	L182
  5257 09:CB8E: 82 06 00     	brl	L10060
  5258                        L182:
  5259                        	.line	545
  5260                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'ResSpc' value (the size can't be larger than 64 KB).\n"
                    ,current_file->nb_segment+1);
  5261                        ;      return(1);
  5262                        	.line	547
  5263 09:CB91: A9 01 00     	lda	#$1
  5264 09:CB94: 82 AF FA     	brl	L159
  5265                        ;    }
  5266                        	.line	548
  5267                        ;
  5268                        ;  /* La taille d'un Segment en mémoire ne peut pa
                    s dépasser 64 KB */
  5269                        ;  if(current_header->Length >= 0x010000)
  5270                        L10060:
  5271                        	.line	551
  5272                        ;    {
  5273 09:CB97: A0 14 00     	ldy	#$14
  5274 09:CB9A: B7 14        	lda	[<L154+current_header_0],Y
  5275 09:CB9C: C9 00 00     	cmp	#<$10000
  5276 09:CB9F: A0 16 00     	ldy	#$16
  5277 09:CBA2: B7 14        	lda	[<L154+current_header_0],Y
  5278 09:CBA4: E9 01 00     	sbc	#^$10000
  5279 09:CBA7: B0 03        	bcs	L183
  5280 09:CBA9: 82 06 00     	brl	L10061
  5281                        L183:
  5282                        	.line	552
  5283                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'Length' value (the segment size can't be larger than 64
                     KB).\n",current_file->nb_segment+1);
  5284                        ;      return(1);
  5285                        	.line	554
  Thu Dec  3 2020 22:25                                                Page 99


  5286 09:CBAC: A9 01 00     	lda	#$1
  5287 09:CBAF: 82 94 FA     	brl	L159
  5288                        ;    }
  5289                        	.line	555
  5290                        ;
  5291                        ;  /* LabLen : 0 ou 10 */
  5292                        ;  if(current_header->LabLen != 0x00 && current_he
                    ader->LabLen != 0x0A)
  5293                        L10061:
  5294                        	.line	558
  5295                        ;    {
  5296 09:CBB2: A0 1A 00     	ldy	#$1a
  5297 09:CBB5: B7 14        	lda	[<L154+current_header_0],Y
  5298 09:CBB7: 29 FF 00     	and	#$ff
  5299 09:CBBA: D0 03        	bne	L184
  5300 09:CBBC: 82 16 00     	brl	L10062
  5301                        L184:
  5302 09:CBBF: E2 20        	sep	#$20
  5303                        	longa	off
  5304 09:CBC1: A0 1A 00     	ldy	#$1a
  5305 09:CBC4: B7 14        	lda	[<L154+current_header_0],Y
  5306 09:CBC6: C9 0A        	cmp	#<$a
  5307 09:CBC8: C2 20        	rep	#$20
  5308                        	longa	on
  5309 09:CBCA: D0 03        	bne	L185
  5310 09:CBCC: 82 06 00     	brl	L10062
  5311                        L185:
  5312                        	.line	559
  5313                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'LabLen' value (the value should be 0 or 10 for the Appl
                    e IIgs).\n",current_file->nb_segment+1);
  5314                        ;      return(1);
  5315                        	.line	561
  5316 09:CBCF: A9 01 00     	lda	#$1
  5317 09:CBD2: 82 71 FA     	brl	L159
  5318                        ;    }
  5319                        	.line	562
  5320                        ;
  5321                        ;  /* Num Len : Tjs à 4 pour le IIgs */
  5322                        ;  if(current_header->NumLen != 0x04)
  5323                        L10062:
  5324                        	.line	565
  5325                        ;    {
  5326 09:CBD5: E2 20        	sep	#$20
  5327                        	longa	off
  5328 09:CBD7: A0 1B 00     	ldy	#$1b
  5329 09:CBDA: B7 14        	lda	[<L154+current_header_0],Y
  5330 09:CBDC: C9 04        	cmp	#<$4
  5331 09:CBDE: C2 20        	rep	#$20
  5332                        	longa	on
  5333 09:CBE0: D0 03        	bne	L186
  5334 09:CBE2: 82 06 00     	brl	L10063
  5335                        L186:
  5336                        	.line	566
  5337                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'NumLen' value (the value should be 4 for the Apple IIgs
                    ).\n",current_file->nb_segment+1);
  5338                        ;      return(1);
  Thu Dec  3 2020 22:25                                                Page 100


  5339                        	.line	568
  5340 09:CBE5: A9 01 00     	lda	#$1
  5341 09:CBE8: 82 5B FA     	brl	L159
  5342                        ;    }
  5343                        	.line	569
  5344                        ;
  5345                        ;  /* BankSize : <= 64 KB */
  5346                        ;  if(current_header->BankSize > 0x010000)
  5347                        L10063:
  5348                        	.line	572
  5349                        ;    {
  5350 09:CBEB: A9 00 00     	lda	#$0
  5351 09:CBEE: A0 1D 00     	ldy	#$1d
  5352 09:CBF1: D7 14        	cmp	[<L154+current_header_0],Y
  5353 09:CBF3: A9 01 00     	lda	#$1
  5354 09:CBF6: A0 1F 00     	ldy	#$1f
  5355 09:CBF9: F7 14        	sbc	[<L154+current_header_0],Y
  5356 09:CBFB: 90 03        	bcc	L187
  5357 09:CBFD: 82 06 00     	brl	L10064
  5358                        L187:
  5359                        	.line	573
  5360                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'BankSize' value (the value can't be larger than 64 KB).
                    \n",current_file->nb_segment+1);
  5361                        ;      return(1);
  5362                        	.line	575
  5363 09:CC00: A9 01 00     	lda	#$1
  5364 09:CC03: 82 40 FA     	brl	L159
  5365                        ;    }
  5366                        	.line	576
  5367                        ;
  5368                        ;  /* Kind */
  5369                        ;  if((current_header->Kind & 0x001F) != 0x0000 &&
                     (current_header->Kind & 0x001F) != 0x0001 && (current_heade
                    r->Kind & 0x001F) != 0x0002 &&
  5370                        L10064:
  5371                        	.line	579
  5372                        ;     (current_header->Kind & 0x001F) != 0x0004 &&
                     (current_header->Kind & 0x001F) != 0x0008 && (current_heade
                    r->Kind & 0x001F) != 0x0010 &&
  5373                        ;     (current_header->Kind & 0x001F) != 0x0012)
  5374                        ;    {
  5375 09:CC06: A0 21 00     	ldy	#$21
  5376 09:CC09: B7 14        	lda	[<L154+current_header_0],Y
  5377 09:CC0B: 29 1F 00     	and	#<$1f
  5378 09:CC0E: D0 03        	bne	L188
  5379 09:CC10: 82 7E 00     	brl	L10065
  5380                        L188:
  5381 09:CC13: A0 21 00     	ldy	#$21
  5382 09:CC16: B7 14        	lda	[<L154+current_header_0],Y
  5383 09:CC18: 29 1F 00     	and	#<$1f
  5384 09:CC1B: 85 01        	sta	<R0
  5385 09:CC1D: A5 01        	lda	<R0
  5386 09:CC1F: C9 01 00     	cmp	#<$1
  5387 09:CC22: D0 03        	bne	L189
  5388 09:CC24: 82 6A 00     	brl	L10065
  5389                        L189:
  5390 09:CC27: A0 21 00     	ldy	#$21
  Thu Dec  3 2020 22:25                                                Page 101


  5391 09:CC2A: B7 14        	lda	[<L154+current_header_0],Y
  5392 09:CC2C: 29 1F 00     	and	#<$1f
  5393 09:CC2F: 85 01        	sta	<R0
  5394 09:CC31: A5 01        	lda	<R0
  5395 09:CC33: C9 02 00     	cmp	#<$2
  5396 09:CC36: D0 03        	bne	L190
  5397 09:CC38: 82 56 00     	brl	L10065
  5398                        L190:
  5399 09:CC3B: A0 21 00     	ldy	#$21
  5400 09:CC3E: B7 14        	lda	[<L154+current_header_0],Y
  5401 09:CC40: 29 1F 00     	and	#<$1f
  5402 09:CC43: 85 01        	sta	<R0
  5403 09:CC45: A5 01        	lda	<R0
  5404 09:CC47: C9 04 00     	cmp	#<$4
  5405 09:CC4A: D0 03        	bne	L191
  5406 09:CC4C: 82 42 00     	brl	L10065
  5407                        L191:
  5408 09:CC4F: A0 21 00     	ldy	#$21
  5409 09:CC52: B7 14        	lda	[<L154+current_header_0],Y
  5410 09:CC54: 29 1F 00     	and	#<$1f
  5411 09:CC57: 85 01        	sta	<R0
  5412 09:CC59: A5 01        	lda	<R0
  5413 09:CC5B: C9 08 00     	cmp	#<$8
  5414 09:CC5E: D0 03        	bne	L192
  5415 09:CC60: 82 2E 00     	brl	L10065
  5416                        L192:
  5417 09:CC63: A0 21 00     	ldy	#$21
  5418 09:CC66: B7 14        	lda	[<L154+current_header_0],Y
  5419 09:CC68: 29 1F 00     	and	#<$1f
  5420 09:CC6B: 85 01        	sta	<R0
  5421 09:CC6D: A5 01        	lda	<R0
  5422 09:CC6F: C9 10 00     	cmp	#<$10
  5423 09:CC72: D0 03        	bne	L193
  5424 09:CC74: 82 1A 00     	brl	L10065
  5425                        L193:
  5426 09:CC77: A0 21 00     	ldy	#$21
  5427 09:CC7A: B7 14        	lda	[<L154+current_header_0],Y
  5428 09:CC7C: 29 1F 00     	and	#<$1f
  5429 09:CC7F: 85 01        	sta	<R0
  5430 09:CC81: A5 01        	lda	<R0
  5431 09:CC83: C9 12 00     	cmp	#<$12
  5432 09:CC86: D0 03        	bne	L194
  5433 09:CC88: 82 06 00     	brl	L10065
  5434                        L194:
  5435                        	.line	582
  5436                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'Kind' value (possible values are 0,1,2,4,8,16 or 18).\n
                    ",current_file->nb_segment+1);
  5437                        ;      return(1);
  5438                        	.line	584
  5439 09:CC8B: A9 01 00     	lda	#$1
  5440 09:CC8E: 82 B5 F9     	brl	L159
  5441                        ;    }
  5442                        	.line	585
  5443                        ;
  5444                        ;  /* Org : < 64 KB */
  5445                        ;  if(current_header->Org >= 0x010000)
  5446                        L10065:
  Thu Dec  3 2020 22:25                                                Page 102


  5447                        	.line	588
  5448                        ;    //printf("  Segment #%d Header Warning : Unus
                    ual 'Org' value (the value is usually < 64 KB).\n",current_f
                    ile->nb_segment+1);
  5449                        ;
  5450                        ;  /* Align : 0, 0x0100 ou 0x010000 */
  5451                        ;  if(current_header->Align != 0x00 && current_hea
                    der->Align != 0x0100 && current_header->Align != 0x010000)
  5452 09:CC91: A0 25 00     	ldy	#$25
  5453 09:CC94: B7 14        	lda	[<L154+current_header_0],Y
  5454 09:CC96: C9 00 00     	cmp	#<$10000
  5455 09:CC99: A0 27 00     	ldy	#$27
  5456 09:CC9C: B7 14        	lda	[<L154+current_header_0],Y
  5457 09:CC9E: E9 01 00     	sbc	#^$10000
  5458 09:CCA1: B0 03        	bcs	L195
  5459 09:CCA3: 82 43 00     	brl	L10066
  5460                        L195:
  5461                        	.line	592
  5462                        ;    {
  5463 09:CCA6: A0 29 00     	ldy	#$29
  5464 09:CCA9: B7 14        	lda	[<L154+current_header_0],Y
  5465 09:CCAB: A0 2B 00     	ldy	#$2b
  5466 09:CCAE: 17 14        	ora	[<L154+current_header_0],Y
  5467 09:CCB0: D0 03        	bne	L196
  5468 09:CCB2: 82 34 00     	brl	L10067
  5469                        L196:
  5470 09:CCB5: A0 29 00     	ldy	#$29
  5471 09:CCB8: B7 14        	lda	[<L154+current_header_0],Y
  5472 09:CCBA: C9 00 01     	cmp	#<$100
  5473 09:CCBD: D0 08        	bne	L197
  5474 09:CCBF: A0 2B 00     	ldy	#$2b
  5475 09:CCC2: B7 14        	lda	[<L154+current_header_0],Y
  5476 09:CCC4: C9 00 00     	cmp	#^$100
  5477                        L197:
  5478 09:CCC7: D0 03        	bne	L198
  5479 09:CCC9: 82 1D 00     	brl	L10067
  5480                        L198:
  5481 09:CCCC: A0 29 00     	ldy	#$29
  5482 09:CCCF: B7 14        	lda	[<L154+current_header_0],Y
  5483 09:CCD1: C9 00 00     	cmp	#<$10000
  5484 09:CCD4: D0 08        	bne	L199
  5485 09:CCD6: A0 2B 00     	ldy	#$2b
  5486 09:CCD9: B7 14        	lda	[<L154+current_header_0],Y
  5487 09:CCDB: C9 01 00     	cmp	#^$10000
  5488                        L199:
  5489 09:CCDE: D0 03        	bne	L200
  5490 09:CCE0: 82 06 00     	brl	L10067
  5491                        L200:
  5492                        	.line	593
  5493                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'Align' value (the value should be 0, 256 or 64KB or for
                     the Apple IIgs).\n",current_file->nb_segment+1);
  5494                        ;      return(1);
  5495                        	.line	595
  5496 09:CCE3: A9 01 00     	lda	#$1
  5497 09:CCE6: 82 5D F9     	brl	L159
  5498                        ;    }
  5499                        	.line	596
  Thu Dec  3 2020 22:25                                                Page 103


  5500                        ;
  5501                        ;  /* NumSEx : Tjs à 0 */
  5502                        ;  if(current_header->NumSEx != 0x00)
  5503                        L10067:
  5504                        L10066:
  5505                        	.line	599
  5506                        ;    {
  5507 09:CCE9: A0 2D 00     	ldy	#$2d
  5508 09:CCEC: B7 14        	lda	[<L154+current_header_0],Y
  5509 09:CCEE: 29 FF 00     	and	#$ff
  5510 09:CCF1: D0 03        	bne	L201
  5511 09:CCF3: 82 06 00     	brl	L10068
  5512                        L201:
  5513                        	.line	600
  5514                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'NumSEx' value (the value should be 0 for the Apple IIgs
                    ).\n",current_file->nb_segment+1);
  5515                        ;      return(1);
  5516                        	.line	602
  5517 09:CCF6: A9 01 00     	lda	#$1
  5518 09:CCF9: 82 4A F9     	brl	L159
  5519                        ;    }
  5520                        	.line	603
  5521                        ;
  5522                        ;  /* SegNum : 1 -> N */
  5523                        ;  if(current_header->SegNum != (WORD) current_fil
                    e->nb_segment+1)
  5524                        L10068:
  5525                        	.line	606
  5526                        ;    {
  5527 09:CCFC: A0 0E 00     	ldy	#$e
  5528 09:CCFF: B7 0E        	lda	[<L154+current_file_0],Y
  5529 09:CD01: 1A           	ina
  5530 09:CD02: 85 01        	sta	<R0
  5531 09:CD04: A5 01        	lda	<R0
  5532 09:CD06: A0 30 00     	ldy	#$30
  5533 09:CD09: D7 14        	cmp	[<L154+current_header_0],Y
  5534 09:CD0B: D0 03        	bne	L202
  5535 09:CD0D: 82 06 00     	brl	L10069
  5536                        L202:
  5537                        	.line	607
  5538                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'SegNum' value (the value should be %d and we have %d fo
                    r the Apple IIgs).\n",current_file->nb_segment+1,current_fil
                    e->nb_segment+1,current_header->SegNum);
  5539                        ;      return(1);
  5540                        	.line	609
  5541 09:CD10: A9 01 00     	lda	#$1
  5542 09:CD13: 82 30 F9     	brl	L159
  5543                        ;    }
  5544                        	.line	610
  5545                        ;
  5546                        ;  /* Entry Point */
  5547                        ;  if(current_header->EntryPointOffset > current_h
                    eader->Length)
  5548                        L10069:
  5549                        	.line	613
  5550                        ;    {
  Thu Dec  3 2020 22:25                                                Page 104


  5551 09:CD16: A0 14 00     	ldy	#$14
  5552 09:CD19: B7 14        	lda	[<L154+current_header_0],Y
  5553 09:CD1B: A0 32 00     	ldy	#$32
  5554 09:CD1E: D7 14        	cmp	[<L154+current_header_0],Y
  5555 09:CD20: A0 16 00     	ldy	#$16
  5556 09:CD23: B7 14        	lda	[<L154+current_header_0],Y
  5557 09:CD25: A0 34 00     	ldy	#$34
  5558 09:CD28: F7 14        	sbc	[<L154+current_header_0],Y
  5559 09:CD2A: 90 03        	bcc	L203
  5560 09:CD2C: 82 06 00     	brl	L10070
  5561                        L203:
  5562                        	.line	614
  5563                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'EntryPointOffset' value (the value can't be larger than
                     the Segment size).\n",current_file->nb_segment+1);
  5564                        ;      return(1);
  5565                        	.line	616
  5566 09:CD2F: A9 01 00     	lda	#$1
  5567 09:CD32: 82 11 F9     	brl	L159
  5568                        ;    }
  5569                        	.line	617
  5570                        ;
  5571                        ;  /* DispName offset (devrait être 44 si TmpOrg e
                    st vide) */
  5572                        ;  if(current_header->DispNameOffset < SEGMENT_HEA
                    DER_MIN_SIZE_V2)
  5573                        L10070:
  5574                        	.line	620
  5575                        ;    {
  5576 09:CD35: 38           	sec
  5577 09:CD36: A0 36 00     	ldy	#$36
  5578 09:CD39: B7 14        	lda	[<L154+current_header_0],Y
  5579 09:CD3B: E9 2C 00     	sbc	#<$2c
  5580 09:CD3E: 70 03        	bvs	L204
  5581 09:CD40: 49 00 80     	eor	#$8000
  5582                        L204:
  5583 09:CD43: 10 03        	bpl	L205
  5584 09:CD45: 82 06 00     	brl	L10071
  5585                        L205:
  5586                        	.line	621
  5587                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'DispNameOffset' value (the value can't be smaller than 
                    the Segment Header size).\n",current_file->nb_segment+1);
  5588                        ;      return(1);
  5589                        	.line	623
  5590 09:CD48: A9 01 00     	lda	#$1
  5591 09:CD4B: 82 F8 F8     	brl	L159
  5592                        ;    }
  5593                        	.line	624
  5594                        ;  if(current_header->DispNameOffset > current_hea
                    der->ByteCnt)
  5595                        L10071:
  5596                        	.line	625
  5597                        ;    {
  5598 09:CD4E: A0 00 00     	ldy	#$0
  5599 09:CD51: 5A           	phy
  5600 09:CD52: A0 36 00     	ldy	#$36
  5601 09:CD55: B7 14        	lda	[<L154+current_header_0],Y
  Thu Dec  3 2020 22:25                                                Page 105


  5602 09:CD57: 7A           	ply
  5603 09:CD58: 2A           	rol	A
  5604 09:CD59: 6A           	ror	A
  5605 09:CD5A: 10 01        	bpl	L206
  5606 09:CD5C: 88           	dey
  5607                        L206:
  5608 09:CD5D: 85 01        	sta	<R0
  5609 09:CD5F: 84 03        	sty	<R0+2
  5610 09:CD61: A0 0C 00     	ldy	#$c
  5611 09:CD64: B7 14        	lda	[<L154+current_header_0],Y
  5612 09:CD66: C5 01        	cmp	<R0
  5613 09:CD68: A0 0E 00     	ldy	#$e
  5614 09:CD6B: B7 14        	lda	[<L154+current_header_0],Y
  5615 09:CD6D: E5 03        	sbc	<R0+2
  5616 09:CD6F: 90 03        	bcc	L207
  5617 09:CD71: 82 06 00     	brl	L10072
  5618                        L207:
  5619                        	.line	626
  5620                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'DispNameOffset' value (the value can't be larger than t
                    he Segment size).\n",current_file->nb_segment+1);
  5621                        ;      return(1);
  5622                        	.line	628
  5623 09:CD74: A9 01 00     	lda	#$1
  5624 09:CD77: 82 CC F8     	brl	L159
  5625                        ;    }
  5626                        	.line	629
  5627                        ;
  5628                        ;  /* DispData offset (devrait être 64 si TmpOrg e
                    st vide) */
  5629                        ;  if(current_header->DispDataOffset < SEGMENT_HEA
                    DER_MIN_SIZE_V2)
  5630                        L10072:
  5631                        	.line	632
  5632                        ;    {
  5633 09:CD7A: 38           	sec
  5634 09:CD7B: A0 38 00     	ldy	#$38
  5635 09:CD7E: B7 14        	lda	[<L154+current_header_0],Y
  5636 09:CD80: E9 2C 00     	sbc	#<$2c
  5637 09:CD83: 70 03        	bvs	L208
  5638 09:CD85: 49 00 80     	eor	#$8000
  5639                        L208:
  5640 09:CD88: 10 03        	bpl	L209
  5641 09:CD8A: 82 06 00     	brl	L10073
  5642                        L209:
  5643                        	.line	633
  5644                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'DispDataOffset' value (the value can't be smaller than 
                    the Segment Header size).\n",current_file->nb_segment+1);
  5645                        ;      return(1);
  5646                        	.line	635
  5647 09:CD8D: A9 01 00     	lda	#$1
  5648 09:CD90: 82 B3 F8     	brl	L159
  5649                        ;    }
  5650                        	.line	636
  5651                        ;  if(current_header->DispNameOffset > current_hea
                    der->ByteCnt)
  5652                        L10073:
  Thu Dec  3 2020 22:25                                                Page 106


  5653                        	.line	637
  5654                        ;    {
  5655 09:CD93: A0 00 00     	ldy	#$0
  5656 09:CD96: 5A           	phy
  5657 09:CD97: A0 36 00     	ldy	#$36
  5658 09:CD9A: B7 14        	lda	[<L154+current_header_0],Y
  5659 09:CD9C: 7A           	ply
  5660 09:CD9D: 2A           	rol	A
  5661 09:CD9E: 6A           	ror	A
  5662 09:CD9F: 10 01        	bpl	L210
  5663 09:CDA1: 88           	dey
  5664                        L210:
  5665 09:CDA2: 85 01        	sta	<R0
  5666 09:CDA4: 84 03        	sty	<R0+2
  5667 09:CDA6: A0 0C 00     	ldy	#$c
  5668 09:CDA9: B7 14        	lda	[<L154+current_header_0],Y
  5669 09:CDAB: C5 01        	cmp	<R0
  5670 09:CDAD: A0 0E 00     	ldy	#$e
  5671 09:CDB0: B7 14        	lda	[<L154+current_header_0],Y
  5672 09:CDB2: E5 03        	sbc	<R0+2
  5673 09:CDB4: 90 03        	bcc	L211
  5674 09:CDB6: 82 06 00     	brl	L10074
  5675                        L211:
  5676                        	.line	638
  5677                        ;      //printf("  Segment #%d Header Error : Inva
                    lid 'DispDataOffset' value (the value can't be larger than t
                    he Segment size).\n",current_file->nb_segment+1);
  5678                        ;      return(1);
  5679                        	.line	640
  5680 09:CDB9: A9 01 00     	lda	#$1
  5681 09:CDBC: 82 87 F8     	brl	L159
  5682                        ;    }
  5683                        	.line	641
  5684                        ;
  5685                        ;  /*********************************************/
  5686                        ;  /**  On va récupérer les données variables  **/
  5687                        ;  /*********************************************/
  5688                        ;  /* Temp Org */
  5689                        ;  if(current_header->DispNameOffset > SEGMENT_HEA
                    DER_MIN_SIZE_V2) /* 44 */
  5690                        L10074:
  5691                        	.line	647
  5692                        ;    {
  5693 09:CDBF: 38           	sec
  5694 09:CDC0: A9 2C 00     	lda	#$2c
  5695 09:CDC3: A0 36 00     	ldy	#$36
  5696 09:CDC6: F7 14        	sbc	[<L154+current_header_0],Y
  5697 09:CDC8: 70 03        	bvs	L212
  5698 09:CDCA: 49 00 80     	eor	#$8000
  5699                        L212:
  5700 09:CDCD: 10 03        	bpl	L213
  5701 09:CDCF: 82 59 00     	brl	L10075
  5702                        L213:
  5703                        	.line	648
  5704                        ;      current_header->TempOrgLength = current_hea
                    der->DispNameOffset - SEGMENT_HEADER_MIN_SIZE_V2;
  5705                        	.line	649
  5706 09:CDD2: 18           	clc
  Thu Dec  3 2020 22:25                                                Page 107


  5707 09:CDD3: A9 D4 FF     	lda	#$ffd4
  5708 09:CDD6: A0 36 00     	ldy	#$36
  5709 09:CDD9: 77 14        	adc	[<L154+current_header_0],Y
  5710 09:CDDB: A0 3A 00     	ldy	#$3a
  5711 09:CDDE: 97 14        	sta	[<L154+current_header_0],Y
  5712                        ;      memcpy(current_header->TempOrg,&current_fil
                    e->data[data_offset+SEGMENT_HEADER_MIN_SIZE_V2],current_head
                    er->TempOrgLength);
  5713                        	.line	650
  5714 09:CDE0: A0 3A 00     	ldy	#$3a
  5715 09:CDE3: B7 14        	lda	[<L154+current_header_0],Y
  5716 09:CDE5: 48           	pha
  5717 09:CDE6: 18           	clc
  5718 09:CDE7: A9 2C 00     	lda	#$2c
  5719 09:CDEA: 65 12        	adc	<L154+data_offset_0
  5720 09:CDEC: 85 01        	sta	<R0
  5721 09:CDEE: A0 00 00     	ldy	#$0
  5722 09:CDF1: A5 01        	lda	<R0
  5723 09:CDF3: 10 01        	bpl	L214
  5724 09:CDF5: 88           	dey
  5725                        L214:
  5726 09:CDF6: 85 01        	sta	<R0
  5727 09:CDF8: 84 03        	sty	<R0+2
  5728 09:CDFA: 18           	clc
  5729 09:CDFB: A0 0A 00     	ldy	#$a
  5730 09:CDFE: B7 0E        	lda	[<L154+current_file_0],Y
  5731 09:CE00: 65 01        	adc	<R0
  5732 09:CE02: 85 05        	sta	<R1
  5733 09:CE04: A0 0C 00     	ldy	#$c
  5734 09:CE07: B7 0E        	lda	[<L154+current_file_0],Y
  5735 09:CE09: 65 03        	adc	<R0+2
  5736 09:CE0B: 85 07        	sta	<R1+2
  5737 09:CE0D: D4 07        	pei	<R1+2
  5738 09:CE0F: D4 05        	pei	<R1
  5739 09:CE11: 18           	clc
  5740 09:CE12: A9 3C 00     	lda	#$3c
  5741 09:CE15: 65 14        	adc	<L154+current_header_0
  5742 09:CE17: 85 01        	sta	<R0
  5743 09:CE19: A9 00 00     	lda	#$0
  5744 09:CE1C: 65 16        	adc	<L154+current_header_0+2
  5745 09:CE1E: 85 03        	sta	<R0+2
  5746 09:CE20: D4 03        	pei	<R0+2
  5747 09:CE22: D4 01        	pei	<R0
  5748 09:CE24: 22 xx xx xx  	jsl	~~memcpy
  5749                        ;    }
  5750                        	.line	651
  5751                        ;  else
  5752 09:CE28: 82 08 00     	brl	L10076
  5753                        L10075:
  5754                        ;    current_header->TempOrgLength = 0;
  5755                        	.line	653
  5756 09:CE2B: A9 00 00     	lda	#$0
  5757 09:CE2E: A0 3A 00     	ldy	#$3a
  5758 09:CE31: 97 14        	sta	[<L154+current_header_0],Y
  5759                        L10076:
  5760                        ;
  5761                        ;  /* Noms */
  5762                        ;  memcpy(current_header->LoadName,&current_file->
  Thu Dec  3 2020 22:25                                                Page 108


                    data[data_offset+current_header->DispNameOffset],10);
  5763                        	.line	656
  5764 09:CE33: F4 0A 00     	pea	#<$a
  5765 09:CE36: 18           	clc
  5766 09:CE37: A5 12        	lda	<L154+data_offset_0
  5767 09:CE39: A0 36 00     	ldy	#$36
  5768 09:CE3C: 77 14        	adc	[<L154+current_header_0],Y
  5769 09:CE3E: 85 01        	sta	<R0
  5770 09:CE40: A0 00 00     	ldy	#$0
  5771 09:CE43: A5 01        	lda	<R0
  5772 09:CE45: 10 01        	bpl	L215
  5773 09:CE47: 88           	dey
  5774                        L215:
  5775 09:CE48: 85 01        	sta	<R0
  5776 09:CE4A: 84 03        	sty	<R0+2
  5777 09:CE4C: 18           	clc
  5778 09:CE4D: A0 0A 00     	ldy	#$a
  5779 09:CE50: B7 0E        	lda	[<L154+current_file_0],Y
  5780 09:CE52: 65 01        	adc	<R0
  5781 09:CE54: 85 05        	sta	<R1
  5782 09:CE56: A0 0C 00     	ldy	#$c
  5783 09:CE59: B7 0E        	lda	[<L154+current_file_0],Y
  5784 09:CE5B: 65 03        	adc	<R0+2
  5785 09:CE5D: 85 07        	sta	<R1+2
  5786 09:CE5F: D4 07        	pei	<R1+2
  5787 09:CE61: D4 05        	pei	<R1
  5788 09:CE63: 18           	clc
  5789 09:CE64: A9 3C 08     	lda	#$83c
  5790 09:CE67: 65 14        	adc	<L154+current_header_0
  5791 09:CE69: 85 01        	sta	<R0
  5792 09:CE6B: A9 00 00     	lda	#$0
  5793 09:CE6E: 65 16        	adc	<L154+current_header_0+2
  5794 09:CE70: 85 03        	sta	<R0+2
  5795 09:CE72: D4 03        	pei	<R0+2
  5796 09:CE74: D4 01        	pei	<R0
  5797 09:CE76: 22 xx xx xx  	jsl	~~memcpy
  5798                        ;  if(current_header->LabLen > 0)
  5799                        	.line	657
  5800                        ;    memcpy(current_header->SegName,&current_file-
                    >data[data_offset+current_header->DispNameOffset+10],current
                    _header->LabLen);
  5801 09:CE7A: E2 20        	sep	#$20
  5802                        	longa	off
  5803 09:CE7C: A9 00        	lda	#$0
  5804 09:CE7E: A0 1A 00     	ldy	#$1a
  5805 09:CE81: D7 14        	cmp	[<L154+current_header_0],Y
  5806 09:CE83: C2 20        	rep	#$20
  5807                        	longa	on
  5808 09:CE85: 90 03        	bcc	L216
  5809 09:CE87: 82 58 00     	brl	L10077
  5810                        L216:
  5811                        	.line	658
  5812 09:CE8A: A0 1A 00     	ldy	#$1a
  5813 09:CE8D: B7 14        	lda	[<L154+current_header_0],Y
  5814 09:CE8F: 29 FF 00     	and	#$ff
  5815 09:CE92: 48           	pha
  5816 09:CE93: 18           	clc
  5817 09:CE94: A5 12        	lda	<L154+data_offset_0
  Thu Dec  3 2020 22:25                                                Page 109


  5818 09:CE96: A0 36 00     	ldy	#$36
  5819 09:CE99: 77 14        	adc	[<L154+current_header_0],Y
  5820 09:CE9B: 85 01        	sta	<R0
  5821 09:CE9D: 18           	clc
  5822 09:CE9E: A9 0A 00     	lda	#$a
  5823 09:CEA1: 65 01        	adc	<R0
  5824 09:CEA3: 85 05        	sta	<R1
  5825 09:CEA5: A0 00 00     	ldy	#$0
  5826 09:CEA8: A5 05        	lda	<R1
  5827 09:CEAA: 10 01        	bpl	L217
  5828 09:CEAC: 88           	dey
  5829                        L217:
  5830 09:CEAD: 85 01        	sta	<R0
  5831 09:CEAF: 84 03        	sty	<R0+2
  5832 09:CEB1: 18           	clc
  5833 09:CEB2: A0 0A 00     	ldy	#$a
  5834 09:CEB5: B7 0E        	lda	[<L154+current_file_0],Y
  5835 09:CEB7: 65 01        	adc	<R0
  5836 09:CEB9: 85 05        	sta	<R1
  5837 09:CEBB: A0 0C 00     	ldy	#$c
  5838 09:CEBE: B7 0E        	lda	[<L154+current_file_0],Y
  5839 09:CEC0: 65 03        	adc	<R0+2
  5840 09:CEC2: 85 07        	sta	<R1+2
  5841 09:CEC4: D4 07        	pei	<R1+2
  5842 09:CEC6: D4 05        	pei	<R1
  5843 09:CEC8: 18           	clc
  5844 09:CEC9: A9 3C 09     	lda	#$93c
  5845 09:CECC: 65 14        	adc	<L154+current_header_0
  5846 09:CECE: 85 01        	sta	<R0
  5847 09:CED0: A9 00 00     	lda	#$0
  5848 09:CED3: 65 16        	adc	<L154+current_header_0+2
  5849 09:CED5: 85 03        	sta	<R0+2
  5850 09:CED7: D4 03        	pei	<R0+2
  5851 09:CED9: D4 01        	pei	<R0
  5852 09:CEDB: 22 xx xx xx  	jsl	~~memcpy
  5853                        ;  else
  5854 09:CEDF: 82 77 00     	brl	L10078
  5855                        L10077:
  5856                        ;    {
  5857                        	.line	660
  5858                        ;      /* La longueur est codée au début du texte,
                     sur 1 Byte */
  5859                        ;      length = (int) current_file->data[data_offs
                    et+current_header->DispNameOffset+10];
  5860                        	.line	662
  5861 09:CEE2: 18           	clc
  5862 09:CEE3: A5 12        	lda	<L154+data_offset_0
  5863 09:CEE5: A0 36 00     	ldy	#$36
  5864 09:CEE8: 77 14        	adc	[<L154+current_header_0],Y
  5865 09:CEEA: 85 01        	sta	<R0
  5866 09:CEEC: 18           	clc
  5867 09:CEED: A9 0A 00     	lda	#$a
  5868 09:CEF0: 65 01        	adc	<R0
  5869 09:CEF2: 85 05        	sta	<R1
  5870 09:CEF4: A0 0A 00     	ldy	#$a
  5871 09:CEF7: B7 0E        	lda	[<L154+current_file_0],Y
  5872 09:CEF9: 85 01        	sta	<R0
  5873 09:CEFB: A0 0C 00     	ldy	#$c
  Thu Dec  3 2020 22:25                                                Page 110


  5874 09:CEFE: B7 0E        	lda	[<L154+current_file_0],Y
  5875 09:CF00: 85 03        	sta	<R0+2
  5876 09:CF02: A4 05        	ldy	<R1
  5877 09:CF04: B7 01        	lda	[<R0],Y
  5878 09:CF06: 29 FF 00     	and	#$ff
  5879 09:CF09: 85 09        	sta	<L155+length_1
  5880                        ;      memcpy(&current_header->SegName,&current_fi
                    le->data[data_offset+current_header->DispNameOffset+10+1],le
                    ngth);
  5881                        	.line	663
  5882 09:CF0B: D4 09        	pei	<L155+length_1
  5883 09:CF0D: 18           	clc
  5884 09:CF0E: A5 12        	lda	<L154+data_offset_0
  5885 09:CF10: A0 36 00     	ldy	#$36
  5886 09:CF13: 77 14        	adc	[<L154+current_header_0],Y
  5887 09:CF15: 85 01        	sta	<R0
  5888 09:CF17: 18           	clc
  5889 09:CF18: A9 0B 00     	lda	#$b
  5890 09:CF1B: 65 01        	adc	<R0
  5891 09:CF1D: 85 05        	sta	<R1
  5892 09:CF1F: A0 00 00     	ldy	#$0
  5893 09:CF22: A5 05        	lda	<R1
  5894 09:CF24: 10 01        	bpl	L218
  5895 09:CF26: 88           	dey
  5896                        L218:
  5897 09:CF27: 85 01        	sta	<R0
  5898 09:CF29: 84 03        	sty	<R0+2
  5899 09:CF2B: 18           	clc
  5900 09:CF2C: A0 0A 00     	ldy	#$a
  5901 09:CF2F: B7 0E        	lda	[<L154+current_file_0],Y
  5902 09:CF31: 65 01        	adc	<R0
  5903 09:CF33: 85 05        	sta	<R1
  5904 09:CF35: A0 0C 00     	ldy	#$c
  5905 09:CF38: B7 0E        	lda	[<L154+current_file_0],Y
  5906 09:CF3A: 65 03        	adc	<R0+2
  5907 09:CF3C: 85 07        	sta	<R1+2
  5908 09:CF3E: D4 07        	pei	<R1+2
  5909 09:CF40: D4 05        	pei	<R1
  5910 09:CF42: 18           	clc
  5911 09:CF43: A9 3C 09     	lda	#$93c
  5912 09:CF46: 65 14        	adc	<L154+current_header_0
  5913 09:CF48: 85 01        	sta	<R0
  5914 09:CF4A: A9 00 00     	lda	#$0
  5915 09:CF4D: 65 16        	adc	<L154+current_header_0+2
  5916 09:CF4F: 85 03        	sta	<R0+2
  5917 09:CF51: D4 03        	pei	<R0+2
  5918 09:CF53: D4 01        	pei	<R0
  5919 09:CF55: 22 xx xx xx  	jsl	~~memcpy
  5920                        ;    }
  5921                        	.line	664
  5922                        L10078:
  5923                        ;
  5924                        ;  /* OK */
  5925                        ;  return(0);
  5926                        	.line	667
  5927 09:CF59: A9 00 00     	lda	#$0
  5928 09:CF5C: 82 E7 F6     	brl	L159
  5929                        ;}
  Thu Dec  3 2020 22:25                                                Page 111


  5930                        	.line	668
  5931                        	.endblock	668
  5932             0000000A   L154	equ	10
  5933             00000009   L155	equ	9
  5934 09:CF5F:              	ends
  5935                        	efunc
  5936                        	.endfunc	668,9,10
  5937                        	.line	668
  5938                        ;
  5939                        ;
  5940                        ;/************************************************
                    *******************************/
  5941                        ;/*  DecodeSegmentBody() :  Décode les différents 
                    Records du Body d'un Segment. */
  5942                        ;/************************************************
                    *******************************/
  5943                        ;static int DecodeSegmentBody(struct omf_file *cur
                    rent_file, int data_offset, struct omf_segment *current_segm
                    ent)
  5944                        ;{
  5945                        	.line	674
  5946                        	.line	675
  5947                        	LOADER
  5948                        	func
  5949                        	.function	675
  5950                        ~~DecodeSegmentBody:
  5951                        	longa	on
  5952                        	longi	on
  5953 09:CF5F: 3B           	tsc
  5954 09:CF60: 38           	sec
  5955 09:CF61: E9 20 00     	sbc	#L219
  5956 09:CF64: 1B           	tcs
  5957 09:CF65: 0B           	phd
  5958 09:CF66: 5B           	tcd
  5959             00000004   current_file_0	set	4
  5960             00000008   data_offset_0	set	8
  5961             0000000A   current_segment_0	set	10
  5962                        	.block	675
  5963                        ;  int body_offset, body_length, record_length, re
                    cord_data_length;
  5964                        ;  unsigned char *record_data;
  5965                        ;  unsigned char *data;
  5966                        ;  struct omf_body_record *current_record;
  5967                        ;
  5968                        ;  /* Init */
  5969                        ;  body_offset = 0;
  5970             00000000   body_offset_1	set	0
  5971             00000002   body_length_1	set	2
  5972             00000004   record_length_1	set	4
  5973             00000006   record_data_length_1	set	6
  5974             00000008   record_data_1	set	8
  5975             0000000C   data_1	set	12
  5976             00000010   current_record_1	set	16
  5977                        	.sym	body_offset,0,5,1,16
  5978                        	.sym	body_length,2,5,1,16
  5979                        	.sym	record_length,4,5,1,16
  5980                        	.sym	record_data_length,6,5,1,16
  5981                        	.sym	record_data,8,142,1,32
  Thu Dec  3 2020 22:25                                                Page 112


  5982                        	.sym	data,12,142,1,32
  5983                        	.sym	current_record,16,138,1,32,64
  5984                        	.sym	current_file,4,138,6,32,101
  5985                        	.sym	data_offset,8,5,6,16
  5986                        	.sym	current_segment,10,138,6,32,100
  5987                        	.line	682
  5988 09:CF67: 64 0D        	stz	<L220+body_offset_1
  5989                        ;  body_length = current_segment->header.ByteCnt -
                     current_segment->header.DispDataOffset;
  5990                        	.line	683
  5991 09:CF69: A0 00 00     	ldy	#$0
  5992 09:CF6C: 5A           	phy
  5993 09:CF6D: A0 38 00     	ldy	#$38
  5994 09:CF70: B7 2A        	lda	[<L219+current_segment_0],Y
  5995 09:CF72: 7A           	ply
  5996 09:CF73: 2A           	rol	A
  5997 09:CF74: 6A           	ror	A
  5998 09:CF75: 10 01        	bpl	L222
  5999 09:CF77: 88           	dey
  6000                        L222:
  6001 09:CF78: 85 01        	sta	<R0
  6002 09:CF7A: 84 03        	sty	<R0+2
  6003 09:CF7C: 38           	sec
  6004 09:CF7D: A0 0C 00     	ldy	#$c
  6005 09:CF80: B7 2A        	lda	[<L219+current_segment_0],Y
  6006 09:CF82: E5 01        	sbc	<R0
  6007 09:CF84: 85 05        	sta	<R1
  6008 09:CF86: A0 0E 00     	ldy	#$e
  6009 09:CF89: B7 2A        	lda	[<L219+current_segment_0],Y
  6010 09:CF8B: E5 03        	sbc	<R0+2
  6011 09:CF8D: 85 07        	sta	<R1+2
  6012 09:CF8F: A5 05        	lda	<R1
  6013 09:CF91: 85 0F        	sta	<L220+body_length_1
  6014                        ;
  6015                        ;  /* On libère les structures précédentes */
  6016                        ;  my_Memory(MEMORY_FREE_RELOC,NULL,NULL);
  6017                        	.line	686
  6018 09:CF93: F4 00 00     	pea	#^$0
  6019 09:CF96: F4 00 00     	pea	#<$0
  6020 09:CF99: F4 00 00     	pea	#^$0
  6021 09:CF9C: F4 00 00     	pea	#<$0
  6022 09:CF9F: F4 0D 00     	pea	#<$d
  6023 09:CFA2: 22 xx xx xx  	jsl	~~my_Memory
  6024                        ;  my_Memory(MEMORY_FREE_INTERSEG,NULL,NULL);
  6025                        	.line	687
  6026 09:CFA6: F4 00 00     	pea	#^$0
  6027 09:CFA9: F4 00 00     	pea	#<$0
  6028 09:CFAC: F4 00 00     	pea	#^$0
  6029 09:CFAF: F4 00 00     	pea	#<$0
  6030 09:CFB2: F4 17 00     	pea	#<$17
  6031 09:CFB5: 22 xx xx xx  	jsl	~~my_Memory
  6032                        ;
  6033                        ;  /** Boucle sur tous les Records du Body **/
  6034                        ;  while(1)
  6035                        	.line	690
  6036                        L10079:
  6037                        ;    {
  6038                        	.line	691
  Thu Dec  3 2020 22:25                                                Page 113


  6039                        ;      /** Extrait un Record du Body **/
  6040                        ;      current_record = DecodeOneRecord(&current_f
                    ile->data[data_offset+body_offset],current_segment->header.S
                    egNum,data_offset+body_offset,current_segment->header.ByteCn
                    t+body_offset,current_segment->data,current_segment->data_le
                    ngth,&record_length,current_segment);
  6041                        	.line	693
  6042 09:CFB9: D4 2C        	pei	<L219+current_segment_0+2
  6043 09:CFBB: D4 2A        	pei	<L219+current_segment_0
  6044 09:CFBD: F4 00 00     	pea	#0
  6045 09:CFC0: 18           	clc
  6046 09:CFC1: 7B           	tdc
  6047 09:CFC2: 69 11 00     	adc	#<L220+record_length_1
  6048 09:CFC5: 48           	pha
  6049 09:CFC6: A0 4B 0A     	ldy	#$a4b
  6050 09:CFC9: B7 2A        	lda	[<L219+current_segment_0],Y
  6051 09:CFCB: 48           	pha
  6052 09:CFCC: A0 4F 0A     	ldy	#$a4f
  6053 09:CFCF: B7 2A        	lda	[<L219+current_segment_0],Y
  6054 09:CFD1: 48           	pha
  6055 09:CFD2: A0 4D 0A     	ldy	#$a4d
  6056 09:CFD5: B7 2A        	lda	[<L219+current_segment_0],Y
  6057 09:CFD7: 48           	pha
  6058 09:CFD8: A0 00 00     	ldy	#$0
  6059 09:CFDB: A5 0D        	lda	<L220+body_offset_1
  6060 09:CFDD: 10 01        	bpl	L223
  6061 09:CFDF: 88           	dey
  6062                        L223:
  6063 09:CFE0: 85 01        	sta	<R0
  6064 09:CFE2: 84 03        	sty	<R0+2
  6065 09:CFE4: 18           	clc
  6066 09:CFE5: A5 01        	lda	<R0
  6067 09:CFE7: A0 0C 00     	ldy	#$c
  6068 09:CFEA: 77 2A        	adc	[<L219+current_segment_0],Y
  6069 09:CFEC: 85 05        	sta	<R1
  6070 09:CFEE: A5 03        	lda	<R0+2
  6071 09:CFF0: A0 0E 00     	ldy	#$e
  6072 09:CFF3: 77 2A        	adc	[<L219+current_segment_0],Y
  6073 09:CFF5: 85 07        	sta	<R1+2
  6074 09:CFF7: D4 05        	pei	<R1
  6075 09:CFF9: 18           	clc
  6076 09:CFFA: A5 28        	lda	<L219+data_offset_0
  6077 09:CFFC: 65 0D        	adc	<L220+body_offset_1
  6078 09:CFFE: 48           	pha
  6079 09:CFFF: A0 30 00     	ldy	#$30
  6080 09:D002: B7 2A        	lda	[<L219+current_segment_0],Y
  6081 09:D004: 48           	pha
  6082 09:D005: 18           	clc
  6083 09:D006: A5 28        	lda	<L219+data_offset_0
  6084 09:D008: 65 0D        	adc	<L220+body_offset_1
  6085 09:D00A: 85 01        	sta	<R0
  6086 09:D00C: A0 00 00     	ldy	#$0
  6087 09:D00F: A5 01        	lda	<R0
  6088 09:D011: 10 01        	bpl	L224
  6089 09:D013: 88           	dey
  6090                        L224:
  6091 09:D014: 85 01        	sta	<R0
  6092 09:D016: 84 03        	sty	<R0+2
  Thu Dec  3 2020 22:25                                                Page 114


  6093 09:D018: 18           	clc
  6094 09:D019: A0 0A 00     	ldy	#$a
  6095 09:D01C: B7 24        	lda	[<L219+current_file_0],Y
  6096 09:D01E: 65 01        	adc	<R0
  6097 09:D020: 85 09        	sta	<R2
  6098 09:D022: A0 0C 00     	ldy	#$c
  6099 09:D025: B7 24        	lda	[<L219+current_file_0],Y
  6100 09:D027: 65 03        	adc	<R0+2
  6101 09:D029: 85 0B        	sta	<R2+2
  6102 09:D02B: D4 0B        	pei	<R2+2
  6103 09:D02D: D4 09        	pei	<R2
  6104 09:D02F: 22 xx xx xx  	jsl	~~DecodeOneRecord
  6105 09:D033: 85 1D        	sta	<L220+current_record_1
  6106 09:D035: 86 1F        	stx	<L220+current_record_1+2
  6107                        ;      if(current_record == NULL)
  6108                        	.line	694
  6109                        ;        return(1);
  6110 09:D037: A5 1D        	lda	<L220+current_record_1
  6111 09:D039: 05 1F        	ora	<L220+current_record_1+2
  6112 09:D03B: F0 03        	beq	L225
  6113 09:D03D: 82 15 00     	brl	L10081
  6114                        L225:
  6115                        	.line	695
  6116 09:D040: A9 01 00     	lda	#$1
  6117                        L226:
  6118 09:D043: A8           	tay
  6119 09:D044: A5 22        	lda	<L219+2
  6120 09:D046: 85 2C        	sta	<L219+2+10
  6121 09:D048: A5 21        	lda	<L219+1
  6122 09:D04A: 85 2B        	sta	<L219+1+10
  6123 09:D04C: 2B           	pld
  6124 09:D04D: 3B           	tsc
  6125 09:D04E: 18           	clc
  6126 09:D04F: 69 2A 00     	adc	#L219+10
  6127 09:D052: 1B           	tcs
  6128 09:D053: 98           	tya
  6129 09:D054: 6B           	rtl
  6130                        ;      current_record->FileOffset = data_offset+bo
                    dy_offset;
  6131                        L10081:
  6132                        	.line	696
  6133 09:D055: 18           	clc
  6134 09:D056: A5 28        	lda	<L219+data_offset_0
  6135 09:D058: 65 0D        	adc	<L220+body_offset_1
  6136 09:D05A: 85 01        	sta	<R0
  6137 09:D05C: A0 00 00     	ldy	#$0
  6138 09:D05F: A5 01        	lda	<R0
  6139 09:D061: 10 01        	bpl	L227
  6140 09:D063: 88           	dey
  6141                        L227:
  6142 09:D064: 85 01        	sta	<R0
  6143 09:D066: 84 03        	sty	<R0+2
  6144 09:D068: A5 01        	lda	<R0
  6145 09:D06A: 87 1D        	sta	[<L220+current_record_1]
  6146 09:D06C: A5 03        	lda	<R0+2
  6147 09:D06E: A0 02 00     	ldy	#$2
  6148 09:D071: 97 1D        	sta	[<L220+current_record_1],Y
  6149                        ;      current_record->SegmentOffset = current_seg
  Thu Dec  3 2020 22:25                                                Page 115


                    ment->header.ByteCnt + body_offset;
  6150                        	.line	697
  6151 09:D073: A0 00 00     	ldy	#$0
  6152 09:D076: A5 0D        	lda	<L220+body_offset_1
  6153 09:D078: 10 01        	bpl	L228
  6154 09:D07A: 88           	dey
  6155                        L228:
  6156 09:D07B: 85 01        	sta	<R0
  6157 09:D07D: 84 03        	sty	<R0+2
  6158 09:D07F: 18           	clc
  6159 09:D080: A5 01        	lda	<R0
  6160 09:D082: A0 0C 00     	ldy	#$c
  6161 09:D085: 77 2A        	adc	[<L219+current_segment_0],Y
  6162 09:D087: 85 05        	sta	<R1
  6163 09:D089: A5 03        	lda	<R0+2
  6164 09:D08B: A0 0E 00     	ldy	#$e
  6165 09:D08E: 77 2A        	adc	[<L219+current_segment_0],Y
  6166 09:D090: 85 07        	sta	<R1+2
  6167 09:D092: A5 05        	lda	<R1
  6168 09:D094: A0 04 00     	ldy	#$4
  6169 09:D097: 97 1D        	sta	[<L220+current_record_1],Y
  6170 09:D099: A5 07        	lda	<R1+2
  6171 09:D09B: A0 06 00     	ldy	#$6
  6172 09:D09E: 97 1D        	sta	[<L220+current_record_1],Y
  6173                        ;
  6174                        ;      /* Attache de Record aux précédents */
  6175                        ;      if(current_segment->first_record == NULL)
  6176                        	.line	700
  6177                        ;        current_segment->first_record = current_r
                    ecord;
  6178 09:D0A0: A0 41 0A     	ldy	#$a41
  6179 09:D0A3: B7 2A        	lda	[<L219+current_segment_0],Y
  6180 09:D0A5: A0 43 0A     	ldy	#$a43
  6181 09:D0A8: 17 2A        	ora	[<L219+current_segment_0],Y
  6182 09:D0AA: F0 03        	beq	L229
  6183 09:D0AC: 82 11 00     	brl	L10082
  6184                        L229:
  6185                        	.line	701
  6186 09:D0AF: A5 1D        	lda	<L220+current_record_1
  6187 09:D0B1: A0 41 0A     	ldy	#$a41
  6188 09:D0B4: 97 2A        	sta	[<L219+current_segment_0],Y
  6189 09:D0B6: A5 1F        	lda	<L220+current_record_1+2
  6190 09:D0B8: A0 43 0A     	ldy	#$a43
  6191 09:D0BB: 97 2A        	sta	[<L219+current_segment_0],Y
  6192                        ;      else
  6193 09:D0BD: 82 1C 00     	brl	L10083
  6194                        L10082:
  6195                        ;        current_segment->last_record->next = curr
                    ent_record;
  6196                        	.line	703
  6197 09:D0C0: A0 45 0A     	ldy	#$a45
  6198 09:D0C3: B7 2A        	lda	[<L219+current_segment_0],Y
  6199 09:D0C5: 85 01        	sta	<R0
  6200 09:D0C7: A0 47 0A     	ldy	#$a47
  6201 09:D0CA: B7 2A        	lda	[<L219+current_segment_0],Y
  6202 09:D0CC: 85 03        	sta	<R0+2
  6203 09:D0CE: A5 1D        	lda	<L220+current_record_1
  6204 09:D0D0: A0 11 00     	ldy	#$11
  Thu Dec  3 2020 22:25                                                Page 116


  6205 09:D0D3: 97 01        	sta	[<R0],Y
  6206 09:D0D5: A5 1F        	lda	<L220+current_record_1+2
  6207 09:D0D7: A0 13 00     	ldy	#$13
  6208 09:D0DA: 97 01        	sta	[<R0],Y
  6209                        L10083:
  6210                        ;      current_segment->last_record = current_reco
                    rd;
  6211                        	.line	704
  6212 09:D0DC: A5 1D        	lda	<L220+current_record_1
  6213 09:D0DE: A0 45 0A     	ldy	#$a45
  6214 09:D0E1: 97 2A        	sta	[<L219+current_segment_0],Y
  6215 09:D0E3: A5 1F        	lda	<L220+current_record_1+2
  6216 09:D0E5: A0 47 0A     	ldy	#$a47
  6217 09:D0E8: 97 2A        	sta	[<L219+current_segment_0],Y
  6218                        ;      current_segment->nb_record++;
  6219                        	.line	705
  6220 09:D0EA: A0 3F 0A     	ldy	#$a3f
  6221 09:D0ED: B7 2A        	lda	[<L219+current_segment_0],Y
  6222 09:D0EF: 1A           	ina
  6223 09:D0F0: A0 3F 0A     	ldy	#$a3f
  6224 09:D0F3: 97 2A        	sta	[<L219+current_segment_0],Y
  6225                        ;
  6226                        ;      /******************************************
                    ************/
  6227                        ;      /** On conserve un pointeur vers les Data d
                    u Segment **/
  6228                        ;      /******************************************
                    ************/
  6229                        ;      if(current_record->operation_code >= 0x01 &
                    & current_record->operation_code <= 0xDF && current_record->
                    record_data != NULL)
  6230                        	.line	710
  6231                        ;        {
  6232 09:D0F5: E2 20        	sep	#$20
  6233                        	longa	off
  6234 09:D0F7: A0 08 00     	ldy	#$8
  6235 09:D0FA: B7 1D        	lda	[<L220+current_record_1],Y
  6236 09:D0FC: C9 01        	cmp	#<$1
  6237 09:D0FE: C2 20        	rep	#$20
  6238                        	longa	on
  6239 09:D100: B0 03        	bcs	L230
  6240 09:D102: 82 20 01     	brl	L10084
  6241                        L230:
  6242 09:D105: E2 20        	sep	#$20
  6243                        	longa	off
  6244 09:D107: A9 DF        	lda	#$df
  6245 09:D109: A0 08 00     	ldy	#$8
  6246 09:D10C: D7 1D        	cmp	[<L220+current_record_1],Y
  6247 09:D10E: C2 20        	rep	#$20
  6248                        	longa	on
  6249 09:D110: B0 03        	bcs	L231
  6250 09:D112: 82 10 01     	brl	L10084
  6251                        L231:
  6252 09:D115: A0 0B 00     	ldy	#$b
  6253 09:D118: B7 1D        	lda	[<L220+current_record_1],Y
  6254 09:D11A: A0 0D 00     	ldy	#$d
  6255 09:D11D: 17 1D        	ora	[<L220+current_record_1],Y
  6256 09:D11F: D0 03        	bne	L232
  Thu Dec  3 2020 22:25                                                Page 117


  6257 09:D121: 82 01 01     	brl	L10084
  6258                        L232:
  6259                        	.line	711
  6260                        ;          /* Ajoute les data du CONST au Segment 
                    */
  6261                        ;          record_data = ((struct record_CONST *)(
                    current_record->record_data))->data;
  6262                        	.line	713
  6263 09:D124: A0 0B 00     	ldy	#$b
  6264 09:D127: B7 1D        	lda	[<L220+current_record_1],Y
  6265 09:D129: 85 01        	sta	<R0
  6266 09:D12B: A0 0D 00     	ldy	#$d
  6267 09:D12E: B7 1D        	lda	[<L220+current_record_1],Y
  6268 09:D130: 85 03        	sta	<R0+2
  6269 09:D132: A0 0A 00     	ldy	#$a
  6270 09:D135: B7 01        	lda	[<R0],Y
  6271 09:D137: 85 15        	sta	<L220+record_data_1
  6272 09:D139: A0 0C 00     	ldy	#$c
  6273 09:D13C: B7 01        	lda	[<R0],Y
  6274 09:D13E: 85 17        	sta	<L220+record_data_1+2
  6275                        ;          record_data_length = ((struct record_CO
                    NST *)(current_record->record_data))->ByteCnt;
  6276                        	.line	714
  6277 09:D140: A0 0B 00     	ldy	#$b
  6278 09:D143: B7 1D        	lda	[<L220+current_record_1],Y
  6279 09:D145: 85 01        	sta	<R0
  6280 09:D147: A0 0D 00     	ldy	#$d
  6281 09:D14A: B7 1D        	lda	[<L220+current_record_1],Y
  6282 09:D14C: 85 03        	sta	<R0+2
  6283 09:D14E: A0 09 00     	ldy	#$9
  6284 09:D151: B7 01        	lda	[<R0],Y
  6285 09:D153: 29 FF 00     	and	#$ff
  6286 09:D156: 85 13        	sta	<L220+record_data_length_1
  6287                        ;
  6288                        ;          /* Allocation mémoire */
  6289                        ;          data = (unsigned char *) k_calloc(1,cur
                    rent_segment->data_length+record_data_length);
  6290                        	.line	717
  6291 09:D158: 18           	clc
  6292 09:D159: A0 4B 0A     	ldy	#$a4b
  6293 09:D15C: B7 2A        	lda	[<L219+current_segment_0],Y
  6294 09:D15E: 65 13        	adc	<L220+record_data_length_1
  6295 09:D160: 48           	pha
  6296 09:D161: F4 01 00     	pea	#<$1
  6297 09:D164: 22 xx xx xx  	jsl	~~k_calloc
  6298 09:D168: 85 19        	sta	<L220+data_1
  6299 09:D16A: 86 1B        	stx	<L220+data_1+2
  6300                        ;          if(data == NULL)
  6301                        	.line	718
  6302                        ;            {
  6303 09:D16C: A5 19        	lda	<L220+data_1
  6304 09:D16E: 05 1B        	ora	<L220+data_1+2
  6305 09:D170: F0 03        	beq	L233
  6306 09:D172: 82 0E 00     	brl	L10085
  6307                        L233:
  6308                        	.line	719
  6309                        ;              //printf("  Error : Impossible to a
                    llocate memory to process Segment Body Record.\n");
  Thu Dec  3 2020 22:25                                                Page 118


  6310                        ;              mem_free_record(current_record);
  6311                        	.line	721
  6312 09:D175: D4 1F        	pei	<L220+current_record_1+2
  6313 09:D177: D4 1D        	pei	<L220+current_record_1
  6314 09:D179: 22 xx xx xx  	jsl	~~mem_free_record
  6315                        ;              return(1);
  6316                        	.line	722
  6317 09:D17D: A9 01 00     	lda	#$1
  6318 09:D180: 82 C0 FE     	brl	L226
  6319                        ;            }
  6320                        	.line	723
  6321                        ;
  6322                        ;          /* Data */
  6323                        ;          memcpy(data,current_segment->data,curre
                    nt_segment->data_length);
  6324                        L10085:
  6325                        	.line	726
  6326 09:D183: A0 4B 0A     	ldy	#$a4b
  6327 09:D186: B7 2A        	lda	[<L219+current_segment_0],Y
  6328 09:D188: 48           	pha
  6329 09:D189: A0 4F 0A     	ldy	#$a4f
  6330 09:D18C: B7 2A        	lda	[<L219+current_segment_0],Y
  6331 09:D18E: 48           	pha
  6332 09:D18F: A0 4D 0A     	ldy	#$a4d
  6333 09:D192: B7 2A        	lda	[<L219+current_segment_0],Y
  6334 09:D194: 48           	pha
  6335 09:D195: D4 1B        	pei	<L220+data_1+2
  6336 09:D197: D4 19        	pei	<L220+data_1
  6337 09:D199: 22 xx xx xx  	jsl	~~memcpy
  6338                        ;          memcpy(data+current_segment->data_lengt
                    h,record_data,record_data_length);
  6339                        	.line	727
  6340 09:D19D: D4 13        	pei	<L220+record_data_length_1
  6341 09:D19F: D4 17        	pei	<L220+record_data_1+2
  6342 09:D1A1: D4 15        	pei	<L220+record_data_1
  6343 09:D1A3: A0 00 00     	ldy	#$0
  6344 09:D1A6: 5A           	phy
  6345 09:D1A7: A0 4B 0A     	ldy	#$a4b
  6346 09:D1AA: B7 2A        	lda	[<L219+current_segment_0],Y
  6347 09:D1AC: 7A           	ply
  6348 09:D1AD: 2A           	rol	A
  6349 09:D1AE: 6A           	ror	A
  6350 09:D1AF: 10 01        	bpl	L234
  6351 09:D1B1: 88           	dey
  6352                        L234:
  6353 09:D1B2: 85 01        	sta	<R0
  6354 09:D1B4: 84 03        	sty	<R0+2
  6355 09:D1B6: 18           	clc
  6356 09:D1B7: A5 19        	lda	<L220+data_1
  6357 09:D1B9: 65 01        	adc	<R0
  6358 09:D1BB: 85 05        	sta	<R1
  6359 09:D1BD: A5 1B        	lda	<L220+data_1+2
  6360 09:D1BF: 65 03        	adc	<R0+2
  6361 09:D1C1: 85 07        	sta	<R1+2
  6362 09:D1C3: D4 07        	pei	<R1+2
  6363 09:D1C5: D4 05        	pei	<R1
  6364 09:D1C7: 22 xx xx xx  	jsl	~~memcpy
  6365                        ;          k_free(current_segment->data);
  Thu Dec  3 2020 22:25                                                Page 119


  6366                        	.line	728
  6367 09:D1CB: A0 4F 0A     	ldy	#$a4f
  6368 09:D1CE: B7 2A        	lda	[<L219+current_segment_0],Y
  6369 09:D1D0: 48           	pha
  6370 09:D1D1: A0 4D 0A     	ldy	#$a4d
  6371 09:D1D4: B7 2A        	lda	[<L219+current_segment_0],Y
  6372 09:D1D6: 48           	pha
  6373 09:D1D7: 22 xx xx xx  	jsl	~~k_free
  6374                        ;          current_segment->data = data;
  6375                        	.line	729
  6376 09:D1DB: A5 19        	lda	<L220+data_1
  6377 09:D1DD: A0 4D 0A     	ldy	#$a4d
  6378 09:D1E0: 97 2A        	sta	[<L219+current_segment_0],Y
  6379 09:D1E2: A5 1B        	lda	<L220+data_1+2
  6380 09:D1E4: A0 4F 0A     	ldy	#$a4f
  6381 09:D1E7: 97 2A        	sta	[<L219+current_segment_0],Y
  6382                        ;
  6383                        ;          /* Longueur Data (CONST/DS/LCONST) */
  6384                        ;          current_segment->data_length += record_
                    data_length;
  6385                        	.line	732
  6386 09:D1E9: 18           	clc
  6387 09:D1EA: A9 4B 0A     	lda	#$a4b
  6388 09:D1ED: 65 2A        	adc	<L219+current_segment_0
  6389 09:D1EF: 85 01        	sta	<R0
  6390 09:D1F1: A9 00 00     	lda	#$0
  6391 09:D1F4: 65 2C        	adc	<L219+current_segment_0+2
  6392 09:D1F6: 85 03        	sta	<R0+2
  6393 09:D1F8: 18           	clc
  6394 09:D1F9: A7 01        	lda	[<R0]
  6395 09:D1FB: 65 13        	adc	<L220+record_data_length_1
  6396 09:D1FD: 87 01        	sta	[<R0]
  6397                        ;
  6398                        ;          /* Offset des Data (CONST/DS/LCONST) du
                     segment */
  6399                        ;          if(current_segment->data_offset == 0)
  6400                        	.line	735
  6401                        ;            current_segment->data_offset = curren
                    t_record->FileOffset + 1;    /* Code */
  6402 09:D1FF: A0 49 0A     	ldy	#$a49
  6403 09:D202: B7 2A        	lda	[<L219+current_segment_0],Y
  6404 09:D204: F0 03        	beq	L235
  6405 09:D206: 82 19 00     	brl	L10086
  6406                        L235:
  6407                        	.line	736
  6408 09:D209: 18           	clc
  6409 09:D20A: A9 01 00     	lda	#$1
  6410 09:D20D: 67 1D        	adc	[<L220+current_record_1]
  6411 09:D20F: 85 01        	sta	<R0
  6412 09:D211: A9 00 00     	lda	#$0
  6413 09:D214: A0 02 00     	ldy	#$2
  6414 09:D217: 77 1D        	adc	[<L220+current_record_1],Y
  6415 09:D219: 85 03        	sta	<R0+2
  6416 09:D21B: A5 01        	lda	<R0
  6417 09:D21D: A0 49 0A     	ldy	#$a49
  6418 09:D220: 97 2A        	sta	[<L219+current_segment_0],Y
  6419                        ;        }
  6420                        L10086:
  Thu Dec  3 2020 22:25                                                Page 120


  6421                        	.line	737
  6422                        ;      else if(current_record->operation_code == 0
                    xF1 && current_record->record_data != NULL)
  6423 09:D222: 82 ED 01     	brl	L10087
  6424                        L10084:
  6425                        	.line	738
  6426                        ;        {
  6427 09:D225: E2 20        	sep	#$20
  6428                        	longa	off
  6429 09:D227: A0 08 00     	ldy	#$8
  6430 09:D22A: B7 1D        	lda	[<L220+current_record_1],Y
  6431 09:D22C: C9 F1        	cmp	#<$f1
  6432 09:D22E: C2 20        	rep	#$20
  6433                        	longa	on
  6434 09:D230: F0 03        	beq	L236
  6435 09:D232: 82 C3 00     	brl	L10088
  6436                        L236:
  6437 09:D235: A0 0B 00     	ldy	#$b
  6438 09:D238: B7 1D        	lda	[<L220+current_record_1],Y
  6439 09:D23A: A0 0D 00     	ldy	#$d
  6440 09:D23D: 17 1D        	ora	[<L220+current_record_1],Y
  6441 09:D23F: D0 03        	bne	L237
  6442 09:D241: 82 B4 00     	brl	L10088
  6443                        L237:
  6444                        	.line	739
  6445                        ;          /* Ajoute les 00 du DS au Segment */
  6446                        ;          record_data_length = (int) ((struct rec
                    ord_DS *)(current_record->record_data))->nb_zero_byte;
  6447                        	.line	741
  6448 09:D244: A0 0B 00     	ldy	#$b
  6449 09:D247: B7 1D        	lda	[<L220+current_record_1],Y
  6450 09:D249: 85 01        	sta	<R0
  6451 09:D24B: A0 0D 00     	ldy	#$d
  6452 09:D24E: B7 1D        	lda	[<L220+current_record_1],Y
  6453 09:D250: 85 03        	sta	<R0+2
  6454 09:D252: A0 09 00     	ldy	#$9
  6455 09:D255: B7 01        	lda	[<R0],Y
  6456 09:D257: 85 13        	sta	<L220+record_data_length_1
  6457                        ;
  6458                        ;          /* Allocation mémoire */
  6459                        ;          data = (unsigned char *) k_calloc(1,cur
                    rent_segment->data_length+record_data_length);
  6460                        	.line	744
  6461 09:D259: 18           	clc
  6462 09:D25A: A0 4B 0A     	ldy	#$a4b
  6463 09:D25D: B7 2A        	lda	[<L219+current_segment_0],Y
  6464 09:D25F: 65 13        	adc	<L220+record_data_length_1
  6465 09:D261: 48           	pha
  6466 09:D262: F4 01 00     	pea	#<$1
  6467 09:D265: 22 xx xx xx  	jsl	~~k_calloc
  6468 09:D269: 85 19        	sta	<L220+data_1
  6469 09:D26B: 86 1B        	stx	<L220+data_1+2
  6470                        ;          if(data == NULL)
  6471                        	.line	745
  6472                        ;            {
  6473 09:D26D: A5 19        	lda	<L220+data_1
  6474 09:D26F: 05 1B        	ora	<L220+data_1+2
  6475 09:D271: F0 03        	beq	L238
  Thu Dec  3 2020 22:25                                                Page 121


  6476 09:D273: 82 0E 00     	brl	L10089
  6477                        L238:
  6478                        	.line	746
  6479                        ;              //printf("  Error : Impossible to a
                    llocate memory to process Segment Body Record.\n");
  6480                        ;              mem_free_record(current_record);
  6481                        	.line	748
  6482 09:D276: D4 1F        	pei	<L220+current_record_1+2
  6483 09:D278: D4 1D        	pei	<L220+current_record_1
  6484 09:D27A: 22 xx xx xx  	jsl	~~mem_free_record
  6485                        ;              return(1);
  6486                        	.line	749
  6487 09:D27E: A9 01 00     	lda	#$1
  6488 09:D281: 82 BF FD     	brl	L226
  6489                        ;            }
  6490                        	.line	750
  6491                        ;
  6492                        ;          /* Data */
  6493                        ;          memcpy(data,current_segment->data,curre
                    nt_segment->data_length);
  6494                        L10089:
  6495                        	.line	753
  6496 09:D284: A0 4B 0A     	ldy	#$a4b
  6497 09:D287: B7 2A        	lda	[<L219+current_segment_0],Y
  6498 09:D289: 48           	pha
  6499 09:D28A: A0 4F 0A     	ldy	#$a4f
  6500 09:D28D: B7 2A        	lda	[<L219+current_segment_0],Y
  6501 09:D28F: 48           	pha
  6502 09:D290: A0 4D 0A     	ldy	#$a4d
  6503 09:D293: B7 2A        	lda	[<L219+current_segment_0],Y
  6504 09:D295: 48           	pha
  6505 09:D296: D4 1B        	pei	<L220+data_1+2
  6506 09:D298: D4 19        	pei	<L220+data_1
  6507 09:D29A: 22 xx xx xx  	jsl	~~memcpy
  6508                        ;          k_free(current_segment->data);
  6509                        	.line	754
  6510 09:D29E: A0 4F 0A     	ldy	#$a4f
  6511 09:D2A1: B7 2A        	lda	[<L219+current_segment_0],Y
  6512 09:D2A3: 48           	pha
  6513 09:D2A4: A0 4D 0A     	ldy	#$a4d
  6514 09:D2A7: B7 2A        	lda	[<L219+current_segment_0],Y
  6515 09:D2A9: 48           	pha
  6516 09:D2AA: 22 xx xx xx  	jsl	~~k_free
  6517                        ;          current_segment->data = data;
  6518                        	.line	755
  6519 09:D2AE: A5 19        	lda	<L220+data_1
  6520 09:D2B0: A0 4D 0A     	ldy	#$a4d
  6521 09:D2B3: 97 2A        	sta	[<L219+current_segment_0],Y
  6522 09:D2B5: A5 1B        	lda	<L220+data_1+2
  6523 09:D2B7: A0 4F 0A     	ldy	#$a4f
  6524 09:D2BA: 97 2A        	sta	[<L219+current_segment_0],Y
  6525                        ;
  6526                        ;          /* Longueur Data (CONST/DS/LCONST) */
  6527                        ;          current_segment->data_length += record_
                    data_length;
  6528                        	.line	758
  6529 09:D2BC: 18           	clc
  6530 09:D2BD: A9 4B 0A     	lda	#$a4b
  Thu Dec  3 2020 22:25                                                Page 122


  6531 09:D2C0: 65 2A        	adc	<L219+current_segment_0
  6532 09:D2C2: 85 01        	sta	<R0
  6533 09:D2C4: A9 00 00     	lda	#$0
  6534 09:D2C7: 65 2C        	adc	<L219+current_segment_0+2
  6535 09:D2C9: 85 03        	sta	<R0+2
  6536 09:D2CB: 18           	clc
  6537 09:D2CC: A7 01        	lda	[<R0]
  6538 09:D2CE: 65 13        	adc	<L220+record_data_length_1
  6539 09:D2D0: 87 01        	sta	[<R0]
  6540                        ;
  6541                        ;          /* Offset des Data (CONST/DS/LCONST) du
                     segment */
  6542                        ;          if(current_segment->data_offset == 0)
  6543                        	.line	761
  6544                        ;            current_segment->data_offset = curren
                    t_record->FileOffset + 1 + sizeof(DWORD);    /* Code + Nb 0 
                    */
  6545 09:D2D2: A0 49 0A     	ldy	#$a49
  6546 09:D2D5: B7 2A        	lda	[<L219+current_segment_0],Y
  6547 09:D2D7: F0 03        	beq	L239
  6548 09:D2D9: 82 19 00     	brl	L10090
  6549                        L239:
  6550                        	.line	762
  6551 09:D2DC: 18           	clc
  6552 09:D2DD: A9 05 00     	lda	#$5
  6553 09:D2E0: 67 1D        	adc	[<L220+current_record_1]
  6554 09:D2E2: 85 01        	sta	<R0
  6555 09:D2E4: A9 00 00     	lda	#$0
  6556 09:D2E7: A0 02 00     	ldy	#$2
  6557 09:D2EA: 77 1D        	adc	[<L220+current_record_1],Y
  6558 09:D2EC: 85 03        	sta	<R0+2
  6559 09:D2EE: A5 01        	lda	<R0
  6560 09:D2F0: A0 49 0A     	ldy	#$a49
  6561 09:D2F3: 97 2A        	sta	[<L219+current_segment_0],Y
  6562                        ;        }
  6563                        L10090:
  6564                        	.line	763
  6565                        ;      else if(current_record->operation_code == 0
                    xF2 && current_record->record_data != NULL)
  6566 09:D2F5: 82 1A 01     	brl	L10091
  6567                        L10088:
  6568                        	.line	764
  6569                        ;        {
  6570 09:D2F8: E2 20        	sep	#$20
  6571                        	longa	off
  6572 09:D2FA: A0 08 00     	ldy	#$8
  6573 09:D2FD: B7 1D        	lda	[<L220+current_record_1],Y
  6574 09:D2FF: C9 F2        	cmp	#<$f2
  6575 09:D301: C2 20        	rep	#$20
  6576                        	longa	on
  6577 09:D303: F0 03        	beq	L240
  6578 09:D305: 82 0A 01     	brl	L10092
  6579                        L240:
  6580 09:D308: A0 0B 00     	ldy	#$b
  6581 09:D30B: B7 1D        	lda	[<L220+current_record_1],Y
  6582 09:D30D: A0 0D 00     	ldy	#$d
  6583 09:D310: 17 1D        	ora	[<L220+current_record_1],Y
  6584 09:D312: D0 03        	bne	L241
  Thu Dec  3 2020 22:25                                                Page 123


  6585 09:D314: 82 FB 00     	brl	L10092
  6586                        L241:
  6587                        	.line	765
  6588                        ;          /* Ajoute les data du LCONST au Segment
                     */
  6589                        ;          record_data = ((struct record_LCONST *)
                    (current_record->record_data))->data;
  6590                        	.line	767
  6591 09:D317: A0 0B 00     	ldy	#$b
  6592 09:D31A: B7 1D        	lda	[<L220+current_record_1],Y
  6593 09:D31C: 85 01        	sta	<R0
  6594 09:D31E: A0 0D 00     	ldy	#$d
  6595 09:D321: B7 1D        	lda	[<L220+current_record_1],Y
  6596 09:D323: 85 03        	sta	<R0+2
  6597 09:D325: A0 0D 00     	ldy	#$d
  6598 09:D328: B7 01        	lda	[<R0],Y
  6599 09:D32A: 85 15        	sta	<L220+record_data_1
  6600 09:D32C: A0 0F 00     	ldy	#$f
  6601 09:D32F: B7 01        	lda	[<R0],Y
  6602 09:D331: 85 17        	sta	<L220+record_data_1+2
  6603                        ;          record_data_length = ((struct record_LC
                    ONST *)(current_record->record_data))->ByteCnt;
  6604                        	.line	768
  6605 09:D333: A0 0B 00     	ldy	#$b
  6606 09:D336: B7 1D        	lda	[<L220+current_record_1],Y
  6607 09:D338: 85 01        	sta	<R0
  6608 09:D33A: A0 0D 00     	ldy	#$d
  6609 09:D33D: B7 1D        	lda	[<L220+current_record_1],Y
  6610 09:D33F: 85 03        	sta	<R0+2
  6611 09:D341: A0 09 00     	ldy	#$9
  6612 09:D344: B7 01        	lda	[<R0],Y
  6613 09:D346: 85 13        	sta	<L220+record_data_length_1
  6614                        ;
  6615                        ;          /* Allocation mémoire */
  6616                        ;          data = (unsigned char *) k_calloc(1,cur
                    rent_segment->data_length+record_data_length);
  6617                        	.line	771
  6618 09:D348: 18           	clc
  6619 09:D349: A0 4B 0A     	ldy	#$a4b
  6620 09:D34C: B7 2A        	lda	[<L219+current_segment_0],Y
  6621 09:D34E: 65 13        	adc	<L220+record_data_length_1
  6622 09:D350: 48           	pha
  6623 09:D351: F4 01 00     	pea	#<$1
  6624 09:D354: 22 xx xx xx  	jsl	~~k_calloc
  6625 09:D358: 85 19        	sta	<L220+data_1
  6626 09:D35A: 86 1B        	stx	<L220+data_1+2
  6627                        ;          if(data == NULL)
  6628                        	.line	772
  6629                        ;            {
  6630 09:D35C: A5 19        	lda	<L220+data_1
  6631 09:D35E: 05 1B        	ora	<L220+data_1+2
  6632 09:D360: F0 03        	beq	L242
  6633 09:D362: 82 0E 00     	brl	L10093
  6634                        L242:
  6635                        	.line	773
  6636                        ;              //printf("  Error : Impossible to a
                    llocate memory to process Segment Body Record.\n");
  6637                        ;              mem_free_record(current_record);
  Thu Dec  3 2020 22:25                                                Page 124


  6638                        	.line	775
  6639 09:D365: D4 1F        	pei	<L220+current_record_1+2
  6640 09:D367: D4 1D        	pei	<L220+current_record_1
  6641 09:D369: 22 xx xx xx  	jsl	~~mem_free_record
  6642                        ;              return(1);
  6643                        	.line	776
  6644 09:D36D: A9 01 00     	lda	#$1
  6645 09:D370: 82 D0 FC     	brl	L226
  6646                        ;            }
  6647                        	.line	777
  6648                        ;
  6649                        ;          /* Data */
  6650                        ;          memcpy(data,current_segment->data,curre
                    nt_segment->data_length);
  6651                        L10093:
  6652                        	.line	780
  6653 09:D373: A0 4B 0A     	ldy	#$a4b
  6654 09:D376: B7 2A        	lda	[<L219+current_segment_0],Y
  6655 09:D378: 48           	pha
  6656 09:D379: A0 4F 0A     	ldy	#$a4f
  6657 09:D37C: B7 2A        	lda	[<L219+current_segment_0],Y
  6658 09:D37E: 48           	pha
  6659 09:D37F: A0 4D 0A     	ldy	#$a4d
  6660 09:D382: B7 2A        	lda	[<L219+current_segment_0],Y
  6661 09:D384: 48           	pha
  6662 09:D385: D4 1B        	pei	<L220+data_1+2
  6663 09:D387: D4 19        	pei	<L220+data_1
  6664 09:D389: 22 xx xx xx  	jsl	~~memcpy
  6665                        ;          memcpy(data+current_segment->data_lengt
                    h,record_data,record_data_length);
  6666                        	.line	781
  6667 09:D38D: D4 13        	pei	<L220+record_data_length_1
  6668 09:D38F: D4 17        	pei	<L220+record_data_1+2
  6669 09:D391: D4 15        	pei	<L220+record_data_1
  6670 09:D393: A0 00 00     	ldy	#$0
  6671 09:D396: 5A           	phy
  6672 09:D397: A0 4B 0A     	ldy	#$a4b
  6673 09:D39A: B7 2A        	lda	[<L219+current_segment_0],Y
  6674 09:D39C: 7A           	ply
  6675 09:D39D: 2A           	rol	A
  6676 09:D39E: 6A           	ror	A
  6677 09:D39F: 10 01        	bpl	L243
  6678 09:D3A1: 88           	dey
  6679                        L243:
  6680 09:D3A2: 85 01        	sta	<R0
  6681 09:D3A4: 84 03        	sty	<R0+2
  6682 09:D3A6: 18           	clc
  6683 09:D3A7: A5 19        	lda	<L220+data_1
  6684 09:D3A9: 65 01        	adc	<R0
  6685 09:D3AB: 85 05        	sta	<R1
  6686 09:D3AD: A5 1B        	lda	<L220+data_1+2
  6687 09:D3AF: 65 03        	adc	<R0+2
  6688 09:D3B1: 85 07        	sta	<R1+2
  6689 09:D3B3: D4 07        	pei	<R1+2
  6690 09:D3B5: D4 05        	pei	<R1
  6691 09:D3B7: 22 xx xx xx  	jsl	~~memcpy
  6692                        ;          k_free(current_segment->data);
  6693                        	.line	782
  Thu Dec  3 2020 22:25                                                Page 125


  6694 09:D3BB: A0 4F 0A     	ldy	#$a4f
  6695 09:D3BE: B7 2A        	lda	[<L219+current_segment_0],Y
  6696 09:D3C0: 48           	pha
  6697 09:D3C1: A0 4D 0A     	ldy	#$a4d
  6698 09:D3C4: B7 2A        	lda	[<L219+current_segment_0],Y
  6699 09:D3C6: 48           	pha
  6700 09:D3C7: 22 xx xx xx  	jsl	~~k_free
  6701                        ;          current_segment->data = data;
  6702                        	.line	783
  6703 09:D3CB: A5 19        	lda	<L220+data_1
  6704 09:D3CD: A0 4D 0A     	ldy	#$a4d
  6705 09:D3D0: 97 2A        	sta	[<L219+current_segment_0],Y
  6706 09:D3D2: A5 1B        	lda	<L220+data_1+2
  6707 09:D3D4: A0 4F 0A     	ldy	#$a4f
  6708 09:D3D7: 97 2A        	sta	[<L219+current_segment_0],Y
  6709                        ;
  6710                        ;          /* Longueur Data (CONST/DS/LCONST) */
  6711                        ;          current_segment->data_length += record_
                    data_length;
  6712                        	.line	786
  6713 09:D3D9: 18           	clc
  6714 09:D3DA: A9 4B 0A     	lda	#$a4b
  6715 09:D3DD: 65 2A        	adc	<L219+current_segment_0
  6716 09:D3DF: 85 01        	sta	<R0
  6717 09:D3E1: A9 00 00     	lda	#$0
  6718 09:D3E4: 65 2C        	adc	<L219+current_segment_0+2
  6719 09:D3E6: 85 03        	sta	<R0+2
  6720 09:D3E8: 18           	clc
  6721 09:D3E9: A7 01        	lda	[<R0]
  6722 09:D3EB: 65 13        	adc	<L220+record_data_length_1
  6723 09:D3ED: 87 01        	sta	[<R0]
  6724                        ;
  6725                        ;          /* Offset des Data (CONST/DS/LCONST) du
                     segment */
  6726                        ;          if(current_segment->data_offset == 0)
  6727                        	.line	789
  6728                        ;            current_segment->data_offset = curren
                    t_record->FileOffset + 1 + sizeof(DWORD);    /* Code + Lengt
                    h */
  6729 09:D3EF: A0 49 0A     	ldy	#$a49
  6730 09:D3F2: B7 2A        	lda	[<L219+current_segment_0],Y
  6731 09:D3F4: F0 03        	beq	L244
  6732 09:D3F6: 82 19 00     	brl	L10094
  6733                        L244:
  6734                        	.line	790
  6735 09:D3F9: 18           	clc
  6736 09:D3FA: A9 05 00     	lda	#$5
  6737 09:D3FD: 67 1D        	adc	[<L220+current_record_1]
  6738 09:D3FF: 85 01        	sta	<R0
  6739 09:D401: A9 00 00     	lda	#$0
  6740 09:D404: A0 02 00     	ldy	#$2
  6741 09:D407: 77 1D        	adc	[<L220+current_record_1],Y
  6742 09:D409: 85 03        	sta	<R0+2
  6743 09:D40B: A5 01        	lda	<R0
  6744 09:D40D: A0 49 0A     	ldy	#$a49
  6745 09:D410: 97 2A        	sta	[<L219+current_segment_0],Y
  6746                        ;        }
  6747                        L10094:
  Thu Dec  3 2020 22:25                                                Page 126


  6748                        	.line	791
  6749                        ;
  6750                        ;      /******************************************
                    ********************/
  6751                        ;      /** On conserve l'offset et la longueur des
                     Reloc du Segment **/
  6752                        ;      /******************************************
                    ********************/
  6753                        ;      if(current_record->operation_code == 0xE2) 
                         /* RELOC */
  6754                        L10092:
  6755                        L10091:
  6756                        L10087:
  6757                        	.line	796
  6758                        ;        {
  6759 09:D412: E2 20        	sep	#$20
  6760                        	longa	off
  6761 09:D414: A0 08 00     	ldy	#$8
  6762 09:D417: B7 1D        	lda	[<L220+current_record_1],Y
  6763 09:D419: C9 E2        	cmp	#<$e2
  6764 09:D41B: C2 20        	rep	#$20
  6765                        	longa	on
  6766 09:D41D: F0 03        	beq	L245
  6767 09:D41F: 82 2D 00     	brl	L10095
  6768                        L245:
  6769                        	.line	797
  6770                        ;          /* Longueur Reloc */
  6771                        ;          current_segment->reloc_length += curren
                    t_record->length;
  6772                        	.line	799
  6773 09:D422: 18           	clc
  6774 09:D423: A9 53 0A     	lda	#$a53
  6775 09:D426: 65 2A        	adc	<L219+current_segment_0
  6776 09:D428: 85 01        	sta	<R0
  6777 09:D42A: A9 00 00     	lda	#$0
  6778 09:D42D: 65 2C        	adc	<L219+current_segment_0+2
  6779 09:D42F: 85 03        	sta	<R0+2
  6780 09:D431: 18           	clc
  6781 09:D432: A7 01        	lda	[<R0]
  6782 09:D434: A0 09 00     	ldy	#$9
  6783 09:D437: 77 1D        	adc	[<L220+current_record_1],Y
  6784 09:D439: 87 01        	sta	[<R0]
  6785                        ;
  6786                        ;          /* Offset des Reloc du segment */
  6787                        ;          if(current_segment->reloc_offset == 0)
  6788                        	.line	802
  6789                        ;            current_segment->reloc_offset = curre
                    nt_record->FileOffset;
  6790 09:D43B: A0 51 0A     	ldy	#$a51
  6791 09:D43E: B7 2A        	lda	[<L219+current_segment_0],Y
  6792 09:D440: F0 03        	beq	L246
  6793 09:D442: 82 07 00     	brl	L10096
  6794                        L246:
  6795                        	.line	803
  6796 09:D445: A7 1D        	lda	[<L220+current_record_1]
  6797 09:D447: A0 51 0A     	ldy	#$a51
  6798 09:D44A: 97 2A        	sta	[<L219+current_segment_0],Y
  6799                        ;        }
  Thu Dec  3 2020 22:25                                                Page 127


  6800                        L10096:
  6801                        	.line	804
  6802                        ;      else if(current_record->operation_code == 0
                    xE3)      /* INTERSEG */
  6803 09:D44C: 82 F1 00     	brl	L10097
  6804                        L10095:
  6805                        	.line	805
  6806                        ;        {
  6807 09:D44F: E2 20        	sep	#$20
  6808                        	longa	off
  6809 09:D451: A0 08 00     	ldy	#$8
  6810 09:D454: B7 1D        	lda	[<L220+current_record_1],Y
  6811 09:D456: C9 E3        	cmp	#<$e3
  6812 09:D458: C2 20        	rep	#$20
  6813                        	longa	on
  6814 09:D45A: F0 03        	beq	L247
  6815 09:D45C: 82 2D 00     	brl	L10098
  6816                        L247:
  6817                        	.line	806
  6818                        ;          /* Longueur Reloc */
  6819                        ;          current_segment->reloc_length += curren
                    t_record->length;
  6820                        	.line	808
  6821 09:D45F: 18           	clc
  6822 09:D460: A9 53 0A     	lda	#$a53
  6823 09:D463: 65 2A        	adc	<L219+current_segment_0
  6824 09:D465: 85 01        	sta	<R0
  6825 09:D467: A9 00 00     	lda	#$0
  6826 09:D46A: 65 2C        	adc	<L219+current_segment_0+2
  6827 09:D46C: 85 03        	sta	<R0+2
  6828 09:D46E: 18           	clc
  6829 09:D46F: A7 01        	lda	[<R0]
  6830 09:D471: A0 09 00     	ldy	#$9
  6831 09:D474: 77 1D        	adc	[<L220+current_record_1],Y
  6832 09:D476: 87 01        	sta	[<R0]
  6833                        ;
  6834                        ;          /* Offset des Reloc du segment */
  6835                        ;          if(current_segment->reloc_offset == 0)
  6836                        	.line	811
  6837                        ;            current_segment->reloc_offset = curre
                    nt_record->FileOffset;
  6838 09:D478: A0 51 0A     	ldy	#$a51
  6839 09:D47B: B7 2A        	lda	[<L219+current_segment_0],Y
  6840 09:D47D: F0 03        	beq	L248
  6841 09:D47F: 82 07 00     	brl	L10099
  6842                        L248:
  6843                        	.line	812
  6844 09:D482: A7 1D        	lda	[<L220+current_record_1]
  6845 09:D484: A0 51 0A     	ldy	#$a51
  6846 09:D487: 97 2A        	sta	[<L219+current_segment_0],Y
  6847                        ;        }
  6848                        L10099:
  6849                        	.line	813
  6850                        ;      else if(current_record->operation_code == 0
                    xF5)      /* cRELOC */
  6851 09:D489: 82 B4 00     	brl	L10100
  6852                        L10098:
  6853                        	.line	814
  Thu Dec  3 2020 22:25                                                Page 128


  6854                        ;        {
  6855 09:D48C: E2 20        	sep	#$20
  6856                        	longa	off
  6857 09:D48E: A0 08 00     	ldy	#$8
  6858 09:D491: B7 1D        	lda	[<L220+current_record_1],Y
  6859 09:D493: C9 F5        	cmp	#<$f5
  6860 09:D495: C2 20        	rep	#$20
  6861                        	longa	on
  6862 09:D497: F0 03        	beq	L249
  6863 09:D499: 82 2D 00     	brl	L10101
  6864                        L249:
  6865                        	.line	815
  6866                        ;          /* Longueur Reloc */
  6867                        ;          current_segment->reloc_length += curren
                    t_record->length;
  6868                        	.line	817
  6869 09:D49C: 18           	clc
  6870 09:D49D: A9 53 0A     	lda	#$a53
  6871 09:D4A0: 65 2A        	adc	<L219+current_segment_0
  6872 09:D4A2: 85 01        	sta	<R0
  6873 09:D4A4: A9 00 00     	lda	#$0
  6874 09:D4A7: 65 2C        	adc	<L219+current_segment_0+2
  6875 09:D4A9: 85 03        	sta	<R0+2
  6876 09:D4AB: 18           	clc
  6877 09:D4AC: A7 01        	lda	[<R0]
  6878 09:D4AE: A0 09 00     	ldy	#$9
  6879 09:D4B1: 77 1D        	adc	[<L220+current_record_1],Y
  6880 09:D4B3: 87 01        	sta	[<R0]
  6881                        ;
  6882                        ;          /* Offset des Reloc du segment */
  6883                        ;          if(current_segment->reloc_offset == 0)
  6884                        	.line	820
  6885                        ;            current_segment->reloc_offset = curre
                    nt_record->FileOffset;
  6886 09:D4B5: A0 51 0A     	ldy	#$a51
  6887 09:D4B8: B7 2A        	lda	[<L219+current_segment_0],Y
  6888 09:D4BA: F0 03        	beq	L250
  6889 09:D4BC: 82 07 00     	brl	L10102
  6890                        L250:
  6891                        	.line	821
  6892 09:D4BF: A7 1D        	lda	[<L220+current_record_1]
  6893 09:D4C1: A0 51 0A     	ldy	#$a51
  6894 09:D4C4: 97 2A        	sta	[<L219+current_segment_0],Y
  6895                        ;        }
  6896                        L10102:
  6897                        	.line	822
  6898                        ;      else if(current_record->operation_code == 0
                    xF6)      /* cINTERSEG */
  6899 09:D4C6: 82 77 00     	brl	L10103
  6900                        L10101:
  6901                        	.line	823
  6902                        ;        {
  6903 09:D4C9: E2 20        	sep	#$20
  6904                        	longa	off
  6905 09:D4CB: A0 08 00     	ldy	#$8
  6906 09:D4CE: B7 1D        	lda	[<L220+current_record_1],Y
  6907 09:D4D0: C9 F6        	cmp	#<$f6
  6908 09:D4D2: C2 20        	rep	#$20
  Thu Dec  3 2020 22:25                                                Page 129


  6909                        	longa	on
  6910 09:D4D4: F0 03        	beq	L251
  6911 09:D4D6: 82 2D 00     	brl	L10104
  6912                        L251:
  6913                        	.line	824
  6914                        ;          /* Longueur Reloc */
  6915                        ;          current_segment->reloc_length += curren
                    t_record->length;
  6916                        	.line	826
  6917 09:D4D9: 18           	clc
  6918 09:D4DA: A9 53 0A     	lda	#$a53
  6919 09:D4DD: 65 2A        	adc	<L219+current_segment_0
  6920 09:D4DF: 85 01        	sta	<R0
  6921 09:D4E1: A9 00 00     	lda	#$0
  6922 09:D4E4: 65 2C        	adc	<L219+current_segment_0+2
  6923 09:D4E6: 85 03        	sta	<R0+2
  6924 09:D4E8: 18           	clc
  6925 09:D4E9: A7 01        	lda	[<R0]
  6926 09:D4EB: A0 09 00     	ldy	#$9
  6927 09:D4EE: 77 1D        	adc	[<L220+current_record_1],Y
  6928 09:D4F0: 87 01        	sta	[<R0]
  6929                        ;
  6930                        ;          /* Offset des Reloc du segment */
  6931                        ;          if(current_segment->reloc_offset == 0)
  6932                        	.line	829
  6933                        ;            current_segment->reloc_offset = curre
                    nt_record->FileOffset;
  6934 09:D4F2: A0 51 0A     	ldy	#$a51
  6935 09:D4F5: B7 2A        	lda	[<L219+current_segment_0],Y
  6936 09:D4F7: F0 03        	beq	L252
  6937 09:D4F9: 82 07 00     	brl	L10105
  6938                        L252:
  6939                        	.line	830
  6940 09:D4FC: A7 1D        	lda	[<L220+current_record_1]
  6941 09:D4FE: A0 51 0A     	ldy	#$a51
  6942 09:D501: 97 2A        	sta	[<L219+current_segment_0],Y
  6943                        ;        }
  6944                        L10105:
  6945                        	.line	831
  6946                        ;      else if(current_record->operation_code == 0
                    xF7)      /* SUPER */
  6947 09:D503: 82 3A 00     	brl	L10106
  6948                        L10104:
  6949                        	.line	832
  6950                        ;        {
  6951 09:D506: E2 20        	sep	#$20
  6952                        	longa	off
  6953 09:D508: A0 08 00     	ldy	#$8
  6954 09:D50B: B7 1D        	lda	[<L220+current_record_1],Y
  6955 09:D50D: C9 F7        	cmp	#<$f7
  6956 09:D50F: C2 20        	rep	#$20
  6957                        	longa	on
  6958 09:D511: F0 03        	beq	L253
  6959 09:D513: 82 2A 00     	brl	L10107
  6960                        L253:
  6961                        	.line	833
  6962                        ;          /* Longueur Reloc */
  6963                        ;          current_segment->reloc_length += curren
  Thu Dec  3 2020 22:25                                                Page 130


                    t_record->length;
  6964                        	.line	835
  6965 09:D516: 18           	clc
  6966 09:D517: A9 53 0A     	lda	#$a53
  6967 09:D51A: 65 2A        	adc	<L219+current_segment_0
  6968 09:D51C: 85 01        	sta	<R0
  6969 09:D51E: A9 00 00     	lda	#$0
  6970 09:D521: 65 2C        	adc	<L219+current_segment_0+2
  6971 09:D523: 85 03        	sta	<R0+2
  6972 09:D525: 18           	clc
  6973 09:D526: A7 01        	lda	[<R0]
  6974 09:D528: A0 09 00     	ldy	#$9
  6975 09:D52B: 77 1D        	adc	[<L220+current_record_1],Y
  6976 09:D52D: 87 01        	sta	[<R0]
  6977                        ;
  6978                        ;          /* Offset des Reloc du segment */
  6979                        ;          if(current_segment->reloc_offset == 0)
  6980                        	.line	838
  6981                        ;            current_segment->reloc_offset = curre
                    nt_record->FileOffset;
  6982 09:D52F: A0 51 0A     	ldy	#$a51
  6983 09:D532: B7 2A        	lda	[<L219+current_segment_0],Y
  6984 09:D534: F0 03        	beq	L254
  6985 09:D536: 82 07 00     	brl	L10108
  6986                        L254:
  6987                        	.line	839
  6988 09:D539: A7 1D        	lda	[<L220+current_record_1]
  6989 09:D53B: A0 51 0A     	ldy	#$a51
  6990 09:D53E: 97 2A        	sta	[<L219+current_segment_0],Y
  6991                        ;        }
  6992                        L10108:
  6993                        	.line	840
  6994                        ;
  6995                        ;
  6996                        ;      /** On passe au Record suivant si on est ar
                    rivé à la fin du Body (V 2.1) **/
  6997                        ;      body_offset += record_length;
  6998                        L10107:
  6999                        L10106:
  7000                        L10103:
  7001                        L10100:
  7002                        L10097:
  7003                        	.line	844
  7004 09:D540: 18           	clc
  7005 09:D541: A5 0D        	lda	<L220+body_offset_1
  7006 09:D543: 65 11        	adc	<L220+record_length_1
  7007 09:D545: 85 0D        	sta	<L220+body_offset_1
  7008                        ;      if(body_offset == body_length)
  7009                        	.line	845
  7010                        ;        break;
  7011 09:D547: A5 0D        	lda	<L220+body_offset_1
  7012 09:D549: C5 0F        	cmp	<L220+body_length_1
  7013 09:D54B: D0 03        	bne	L255
  7014 09:D54D: 82 10 00     	brl	L10080
  7015                        L255:
  7016                        ;
  7017                        ;      /* On va aussi s'arrêter si on tombe sur un
                     DEND (qui en V0 et V1 vient avant la fin du Body) */
  Thu Dec  3 2020 22:25                                                Page 131


  7018                        ;      if(current_record->operation_code == 0x00)
  7019                        	.line	849
  7020                        ;        break;
  7021 09:D550: A0 08 00     	ldy	#$8
  7022 09:D553: B7 1D        	lda	[<L220+current_record_1],Y
  7023 09:D555: 29 FF 00     	and	#$ff
  7024 09:D558: D0 03        	bne	L256
  7025 09:D55A: 82 03 00     	brl	L10080
  7026                        L256:
  7027                        ;    }
  7028                        	.line	851
  7029 09:D55D: 82 59 FA     	brl	L10079
  7030                        L10080:
  7031                        ;
  7032                        ;  /** On va extraire tous les RELOC / INTERSEG **
                    /
  7033                        ;  my_Memory(MEMORY_SORT_RELOC,&current_segment->n
                    b_reloc,&current_segment->tab_reloc);
  7034                        	.line	854
  7035 09:D560: 18           	clc
  7036 09:D561: A9 57 0A     	lda	#$a57
  7037 09:D564: 65 2A        	adc	<L219+current_segment_0
  7038 09:D566: 85 01        	sta	<R0
  7039 09:D568: A9 00 00     	lda	#$0
  7040 09:D56B: 65 2C        	adc	<L219+current_segment_0+2
  7041 09:D56D: 85 03        	sta	<R0+2
  7042 09:D56F: D4 03        	pei	<R0+2
  7043 09:D571: D4 01        	pei	<R0
  7044 09:D573: 18           	clc
  7045 09:D574: A9 55 0A     	lda	#$a55
  7046 09:D577: 65 2A        	adc	<L219+current_segment_0
  7047 09:D579: 85 05        	sta	<R1
  7048 09:D57B: A9 00 00     	lda	#$0
  7049 09:D57E: 65 2C        	adc	<L219+current_segment_0+2
  7050 09:D580: 85 07        	sta	<R1+2
  7051 09:D582: D4 07        	pei	<R1+2
  7052 09:D584: D4 05        	pei	<R1
  7053 09:D586: F4 0C 00     	pea	#<$c
  7054 09:D589: 22 xx xx xx  	jsl	~~my_Memory
  7055                        ;  my_Memory(MEMORY_SORT_INTERSEG,&current_segment
                    ->nb_interseg,&current_segment->tab_interseg);
  7056                        	.line	855
  7057 09:D58D: 18           	clc
  7058 09:D58E: A9 5D 0A     	lda	#$a5d
  7059 09:D591: 65 2A        	adc	<L219+current_segment_0
  7060 09:D593: 85 01        	sta	<R0
  7061 09:D595: A9 00 00     	lda	#$0
  7062 09:D598: 65 2C        	adc	<L219+current_segment_0+2
  7063 09:D59A: 85 03        	sta	<R0+2
  7064 09:D59C: D4 03        	pei	<R0+2
  7065 09:D59E: D4 01        	pei	<R0
  7066 09:D5A0: 18           	clc
  7067 09:D5A1: A9 5B 0A     	lda	#$a5b
  7068 09:D5A4: 65 2A        	adc	<L219+current_segment_0
  7069 09:D5A6: 85 05        	sta	<R1
  7070 09:D5A8: A9 00 00     	lda	#$0
  7071 09:D5AB: 65 2C        	adc	<L219+current_segment_0+2
  7072 09:D5AD: 85 07        	sta	<R1+2
  Thu Dec  3 2020 22:25                                                Page 132


  7073 09:D5AF: D4 07        	pei	<R1+2
  7074 09:D5B1: D4 05        	pei	<R1
  7075 09:D5B3: F4 16 00     	pea	#<$16
  7076 09:D5B6: 22 xx xx xx  	jsl	~~my_Memory
  7077                        ;
  7078                        ;  /* OK */
  7079                        ;  return(0);
  7080                        	.line	858
  7081 09:D5BA: A9 00 00     	lda	#$0
  7082 09:D5BD: 82 83 FA     	brl	L226
  7083                        ;}
  7084                        	.line	859
  7085                        	.endblock	859
  7086             00000020   L219	equ	32
  7087             0000000D   L220	equ	13
  7088 09:D5C0:              	ends
  7089                        	efunc
  7090                        	.endfunc	859,13,32
  7091                        	.line	859
  7092                        ;
  7093                        ;
  7094                        ;/************************************************
                    *******************/
  7095                        ;/*  mem_free_omf() :  Libération mémoire de la st
                    ructure omf_file. */
  7096                        ;/************************************************
                    *******************/
  7097                        ;void mem_free_omf(struct omf_file *current_file)
  7098                        ;{
  7099                        	.line	865
  7100                        	.line	866
  7101                        	LOADER
  7102                        	xdef	~~mem_free_omf
  7103                        	func
  7104                        	.function	866
  7105                        ~~mem_free_omf:
  7106                        	longa	on
  7107                        	longi	on
  7108 09:D5C0: 3B           	tsc
  7109 09:D5C1: 38           	sec
  7110 09:D5C2: E9 08 00     	sbc	#L257
  7111 09:D5C5: 1B           	tcs
  7112 09:D5C6: 0B           	phd
  7113 09:D5C7: 5B           	tcd
  7114             00000004   current_file_0	set	4
  7115                        	.block	866
  7116                        ;  struct omf_segment *current_segment;
  7117                        ;  struct omf_segment *next_segment;
  7118                        ;
  7119                        ;  if(current_file)
  7120             00000000   current_segment_1	set	0
  7121             00000004   next_segment_1	set	4
  7122                        	.sym	current_segment,0,138,1,32,100
  7123                        	.sym	next_segment,4,138,1,32,100
  7124                        	.sym	current_file,4,138,6,32,101
  7125                        	.line	870
  7126                        ;    {
  7127 09:D5C8: A5 0C        	lda	<L257+current_file_0
  Thu Dec  3 2020 22:25                                                Page 133


  7128 09:D5CA: 05 0E        	ora	<L257+current_file_0+2
  7129 09:D5CC: D0 03        	bne	L260
  7130 09:D5CE: 82 78 00     	brl	L10109
  7131                        L260:
  7132                        	.line	871
  7133                        ;      if(current_file->file_path)
  7134                        	.line	872
  7135                        ;        k_free(current_file->file_path);
  7136 09:D5D1: A7 0C        	lda	[<L257+current_file_0]
  7137 09:D5D3: A0 02 00     	ldy	#$2
  7138 09:D5D6: 17 0C        	ora	[<L257+current_file_0],Y
  7139 09:D5D8: D0 03        	bne	L261
  7140 09:D5DA: 82 0D 00     	brl	L10110
  7141                        L261:
  7142                        	.line	873
  7143 09:D5DD: A0 02 00     	ldy	#$2
  7144 09:D5E0: B7 0C        	lda	[<L257+current_file_0],Y
  7145 09:D5E2: 48           	pha
  7146 09:D5E3: A7 0C        	lda	[<L257+current_file_0]
  7147 09:D5E5: 48           	pha
  7148 09:D5E6: 22 xx xx xx  	jsl	~~k_free
  7149                        ;
  7150                        ;      if(current_file->data)
  7151                        L10110:
  7152                        	.line	875
  7153                        ;        k_free(current_file->data);
  7154 09:D5EA: A0 0A 00     	ldy	#$a
  7155 09:D5ED: B7 0C        	lda	[<L257+current_file_0],Y
  7156 09:D5EF: A0 0C 00     	ldy	#$c
  7157 09:D5F2: 17 0C        	ora	[<L257+current_file_0],Y
  7158 09:D5F4: D0 03        	bne	L262
  7159 09:D5F6: 82 10 00     	brl	L10111
  7160                        L262:
  7161                        	.line	876
  7162 09:D5F9: A0 0C 00     	ldy	#$c
  7163 09:D5FC: B7 0C        	lda	[<L257+current_file_0],Y
  7164 09:D5FE: 48           	pha
  7165 09:D5FF: A0 0A 00     	ldy	#$a
  7166 09:D602: B7 0C        	lda	[<L257+current_file_0],Y
  7167 09:D604: 48           	pha
  7168 09:D605: 22 xx xx xx  	jsl	~~k_free
  7169                        ;
  7170                        ;      /* Libération des segments */
  7171                        ;      for(current_segment = current_file->first_s
                    egment; current_segment; )
  7172                        L10111:
  7173                        	.line	879
  7174 09:D609: A0 10 00     	ldy	#$10
  7175 09:D60C: B7 0C        	lda	[<L257+current_file_0],Y
  7176 09:D60E: 85 01        	sta	<L258+current_segment_1
  7177 09:D610: A0 12 00     	ldy	#$12
  7178 09:D613: B7 0C        	lda	[<L257+current_file_0],Y
  7179 09:D615: 85 03        	sta	<L258+current_segment_1+2
  7180 09:D617: 82 1E 00     	brl	L10115
  7181                        L10114:
  7182                        ;        {
  7183                        	.line	880
  7184                        ;          next_segment = current_segment->next;
  Thu Dec  3 2020 22:25                                                Page 134


  7185                        	.line	881
  7186 09:D61A: A0 61 0A     	ldy	#$a61
  7187 09:D61D: B7 01        	lda	[<L258+current_segment_1],Y
  7188 09:D61F: 85 05        	sta	<L258+next_segment_1
  7189 09:D621: A0 63 0A     	ldy	#$a63
  7190 09:D624: B7 01        	lda	[<L258+current_segment_1],Y
  7191 09:D626: 85 07        	sta	<L258+next_segment_1+2
  7192                        ;          mem_free_segment(current_segment);
  7193                        	.line	882
  7194 09:D628: D4 03        	pei	<L258+current_segment_1+2
  7195 09:D62A: D4 01        	pei	<L258+current_segment_1
  7196 09:D62C: 22 59 D6 09  	jsl	~~mem_free_segment
  7197                        ;          current_segment = next_segment;
  7198                        	.line	883
  7199 09:D630: A5 05        	lda	<L258+next_segment_1
  7200 09:D632: 85 01        	sta	<L258+current_segment_1
  7201 09:D634: A5 07        	lda	<L258+next_segment_1+2
  7202 09:D636: 85 03        	sta	<L258+current_segment_1+2
  7203                        ;        }
  7204                        	.line	884
  7205                        L10112:
  7206                        L10115:
  7207 09:D638: A5 01        	lda	<L258+current_segment_1
  7208 09:D63A: 05 03        	ora	<L258+current_segment_1+2
  7209 09:D63C: F0 03        	beq	L263
  7210 09:D63E: 82 D9 FF     	brl	L10114
  7211                        L263:
  7212                        L10113:
  7213                        ;
  7214                        ;      k_free(current_file);
  7215                        	.line	886
  7216 09:D641: D4 0E        	pei	<L257+current_file_0+2
  7217 09:D643: D4 0C        	pei	<L257+current_file_0
  7218 09:D645: 22 xx xx xx  	jsl	~~k_free
  7219                        ;    }
  7220                        	.line	887
  7221                        ;}
  7222                        L10109:
  7223                        	.line	888
  7224                        L264:
  7225 09:D649: A5 0A        	lda	<L257+2
  7226 09:D64B: 85 0E        	sta	<L257+2+4
  7227 09:D64D: A5 09        	lda	<L257+1
  7228 09:D64F: 85 0D        	sta	<L257+1+4
  7229 09:D651: 2B           	pld
  7230 09:D652: 3B           	tsc
  7231 09:D653: 18           	clc
  7232 09:D654: 69 0C 00     	adc	#L257+4
  7233 09:D657: 1B           	tcs
  7234 09:D658: 6B           	rtl
  7235                        	.endblock	888
  7236             00000008   L257	equ	8
  7237             00000001   L258	equ	1
  7238 09:D659:              	ends
  7239                        	efunc
  7240                        	.endfunc	888,1,8
  7241                        	.line	888
  7242                        ;
  Thu Dec  3 2020 22:25                                                Page 135


  7243                        ;
  7244                        ;/************************************************
                    **************************/
  7245                        ;/*  mem_free_segment() :  Libération mémoire de l
                    a structure omf_segment. */
  7246                        ;/************************************************
                    **************************/
  7247                        ;static void mem_free_segment(struct omf_segment *
                    current_segment)
  7248                        ;{
  7249                        	.line	894
  7250                        	.line	895
  7251                        	LOADER
  7252                        	func
  7253                        	.function	895
  7254                        ~~mem_free_segment:
  7255                        	longa	on
  7256                        	longi	on
  7257 09:D659: 3B           	tsc
  7258 09:D65A: 38           	sec
  7259 09:D65B: E9 16 00     	sbc	#L265
  7260 09:D65E: 1B           	tcs
  7261 09:D65F: 0B           	phd
  7262 09:D660: 5B           	tcd
  7263             00000004   current_segment_0	set	4
  7264                        	.block	895
  7265                        ;  int i;
  7266                        ;  struct omf_body_record *current_record;
  7267                        ;  struct omf_body_record *next_record;
  7268                        ;
  7269                        ;  if(current_segment)
  7270             00000000   i_1	set	0
  7271             00000002   current_record_1	set	2
  7272             00000006   next_record_1	set	6
  7273                        	.sym	i,0,5,1,16
  7274                        	.sym	current_record,2,138,1,32,64
  7275                        	.sym	next_record,6,138,1,32,64
  7276                        	.sym	current_segment,4,138,6,32,100
  7277                        	.line	900
  7278                        ;    {
  7279 09:D661: A5 1A        	lda	<L265+current_segment_0
  7280 09:D663: 05 1C        	ora	<L265+current_segment_0+2
  7281 09:D665: D0 03        	bne	L268
  7282 09:D667: 82 45 01     	brl	L10116
  7283                        L268:
  7284                        	.line	901
  7285                        ;      /* Libération des Records */
  7286                        ;      for(current_record=current_segment->first_r
                    ecord; current_record; )
  7287                        	.line	903
  7288 09:D66A: A0 41 0A     	ldy	#$a41
  7289 09:D66D: B7 1A        	lda	[<L265+current_segment_0],Y
  7290 09:D66F: 85 0F        	sta	<L266+current_record_1
  7291 09:D671: A0 43 0A     	ldy	#$a43
  7292 09:D674: B7 1A        	lda	[<L265+current_segment_0],Y
  7293 09:D676: 85 11        	sta	<L266+current_record_1+2
  7294 09:D678: 82 1E 00     	brl	L10120
  7295                        L10119:
  Thu Dec  3 2020 22:25                                                Page 136


  7296                        ;        {
  7297                        	.line	904
  7298                        ;          next_record = current_record->next;
  7299                        	.line	905
  7300 09:D67B: A0 11 00     	ldy	#$11
  7301 09:D67E: B7 0F        	lda	[<L266+current_record_1],Y
  7302 09:D680: 85 13        	sta	<L266+next_record_1
  7303 09:D682: A0 13 00     	ldy	#$13
  7304 09:D685: B7 0F        	lda	[<L266+current_record_1],Y
  7305 09:D687: 85 15        	sta	<L266+next_record_1+2
  7306                        ;          mem_free_record(current_record);
  7307                        	.line	906
  7308 09:D689: D4 11        	pei	<L266+current_record_1+2
  7309 09:D68B: D4 0F        	pei	<L266+current_record_1
  7310 09:D68D: 22 xx xx xx  	jsl	~~mem_free_record
  7311                        ;          current_record = next_record;
  7312                        	.line	907
  7313 09:D691: A5 13        	lda	<L266+next_record_1
  7314 09:D693: 85 0F        	sta	<L266+current_record_1
  7315 09:D695: A5 15        	lda	<L266+next_record_1+2
  7316 09:D697: 85 11        	sta	<L266+current_record_1+2
  7317                        ;        }
  7318                        	.line	908
  7319                        L10117:
  7320                        L10120:
  7321 09:D699: A5 0F        	lda	<L266+current_record_1
  7322 09:D69B: 05 11        	ora	<L266+current_record_1+2
  7323 09:D69D: F0 03        	beq	L269
  7324 09:D69F: 82 D9 FF     	brl	L10119
  7325                        L269:
  7326                        L10118:
  7327                        ;
  7328                        ;      /* Libération des Data */
  7329                        ;      if(current_segment->data)
  7330                        	.line	911
  7331                        ;        k_free(current_segment->data);
  7332 09:D6A2: A0 4D 0A     	ldy	#$a4d
  7333 09:D6A5: B7 1A        	lda	[<L265+current_segment_0],Y
  7334 09:D6A7: A0 4F 0A     	ldy	#$a4f
  7335 09:D6AA: 17 1A        	ora	[<L265+current_segment_0],Y
  7336 09:D6AC: D0 03        	bne	L270
  7337 09:D6AE: 82 10 00     	brl	L10121
  7338                        L270:
  7339                        	.line	912
  7340 09:D6B1: A0 4F 0A     	ldy	#$a4f
  7341 09:D6B4: B7 1A        	lda	[<L265+current_segment_0],Y
  7342 09:D6B6: 48           	pha
  7343 09:D6B7: A0 4D 0A     	ldy	#$a4d
  7344 09:D6BA: B7 1A        	lda	[<L265+current_segment_0],Y
  7345 09:D6BC: 48           	pha
  7346 09:D6BD: 22 xx xx xx  	jsl	~~k_free
  7347                        ;
  7348                        ;      /* Libération des tableaux */
  7349                        ;      if(current_segment->tab_reloc)
  7350                        L10121:
  7351                        	.line	915
  7352                        ;        {
  7353 09:D6C1: A0 57 0A     	ldy	#$a57
  Thu Dec  3 2020 22:25                                                Page 137


  7354 09:D6C4: B7 1A        	lda	[<L265+current_segment_0],Y
  7355 09:D6C6: A0 59 0A     	ldy	#$a59
  7356 09:D6C9: 17 1A        	ora	[<L265+current_segment_0],Y
  7357 09:D6CB: D0 03        	bne	L271
  7358 09:D6CD: 82 64 00     	brl	L10122
  7359                        L271:
  7360                        	.line	916
  7361                        ;          for(i=0; i<current_segment->nb_reloc; i
                    ++)
  7362                        	.line	917
  7363 09:D6D0: 64 0D        	stz	<L266+i_1
  7364 09:D6D2: 82 3D 00     	brl	L10126
  7365                        L10125:
  7366                        ;            k_free(current_segment->tab_reloc[i])
                    ;
  7367                        	.line	918
  7368 09:D6D5: A0 00 00     	ldy	#$0
  7369 09:D6D8: A5 0D        	lda	<L266+i_1
  7370 09:D6DA: 10 01        	bpl	L272
  7371 09:D6DC: 88           	dey
  7372                        L272:
  7373 09:D6DD: 85 05        	sta	<R1
  7374 09:D6DF: 84 07        	sty	<R1+2
  7375 09:D6E1: D4 07        	pei	<R1+2
  7376 09:D6E3: D4 05        	pei	<R1
  7377 09:D6E5: A9 02 00     	lda	#$2
  7378                        	xref	~~~lasl
  7379 09:D6E8: 22 xx xx xx  	jsl	~~~lasl
  7380 09:D6EC: 85 01        	sta	<R0
  7381 09:D6EE: 86 03        	stx	<R0+2
  7382 09:D6F0: 18           	clc
  7383 09:D6F1: A0 57 0A     	ldy	#$a57
  7384 09:D6F4: B7 1A        	lda	[<L265+current_segment_0],Y
  7385 09:D6F6: 65 01        	adc	<R0
  7386 09:D6F8: 85 09        	sta	<R2
  7387 09:D6FA: A0 59 0A     	ldy	#$a59
  7388 09:D6FD: B7 1A        	lda	[<L265+current_segment_0],Y
  7389 09:D6FF: 65 03        	adc	<R0+2
  7390 09:D701: 85 0B        	sta	<R2+2
  7391 09:D703: A0 02 00     	ldy	#$2
  7392 09:D706: B7 09        	lda	[<R2],Y
  7393 09:D708: 48           	pha
  7394 09:D709: A7 09        	lda	[<R2]
  7395 09:D70B: 48           	pha
  7396 09:D70C: 22 xx xx xx  	jsl	~~k_free
  7397                        L10123:
  7398 09:D710: E6 0D        	inc	<L266+i_1
  7399                        L10126:
  7400 09:D712: 38           	sec
  7401 09:D713: A5 0D        	lda	<L266+i_1
  7402 09:D715: A0 55 0A     	ldy	#$a55
  7403 09:D718: F7 1A        	sbc	[<L265+current_segment_0],Y
  7404 09:D71A: 70 03        	bvs	L273
  7405 09:D71C: 49 00 80     	eor	#$8000
  7406                        L273:
  7407 09:D71F: 30 03        	bmi	L274
  7408 09:D721: 82 B1 FF     	brl	L10125
  7409                        L274:
  Thu Dec  3 2020 22:25                                                Page 138


  7410                        L10124:
  7411                        ;          k_free(current_segment->tab_reloc);
  7412                        	.line	919
  7413 09:D724: A0 59 0A     	ldy	#$a59
  7414 09:D727: B7 1A        	lda	[<L265+current_segment_0],Y
  7415 09:D729: 48           	pha
  7416 09:D72A: A0 57 0A     	ldy	#$a57
  7417 09:D72D: B7 1A        	lda	[<L265+current_segment_0],Y
  7418 09:D72F: 48           	pha
  7419 09:D730: 22 xx xx xx  	jsl	~~k_free
  7420                        ;        }
  7421                        	.line	920
  7422                        ;      if(current_segment->tab_interseg)
  7423                        L10122:
  7424                        	.line	921
  7425                        ;        {
  7426 09:D734: A0 5D 0A     	ldy	#$a5d
  7427 09:D737: B7 1A        	lda	[<L265+current_segment_0],Y
  7428 09:D739: A0 5F 0A     	ldy	#$a5f
  7429 09:D73C: 17 1A        	ora	[<L265+current_segment_0],Y
  7430 09:D73E: D0 03        	bne	L275
  7431 09:D740: 82 64 00     	brl	L10127
  7432                        L275:
  7433                        	.line	922
  7434                        ;          for(i=0; i<current_segment->nb_interseg
                    ; i++)
  7435                        	.line	923
  7436 09:D743: 64 0D        	stz	<L266+i_1
  7437 09:D745: 82 3D 00     	brl	L10131
  7438                        L10130:
  7439                        ;            k_free(current_segment->tab_interseg[
                    i]);
  7440                        	.line	924
  7441 09:D748: A0 00 00     	ldy	#$0
  7442 09:D74B: A5 0D        	lda	<L266+i_1
  7443 09:D74D: 10 01        	bpl	L276
  7444 09:D74F: 88           	dey
  7445                        L276:
  7446 09:D750: 85 05        	sta	<R1
  7447 09:D752: 84 07        	sty	<R1+2
  7448 09:D754: D4 07        	pei	<R1+2
  7449 09:D756: D4 05        	pei	<R1
  7450 09:D758: A9 02 00     	lda	#$2
  7451                        	xref	~~~lasl
  7452 09:D75B: 22 xx xx xx  	jsl	~~~lasl
  7453 09:D75F: 85 01        	sta	<R0
  7454 09:D761: 86 03        	stx	<R0+2
  7455 09:D763: 18           	clc
  7456 09:D764: A0 5D 0A     	ldy	#$a5d
  7457 09:D767: B7 1A        	lda	[<L265+current_segment_0],Y
  7458 09:D769: 65 01        	adc	<R0
  7459 09:D76B: 85 09        	sta	<R2
  7460 09:D76D: A0 5F 0A     	ldy	#$a5f
  7461 09:D770: B7 1A        	lda	[<L265+current_segment_0],Y
  7462 09:D772: 65 03        	adc	<R0+2
  7463 09:D774: 85 0B        	sta	<R2+2
  7464 09:D776: A0 02 00     	ldy	#$2
  7465 09:D779: B7 09        	lda	[<R2],Y
  Thu Dec  3 2020 22:25                                                Page 139


  7466 09:D77B: 48           	pha
  7467 09:D77C: A7 09        	lda	[<R2]
  7468 09:D77E: 48           	pha
  7469 09:D77F: 22 xx xx xx  	jsl	~~k_free
  7470                        L10128:
  7471 09:D783: E6 0D        	inc	<L266+i_1
  7472                        L10131:
  7473 09:D785: 38           	sec
  7474 09:D786: A5 0D        	lda	<L266+i_1
  7475 09:D788: A0 5B 0A     	ldy	#$a5b
  7476 09:D78B: F7 1A        	sbc	[<L265+current_segment_0],Y
  7477 09:D78D: 70 03        	bvs	L277
  7478 09:D78F: 49 00 80     	eor	#$8000
  7479                        L277:
  7480 09:D792: 30 03        	bmi	L278
  7481 09:D794: 82 B1 FF     	brl	L10130
  7482                        L278:
  7483                        L10129:
  7484                        ;          k_free(current_segment->tab_interseg);
  7485                        	.line	925
  7486 09:D797: A0 5F 0A     	ldy	#$a5f
  7487 09:D79A: B7 1A        	lda	[<L265+current_segment_0],Y
  7488 09:D79C: 48           	pha
  7489 09:D79D: A0 5D 0A     	ldy	#$a5d
  7490 09:D7A0: B7 1A        	lda	[<L265+current_segment_0],Y
  7491 09:D7A2: 48           	pha
  7492 09:D7A3: 22 xx xx xx  	jsl	~~k_free
  7493                        ;        }
  7494                        	.line	926
  7495                        ;
  7496                        ;      k_free(current_segment);
  7497                        L10127:
  7498                        	.line	928
  7499 09:D7A7: D4 1C        	pei	<L265+current_segment_0+2
  7500 09:D7A9: D4 1A        	pei	<L265+current_segment_0
  7501 09:D7AB: 22 xx xx xx  	jsl	~~k_free
  7502                        ;    }
  7503                        	.line	929
  7504                        ;}
  7505                        L10116:
  7506                        	.line	930
  7507                        L279:
  7508 09:D7AF: A5 18        	lda	<L265+2
  7509 09:D7B1: 85 1C        	sta	<L265+2+4
  7510 09:D7B3: A5 17        	lda	<L265+1
  7511 09:D7B5: 85 1B        	sta	<L265+1+4
  7512 09:D7B7: 2B           	pld
  7513 09:D7B8: 3B           	tsc
  7514 09:D7B9: 18           	clc
  7515 09:D7BA: 69 1A 00     	adc	#L265+4
  7516 09:D7BD: 1B           	tcs
  7517 09:D7BE: 6B           	rtl
  7518                        	.endblock	930
  7519             00000016   L265	equ	22
  7520             0000000D   L266	equ	13
  7521 09:D7BF:              	ends
  7522                        	efunc
  7523                        	.endfunc	930,13,22
  Thu Dec  3 2020 22:25                                                Page 140


  7524                        	.line	930
  7525                        ;
  7526                        ;/************************************************
                    ************************/
  7527                        ;
  7528                        	.line	932
  7529                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\OMF_Load.c",894
  7530                        	xref	~~mem_free_record
  7531                        	xref	~~DecodeOneRecord
  7532                        	xref	~~LoadFileData
  7533                        	xref	~~my_Memory
  7534                        	xref	~~k_free
  7535                        	xref	~~k_calloc
  7536                        	xref	~~k_string_copy_string
  7537                        	xref	~~k_debug_strings
  7538                        	xref	~~k_debug_string
  7539                        	xref	~~strlen
  7540                        	xref	~~memcpy
  7541                        	.sym	~~mem_free_segment,~~mem_free_segment,65
                    ,3,0
  7542                        	.sym	~~DecodeSegmentBody,~~DecodeSegmentBody,
                    69,3,0
  7543                        	.sym	~~DecodeSegmentHeaderV2,~~DecodeSegmentH
                    eaderV2,69,3,0
  7544                        	.sym	~~DecodeSegmentHeaderV1,~~DecodeSegmentH
                    eaderV1,69,3,0
  7545                        	.sym	~~DecodeSegmentHeaderV0,~~DecodeSegmentH
                    eaderV0,69,3,0
  7546                        	.sym	~~DecodeSegmentHeader,~~DecodeSegmentHea
                    der,69,3,0
  7547                        	.sym	~~DecodeOneSegment,~~DecodeOneSegment,10
                    98,3,32,100
  7548                        	.sym	~~DecodeOMFFile,~~DecodeOMFFile,69,3,0
  7549                        	.sym	~~mem_free_omf,~~mem_free_omf,65,2,0
  7550                        	.sym	~~LoadOMFFile,~~LoadOMFFile,1098,2,32,10
                    1
  7551                        	.sym	~~mem_free_record,~~mem_free_record,65,1
                    8,0
  7552                        	.sym	~~DecodeOneRecord,~~DecodeOneRecord,1098
                    ,18,32,64
  7553                        	.sym	~~LoadFileData,~~LoadFileData,1102,18,32
  7554                        	.sym	~~my_Memory,~~my_Memory,65,18,0
  7555                        	.sym	~~k_free,~~k_free,65,18,0
  7556                        	.sym	~~k_calloc,~~k_calloc,1089,18,32
  7557                        	.sym	MemoryCallback,0,641,14,32
  7558                        	.sym	PFXMEMORYMAP,0,138,14,32,63
  7559                        	.sym	FXMEMORYMAP,0,10,14,2072,63
  7560                        	.sym	UMM_HEAP_INFO,0,10,14,256,62
  7561                        	.sym	PCOMMANDARGS,0,138,14,32,61
  7562                        	.sym	COMMANDARGS,0,10,14,64,61
  7563                        	.sym	PTOKENIZESTATE,0,133,14,32
  7564                        	.sym	TOKENIZESTATE,0,5,14,16
  7565                        	.sym	PTOKEN,0,138,14,32,60
  7566                        	.sym	TOKEN,0,10,14,64,60
  7567                        	.sym	PTOKENTYPE,0,133,14,32
  7568                        	.sym	TOKENTYPE,0,5,14,16
  7569                        	.sym	FXCommandHandler,0,656,14,32
  Thu Dec  3 2020 22:25                                                Page 141


  7570                        	.sym	PCONSOLECTX,0,138,14,32,59
  7571                        	.sym	CONSOLECTX,0,10,14,1144,59
  7572                        	.sym	PSPINNERCTX,0,138,14,32,58
  7573                        	.sym	SPINNERCTX,0,10,14,48,58
  7574                        	.sym	PMOUSE_MSG_STATE,0,138,14,32,57
  7575                        	.sym	MOUSE_MSG_STATE,0,10,14,184,57
  7576                        	.sym	PFXEVENTPROCESS,0,138,14,32,56
  7577                        	.sym	FXEVENTPROCESS,0,10,14,64,56
  7578                        	.sym	FXEventProc,0,641,14,32
  7579                        	.sym	PMOUSEMSGDATA,0,138,14,32,55
  7580                        	.sym	MOUSEMSGDATA,0,10,14,64,55
  7581                        	.sym	MSGIRQ,0,5,14,16
  7582                        	.sym	MAINLOOPARGS,0,10,14,16,54
  7583                        	.sym	PEACHCHILD_MSG,0,138,14,32,53
  7584                        	.sym	EACHCHILD_MSG,0,10,14,64,53
  7585                        	.sym	PCUR_PALETTE_MAP,0,138,14,32,52
  7586                        	.sym	CUR_PALETTE_MAP,0,10,14,400,52
  7587                        	.sym	PCLICKDETECTED,0,138,14,32,51
  7588                        	.sym	CLICKDETECTED,0,10,14,64,51
  7589                        	.sym	OBJECTCLICKED,0,641,14,32
  7590                        	.sym	~~k_string_copy_string,~~k_string_copy_s
                    tring,1102,18,32
  7591                        	.sym	PFXSTRING,0,138,14,32,50
  7592                        	.sym	FXSTRING,0,10,14,64,50
  7593                        	.sym	DEVICEDRIVER_COMMAND,0,656,14,32
  7594                        	.sym	DEVICEDRIVER_UNLOAD,0,654,14,32
  7595                        	.sym	DEVICEDRIVER_WRITE,0,656,14,32
  7596                        	.sym	DEVICEDRIVER_READ,0,656,14,32
  7597                        	.sym	DEVICEDRIVER_LOAD,0,654,14,32
  7598                        	.sym	PFX_BLOCK_DEVICE_DRIVER,0,138,14,32,49
  7599                        	.sym	FX_BLOCK_DEVICE_DRIVER,0,10,14,1448,49
  7600                        	.sym	PFX_DEVICE_DRIVER,0,138,14,32,48
  7601                        	.sym	FX_DEVICE_DRIVER,0,10,14,1416,48
  7602                        	.sym	~~k_debug_strings,~~k_debug_strings,65,1
                    8,0
  7603                        	.sym	~~k_debug_string,~~k_debug_string,65,18,
                    0
  7604                        	.sym	PDEBUGBYTEBITS,0,138,14,32,47
  7605                        	.sym	DEBUGBYTEBITS,0,10,14,8,47
  7606                        	.sym	PFXENVIRONMENT,0,138,14,32,46
  7607                        	.sym	FXENVIRONMENT,0,10,14,96,46
  7608                        	.sym	PFXZERPOPAGE,0,138,14,32,45
  7609                        	.sym	FXZERPOPAGE,0,10,14,448,45
  7610                        	.sym	KERNELTRAPCALL,0,641,14,32
  7611                        	.sym	FOREACHNODEUNTIL,0,654,14,32
  7612                        	.sym	FOREACHNODE,0,641,14,32
  7613                        	.sym	~~strlen,~~strlen,80,18,0
  7614                        	.sym	~~memcpy,~~memcpy,1089,18,32
  7615                        	.sym	Boolean_T,0,5,14,16
  7616                        	.sym	ldiv_t,0,10,14,64,43
  7617                        	.sym	div_t,0,10,14,32,42
  7618                        	.sym	wctype_t,0,16,14,16
  7619                        	.sym	wint_t,0,16,14,16
  7620                        	.sym	wchar_t,0,14,14,8
  7621                        	.sym	ptrdiff_t,0,7,14,32
  7622                        	.sym	size_t,0,16,14,16
  7623                        	.sym	PFXCOMBUFFER,0,138,14,32,41
  7624                        	.sym	FXCOMBUFFER,0,10,14,2080,41
  Thu Dec  3 2020 22:25                                                Page 142


  7625                        	.sym	PSUBMENULIST,0,138,14,32,40
  7626                        	.sym	SUBMENULIST,0,10,14,40,40
  7627                        	.sym	HSUBMENU,0,7,14,32
  7628                        	.sym	PSUBMENU,0,138,14,32,39
  7629                        	.sym	SUBMENU,0,10,14,64,39
  7630                        	.sym	MenuAction,0,641,14,32
  7631                        	.sym	PMENUANCHOR,0,138,14,32,38
  7632                        	.sym	MENUANCHOR,0,10,14,144,38
  7633                        	.sym	PTEXTBOX,0,138,14,32,37
  7634                        	.sym	TEXTBOX,0,10,14,144,37
  7635                        	.sym	PLISTBOX,0,138,14,32,36
  7636                        	.sym	LISTBOX,0,10,14,240,36
  7637                        	.sym	PSCROLLBAR,0,138,14,32,35
  7638                        	.sym	SCROLLBAR,0,10,14,192,35
  7639                        	.sym	PBUTTON,0,138,14,32,34
  7640                        	.sym	BUTTON,0,10,14,80,34
  7641                        	.sym	PMENUDROPDOWNDATA,0,138,14,32,33
  7642                        	.sym	MENUDROPDOWNDATA,0,10,14,3568,33
  7643                        	.sym	PMENUTAG,0,138,14,32,32
  7644                        	.sym	MENUTAG,0,10,14,112,32
  7645                        	.sym	PMENU,0,138,14,32,31
  7646                        	.sym	MENU,0,10,14,248,31
  7647                        	.sym	HMENURESOURCE,0,129,14,32
  7648                        	.sym	HTEXTBOX,0,7,14,32
  7649                        	.sym	PTEXTBOXX,0,138,14,32,30
  7650                        	.sym	TEXTBOXX,0,10,14,112,30
  7651                        	.sym	FONTMETRIC,0,10,14,32,29
  7652                        	.sym	TITLE,0,142,14,32
  7653                        	.sym	PHANDLE,0,1153,14,32
  7654                        	.sym	HANDLE,0,129,14,32
  7655                        	.sym	PWINDOWEX,0,138,14,32,28
  7656                        	.sym	WINDOWEX,0,10,14,2704,28
  7657                        	.sym	PWINDOW,0,138,14,32,27
  7658                        	.sym	WINDOW,0,10,14,2808,27
  7659                        	.sym	PDRAGDATA,0,138,14,32,26
  7660                        	.sym	DRAGDATA,0,10,14,136,26
  7661                        	.sym	PNCCLICKABLE,0,138,14,32,25
  7662                        	.sym	NCCLICKABLE,0,10,14,88,25
  7663                        	.sym	HCLICKABLE,0,7,14,32
  7664                        	.sym	PCLICKABLE,0,138,14,32,24
  7665                        	.sym	CLICKABLE,0,10,14,88,24
  7666                        	.sym	PWNDCLASS,0,138,14,32,23
  7667                        	.sym	WNDCLASS,0,10,14,256,23
  7668                        	.sym	HBRUSH,0,129,14,32
  7669                        	.sym	HCURSOR,0,129,14,32
  7670                        	.sym	HICON,0,129,14,32
  7671                        	.sym	HINSTANCE,0,129,14,32
  7672                        	.sym	FXWndProc,0,654,14,32
  7673                        	.sym	PRECT,0,138,14,32,22
  7674                        	.sym	RECT,0,10,14,64,22
  7675                        	.sym	PPOINT,0,138,14,32,21
  7676                        	.sym	POINT,0,10,14,32,21
  7677                        	.sym	PFXPROPERTY,0,138,14,32,19
  7678                        	.sym	FXPROPERTY,0,10,14,384,19
  7679                        	.sym	SCANCODE,0,14,14,8
  7680                        	.sym	KEYCODE,0,14,14,8
  7681                        	.sym	PFXPROCESSMESSAGE,0,138,14,32,18
  7682                        	.sym	FXPROCESSMESSAGE,0,10,14,112,18
  Thu Dec  3 2020 22:25                                                Page 143


  7683                        	.sym	PFXPROCESS,0,138,14,32,17
  7684                        	.sym	FXPROCESS,0,10,14,800,17
  7685                        	.sym	PDESKTOP_CONTROL,0,138,14,32,16
  7686                        	.sym	DESKTOP_CONTROL,0,10,14,392,16
  7687                        	.sym	PCONSOLE_CONTROL,0,138,14,32,15
  7688                        	.sym	CONSOLE_CONTROL,0,10,14,448,15
  7689                        	.sym	FXProcessProc,0,641,14,32
  7690                        	.sym	PFXCMDMESSAGE,0,138,14,32,14
  7691                        	.sym	FXCMDMESSAGE,0,10,14,304,14
  7692                        	.sym	PFXOSMESSAGE,0,138,14,32,13
  7693                        	.sym	FXOSMESSAGE,0,10,14,304,13
  7694                        	.sym	PINT_REGS,0,138,14,32,12
  7695                        	.sym	INT_REGS,0,10,14,104,12
  7696                        	.sym	TASK_STACK,0,10,14,32,11
  7697                        	.sym	TASK,0,10,14,48,10
  7698                        	.sym	PIRQDATA,0,138,14,32,9
  7699                        	.sym	IRQDATA,0,10,14,48,9
  7700                        	.sym	HMENU,0,129,14,32
  7701                        	.sym	HWND,0,129,14,32
  7702                        	.sym	MSGDATA,0,14,14,8
  7703                        	.sym	MSGDEST,0,18,14,32
  7704                        	.sym	MSGSRC,0,18,14,32
  7705                        	.sym	MSGTYPE,0,16,14,16
  7706                        	.sym	PROCESS_RESOURCE_LIST,0,138,14,32,3
  7707                        	.sym	PROCESS_TLS_LIST,0,138,14,32,3
  7708                        	.sym	SEMAPHORE_LIST,0,138,14,32,3
  7709                        	.sym	FILE_BLOCK_LIST,0,138,14,32,3
  7710                        	.sym	FILE_PATH_LIST,0,138,14,32,3
  7711                        	.sym	PROCEDURE_LIST,0,138,14,32,3
  7712                        	.sym	FILE_HANDLE,0,138,14,32,8
  7713                        	.sym	FILE_BLOCK,0,10,14,552,8
  7714                        	.sym	SEMAPHORE,0,10,14,16,7
  7715                        	.sym	PPROCESS_SIGNAL,0,138,14,32,6
  7716                        	.sym	PROCESS_SIGNAL,0,10,14,16,6
  7717                        	.sym	KRESULT,0,18,14,32
  7718                        	.sym	PKERNEL_ERROR,0,138,14,32,5
  7719                        	.sym	KERNEL_ERROR,0,10,14,32,5
  7720                        	.sym	PROCESS_STATUS,0,16,14,16
  7721                        	.sym	FILE_PATH_NAME,0,142,14,32
  7722                        	.sym	PROCESS_RESOURCE,0,129,14,32
  7723                        	.sym	PROCESS_TLS,0,129,14,32
  7724                        	.sym	PROCESS_CTX,0,129,14,32
  7725                        	.sym	USERID,0,16,14,16
  7726                        	.sym	PROCESS_ID,0,18,14,32
  7727                        	.sym	PROCESS_BANK,0,14,14,8
  7728                        	.sym	PFXQUEUE,0,138,14,32,4
  7729                        	.sym	FXQUEUE,0,10,14,80,4
  7730                        	.sym	PFXNODELIST,0,138,14,32,3
  7731                        	.sym	FXNODELIST,0,10,14,96,3
  7732                        	.sym	NodeListDeallocator,0,641,14,32
  7733                        	.sym	PFXNODE,0,138,14,32,2
  7734                        	.sym	FXNODE,0,10,14,384,2
  7735                        	.sym	PBYTEBITS,0,138,14,32,1
  7736                        	.sym	BYTEBITS,0,10,14,8,1
  7737                        	.sym	HCOLOR,0,129,14,32
  7738                        	.sym	HFONT,0,129,14,32
  7739                        	.sym	HDC,0,129,14,32
  7740                        	.sym	HPOINTER,0,129,14,32
  Thu Dec  3 2020 22:25                                                Page 144


  7741                        	.sym	uint32_t,0,18,14,32
  7742                        	.sym	uint8_t,0,14,14,8
  7743                        	.sym	PFAR,0,142,14,32
  7744                        	.sym	LPBOOL,0,142,14,32
  7745                        	.sym	BOOL,0,14,14,8
  7746                        	.sym	DWORD,0,18,14,32
  7747                        	.sym	ULONG,0,18,14,32
  7748                        	.sym	LPLONG,0,135,14,32
  7749                        	.sym	LONG,0,7,14,32
  7750                        	.sym	PUINT,0,144,14,32
  7751                        	.sym	USHORT,0,16,14,16
  7752                        	.sym	UINT,0,16,14,16
  7753                        	.sym	INT,0,5,14,16
  7754                        	.sym	WORD,0,5,14,16
  7755                        	.sym	PBYTE,0,142,14,32
  7756                        	.sym	BYTE,0,14,14,8
  7757                        	.sym	UCHAR,0,14,14,8
  7758                        	.sym	LPWCSTR,0,142,14,32
  7759                        	.sym	LPCSTR,0,142,14,32
  7760                        	.sym	LPSTR,0,142,14,32
  7761                        	.sym	LPCHAR,0,142,14,32
  7762                        	.sym	CHAR,0,14,14,8
  7763                        	.sym	LPVOID,0,129,14,32
  7764                        	.sym	VOID,0,1,14,32
  7765                        	end


      Lines assembled: 7765
      Errors: 0
