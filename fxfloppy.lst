  Thu Dec  3 2020 22:25                                                Page 1


                     ***************************************
                     **      WDC 65C816 Macro Assembler   **
                     **                                   **
                     **     Version 3.49.1- Feb  6 2006    **
                     ***************************************

     1                        ;:ts=8
     2             00000001   R0	equ	1
     3             00000005   R1	equ	5
     4             00000009   R2	equ	9
     5             0000000D   R3	equ	13
     6                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxfloppy.c",0
     7                        ;#include "fxtypes.h"
     8                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
     9                        	.stag	_fx_bytebits,8,1
    10                        	.member	b7,0,14,17,1
    11                        	.member	b6,1,14,17,1
    12                        	.member	b5,2,14,17,1
    13                        	.member	b4,3,14,17,1
    14                        	.member	b3,4,14,17,1
    15                        	.member	b2,5,14,17,1
    16                        	.member	b1,6,14,17,1
    17                        	.member	b0,7,14,17,1
    18                        	.eos
    19                        	.stag	_fx_node,384,2
    20                        	.member	type,0,14,8,8
    21                        	.member	Reserved0,8,14,8,8
    22                        	.member	data,16,129,8,32
    23                        	.member	last,48,138,8,32,2
    24                        	.member	next,80,138,8,32,2
    25                        	.member	name,112,110,8,0,32
    26                        	.member	Reserved1,368,16,8,16
    27                        	.eos
    28                        	.stag	_fx_nodelist,96,3
    29                        	.member	listhead,0,138,8,32,2
    30                        	.member	listData,32,129,8,32
    31                        	.member	deallocator,64,641,8,32
    32                        	.eos
    33                        	.stag	_fx_queue,80,4
    34                        	.member	count,0,5,8,16
    35                        	.member	front,16,138,8,32,2
    36                        	.member	rear,48,138,8,32,2
    37                        	.eos
    38                        	.stag	fake5_,32,5
    39                        	.member	subsystem,0,14,8,8
    40                        	.member	level,8,14,8,8
    41                        	.member	error,16,16,8,16
    42                        	.eos
    43                        	.stag	_fx_process_signal,16,6
    44                        	.member	cbSize,0,16,8,16
    45                        	.eos
    46                        	.stag	_fx_semaphore,16,7
    47                        	.member	reserved,0,5,8,16
    48                        	.eos
    49                        	.stag	_fx_fileBlock,552,8
    50                        	.member	openCount,0,16,8,16
  Thu Dec  3 2020 22:25                                                Page 2


    51                        	.member	lockCount,16,16,8,16
    52                        	.member	dirty,32,14,8,8
    53                        	.member	fileBuffer,40,110,8,0,64
    54                        	.eos
    55                        	.stag	_fx_irq_data,48,9
    56                        	.member	line,0,5,8,16
    57                        	.member	keycode,16,142,8,32
    58                        	.eos
    59                        	.stag	_task,48,10
    60                        	.member	SPL,0,14,8,8
    61                        	.member	SPH,8,14,8,8
    62                        	.member	pstack,16,142,8,32
    63                        	.eos
    64                        	.stag	_task_stack,32,11
    65                        	.member	SS,0,142,8,32
    66                        	.eos
    67                        	.stag	int_regs,104,12
    68                        	.member	PB,0,14,8,8
    69                        	.member	PH,8,14,8,8
    70                        	.member	PL,16,14,8,8
    71                        	.member	PP,24,14,8,8
    72                        	.member	DB,32,14,8,8
    73                        	.member	DH,40,14,8,8
    74                        	.member	DL,48,14,8,8
    75                        	.member	AH,56,14,8,8
    76                        	.member	AL,64,14,8,8
    77                        	.member	XH,72,14,8,8
    78                        	.member	XL,80,14,8,8
    79                        	.member	YH,88,14,8,8
    80                        	.member	YL,96,14,8,8
    81                        	.eos
    82                        	.stag	_fx_eventMessage,304,13
    83                        	.member	src,0,18,8,32
    84                        	.member	dest,32,18,8,32
    85                        	.member	type,64,16,8,16
    86                        	.member	hwnd,80,129,8,32
    87                        	.member	pheap,112,129,8,32
    88                        	.member	msgTime,144,18,8,32
    89                        	.member	data,176,110,8,0,16
    90                        	.eos
    91                        	.stag	_fx_cmdMessage,304,14
    92                        	.member	src,0,18,8,32
    93                        	.member	dest,32,18,8,32
    94                        	.member	type,64,16,8,16
    95                        	.member	hwnd,80,129,8,32
    96                        	.member	pheap,112,129,8,32
    97                        	.member	msgTime,144,18,8,32
    98                        	.member	cmdCId,176,16,8,16
    99                        	.member	cmdMId,192,16,8,16
   100                        	.member	parameter1,208,18,8,32
   101                        	.member	parameter2,240,18,8,32
   102                        	.member	parameter3,272,18,8,32
   103                        	.eos
   104                        	.stag	_fx_console_ctl,448,15
   105                        	.member	maxCols,0,5,8,16
   106                        	.member	maxRows,16,5,8,16
   107                        	.member	curX,32,5,8,16
   108                        	.member	curY,48,5,8,16
  Thu Dec  3 2020 22:25                                                Page 3


   109                        	.member	fgColor,64,5,8,16
   110                        	.member	bgColor,80,5,8,16
   111                        	.member	mode,96,14,8,8
   112                        	.member	kbBuffer,104,101,8,0,16
   113                        	.member	screenBuffer,360,142,8,32
   114                        	.member	desktopMode,392,14,8,8
   115                        	.member	lastMouseButton,400,5,8,16
   116                        	.member	lastMouseX,416,5,8,16
   117                        	.member	lastMouseY,432,5,8,16
   118                        	.eos
   119                        	.stag	_fx_desktop_ctl,392,16
   120                        	.member	desktopMode,0,14,8,8
   121                        	.member	cursorCtl,8,5,8,16
   122                        	.member	cursorState,24,5,8,16
   123                        	.member	backgroundColor,40,5,8,16
   124                        	.member	foregroundColor,56,5,8,16
   125                        	.member	menuMode,72,5,8,16
   126                        	.member	lastMouseButton,88,5,8,16
   127                        	.member	lastMouseX,104,5,8,16
   128                        	.member	lastMouseY,120,5,8,16
   129                        	.member	currentDiskName,136,142,8,32
   130                        	.member	diskNodes,168,129,8,32
   131                        	.member	titleNodes,200,129,8,32
   132                        	.member	menuNodes,232,129,8,32
   133                        	.member	iconNodes,264,129,8,32
   134                        	.member	windowNodes,296,129,8,32
   135                        	.member	fontNodes,328,129,8,32
   136                        	.member	wndProc,360,138,8,32,3
   137                        	.eos
   138                        	.stag	_fx_process,800,17
   139                        	.member	cbSize,0,5,8,16
   140                        	.member	procId,16,18,8,32
   141                        	.member	parentId,48,18,8,32
   142                        	.member	ctx,80,129,8,32
   143                        	.member	userId,112,16,8,16
   144                        	.member	status,128,16,8,16
   145                        	.member	foregroundActive,144,14,8,8
   146                        	.member	tls,152,1121,8,32,8
   147                        	.member	commandLine,408,142,8,32
   148                        	.member	semaphores,440,138,8,32,3
   149                        	.member	fileHandles,472,138,8,32,3
   150                        	.member	pathList,504,138,8,32,3
   151                        	.member	resources,536,138,8,32,3
   152                        	.member	timerAware,568,14,8,8
   153                        	.member	timerTicks,576,112,8,0,2
   154                        	.member	timerTickCount,608,112,8,0,2
   155                        	.member	kernelError,640,10,8,32,5
   156                        	.member	consoleCtl,672,138,8,32,15
   157                        	.member	desktopCtl,704,138,8,32,16
   158                        	.member	execProc,736,641,8,32
   159                        	.member	startupArgs,768,129,8,32
   160                        	.eos
   161                        	.stag	_fxProcessMessage,112,18
   162                        	.member	src,0,18,8,32
   163                        	.member	dest,32,18,8,32
   164                        	.member	type,64,16,8,16
   165                        	.member	processInfo,80,138,8,32,17
   166                        	.eos
  Thu Dec  3 2020 22:25                                                Page 4


   167                        	.stag	_fx_property,384,19
   168                        	.member	name,0,110,8,0,16
   169                        	.member	value,128,110,8,0,32
   170                        	.eos
   171                        	.utag	_24bitPointer,32,20
   172                        	.member	address,0,142,11,32
   173                        	.member	bytes,0,110,11,0,4
   174                        	.eos
   175                        	.stag	_PointStruct,32,21
   176                        	.member	x,0,5,8,16
   177                        	.member	y,16,5,8,16
   178                        	.eos
   179                        	.stag	_RectStruct,64,22
   180                        	.member	x,0,5,8,16
   181                        	.member	y,16,5,8,16
   182                        	.member	width,32,5,8,16
   183                        	.member	height,48,5,8,16
   184                        	.eos
   185                        	.stag	_k_WindowClass,256,23
   186                        	.member	cbSize,0,16,8,16
   187                        	.member	style,16,16,8,16
   188                        	.member	pWndProc,32,654,8,32
   189                        	.member	hInstance,64,129,8,32
   190                        	.member	hIcon,96,129,8,32
   191                        	.member	hCursor,128,129,8,32
   192                        	.member	hbrBackground,160,129,8,32
   193                        	.member	lpszMenuName,192,142,8,32
   194                        	.member	lpszClassName,224,142,8,32
   195                        	.eos
   196                        	.stag	_ClickableRect,88,24
   197                        	.member	area,0,10,8,64,22
   198                        	.member	z,64,5,8,16
   199                        	.member	enabled,80,14,8,8
   200                        	.eos
   201                        	.stag	_NCClickableRect,88,25
   202                        	.member	area,0,10,8,64,22
   203                        	.member	msgType,64,16,8,16
   204                        	.member	enabled,80,14,8,8
   205                        	.eos
   206                        	.stag	_DragData,136,26
   207                        	.member	area,0,10,8,64,22
   208                        	.member	xoffset,64,5,8,16
   209                        	.member	yoffset,80,5,8,16
   210                        	.member	msgType,96,16,8,16
   211                        	.member	isDrag,112,14,8,8
   212                        	.member	canDrag,120,14,8,8
   213                        	.member	canDrop,128,14,8,8
   214                        	.eos
   215                        	.stag	_k_WindowStruct,2808,27
   216                        	.member	cbSize,0,16,8,16
   217                        	.member	style,16,18,8,32
   218                        	.member	win_id,48,5,8,16
   219                        	.member	win_x,64,5,8,16
   220                        	.member	win_y,80,5,8,16
   221                        	.member	win_width,96,5,8,16
   222                        	.member	win_height,112,5,8,16
   223                        	.member	wndRect,128,10,8,64,22
   224                        	.member	clientRect,192,10,8,64,22
  Thu Dec  3 2020 22:25                                                Page 5


   225                        	.member	nonclientGadgets,256,106,8,0,25,16
   226                        	.member	clickable,1664,129,8,32
   227                        	.member	win_title,1696,110,8,0,32
   228                        	.member	Reserved0,1952,16,8,16
   229                        	.member	win_class,1968,110,8,0,16
   230                        	.member	win_class_name,2096,110,8,0,32
   231                        	.member	nBitmapLayer,2352,16,8,16
   232                        	.member	procid,2368,18,8,32
   233                        	.member	pWndClass,2400,138,8,32,23
   234                        	.member	pParentWindow,2432,129,8,32
   235                        	.member	hMenu,2464,129,8,32
   236                        	.member	pChildWindows,2496,138,8,32,3
   237                        	.member	pChildHitList,2528,138,8,32,3
   238                        	.member	isVisible,2560,14,8,8
   239                        	.member	windowData,2568,129,8,32
   240                        	.member	clientData,2600,1121,8,32,6
   241                        	.member	isClosed,2792,14,8,8
   242                        	.member	isClosing,2800,14,8,8
   243                        	.eos
   244                        	.stag	_k_WindowStructEx,2704,28
   245                        	.member	cbSize,0,16,8,16
   246                        	.member	style,16,18,8,32
   247                        	.member	win_id,48,5,8,16
   248                        	.member	win_x,64,5,8,16
   249                        	.member	win_y,80,5,8,16
   250                        	.member	win_width,96,5,8,16
   251                        	.member	win_height,112,5,8,16
   252                        	.member	wndRect,128,10,8,64,22
   253                        	.member	clientRect,192,10,8,64,22
   254                        	.member	nonclientGadgets,256,106,8,0,25,16
   255                        	.member	clickable,1664,129,8,32
   256                        	.member	win_title,1696,110,8,0,32
   257                        	.member	Reserved0,1952,16,8,16
   258                        	.member	win_class,1968,110,8,0,16
   259                        	.member	nBitmapLayer,2096,16,8,16
   260                        	.member	procid,2112,18,8,32
   261                        	.member	pWndClass,2144,138,8,32,23
   262                        	.member	pParentWindow,2176,129,8,32
   263                        	.member	hMenu,2208,129,8,32
   264                        	.member	pChildWindows,2240,138,8,32,3
   265                        	.member	pChildHitList,2272,138,8,32,3
   266                        	.member	isVisible,2304,14,8,8
   267                        	.member	windowData,2312,129,8,32
   268                        	.member	clientData,2344,1121,8,32,4
   269                        	.member	isClosed,2472,14,8,8
   270                        	.member	hWnd,2480,129,8,32
   271                        	.member	localRect,2512,10,8,64,22
   272                        	.member	globalRect,2576,10,8,64,22
   273                        	.member	clientOffsetRect,2640,10,8,64,22
   274                        	.eos
   275                        	.stag	_FontMetric,32,29
   276                        	.member	width,0,5,8,16
   277                        	.member	height,16,5,8,16
   278                        	.eos
   279                        	.stag	_ctl_Textbox,112,30
   280                        	.member	win_id,0,5,8,16
   281                        	.member	win_x,16,5,8,16
   282                        	.member	win_y,32,5,8,16
  Thu Dec  3 2020 22:25                                                Page 6


   283                        	.member	win_width,48,5,8,16
   284                        	.member	win_height,64,5,8,16
   285                        	.member	content,80,1166,8,32
   286                        	.eos
   287                        	.stag	_MenuStruct,248,31
   288                        	.member	cx,0,5,8,16
   289                        	.member	cy,16,5,8,16
   290                        	.member	width,32,5,8,16
   291                        	.member	height,48,5,8,16
   292                        	.member	fcolor,64,14,8,8
   293                        	.member	bcolor,72,14,8,8
   294                        	.member	chromeLeft,80,14,8,8
   295                        	.member	chromeRight1,88,14,8,8
   296                        	.member	chromeRight2,96,14,8,8
   297                        	.member	itemId,104,16,8,16
   298                        	.member	pCaption,120,142,8,32
   299                        	.member	subMenus,152,138,8,32,3
   300                        	.member	pBackground,184,129,8,32
   301                        	.member	hWndOwner,216,129,8,32
   302                        	.eos
   303                        	.stag	fake32_,112,32
   304                        	.member	menuId,0,16,8,16
   305                        	.member	caption,16,142,8,32
   306                        	.member	rect,48,10,8,64,22
   307                        	.eos
   308                        	.stag	fake33_,3568,33
   309                        	.member	pParent,0,138,8,32,27
   310                        	.member	rect,32,10,8,64,22
   311                        	.member	captions,96,1134,8,32,24
   312                        	.member	chrome,864,110,8,0,24
   313                        	.member	ids,1056,112,8,0,24
   314                        	.member	clickable,1440,106,8,0,24,24
   315                        	.member	selected,3552,16,8,16
   316                        	.eos
   317                        	.stag	_fx_button_t,80,34
   318                        	.member	pCaption,0,142,8,32
   319                        	.member	data,32,129,8,32
   320                        	.member	captionPixelWidth,64,16,8,16
   321                        	.eos
   322                        	.stag	_fx_scrollbar_t,192,35
   323                        	.member	min,0,16,8,16
   324                        	.member	max,16,16,8,16
   325                        	.member	increment,32,16,8,16
   326                        	.member	stopsize,48,16,8,16
   327                        	.member	location,64,5,8,16
   328                        	.member	state,80,5,8,16
   329                        	.member	rectThumb,96,10,8,64,22
   330                        	.member	data,160,129,8,32
   331                        	.eos
   332                        	.stag	_fx_listbox_t,240,36
   333                        	.member	pos,0,5,8,16
   334                        	.member	selected,16,16,8,16
   335                        	.member	offsetX,32,5,8,16
   336                        	.member	offsetY,48,5,8,16
   337                        	.member	inc,64,5,8,16
   338                        	.member	direction,80,5,8,16
   339                        	.member	top,96,5,8,16
   340                        	.member	bottom,112,5,8,16
  Thu Dec  3 2020 22:25                                                Page 7


   341                        	.member	indexTop,128,5,8,16
   342                        	.member	indexBottom,144,5,8,16
   343                        	.member	maxItems,160,16,8,16
   344                        	.member	fontSet,176,142,8,32
   345                        	.member	data,208,129,8,32
   346                        	.eos
   347                        	.stag	_fx_textbox_t,144,37
   348                        	.member	pos,0,5,8,16
   349                        	.member	selected,16,16,8,16
   350                        	.member	offsetX,32,5,8,16
   351                        	.member	offsetY,48,5,8,16
   352                        	.member	isShifted,64,14,8,8
   353                        	.member	cursorState,72,14,8,8
   354                        	.member	fontSet,80,142,8,32
   355                        	.member	data,112,129,8,32
   356                        	.eos
   357                        	.stag	_fx_menuAnchor_t,144,38
   358                        	.member	pCaption,0,142,8,32
   359                        	.member	renderLayoutX,32,16,8,16
   360                        	.member	renderLayoutY,48,16,8,16
   361                        	.member	captionPixelWidth,64,16,8,16
   362                        	.member	data,80,129,8,32
   363                        	.member	droppedWindow,112,138,8,32,27
   364                        	.eos
   365                        	.stag	_SubMenuStruct,64,39
   366                        	.member	caption,0,142,8,32
   367                        	.member	action,32,641,8,32
   368                        	.eos
   369                        	.stag	_SubMenuListStruct,40,40
   370                        	.member	cMenus,0,14,8,8
   371                        	.member	psubmenus,8,9354,8,32,39
   372                        	.eos
   373                        	.stag	_fx_ComBuffer,2080,41
   374                        	.member	cbSize,0,16,8,16
   375                        	.member	cbBuffer,16,16,8,16
   376                        	.member	buffer,32,110,8,0,256
   377                        	.eos
   378                        	.line	708
   379                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxfloppy.c",1
   380                        ;#include "fxkernel.h"
   381                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxkernel.h",0
   382                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   383                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   384                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stddef.h",0
   385                        	.line	88
   386                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",43
   387                        	.stag	fake42_,32,42
   388                        	.member	quot,0,5,8,16
   389                        	.member	rem,16,5,8,16
   390                        	.eos
   391                        	.stag	fake43_,64,43
   392                        	.member	quot,0,7,8,32
  Thu Dec  3 2020 22:25                                                Page 8


   393                        	.member	rem,32,7,8,32
   394                        	.eos
   395                        	.stag	int_sqrt,32,44
   396                        	.member	sqrt,0,16,8,16
   397                        	.member	frac,16,16,8,16
   398                        	.eos
   399                        	.line	205
   400                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",4
   401                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
   402                        	.line	134
   403                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",5
   404                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    ctype.h",0
   405                        	.line	103
   406                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",6
   407                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   408                        	.line	708
   409                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",8
   410                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstringtable.h",0
   411                        	.line	89
   412                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",9
   413                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256fmx.h",0
   414                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   415                        	.line	708
   416                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256fmx.h",5
   417                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fmx_vicky.h",0
   418                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   419                        	.line	708
   420                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fmx_vicky.h",11
   421                        	.line	72
   422                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256fmx.h",6
   423                        	.line	1325
   424                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",13
   425                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxkernel.h",0
   426                        	.line	270
   427                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",19
   428                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",0
   429                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
  Thu Dec  3 2020 22:25                                                Page 9


   430                        	.line	134
   431                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",5
   432                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   433                        	.line	205
   434                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",6
   435                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   436                        	.line	708
   437                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",7
   438                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256fmx.h",0
   439                        	.line	1325
   440                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",10
   441                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",0
   442                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   443                        	.line	205
   444                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",5
   445                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
   446                        	.line	134
   447                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",6
   448                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   449                        	.line	708
   450                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",7
   451                        	.stag	_fx_string,64,45
   452                        	.member	size,0,16,8,16
   453                        	.member	pos,16,5,8,16
   454                        	.member	buffer,32,142,8,32
   455                        	.eos
   456                        	.line	71
   457                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",15
   458                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",0
   459                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   460                        	.line	25
   461                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",5
   462                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxexec.h",0
   463                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   464                        	.line	708
   465                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxexec.h",5
   466                        	.line	52
  Thu Dec  3 2020 22:25                                                Page 10


   467                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",6
   468                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",0
   469                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   470                        	.line	708
   471                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",5
   472                        	.line	61
   473                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",7
   474                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",0
   475                        	.line	171
   476                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",8
   477                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",0
   478                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   479                        	.line	708
   480                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",5
   481                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   482                        	.line	25
   483                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",6
   484                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",0
   485                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   486                        	.line	25
   487                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",5
   488                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc_cfg.h",0
   489                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos_build_parameters.h",0
   490                        	.line	32
   491                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc_cfg.h",8
   492                        	.stag	UMM_HEAP_INFO_t,256,46
   493                        	.member	totalEntries,0,18,8,32
   494                        	.member	usedEntries,32,18,8,32
   495                        	.member	freeEntries,64,18,8,32
   496                        	.member	totalBlocks,96,18,8,32
   497                        	.member	usedBlocks,128,18,8,32
   498                        	.member	freeBlocks,160,18,8,32
   499                        	.member	maxFreeContiguousBlocks,192,18,8,32
   500                        	.member	blockSize,224,18,8,32
   501                        	.eos
   502                        	.line	199
   503                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",6
   504                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc.h",0
  Thu Dec  3 2020 22:25                                                Page 11


   505                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   506                        	.line	708
   507                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc.h",11
   508                        	.line	24
   509                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",7
   510                        	.stag	_fx_memory_map,2072,47
   511                        	.member	availableMemory,0,18,8,32
   512                        	.member	valid_segments,32,110,8,0,255
   513                        	.eos
   514                        	.line	39
   515                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",7
   516                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",0
   517                        	.line	743
   518                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",8
   519                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxgui.h",0
   520                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxfont.h",0
   521                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   522                        	.line	708
   523                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxfont.h",6
   524                        	.line	64
   525                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxgui.h",4
   526                        	.stag	_click_detected,64,48
   527                        	.member	window,0,138,8,32,27
   528                        	.member	handler,32,641,8,32
   529                        	.eos
   530                        	.stag	_current_palette_map,400,49
   531                        	.member	CUR_DESKTOP,0,5,8,16
   532                        	.member	CUR_BACKGROUND,16,5,8,16
   533                        	.member	CUR_FONT,32,5,8,16
   534                        	.member	CUR_SELECTED_FONT,48,5,8,16
   535                        	.member	CUR_HIGHLIGHT_COLOR,64,5,8,16
   536                        	.member	CUR_WINDOWFRAME,80,5,8,16
   537                        	.member	CUR_WINDOWBORDER,96,5,8,16
   538                        	.member	CUR_WINDOWSHADOW,112,5,8,16
   539                        	.member	CUR_MENU,128,5,8,16
   540                        	.member	CUR_GADGET,144,5,8,16
   541                        	.member	CUR_COLOR,160,101,8,0,15
   542                        	.eos
   543                        	.line	264
   544                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",9
   545                        	.stag	_childMessage_t,64,50
   546                        	.member	msgType,0,16,8,16
   547                        	.member	msgData,16,129,8,32
   548                        	.member	dataSize,48,16,8,16
   549                        	.eos
   550                        	.line	362
  Thu Dec  3 2020 22:25                                                Page 12


   551                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",9
   552                        	.stag	_fx_main_loopvars,16,51
   553                        	.member	dummy,0,5,8,16
   554                        	.eos
   555                        	.stag	_fxMouseMessageData,64,52
   556                        	.member	button1,0,14,8,8
   557                        	.member	button2,8,14,8,8
   558                        	.member	button3,16,14,8,8
   559                        	.member	button4,24,14,8,8
   560                        	.member	x,32,16,8,16
   561                        	.member	y,48,16,8,16
   562                        	.eos
   563                        	.stag	_fx_eventProcess,64,53
   564                        	.member	process,0,138,8,32,17
   565                        	.member	eventProc,32,641,8,32
   566                        	.eos
   567                        	.stag	_mouse_msg_state,184,54
   568                        	.member	lastEvent,0,18,8,32
   569                        	.member	buttonLeftDown,32,14,8,8
   570                        	.member	lastLeftDown,40,18,8,32
   571                        	.member	buttonRightDown,72,14,8,8
   572                        	.member	lastRightDown,80,18,8,32
   573                        	.member	buttonMiddleDown,112,14,8,8
   574                        	.member	lastMiddleDown,120,18,8,32
   575                        	.member	lastX,152,16,8,16
   576                        	.member	lastY,168,16,8,16
   577                        	.eos
   578                        	.line	743
   579                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",16
   580                        	.stag	_fx_spinner_ctx,48,55
   581                        	.member	index,0,5,8,16
   582                        	.member	spinner,16,142,8,32
   583                        	.eos
   584                        	.stag	_fx_console_ctx,1144,56
   585                        	.member	lineBufferIndex,0,5,8,16
   586                        	.member	lineBuffer,16,110,8,0,128
   587                        	.member	isShifted,1040,14,8,8
   588                        	.member	userData,1048,129,8,32
   589                        	.member	screenBuffer,1080,129,8,32
   590                        	.member	Reserved1,1112,129,8,32
   591                        	.eos
   592                        	.stag	_token,64,57
   593                        	.member	type,0,5,8,16
   594                        	.member	depth,16,16,8,16
   595                        	.member	text,32,142,8,32
   596                        	.eos
   597                        	.stag	_command_args,64,58
   598                        	.member	proc,0,656,8,32
   599                        	.member	tokens,32,138,8,32,2
   600                        	.eos
   601                        	.line	171
   602                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",20
   603                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",0
   604                        	.line	71
  Thu Dec  3 2020 22:25                                                Page 13


   605                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",21
   606                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",0
   607                        	.line	61
   608                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",22
   609                        	.line	25
   610                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxkernel.h",5
   611                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",0
   612                        	.line	61
   613                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxkernel.h",6
   614                        	.stag	_fx_zero_page,448,59
   615                        	.member	fxos_mouse_byte_0,0,14,8,8
   616                        	.member	fxos_mouse_byte_1,8,14,8,8
   617                        	.member	fxos_mouse_byte_2,16,14,8,8
   618                        	.member	fxos_mouse_byte_t,24,14,8,8
   619                        	.member	fxos_mouse_byte_x_l,32,14,8,8
   620                        	.member	fxos_mouse_byte_x_h,40,14,8,8
   621                        	.member	fxos_mouse_byte_y_l,48,14,8,8
   622                        	.member	fxos_mouse_byte_y_h,56,14,8,8
   623                        	.member	fxos_key_byte_0,64,14,8,8
   624                        	.member	fxos_key_byte_1,72,14,8,8
   625                        	.member	fxos_key_byte_2,80,14,8,8
   626                        	.member	fxos_mouse_ctl,88,14,8,8
   627                        	.member	fxos_mouse_index,96,14,8,8
   628                        	.member	fxos_mouse_status,104,14,8,8
   629                        	.member	VersionMajor,112,16,8,16
   630                        	.member	VersionMinor,128,16,8,16
   631                        	.member	VersionRelease,144,16,8,16
   632                        	.member	topMemory,160,18,8,32
   633                        	.member	bottomMemory,192,18,8,32
   634                        	.member	availableMemory,224,18,8,32
   635                        	.member	availableMemoryK,256,18,8,32
   636                        	.member	availableHeapMemory,288,18,8,32
   637                        	.member	availableHeapMemoryK,320,18,8,32
   638                        	.member	kernelFunctionCallId,352,16,8,16
   639                        	.member	kernelFunctionCallBank,368,14,8,8
   640                        	.member	kernelFunctionCallReserved,376,14,8,8
   641                        	.member	kernelFunctionCallParameter,384,129,8,32
   642                        	.member	kernelFunctionCallReturn,416,129,8,32
   643                        	.eos
   644                        	.stag	_fx_environment,96,60
   645                        	.member	variables,0,142,8,32
   646                        	.member	reserved1,32,5,8,16
   647                        	.member	reserved2,48,5,8,16
   648                        	.member	reserved3,64,5,8,16
   649                        	.member	reserved4,80,5,8,16
   650                        	.eos
   651                        	.stag	_debug_byte_bits,8,61
   652                        	.member	bit7,0,14,17,1
   653                        	.member	bit6,1,14,17,1
   654                        	.member	bit5,2,14,17,1
   655                        	.member	bit4,3,14,17,1
   656                        	.member	bit3,4,14,17,1
  Thu Dec  3 2020 22:25                                                Page 14


   657                        	.member	bit2,5,14,17,1
   658                        	.member	bit1,6,14,17,1
   659                        	.member	bit0,7,14,17,1
   660                        	.eos
   661                        	.stag	_fx_device_driver,1416,62
   662                        	.member	name,0,110,8,0,64
   663                        	.member	version,512,110,8,0,64
   664                        	.member	hmajor,1024,110,8,0,16
   665                        	.member	hminor,1152,110,8,0,16
   666                        	.member	type,1280,14,8,8
   667                        	.member	f_driver_load,1288,129,8,32
   668                        	.member	f_driver_read,1320,129,8,32
   669                        	.member	f_driver_write,1352,129,8,32
   670                        	.member	f_driver_unload,1384,129,8,32
   671                        	.eos
   672                        	.stag	_fx_block_device_driver,1448,63
   673                        	.member	name,0,110,8,0,64
   674                        	.member	version,512,110,8,0,64
   675                        	.member	hmajor,1024,110,8,0,16
   676                        	.member	hminor,1152,110,8,0,16
   677                        	.member	type,1280,14,8,8
   678                        	.member	f_driver_load,1288,129,8,32
   679                        	.member	f_driver_read,1320,129,8,32
   680                        	.member	f_driver_write,1352,129,8,32
   681                        	.member	f_driver_unload,1384,129,8,32
   682                        	.member	f_driver_command,1416,129,8,32
   683                        	.eos
   684                        	.line	270
   685                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxfloppy.c",2
   686                        ;#include "fxfloppy.h"
   687                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxfloppy.h",0
   688                        	.line	70
   689                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxfloppy.c",3
   690                        ;/* Floppy controller driver. Supports only 3.5" H
                    D 1440 KiB disks */
   691                        ;
   692                        ;#define PORT 0xAF13F0
   693                        ;
   694                        ;#define SRA (0xAF13F0)   //Status register A
   695                        ;#define SRB (0xAF13F1)   //Status register B
   696                        ;
   697                        ;#define FDC_DOR (0xAF13F2)   //Digital output reg
                    ister
   698                        ;//#define FDC_TDR (PORT+3)   //Tape drive registe
                    r
   699                        ;#define FDC_MSR (0xAF13F4)   //Main state registe
                    r
   700                        ;#define FDC_DRS (0xAF13F4)   //Datarate select re
                    gister
   701                        ;#define FDC_DATA (0xAF13F5)  //Data FIFO
   702                        ;
   703                        ;#define FDC_DIR (0xAF13F7)   //Digital input regi
                    ster
   704                        ;#define FDC_CCR (0xAF13F7)   //Configuration cont
                    rol register
  Thu Dec  3 2020 22:25                                                Page 15


   705                        ;
   706                        ;/* DOR flags */
   707                        ;#define DOR_IRQ   0x08
   708                        ;#define DOR_RESET 0x04
   709                        ;
   710                        ;/* MSR flags */
   711                        ;#define MSR_RQM  0x80
   712                        ;#define MSR_DIO  0x40
   713                        ;#define MSR_NDMA 0x20
   714                        ;#define MSR_CB   0x10
   715                        ;
   716                        ;#define MSR_ACTD 0x08
   717                        ;#define MSR_ACTC 0x04
   718                        ;#define MSR_ACTB 0x02
   719                        ;#define MSR_ACTA 0x01
   720                        ;
   721                        ;//#define MSR_OK_READ (MSR_RQM | MSR_DIO | MSR_CB
                    )
   722                        ;#define MSR_OK_READ (MSR_RQM | MSR_DIO)
   723                        ;
   724                        ;/* DIR flags */
   725                        ;#define DIR_DC 0x80
   726                        ;
   727                        ;#define SECTOR_SIZE 512
   728                        ;#define SEC_PER_TRACK 18
   729                        ;
   730                        ;#define MS 1000
   731                        ;
   732                        ;#define FL_HLT (8*MS)
   733                        ;#define FL_SPIN_UP (400*MS)
   734                        ;#define FL_SPIN_DN (3000*MS)
   735                        ;#define FL_SEL_D (20*MS)
   736                        ;#define FL_INT_TMT (30000*MS)
   737                        ;
   738                        ;#define CMD_SPECIFY  0x03
   739                        ;#define CMD_WRITE    0x45
   740                        ;#define CMD_READ     0x46
   741                        ;#define CMD_SENSEI   0x08
   742                        ;#define CMD_READID   0x4A
   743                        ;#define CMD_RECAL    0x07
   744                        ;#define CMD_SEEK     0x0F
   745                        ;#define CMD_VERSION  0x10
   746                        ;#define CMD_CONF     0x13
   747                        ;/* Bits of main status register */
   748                        ;#define STATUS_BUSYMASK	0x0F		/* drive
                     busy mask */
   749                        ;#define STATUS_BUSY		0x10		
                    /* FDC busy */
   750                        ;#define STATUS_NON_DMA	0x20		/* 0- DM
                    A mode */
   751                        ;#define STATUS_DIR		0x40		
                    /* 0- cpu->fdc */
   752                        ;#define STATUS_READY	0x80		/* Data 
                    reg ready */
   753                        ;
   754                        ;/* Values for FD_COMMAND */
   755                        ;#define FD_RECALIBRATE		0x07	/* move 
                    to track 0 */
  Thu Dec  3 2020 22:25                                                Page 16


   756                        ;#define FD_SEEK			0x0F	/* seek 
                    track */
   757                        ;#define FD_READ			0xA6	/* read 
                    with MT, SKip deleted */
   758                        ;#define FD_WRITE		0xC5	/* write with MT
                    , MFM */
   759                        ;#define FD_SENSEI		0x08	/* Sense
                     Interrupt Status */
   760                        ;#define FD_SPECIFY		0x03	/* speci
                    fy HUT etc */
   761                        ;#define FD_FORMAT		0x4D	/* forma
                    t one track */
   762                        ;#define FD_VERSION		0x10	/* get v
                    ersion code */
   763                        ;#define FD_CONFIGURE		0x13	/* confi
                    gure FIFO operation */
   764                        ;#define FD_PERPENDICULAR	0x12	/* perpendicular
                     r/w mode */
   765                        ;#define FD_GETSTATUS		0x04	/* read 
                    ST3 */
   766                        ;#define FD_DUMPREGS		0x0E	/* dump 
                    the contents of the fdc regs */
   767                        ;#define FD_READID		0xEA	/* print
                    s the header of a sector */
   768                        ;#define FD_UNLOCK		0x14	/* Fifo 
                    config unlock */
   769                        ;#define FD_LOCK			0x94	/* Fifo 
                    config lock */
   770                        ;#define FD_RSEEK_OUT		0x8f	/* seek 
                    out (i.e. to lower tracks) */
   771                        ;#define FD_RSEEK_IN		0xcf	/* seek 
                    in (i.e. to higher tracks) */
   772                        ;
   773                        ;/* Parameters for a 1.44 3.5" disk */
   774                        ;#define DISK_H1440_SIZE       2880
   775                        ;#define DISK_H1440_SECT       18
   776                        ;#define DISK_H1440_HEAD       2
   777                        ;#define DISK_H1440_TRACK      80
   778                        ;#define DISK_H1440_STRETCH    0
   779                        ;#define DISK_H1440_GAP        0x1B
   780                        ;#define DISK_H1440_RATE       0x00
   781                        ;#define DISK_H1440_SPEC1      0xCF
   782                        ;#define DISK_H1440_FMT_GAP    0x6C
   783                        ;
   784                        ;/* Parameters for a 1.44 3.5" drive */
   785                        ;#define DRIVE_H1440_MAX_DTR          500
   786                        ;#define DRIVE_H1440_HLT              16   /* ms *
                    /
   787                        ;#define DRIVE_H1440_HUT              16   /* ms *
                    /
   788                        ;#define DRIVE_H1440_SRT              4000 /* us *
                    /
   789                        ;#define DRIVE_H1440_SPINUP           400  /* ms *
                    /
   790                        ;#define DRIVE_H1440_SPINDOWN         3000 /* ms *
                    /
   791                        ;#define DRIVE_H1440_SPINDOWN_OFFSET  10
   792                        ;#define DRIVE_H1440_SELECT_DELAY     20  /* ms */
  Thu Dec  3 2020 22:25                                                Page 17


   793                        ;#define DRIVE_H1440_RPS              5
   794                        ;#define DRIVE_H1440_TRACKS           83
   795                        ;#define DRIVE_H1440_TIMEOUT          3000 /* ms *
                    /
   796                        ;#define DRIVE_H1440_INTERLEAVE_SECT  20
   797                        ;
   798                        ;/* Floppy drive configuration */
   799                        ;#define FIFO_DEPTH            10
   800                        ;#define USE_IMPLIED_SEEK      0
   801                        ;#define USE_FIFO              1
   802                        ;#define FIFO_THRESHOLD        10
   803                        ;#define TRACK_PRECOMPENSATION 0
   804                        ;
   805                        ;#define SLOW_FLOPPY 0
   806                        ;
   807                        ;#define FD_RESET_DELAY 20 /* microseconds */
   808                        ;
   809                        ;
   810                        ;#define WAIT_COND(c) while (!(c)) {}
   811                        ;
   812                        ;BOOL irq_signaled = FALSE;
   813                        	data
   814                        	xdef	~~irq_signaled
   815                        ~~irq_signaled:
   816 00:0000: 00           	db	$0
   817 00:0001:              	ends
   818                        ;
   819                        ;typedef struct
   820                        ;{
   821                        ;	UINT track;
   822                        ;	int motstate;
   823                        ;	int dchg;
   824                        ;} drive_state_t;
   825                        	.stag	fake64_,48,64
   826                        	.member	track,0,16,8,16
   827                        	.member	motstate,16,5,8,16
   828                        	.member	dchg,32,5,8,16
   829                        	.eos
   830                        ;
   831                        ;//static volatile int irq_signaled = 0;
   832                        ;static UCHAR reg_dor, reg_sr0, reg_sr1, reg_sr2;
   833                        ;
   834                        ;static drive_state_t drives[4];
   835                        ;static UCHAR cur_drive = 0;
   836                        	data
   837                        ~~cur_drive:
   838 00:0001: 00           	db	$0
   839 00:0002:              	ends
   840                        ;static int motoff_timer;
   841                        ;
   842                        ;static int status_sz;
   843                        ;static UCHAR status[7];
   844                        ;
   845                        ;UINT  floppybufferIndex = 0;
   846                        	data
   847                        	xdef	~~floppybufferIndex
   848                        ~~floppybufferIndex:
   849 00:0002: 00 00        	dw	$0
  Thu Dec  3 2020 22:25                                                Page 18


   850 00:0004:              	ends
   851                        ;UCHAR floppybuffer[512];
   852                        ;
   853                        ;
   854                        ;static void io_wait(void)
   855                        ;{
   856                        	.line	149
   857                        	.line	150
   858                        	code
   859                        	func
   860                        	.function	150
   861                        ~~io_wait:
   862                        	longa	on
   863                        	longi	on
   864 00:0000: 3B           	tsc
   865 00:0001: 38           	sec
   866 00:0002: E9 00 00     	sbc	#L2
   867 00:0005: 1B           	tcs
   868 00:0006: 0B           	phd
   869 00:0007: 5B           	tcd
   870                        	.block	150
   871                        ;	sleep(DRIVE_H1440_SPINUP);
   872                        	.line	151
   873 00:0008: F4 90 01     	pea	#<$190
   874 00:000B: 22 xx xx xx  	jsl	~~sleep
   875                        ;}
   876                        	.line	152
   877                        L5:
   878 00:000F: 2B           	pld
   879 00:0010: 3B           	tsc
   880 00:0011: 18           	clc
   881 00:0012: 69 00 00     	adc	#L2
   882 00:0015: 1B           	tcs
   883 00:0016: 6B           	rtl
   884                        	.endblock	152
   885             00000000   L2	equ	0
   886             00000001   L3	equ	1
   887                        	ends
   888                        	efunc
   889                        	.endfunc	152,1,0
   890                        	.line	152
   891                        ;
   892                        ;static void lba_2_chs(ULONG lba, UINT *track, UIN
                    T *head, UINT *sector)
   893                        ;{
   894                        	.line	154
   895                        	.line	155
   896                        	code
   897                        	func
   898                        	.function	155
   899                        ~~lba_2_chs:
   900                        	longa	on
   901                        	longi	on
   902 00:0017: 3B           	tsc
   903 00:0018: 38           	sec
   904 00:0019: E9 08 00     	sbc	#L6
   905 00:001C: 1B           	tcs
   906 00:001D: 0B           	phd
  Thu Dec  3 2020 22:25                                                Page 19


   907 00:001E: 5B           	tcd
   908             00000004   lba_0	set	4
   909             00000008   track_0	set	8
   910             0000000C   head_0	set	12
   911             00000010   sector_0	set	16
   912                        	.block	155
   913                        ;	*head	 = ((lba % (2 * SEC_PER_TRACK)) / SEC_PE
                    R_TRACK);
   914                        	.sym	lba,4,18,6,32
   915                        	.sym	track,8,144,6,32
   916                        	.sym	head,12,144,6,32
   917                        	.sym	sector,16,144,6,32
   918                        	.line	156
   919 00:001F: F4 00 00     	pea	#^$24
   920 00:0022: F4 24 00     	pea	#<$24
   921 00:0025: D4 0E        	pei	<L6+lba_0+2
   922 00:0027: D4 0C        	pei	<L6+lba_0
   923                        	xref	~~~lumd
   924 00:0029: 22 xx xx xx  	jsl	~~~lumd
   925 00:002D: 85 01        	sta	<R0
   926 00:002F: 86 03        	stx	<R0+2
   927 00:0031: F4 00 00     	pea	#^$12
   928 00:0034: F4 12 00     	pea	#<$12
   929 00:0037: D4 03        	pei	<R0+2
   930 00:0039: D4 01        	pei	<R0
   931                        	xref	~~~ludv
   932 00:003B: 22 xx xx xx  	jsl	~~~ludv
   933 00:003F: 85 01        	sta	<R0
   934 00:0041: 86 03        	stx	<R0+2
   935 00:0043: A5 01        	lda	<R0
   936 00:0045: 87 14        	sta	[<L6+head_0]
   937                        ;	*sector  = ((lba % (2 * SEC_PER_TRACK)) % SEC_PE
                    R_TRACK + 1);
   938                        	.line	157
   939 00:0047: F4 00 00     	pea	#^$24
   940 00:004A: F4 24 00     	pea	#<$24
   941 00:004D: D4 0E        	pei	<L6+lba_0+2
   942 00:004F: D4 0C        	pei	<L6+lba_0
   943                        	xref	~~~lumd
   944 00:0051: 22 xx xx xx  	jsl	~~~lumd
   945 00:0055: 85 01        	sta	<R0
   946 00:0057: 86 03        	stx	<R0+2
   947 00:0059: F4 00 00     	pea	#^$12
   948 00:005C: F4 12 00     	pea	#<$12
   949 00:005F: D4 03        	pei	<R0+2
   950 00:0061: D4 01        	pei	<R0
   951                        	xref	~~~lumd
   952 00:0063: 22 xx xx xx  	jsl	~~~lumd
   953 00:0067: 85 01        	sta	<R0
   954 00:0069: 86 03        	stx	<R0+2
   955 00:006B: 18           	clc
   956 00:006C: A9 01 00     	lda	#$1
   957 00:006F: 65 01        	adc	<R0
   958 00:0071: 85 05        	sta	<R1
   959 00:0073: A9 00 00     	lda	#$0
   960 00:0076: 65 03        	adc	<R0+2
   961 00:0078: 85 07        	sta	<R1+2
   962 00:007A: A5 05        	lda	<R1
  Thu Dec  3 2020 22:25                                                Page 20


   963 00:007C: 87 18        	sta	[<L6+sector_0]
   964                        ;	*track 	 = (lba / (2 * SEC_PER_TRACK));
   965                        	.line	158
   966 00:007E: F4 00 00     	pea	#^$24
   967 00:0081: F4 24 00     	pea	#<$24
   968 00:0084: D4 0E        	pei	<L6+lba_0+2
   969 00:0086: D4 0C        	pei	<L6+lba_0
   970                        	xref	~~~ludv
   971 00:0088: 22 xx xx xx  	jsl	~~~ludv
   972 00:008C: 85 01        	sta	<R0
   973 00:008E: 86 03        	stx	<R0+2
   974 00:0090: A5 01        	lda	<R0
   975 00:0092: 87 10        	sta	[<L6+track_0]
   976                        ;}
   977                        	.line	159
   978                        L9:
   979 00:0094: A5 0A        	lda	<L6+2
   980 00:0096: 85 1A        	sta	<L6+2+16
   981 00:0098: A5 09        	lda	<L6+1
   982 00:009A: 85 19        	sta	<L6+1+16
   983 00:009C: 2B           	pld
   984 00:009D: 3B           	tsc
   985 00:009E: 18           	clc
   986 00:009F: 69 18 00     	adc	#L6+16
   987 00:00A2: 1B           	tcs
   988 00:00A3: 6B           	rtl
   989                        	.endblock	159
   990             00000008   L6	equ	8
   991             00000009   L7	equ	9
   992                        	ends
   993                        	efunc
   994                        	.endfunc	159,9,8
   995                        	.line	159
   996                        ;
   997                        ;int sendbyte(UCHAR d)
   998                        ;{
   999                        	.line	161
  1000                        	.line	162
  1001                        	code
  1002                        	xdef	~~sendbyte
  1003                        	func
  1004                        	.function	162
  1005                        ~~sendbyte:
  1006                        	longa	on
  1007                        	longi	on
  1008 00:00A4: 3B           	tsc
  1009 00:00A5: 38           	sec
  1010 00:00A6: E9 03 00     	sbc	#L10
  1011 00:00A9: 1B           	tcs
  1012 00:00AA: 0B           	phd
  1013 00:00AB: 5B           	tcd
  1014             00000004   d_0	set	4
  1015                        	.block	162
  1016                        ;	int i;
  1017                        ;
  1018                        ;	UCHAR msr;
  1019                        ;
  1020                        ;	for (i = 0; i < 0x0fff; i++)
  Thu Dec  3 2020 22:25                                                Page 21


  1021             00000000   i_1	set	0
  1022             00000002   msr_1	set	2
  1023                        	.sym	i,0,5,1,16
  1024                        	.sym	msr,2,14,1,8
  1025                        	.sym	d,4,14,6,8
  1026                        	.line	167
  1027 00:00AC: 64 01        	stz	<L11+i_1
  1028                        L10003:
  1029                        ;	{
  1030                        	.line	168
  1031                        ;		msr = inportb(FDC_MSR);
  1032                        	.line	169
  1033 00:00AE: E2 20        	sep	#$20
  1034                        	longa	off
  1035 00:00B0: AF F4 13 AF  	lda	>11473908
  1036 00:00B4: 85 03        	sta	<L11+msr_1
  1037 00:00B6: C2 20        	rep	#$20
  1038                        	longa	on
  1039                        ;		//if ((msr & MSR_RQM) && !(msr & MSR_DIO
                    ))
  1040                        ;		k_debug_bits("sendbyte:",msr);
  1041                        	.line	171
  1042 00:00B8: D4 03        	pei	<L11+msr_1
  1043 00:00BA: F4 xx xx     	pea	#^L1
  1044 00:00BD: F4 xx xx     	pea	#<L1
  1045 00:00C0: 22 xx xx xx  	jsl	~~k_debug_bits
  1046                        ;		//if ((msr & (STATUS_READY|STATUS_DIR|ST
                    ATUS_NON_DMA)))
  1047                        ;		if ((msr & MSR_RQM) && !(msr & MSR_DIO))
  1048                        	.line	173
  1049                        ;		{
  1050 00:00C4: E2 20        	sep	#$20
  1051                        	longa	off
  1052 00:00C6: A5 03        	lda	<L11+msr_1
  1053 00:00C8: 29 80        	and	#<$80
  1054 00:00CA: C2 20        	rep	#$20
  1055                        	longa	on
  1056 00:00CC: D0 03        	bne	L13
  1057 00:00CE: 82 2C 00     	brl	L10004
  1058                        L13:
  1059 00:00D1: E2 20        	sep	#$20
  1060                        	longa	off
  1061 00:00D3: A5 03        	lda	<L11+msr_1
  1062 00:00D5: 29 40        	and	#<$40
  1063 00:00D7: C2 20        	rep	#$20
  1064                        	longa	on
  1065 00:00D9: F0 03        	beq	L14
  1066 00:00DB: 82 1F 00     	brl	L10004
  1067                        L14:
  1068                        	.line	174
  1069                        ;			outportb(FDC_DATA, d);
  1070                        	.line	175
  1071 00:00DE: E2 20        	sep	#$20
  1072                        	longa	off
  1073 00:00E0: A5 07        	lda	<L10+d_0
  1074 00:00E2: 8F F5 13 AF  	sta	>11473909
  1075 00:00E6: C2 20        	rep	#$20
  1076                        	longa	on
  Thu Dec  3 2020 22:25                                                Page 22


  1077                        ;			return 0;
  1078                        	.line	176
  1079 00:00E8: A9 00 00     	lda	#$0
  1080                        L15:
  1081 00:00EB: A8           	tay
  1082 00:00EC: A5 05        	lda	<L10+2
  1083 00:00EE: 85 07        	sta	<L10+2+2
  1084 00:00F0: A5 04        	lda	<L10+1
  1085 00:00F2: 85 06        	sta	<L10+1+2
  1086 00:00F4: 2B           	pld
  1087 00:00F5: 3B           	tsc
  1088 00:00F6: 18           	clc
  1089 00:00F7: 69 05 00     	adc	#L10+2
  1090 00:00FA: 1B           	tcs
  1091 00:00FB: 98           	tya
  1092 00:00FC: 6B           	rtl
  1093                        ;		}
  1094                        	.line	177
  1095                        ;		io_wait();
  1096                        L10004:
  1097                        	.line	178
  1098 00:00FD: 22 xx xx xx  	jsl	~~io_wait
  1099                        ;	}
  1100                        	.line	179
  1101                        L10001:
  1102 00:0101: E6 01        	inc	<L11+i_1
  1103 00:0103: 38           	sec
  1104 00:0104: A5 01        	lda	<L11+i_1
  1105 00:0106: E9 FF 0F     	sbc	#<$fff
  1106 00:0109: 70 03        	bvs	L16
  1107 00:010B: 49 00 80     	eor	#$8000
  1108                        L16:
  1109 00:010E: 30 03        	bmi	L17
  1110 00:0110: 82 9B FF     	brl	L10003
  1111                        L17:
  1112                        L10002:
  1113                        ;	k_debug_string("sendbyte::NOSEND\r\n");
  1114                        	.line	180
  1115 00:0113: F4 xx xx     	pea	#^L1+10
  1116 00:0116: F4 xx xx     	pea	#<L1+10
  1117 00:0119: 22 xx xx xx  	jsl	~~k_debug_string
  1118                        ;	return -1; /* timeout */
  1119                        	.line	181
  1120 00:011D: A9 FF FF     	lda	#$ffff
  1121 00:0120: 82 C8 FF     	brl	L15
  1122                        ;}
  1123                        	.line	182
  1124                        	.endblock	182
  1125             00000003   L10	equ	3
  1126             00000001   L11	equ	1
  1127                        	ends
  1128                        	efunc
  1129                        	.endfunc	182,1,3
  1130                        	.line	182
  1131                        	data
  1132                        L1:
  1133 00:0004: 73 65 6E 64  	db	$73,$65,$6E,$64,$62,$79,$74,$65,$3A,$00,
                    $73,$65,$6E,$64,$62
  Thu Dec  3 2020 22:25                                                Page 23


       00:0008: 62 79 74 65 
       00:000C: 3A 00 73 65 
       00:0010: 6E 64 62 
  1134 00:0013: 79 74 65 3A  	db	$79,$74,$65,$3A,$3A,$4E,$4F,$53,$45,$4E,
                    $44,$0D,$0A,$00
       00:0017: 3A 4E 4F 53 
       00:001B: 45 4E 44 0D 
       00:001F: 0A 00 
  1135 00:0021:              	ends
  1136                        ;
  1137                        ;int getbyte()
  1138                        ;{
  1139                        	.line	184
  1140                        	.line	185
  1141                        	code
  1142                        	xdef	~~getbyte
  1143                        	func
  1144                        	.function	185
  1145                        ~~getbyte:
  1146                        	longa	on
  1147                        	longi	on
  1148 00:0123: 3B           	tsc
  1149 00:0124: 38           	sec
  1150 00:0125: E9 07 00     	sbc	#L19
  1151 00:0128: 1B           	tcs
  1152 00:0129: 0B           	phd
  1153 00:012A: 5B           	tcd
  1154                        	.block	185
  1155                        ;	int i ;
  1156                        ;
  1157                        ;	UCHAR msr;
  1158                        ;
  1159                        ;	for (i = 0; i < 0x0FF; i++)
  1160             00000000   i_1	set	0
  1161             00000002   msr_1	set	2
  1162                        	.sym	i,0,5,1,16
  1163                        	.sym	msr,2,14,1,8
  1164                        	.line	190
  1165 00:012B: 64 05        	stz	<L20+i_1
  1166                        L10007:
  1167                        ;	{
  1168                        	.line	191
  1169                        ;		msr = inportb(FDC_MSR);
  1170                        	.line	192
  1171 00:012D: E2 20        	sep	#$20
  1172                        	longa	off
  1173 00:012F: AF F4 13 AF  	lda	>11473908
  1174 00:0133: 85 07        	sta	<L20+msr_1
  1175 00:0135: C2 20        	rep	#$20
  1176                        	longa	on
  1177                        ;		if ((msr & MSR_OK_READ) == MSR_OK_READ)
  1178                        	.line	193
  1179                        ;		{
  1180 00:0137: A5 07        	lda	<L20+msr_1
  1181 00:0139: 29 C0 00     	and	#<$c0
  1182 00:013C: 85 01        	sta	<R0
  1183 00:013E: A5 01        	lda	<R0
  1184 00:0140: C9 C0 00     	cmp	#<$c0
  Thu Dec  3 2020 22:25                                                Page 24


  1185 00:0143: F0 03        	beq	L22
  1186 00:0145: 82 11 00     	brl	L10008
  1187                        L22:
  1188                        	.line	194
  1189                        ;			return inportb(FDC_DATA);
  1190                        	.line	195
  1191 00:0148: AF F5 13 AF  	lda	>11473909
  1192 00:014C: 29 FF 00     	and	#$ff
  1193                        L23:
  1194 00:014F: A8           	tay
  1195 00:0150: 2B           	pld
  1196 00:0151: 3B           	tsc
  1197 00:0152: 18           	clc
  1198 00:0153: 69 07 00     	adc	#L19
  1199 00:0156: 1B           	tcs
  1200 00:0157: 98           	tya
  1201 00:0158: 6B           	rtl
  1202                        ;		}
  1203                        	.line	196
  1204                        ;		io_wait();
  1205                        L10008:
  1206                        	.line	197
  1207 00:0159: 22 xx xx xx  	jsl	~~io_wait
  1208                        ;	}
  1209                        	.line	198
  1210                        L10005:
  1211 00:015D: E6 05        	inc	<L20+i_1
  1212 00:015F: 38           	sec
  1213 00:0160: A5 05        	lda	<L20+i_1
  1214 00:0162: E9 FF 00     	sbc	#<$ff
  1215 00:0165: 70 03        	bvs	L24
  1216 00:0167: 49 00 80     	eor	#$8000
  1217                        L24:
  1218 00:016A: 30 03        	bmi	L25
  1219 00:016C: 82 BE FF     	brl	L10007
  1220                        L25:
  1221                        L10006:
  1222                        ;	return -1; /* timeout */
  1223                        	.line	199
  1224 00:016F: A9 FF FF     	lda	#$ffff
  1225 00:0172: 82 DA FF     	brl	L23
  1226                        ;}
  1227                        	.line	200
  1228                        	.endblock	200
  1229             00000007   L19	equ	7
  1230             00000005   L20	equ	5
  1231                        	ends
  1232                        	efunc
  1233                        	.endfunc	200,5,7
  1234                        	.line	200
  1235                        ;
  1236                        ;static int fdc_waitint()
  1237                        ;{
  1238                        	.line	202
  1239                        	.line	203
  1240                        	code
  1241                        	func
  1242                        	.function	203
  Thu Dec  3 2020 22:25                                                Page 25


  1243                        ~~fdc_waitint:
  1244                        	longa	on
  1245                        	longi	on
  1246 00:0175: 3B           	tsc
  1247 00:0176: 38           	sec
  1248 00:0177: E9 02 00     	sbc	#L26
  1249 00:017A: 1B           	tcs
  1250 00:017B: 0B           	phd
  1251 00:017C: 5B           	tcd
  1252                        	.block	203
  1253                        ;	UINT tmout = 0x0FFF;
  1254                        ;
  1255                        ;	/*
  1256                        ;	clock_t s = clock();
  1257                        ;	int tmout;
  1258                        ;	WAIT_COND(!irq_signaled && (tmout = (clock() - s
                     < FL_INT_TMT)));
  1259                        ;	if (!tmout)
  1260                        ;		return -1;
  1261                        ;		*/
  1262                        ;	//sleep(300);
  1263                        ;
  1264                        ;	k_debug_integer("*** fdc_waitint::irq_signaled:"
                    ,irq_signaled);
  1265             00000000   tmout_1	set	0
  1266                        	.sym	tmout,0,16,1,16
  1267 00:017D: A9 FF 0F     	lda	#$fff
  1268 00:0180: 85 01        	sta	<L27+tmout_1
  1269                        	.line	215
  1270 00:0182: AD xx xx     	lda	|~~irq_signaled
  1271 00:0185: 29 FF 00     	and	#$ff
  1272 00:0188: 48           	pha
  1273 00:0189: F4 xx xx     	pea	#^L18
  1274 00:018C: F4 xx xx     	pea	#<L18
  1275 00:018F: 22 xx xx xx  	jsl	~~k_debug_integer
  1276                        ;	while(!irq_signaled)
  1277                        	.line	216
  1278                        L10009:
  1279 00:0193: AD xx xx     	lda	|~~irq_signaled
  1280 00:0196: 29 FF 00     	and	#$ff
  1281 00:0199: F0 03        	beq	L29
  1282 00:019B: 82 0F 00     	brl	L10010
  1283                        L29:
  1284                        ;	{
  1285                        	.line	217
  1286                        ;		//k_debug_integer("*** fdc_waitint::irq_
                    signaled:",irq_signaled);
  1287                        ;		tmout--;
  1288                        	.line	219
  1289 00:019E: C6 01        	dec	<L27+tmout_1
  1290                        ;		if(tmout < 1)
  1291                        	.line	220
  1292                        ;			break;
  1293 00:01A0: A5 01        	lda	<L27+tmout_1
  1294 00:01A2: C9 01 00     	cmp	#<$1
  1295 00:01A5: B0 03        	bcs	L30
  1296 00:01A7: 82 03 00     	brl	L10010
  1297                        L30:
  Thu Dec  3 2020 22:25                                                Page 26


  1298                        ;		//sleep(10);
  1299                        ;	}
  1300                        	.line	223
  1301 00:01AA: 82 E6 FF     	brl	L10009
  1302                        L10010:
  1303                        ;	k_debug_integer("*** fdc_waitint::irq_signaled:"
                    ,irq_signaled);
  1304                        	.line	224
  1305 00:01AD: AD xx xx     	lda	|~~irq_signaled
  1306 00:01B0: 29 FF 00     	and	#$ff
  1307 00:01B3: 48           	pha
  1308 00:01B4: F4 xx xx     	pea	#^L18+31
  1309 00:01B7: F4 xx xx     	pea	#<L18+31
  1310 00:01BA: 22 xx xx xx  	jsl	~~k_debug_integer
  1311                        ;	irq_signaled = FALSE;
  1312                        	.line	225
  1313 00:01BE: E2 20        	sep	#$20
  1314                        	longa	off
  1315 00:01C0: 9C xx xx     	stz	|~~irq_signaled
  1316 00:01C3: C2 20        	rep	#$20
  1317                        	longa	on
  1318                        ;	if (!tmout)
  1319                        	.line	226
  1320                        ;	{
  1321 00:01C5: A5 01        	lda	<L27+tmout_1
  1322 00:01C7: F0 03        	beq	L31
  1323 00:01C9: 82 17 00     	brl	L10011
  1324                        L31:
  1325                        	.line	227
  1326                        ;		k_debug_string("*** fdc_waitint::timeout
                    \r\n");
  1327                        	.line	228
  1328 00:01CC: F4 xx xx     	pea	#^L18+62
  1329 00:01CF: F4 xx xx     	pea	#<L18+62
  1330 00:01D2: 22 xx xx xx  	jsl	~~k_debug_string
  1331                        ;		return -1;
  1332                        	.line	229
  1333 00:01D6: A9 FF FF     	lda	#$ffff
  1334                        L32:
  1335 00:01D9: A8           	tay
  1336 00:01DA: 2B           	pld
  1337 00:01DB: 3B           	tsc
  1338 00:01DC: 18           	clc
  1339 00:01DD: 69 02 00     	adc	#L26
  1340 00:01E0: 1B           	tcs
  1341 00:01E1: 98           	tya
  1342 00:01E2: 6B           	rtl
  1343                        ;	}
  1344                        	.line	230
  1345                        ;	return 0;
  1346                        L10011:
  1347                        	.line	231
  1348 00:01E3: A9 00 00     	lda	#$0
  1349 00:01E6: 82 F0 FF     	brl	L32
  1350                        ;}
  1351                        	.line	232
  1352                        	.endblock	232
  1353             00000002   L26	equ	2
  Thu Dec  3 2020 22:25                                                Page 27


  1354             00000001   L27	equ	1
  1355                        	ends
  1356                        	efunc
  1357                        	.endfunc	232,1,2
  1358                        	.line	232
  1359                        	data
  1360                        L18:
  1361 00:0021: 2A 2A 2A 20  	db	$2A,$2A,$2A,$20,$66,$64,$63,$5F,$77,$61,
                    $69,$74,$69,$6E,$74
       00:0025: 66 64 63 5F 
       00:0029: 77 61 69 74 
       00:002D: 69 6E 74 
  1362 00:0030: 3A 3A 69 72  	db	$3A,$3A,$69,$72,$71,$5F,$73,$69,$67,$6E,
                    $61,$6C,$65,$64,$3A
       00:0034: 71 5F 73 69 
       00:0038: 67 6E 61 6C 
       00:003C: 65 64 3A 
  1363 00:003F: 00 2A 2A 2A  	db	$00,$2A,$2A,$2A,$20,$66,$64,$63,$5F,$77,
                    $61,$69,$74,$69,$6E
       00:0043: 20 66 64 63 
       00:0047: 5F 77 61 69 
       00:004B: 74 69 6E 
  1364 00:004E: 74 3A 3A 69  	db	$74,$3A,$3A,$69,$72,$71,$5F,$73,$69,$67,
                    $6E,$61,$6C,$65,$64
       00:0052: 72 71 5F 73 
       00:0056: 69 67 6E 61 
       00:005A: 6C 65 64 
  1365 00:005D: 3A 00 2A 2A  	db	$3A,$00,$2A,$2A,$2A,$20,$66,$64,$63,$5F,
                    $77,$61,$69,$74,$69
       00:0061: 2A 20 66 64 
       00:0065: 63 5F 77 61 
       00:0069: 69 74 69 
  1366 00:006C: 6E 74 3A 3A  	db	$6E,$74,$3A,$3A,$74,$69,$6D,$65,$6F,$75,
                    $74,$0D,$0A,$00
       00:0070: 74 69 6D 65 
       00:0074: 6F 75 74 0D 
       00:0078: 0A 00 
  1367 00:007A:              	ends
  1368                        ;
  1369                        ;static int fdc_wait(int sensei)
  1370                        ;{
  1371                        	.line	234
  1372                        	.line	235
  1373                        	code
  1374                        	func
  1375                        	.function	235
  1376                        ~~fdc_wait:
  1377                        	longa	on
  1378                        	longi	on
  1379 00:01E9: 3B           	tsc
  1380 00:01EA: 38           	sec
  1381 00:01EB: E9 06 00     	sbc	#L34
  1382 00:01EE: 1B           	tcs
  1383 00:01EF: 0B           	phd
  1384 00:01F0: 5B           	tcd
  1385             00000004   sensei_0	set	4
  1386                        	.block	235
  1387                        ;	int tmout = fdc_waitint();
  Thu Dec  3 2020 22:25                                                Page 28


  1388                        ;
  1389                        ;	status_sz = 0;
  1390             00000000   tmout_1	set	0
  1391                        	.sym	tmout,0,5,1,16
  1392                        	.sym	sensei,4,5,6,16
  1393 00:01F1: 22 xx xx xx  	jsl	~~fdc_waitint
  1394 00:01F5: 85 05        	sta	<L35+tmout_1
  1395                        	.line	238
  1396 00:01F7: 9C xx xx     	stz	|~~status_sz
  1397                        ;	while (status_sz < 7 && (inportb(FDC_MSR) & MSR_
                    CB))
  1398                        	.line	239
  1399                        L10012:
  1400 00:01FA: 38           	sec
  1401 00:01FB: AD xx xx     	lda	|~~status_sz
  1402 00:01FE: E9 07 00     	sbc	#<$7
  1403 00:0201: 70 03        	bvs	L37
  1404 00:0203: 49 00 80     	eor	#$8000
  1405                        L37:
  1406 00:0206: 10 03        	bpl	L38
  1407 00:0208: 82 27 00     	brl	L10013
  1408                        L38:
  1409 00:020B: E2 20        	sep	#$20
  1410                        	longa	off
  1411 00:020D: AF F4 13 AF  	lda	>11473908
  1412 00:0211: 29 10        	and	#<$10
  1413 00:0213: C2 20        	rep	#$20
  1414                        	longa	on
  1415 00:0215: D0 03        	bne	L39
  1416 00:0217: 82 18 00     	brl	L10013
  1417                        L39:
  1418                        ;		status[status_sz++] = getbyte();
  1419                        	.line	240
  1420 00:021A: AD xx xx     	lda	|~~status_sz
  1421 00:021D: 85 01        	sta	<R0
  1422 00:021F: EE xx xx     	inc	|~~status_sz
  1423 00:0222: 22 xx xx xx  	jsl	~~getbyte
  1424 00:0226: E2 20        	sep	#$20
  1425                        	longa	off
  1426 00:0228: A6 01        	ldx	<R0
  1427 00:022A: 9D xx xx     	sta	|~~status,X
  1428 00:022D: C2 20        	rep	#$20
  1429                        	longa	on
  1430 00:022F: 82 C8 FF     	brl	L10012
  1431                        L10013:
  1432                        ;
  1433                        ;	if (sensei)
  1434                        	.line	242
  1435                        ;	{
  1436 00:0232: A5 0A        	lda	<L34+sensei_0
  1437 00:0234: D0 03        	bne	L40
  1438 00:0236: 82 59 00     	brl	L10014
  1439                        L40:
  1440                        	.line	243
  1441                        ;		sendbyte(CMD_SENSEI);
  1442                        	.line	244
  1443 00:0239: F4 08 00     	pea	#<$8
  1444 00:023C: 22 xx xx xx  	jsl	~~sendbyte
  Thu Dec  3 2020 22:25                                                Page 29


  1445                        ;		reg_sr0 = getbyte();
  1446                        	.line	245
  1447 00:0240: 22 xx xx xx  	jsl	~~getbyte
  1448 00:0244: E2 20        	sep	#$20
  1449                        	longa	off
  1450 00:0246: 8D xx xx     	sta	|~~reg_sr0
  1451 00:0249: C2 20        	rep	#$20
  1452                        	longa	on
  1453                        ;		k_debug_hex("fdc_wait:reg_sr0:",reg_sr0)
                    ;
  1454                        	.line	246
  1455 00:024B: AD xx xx     	lda	|~~reg_sr0
  1456 00:024E: 48           	pha
  1457 00:024F: F4 xx xx     	pea	#^L33
  1458 00:0252: F4 xx xx     	pea	#<L33
  1459 00:0255: 22 xx xx xx  	jsl	~~k_debug_hex
  1460                        ;		drives[cur_drive].track = getbyte();
  1461                        	.line	247
  1462 00:0259: AD xx xx     	lda	|~~cur_drive
  1463 00:025C: 29 FF 00     	and	#$ff
  1464 00:025F: 85 01        	sta	<R0
  1465 00:0261: A5 01        	lda	<R0
  1466 00:0263: 0A           	asl	A
  1467 00:0264: 65 01        	adc	<R0
  1468 00:0266: 0A           	asl	A
  1469 00:0267: 85 01        	sta	<R0
  1470 00:0269: 22 xx xx xx  	jsl	~~getbyte
  1471 00:026D: A6 01        	ldx	<R0
  1472 00:026F: 9D xx xx     	sta	|~~drives,X
  1473                        ;		k_debug_hex("fdc_wait:track:",drives[cur
                    _drive].track);
  1474                        	.line	248
  1475 00:0272: AD xx xx     	lda	|~~cur_drive
  1476 00:0275: 29 FF 00     	and	#$ff
  1477 00:0278: 85 01        	sta	<R0
  1478 00:027A: A5 01        	lda	<R0
  1479 00:027C: 0A           	asl	A
  1480 00:027D: 65 01        	adc	<R0
  1481 00:027F: 0A           	asl	A
  1482 00:0280: 85 01        	sta	<R0
  1483 00:0282: A6 01        	ldx	<R0
  1484 00:0284: BD xx xx     	lda	|~~drives,X
  1485 00:0287: 48           	pha
  1486 00:0288: F4 xx xx     	pea	#^L33+18
  1487 00:028B: F4 xx xx     	pea	#<L33+18
  1488 00:028E: 22 xx xx xx  	jsl	~~k_debug_hex
  1489                        ;	}
  1490                        	.line	249
  1491                        ;
  1492                        ;	irq_signaled = 0;
  1493                        L10014:
  1494                        	.line	251
  1495 00:0292: E2 20        	sep	#$20
  1496                        	longa	off
  1497 00:0294: 9C xx xx     	stz	|~~irq_signaled
  1498 00:0297: C2 20        	rep	#$20
  1499                        	longa	on
  1500                        ;	if (tmout)
  Thu Dec  3 2020 22:25                                                Page 30


  1501                        	.line	252
  1502                        ;	{
  1503 00:0299: A5 05        	lda	<L35+tmout_1
  1504 00:029B: D0 03        	bne	L41
  1505 00:029D: 82 3C 00     	brl	L10015
  1506                        L41:
  1507                        	.line	253
  1508                        ;		if (inportb(FDC_DIR) & DIR_DC)
  1509                        	.line	254
  1510                        ;			drives[cur_drive].dchg = 1;
  1511 00:02A0: E2 20        	sep	#$20
  1512                        	longa	off
  1513 00:02A2: AF F7 13 AF  	lda	>11473911
  1514 00:02A6: 29 80        	and	#<$80
  1515 00:02A8: C2 20        	rep	#$20
  1516                        	longa	on
  1517 00:02AA: D0 03        	bne	L42
  1518 00:02AC: 82 18 00     	brl	L10016
  1519                        L42:
  1520                        	.line	255
  1521 00:02AF: AD xx xx     	lda	|~~cur_drive
  1522 00:02B2: 29 FF 00     	and	#$ff
  1523 00:02B5: 85 01        	sta	<R0
  1524 00:02B7: A5 01        	lda	<R0
  1525 00:02B9: 0A           	asl	A
  1526 00:02BA: 65 01        	adc	<R0
  1527 00:02BC: 0A           	asl	A
  1528 00:02BD: 85 01        	sta	<R0
  1529 00:02BF: A9 01 00     	lda	#$1
  1530 00:02C2: A6 01        	ldx	<R0
  1531 00:02C4: 9D xx xx     	sta	|~~drives+4,X
  1532                        ;		return 1;
  1533                        L10016:
  1534                        	.line	256
  1535 00:02C7: A9 01 00     	lda	#$1
  1536                        L43:
  1537 00:02CA: A8           	tay
  1538 00:02CB: A5 08        	lda	<L34+2
  1539 00:02CD: 85 0A        	sta	<L34+2+2
  1540 00:02CF: A5 07        	lda	<L34+1
  1541 00:02D1: 85 09        	sta	<L34+1+2
  1542 00:02D3: 2B           	pld
  1543 00:02D4: 3B           	tsc
  1544 00:02D5: 18           	clc
  1545 00:02D6: 69 08 00     	adc	#L34+2
  1546 00:02D9: 1B           	tcs
  1547 00:02DA: 98           	tya
  1548 00:02DB: 6B           	rtl
  1549                        ;	}
  1550                        	.line	257
  1551                        ;	else
  1552                        L10015:
  1553                        ;		return 0;
  1554                        	.line	259
  1555 00:02DC: A9 00 00     	lda	#$0
  1556 00:02DF: 82 E8 FF     	brl	L43
  1557                        ;}
  1558                        	.line	260
  Thu Dec  3 2020 22:25                                                Page 31


  1559                        	.endblock	260
  1560             00000006   L34	equ	6
  1561             00000005   L35	equ	5
  1562                        	ends
  1563                        	efunc
  1564                        	.endfunc	260,5,6
  1565                        	.line	260
  1566                        	data
  1567                        L33:
  1568 00:007A: 66 64 63 5F  	db	$66,$64,$63,$5F,$77,$61,$69,$74,$3A,$72,
                    $65,$67,$5F,$73,$72
       00:007E: 77 61 69 74 
       00:0082: 3A 72 65 67 
       00:0086: 5F 73 72 
  1569 00:0089: 30 3A 00 66  	db	$30,$3A,$00,$66,$64,$63,$5F,$77,$61,$69,
                    $74,$3A,$74,$72,$61
       00:008D: 64 63 5F 77 
       00:0091: 61 69 74 3A 
       00:0095: 74 72 61 
  1570 00:0098: 63 6B 3A 00  	db	$63,$6B,$3A,$00
  1571 00:009C:              	ends
  1572                        ;
  1573                        ;static void motor_on()
  1574                        ;{
  1575                        	.line	262
  1576                        	.line	263
  1577                        	code
  1578                        	func
  1579                        	.function	263
  1580                        ~~motor_on:
  1581                        	longa	on
  1582                        	longi	on
  1583 00:02E2: 3B           	tsc
  1584 00:02E3: 38           	sec
  1585 00:02E4: E9 04 00     	sbc	#L45
  1586 00:02E7: 1B           	tcs
  1587 00:02E8: 0B           	phd
  1588 00:02E9: 5B           	tcd
  1589                        	.block	263
  1590                        ;	k_debug_string("motor_on\r\n");
  1591                        	.line	264
  1592 00:02EA: F4 xx xx     	pea	#^L44
  1593 00:02ED: F4 xx xx     	pea	#<L44
  1594 00:02F0: 22 xx xx xx  	jsl	~~k_debug_string
  1595                        ;	motoff_timer = 0;
  1596                        	.line	265
  1597 00:02F4: 9C xx xx     	stz	|~~motoff_timer
  1598                        ;	//if (drives[cur_drive].motstate == 0)
  1599                        ;	if(1)
  1600                        	.line	267
  1601                        ;	{
  1602                        	.line	268
  1603                        ;		reg_dor |= (1 << (cur_drive + 4));
  1604                        	.line	269
  1605 00:02F7: E2 20        	sep	#$20
  1606                        	longa	off
  1607 00:02F9: 18           	clc
  1608 00:02FA: A9 04        	lda	#$4
  Thu Dec  3 2020 22:25                                                Page 32


  1609 00:02FC: 6D xx xx     	adc	|~~cur_drive
  1610 00:02FF: C2 20        	rep	#$20
  1611                        	longa	on
  1612 00:0301: 48           	pha
  1613 00:0302: A9 01 00     	lda	#$1
  1614 00:0305: FA           	plx
  1615                        	xref	~~~casl
  1616 00:0306: 22 xx xx xx  	jsl	~~~casl
  1617 00:030A: E2 20        	sep	#$20
  1618                        	longa	off
  1619 00:030C: 85 01        	sta	<R0
  1620 00:030E: C2 20        	rep	#$20
  1621                        	longa	on
  1622 00:0310: E2 20        	sep	#$20
  1623                        	longa	off
  1624 00:0312: A5 01        	lda	<R0
  1625 00:0314: 0C xx xx     	tsb	|~~reg_dor
  1626 00:0317: C2 20        	rep	#$20
  1627                        	longa	on
  1628                        ;		reg_dor |= cur_drive;
  1629                        	.line	270
  1630 00:0319: E2 20        	sep	#$20
  1631                        	longa	off
  1632 00:031B: AD xx xx     	lda	|~~cur_drive
  1633 00:031E: 0C xx xx     	tsb	|~~reg_dor
  1634 00:0321: C2 20        	rep	#$20
  1635                        	longa	on
  1636                        ;		outportb(FDC_DOR, reg_dor);
  1637                        	.line	271
  1638 00:0323: E2 20        	sep	#$20
  1639                        	longa	off
  1640 00:0325: AD xx xx     	lda	|~~reg_dor
  1641 00:0328: 8F F2 13 AF  	sta	>11473906
  1642 00:032C: C2 20        	rep	#$20
  1643                        	longa	on
  1644                        ;		drives[cur_drive].motstate = 1;
  1645                        	.line	272
  1646 00:032E: AD xx xx     	lda	|~~cur_drive
  1647 00:0331: 29 FF 00     	and	#$ff
  1648 00:0334: 85 01        	sta	<R0
  1649 00:0336: A5 01        	lda	<R0
  1650 00:0338: 0A           	asl	A
  1651 00:0339: 65 01        	adc	<R0
  1652 00:033B: 0A           	asl	A
  1653 00:033C: 85 01        	sta	<R0
  1654 00:033E: A9 01 00     	lda	#$1
  1655 00:0341: A6 01        	ldx	<R0
  1656 00:0343: 9D xx xx     	sta	|~~drives+2,X
  1657                        ;		//usleep(FL_SPIN_UP);
  1658                        ;		sleep(DRIVE_H1440_SPINUP);
  1659                        	.line	274
  1660 00:0346: F4 90 01     	pea	#<$190
  1661 00:0349: 22 xx xx xx  	jsl	~~sleep
  1662                        ;	}
  1663                        	.line	275
  1664                        ;}
  1665                        L10017:
  1666                        	.line	276
  Thu Dec  3 2020 22:25                                                Page 33


  1667                        L48:
  1668 00:034D: 2B           	pld
  1669 00:034E: 3B           	tsc
  1670 00:034F: 18           	clc
  1671 00:0350: 69 04 00     	adc	#L45
  1672 00:0353: 1B           	tcs
  1673 00:0354: 6B           	rtl
  1674                        	.endblock	276
  1675             00000004   L45	equ	4
  1676             00000005   L46	equ	5
  1677                        	ends
  1678                        	efunc
  1679                        	.endfunc	276,5,4
  1680                        	.line	276
  1681                        	data
  1682                        L44:
  1683 00:009C: 6D 6F 74 6F  	db	$6D,$6F,$74,$6F,$72,$5F,$6F,$6E,$0D,$0A,
                    $00
       00:00A0: 72 5F 6F 6E 
       00:00A4: 0D 0A 00 
  1684 00:00A7:              	ends
  1685                        ;
  1686                        ;static void motor_off()
  1687                        ;{
  1688                        	.line	278
  1689                        	.line	279
  1690                        	code
  1691                        	func
  1692                        	.function	279
  1693                        ~~motor_off:
  1694                        	longa	on
  1695                        	longi	on
  1696 00:0355: 3B           	tsc
  1697 00:0356: 38           	sec
  1698 00:0357: E9 04 00     	sbc	#L50
  1699 00:035A: 1B           	tcs
  1700 00:035B: 0B           	phd
  1701 00:035C: 5B           	tcd
  1702                        	.block	279
  1703                        ;	k_debug_string("motor_off\r\n");
  1704                        	.line	280
  1705 00:035D: F4 xx xx     	pea	#^L49
  1706 00:0360: F4 xx xx     	pea	#<L49
  1707 00:0363: 22 xx xx xx  	jsl	~~k_debug_string
  1708                        ;	if (drives[cur_drive].motstate)
  1709                        	.line	281
  1710                        ;	{
  1711 00:0367: AD xx xx     	lda	|~~cur_drive
  1712 00:036A: 29 FF 00     	and	#$ff
  1713 00:036D: 85 01        	sta	<R0
  1714 00:036F: A5 01        	lda	<R0
  1715 00:0371: 0A           	asl	A
  1716 00:0372: 65 01        	adc	<R0
  1717 00:0374: 0A           	asl	A
  1718 00:0375: 85 01        	sta	<R0
  1719 00:0377: A6 01        	ldx	<R0
  1720 00:0379: BD xx xx     	lda	|~~drives+2,X
  1721 00:037C: D0 03        	bne	L53
  Thu Dec  3 2020 22:25                                                Page 34


  1722 00:037E: 82 06 00     	brl	L10018
  1723                        L53:
  1724                        	.line	282
  1725                        ;		//motoff_timer = 2000;
  1726                        ;		motoff_timer = 200;
  1727                        	.line	284
  1728 00:0381: A9 C8 00     	lda	#$c8
  1729 00:0384: 8D xx xx     	sta	|~~motoff_timer
  1730                        ;	}
  1731                        	.line	285
  1732                        ;	// TODO
  1733                        ;	//motoff_timer = 1;
  1734                        ;	//floppy_timer();
  1735                        ;}
  1736                        L10018:
  1737                        	.line	289
  1738                        L54:
  1739 00:0387: 2B           	pld
  1740 00:0388: 3B           	tsc
  1741 00:0389: 18           	clc
  1742 00:038A: 69 04 00     	adc	#L50
  1743 00:038D: 1B           	tcs
  1744 00:038E: 6B           	rtl
  1745                        	.endblock	289
  1746             00000004   L50	equ	4
  1747             00000005   L51	equ	5
  1748                        	ends
  1749                        	efunc
  1750                        	.endfunc	289,5,4
  1751                        	.line	289
  1752                        	data
  1753                        L49:
  1754 00:00A7: 6D 6F 74 6F  	db	$6D,$6F,$74,$6F,$72,$5F,$6F,$66,$66,$0D,
                    $0A,$00
       00:00AB: 72 5F 6F 66 
       00:00AF: 66 0D 0A 00 
  1755 00:00B3:              	ends
  1756                        ;
  1757                        ;static void fdc_configure()
  1758                        ;{
  1759                        	.line	291
  1760                        	.line	292
  1761                        	code
  1762                        	func
  1763                        	.function	292
  1764                        ~~fdc_configure:
  1765                        	longa	on
  1766                        	longi	on
  1767 00:038F: 3B           	tsc
  1768 00:0390: 38           	sec
  1769 00:0391: E9 00 00     	sbc	#L56
  1770 00:0394: 1B           	tcs
  1771 00:0395: 0B           	phd
  1772 00:0396: 5B           	tcd
  1773                        	.block	292
  1774                        ;	sendbyte(CMD_CONF);
  1775                        	.line	293
  1776 00:0397: F4 13 00     	pea	#<$13
  Thu Dec  3 2020 22:25                                                Page 35


  1777 00:039A: 22 xx xx xx  	jsl	~~sendbyte
  1778                        ;	sendbyte(0x00);
  1779                        	.line	294
  1780 00:039E: F4 00 00     	pea	#<$0
  1781 00:03A1: 22 xx xx xx  	jsl	~~sendbyte
  1782                        ;	sendbyte(0x47); /* threshold = 8, FIFO on, polli
                    ng on, implied seek on */
  1783                        	.line	295
  1784 00:03A5: F4 47 00     	pea	#<$47
  1785 00:03A8: 22 xx xx xx  	jsl	~~sendbyte
  1786                        ;	//sendbyte(0x4F); /* threshold = 16, FIFO off, p
                    olling on, implied seek on */
  1787                        ;	//sendbyte(0x7F); /* threshold = 16, FIFO on, po
                    lling on, implied seek on */
  1788                        ;	//sendbyte(0x7F);
  1789                        ;	//sendbyte(0x40);
  1790                        ;	sendbyte(0x00);
  1791                        	.line	300
  1792 00:03AC: F4 00 00     	pea	#<$0
  1793 00:03AF: 22 xx xx xx  	jsl	~~sendbyte
  1794                        ;	//sendbyte(0x2F);
  1795                        ;}
  1796                        	.line	302
  1797                        L59:
  1798 00:03B3: 2B           	pld
  1799 00:03B4: 3B           	tsc
  1800 00:03B5: 18           	clc
  1801 00:03B6: 69 00 00     	adc	#L56
  1802 00:03B9: 1B           	tcs
  1803 00:03BA: 6B           	rtl
  1804                        	.endblock	302
  1805             00000000   L56	equ	0
  1806             00000001   L57	equ	1
  1807                        	ends
  1808                        	efunc
  1809                        	.endfunc	302,1,0
  1810                        	.line	302
  1811                        ;
  1812                        ;/**
  1813                        ;// Register Address
  1814                        ;#define FDD_STATUS_A           ((LPCHAR)0xAF13F0)
                     // Read     use in with PS2 and PS2 mode 30 noly
  1815                        ;#define FDD_STATUS_B           ((LPCHAR)0xAF13F1)
                     // Read
  1816                        ;#define FDD_DIGITAL_OUTPUT     ((LPCHAR)0xAF13F2)
                     // Read/Write
  1817                        ;#define FDD_TAPE_DRIVER        ((LPCHAR)0xAF13F3)
                     // Read/Write
  1818                        ;#define FDD_MAIN_STATUS        ((LPCHAR)0xAF13F4)
                     // Read
  1819                        ;#define FDD_DATA_RATE_SELECT   ((LPCHAR)0xAF13F4)
                     // Write
  1820                        ;#define FDD_FIFO               ((LPCHAR)0xAF13F5)
                     // Read/Write
  1821                        ;//RESERVED_REG          0xAF13F6 // Reserved
  1822                        ;#define FDD_DIGITAL_INPUT      ((LPCHAR)0xAF13F7)
                     // Read
  1823                        ;#define FDD_CONFIG_CTRL        ((LPCHAR)0xAF13F7)
  Thu Dec  3 2020 22:25                                                Page 36


                     // Write
  1824                        ; */
  1825                        ;
  1826                        ;static void fdc_reset()
  1827                        ;{
  1828                        	.line	318
  1829                        	.line	319
  1830                        	code
  1831                        	func
  1832                        	.function	319
  1833                        ~~fdc_reset:
  1834                        	longa	on
  1835                        	longi	on
  1836 00:03BB: 3B           	tsc
  1837 00:03BC: 38           	sec
  1838 00:03BD: E9 08 00     	sbc	#L60
  1839 00:03C0: 1B           	tcs
  1840 00:03C1: 0B           	phd
  1841 00:03C2: 5B           	tcd
  1842                        	.block	319
  1843                        ;	UCHAR st0, cyl;
  1844                        ;	int i;
  1845                        ;	/* Send reset */
  1846                        ;	outportb(FDD_DIGITAL_OUTPUT, 0x00);
  1847             00000000   st0_1	set	0
  1848             00000001   cyl_1	set	1
  1849             00000002   i_1	set	2
  1850                        	.sym	st0,0,14,1,8
  1851                        	.sym	cyl,1,14,1,8
  1852                        	.sym	i,2,5,1,16
  1853                        	.line	323
  1854 00:03C3: E2 20        	sep	#$20
  1855                        	longa	off
  1856 00:03C5: A9 00        	lda	#$0
  1857 00:03C7: 8F F2 13 AF  	sta	>11473906
  1858 00:03CB: C2 20        	rep	#$20
  1859                        	longa	on
  1860                        ;	io_wait();
  1861                        	.line	324
  1862 00:03CD: 22 xx xx xx  	jsl	~~io_wait
  1863                        ;	io_wait();
  1864                        	.line	325
  1865 00:03D1: 22 xx xx xx  	jsl	~~io_wait
  1866                        ;	io_wait();
  1867                        	.line	326
  1868 00:03D5: 22 xx xx xx  	jsl	~~io_wait
  1869                        ;	io_wait();
  1870                        	.line	327
  1871 00:03D9: 22 xx xx xx  	jsl	~~io_wait
  1872                        ;
  1873                        ;	//reg_dor = DOR_IRQ | DOR_RESET;
  1874                        ;	reg_dor = DOR_RESET;
  1875                        	.line	330
  1876 00:03DD: E2 20        	sep	#$20
  1877                        	longa	off
  1878 00:03DF: A9 04        	lda	#$4
  1879 00:03E1: 8D xx xx     	sta	|~~reg_dor
  1880 00:03E4: C2 20        	rep	#$20
  Thu Dec  3 2020 22:25                                                Page 37


  1881                        	longa	on
  1882                        ;	outportb(FDD_DIGITAL_OUTPUT, reg_dor);
  1883                        	.line	331
  1884 00:03E6: E2 20        	sep	#$20
  1885                        	longa	off
  1886 00:03E8: AD xx xx     	lda	|~~reg_dor
  1887 00:03EB: 8F F2 13 AF  	sta	>11473906
  1888 00:03EF: C2 20        	rep	#$20
  1889                        	longa	on
  1890                        ;	io_wait();
  1891                        	.line	332
  1892 00:03F1: 22 xx xx xx  	jsl	~~io_wait
  1893                        ;
  1894                        ;	outportb(FDD_DIGITAL_OUTPUT, reg_dor | 0x04);
  1895                        	.line	334
  1896 00:03F5: E2 20        	sep	#$20
  1897                        	longa	off
  1898 00:03F7: AD xx xx     	lda	|~~reg_dor
  1899 00:03FA: 09 04        	ora	#<$4
  1900 00:03FC: 8F F2 13 AF  	sta	>11473906
  1901 00:0400: C2 20        	rep	#$20
  1902                        	longa	on
  1903                        ;	io_wait();
  1904                        	.line	335
  1905 00:0402: 22 xx xx xx  	jsl	~~io_wait
  1906                        ;
  1907                        ;	outportb(FDD_DATA_RATE_SELECT, 0x02);
  1908                        	.line	337
  1909 00:0406: E2 20        	sep	#$20
  1910                        	longa	off
  1911 00:0408: A9 02        	lda	#$2
  1912 00:040A: 8F F4 13 AF  	sta	>11473908
  1913 00:040E: C2 20        	rep	#$20
  1914                        	longa	on
  1915                        ;	io_wait();
  1916                        	.line	338
  1917 00:0410: 22 xx xx xx  	jsl	~~io_wait
  1918                        ;
  1919                        ;	k_debug_string("fdc_reset\r\n");
  1920                        	.line	340
  1921 00:0414: F4 xx xx     	pea	#^L55
  1922 00:0417: F4 xx xx     	pea	#<L55
  1923 00:041A: 22 xx xx xx  	jsl	~~k_debug_string
  1924                        ;	/* Wait for IRQ or timeout */
  1925                        ;	/*
  1926                        ;	clock_t s = clock();
  1927                        ;	WAIT_COND(!irq_signaled && (clock() - s < FL_INT
                    _TMT));
  1928                        ;	if (!irq_signaled)
  1929                        ;	{
  1930                        ;	}
  1931                        ;	*/
  1932                        ;
  1933                        ;	//sleep(1000);
  1934                        ;
  1935                        ;	//fdc_waitint();
  1936                        ;
  1937                        ;	//if (fdc_waitint())
  Thu Dec  3 2020 22:25                                                Page 38


  1938                        ;	//	return;
  1939                        ;	/* Hmph... Timeout */
  1940                        ;
  1941                        ;	for ( i = 0; i < 5; i++)
  1942                        	.line	358
  1943 00:041E: 64 07        	stz	<L61+i_1
  1944                        L10021:
  1945                        ;	{
  1946                        	.line	359
  1947                        ;		sendbyte(CMD_SENSEI);
  1948                        	.line	360
  1949 00:0420: F4 08 00     	pea	#<$8
  1950 00:0423: 22 xx xx xx  	jsl	~~sendbyte
  1951                        ;		reg_sr0 = getbyte();
  1952                        	.line	361
  1953 00:0427: 22 xx xx xx  	jsl	~~getbyte
  1954 00:042B: E2 20        	sep	#$20
  1955                        	longa	off
  1956 00:042D: 8D xx xx     	sta	|~~reg_sr0
  1957 00:0430: C2 20        	rep	#$20
  1958                        	longa	on
  1959                        ;		k_debug_bits("fdc_reset:reg_sr0:",reg_sr
                    0);
  1960                        	.line	362
  1961 00:0432: AD xx xx     	lda	|~~reg_sr0
  1962 00:0435: 48           	pha
  1963 00:0436: F4 xx xx     	pea	#^L55+12
  1964 00:0439: F4 xx xx     	pea	#<L55+12
  1965 00:043C: 22 xx xx xx  	jsl	~~k_debug_bits
  1966                        ;		drives[i].track = getbyte();
  1967                        	.line	363
  1968 00:0440: A5 07        	lda	<L61+i_1
  1969 00:0442: 0A           	asl	A
  1970 00:0443: 65 07        	adc	<L61+i_1
  1971 00:0445: 0A           	asl	A
  1972 00:0446: 85 01        	sta	<R0
  1973 00:0448: 22 xx xx xx  	jsl	~~getbyte
  1974 00:044C: A6 01        	ldx	<R0
  1975 00:044E: 9D xx xx     	sta	|~~drives,X
  1976                        ;		k_debug_bits("fdc_reset:track:",drives[i
                    ].track);
  1977                        	.line	364
  1978 00:0451: A5 07        	lda	<L61+i_1
  1979 00:0453: 0A           	asl	A
  1980 00:0454: 65 07        	adc	<L61+i_1
  1981 00:0456: 0A           	asl	A
  1982 00:0457: 85 01        	sta	<R0
  1983 00:0459: A6 01        	ldx	<R0
  1984 00:045B: BD xx xx     	lda	|~~drives,X
  1985 00:045E: 48           	pha
  1986 00:045F: F4 xx xx     	pea	#^L55+31
  1987 00:0462: F4 xx xx     	pea	#<L55+31
  1988 00:0465: 22 xx xx xx  	jsl	~~k_debug_bits
  1989                        ;		sleep(30);
  1990                        	.line	365
  1991 00:0469: F4 1E 00     	pea	#<$1e
  1992 00:046C: 22 xx xx xx  	jsl	~~sleep
  1993                        ;	}
  Thu Dec  3 2020 22:25                                                Page 39


  1994                        	.line	366
  1995                        L10019:
  1996 00:0470: E6 07        	inc	<L61+i_1
  1997 00:0472: A5 07        	lda	<L61+i_1
  1998 00:0474: 30 07        	bmi	L63
  1999 00:0476: 3A           	dea
  2000 00:0477: 3A           	dea
  2001 00:0478: 3A           	dea
  2002 00:0479: 3A           	dea
  2003 00:047A: 3A           	dea
  2004 00:047B: 10 03        	bpl	L64
  2005                        L63:
  2006 00:047D: 82 A0 FF     	brl	L10021
  2007                        L64:
  2008                        L10020:
  2009                        ;
  2010                        ;	irq_signaled = 0;
  2011                        	.line	368
  2012 00:0480: E2 20        	sep	#$20
  2013                        	longa	off
  2014 00:0482: 9C xx xx     	stz	|~~irq_signaled
  2015 00:0485: C2 20        	rep	#$20
  2016                        	longa	on
  2017                        ;
  2018                        ;	fdc_configure();
  2019                        	.line	370
  2020 00:0487: 22 xx xx xx  	jsl	~~fdc_configure
  2021                        ;	//floppy_specify();
  2022                        ;
  2023                        ;	//motor_off();
  2024                        ;}
  2025                        	.line	374
  2026                        L65:
  2027 00:048B: 2B           	pld
  2028 00:048C: 3B           	tsc
  2029 00:048D: 18           	clc
  2030 00:048E: 69 08 00     	adc	#L60
  2031 00:0491: 1B           	tcs
  2032 00:0492: 6B           	rtl
  2033                        	.endblock	374
  2034             00000008   L60	equ	8
  2035             00000005   L61	equ	5
  2036                        	ends
  2037                        	efunc
  2038                        	.endfunc	374,5,8
  2039                        	.line	374
  2040                        	data
  2041                        L55:
  2042 00:00B3: 66 64 63 5F  	db	$66,$64,$63,$5F,$72,$65,$73,$65,$74,$0D,
                    $0A,$00,$66,$64,$63
       00:00B7: 72 65 73 65 
       00:00BB: 74 0D 0A 00 
       00:00BF: 66 64 63 
  2043 00:00C2: 5F 72 65 73  	db	$5F,$72,$65,$73,$65,$74,$3A,$72,$65,$67,
                    $5F,$73,$72,$30,$3A
       00:00C6: 65 74 3A 72 
       00:00CA: 65 67 5F 73 
       00:00CE: 72 30 3A 
  Thu Dec  3 2020 22:25                                                Page 40


  2044 00:00D1: 00 66 64 63  	db	$00,$66,$64,$63,$5F,$72,$65,$73,$65,$74,
                    $3A,$74,$72,$61,$63
       00:00D5: 5F 72 65 73 
       00:00D9: 65 74 3A 74 
       00:00DD: 72 61 63 
  2045 00:00E0: 6B 3A 00     	db	$6B,$3A,$00
  2046 00:00E3:              	ends
  2047                        ;
  2048                        ;//! configure drive floppy__drive_data(3, 16, 240
                    , FALSE);
  2049                        ;void floppy_drive_data(UINT stepr, UINT loadt, UI
                    NT unloadt,BOOL dma)
  2050                        ;{
  2051                        	.line	377
  2052                        	.line	378
  2053                        	code
  2054                        	xdef	~~floppy_drive_data
  2055                        	func
  2056                        	.function	378
  2057                        ~~floppy_drive_data:
  2058                        	longa	on
  2059                        	longi	on
  2060 00:0493: 3B           	tsc
  2061 00:0494: 38           	sec
  2062 00:0495: E9 02 00     	sbc	#L67
  2063 00:0498: 1B           	tcs
  2064 00:0499: 0B           	phd
  2065 00:049A: 5B           	tcd
  2066             00000004   stepr_0	set	4
  2067             00000006   loadt_0	set	6
  2068             00000008   unloadt_0	set	8
  2069             0000000A   dma_0	set	10
  2070                        	.block	378
  2071                        ;
  2072                        ;	UINT data = 0;
  2073                        ;
  2074                        ;	k_debug_string("floppy_drive_data\r\n");
  2075             00000000   data_1	set	0
  2076                        	.sym	data,0,16,1,16
  2077                        	.sym	stepr,4,16,6,16
  2078                        	.sym	loadt,6,16,6,16
  2079                        	.sym	unloadt,8,16,6,16
  2080                        	.sym	dma,10,14,6,8
  2081 00:049B: 64 01        	stz	<L68+data_1
  2082                        	.line	382
  2083 00:049D: F4 xx xx     	pea	#^L66
  2084 00:04A0: F4 xx xx     	pea	#<L66
  2085 00:04A3: 22 xx xx xx  	jsl	~~k_debug_string
  2086                        ;
  2087                        ;	//! send command
  2088                        ;	sendbyte(CMD_SPECIFY);
  2089                        	.line	385
  2090 00:04A7: F4 03 00     	pea	#<$3
  2091 00:04AA: 22 xx xx xx  	jsl	~~sendbyte
  2092                        ;//	data = ((stepr & 0xf) << 4) | (unloadt &
                     0xf);
  2093                        ;	data = 0x00;
  2094                        	.line	387
  Thu Dec  3 2020 22:25                                                Page 41


  2095 00:04AE: 64 01        	stz	<L68+data_1
  2096                        ;	sendbyte(data);
  2097                        	.line	388
  2098 00:04B0: D4 01        	pei	<L68+data_1
  2099 00:04B2: 22 xx xx xx  	jsl	~~sendbyte
  2100                        ;	//data = (((loadt) << 1) |  (1));
  2101                        ;//	data = ((0x05 << 1) | (1));
  2102                        ;	//data = 0x00; // enable DMA
  2103                        ;	data = 0x01; // disable DMA
  2104                        	.line	392
  2105 00:04B6: A9 01 00     	lda	#$1
  2106 00:04B9: 85 01        	sta	<L68+data_1
  2107                        ;	sendbyte(data);
  2108                        	.line	393
  2109 00:04BB: D4 01        	pei	<L68+data_1
  2110 00:04BD: 22 xx xx xx  	jsl	~~sendbyte
  2111                        ;}
  2112                        	.line	394
  2113                        L70:
  2114 00:04C1: A5 04        	lda	<L67+2
  2115 00:04C3: 85 0C        	sta	<L67+2+8
  2116 00:04C5: A5 03        	lda	<L67+1
  2117 00:04C7: 85 0B        	sta	<L67+1+8
  2118 00:04C9: 2B           	pld
  2119 00:04CA: 3B           	tsc
  2120 00:04CB: 18           	clc
  2121 00:04CC: 69 0A 00     	adc	#L67+8
  2122 00:04CF: 1B           	tcs
  2123 00:04D0: 6B           	rtl
  2124                        	.endblock	394
  2125             00000002   L67	equ	2
  2126             00000001   L68	equ	1
  2127                        	ends
  2128                        	efunc
  2129                        	.endfunc	394,1,2
  2130                        	.line	394
  2131                        	data
  2132                        L66:
  2133 00:00E3: 66 6C 6F 70  	db	$66,$6C,$6F,$70,$70,$79,$5F,$64,$72,$69,
                    $76,$65,$5F,$64,$61
       00:00E7: 70 79 5F 64 
       00:00EB: 72 69 76 65 
       00:00EF: 5F 64 61 
  2134 00:00F2: 74 61 0D 0A  	db	$74,$61,$0D,$0A,$00
       00:00F6: 00 
  2135 00:00F7:              	ends
  2136                        ;
  2137                        ;
  2138                        ;static void floppy_specify()
  2139                        ;{
  2140                        	.line	397
  2141                        	.line	398
  2142                        	code
  2143                        	func
  2144                        	.function	398
  2145                        ~~floppy_specify:
  2146                        	longa	on
  2147                        	longi	on
  Thu Dec  3 2020 22:25                                                Page 42


  2148 00:04D1: 3B           	tsc
  2149 00:04D2: 38           	sec
  2150 00:04D3: E9 00 00     	sbc	#L72
  2151 00:04D6: 1B           	tcs
  2152 00:04D7: 0B           	phd
  2153 00:04D8: 5B           	tcd
  2154                        	.block	398
  2155                        ;	sendbyte(CMD_SPECIFY);
  2156                        	.line	399
  2157 00:04D9: F4 03 00     	pea	#<$3
  2158 00:04DC: 22 xx xx xx  	jsl	~~sendbyte
  2159                        ;	sendbyte((0x08 << 4) | (0));
  2160                        	.line	400
  2161 00:04E0: F4 80 00     	pea	#<$80
  2162 00:04E3: 22 xx xx xx  	jsl	~~sendbyte
  2163                        ;	//sendbyte((0x05 << 1) | (1));
  2164                        ;	//sendbyte(0xDF);
  2165                        ;	sendbyte(0x01);
  2166                        	.line	403
  2167 00:04E7: F4 01 00     	pea	#<$1
  2168 00:04EA: 22 xx xx xx  	jsl	~~sendbyte
  2169                        ;}
  2170                        	.line	404
  2171                        L75:
  2172 00:04EE: 2B           	pld
  2173 00:04EF: 3B           	tsc
  2174 00:04F0: 18           	clc
  2175 00:04F1: 69 00 00     	adc	#L72
  2176 00:04F4: 1B           	tcs
  2177 00:04F5: 6B           	rtl
  2178                        	.endblock	404
  2179             00000000   L72	equ	0
  2180             00000001   L73	equ	1
  2181                        	ends
  2182                        	efunc
  2183                        	.endfunc	404,1,0
  2184                        	.line	404
  2185                        ;
  2186                        ;static int floppy_select(int drive)
  2187                        ;{
  2188                        	.line	406
  2189                        	.line	407
  2190                        	code
  2191                        	func
  2192                        	.function	407
  2193                        ~~floppy_select:
  2194                        	longa	on
  2195                        	longi	on
  2196 00:04F6: 3B           	tsc
  2197 00:04F7: 38           	sec
  2198 00:04F8: E9 0C 00     	sbc	#L76
  2199 00:04FB: 1B           	tcs
  2200 00:04FC: 0B           	phd
  2201 00:04FD: 5B           	tcd
  2202             00000004   drive_0	set	4
  2203                        	.block	407
  2204                        ;	if (drive < 0 || drive > 3)
  2205                        	.sym	drive,4,5,6,16
  Thu Dec  3 2020 22:25                                                Page 43


  2206                        	.line	408
  2207                        ;	{
  2208 00:04FE: A5 10        	lda	<L76+drive_0
  2209 00:0500: 10 03        	bpl	L80
  2210 00:0502: 82 10 00     	brl	L79
  2211                        L80:
  2212 00:0505: 38           	sec
  2213 00:0506: A9 03 00     	lda	#$3
  2214 00:0509: E5 10        	sbc	<L76+drive_0
  2215 00:050B: 70 03        	bvs	L81
  2216 00:050D: 49 00 80     	eor	#$8000
  2217                        L81:
  2218 00:0510: 10 03        	bpl	L82
  2219 00:0512: 82 15 00     	brl	L10022
  2220                        L82:
  2221                        L79:
  2222                        	.line	409
  2223                        ;		return -1;
  2224                        	.line	410
  2225 00:0515: A9 FF FF     	lda	#$ffff
  2226                        L83:
  2227 00:0518: A8           	tay
  2228 00:0519: A5 0E        	lda	<L76+2
  2229 00:051B: 85 10        	sta	<L76+2+2
  2230 00:051D: A5 0D        	lda	<L76+1
  2231 00:051F: 85 0F        	sta	<L76+1+2
  2232 00:0521: 2B           	pld
  2233 00:0522: 3B           	tsc
  2234 00:0523: 18           	clc
  2235 00:0524: 69 0E 00     	adc	#L76+2
  2236 00:0527: 1B           	tcs
  2237 00:0528: 98           	tya
  2238 00:0529: 6B           	rtl
  2239                        ;	}
  2240                        	.line	411
  2241                        ;
  2242                        ;	outportb(FDC_CCR, 0x00);
  2243                        L10022:
  2244                        	.line	413
  2245 00:052A: E2 20        	sep	#$20
  2246                        	longa	off
  2247 00:052C: A9 00        	lda	#$0
  2248 00:052E: 8F F7 13 AF  	sta	>11473911
  2249 00:0532: C2 20        	rep	#$20
  2250                        	longa	on
  2251                        ;
  2252                        ;	cur_drive = (UCHAR) drive;
  2253                        	.line	415
  2254 00:0534: E2 20        	sep	#$20
  2255                        	longa	off
  2256 00:0536: A5 10        	lda	<L76+drive_0
  2257 00:0538: 8D xx xx     	sta	|~~cur_drive
  2258 00:053B: C2 20        	rep	#$20
  2259                        	longa	on
  2260                        ;	//reg_dor = (reg_dor & 0x0C) | cur_drive; /* sto
                    p all motors and select new drive */
  2261                        ;
  2262                        ;	reg_dor |= (1 << (drive + 4)); /* Spinup the sel
  Thu Dec  3 2020 22:25                                                Page 44


                    ected drive */
  2263                        	.line	418
  2264 00:053D: 18           	clc
  2265 00:053E: A9 04 00     	lda	#$4
  2266 00:0541: 65 10        	adc	<L76+drive_0
  2267 00:0543: 48           	pha
  2268 00:0544: A9 01 00     	lda	#$1
  2269 00:0547: FA           	plx
  2270                        	xref	~~~asl
  2271 00:0548: 22 xx xx xx  	jsl	~~~asl
  2272 00:054C: 85 01        	sta	<R0
  2273 00:054E: AD xx xx     	lda	|~~reg_dor
  2274 00:0551: 29 FF 00     	and	#$ff
  2275 00:0554: 85 05        	sta	<R1
  2276 00:0556: A5 05        	lda	<R1
  2277 00:0558: 05 01        	ora	<R0
  2278 00:055A: 85 09        	sta	<R2
  2279 00:055C: E2 20        	sep	#$20
  2280                        	longa	off
  2281 00:055E: A5 09        	lda	<R2
  2282 00:0560: 8D xx xx     	sta	|~~reg_dor
  2283 00:0563: C2 20        	rep	#$20
  2284                        	longa	on
  2285                        ;	reg_dor |= drive; /* Select the drive for comman
                    ds as well */
  2286                        	.line	419
  2287 00:0565: E2 20        	sep	#$20
  2288                        	longa	off
  2289 00:0567: A5 10        	lda	<L76+drive_0
  2290 00:0569: 0C xx xx     	tsb	|~~reg_dor
  2291 00:056C: C2 20        	rep	#$20
  2292                        	longa	on
  2293                        ;
  2294                        ;	outportb(FDC_DOR, reg_dor);
  2295                        	.line	421
  2296 00:056E: E2 20        	sep	#$20
  2297                        	longa	off
  2298 00:0570: AD xx xx     	lda	|~~reg_dor
  2299 00:0573: 8F F2 13 AF  	sta	>11473906
  2300 00:0577: C2 20        	rep	#$20
  2301                        	longa	on
  2302                        ;
  2303                        ;	sleep(DRIVE_H1440_SPINUP);
  2304                        	.line	423
  2305 00:0579: F4 90 01     	pea	#<$190
  2306 00:057C: 22 xx xx xx  	jsl	~~sleep
  2307                        ;
  2308                        ;	floppy_specify();
  2309                        	.line	425
  2310 00:0580: 22 xx xx xx  	jsl	~~floppy_specify
  2311                        ;	//floppy_drive_data(3, 16, 240, FALSE);
  2312                        ;
  2313                        ;	return 0;
  2314                        	.line	428
  2315 00:0584: A9 00 00     	lda	#$0
  2316 00:0587: 82 8E FF     	brl	L83
  2317                        ;}
  2318                        	.line	429
  Thu Dec  3 2020 22:25                                                Page 45


  2319                        	.endblock	429
  2320             0000000C   L76	equ	12
  2321             0000000D   L77	equ	13
  2322                        	ends
  2323                        	efunc
  2324                        	.endfunc	429,13,12
  2325                        	.line	429
  2326                        ;
  2327                        ;static void floppy_calibrate()
  2328                        ;{
  2329                        	.line	431
  2330                        	.line	432
  2331                        	code
  2332                        	func
  2333                        	.function	432
  2334                        ~~floppy_calibrate:
  2335                        	longa	on
  2336                        	longi	on
  2337 00:058A: 3B           	tsc
  2338 00:058B: 38           	sec
  2339 00:058C: E9 04 00     	sbc	#L84
  2340 00:058F: 1B           	tcs
  2341 00:0590: 0B           	phd
  2342 00:0591: 5B           	tcd
  2343                        	.block	432
  2344                        ;	int i;
  2345                        ;	UCHAR  st0, cyl;
  2346                        ;	motor_on();
  2347             00000000   i_1	set	0
  2348             00000002   st0_1	set	2
  2349             00000003   cyl_1	set	3
  2350                        	.sym	i,0,5,1,16
  2351                        	.sym	st0,2,14,1,8
  2352                        	.sym	cyl,3,14,1,8
  2353                        	.line	435
  2354 00:0592: 22 xx xx xx  	jsl	~~motor_on
  2355                        ;
  2356                        ;	//sendbyte(CMD_RECAL);
  2357                        ;	//sendbyte(cur_drive);
  2358                        ;
  2359                        ;	//fdc_wait(1);
  2360                        ;
  2361                        ;
  2362                        ;
  2363                        ;	for (i = 0; i < 100; i++)
  2364                        	.line	444
  2365 00:0596: 64 01        	stz	<L85+i_1
  2366                        L10025:
  2367                        ;	{
  2368                        	.line	445
  2369                        ;
  2370                        ;		//! send command
  2371                        ;		sendbyte(CMD_RECAL);
  2372                        	.line	448
  2373 00:0598: F4 07 00     	pea	#<$7
  2374 00:059B: 22 xx xx xx  	jsl	~~sendbyte
  2375                        ;		sendbyte(cur_drive);
  2376                        	.line	449
  Thu Dec  3 2020 22:25                                                Page 46


  2377 00:059F: AD xx xx     	lda	|~~cur_drive
  2378 00:05A2: 48           	pha
  2379 00:05A3: 22 xx xx xx  	jsl	~~sendbyte
  2380                        ;		fdc_waitint();
  2381                        	.line	450
  2382 00:05A7: 22 xx xx xx  	jsl	~~fdc_waitint
  2383                        ;		floppy_check_int(&st0, &cyl);
  2384                        	.line	451
  2385 00:05AB: F4 00 00     	pea	#0
  2386 00:05AE: 18           	clc
  2387 00:05AF: 7B           	tdc
  2388 00:05B0: 69 04 00     	adc	#<L85+cyl_1
  2389 00:05B3: 48           	pha
  2390 00:05B4: F4 00 00     	pea	#0
  2391 00:05B7: 18           	clc
  2392 00:05B8: 7B           	tdc
  2393 00:05B9: 69 03 00     	adc	#<L85+st0_1
  2394 00:05BC: 48           	pha
  2395 00:05BD: 22 xx xx xx  	jsl	~~floppy_check_int
  2396                        ;
  2397                        ;		//! did we find cylinder 0? if so, we ar
                    e done
  2398                        ;		if (!cyl)
  2399                        	.line	454
  2400                        ;		{
  2401 00:05C1: A5 04        	lda	<L85+cyl_1
  2402 00:05C3: 29 FF 00     	and	#$ff
  2403 00:05C6: F0 03        	beq	L87
  2404 00:05C8: 82 14 00     	brl	L10026
  2405                        L87:
  2406                        	.line	455
  2407                        ;			k_debug_hex("floppy_calibrate:cy
                    :", cyl);
  2408                        	.line	456
  2409 00:05CB: D4 04        	pei	<L85+cyl_1
  2410 00:05CD: F4 xx xx     	pea	#^L71
  2411 00:05D0: F4 xx xx     	pea	#<L71
  2412 00:05D3: 22 xx xx xx  	jsl	~~k_debug_hex
  2413                        ;			//motor_off();
  2414                        ;			return ;
  2415                        	.line	458
  2416                        L88:
  2417 00:05D7: 2B           	pld
  2418 00:05D8: 3B           	tsc
  2419 00:05D9: 18           	clc
  2420 00:05DA: 69 04 00     	adc	#L84
  2421 00:05DD: 1B           	tcs
  2422 00:05DE: 6B           	rtl
  2423                        ;		}
  2424                        	.line	459
  2425                        ;	}
  2426                        L10026:
  2427                        	.line	460
  2428                        L10023:
  2429 00:05DF: E6 01        	inc	<L85+i_1
  2430 00:05E1: 38           	sec
  2431 00:05E2: A5 01        	lda	<L85+i_1
  2432 00:05E4: E9 64 00     	sbc	#<$64
  Thu Dec  3 2020 22:25                                                Page 47


  2433 00:05E7: 70 03        	bvs	L89
  2434 00:05E9: 49 00 80     	eor	#$8000
  2435                        L89:
  2436 00:05EC: 30 03        	bmi	L90
  2437 00:05EE: 82 A7 FF     	brl	L10025
  2438                        L90:
  2439                        L10024:
  2440                        ;
  2441                        ;	motor_off();
  2442                        	.line	462
  2443 00:05F1: 22 xx xx xx  	jsl	~~motor_off
  2444                        ;}
  2445                        	.line	463
  2446 00:05F5: 82 DF FF     	brl	L88
  2447                        	.endblock	463
  2448             00000004   L84	equ	4
  2449             00000001   L85	equ	1
  2450                        	ends
  2451                        	efunc
  2452                        	.endfunc	463,1,4
  2453                        	.line	463
  2454                        	data
  2455                        L71:
  2456 00:00F7: 66 6C 6F 70  	db	$66,$6C,$6F,$70,$70,$79,$5F,$63,$61,$6C,
                    $69,$62,$72,$61,$74
       00:00FB: 70 79 5F 63 
       00:00FF: 61 6C 69 62 
       00:0103: 72 61 74 
  2457 00:0106: 65 3A 63 79  	db	$65,$3A,$63,$79,$3A,$00
       00:010A: 3A 00 
  2458 00:010C:              	ends
  2459                        ;
  2460                        ;static int floppy_seek(UINT track)
  2461                        ;{
  2462                        	.line	465
  2463                        	.line	466
  2464                        	code
  2465                        	func
  2466                        	.function	466
  2467                        ~~floppy_seek:
  2468                        	longa	on
  2469                        	longi	on
  2470 00:05F8: 3B           	tsc
  2471 00:05F9: 38           	sec
  2472 00:05FA: E9 07 00     	sbc	#L92
  2473 00:05FD: 1B           	tcs
  2474 00:05FE: 0B           	phd
  2475 00:05FF: 5B           	tcd
  2476             00000004   track_0	set	4
  2477                        	.block	466
  2478                        ;	UCHAR sts = 0;
  2479                        ;	int res = 0;
  2480                        ;
  2481                        ;	k_debug_hex("floppy_seek:cy:", track);
  2482             00000000   sts_1	set	0
  2483             00000001   res_1	set	1
  2484                        	.sym	sts,0,14,1,8
  2485                        	.sym	res,1,5,1,16
  Thu Dec  3 2020 22:25                                                Page 48


  2486                        	.sym	track,4,16,6,16
  2487 00:0600: E2 20        	sep	#$20
  2488                        	longa	off
  2489 00:0602: 64 05        	stz	<L93+sts_1
  2490 00:0604: C2 20        	rep	#$20
  2491                        	longa	on
  2492 00:0606: 64 06        	stz	<L93+res_1
  2493                        	.line	470
  2494 00:0608: D4 0B        	pei	<L92+track_0
  2495 00:060A: F4 xx xx     	pea	#^L91
  2496 00:060D: F4 xx xx     	pea	#<L91
  2497 00:0610: 22 xx xx xx  	jsl	~~k_debug_hex
  2498                        ;
  2499                        ;	//if (drives[cur_drive].track == track)
  2500                        ;	//	return 0;
  2501                        ;
  2502                        ;	motor_on();
  2503                        	.line	475
  2504 00:0614: 22 xx xx xx  	jsl	~~motor_on
  2505                        ;
  2506                        ;	sendbyte(CMD_SEEK);
  2507                        	.line	477
  2508 00:0618: F4 0F 00     	pea	#<$f
  2509 00:061B: 22 xx xx xx  	jsl	~~sendbyte
  2510                        ;	sendbyte(cur_drive);
  2511                        	.line	478
  2512 00:061F: AD xx xx     	lda	|~~cur_drive
  2513 00:0622: 48           	pha
  2514 00:0623: 22 xx xx xx  	jsl	~~sendbyte
  2515                        ;	sendbyte((UCHAR) track);
  2516                        	.line	479
  2517 00:0627: D4 0B        	pei	<L92+track_0
  2518 00:0629: 22 xx xx xx  	jsl	~~sendbyte
  2519                        ;
  2520                        ;
  2521                        ;	//if (fdc_wait(1))
  2522                        ;	//	res = 1;
  2523                        ;
  2524                        ;	do
  2525                        	.line	485
  2526                        L10029:
  2527                        ;	{
  2528                        	.line	486
  2529                        ;		sts = FDD_MAIN_STATUS[0];
  2530                        	.line	487
  2531 00:062D: E2 20        	sep	#$20
  2532                        	longa	off
  2533 00:062F: AF F4 13 AF  	lda	>11473908
  2534 00:0633: 85 05        	sta	<L93+sts_1
  2535 00:0635: C2 20        	rep	#$20
  2536                        	longa	on
  2537                        ;		k_debug_bits("floppy_seek:sts:", sts);
  2538                        	.line	488
  2539 00:0637: D4 05        	pei	<L93+sts_1
  2540 00:0639: F4 xx xx     	pea	#^L91+16
  2541 00:063C: F4 xx xx     	pea	#<L91+16
  2542 00:063F: 22 xx xx xx  	jsl	~~k_debug_bits
  2543                        ;		if(sts & MSR_DIO)
  Thu Dec  3 2020 22:25                                                Page 49


  2544                        	.line	489
  2545                        ;		{
  2546 00:0643: E2 20        	sep	#$20
  2547                        	longa	off
  2548 00:0645: A5 05        	lda	<L93+sts_1
  2549 00:0647: 29 40        	and	#<$40
  2550 00:0649: C2 20        	rep	#$20
  2551                        	longa	on
  2552 00:064B: D0 03        	bne	L95
  2553 00:064D: 82 0F 00     	brl	L10030
  2554                        L95:
  2555                        	.line	490
  2556                        ;			k_debug_hex("floppy_seek:data:",
                     inportb(FDC_DATA));
  2557                        	.line	491
  2558 00:0650: AF F5 13 AF  	lda	>11473909
  2559 00:0654: 48           	pha
  2560 00:0655: F4 xx xx     	pea	#^L91+33
  2561 00:0658: F4 xx xx     	pea	#<L91+33
  2562 00:065B: 22 xx xx xx  	jsl	~~k_debug_hex
  2563                        ;		}
  2564                        	.line	492
  2565                        ;	}while(sts & MSR_CB);
  2566                        L10030:
  2567                        	.line	493
  2568                        L10027:
  2569 00:065F: E2 20        	sep	#$20
  2570                        	longa	off
  2571 00:0661: A5 05        	lda	<L93+sts_1
  2572 00:0663: 29 10        	and	#<$10
  2573 00:0665: C2 20        	rep	#$20
  2574                        	longa	on
  2575 00:0667: F0 03        	beq	L96
  2576 00:0669: 82 C1 FF     	brl	L10029
  2577                        L96:
  2578                        L10028:
  2579                        ;
  2580                        ;	//usleep(15 * MS);
  2581                        ;	sleep(15);
  2582                        	.line	496
  2583 00:066C: F4 0F 00     	pea	#<$f
  2584 00:066F: 22 xx xx xx  	jsl	~~sleep
  2585                        ;
  2586                        ;	motor_off();
  2587                        	.line	498
  2588 00:0673: 22 xx xx xx  	jsl	~~motor_off
  2589                        ;
  2590                        ;	k_debug_bits("floppy_seek:stsA:", FDD_STATUS_A[0
                    ]);
  2591                        	.line	500
  2592 00:0677: AF F0 13 AF  	lda	>11473904
  2593 00:067B: 48           	pha
  2594 00:067C: F4 xx xx     	pea	#^L91+51
  2595 00:067F: F4 xx xx     	pea	#<L91+51
  2596 00:0682: 22 xx xx xx  	jsl	~~k_debug_bits
  2597                        ;	k_debug_bits("floppy_seek:stsB:", FDD_STATUS_B[0
                    ]);
  2598                        	.line	501
  Thu Dec  3 2020 22:25                                                Page 50


  2599 00:0686: AF F1 13 AF  	lda	>11473905
  2600 00:068A: 48           	pha
  2601 00:068B: F4 xx xx     	pea	#^L91+69
  2602 00:068E: F4 xx xx     	pea	#<L91+69
  2603 00:0691: 22 xx xx xx  	jsl	~~k_debug_bits
  2604                        ;
  2605                        ;
  2606                        ;
  2607                        ;	res = !(FDD_STATUS_A[0] & FDD_ST1_DATTA_ERROR);
  2608                        	.line	505
  2609 00:0695: 64 01        	stz	<R0
  2610 00:0697: E2 20        	sep	#$20
  2611                        	longa	off
  2612 00:0699: AF F0 13 AF  	lda	>11473904
  2613 00:069D: 29 20        	and	#<$20
  2614 00:069F: C2 20        	rep	#$20
  2615                        	longa	on
  2616 00:06A1: F0 03        	beq	L98
  2617 00:06A3: 82 02 00     	brl	L97
  2618                        L98:
  2619 00:06A6: E6 01        	inc	<R0
  2620                        L97:
  2621 00:06A8: A5 01        	lda	<R0
  2622 00:06AA: 85 06        	sta	<L93+res_1
  2623                        ;
  2624                        ;
  2625                        ;	k_debug_integer("floppy_seek:res:", res);
  2626                        	.line	508
  2627 00:06AC: D4 06        	pei	<L93+res_1
  2628 00:06AE: F4 xx xx     	pea	#^L91+87
  2629 00:06B1: F4 xx xx     	pea	#<L91+87
  2630 00:06B4: 22 xx xx xx  	jsl	~~k_debug_integer
  2631                        ;
  2632                        ;	return res;
  2633                        	.line	510
  2634 00:06B8: A5 06        	lda	<L93+res_1
  2635                        L99:
  2636 00:06BA: A8           	tay
  2637 00:06BB: A5 09        	lda	<L92+2
  2638 00:06BD: 85 0B        	sta	<L92+2+2
  2639 00:06BF: A5 08        	lda	<L92+1
  2640 00:06C1: 85 0A        	sta	<L92+1+2
  2641 00:06C3: 2B           	pld
  2642 00:06C4: 3B           	tsc
  2643 00:06C5: 18           	clc
  2644 00:06C6: 69 09 00     	adc	#L92+2
  2645 00:06C9: 1B           	tcs
  2646 00:06CA: 98           	tya
  2647 00:06CB: 6B           	rtl
  2648                        ;
  2649                        ;	//if (!(reg_sr0 & 0x20) || (drives[cur_drive].tr
                    ack != track))
  2650                        ;	//	return 1;
  2651                        ;	//else
  2652                        ;	//	return res;
  2653                        ;}
  2654                        	.line	516
  2655                        	.endblock	516
  Thu Dec  3 2020 22:25                                                Page 51


  2656             00000007   L92	equ	7
  2657             00000005   L93	equ	5
  2658                        	ends
  2659                        	efunc
  2660                        	.endfunc	516,5,7
  2661                        	.line	516
  2662                        	data
  2663                        L91:
  2664 00:010C: 66 6C 6F 70  	db	$66,$6C,$6F,$70,$70,$79,$5F,$73,$65,$65,
                    $6B,$3A,$63,$79,$3A
       00:0110: 70 79 5F 73 
       00:0114: 65 65 6B 3A 
       00:0118: 63 79 3A 
  2665 00:011B: 00 66 6C 6F  	db	$00,$66,$6C,$6F,$70,$70,$79,$5F,$73,$65,
                    $65,$6B,$3A,$73,$74
       00:011F: 70 70 79 5F 
       00:0123: 73 65 65 6B 
       00:0127: 3A 73 74 
  2666 00:012A: 73 3A 00 66  	db	$73,$3A,$00,$66,$6C,$6F,$70,$70,$79,$5F,
                    $73,$65,$65,$6B,$3A
       00:012E: 6C 6F 70 70 
       00:0132: 79 5F 73 65 
       00:0136: 65 6B 3A 
  2667 00:0139: 64 61 74 61  	db	$64,$61,$74,$61,$3A,$00,$66,$6C,$6F,$70,
                    $70,$79,$5F,$73,$65
       00:013D: 3A 00 66 6C 
       00:0141: 6F 70 70 79 
       00:0145: 5F 73 65 
  2668 00:0148: 65 6B 3A 73  	db	$65,$6B,$3A,$73,$74,$73,$41,$3A,$00,$66,
                    $6C,$6F,$70,$70,$79
       00:014C: 74 73 41 3A 
       00:0150: 00 66 6C 6F 
       00:0154: 70 70 79 
  2669 00:0157: 5F 73 65 65  	db	$5F,$73,$65,$65,$6B,$3A,$73,$74,$73,$42,
                    $3A,$00,$66,$6C,$6F
       00:015B: 6B 3A 73 74 
       00:015F: 73 42 3A 00 
       00:0163: 66 6C 6F 
  2670 00:0166: 70 70 79 5F  	db	$70,$70,$79,$5F,$73,$65,$65,$6B,$3A,$72,
                    $65,$73,$3A,$00
       00:016A: 73 65 65 6B 
       00:016E: 3A 72 65 73 
       00:0172: 3A 00 
  2671 00:0174:              	ends
  2672                        ;
  2673                        ;int floppy_present()
  2674                        ;{
  2675                        	.line	518
  2676                        	.line	519
  2677                        	code
  2678                        	xdef	~~floppy_present
  2679                        	func
  2680                        	.function	519
  2681                        ~~floppy_present:
  2682                        	longa	on
  2683                        	longi	on
  2684 00:06CC: 3B           	tsc
  2685 00:06CD: 38           	sec
  Thu Dec  3 2020 22:25                                                Page 52


  2686 00:06CE: E9 07 00     	sbc	#L101
  2687 00:06D1: 1B           	tcs
  2688 00:06D2: 0B           	phd
  2689 00:06D3: 5B           	tcd
  2690                        	.block	519
  2691                        ;	int retCode = 0;
  2692                        ;	UCHAR dir = inportb(FDC_DIR);
  2693                        ;	if (dir & DIR_DC)
  2694             00000000   retCode_1	set	0
  2695             00000002   dir_1	set	2
  2696                        	.sym	retCode,0,5,1,16
  2697                        	.sym	dir,2,14,1,8
  2698 00:06D4: 64 05        	stz	<L102+retCode_1
  2699 00:06D6: E2 20        	sep	#$20
  2700                        	longa	off
  2701 00:06D8: AF F7 13 AF  	lda	>11473911
  2702 00:06DC: 85 07        	sta	<L102+dir_1
  2703 00:06DE: C2 20        	rep	#$20
  2704                        	longa	on
  2705                        	.line	522
  2706                        ;	{
  2707 00:06E0: E2 20        	sep	#$20
  2708                        	longa	off
  2709 00:06E2: A5 07        	lda	<L102+dir_1
  2710 00:06E4: 29 80        	and	#<$80
  2711 00:06E6: C2 20        	rep	#$20
  2712                        	longa	on
  2713 00:06E8: D0 03        	bne	L104
  2714 00:06EA: 82 0E 00     	brl	L10031
  2715                        L104:
  2716                        	.line	523
  2717                        ;		floppy_seek(79);
  2718                        	.line	524
  2719 00:06ED: F4 4F 00     	pea	#<$4f
  2720 00:06F0: 22 xx xx xx  	jsl	~~floppy_seek
  2721                        ;		floppy_seek(0);
  2722                        	.line	525
  2723 00:06F4: F4 00 00     	pea	#<$0
  2724 00:06F7: 22 xx xx xx  	jsl	~~floppy_seek
  2725                        ;	}
  2726                        	.line	526
  2727                        ;
  2728                        ;	retCode = !(inportb(FDC_DIR) & DIR_DC);
  2729                        L10031:
  2730                        	.line	528
  2731 00:06FB: 64 01        	stz	<R0
  2732 00:06FD: E2 20        	sep	#$20
  2733                        	longa	off
  2734 00:06FF: AF F7 13 AF  	lda	>11473911
  2735 00:0703: 29 80        	and	#<$80
  2736 00:0705: C2 20        	rep	#$20
  2737                        	longa	on
  2738 00:0707: F0 03        	beq	L106
  2739 00:0709: 82 02 00     	brl	L105
  2740                        L106:
  2741 00:070C: E6 01        	inc	<R0
  2742                        L105:
  2743 00:070E: A5 01        	lda	<R0
  Thu Dec  3 2020 22:25                                                Page 53


  2744 00:0710: 85 05        	sta	<L102+retCode_1
  2745                        ;
  2746                        ;	k_debug_bits("floppy_present:retCode:", (UCHAR)r
                    etCode);
  2747                        	.line	530
  2748 00:0712: D4 05        	pei	<L102+retCode_1
  2749 00:0714: F4 xx xx     	pea	#^L100
  2750 00:0717: F4 xx xx     	pea	#<L100
  2751 00:071A: 22 xx xx xx  	jsl	~~k_debug_bits
  2752                        ;
  2753                        ;	return retCode;
  2754                        	.line	532
  2755 00:071E: A5 05        	lda	<L102+retCode_1
  2756                        L107:
  2757 00:0720: A8           	tay
  2758 00:0721: 2B           	pld
  2759 00:0722: 3B           	tsc
  2760 00:0723: 18           	clc
  2761 00:0724: 69 07 00     	adc	#L101
  2762 00:0727: 1B           	tcs
  2763 00:0728: 98           	tya
  2764 00:0729: 6B           	rtl
  2765                        ;}
  2766                        	.line	533
  2767                        	.endblock	533
  2768             00000007   L101	equ	7
  2769             00000005   L102	equ	5
  2770                        	ends
  2771                        	efunc
  2772                        	.endfunc	533,5,7
  2773                        	.line	533
  2774                        	data
  2775                        L100:
  2776 00:0174: 66 6C 6F 70  	db	$66,$6C,$6F,$70,$70,$79,$5F,$70,$72,$65,
                    $73,$65,$6E,$74,$3A
       00:0178: 70 79 5F 70 
       00:017C: 72 65 73 65 
       00:0180: 6E 74 3A 
  2777 00:0183: 72 65 74 43  	db	$72,$65,$74,$43,$6F,$64,$65,$3A,$00
       00:0187: 6F 64 65 3A 
       00:018B: 00 
  2778 00:018C:              	ends
  2779                        ;
  2780                        ;static int floppy_transfer_try1(UCHAR* buf, int d
                    o_write, UINT c,UINT h, UINT s)
  2781                        ;{
  2782                        	.line	535
  2783                        	.line	536
  2784                        	code
  2785                        	func
  2786                        	.function	536
  2787                        ~~floppy_transfer_try1:
  2788                        	longa	on
  2789                        	longi	on
  2790 00:072A: 3B           	tsc
  2791 00:072B: 38           	sec
  2792 00:072C: E9 0D 00     	sbc	#L109
  2793 00:072F: 1B           	tcs
  Thu Dec  3 2020 22:25                                                Page 54


  2794 00:0730: 0B           	phd
  2795 00:0731: 5B           	tcd
  2796             00000004   buf_0	set	4
  2797             00000008   do_write_0	set	8
  2798             0000000A   c_0	set	10
  2799             0000000C   h_0	set	12
  2800             0000000E   s_0	set	14
  2801                        	.block	536
  2802                        ;	int i = 0;
  2803                        ;	UCHAR msr = 0;
  2804                        ;	UCHAR cmd = do_write ? CMD_WRITE : CMD_READ;
  2805                        ;	//UCHAR cmd = do_write ? CMD_WRITE : 0xE6;
  2806                        ;	BOOL retCode = FALSE;
  2807                        ;
  2808                        ;	k_debug_integer("floppy_transfer_try:",cur_drive
                    );
  2809             00000000   i_1	set	0
  2810             00000002   msr_1	set	2
  2811             00000003   cmd_1	set	3
  2812             00000004   retCode_1	set	4
  2813                        	.sym	i,0,5,1,16
  2814                        	.sym	msr,2,14,1,8
  2815                        	.sym	cmd,3,14,1,8
  2816                        	.sym	retCode,4,14,1,8
  2817                        	.sym	buf,4,142,6,32
  2818                        	.sym	do_write,8,5,6,16
  2819                        	.sym	c,10,16,6,16
  2820                        	.sym	h,12,16,6,16
  2821                        	.sym	s,14,16,6,16
  2822 00:0732: 64 09        	stz	<L110+i_1
  2823 00:0734: E2 20        	sep	#$20
  2824                        	longa	off
  2825 00:0736: 64 0B        	stz	<L110+msr_1
  2826 00:0738: C2 20        	rep	#$20
  2827                        	longa	on
  2828 00:073A: A5 15        	lda	<L109+do_write_0
  2829 00:073C: D0 03        	bne	L113
  2830 00:073E: 82 05 00     	brl	L112
  2831                        L113:
  2832 00:0741: A9 45 00     	lda	#$45
  2833 00:0744: 80 03        	bra	L114
  2834                        L112:
  2835 00:0746: A9 46 00     	lda	#$46
  2836                        L114:
  2837 00:0749: 85 01        	sta	<R0
  2838 00:074B: E2 20        	sep	#$20
  2839                        	longa	off
  2840 00:074D: A5 01        	lda	<R0
  2841 00:074F: 85 0C        	sta	<L110+cmd_1
  2842 00:0751: C2 20        	rep	#$20
  2843                        	longa	on
  2844 00:0753: E2 20        	sep	#$20
  2845                        	longa	off
  2846 00:0755: 64 0D        	stz	<L110+retCode_1
  2847 00:0757: C2 20        	rep	#$20
  2848                        	longa	on
  2849                        	.line	543
  2850 00:0759: AD xx xx     	lda	|~~cur_drive
  Thu Dec  3 2020 22:25                                                Page 55


  2851 00:075C: 29 FF 00     	and	#$ff
  2852 00:075F: 48           	pha
  2853 00:0760: F4 xx xx     	pea	#^L108
  2854 00:0763: F4 xx xx     	pea	#<L108
  2855 00:0766: 22 xx xx xx  	jsl	~~k_debug_integer
  2856                        ;	k_debug_integer("floppy_transfer_try:track:",c);
  2857                        	.line	544
  2858 00:076A: D4 17        	pei	<L109+c_0
  2859 00:076C: F4 xx xx     	pea	#^L108+21
  2860 00:076F: F4 xx xx     	pea	#<L108+21
  2861 00:0772: 22 xx xx xx  	jsl	~~k_debug_integer
  2862                        ;	k_debug_integer("floppy_transfer_try:head:",h);
  2863                        	.line	545
  2864 00:0776: D4 19        	pei	<L109+h_0
  2865 00:0778: F4 xx xx     	pea	#^L108+48
  2866 00:077B: F4 xx xx     	pea	#<L108+48
  2867 00:077E: 22 xx xx xx  	jsl	~~k_debug_integer
  2868                        ;	k_debug_integer("floppy_transfer_try:sector:",s)
                    ;
  2869                        	.line	546
  2870 00:0782: D4 1B        	pei	<L109+s_0
  2871 00:0784: F4 xx xx     	pea	#^L108+74
  2872 00:0787: F4 xx xx     	pea	#<L108+74
  2873 00:078A: 22 xx xx xx  	jsl	~~k_debug_integer
  2874                        ;
  2875                        ;
  2876                        ;	//floppy_seek(c);
  2877                        ;
  2878                        ;
  2879                        ;	k_debug_string("floppy_transfer_try:READING NOW!
                    \r\n");
  2880                        	.line	552
  2881 00:078E: F4 xx xx     	pea	#^L108+102
  2882 00:0791: F4 xx xx     	pea	#<L108+102
  2883 00:0794: 22 xx xx xx  	jsl	~~k_debug_string
  2884                        ;
  2885                        ;	sendbyte(cmd);
  2886                        	.line	554
  2887 00:0798: D4 0C        	pei	<L110+cmd_1
  2888 00:079A: 22 xx xx xx  	jsl	~~sendbyte
  2889                        ;	sendbyte((UCHAR) ((h << 2) | cur_drive));
  2890                        	.line	555
  2891 00:079E: A5 19        	lda	<L109+h_0
  2892 00:07A0: 0A           	asl	A
  2893 00:07A1: 0A           	asl	A
  2894 00:07A2: 85 01        	sta	<R0
  2895 00:07A4: AD xx xx     	lda	|~~cur_drive
  2896 00:07A7: 29 FF 00     	and	#$ff
  2897 00:07AA: 85 05        	sta	<R1
  2898 00:07AC: A5 05        	lda	<R1
  2899 00:07AE: 05 01        	ora	<R0
  2900 00:07B0: 48           	pha
  2901 00:07B1: 22 xx xx xx  	jsl	~~sendbyte
  2902                        ;	//sendbyte((UCHAR) 0x00);
  2903                        ;	sendbyte((UCHAR) c);
  2904                        	.line	557
  2905 00:07B5: D4 17        	pei	<L109+c_0
  2906 00:07B7: 22 xx xx xx  	jsl	~~sendbyte
  Thu Dec  3 2020 22:25                                                Page 56


  2907                        ;	sendbyte((UCHAR) h);
  2908                        	.line	558
  2909 00:07BB: D4 19        	pei	<L109+h_0
  2910 00:07BD: 22 xx xx xx  	jsl	~~sendbyte
  2911                        ;	sendbyte((UCHAR) s);
  2912                        	.line	559
  2913 00:07C1: D4 1B        	pei	<L109+s_0
  2914 00:07C3: 22 xx xx xx  	jsl	~~sendbyte
  2915                        ;	sendbyte(0x2);
  2916                        	.line	560
  2917 00:07C7: F4 02 00     	pea	#<$2
  2918 00:07CA: 22 xx xx xx  	jsl	~~sendbyte
  2919                        ;	sendbyte((UCHAR) SEC_PER_TRACK);
  2920                        	.line	561
  2921 00:07CE: F4 12 00     	pea	#<$12
  2922 00:07D1: 22 xx xx xx  	jsl	~~sendbyte
  2923                        ;	sendbyte(0x1b);
  2924                        	.line	562
  2925 00:07D5: F4 1B 00     	pea	#<$1b
  2926 00:07D8: 22 xx xx xx  	jsl	~~sendbyte
  2927                        ;	sendbyte(0xff);
  2928                        	.line	563
  2929 00:07DC: F4 FF 00     	pea	#<$ff
  2930 00:07DF: 22 xx xx xx  	jsl	~~sendbyte
  2931                        ;
  2932                        ;	//if (fdc_waitint())
  2933                        ;//		return -1;
  2934                        ;	sleep(DRIVE_H1440_SPINUP);
  2935                        	.line	567
  2936 00:07E3: F4 90 01     	pea	#<$190
  2937 00:07E6: 22 xx xx xx  	jsl	~~sleep
  2938                        ;
  2939                        ;
  2940                        ;	//fdc_waitint();
  2941                        ;
  2942                        ;	/*
  2943                        ;	do
  2944                        ;	{
  2945                        ;		msr = inportb(FDC_MSR);
  2946                        ;		//k_debug_bits("floppy_transfer_try1:msr
                    :",msr);
  2947                        ;		if(msr & (MSR_RQM |  MSR_DIO))
  2948                        ;			break;
  2949                        ;		//k_debug_integer("floppy_transfer_try:f
                    loppybufferIndex:",floppybufferIndex);
  2950                        ;		if(floppybufferIndex>0)
  2951                        ;			k_debug_hex("floppy_transfer_try
                    :floppybufferIndex:data:",floppybuffer[floppybufferIndex - 1
                    ]);
  2952                        ;	}while(msr & MSR_CB);
  2953                        ;	*/
  2954                        ;	//for (i = 0; i < SECTOR_SIZE && (msr & MSR_NDMA
                    ); i++)
  2955                        ;
  2956                        ;	/*
  2957                        ;	for (i = 0; i < SECTOR_SIZE; i++)
  2958                        ;	{
  2959                        ;		if (do_write)
  Thu Dec  3 2020 22:25                                                Page 57


  2960                        ;			sendbyte(buf[i]);
  2961                        ;		else
  2962                        ;		{
  2963                        ;			buf[i] = getbyte();
  2964                        ;
  2965                        ;			if(buf[i]!=0xFF)
  2966                        ;				k_debug_hex("READ:", buf
                    [i]);
  2967                        ;		}
  2968                        ;	}
  2969                        ;	*/
  2970                        ;
  2971                        ;	for (i = 0; i < SECTOR_SIZE; i++)
  2972                        	.line	601
  2973 00:07EA: 64 09        	stz	<L110+i_1
  2974                        L10034:
  2975                        ;	{
  2976                        	.line	602
  2977                        ;		msr = inportb(FDC_MSR);
  2978                        	.line	603
  2979 00:07EC: E2 20        	sep	#$20
  2980                        	longa	off
  2981 00:07EE: AF F4 13 AF  	lda	>11473908
  2982 00:07F2: 85 0B        	sta	<L110+msr_1
  2983 00:07F4: C2 20        	rep	#$20
  2984                        	longa	on
  2985                        ;		//k_debug_bits("floppy_transfer_try1:msr
                    :",msr);
  2986                        ;		if(msr & (MSR_RQM |  MSR_DIO))
  2987                        	.line	605
  2988                        ;			break;
  2989 00:07F6: E2 20        	sep	#$20
  2990                        	longa	off
  2991 00:07F8: A5 0B        	lda	<L110+msr_1
  2992 00:07FA: 29 C0        	and	#<$c0
  2993 00:07FC: C2 20        	rep	#$20
  2994                        	longa	on
  2995 00:07FE: F0 03        	beq	L115
  2996 00:0800: 82 1E 00     	brl	L10033
  2997                        L115:
  2998                        ;		//k_debug_integer("floppy_transfer_try:f
                    loppybufferIndex:",floppybufferIndex);
  2999                        ;		buf[i] = getbyte();
  3000                        	.line	608
  3001 00:0803: 22 xx xx xx  	jsl	~~getbyte
  3002 00:0807: E2 20        	sep	#$20
  3003                        	longa	off
  3004 00:0809: A4 09        	ldy	<L110+i_1
  3005 00:080B: 97 11        	sta	[<L109+buf_0],Y
  3006 00:080D: C2 20        	rep	#$20
  3007                        	longa	on
  3008                        ;
  3009                        ;	}
  3010                        	.line	610
  3011                        L10032:
  3012 00:080F: E6 09        	inc	<L110+i_1
  3013 00:0811: 38           	sec
  3014 00:0812: A5 09        	lda	<L110+i_1
  Thu Dec  3 2020 22:25                                                Page 58


  3015 00:0814: E9 00 02     	sbc	#<$200
  3016 00:0817: 70 03        	bvs	L116
  3017 00:0819: 49 00 80     	eor	#$8000
  3018                        L116:
  3019 00:081C: 30 03        	bmi	L117
  3020 00:081E: 82 CB FF     	brl	L10034
  3021                        L117:
  3022                        L10033:
  3023                        ;
  3024                        ;	k_debug_byte_array("DATA:\r\n",buf,512);
  3025                        	.line	612
  3026 00:0821: F4 00 00     	pea	#^$200
  3027 00:0824: F4 00 02     	pea	#<$200
  3028 00:0827: D4 13        	pei	<L109+buf_0+2
  3029 00:0829: D4 11        	pei	<L109+buf_0
  3030 00:082B: F4 xx xx     	pea	#^L108+137
  3031 00:082E: F4 xx xx     	pea	#<L108+137
  3032 00:0831: 22 xx xx xx  	jsl	~~k_debug_byte_array
  3033                        ;/*
  3034                        ;	for (i = 0; i < SECTOR_SIZE; i++)
  3035                        ;	{
  3036                        ;		buf[i] = inportb(FDC_DATA);
  3037                        ;		while(!(MSR_DIO & inportb(FDC_MSR)))
  3038                        ;			k_debug_bits("floppy_transfer_tr
                    y1:read:msr:",msr);
  3039                        ;	}
  3040                        ;
  3041                        ;
  3042                        ;	/*
  3043                        ;	do
  3044                        ;	{
  3045                        ;		msr = inportb(FDC_MSR);
  3046                        ;		k_debug_bits("floppy_transfer_try1:msr:"
                    ,msr);
  3047                        ;		buf[i] = inportb(FDC_DATA);
  3048                        ;		if(i < 511)
  3049                        ;			i++;
  3050                        ;	}while(msr & MSR_DIO);
  3051                        ;	*/
  3052                        ;
  3053                        ;
  3054                        ;	reg_sr0 = getbyte();
  3055                        	.line	634
  3056 00:0835: 22 xx xx xx  	jsl	~~getbyte
  3057 00:0839: E2 20        	sep	#$20
  3058                        	longa	off
  3059 00:083B: 8D xx xx     	sta	|~~reg_sr0
  3060 00:083E: C2 20        	rep	#$20
  3061                        	longa	on
  3062                        ;	k_debug_bits("floppy_transfer_try1:reg_sr0:msr:"
                    ,reg_sr0);
  3063                        	.line	635
  3064 00:0840: AD xx xx     	lda	|~~reg_sr0
  3065 00:0843: 48           	pha
  3066 00:0844: F4 xx xx     	pea	#^L108+145
  3067 00:0847: F4 xx xx     	pea	#<L108+145
  3068 00:084A: 22 xx xx xx  	jsl	~~k_debug_bits
  3069                        ;	reg_sr1 = getbyte();
  Thu Dec  3 2020 22:25                                                Page 59


  3070                        	.line	636
  3071 00:084E: 22 xx xx xx  	jsl	~~getbyte
  3072 00:0852: E2 20        	sep	#$20
  3073                        	longa	off
  3074 00:0854: 8D xx xx     	sta	|~~reg_sr1
  3075 00:0857: C2 20        	rep	#$20
  3076                        	longa	on
  3077                        ;	k_debug_bits("floppy_transfer_try1:reg_sr1:msr:"
                    ,reg_sr1);
  3078                        	.line	637
  3079 00:0859: AD xx xx     	lda	|~~reg_sr1
  3080 00:085C: 48           	pha
  3081 00:085D: F4 xx xx     	pea	#^L108+179
  3082 00:0860: F4 xx xx     	pea	#<L108+179
  3083 00:0863: 22 xx xx xx  	jsl	~~k_debug_bits
  3084                        ;	reg_sr2 = getbyte();
  3085                        	.line	638
  3086 00:0867: 22 xx xx xx  	jsl	~~getbyte
  3087 00:086B: E2 20        	sep	#$20
  3088                        	longa	off
  3089 00:086D: 8D xx xx     	sta	|~~reg_sr2
  3090 00:0870: C2 20        	rep	#$20
  3091                        	longa	on
  3092                        ;	k_debug_bits("floppy_transfer_try1:reg_sr2:msr:"
                    ,reg_sr2);
  3093                        	.line	639
  3094 00:0872: AD xx xx     	lda	|~~reg_sr2
  3095 00:0875: 48           	pha
  3096 00:0876: F4 xx xx     	pea	#^L108+213
  3097 00:0879: F4 xx xx     	pea	#<L108+213
  3098 00:087C: 22 xx xx xx  	jsl	~~k_debug_bits
  3099                        ;	drives[cur_drive].track = getbyte();
  3100                        	.line	640
  3101 00:0880: AD xx xx     	lda	|~~cur_drive
  3102 00:0883: 29 FF 00     	and	#$ff
  3103 00:0886: 85 01        	sta	<R0
  3104 00:0888: A5 01        	lda	<R0
  3105 00:088A: 0A           	asl	A
  3106 00:088B: 65 01        	adc	<R0
  3107 00:088D: 0A           	asl	A
  3108 00:088E: 85 01        	sta	<R0
  3109 00:0890: 22 xx xx xx  	jsl	~~getbyte
  3110 00:0894: A6 01        	ldx	<R0
  3111 00:0896: 9D xx xx     	sta	|~~drives,X
  3112                        ;
  3113                        ;	//k_debug_integer("floppy_transfer_try:drives[cu
                    r_drive].track:",drives[cur_drive].track);
  3114                        ;
  3115                        ;	i = getbyte();
  3116                        	.line	644
  3117 00:0899: 22 xx xx xx  	jsl	~~getbyte
  3118 00:089D: 85 09        	sta	<L110+i_1
  3119                        ;	k_debug_bits("floppy_transfer_try1:1:c:",i);
  3120                        	.line	645
  3121 00:089F: D4 09        	pei	<L110+i_1
  3122 00:08A1: F4 xx xx     	pea	#^L108+247
  3123 00:08A4: F4 xx xx     	pea	#<L108+247
  3124 00:08A7: 22 xx xx xx  	jsl	~~k_debug_bits
  Thu Dec  3 2020 22:25                                                Page 60


  3125                        ;	//k_debug_integer("floppy_transfer_try:i1:",i);
  3126                        ;	i = getbyte();
  3127                        	.line	647
  3128 00:08AB: 22 xx xx xx  	jsl	~~getbyte
  3129 00:08AF: 85 09        	sta	<L110+i_1
  3130                        ;	k_debug_bits("floppy_transfer_try1:2:h:",i);
  3131                        	.line	648
  3132 00:08B1: D4 09        	pei	<L110+i_1
  3133 00:08B3: F4 xx xx     	pea	#^L108+273
  3134 00:08B6: F4 xx xx     	pea	#<L108+273
  3135 00:08B9: 22 xx xx xx  	jsl	~~k_debug_bits
  3136                        ;	//k_debug_integer("floppy_transfer_try:i2:",i);
  3137                        ;	i = getbyte();
  3138                        	.line	650
  3139 00:08BD: 22 xx xx xx  	jsl	~~getbyte
  3140 00:08C1: 85 09        	sta	<L110+i_1
  3141                        ;	k_debug_bits("floppy_transfer_try1:3:r:",i);
  3142                        	.line	651
  3143 00:08C3: D4 09        	pei	<L110+i_1
  3144 00:08C5: F4 xx xx     	pea	#^L108+299
  3145 00:08C8: F4 xx xx     	pea	#<L108+299
  3146 00:08CB: 22 xx xx xx  	jsl	~~k_debug_bits
  3147                        ;	//k_debug_integer("floppy_transfer_try:i3:",i);
  3148                        ;	i = getbyte();
  3149                        	.line	653
  3150 00:08CF: 22 xx xx xx  	jsl	~~getbyte
  3151 00:08D3: 85 09        	sta	<L110+i_1
  3152                        ;	k_debug_bits("floppy_transfer_try1:3:n:",i);
  3153                        	.line	654
  3154 00:08D5: D4 09        	pei	<L110+i_1
  3155 00:08D7: F4 xx xx     	pea	#^L108+325
  3156 00:08DA: F4 xx xx     	pea	#<L108+325
  3157 00:08DD: 22 xx xx xx  	jsl	~~k_debug_bits
  3158                        ;	//k_debug_integer("floppy_transfer_try:i3:",i);
  3159                        ;
  3160                        ;	k_debug_integer("floppy_transfer_try:floppybuffe
                    rIndex:",floppybufferIndex);
  3161                        	.line	657
  3162 00:08E1: AD xx xx     	lda	|~~floppybufferIndex
  3163 00:08E4: 48           	pha
  3164 00:08E5: F4 xx xx     	pea	#^L108+351
  3165 00:08E8: F4 xx xx     	pea	#<L108+351
  3166 00:08EB: 22 xx xx xx  	jsl	~~k_debug_integer
  3167                        ;	//return i != 2;
  3168                        ;
  3169                        ;	retCode = (i != 2);
  3170                        	.line	660
  3171 00:08EF: 64 01        	stz	<R0
  3172 00:08F1: A5 09        	lda	<L110+i_1
  3173 00:08F3: C9 02 00     	cmp	#<$2
  3174 00:08F6: D0 03        	bne	L119
  3175 00:08F8: 82 02 00     	brl	L118
  3176                        L119:
  3177 00:08FB: E6 01        	inc	<R0
  3178                        L118:
  3179 00:08FD: E2 20        	sep	#$20
  3180                        	longa	off
  3181 00:08FF: A5 01        	lda	<R0
  Thu Dec  3 2020 22:25                                                Page 61


  3182 00:0901: 85 0D        	sta	<L110+retCode_1
  3183 00:0903: C2 20        	rep	#$20
  3184                        	longa	on
  3185                        ;
  3186                        ;	return retCode;
  3187                        	.line	662
  3188 00:0905: A5 0D        	lda	<L110+retCode_1
  3189 00:0907: 29 FF 00     	and	#$ff
  3190                        L120:
  3191 00:090A: A8           	tay
  3192 00:090B: A5 0F        	lda	<L109+2
  3193 00:090D: 85 1B        	sta	<L109+2+12
  3194 00:090F: A5 0E        	lda	<L109+1
  3195 00:0911: 85 1A        	sta	<L109+1+12
  3196 00:0913: 2B           	pld
  3197 00:0914: 3B           	tsc
  3198 00:0915: 18           	clc
  3199 00:0916: 69 19 00     	adc	#L109+12
  3200 00:0919: 1B           	tcs
  3201 00:091A: 98           	tya
  3202 00:091B: 6B           	rtl
  3203                        ;}
  3204                        	.line	663
  3205                        	.endblock	663
  3206             0000000D   L109	equ	13
  3207             00000009   L110	equ	9
  3208                        	ends
  3209                        	efunc
  3210                        	.endfunc	663,9,13
  3211                        	.line	663
  3212                        	data
  3213                        L108:
  3214 00:018C: 66 6C 6F 70  	db	$66,$6C,$6F,$70,$70,$79,$5F,$74,$72,$61,
                    $6E,$73,$66,$65,$72
       00:0190: 70 79 5F 74 
       00:0194: 72 61 6E 73 
       00:0198: 66 65 72 
  3215 00:019B: 5F 74 72 79  	db	$5F,$74,$72,$79,$3A,$00,$66,$6C,$6F,$70,
                    $70,$79,$5F,$74,$72
       00:019F: 3A 00 66 6C 
       00:01A3: 6F 70 70 79 
       00:01A7: 5F 74 72 
  3216 00:01AA: 61 6E 73 66  	db	$61,$6E,$73,$66,$65,$72,$5F,$74,$72,$79,
                    $3A,$74,$72,$61,$63
       00:01AE: 65 72 5F 74 
       00:01B2: 72 79 3A 74 
       00:01B6: 72 61 63 
  3217 00:01B9: 6B 3A 00 66  	db	$6B,$3A,$00,$66,$6C,$6F,$70,$70,$79,$5F,
                    $74,$72,$61,$6E,$73
       00:01BD: 6C 6F 70 70 
       00:01C1: 79 5F 74 72 
       00:01C5: 61 6E 73 
  3218 00:01C8: 66 65 72 5F  	db	$66,$65,$72,$5F,$74,$72,$79,$3A,$68,$65,
                    $61,$64,$3A,$00,$66
       00:01CC: 74 72 79 3A 
       00:01D0: 68 65 61 64 
       00:01D4: 3A 00 66 
  3219 00:01D7: 6C 6F 70 70  	db	$6C,$6F,$70,$70,$79,$5F,$74,$72,$61,$6E,
  Thu Dec  3 2020 22:25                                                Page 62


                    $73,$66,$65,$72,$5F
       00:01DB: 79 5F 74 72 
       00:01DF: 61 6E 73 66 
       00:01E3: 65 72 5F 
  3220 00:01E6: 74 72 79 3A  	db	$74,$72,$79,$3A,$73,$65,$63,$74,$6F,$72,
                    $3A,$00,$66,$6C,$6F
       00:01EA: 73 65 63 74 
       00:01EE: 6F 72 3A 00 
       00:01F2: 66 6C 6F 
  3221 00:01F5: 70 70 79 5F  	db	$70,$70,$79,$5F,$74,$72,$61,$6E,$73,$66,
                    $65,$72,$5F,$74,$72
       00:01F9: 74 72 61 6E 
       00:01FD: 73 66 65 72 
       00:0201: 5F 74 72 
  3222 00:0204: 79 3A 52 45  	db	$79,$3A,$52,$45,$41,$44,$49,$4E,$47,$20,
                    $4E,$4F,$57,$21,$0D
       00:0208: 41 44 49 4E 
       00:020C: 47 20 4E 4F 
       00:0210: 57 21 0D 
  3223 00:0213: 0A 00 44 41  	db	$0A,$00,$44,$41,$54,$41,$3A,$0D,$0A,$00,
                    $66,$6C,$6F,$70,$70
       00:0217: 54 41 3A 0D 
       00:021B: 0A 00 66 6C 
       00:021F: 6F 70 70 
  3224 00:0222: 79 5F 74 72  	db	$79,$5F,$74,$72,$61,$6E,$73,$66,$65,$72,
                    $5F,$74,$72,$79,$31
       00:0226: 61 6E 73 66 
       00:022A: 65 72 5F 74 
       00:022E: 72 79 31 
  3225 00:0231: 3A 72 65 67  	db	$3A,$72,$65,$67,$5F,$73,$72,$30,$3A,$6D,
                    $73,$72,$3A,$00,$66
       00:0235: 5F 73 72 30 
       00:0239: 3A 6D 73 72 
       00:023D: 3A 00 66 
  3226 00:0240: 6C 6F 70 70  	db	$6C,$6F,$70,$70,$79,$5F,$74,$72,$61,$6E,
                    $73,$66,$65,$72,$5F
       00:0244: 79 5F 74 72 
       00:0248: 61 6E 73 66 
       00:024C: 65 72 5F 
  3227 00:024F: 74 72 79 31  	db	$74,$72,$79,$31,$3A,$72,$65,$67,$5F,$73,
                    $72,$31,$3A,$6D,$73
       00:0253: 3A 72 65 67 
       00:0257: 5F 73 72 31 
       00:025B: 3A 6D 73 
  3228 00:025E: 72 3A 00 66  	db	$72,$3A,$00,$66,$6C,$6F,$70,$70,$79,$5F,
                    $74,$72,$61,$6E,$73
       00:0262: 6C 6F 70 70 
       00:0266: 79 5F 74 72 
       00:026A: 61 6E 73 
  3229 00:026D: 66 65 72 5F  	db	$66,$65,$72,$5F,$74,$72,$79,$31,$3A,$72,
                    $65,$67,$5F,$73,$72
       00:0271: 74 72 79 31 
       00:0275: 3A 72 65 67 
       00:0279: 5F 73 72 
  3230 00:027C: 32 3A 6D 73  	db	$32,$3A,$6D,$73,$72,$3A,$00,$66,$6C,$6F,
                    $70,$70,$79,$5F,$74
       00:0280: 72 3A 00 66 
       00:0284: 6C 6F 70 70 
  Thu Dec  3 2020 22:25                                                Page 63


       00:0288: 79 5F 74 
  3231 00:028B: 72 61 6E 73  	db	$72,$61,$6E,$73,$66,$65,$72,$5F,$74,$72,
                    $79,$31,$3A,$31,$3A
       00:028F: 66 65 72 5F 
       00:0293: 74 72 79 31 
       00:0297: 3A 31 3A 
  3232 00:029A: 63 3A 00 66  	db	$63,$3A,$00,$66,$6C,$6F,$70,$70,$79,$5F,
                    $74,$72,$61,$6E,$73
       00:029E: 6C 6F 70 70 
       00:02A2: 79 5F 74 72 
       00:02A6: 61 6E 73 
  3233 00:02A9: 66 65 72 5F  	db	$66,$65,$72,$5F,$74,$72,$79,$31,$3A,$32,
                    $3A,$68,$3A,$00,$66
       00:02AD: 74 72 79 31 
       00:02B1: 3A 32 3A 68 
       00:02B5: 3A 00 66 
  3234 00:02B8: 6C 6F 70 70  	db	$6C,$6F,$70,$70,$79,$5F,$74,$72,$61,$6E,
                    $73,$66,$65,$72,$5F
       00:02BC: 79 5F 74 72 
       00:02C0: 61 6E 73 66 
       00:02C4: 65 72 5F 
  3235 00:02C7: 74 72 79 31  	db	$74,$72,$79,$31,$3A,$33,$3A,$72,$3A,$00,
                    $66,$6C,$6F,$70,$70
       00:02CB: 3A 33 3A 72 
       00:02CF: 3A 00 66 6C 
       00:02D3: 6F 70 70 
  3236 00:02D6: 79 5F 74 72  	db	$79,$5F,$74,$72,$61,$6E,$73,$66,$65,$72,
                    $5F,$74,$72,$79,$31
       00:02DA: 61 6E 73 66 
       00:02DE: 65 72 5F 74 
       00:02E2: 72 79 31 
  3237 00:02E5: 3A 33 3A 6E  	db	$3A,$33,$3A,$6E,$3A,$00,$66,$6C,$6F,$70,
                    $70,$79,$5F,$74,$72
       00:02E9: 3A 00 66 6C 
       00:02ED: 6F 70 70 79 
       00:02F1: 5F 74 72 
  3238 00:02F4: 61 6E 73 66  	db	$61,$6E,$73,$66,$65,$72,$5F,$74,$72,$79,
                    $3A,$66,$6C,$6F,$70
       00:02F8: 65 72 5F 74 
       00:02FC: 72 79 3A 66 
       00:0300: 6C 6F 70 
  3239 00:0303: 70 79 62 75  	db	$70,$79,$62,$75,$66,$66,$65,$72,$49,$6E,
                    $64,$65,$78,$3A,$00
       00:0307: 66 66 65 72 
       00:030B: 49 6E 64 65 
       00:030F: 78 3A 00 
  3240 00:0312:              	ends
  3241                        ;
  3242                        ;void floppy_check_int(UCHAR* st0, UCHAR* cyl)
  3243                        ;{
  3244                        	.line	665
  3245                        	.line	666
  3246                        	code
  3247                        	xdef	~~floppy_check_int
  3248                        	func
  3249                        	.function	666
  3250                        ~~floppy_check_int:
  3251                        	longa	on
  Thu Dec  3 2020 22:25                                                Page 64


  3252                        	longi	on
  3253 00:091C: 3B           	tsc
  3254 00:091D: 38           	sec
  3255 00:091E: E9 00 00     	sbc	#L122
  3256 00:0921: 1B           	tcs
  3257 00:0922: 0B           	phd
  3258 00:0923: 5B           	tcd
  3259             00000004   st0_0	set	4
  3260             00000008   cyl_0	set	8
  3261                        	.block	666
  3262                        ;	k_debug_string("floppy_check_int\r\n");
  3263                        	.sym	st0,4,142,6,32
  3264                        	.sym	cyl,8,142,6,32
  3265                        	.line	667
  3266 00:0924: F4 xx xx     	pea	#^L121
  3267 00:0927: F4 xx xx     	pea	#<L121
  3268 00:092A: 22 xx xx xx  	jsl	~~k_debug_string
  3269                        ;
  3270                        ;	sendbyte(CMD_SENSEI);
  3271                        	.line	669
  3272 00:092E: F4 08 00     	pea	#<$8
  3273 00:0931: 22 xx xx xx  	jsl	~~sendbyte
  3274                        ;
  3275                        ;	*st0 = (UCHAR)getbyte();
  3276                        	.line	671
  3277 00:0935: 22 xx xx xx  	jsl	~~getbyte
  3278 00:0939: E2 20        	sep	#$20
  3279                        	longa	off
  3280 00:093B: 87 04        	sta	[<L122+st0_0]
  3281 00:093D: C2 20        	rep	#$20
  3282                        	longa	on
  3283                        ;	*cyl = (UCHAR)getbyte();
  3284                        	.line	672
  3285 00:093F: 22 xx xx xx  	jsl	~~getbyte
  3286 00:0943: E2 20        	sep	#$20
  3287                        	longa	off
  3288 00:0945: 87 08        	sta	[<L122+cyl_0]
  3289 00:0947: C2 20        	rep	#$20
  3290                        	longa	on
  3291                        ;
  3292                        ;	k_debug_hex("floppy_check_int:st0:", *st0);
  3293                        	.line	674
  3294 00:0949: A7 04        	lda	[<L122+st0_0]
  3295 00:094B: 48           	pha
  3296 00:094C: F4 xx xx     	pea	#^L121+19
  3297 00:094F: F4 xx xx     	pea	#<L121+19
  3298 00:0952: 22 xx xx xx  	jsl	~~k_debug_hex
  3299                        ;	k_debug_hex("floppy_check_int:cyl:", *cyl);
  3300                        	.line	675
  3301 00:0956: A7 08        	lda	[<L122+cyl_0]
  3302 00:0958: 48           	pha
  3303 00:0959: F4 xx xx     	pea	#^L121+41
  3304 00:095C: F4 xx xx     	pea	#<L121+41
  3305 00:095F: 22 xx xx xx  	jsl	~~k_debug_hex
  3306                        ;}
  3307                        	.line	676
  3308                        L125:
  3309 00:0963: A5 02        	lda	<L122+2
  Thu Dec  3 2020 22:25                                                Page 65


  3310 00:0965: 85 0A        	sta	<L122+2+8
  3311 00:0967: A5 01        	lda	<L122+1
  3312 00:0969: 85 09        	sta	<L122+1+8
  3313 00:096B: 2B           	pld
  3314 00:096C: 3B           	tsc
  3315 00:096D: 18           	clc
  3316 00:096E: 69 08 00     	adc	#L122+8
  3317 00:0971: 1B           	tcs
  3318 00:0972: 6B           	rtl
  3319                        	.endblock	676
  3320             00000000   L122	equ	0
  3321             00000001   L123	equ	1
  3322                        	ends
  3323                        	efunc
  3324                        	.endfunc	676,1,0
  3325                        	.line	676
  3326                        	data
  3327                        L121:
  3328 00:0312: 66 6C 6F 70  	db	$66,$6C,$6F,$70,$70,$79,$5F,$63,$68,$65,
                    $63,$6B,$5F,$69,$6E
       00:0316: 70 79 5F 63 
       00:031A: 68 65 63 6B 
       00:031E: 5F 69 6E 
  3329 00:0321: 74 0D 0A 00  	db	$74,$0D,$0A,$00,$66,$6C,$6F,$70,$70,$79,
                    $5F,$63,$68,$65,$63
       00:0325: 66 6C 6F 70 
       00:0329: 70 79 5F 63 
       00:032D: 68 65 63 
  3330 00:0330: 6B 5F 69 6E  	db	$6B,$5F,$69,$6E,$74,$3A,$73,$74,$30,$3A,
                    $00,$66,$6C,$6F,$70
       00:0334: 74 3A 73 74 
       00:0338: 30 3A 00 66 
       00:033C: 6C 6F 70 
  3331 00:033F: 70 79 5F 63  	db	$70,$79,$5F,$63,$68,$65,$63,$6B,$5F,$69,
                    $6E,$74,$3A,$63,$79
       00:0343: 68 65 63 6B 
       00:0347: 5F 69 6E 74 
       00:034B: 3A 63 79 
  3332 00:034E: 6C 3A 00     	db	$6C,$3A,$00
  3333 00:0351:              	ends
  3334                        ;
  3335                        ;static int wait_til_ready(void)
  3336                        ;{
  3337                        	.line	678
  3338                        	.line	679
  3339                        	code
  3340                        	func
  3341                        	.function	679
  3342                        ~~wait_til_ready:
  3343                        	longa	on
  3344                        	longi	on
  3345 00:0973: 3B           	tsc
  3346 00:0974: 38           	sec
  3347 00:0975: E9 04 00     	sbc	#L127
  3348 00:0978: 1B           	tcs
  3349 00:0979: 0B           	phd
  3350 00:097A: 5B           	tcd
  3351                        	.block	679
  Thu Dec  3 2020 22:25                                                Page 66


  3352                        ;	int counter, status;
  3353                        ;	for (counter = 0; counter < 10000; counter++)
  3354             00000000   counter_1	set	0
  3355             00000002   status_1	set	2
  3356                        	.sym	counter,0,5,1,16
  3357                        	.sym	status,2,5,1,16
  3358                        	.line	681
  3359 00:097B: 64 01        	stz	<L128+counter_1
  3360                        L10037:
  3361                        ;	{
  3362                        	.line	682
  3363                        ;		status = getbyte();
  3364                        	.line	683
  3365 00:097D: 22 xx xx xx  	jsl	~~getbyte
  3366 00:0981: 85 03        	sta	<L128+status_1
  3367                        ;		if (status & STATUS_READY)
  3368                        	.line	684
  3369                        ;		{
  3370 00:0983: A5 03        	lda	<L128+status_1
  3371 00:0985: 29 80 00     	and	#<$80
  3372 00:0988: D0 03        	bne	L130
  3373 00:098A: 82 0C 00     	brl	L10038
  3374                        L130:
  3375                        	.line	685
  3376                        ;			return status;
  3377                        	.line	686
  3378 00:098D: A5 03        	lda	<L128+status_1
  3379                        L131:
  3380 00:098F: A8           	tay
  3381 00:0990: 2B           	pld
  3382 00:0991: 3B           	tsc
  3383 00:0992: 18           	clc
  3384 00:0993: 69 04 00     	adc	#L127
  3385 00:0996: 1B           	tcs
  3386 00:0997: 98           	tya
  3387 00:0998: 6B           	rtl
  3388                        ;		}
  3389                        	.line	687
  3390                        ;	}
  3391                        L10038:
  3392                        	.line	688
  3393                        L10035:
  3394 00:0999: E6 01        	inc	<L128+counter_1
  3395 00:099B: 38           	sec
  3396 00:099C: A5 01        	lda	<L128+counter_1
  3397 00:099E: E9 10 27     	sbc	#<$2710
  3398 00:09A1: 70 03        	bvs	L132
  3399 00:09A3: 49 00 80     	eor	#$8000
  3400                        L132:
  3401 00:09A6: 30 03        	bmi	L133
  3402 00:09A8: 82 D2 FF     	brl	L10037
  3403                        L133:
  3404                        L10036:
  3405                        ;
  3406                        ;	return -3;
  3407                        	.line	690
  3408 00:09AB: A9 FD FF     	lda	#$fffd
  3409 00:09AE: 82 DE FF     	brl	L131
  Thu Dec  3 2020 22:25                                                Page 67


  3410                        ;}
  3411                        	.line	691
  3412                        	.endblock	691
  3413             00000004   L127	equ	4
  3414             00000001   L128	equ	1
  3415                        	ends
  3416                        	efunc
  3417                        	.endfunc	691,1,4
  3418                        	.line	691
  3419                        ;
  3420                        ;static int floppy_transfer_try2(UCHAR* buf, int d
                    o_write, UINT c,UINT h, UINT s)
  3421                        ;{
  3422                        	.line	693
  3423                        	.line	694
  3424                        	code
  3425                        	func
  3426                        	.function	694
  3427                        ~~floppy_transfer_try2:
  3428                        	longa	on
  3429                        	longi	on
  3430 00:09B1: 3B           	tsc
  3431 00:09B2: 38           	sec
  3432 00:09B3: E9 18 00     	sbc	#L134
  3433 00:09B6: 1B           	tcs
  3434 00:09B7: 0B           	phd
  3435 00:09B8: 5B           	tcd
  3436             00000004   buf_0	set	4
  3437             00000008   do_write_0	set	8
  3438             0000000A   c_0	set	10
  3439             0000000C   h_0	set	12
  3440             0000000E   s_0	set	14
  3441                        	.block	694
  3442                        ;	UCHAR st, cyl;
  3443                        ;	int i = 0;
  3444                        ;	UINT max_bytes = 512;
  3445                        ;	UCHAR msr = 0;
  3446                        ;	UCHAR st0 = 0;
  3447                        ;	UCHAR cmd = do_write ? CMD_WRITE : CMD_READ;
  3448                        ;	unsigned char byte;
  3449                        ;	int status;
  3450                        ;	int bytes_read;
  3451                        ;	int result;
  3452                        ;
  3453                        ;	motor_on();
  3454             00000000   st_1	set	0
  3455             00000001   cyl_1	set	1
  3456             00000002   i_1	set	2
  3457             00000004   max_bytes_1	set	4
  3458             00000006   msr_1	set	6
  3459             00000007   st0_1	set	7
  3460             00000008   cmd_1	set	8
  3461             00000009   byte_1	set	9
  3462             0000000A   status_1	set	10
  3463             0000000C   bytes_read_1	set	12
  3464             0000000E   result_1	set	14
  3465                        	.sym	st,0,14,1,8
  3466                        	.sym	cyl,1,14,1,8
  Thu Dec  3 2020 22:25                                                Page 68


  3467                        	.sym	i,2,5,1,16
  3468                        	.sym	max_bytes,4,16,1,16
  3469                        	.sym	msr,6,14,1,8
  3470                        	.sym	st0,7,14,1,8
  3471                        	.sym	cmd,8,14,1,8
  3472                        	.sym	byte,9,14,1,8
  3473                        	.sym	status,10,5,1,16
  3474                        	.sym	bytes_read,12,5,1,16
  3475                        	.sym	result,14,5,1,16
  3476                        	.sym	buf,4,142,6,32
  3477                        	.sym	do_write,8,5,6,16
  3478                        	.sym	c,10,16,6,16
  3479                        	.sym	h,12,16,6,16
  3480                        	.sym	s,14,16,6,16
  3481 00:09B9: 64 0B        	stz	<L135+i_1
  3482 00:09BB: A9 00 02     	lda	#$200
  3483 00:09BE: 85 0D        	sta	<L135+max_bytes_1
  3484 00:09C0: E2 20        	sep	#$20
  3485                        	longa	off
  3486 00:09C2: 64 0F        	stz	<L135+msr_1
  3487 00:09C4: C2 20        	rep	#$20
  3488                        	longa	on
  3489 00:09C6: E2 20        	sep	#$20
  3490                        	longa	off
  3491 00:09C8: 64 10        	stz	<L135+st0_1
  3492 00:09CA: C2 20        	rep	#$20
  3493                        	longa	on
  3494 00:09CC: A5 20        	lda	<L134+do_write_0
  3495 00:09CE: D0 03        	bne	L138
  3496 00:09D0: 82 05 00     	brl	L137
  3497                        L138:
  3498 00:09D3: A9 45 00     	lda	#$45
  3499 00:09D6: 80 03        	bra	L139
  3500                        L137:
  3501 00:09D8: A9 46 00     	lda	#$46
  3502                        L139:
  3503 00:09DB: 85 01        	sta	<R0
  3504 00:09DD: E2 20        	sep	#$20
  3505                        	longa	off
  3506 00:09DF: A5 01        	lda	<R0
  3507 00:09E1: 85 11        	sta	<L135+cmd_1
  3508 00:09E3: C2 20        	rep	#$20
  3509                        	longa	on
  3510                        	.line	706
  3511 00:09E5: 22 xx xx xx  	jsl	~~motor_on
  3512                        ;
  3513                        ;	k_debug_string("floppy_transfer_try2\r\n");
  3514                        	.line	708
  3515 00:09E9: F4 xx xx     	pea	#^L126
  3516 00:09EC: F4 xx xx     	pea	#<L126
  3517 00:09EF: 22 xx xx xx  	jsl	~~k_debug_string
  3518                        ;
  3519                        ;	floppy_check_int(&st,&cyl);
  3520                        	.line	710
  3521 00:09F3: F4 00 00     	pea	#0
  3522 00:09F6: 18           	clc
  3523 00:09F7: 7B           	tdc
  3524 00:09F8: 69 0A 00     	adc	#<L135+cyl_1
  Thu Dec  3 2020 22:25                                                Page 69


  3525 00:09FB: 48           	pha
  3526 00:09FC: F4 00 00     	pea	#0
  3527 00:09FF: 18           	clc
  3528 00:0A00: 7B           	tdc
  3529 00:0A01: 69 09 00     	adc	#<L135+st_1
  3530 00:0A04: 48           	pha
  3531 00:0A05: 22 xx xx xx  	jsl	~~floppy_check_int
  3532                        ;
  3533                        ;	//sendbyte(CMD_READ);
  3534                        ;	sendbyte(FD_READ | (((DISK_H1440_HEAD ==2)?1:0) 
                    << 6));
  3535                        	.line	713
  3536 00:0A09: F4 E6 00     	pea	#<$e6
  3537 00:0A0C: 22 xx xx xx  	jsl	~~sendbyte
  3538                        ;	sendbyte((UCHAR) ((h << 2) | cur_drive));
  3539                        	.line	714
  3540 00:0A10: A5 24        	lda	<L134+h_0
  3541 00:0A12: 0A           	asl	A
  3542 00:0A13: 0A           	asl	A
  3543 00:0A14: 85 01        	sta	<R0
  3544 00:0A16: AD xx xx     	lda	|~~cur_drive
  3545 00:0A19: 29 FF 00     	and	#$ff
  3546 00:0A1C: 85 05        	sta	<R1
  3547 00:0A1E: A5 05        	lda	<R1
  3548 00:0A20: 05 01        	ora	<R0
  3549 00:0A22: 48           	pha
  3550 00:0A23: 22 xx xx xx  	jsl	~~sendbyte
  3551                        ;	sendbyte((UCHAR) c);
  3552                        	.line	715
  3553 00:0A27: D4 22        	pei	<L134+c_0
  3554 00:0A29: 22 xx xx xx  	jsl	~~sendbyte
  3555                        ;	sendbyte((UCHAR) h);
  3556                        	.line	716
  3557 00:0A2D: D4 24        	pei	<L134+h_0
  3558 00:0A2F: 22 xx xx xx  	jsl	~~sendbyte
  3559                        ;	sendbyte((UCHAR) s);
  3560                        	.line	717
  3561 00:0A33: D4 26        	pei	<L134+s_0
  3562 00:0A35: 22 xx xx xx  	jsl	~~sendbyte
  3563                        ;	sendbyte(0x2);
  3564                        	.line	718
  3565 00:0A39: F4 02 00     	pea	#<$2
  3566 00:0A3C: 22 xx xx xx  	jsl	~~sendbyte
  3567                        ;	sendbyte(DISK_H1440_SECT);
  3568                        	.line	719
  3569 00:0A40: F4 12 00     	pea	#<$12
  3570 00:0A43: 22 xx xx xx  	jsl	~~sendbyte
  3571                        ;	sendbyte(DISK_H1440_GAP);
  3572                        	.line	720
  3573 00:0A47: F4 1B 00     	pea	#<$1b
  3574 00:0A4A: 22 xx xx xx  	jsl	~~sendbyte
  3575                        ;	sendbyte(0xff);
  3576                        	.line	721
  3577 00:0A4E: F4 FF 00     	pea	#<$ff
  3578 00:0A51: 22 xx xx xx  	jsl	~~sendbyte
  3579                        ;
  3580                        ;	k_debug_string("floppy_transfer_try2:check for R
                    QM\r\n");
  Thu Dec  3 2020 22:25                                                Page 70


  3581                        	.line	723
  3582 00:0A55: F4 xx xx     	pea	#^L126+23
  3583 00:0A58: F4 xx xx     	pea	#<L126+23
  3584 00:0A5B: 22 xx xx xx  	jsl	~~k_debug_string
  3585                        ;	//sleep(10);
  3586                        ;
  3587                        ;	/*
  3588                        ;	i = 32000;
  3589                        ;	msr = 0;//inportb(FDC_MSR);
  3590                        ;	while(status != (STATUS_READY|STATUS_NON_DMA))
  3591                        ;	{
  3592                        ;		//k_debug_integer("floppy_transfer_try2:
                    wait for RQM:",i);
  3593                        ;
  3594                        ;		//k_debug_hex("     RQM:",(msr & 0x80));
  3595                        ;		//k_debug_hex("     DIO:",(msr & 0x40));
  3596                        ;		//k_debug_hex("    NDMA:",(msr & 0x20));
  3597                        ;		//k_debug_hex("    CMDB:",(msr & 0x10));
  3598                        ;		i--;
  3599                        ;		if(i == 0)
  3600                        ;		{
  3601                        ;			//st0 =  inportb(SRA);
  3602                        ;
  3603                        ;			k_debug_integer("floppy_transfer
                    _try2:wait for ready ABORT:",i);
  3604                        ;			k_debug_hex("     RQM:",(msr & 0
                    x80));
  3605                        ;			k_debug_hex("     DIO:",(msr & 0
                    x40));
  3606                        ;			k_debug_hex("    NDMA:",(msr & 0
                    x20));
  3607                        ;			k_debug_hex("    CMDB:",(msr & 0
                    x10));
  3608                        ;
  3609                        ;			k_debug_hex("     IRQ:",(st0 & 0
                    x80));
  3610                        ;
  3611                        ;			return 1;
  3612                        ;		}
  3613                        ;		//sleep(30);
  3614                        ;		msr = inportb(FDC_MSR);
  3615                        ;	}
  3616                        ;	*/
  3617                        ;
  3618                        ;	do
  3619                        	.line	757
  3620                        L10041:
  3621                        ;	{
  3622                        	.line	758
  3623                        ;		status =  inportb(FDC_MSR);
  3624                        	.line	759
  3625 00:0A5F: AF F4 13 AF  	lda	>11473908
  3626 00:0A63: 29 FF 00     	and	#$ff
  3627 00:0A66: 85 13        	sta	<L135+status_1
  3628                        ;		status &= STATUS_READY | STATUS_NON_DMA;
  3629                        	.line	760
  3630 00:0A68: A9 5F FF     	lda	#$ff5f
  3631 00:0A6B: 14 13        	trb	<L135+status_1
  Thu Dec  3 2020 22:25                                                Page 71


  3632                        ;	} while (status != (STATUS_READY | STATUS_NON_DM
                    A));
  3633                        	.line	761
  3634                        L10039:
  3635 00:0A6D: A5 13        	lda	<L135+status_1
  3636 00:0A6F: C9 A0 00     	cmp	#<$a0
  3637 00:0A72: F0 03        	beq	L140
  3638 00:0A74: 82 E8 FF     	brl	L10041
  3639                        L140:
  3640                        L10040:
  3641                        ;
  3642                        ;
  3643                        ;	//st0 =  inportb(SRA);
  3644                        ;	k_debug_string("floppy_transfer_try2:read start\
                    r\n");
  3645                        	.line	765
  3646 00:0A77: F4 xx xx     	pea	#^L126+60
  3647 00:0A7A: F4 xx xx     	pea	#<L126+60
  3648 00:0A7D: 22 xx xx xx  	jsl	~~k_debug_string
  3649                        ;	//k_debug_hex("     RQM:",(msr & 0x80));
  3650                        ;	//k_debug_hex("     DIO:",(msr & 0x40));
  3651                        ;	//k_debug_hex("    NDMA:",(msr & 0x20));
  3652                        ;	//k_debug_hex("    CMDB:",(msr & 0x10));
  3653                        ;	//k_debug_hex("     IRQ:",(st0 & 0x80));
  3654                        ;
  3655                        ;
  3656                        ;	for (i = 0; i < max_bytes; i++)
  3657                        	.line	773
  3658 00:0A81: 64 0B        	stz	<L135+i_1
  3659 00:0A83: 82 44 00     	brl	L10045
  3660                        L10044:
  3661                        ;	{
  3662                        	.line	774
  3663                        ;		if ((status = wait_til_ready()) < 0)
  3664                        	.line	775
  3665                        ;		{
  3666 00:0A86: 22 xx xx xx  	jsl	~~wait_til_ready
  3667 00:0A8A: 85 13        	sta	<L135+status_1
  3668 00:0A8C: A5 13        	lda	<L135+status_1
  3669 00:0A8E: 30 03        	bmi	L141
  3670 00:0A90: 82 03 00     	brl	L10046
  3671                        L141:
  3672                        	.line	776
  3673                        ;			break;
  3674                        	.line	777
  3675 00:0A93: 82 3D 00     	brl	L10043
  3676                        ;		}
  3677                        	.line	778
  3678                        ;		status &= STATUS_READY | STATUS_DIR | ST
                    ATUS_NON_DMA;
  3679                        L10046:
  3680                        	.line	779
  3681 00:0A96: A9 1F FF     	lda	#$ff1f
  3682 00:0A99: 14 13        	trb	<L135+status_1
  3683                        ;		if (status != (STATUS_READY | STATUS_DIR
                     | STATUS_NON_DMA))
  3684                        	.line	780
  3685                        ;		{
  Thu Dec  3 2020 22:25                                                Page 72


  3686 00:0A9B: A5 13        	lda	<L135+status_1
  3687 00:0A9D: C9 E0 00     	cmp	#<$e0
  3688 00:0AA0: D0 03        	bne	L142
  3689 00:0AA2: 82 03 00     	brl	L10047
  3690                        L142:
  3691                        	.line	781
  3692                        ;			break;
  3693                        	.line	782
  3694 00:0AA5: 82 2B 00     	brl	L10043
  3695                        ;		}
  3696                        	.line	783
  3697                        ;		byte = getbyte();
  3698                        L10047:
  3699                        	.line	784
  3700 00:0AA8: 22 xx xx xx  	jsl	~~getbyte
  3701 00:0AAC: E2 20        	sep	#$20
  3702                        	longa	off
  3703 00:0AAE: 85 12        	sta	<L135+byte_1
  3704 00:0AB0: C2 20        	rep	#$20
  3705                        	longa	on
  3706                        ;		k_debug_hex("READ:",byte);
  3707                        	.line	785
  3708 00:0AB2: D4 12        	pei	<L135+byte_1
  3709 00:0AB4: F4 xx xx     	pea	#^L126+94
  3710 00:0AB7: F4 xx xx     	pea	#<L126+94
  3711 00:0ABA: 22 xx xx xx  	jsl	~~k_debug_hex
  3712                        ;		buf[i] = byte;
  3713                        	.line	786
  3714 00:0ABE: E2 20        	sep	#$20
  3715                        	longa	off
  3716 00:0AC0: A5 12        	lda	<L135+byte_1
  3717 00:0AC2: A4 0B        	ldy	<L135+i_1
  3718 00:0AC4: 97 1C        	sta	[<L134+buf_0],Y
  3719 00:0AC6: C2 20        	rep	#$20
  3720                        	longa	on
  3721                        ;	}
  3722                        	.line	787
  3723                        L10042:
  3724 00:0AC8: E6 0B        	inc	<L135+i_1
  3725                        L10045:
  3726 00:0ACA: A5 0B        	lda	<L135+i_1
  3727 00:0ACC: C5 0D        	cmp	<L135+max_bytes_1
  3728 00:0ACE: B0 03        	bcs	L143
  3729 00:0AD0: 82 B3 FF     	brl	L10044
  3730                        L143:
  3731                        L10043:
  3732                        ;	bytes_read = i;
  3733                        	.line	788
  3734 00:0AD3: A5 0B        	lda	<L135+i_1
  3735 00:0AD5: 85 15        	sta	<L135+bytes_read_1
  3736                        ;
  3737                        ;	/* The result stage begins when STATUS_NON_DMA i
                    s cleared */
  3738                        ;	while ((status = inportb(FDC_MSR)) & STATUS_NON_
                    DMA)
  3739                        	.line	791
  3740                        L10048:
  3741 00:0AD7: AF F4 13 AF  	lda	>11473908
  Thu Dec  3 2020 22:25                                                Page 73


  3742 00:0ADB: 29 FF 00     	and	#$ff
  3743 00:0ADE: 85 13        	sta	<L135+status_1
  3744 00:0AE0: A5 13        	lda	<L135+status_1
  3745 00:0AE2: 29 20 00     	and	#<$20
  3746 00:0AE5: D0 03        	bne	L144
  3747 00:0AE7: 82 07 00     	brl	L10049
  3748                        L144:
  3749                        ;	{
  3750                        	.line	792
  3751                        ;		/* We get extra bytes in the fifo  past
  3752                        ;		 * the end of the sector and drop them o
                    n the floor.
  3753                        ;		 * Otherwise the fifo is polluted.
  3754                        ;		 */
  3755                        ;		getbyte();
  3756                        	.line	797
  3757 00:0AEA: 22 xx xx xx  	jsl	~~getbyte
  3758                        ;	}
  3759                        	.line	798
  3760 00:0AEE: 82 E6 FF     	brl	L10048
  3761                        L10049:
  3762                        ;	/*
  3763                        ;	for (i = 0; i < SECTOR_SIZE ; i++)
  3764                        ;	{
  3765                        ;		msr = inportb(FDC_MSR);
  3766                        ;		if((msr & 0xC0) || (msr & 0x20))
  3767                        ;		{
  3768                        ;
  3769                        ;			buf[i] = inportb(FDC_DATA);
  3770                        ;
  3771                        ;			if(buf[i]!=0xFF)
  3772                        ;			{
  3773                        ;				//k_debug_integer("INDEX
                    :", i);
  3774                        ;				k_debug_hex("READ:", buf
                    [i]);
  3775                        ;			}
  3776                        ;
  3777                        ;			//sleep(20);
  3778                        ;		}
  3779                        ;		else
  3780                        ;		{
  3781                        ;			st0 =  inportb(SRA);
  3782                        ;			k_debug_integer("floppy_transfer
                    _try2:read quit:",i);
  3783                        ;			k_debug_hex("     RQM:",(msr & 0
                    x80));
  3784                        ;			k_debug_hex("     DIO:",(msr & 0
                    x40));
  3785                        ;			k_debug_hex("    NDMA:",(msr & 0
                    x20));
  3786                        ;			k_debug_hex("    CMDB:",(msr & 0
                    x10));
  3787                        ;			k_debug_hex("     IRQ:",(st0 & 0
                    x80));
  3788                        ;			break;
  3789                        ;		}
  3790                        ;		//msr = inportb(FDC_MSR);
  Thu Dec  3 2020 22:25                                                Page 74


  3791                        ;	}
  3792                        ;	*/
  3793                        ;
  3794                        ;	msr = inportb(FDC_MSR);
  3795                        	.line	831
  3796 00:0AF1: E2 20        	sep	#$20
  3797                        	longa	off
  3798 00:0AF3: AF F4 13 AF  	lda	>11473908
  3799 00:0AF7: 85 0F        	sta	<L135+msr_1
  3800 00:0AF9: C2 20        	rep	#$20
  3801                        	longa	on
  3802                        ;
  3803                        ;	//st0 =  inportb(SRA);
  3804                        ;	k_debug_string("floppy_transfer_try2:read comple
                    te\r\n");
  3805                        	.line	834
  3806 00:0AFB: F4 xx xx     	pea	#^L126+100
  3807 00:0AFE: F4 xx xx     	pea	#<L126+100
  3808 00:0B01: 22 xx xx xx  	jsl	~~k_debug_string
  3809                        ;	//k_debug_hex("     RQM:",(msr & 0x80));
  3810                        ;	//k_debug_hex("     DIO:",(msr & 0x40));
  3811                        ;	//k_debug_hex("    NDMA:",(msr & 0x20));
  3812                        ;	//k_debug_hex("    CMDB:",(msr & 0x10));
  3813                        ;	//k_debug_hex("     IRQ:",(st0 & 0x80));
  3814                        ;
  3815                        ;	/*
  3816                        ;	i = 0xFFF;
  3817                        ;	msr = inportb(FDC_MSR);
  3818                        ;	while(!(msr & 0x80))
  3819                        ;	{
  3820                        ;
  3821                        ;		//k_debug_integer("floppy_transfer_try2:
                    wait for result:",i);
  3822                        ;
  3823                        ;		//k_debug_hex("     RQM:",(msr & 0x80));
  3824                        ;		//k_debug_hex("     DIO:",(msr & 0x40));
  3825                        ;		//k_debug_hex("    NDMA:",(msr & 0x20));
  3826                        ;		//k_debug_hex("    CMDB:",(msr & 0x10));
  3827                        ;		i--;
  3828                        ;		if(i == 0)
  3829                        ;		{
  3830                        ;			//st0 =  inportb(SRA);
  3831                        ;			k_debug_integer("floppy_transfer
                    _try2:wait for result ABORT:",i);
  3832                        ;			k_debug_hex("     RQM:",(msr & 0
                    x80));
  3833                        ;			k_debug_hex("     DIO:",(msr & 0
                    x40));
  3834                        ;			k_debug_hex("    NDMA:",(msr & 0
                    x20));
  3835                        ;			k_debug_hex("    CMDB:",(msr & 0
                    x10));
  3836                        ;			k_debug_hex("     IRQ:",(st0 & 0
                    x80));
  3837                        ;			//return 1;
  3838                        ;		}
  3839                        ;
  3840                        ;		msr = inportb(FDC_MSR);
  Thu Dec  3 2020 22:25                                                Page 75


  3841                        ;		//sleep(30);
  3842                        ;	}
  3843                        ;	*/
  3844                        ;
  3845                        ;	reg_sr0 = getbyte();
  3846                        	.line	871
  3847 00:0B05: 22 xx xx xx  	jsl	~~getbyte
  3848 00:0B09: E2 20        	sep	#$20
  3849                        	longa	off
  3850 00:0B0B: 8D xx xx     	sta	|~~reg_sr0
  3851 00:0B0E: C2 20        	rep	#$20
  3852                        	longa	on
  3853                        ;	k_debug_integer("floppy_transfer_try2:reg_sr0:",
                    reg_sr0);
  3854                        	.line	872
  3855 00:0B10: AD xx xx     	lda	|~~reg_sr0
  3856 00:0B13: 29 FF 00     	and	#$ff
  3857 00:0B16: 48           	pha
  3858 00:0B17: F4 xx xx     	pea	#^L126+137
  3859 00:0B1A: F4 xx xx     	pea	#<L126+137
  3860 00:0B1D: 22 xx xx xx  	jsl	~~k_debug_integer
  3861                        ;	reg_sr1 = getbyte();
  3862                        	.line	873
  3863 00:0B21: 22 xx xx xx  	jsl	~~getbyte
  3864 00:0B25: E2 20        	sep	#$20
  3865                        	longa	off
  3866 00:0B27: 8D xx xx     	sta	|~~reg_sr1
  3867 00:0B2A: C2 20        	rep	#$20
  3868                        	longa	on
  3869                        ;	k_debug_integer("floppy_transfer_try2:reg_sr1:",
                    reg_sr1);
  3870                        	.line	874
  3871 00:0B2C: AD xx xx     	lda	|~~reg_sr1
  3872 00:0B2F: 29 FF 00     	and	#$ff
  3873 00:0B32: 48           	pha
  3874 00:0B33: F4 xx xx     	pea	#^L126+167
  3875 00:0B36: F4 xx xx     	pea	#<L126+167
  3876 00:0B39: 22 xx xx xx  	jsl	~~k_debug_integer
  3877                        ;	reg_sr2 = getbyte();
  3878                        	.line	875
  3879 00:0B3D: 22 xx xx xx  	jsl	~~getbyte
  3880 00:0B41: E2 20        	sep	#$20
  3881                        	longa	off
  3882 00:0B43: 8D xx xx     	sta	|~~reg_sr2
  3883 00:0B46: C2 20        	rep	#$20
  3884                        	longa	on
  3885                        ;	k_debug_integer("floppy_transfer_try2:reg_sr2:",
                    reg_sr2);
  3886                        	.line	876
  3887 00:0B48: AD xx xx     	lda	|~~reg_sr2
  3888 00:0B4B: 29 FF 00     	and	#$ff
  3889 00:0B4E: 48           	pha
  3890 00:0B4F: F4 xx xx     	pea	#^L126+197
  3891 00:0B52: F4 xx xx     	pea	#<L126+197
  3892 00:0B55: 22 xx xx xx  	jsl	~~k_debug_integer
  3893                        ;	drives[cur_drive].track = getbyte();
  3894                        	.line	877
  3895 00:0B59: AD xx xx     	lda	|~~cur_drive
  Thu Dec  3 2020 22:25                                                Page 76


  3896 00:0B5C: 29 FF 00     	and	#$ff
  3897 00:0B5F: 85 01        	sta	<R0
  3898 00:0B61: A5 01        	lda	<R0
  3899 00:0B63: 0A           	asl	A
  3900 00:0B64: 65 01        	adc	<R0
  3901 00:0B66: 0A           	asl	A
  3902 00:0B67: 85 01        	sta	<R0
  3903 00:0B69: 22 xx xx xx  	jsl	~~getbyte
  3904 00:0B6D: A6 01        	ldx	<R0
  3905 00:0B6F: 9D xx xx     	sta	|~~drives,X
  3906                        ;	k_debug_integer("floppy_transfer_try2:C:",drives
                    [cur_drive].track);
  3907                        	.line	878
  3908 00:0B72: AD xx xx     	lda	|~~cur_drive
  3909 00:0B75: 29 FF 00     	and	#$ff
  3910 00:0B78: 85 01        	sta	<R0
  3911 00:0B7A: A5 01        	lda	<R0
  3912 00:0B7C: 0A           	asl	A
  3913 00:0B7D: 65 01        	adc	<R0
  3914 00:0B7F: 0A           	asl	A
  3915 00:0B80: 85 01        	sta	<R0
  3916 00:0B82: A6 01        	ldx	<R0
  3917 00:0B84: BD xx xx     	lda	|~~drives,X
  3918 00:0B87: 48           	pha
  3919 00:0B88: F4 xx xx     	pea	#^L126+227
  3920 00:0B8B: F4 xx xx     	pea	#<L126+227
  3921 00:0B8E: 22 xx xx xx  	jsl	~~k_debug_integer
  3922                        ;
  3923                        ;	//k_debug_integer("floppy_transfer_try:drives[cu
                    r_drive].track:",drives[cur_drive].track);
  3924                        ;
  3925                        ;	i = getbyte();
  3926                        	.line	882
  3927 00:0B92: 22 xx xx xx  	jsl	~~getbyte
  3928 00:0B96: 85 0B        	sta	<L135+i_1
  3929                        ;	k_debug_integer("floppy_transfer_try2:H:",i);
  3930                        	.line	883
  3931 00:0B98: D4 0B        	pei	<L135+i_1
  3932 00:0B9A: F4 xx xx     	pea	#^L126+251
  3933 00:0B9D: F4 xx xx     	pea	#<L126+251
  3934 00:0BA0: 22 xx xx xx  	jsl	~~k_debug_integer
  3935                        ;	i = getbyte();
  3936                        	.line	884
  3937 00:0BA4: 22 xx xx xx  	jsl	~~getbyte
  3938 00:0BA8: 85 0B        	sta	<L135+i_1
  3939                        ;	k_debug_integer("floppy_transfer_try2:R:",i);
  3940                        	.line	885
  3941 00:0BAA: D4 0B        	pei	<L135+i_1
  3942 00:0BAC: F4 xx xx     	pea	#^L126+275
  3943 00:0BAF: F4 xx xx     	pea	#<L126+275
  3944 00:0BB2: 22 xx xx xx  	jsl	~~k_debug_integer
  3945                        ;	i = getbyte();
  3946                        	.line	886
  3947 00:0BB6: 22 xx xx xx  	jsl	~~getbyte
  3948 00:0BBA: 85 0B        	sta	<L135+i_1
  3949                        ;	k_debug_integer("floppy_transfer_try2:N:",i);
  3950                        	.line	887
  3951 00:0BBC: D4 0B        	pei	<L135+i_1
  Thu Dec  3 2020 22:25                                                Page 77


  3952 00:0BBE: F4 xx xx     	pea	#^L126+299
  3953 00:0BC1: F4 xx xx     	pea	#<L126+299
  3954 00:0BC4: 22 xx xx xx  	jsl	~~k_debug_integer
  3955                        ;
  3956                        ;
  3957                        ;	floppy_check_int(&st, &cyl);
  3958                        	.line	890
  3959 00:0BC8: F4 00 00     	pea	#0
  3960 00:0BCB: 18           	clc
  3961 00:0BCC: 7B           	tdc
  3962 00:0BCD: 69 0A 00     	adc	#<L135+cyl_1
  3963 00:0BD0: 48           	pha
  3964 00:0BD1: F4 00 00     	pea	#0
  3965 00:0BD4: 18           	clc
  3966 00:0BD5: 7B           	tdc
  3967 00:0BD6: 69 09 00     	adc	#<L135+st_1
  3968 00:0BD9: 48           	pha
  3969 00:0BDA: 22 xx xx xx  	jsl	~~floppy_check_int
  3970                        ;	//k_debug_hex("floppy_transfer_try2:st:",st);
  3971                        ;	//k_debug_hex("floppy_transfer_try2:cyl:",cyl);
  3972                        ;
  3973                        ;	result = (i != 2);
  3974                        	.line	894
  3975 00:0BDE: 64 01        	stz	<R0
  3976 00:0BE0: A5 0B        	lda	<L135+i_1
  3977 00:0BE2: C9 02 00     	cmp	#<$2
  3978 00:0BE5: D0 03        	bne	L146
  3979 00:0BE7: 82 02 00     	brl	L145
  3980                        L146:
  3981 00:0BEA: E6 01        	inc	<R0
  3982                        L145:
  3983 00:0BEC: A5 01        	lda	<R0
  3984 00:0BEE: 85 17        	sta	<L135+result_1
  3985                        ;
  3986                        ;
  3987                        ;	k_debug_string("floppy_transfer_try2:read exit\r
                    \n");
  3988                        	.line	897
  3989 00:0BF0: F4 xx xx     	pea	#^L126+323
  3990 00:0BF3: F4 xx xx     	pea	#<L126+323
  3991 00:0BF6: 22 xx xx xx  	jsl	~~k_debug_string
  3992                        ;
  3993                        ;	return result;
  3994                        	.line	899
  3995 00:0BFA: A5 17        	lda	<L135+result_1
  3996                        L147:
  3997 00:0BFC: A8           	tay
  3998 00:0BFD: A5 1A        	lda	<L134+2
  3999 00:0BFF: 85 26        	sta	<L134+2+12
  4000 00:0C01: A5 19        	lda	<L134+1
  4001 00:0C03: 85 25        	sta	<L134+1+12
  4002 00:0C05: 2B           	pld
  4003 00:0C06: 3B           	tsc
  4004 00:0C07: 18           	clc
  4005 00:0C08: 69 24 00     	adc	#L134+12
  4006 00:0C0B: 1B           	tcs
  4007 00:0C0C: 98           	tya
  4008 00:0C0D: 6B           	rtl
  Thu Dec  3 2020 22:25                                                Page 78


  4009                        ;
  4010                        ;}
  4011                        	.line	901
  4012                        	.endblock	901
  4013             00000018   L134	equ	24
  4014             00000009   L135	equ	9
  4015                        	ends
  4016                        	efunc
  4017                        	.endfunc	901,9,24
  4018                        	.line	901
  4019                        	data
  4020                        L126:
  4021 00:0351: 66 6C 6F 70  	db	$66,$6C,$6F,$70,$70,$79,$5F,$74,$72,$61,
                    $6E,$73,$66,$65,$72
       00:0355: 70 79 5F 74 
       00:0359: 72 61 6E 73 
       00:035D: 66 65 72 
  4022 00:0360: 5F 74 72 79  	db	$5F,$74,$72,$79,$32,$0D,$0A,$00,$66,$6C,
                    $6F,$70,$70,$79,$5F
       00:0364: 32 0D 0A 00 
       00:0368: 66 6C 6F 70 
       00:036C: 70 79 5F 
  4023 00:036F: 74 72 61 6E  	db	$74,$72,$61,$6E,$73,$66,$65,$72,$5F,$74,
                    $72,$79,$32,$3A,$63
       00:0373: 73 66 65 72 
       00:0377: 5F 74 72 79 
       00:037B: 32 3A 63 
  4024 00:037E: 68 65 63 6B  	db	$68,$65,$63,$6B,$20,$66,$6F,$72,$20,$52,
                    $51,$4D,$0D,$0A,$00
       00:0382: 20 66 6F 72 
       00:0386: 20 52 51 4D 
       00:038A: 0D 0A 00 
  4025 00:038D: 66 6C 6F 70  	db	$66,$6C,$6F,$70,$70,$79,$5F,$74,$72,$61,
                    $6E,$73,$66,$65,$72
       00:0391: 70 79 5F 74 
       00:0395: 72 61 6E 73 
       00:0399: 66 65 72 
  4026 00:039C: 5F 74 72 79  	db	$5F,$74,$72,$79,$32,$3A,$72,$65,$61,$64,
                    $20,$73,$74,$61,$72
       00:03A0: 32 3A 72 65 
       00:03A4: 61 64 20 73 
       00:03A8: 74 61 72 
  4027 00:03AB: 74 0D 0A 00  	db	$74,$0D,$0A,$00,$52,$45,$41,$44,$3A,$00,
                    $66,$6C,$6F,$70,$70
       00:03AF: 52 45 41 44 
       00:03B3: 3A 00 66 6C 
       00:03B7: 6F 70 70 
  4028 00:03BA: 79 5F 74 72  	db	$79,$5F,$74,$72,$61,$6E,$73,$66,$65,$72,
                    $5F,$74,$72,$79,$32
       00:03BE: 61 6E 73 66 
       00:03C2: 65 72 5F 74 
       00:03C6: 72 79 32 
  4029 00:03C9: 3A 72 65 61  	db	$3A,$72,$65,$61,$64,$20,$63,$6F,$6D,$70,
                    $6C,$65,$74,$65,$0D
       00:03CD: 64 20 63 6F 
       00:03D1: 6D 70 6C 65 
       00:03D5: 74 65 0D 
  4030 00:03D8: 0A 00 66 6C  	db	$0A,$00,$66,$6C,$6F,$70,$70,$79,$5F,$74,
  Thu Dec  3 2020 22:25                                                Page 79


                    $72,$61,$6E,$73,$66
       00:03DC: 6F 70 70 79 
       00:03E0: 5F 74 72 61 
       00:03E4: 6E 73 66 
  4031 00:03E7: 65 72 5F 74  	db	$65,$72,$5F,$74,$72,$79,$32,$3A,$72,$65,
                    $67,$5F,$73,$72,$30
       00:03EB: 72 79 32 3A 
       00:03EF: 72 65 67 5F 
       00:03F3: 73 72 30 
  4032 00:03F6: 3A 00 66 6C  	db	$3A,$00,$66,$6C,$6F,$70,$70,$79,$5F,$74,
                    $72,$61,$6E,$73,$66
       00:03FA: 6F 70 70 79 
       00:03FE: 5F 74 72 61 
       00:0402: 6E 73 66 
  4033 00:0405: 65 72 5F 74  	db	$65,$72,$5F,$74,$72,$79,$32,$3A,$72,$65,
                    $67,$5F,$73,$72,$31
       00:0409: 72 79 32 3A 
       00:040D: 72 65 67 5F 
       00:0411: 73 72 31 
  4034 00:0414: 3A 00 66 6C  	db	$3A,$00,$66,$6C,$6F,$70,$70,$79,$5F,$74,
                    $72,$61,$6E,$73,$66
       00:0418: 6F 70 70 79 
       00:041C: 5F 74 72 61 
       00:0420: 6E 73 66 
  4035 00:0423: 65 72 5F 74  	db	$65,$72,$5F,$74,$72,$79,$32,$3A,$72,$65,
                    $67,$5F,$73,$72,$32
       00:0427: 72 79 32 3A 
       00:042B: 72 65 67 5F 
       00:042F: 73 72 32 
  4036 00:0432: 3A 00 66 6C  	db	$3A,$00,$66,$6C,$6F,$70,$70,$79,$5F,$74,
                    $72,$61,$6E,$73,$66
       00:0436: 6F 70 70 79 
       00:043A: 5F 74 72 61 
       00:043E: 6E 73 66 
  4037 00:0441: 65 72 5F 74  	db	$65,$72,$5F,$74,$72,$79,$32,$3A,$43,$3A,
                    $00,$66,$6C,$6F,$70
       00:0445: 72 79 32 3A 
       00:0449: 43 3A 00 66 
       00:044D: 6C 6F 70 
  4038 00:0450: 70 79 5F 74  	db	$70,$79,$5F,$74,$72,$61,$6E,$73,$66,$65,
                    $72,$5F,$74,$72,$79
       00:0454: 72 61 6E 73 
       00:0458: 66 65 72 5F 
       00:045C: 74 72 79 
  4039 00:045F: 32 3A 48 3A  	db	$32,$3A,$48,$3A,$00,$66,$6C,$6F,$70,$70,
                    $79,$5F,$74,$72,$61
       00:0463: 00 66 6C 6F 
       00:0467: 70 70 79 5F 
       00:046B: 74 72 61 
  4040 00:046E: 6E 73 66 65  	db	$6E,$73,$66,$65,$72,$5F,$74,$72,$79,$32,
                    $3A,$52,$3A,$00,$66
       00:0472: 72 5F 74 72 
       00:0476: 79 32 3A 52 
       00:047A: 3A 00 66 
  4041 00:047D: 6C 6F 70 70  	db	$6C,$6F,$70,$70,$79,$5F,$74,$72,$61,$6E,
                    $73,$66,$65,$72,$5F
       00:0481: 79 5F 74 72 
       00:0485: 61 6E 73 66 
  Thu Dec  3 2020 22:25                                                Page 80


       00:0489: 65 72 5F 
  4042 00:048C: 74 72 79 32  	db	$74,$72,$79,$32,$3A,$4E,$3A,$00,$66,$6C,
                    $6F,$70,$70,$79,$5F
       00:0490: 3A 4E 3A 00 
       00:0494: 66 6C 6F 70 
       00:0498: 70 79 5F 
  4043 00:049B: 74 72 61 6E  	db	$74,$72,$61,$6E,$73,$66,$65,$72,$5F,$74,
                    $72,$79,$32,$3A,$72
       00:049F: 73 66 65 72 
       00:04A3: 5F 74 72 79 
       00:04A7: 32 3A 72 
  4044 00:04AA: 65 61 64 20  	db	$65,$61,$64,$20,$65,$78,$69,$74,$0D,$0A,
                    $00
       00:04AE: 65 78 69 74 
       00:04B2: 0D 0A 00 
  4045 00:04B5:              	ends
  4046                        ;
  4047                        ;
  4048                        ;static int floppy_transfer(UCHAR *buf, int do_wri
                    te, UINT c, UINT h,UINT s)
  4049                        ;{
  4050                        	.line	904
  4051                        	.line	905
  4052                        	code
  4053                        	func
  4054                        	.function	905
  4055                        ~~floppy_transfer:
  4056                        	longa	on
  4057                        	longi	on
  4058 00:0C0E: 3B           	tsc
  4059 00:0C0F: 38           	sec
  4060 00:0C10: E9 04 00     	sbc	#L149
  4061 00:0C13: 1B           	tcs
  4062 00:0C14: 0B           	phd
  4063 00:0C15: 5B           	tcd
  4064             00000004   buf_0	set	4
  4065             00000008   do_write_0	set	8
  4066             0000000A   c_0	set	10
  4067             0000000C   h_0	set	12
  4068             0000000E   s_0	set	14
  4069                        	.block	905
  4070                        ;	int i;
  4071                        ;	int res = 0 ;
  4072                        ;
  4073                        ;	i = floppy_seek(c);
  4074             00000000   i_1	set	0
  4075             00000002   res_1	set	2
  4076                        	.sym	i,0,5,1,16
  4077                        	.sym	res,2,5,1,16
  4078                        	.sym	buf,4,142,6,32
  4079                        	.sym	do_write,8,5,6,16
  4080                        	.sym	c,10,16,6,16
  4081                        	.sym	h,12,16,6,16
  4082                        	.sym	s,14,16,6,16
  4083 00:0C16: 64 03        	stz	<L150+res_1
  4084                        	.line	909
  4085 00:0C18: D4 0E        	pei	<L149+c_0
  4086 00:0C1A: 22 xx xx xx  	jsl	~~floppy_seek
  Thu Dec  3 2020 22:25                                                Page 81


  4087 00:0C1E: 85 01        	sta	<L150+i_1
  4088                        ;
  4089                        ;	k_debug_integer("floppy_transfer:i:", i);
  4090                        	.line	911
  4091 00:0C20: D4 01        	pei	<L150+i_1
  4092 00:0C22: F4 xx xx     	pea	#^L148
  4093 00:0C25: F4 xx xx     	pea	#<L148
  4094 00:0C28: 22 xx xx xx  	jsl	~~k_debug_integer
  4095                        ;	k_debug_integer("floppy_transfer:c:", c);
  4096                        	.line	912
  4097 00:0C2C: D4 0E        	pei	<L149+c_0
  4098 00:0C2E: F4 xx xx     	pea	#^L148+19
  4099 00:0C31: F4 xx xx     	pea	#<L148+19
  4100 00:0C34: 22 xx xx xx  	jsl	~~k_debug_integer
  4101                        ;	k_debug_integer("floppy_transfer:h:", h);
  4102                        	.line	913
  4103 00:0C38: D4 10        	pei	<L149+h_0
  4104 00:0C3A: F4 xx xx     	pea	#^L148+38
  4105 00:0C3D: F4 xx xx     	pea	#<L148+38
  4106 00:0C40: 22 xx xx xx  	jsl	~~k_debug_integer
  4107                        ;	k_debug_integer("floppy_transfer:s:", s);
  4108                        	.line	914
  4109 00:0C44: D4 12        	pei	<L149+s_0
  4110 00:0C46: F4 xx xx     	pea	#^L148+57
  4111 00:0C49: F4 xx xx     	pea	#<L148+57
  4112 00:0C4C: 22 xx xx xx  	jsl	~~k_debug_integer
  4113                        ;
  4114                        ;	/*
  4115                        ;	res = -1;
  4116                        ;	for (i = 0; i < 4; i++)
  4117                        ;	{
  4118                        ;		if(!floppy_transfer_try2(buf, do_write, 
                    c, h, s))
  4119                        ;		{
  4120                        ;			if (!(reg_sr0 & 0xC0))
  4121                        ;			{
  4122                        ;				res = 0;
  4123                        ;				break;
  4124                        ;			}
  4125                        ;			if (do_write && (reg_sr1 & 0x2))
  4126                        ;			{
  4127                        ;				res = 1;
  4128                        ;				break;
  4129                        ;			}
  4130                        ;		}
  4131                        ;	}
  4132                        ;	return res;
  4133                        ;	*/
  4134                        ;
  4135                        ;	//return floppy_transfer_try2(buf, do_write, c, 
                    h, s);
  4136                        ;	return floppy_transfer_try1(buf, do_write, c, h,
                     s);
  4137                        	.line	938
  4138 00:0C50: D4 12        	pei	<L149+s_0
  4139 00:0C52: D4 10        	pei	<L149+h_0
  4140 00:0C54: D4 0E        	pei	<L149+c_0
  4141 00:0C56: D4 0C        	pei	<L149+do_write_0
  Thu Dec  3 2020 22:25                                                Page 82


  4142 00:0C58: D4 0A        	pei	<L149+buf_0+2
  4143 00:0C5A: D4 08        	pei	<L149+buf_0
  4144 00:0C5C: 22 xx xx xx  	jsl	~~floppy_transfer_try1
  4145                        L152:
  4146 00:0C60: A8           	tay
  4147 00:0C61: A5 06        	lda	<L149+2
  4148 00:0C63: 85 12        	sta	<L149+2+12
  4149 00:0C65: A5 05        	lda	<L149+1
  4150 00:0C67: 85 11        	sta	<L149+1+12
  4151 00:0C69: 2B           	pld
  4152 00:0C6A: 3B           	tsc
  4153 00:0C6B: 18           	clc
  4154 00:0C6C: 69 10 00     	adc	#L149+12
  4155 00:0C6F: 1B           	tcs
  4156 00:0C70: 98           	tya
  4157 00:0C71: 6B           	rtl
  4158                        ;
  4159                        ;}
  4160                        	.line	940
  4161                        	.endblock	940
  4162             00000004   L149	equ	4
  4163             00000001   L150	equ	1
  4164                        	ends
  4165                        	efunc
  4166                        	.endfunc	940,1,4
  4167                        	.line	940
  4168                        	data
  4169                        L148:
  4170 00:04B5: 66 6C 6F 70  	db	$66,$6C,$6F,$70,$70,$79,$5F,$74,$72,$61,
                    $6E,$73,$66,$65,$72
       00:04B9: 70 79 5F 74 
       00:04BD: 72 61 6E 73 
       00:04C1: 66 65 72 
  4171 00:04C4: 3A 69 3A 00  	db	$3A,$69,$3A,$00,$66,$6C,$6F,$70,$70,$79,
                    $5F,$74,$72,$61,$6E
       00:04C8: 66 6C 6F 70 
       00:04CC: 70 79 5F 74 
       00:04D0: 72 61 6E 
  4172 00:04D3: 73 66 65 72  	db	$73,$66,$65,$72,$3A,$63,$3A,$00,$66,$6C,
                    $6F,$70,$70,$79,$5F
       00:04D7: 3A 63 3A 00 
       00:04DB: 66 6C 6F 70 
       00:04DF: 70 79 5F 
  4173 00:04E2: 74 72 61 6E  	db	$74,$72,$61,$6E,$73,$66,$65,$72,$3A,$68,
                    $3A,$00,$66,$6C,$6F
       00:04E6: 73 66 65 72 
       00:04EA: 3A 68 3A 00 
       00:04EE: 66 6C 6F 
  4174 00:04F1: 70 70 79 5F  	db	$70,$70,$79,$5F,$74,$72,$61,$6E,$73,$66,
                    $65,$72,$3A,$73,$3A
       00:04F5: 74 72 61 6E 
       00:04F9: 73 66 65 72 
       00:04FD: 3A 73 3A 
  4175 00:0500: 00           	db	$00
  4176 00:0501:              	ends
  4177                        ;
  4178                        ;static int floppy_transfer_lba(UCHAR *buf, ULONG 
                    lba, UINT num,int do_write)
  Thu Dec  3 2020 22:25                                                Page 83


  4179                        ;{
  4180                        	.line	942
  4181                        	.line	943
  4182                        	code
  4183                        	func
  4184                        	.function	943
  4185                        ~~floppy_transfer_lba:
  4186                        	longa	on
  4187                        	longi	on
  4188 00:0C72: 3B           	tsc
  4189 00:0C73: 38           	sec
  4190 00:0C74: E9 0A 00     	sbc	#L154
  4191 00:0C77: 1B           	tcs
  4192 00:0C78: 0B           	phd
  4193 00:0C79: 5B           	tcd
  4194             00000004   buf_0	set	4
  4195             00000008   lba_0	set	8
  4196             0000000C   num_0	set	12
  4197             0000000E   do_write_0	set	14
  4198                        	.block	943
  4199                        ;	int i;
  4200                        ;	int res = 0;
  4201                        ;	UINT c, h, s;
  4202                        ;
  4203                        ;	motor_on();
  4204             00000000   i_1	set	0
  4205             00000002   res_1	set	2
  4206             00000004   c_1	set	4
  4207             00000006   h_1	set	6
  4208             00000008   s_1	set	8
  4209                        	.sym	i,0,5,1,16
  4210                        	.sym	res,2,5,1,16
  4211                        	.sym	c,4,16,1,16
  4212                        	.sym	h,6,16,1,16
  4213                        	.sym	s,8,16,1,16
  4214                        	.sym	buf,4,142,6,32
  4215                        	.sym	lba,8,18,6,32
  4216                        	.sym	num,12,16,6,16
  4217                        	.sym	do_write,14,5,6,16
  4218 00:0C7A: 64 03        	stz	<L155+res_1
  4219                        	.line	948
  4220 00:0C7C: 22 xx xx xx  	jsl	~~motor_on
  4221                        ;
  4222                        ;	for (i = 0; i < num; i++)
  4223                        	.line	950
  4224 00:0C80: 64 01        	stz	<L155+i_1
  4225 00:0C82: 82 57 00     	brl	L10053
  4226                        L10052:
  4227                        ;	{
  4228                        	.line	951
  4229                        ;		k_debug_long("floppy_transfer_lba:lba:",
                     lba);
  4230                        	.line	952
  4231 00:0C85: D4 14        	pei	<L154+lba_0+2
  4232 00:0C87: D4 12        	pei	<L154+lba_0
  4233 00:0C89: F4 xx xx     	pea	#^L153
  4234 00:0C8C: F4 xx xx     	pea	#<L153
  4235 00:0C8F: 22 xx xx xx  	jsl	~~k_debug_long
  Thu Dec  3 2020 22:25                                                Page 84


  4236                        ;		lba_2_chs(lba, &c, &h, &s);
  4237                        	.line	953
  4238 00:0C93: F4 00 00     	pea	#0
  4239 00:0C96: 18           	clc
  4240 00:0C97: 7B           	tdc
  4241 00:0C98: 69 09 00     	adc	#<L155+s_1
  4242 00:0C9B: 48           	pha
  4243 00:0C9C: F4 00 00     	pea	#0
  4244 00:0C9F: 18           	clc
  4245 00:0CA0: 7B           	tdc
  4246 00:0CA1: 69 07 00     	adc	#<L155+h_1
  4247 00:0CA4: 48           	pha
  4248 00:0CA5: F4 00 00     	pea	#0
  4249 00:0CA8: 18           	clc
  4250 00:0CA9: 7B           	tdc
  4251 00:0CAA: 69 05 00     	adc	#<L155+c_1
  4252 00:0CAD: 48           	pha
  4253 00:0CAE: D4 14        	pei	<L154+lba_0+2
  4254 00:0CB0: D4 12        	pei	<L154+lba_0
  4255 00:0CB2: 22 xx xx xx  	jsl	~~lba_2_chs
  4256                        ;
  4257                        ;		res = floppy_transfer(buf, do_write, c, 
                    h, s);
  4258                        	.line	955
  4259 00:0CB6: D4 09        	pei	<L155+s_1
  4260 00:0CB8: D4 07        	pei	<L155+h_1
  4261 00:0CBA: D4 05        	pei	<L155+c_1
  4262 00:0CBC: D4 18        	pei	<L154+do_write_0
  4263 00:0CBE: D4 10        	pei	<L154+buf_0+2
  4264 00:0CC0: D4 0E        	pei	<L154+buf_0
  4265 00:0CC2: 22 xx xx xx  	jsl	~~floppy_transfer
  4266 00:0CC6: 85 03        	sta	<L155+res_1
  4267                        ;		k_debug_integer("floppy_transfer_lba:res
                    :", res);
  4268                        	.line	956
  4269 00:0CC8: D4 03        	pei	<L155+res_1
  4270 00:0CCA: F4 xx xx     	pea	#^L153+25
  4271 00:0CCD: F4 xx xx     	pea	#<L153+25
  4272 00:0CD0: 22 xx xx xx  	jsl	~~k_debug_integer
  4273                        ;		lba++;
  4274                        	.line	957
  4275 00:0CD4: E6 12        	inc	<L154+lba_0
  4276 00:0CD6: D0 02        	bne	L157
  4277 00:0CD8: E6 14        	inc	<L154+lba_0+2
  4278                        L157:
  4279                        ;	}
  4280                        	.line	958
  4281                        L10050:
  4282 00:0CDA: E6 01        	inc	<L155+i_1
  4283                        L10053:
  4284 00:0CDC: A5 01        	lda	<L155+i_1
  4285 00:0CDE: C5 16        	cmp	<L154+num_0
  4286 00:0CE0: B0 03        	bcs	L158
  4287 00:0CE2: 82 A0 FF     	brl	L10052
  4288                        L158:
  4289                        L10051:
  4290                        ;
  4291                        ;	motor_off();
  Thu Dec  3 2020 22:25                                                Page 85


  4292                        	.line	960
  4293 00:0CE5: 22 xx xx xx  	jsl	~~motor_off
  4294                        ;
  4295                        ;	return res;
  4296                        	.line	962
  4297 00:0CE9: A5 03        	lda	<L155+res_1
  4298                        L159:
  4299 00:0CEB: A8           	tay
  4300 00:0CEC: A5 0C        	lda	<L154+2
  4301 00:0CEE: 85 18        	sta	<L154+2+12
  4302 00:0CF0: A5 0B        	lda	<L154+1
  4303 00:0CF2: 85 17        	sta	<L154+1+12
  4304 00:0CF4: 2B           	pld
  4305 00:0CF5: 3B           	tsc
  4306 00:0CF6: 18           	clc
  4307 00:0CF7: 69 16 00     	adc	#L154+12
  4308 00:0CFA: 1B           	tcs
  4309 00:0CFB: 98           	tya
  4310 00:0CFC: 6B           	rtl
  4311                        ;}
  4312                        	.line	963
  4313                        	.endblock	963
  4314             0000000A   L154	equ	10
  4315             00000001   L155	equ	1
  4316                        	ends
  4317                        	efunc
  4318                        	.endfunc	963,1,10
  4319                        	.line	963
  4320                        	data
  4321                        L153:
  4322 00:0501: 66 6C 6F 70  	db	$66,$6C,$6F,$70,$70,$79,$5F,$74,$72,$61,
                    $6E,$73,$66,$65,$72
       00:0505: 70 79 5F 74 
       00:0509: 72 61 6E 73 
       00:050D: 66 65 72 
  4323 00:0510: 5F 6C 62 61  	db	$5F,$6C,$62,$61,$3A,$6C,$62,$61,$3A,$00,
                    $66,$6C,$6F,$70,$70
       00:0514: 3A 6C 62 61 
       00:0518: 3A 00 66 6C 
       00:051C: 6F 70 70 
  4324 00:051F: 79 5F 74 72  	db	$79,$5F,$74,$72,$61,$6E,$73,$66,$65,$72,
                    $5F,$6C,$62,$61,$3A
       00:0523: 61 6E 73 66 
       00:0527: 65 72 5F 6C 
       00:052B: 62 61 3A 
  4325 00:052E: 72 65 73 3A  	db	$72,$65,$73,$3A,$00
       00:0532: 00 
  4326 00:0533:              	ends
  4327                        ;
  4328                        ;int floppy_read(const UCHAR *buf, ULONG offset, U
                    LONG num)
  4329                        ;{
  4330                        	.line	965
  4331                        	.line	966
  4332                        	code
  4333                        	xdef	~~floppy_read
  4334                        	func
  4335                        	.function	966
  Thu Dec  3 2020 22:25                                                Page 86


  4336                        ~~floppy_read:
  4337                        	longa	on
  4338                        	longi	on
  4339 00:0CFD: 3B           	tsc
  4340 00:0CFE: 38           	sec
  4341 00:0CFF: E9 00 00     	sbc	#L161
  4342 00:0D02: 1B           	tcs
  4343 00:0D03: 0B           	phd
  4344 00:0D04: 5B           	tcd
  4345             00000004   buf_0	set	4
  4346             00000008   offset_0	set	8
  4347             0000000C   num_0	set	12
  4348                        	.block	966
  4349                        ;	return floppy_transfer_lba((UCHAR*) buf, offset,
                     (UINT) num, 0);
  4350                        	.sym	buf,4,142,6,32
  4351                        	.sym	offset,8,18,6,32
  4352                        	.sym	num,12,18,6,32
  4353                        	.line	967
  4354 00:0D05: F4 00 00     	pea	#<$0
  4355 00:0D08: D4 0C        	pei	<L161+num_0
  4356 00:0D0A: D4 0A        	pei	<L161+offset_0+2
  4357 00:0D0C: D4 08        	pei	<L161+offset_0
  4358 00:0D0E: D4 06        	pei	<L161+buf_0+2
  4359 00:0D10: D4 04        	pei	<L161+buf_0
  4360 00:0D12: 22 xx xx xx  	jsl	~~floppy_transfer_lba
  4361                        L164:
  4362 00:0D16: A8           	tay
  4363 00:0D17: A5 02        	lda	<L161+2
  4364 00:0D19: 85 0E        	sta	<L161+2+12
  4365 00:0D1B: A5 01        	lda	<L161+1
  4366 00:0D1D: 85 0D        	sta	<L161+1+12
  4367 00:0D1F: 2B           	pld
  4368 00:0D20: 3B           	tsc
  4369 00:0D21: 18           	clc
  4370 00:0D22: 69 0C 00     	adc	#L161+12
  4371 00:0D25: 1B           	tcs
  4372 00:0D26: 98           	tya
  4373 00:0D27: 6B           	rtl
  4374                        ;}
  4375                        	.line	968
  4376                        	.endblock	968
  4377             00000000   L161	equ	0
  4378             00000001   L162	equ	1
  4379                        	ends
  4380                        	efunc
  4381                        	.endfunc	968,1,0
  4382                        	.line	968
  4383                        ;
  4384                        ;int floppy_write(UCHAR *buf, ULONG offset, ULONG 
                    num)
  4385                        ;{
  4386                        	.line	970
  4387                        	.line	971
  4388                        	code
  4389                        	xdef	~~floppy_write
  4390                        	func
  4391                        	.function	971
  Thu Dec  3 2020 22:25                                                Page 87


  4392                        ~~floppy_write:
  4393                        	longa	on
  4394                        	longi	on
  4395 00:0D28: 3B           	tsc
  4396 00:0D29: 38           	sec
  4397 00:0D2A: E9 00 00     	sbc	#L165
  4398 00:0D2D: 1B           	tcs
  4399 00:0D2E: 0B           	phd
  4400 00:0D2F: 5B           	tcd
  4401             00000004   buf_0	set	4
  4402             00000008   offset_0	set	8
  4403             0000000C   num_0	set	12
  4404                        	.block	971
  4405                        ;	return floppy_transfer_lba(buf, offset, (UINT) n
                    um, 1);
  4406                        	.sym	buf,4,142,6,32
  4407                        	.sym	offset,8,18,6,32
  4408                        	.sym	num,12,18,6,32
  4409                        	.line	972
  4410 00:0D30: F4 01 00     	pea	#<$1
  4411 00:0D33: D4 0C        	pei	<L165+num_0
  4412 00:0D35: D4 0A        	pei	<L165+offset_0+2
  4413 00:0D37: D4 08        	pei	<L165+offset_0
  4414 00:0D39: D4 06        	pei	<L165+buf_0+2
  4415 00:0D3B: D4 04        	pei	<L165+buf_0
  4416 00:0D3D: 22 xx xx xx  	jsl	~~floppy_transfer_lba
  4417                        L168:
  4418 00:0D41: A8           	tay
  4419 00:0D42: A5 02        	lda	<L165+2
  4420 00:0D44: 85 0E        	sta	<L165+2+12
  4421 00:0D46: A5 01        	lda	<L165+1
  4422 00:0D48: 85 0D        	sta	<L165+1+12
  4423 00:0D4A: 2B           	pld
  4424 00:0D4B: 3B           	tsc
  4425 00:0D4C: 18           	clc
  4426 00:0D4D: 69 0C 00     	adc	#L165+12
  4427 00:0D50: 1B           	tcs
  4428 00:0D51: 98           	tya
  4429 00:0D52: 6B           	rtl
  4430                        ;}
  4431                        	.line	973
  4432                        	.endblock	973
  4433             00000000   L165	equ	0
  4434             00000001   L166	equ	1
  4435                        	ends
  4436                        	efunc
  4437                        	.endfunc	973,1,0
  4438                        	.line	973
  4439                        ;
  4440                        ;void floppy_init()
  4441                        ;{
  4442                        	.line	975
  4443                        	.line	976
  4444                        	code
  4445                        	xdef	~~floppy_init
  4446                        	func
  4447                        	.function	976
  4448                        ~~floppy_init:
  Thu Dec  3 2020 22:25                                                Page 88


  4449                        	longa	on
  4450                        	longi	on
  4451 00:0D53: 3B           	tsc
  4452 00:0D54: 38           	sec
  4453 00:0D55: E9 08 00     	sbc	#L169
  4454 00:0D58: 1B           	tcs
  4455 00:0D59: 0B           	phd
  4456 00:0D5A: 5B           	tcd
  4457                        	.block	976
  4458                        ;	int r = 0;
  4459                        ;	int pres = 0;
  4460                        ;
  4461                        ;	k_debug_string("floppy_init\r\n");
  4462             00000000   r_1	set	0
  4463             00000002   pres_1	set	2
  4464                        	.sym	r,0,5,1,16
  4465                        	.sym	pres,2,5,1,16
  4466 00:0D5B: 64 05        	stz	<L170+r_1
  4467 00:0D5D: 64 07        	stz	<L170+pres_1
  4468                        	.line	980
  4469 00:0D5F: F4 xx xx     	pea	#^L160
  4470 00:0D62: F4 xx xx     	pea	#<L160
  4471 00:0D65: 22 xx xx xx  	jsl	~~k_debug_string
  4472                        ;
  4473                        ;	fdc_reset();
  4474                        	.line	982
  4475 00:0D69: 22 xx xx xx  	jsl	~~fdc_reset
  4476                        ;
  4477                        ;	sendbyte(CMD_VERSION);
  4478                        	.line	984
  4479 00:0D6D: F4 10 00     	pea	#<$10
  4480 00:0D70: 22 xx xx xx  	jsl	~~sendbyte
  4481                        ;	r = getbyte();
  4482                        	.line	985
  4483 00:0D74: 22 xx xx xx  	jsl	~~getbyte
  4484 00:0D78: 85 05        	sta	<L170+r_1
  4485                        ;	k_debug_long("fdc ver:", r);
  4486                        	.line	986
  4487 00:0D7A: A0 00 00     	ldy	#$0
  4488 00:0D7D: A5 05        	lda	<L170+r_1
  4489 00:0D7F: 10 01        	bpl	L172
  4490 00:0D81: 88           	dey
  4491                        L172:
  4492 00:0D82: 85 01        	sta	<R0
  4493 00:0D84: 84 03        	sty	<R0+2
  4494 00:0D86: D4 03        	pei	<R0+2
  4495 00:0D88: D4 01        	pei	<R0
  4496 00:0D8A: F4 xx xx     	pea	#^L160+14
  4497 00:0D8D: F4 xx xx     	pea	#<L160+14
  4498 00:0D90: 22 xx xx xx  	jsl	~~k_debug_long
  4499                        ;	if (r != 0x90)
  4500                        	.line	987
  4501                        ;	{
  4502 00:0D94: A5 05        	lda	<L170+r_1
  4503 00:0D96: C9 90 00     	cmp	#<$90
  4504 00:0D99: D0 03        	bne	L173
  4505 00:0D9B: 82 0A 00     	brl	L10054
  4506                        L173:
  Thu Dec  3 2020 22:25                                                Page 89


  4507                        	.line	988
  4508                        ;		k_debug_string("floppy might not being w
                    orking\r\n");
  4509                        	.line	989
  4510 00:0D9E: F4 xx xx     	pea	#^L160+23
  4511 00:0DA1: F4 xx xx     	pea	#<L160+23
  4512 00:0DA4: 22 xx xx xx  	jsl	~~k_debug_string
  4513                        ;	}
  4514                        	.line	990
  4515                        ;
  4516                        ;	k_debug_string("select\r\n");
  4517                        L10054:
  4518                        	.line	992
  4519 00:0DA8: F4 xx xx     	pea	#^L160+56
  4520 00:0DAB: F4 xx xx     	pea	#<L160+56
  4521 00:0DAE: 22 xx xx xx  	jsl	~~k_debug_string
  4522                        ;	floppy_select(0);
  4523                        	.line	993
  4524 00:0DB2: F4 00 00     	pea	#<$0
  4525 00:0DB5: 22 xx xx xx  	jsl	~~floppy_select
  4526                        ;	k_debug_string("calibrate\r\n");
  4527                        	.line	994
  4528 00:0DB9: F4 xx xx     	pea	#^L160+65
  4529 00:0DBC: F4 xx xx     	pea	#<L160+65
  4530 00:0DBF: 22 xx xx xx  	jsl	~~k_debug_string
  4531                        ;	floppy_calibrate();
  4532                        	.line	995
  4533 00:0DC3: 22 xx xx xx  	jsl	~~floppy_calibrate
  4534                        ;	k_debug_long("sr0:", reg_sr0);
  4535                        	.line	996
  4536 00:0DC7: AD xx xx     	lda	|~~reg_sr0
  4537 00:0DCA: 29 FF 00     	and	#$ff
  4538 00:0DCD: 85 01        	sta	<R0
  4539 00:0DCF: 64 03        	stz	<R0+2
  4540 00:0DD1: D4 03        	pei	<R0+2
  4541 00:0DD3: D4 01        	pei	<R0
  4542 00:0DD5: F4 xx xx     	pea	#^L160+77
  4543 00:0DD8: F4 xx xx     	pea	#<L160+77
  4544 00:0DDB: 22 xx xx xx  	jsl	~~k_debug_long
  4545                        ;
  4546                        ;	pres = floppy_present();
  4547                        	.line	998
  4548 00:0DDF: 22 xx xx xx  	jsl	~~floppy_present
  4549 00:0DE3: 85 07        	sta	<L170+pres_1
  4550                        ;	k_debug_long("floppy_present():", pres);
  4551                        	.line	999
  4552 00:0DE5: A0 00 00     	ldy	#$0
  4553 00:0DE8: A5 07        	lda	<L170+pres_1
  4554 00:0DEA: 10 01        	bpl	L174
  4555 00:0DEC: 88           	dey
  4556                        L174:
  4557 00:0DED: 85 01        	sta	<R0
  4558 00:0DEF: 84 03        	sty	<R0+2
  4559 00:0DF1: D4 03        	pei	<R0+2
  4560 00:0DF3: D4 01        	pei	<R0
  4561 00:0DF5: F4 xx xx     	pea	#^L160+82
  4562 00:0DF8: F4 xx xx     	pea	#<L160+82
  4563 00:0DFB: 22 xx xx xx  	jsl	~~k_debug_long
  Thu Dec  3 2020 22:25                                                Page 90


  4564                        ;
  4565                        ;	r = floppy_read(floppybuffer, 0, 1);
  4566                        	.line	1001
  4567 00:0DFF: F4 00 00     	pea	#^$1
  4568 00:0E02: F4 01 00     	pea	#<$1
  4569 00:0E05: F4 00 00     	pea	#^$0
  4570 00:0E08: F4 00 00     	pea	#<$0
  4571 00:0E0B: A9 xx xx     	lda	#<~~floppybuffer
  4572 00:0E0E: 85 01        	sta	<R0
  4573                        	xref	_BEG_DATA
  4574 00:0E10: A9 xx xx     	lda	#_BEG_DATA>>16
  4575 00:0E13: 85 03        	sta	<R0+2
  4576 00:0E15: D4 03        	pei	<R0+2
  4577 00:0E17: D4 01        	pei	<R0
  4578 00:0E19: 22 xx xx xx  	jsl	~~floppy_read
  4579 00:0E1D: 85 05        	sta	<L170+r_1
  4580                        ;
  4581                        ;	k_debug_integer("read(0) return:",r);
  4582                        	.line	1003
  4583 00:0E1F: D4 05        	pei	<L170+r_1
  4584 00:0E21: F4 xx xx     	pea	#^L160+100
  4585 00:0E24: F4 xx xx     	pea	#<L160+100
  4586 00:0E27: 22 xx xx xx  	jsl	~~k_debug_integer
  4587                        ;	k_debug_byte_array("floppy_sector:\r\n",floppybu
                    ffer,512);
  4588                        	.line	1004
  4589 00:0E2B: F4 00 00     	pea	#^$200
  4590 00:0E2E: F4 00 02     	pea	#<$200
  4591 00:0E31: A9 xx xx     	lda	#<~~floppybuffer
  4592 00:0E34: 85 01        	sta	<R0
  4593                        	xref	_BEG_DATA
  4594 00:0E36: A9 xx xx     	lda	#_BEG_DATA>>16
  4595 00:0E39: 85 03        	sta	<R0+2
  4596 00:0E3B: D4 03        	pei	<R0+2
  4597 00:0E3D: D4 01        	pei	<R0
  4598 00:0E3F: F4 xx xx     	pea	#^L160+116
  4599 00:0E42: F4 xx xx     	pea	#<L160+116
  4600 00:0E45: 22 xx xx xx  	jsl	~~k_debug_byte_array
  4601                        ;
  4602                        ;/*
  4603                        ;	r = floppy_read(floppybuffer, 1, 1);
  4604                        ;
  4605                        ;		k_debug_integer("read(0):",r);
  4606                        ;
  4607                        ;		k_debug_byte_array("floppy_sector:\r\n",
                    floppybuffer,512);
  4608                        ;*/
  4609                        ;	//k_debug_integer("read(0):", floppy_read(floppy
                    buffer, 1,1));
  4610                        ;	//k_debug_integer("read(0):", floppy_read(floppy
                    buffer, 19, 1));
  4611                        ;
  4612                        ;	//motor_off();
  4613                        ;}
  4614                        	.line	1017
  4615                        L175:
  4616 00:0E49: 2B           	pld
  4617 00:0E4A: 3B           	tsc
  Thu Dec  3 2020 22:25                                                Page 91


  4618 00:0E4B: 18           	clc
  4619 00:0E4C: 69 08 00     	adc	#L169
  4620 00:0E4F: 1B           	tcs
  4621 00:0E50: 6B           	rtl
  4622                        	.endblock	1017
  4623             00000008   L169	equ	8
  4624             00000005   L170	equ	5
  4625                        	ends
  4626                        	efunc
  4627                        	.endfunc	1017,5,8
  4628                        	.line	1017
  4629                        	data
  4630                        L160:
  4631 00:0533: 66 6C 6F 70  	db	$66,$6C,$6F,$70,$70,$79,$5F,$69,$6E,$69,
                    $74,$0D,$0A,$00,$66
       00:0537: 70 79 5F 69 
       00:053B: 6E 69 74 0D 
       00:053F: 0A 00 66 
  4632 00:0542: 64 63 20 76  	db	$64,$63,$20,$76,$65,$72,$3A,$00,$66,$6C,
                    $6F,$70,$70,$79,$20
       00:0546: 65 72 3A 00 
       00:054A: 66 6C 6F 70 
       00:054E: 70 79 20 
  4633 00:0551: 6D 69 67 68  	db	$6D,$69,$67,$68,$74,$20,$6E,$6F,$74,$20,
                    $62,$65,$69,$6E,$67
       00:0555: 74 20 6E 6F 
       00:0559: 74 20 62 65 
       00:055D: 69 6E 67 
  4634 00:0560: 20 77 6F 72  	db	$20,$77,$6F,$72,$6B,$69,$6E,$67,$0D,$0A,
                    $00,$73,$65,$6C,$65
       00:0564: 6B 69 6E 67 
       00:0568: 0D 0A 00 73 
       00:056C: 65 6C 65 
  4635 00:056F: 63 74 0D 0A  	db	$63,$74,$0D,$0A,$00,$63,$61,$6C,$69,$62,
                    $72,$61,$74,$65,$0D
       00:0573: 00 63 61 6C 
       00:0577: 69 62 72 61 
       00:057B: 74 65 0D 
  4636 00:057E: 0A 00 73 72  	db	$0A,$00,$73,$72,$30,$3A,$00,$66,$6C,$6F,
                    $70,$70,$79,$5F,$70
       00:0582: 30 3A 00 66 
       00:0586: 6C 6F 70 70 
       00:058A: 79 5F 70 
  4637 00:058D: 72 65 73 65  	db	$72,$65,$73,$65,$6E,$74,$28,$29,$3A,$00,
                    $72,$65,$61,$64,$28
       00:0591: 6E 74 28 29 
       00:0595: 3A 00 72 65 
       00:0599: 61 64 28 
  4638 00:059C: 30 29 20 72  	db	$30,$29,$20,$72,$65,$74,$75,$72,$6E,$3A,
                    $00,$66,$6C,$6F,$70
       00:05A0: 65 74 75 72 
       00:05A4: 6E 3A 00 66 
       00:05A8: 6C 6F 70 
  4639 00:05AB: 70 79 5F 73  	db	$70,$79,$5F,$73,$65,$63,$74,$6F,$72,$3A,
                    $0D,$0A,$00
       00:05AF: 65 63 74 6F 
       00:05B3: 72 3A 0D 0A 
       00:05B7: 00 
  Thu Dec  3 2020 22:25                                                Page 92


  4640 00:05B8:              	ends
  4641                        ;
  4642                        ;/* this is IRQ6 handler */
  4643                        ;void floppy_isr()
  4644                        ;{
  4645                        	.line	1020
  4646                        	.line	1021
  4647                        	code
  4648                        	xdef	~~floppy_isr
  4649                        	func
  4650                        	.function	1021
  4651                        ~~floppy_isr:
  4652                        	longa	on
  4653                        	longi	on
  4654 00:0E51: 3B           	tsc
  4655 00:0E52: 38           	sec
  4656 00:0E53: E9 00 00     	sbc	#L177
  4657 00:0E56: 1B           	tcs
  4658 00:0E57: 0B           	phd
  4659 00:0E58: 5B           	tcd
  4660                        	.block	1021
  4661                        ;	irq_signaled = 1;
  4662                        	.line	1022
  4663 00:0E59: E2 20        	sep	#$20
  4664                        	longa	off
  4665 00:0E5B: A9 01        	lda	#$1
  4666 00:0E5D: 8D xx xx     	sta	|~~irq_signaled
  4667 00:0E60: C2 20        	rep	#$20
  4668                        	longa	on
  4669                        ;}
  4670                        	.line	1023
  4671                        L180:
  4672 00:0E62: 2B           	pld
  4673 00:0E63: 3B           	tsc
  4674 00:0E64: 18           	clc
  4675 00:0E65: 69 00 00     	adc	#L177
  4676 00:0E68: 1B           	tcs
  4677 00:0E69: 6B           	rtl
  4678                        	.endblock	1023
  4679             00000000   L177	equ	0
  4680             00000001   L178	equ	1
  4681                        	ends
  4682                        	efunc
  4683                        	.endfunc	1023,1,0
  4684                        	.line	1023
  4685                        ;
  4686                        ;/* this's being called from timer isr (1000 Hz) *
                    /
  4687                        ;void floppy_timer()
  4688                        ;{
  4689                        	.line	1026
  4690                        	.line	1027
  4691                        	code
  4692                        	xdef	~~floppy_timer
  4693                        	func
  4694                        	.function	1027
  4695                        ~~floppy_timer:
  4696                        	longa	on
  Thu Dec  3 2020 22:25                                                Page 93


  4697                        	longi	on
  4698 00:0E6A: 3B           	tsc
  4699 00:0E6B: 38           	sec
  4700 00:0E6C: E9 0C 00     	sbc	#L181
  4701 00:0E6F: 1B           	tcs
  4702 00:0E70: 0B           	phd
  4703 00:0E71: 5B           	tcd
  4704                        	.block	1027
  4705                        ;	if (motoff_timer > 0)
  4706                        	.line	1028
  4707                        ;	{
  4708 00:0E72: 38           	sec
  4709 00:0E73: A9 00 00     	lda	#$0
  4710 00:0E76: ED xx xx     	sbc	|~~motoff_timer
  4711 00:0E79: 70 03        	bvs	L184
  4712 00:0E7B: 49 00 80     	eor	#$8000
  4713                        L184:
  4714 00:0E7E: 10 03        	bpl	L185
  4715 00:0E80: 82 7E 00     	brl	L10055
  4716                        L185:
  4717                        	.line	1029
  4718                        ;		//k_debug_string("motoff_timer\r\n");
  4719                        ;		motoff_timer--;
  4720                        	.line	1031
  4721 00:0E83: CE xx xx     	dec	|~~motoff_timer
  4722                        ;		if (motoff_timer == 0)
  4723                        	.line	1032
  4724                        ;		{
  4725 00:0E86: AD xx xx     	lda	|~~motoff_timer
  4726 00:0E89: F0 03        	beq	L186
  4727 00:0E8B: 82 73 00     	brl	L10056
  4728                        L186:
  4729                        	.line	1033
  4730                        ;			k_debug_hex("motoff_timer_off:",
                    inportb(FDC_DOR));
  4731                        	.line	1034
  4732 00:0E8E: AF F2 13 AF  	lda	>11473906
  4733 00:0E92: 48           	pha
  4734 00:0E93: F4 xx xx     	pea	#^L176
  4735 00:0E96: F4 xx xx     	pea	#<L176
  4736 00:0E99: 22 xx xx xx  	jsl	~~k_debug_hex
  4737                        ;			reg_dor &= ~(1 << (cur_drive + 4
                    ));
  4738                        	.line	1035
  4739 00:0E9D: AD xx xx     	lda	|~~cur_drive
  4740 00:0EA0: 29 FF 00     	and	#$ff
  4741 00:0EA3: 85 01        	sta	<R0
  4742 00:0EA5: 18           	clc
  4743 00:0EA6: A9 04 00     	lda	#$4
  4744 00:0EA9: 65 01        	adc	<R0
  4745 00:0EAB: 48           	pha
  4746 00:0EAC: A9 01 00     	lda	#$1
  4747 00:0EAF: FA           	plx
  4748                        	xref	~~~asl
  4749 00:0EB0: 22 xx xx xx  	jsl	~~~asl
  4750 00:0EB4: 49 FF FF     	eor	#<$ffffffff
  4751 00:0EB7: 85 01        	sta	<R0
  4752 00:0EB9: AD xx xx     	lda	|~~reg_dor
  Thu Dec  3 2020 22:25                                                Page 94


  4753 00:0EBC: 29 FF 00     	and	#$ff
  4754 00:0EBF: 85 05        	sta	<R1
  4755 00:0EC1: A5 05        	lda	<R1
  4756 00:0EC3: 25 01        	and	<R0
  4757 00:0EC5: 85 09        	sta	<R2
  4758 00:0EC7: E2 20        	sep	#$20
  4759                        	longa	off
  4760 00:0EC9: A5 09        	lda	<R2
  4761 00:0ECB: 8D xx xx     	sta	|~~reg_dor
  4762 00:0ECE: C2 20        	rep	#$20
  4763                        	longa	on
  4764                        ;			k_debug_hex("motoff_timer_off:",
                    reg_dor);
  4765                        	.line	1036
  4766 00:0ED0: AD xx xx     	lda	|~~reg_dor
  4767 00:0ED3: 48           	pha
  4768 00:0ED4: F4 xx xx     	pea	#^L176+18
  4769 00:0ED7: F4 xx xx     	pea	#<L176+18
  4770 00:0EDA: 22 xx xx xx  	jsl	~~k_debug_hex
  4771                        ;			outportb(FDC_DOR, reg_dor);
  4772                        	.line	1037
  4773 00:0EDE: E2 20        	sep	#$20
  4774                        	longa	off
  4775 00:0EE0: AD xx xx     	lda	|~~reg_dor
  4776 00:0EE3: 8F F2 13 AF  	sta	>11473906
  4777 00:0EE7: C2 20        	rep	#$20
  4778                        	longa	on
  4779                        ;			drives[cur_drive].motstate = 0;
  4780                        	.line	1038
  4781 00:0EE9: AD xx xx     	lda	|~~cur_drive
  4782 00:0EEC: 29 FF 00     	and	#$ff
  4783 00:0EEF: 85 01        	sta	<R0
  4784 00:0EF1: A5 01        	lda	<R0
  4785 00:0EF3: 0A           	asl	A
  4786 00:0EF4: 65 01        	adc	<R0
  4787 00:0EF6: 0A           	asl	A
  4788 00:0EF7: 85 01        	sta	<R0
  4789 00:0EF9: A9 00 00     	lda	#$0
  4790 00:0EFC: A6 01        	ldx	<R0
  4791 00:0EFE: 9D xx xx     	sta	|~~drives+2,X
  4792                        ;		}
  4793                        	.line	1039
  4794                        ;	}
  4795                        L10056:
  4796                        	.line	1040
  4797                        ;}
  4798                        L10055:
  4799                        	.line	1041
  4800                        L187:
  4801 00:0F01: 2B           	pld
  4802 00:0F02: 3B           	tsc
  4803 00:0F03: 18           	clc
  4804 00:0F04: 69 0C 00     	adc	#L181
  4805 00:0F07: 1B           	tcs
  4806 00:0F08: 6B           	rtl
  4807                        	.endblock	1041
  4808             0000000C   L181	equ	12
  4809             0000000D   L182	equ	13
  Thu Dec  3 2020 22:25                                                Page 95


  4810                        	ends
  4811                        	efunc
  4812                        	.endfunc	1041,13,12
  4813                        	.line	1041
  4814                        	data
  4815                        L176:
  4816 00:05B8: 6D 6F 74 6F  	db	$6D,$6F,$74,$6F,$66,$66,$5F,$74,$69,$6D,
                    $65,$72,$5F,$6F,$66
       00:05BC: 66 66 5F 74 
       00:05C0: 69 6D 65 72 
       00:05C4: 5F 6F 66 
  4817 00:05C7: 66 3A 00 6D  	db	$66,$3A,$00,$6D,$6F,$74,$6F,$66,$66,$5F,
                    $74,$69,$6D,$65,$72
       00:05CB: 6F 74 6F 66 
       00:05CF: 66 5F 74 69 
       00:05D3: 6D 65 72 
  4818 00:05D6: 5F 6F 66 66  	db	$5F,$6F,$66,$66,$3A,$00
       00:05DA: 3A 00 
  4819 00:05DC:              	ends
  4820                        ;
  4821                        ;BOOL k_fd_reset(VOID)
  4822                        ;{
  4823                        	.line	1043
  4824                        	.line	1044
  4825                        	code
  4826                        	xdef	~~k_fd_reset
  4827                        	func
  4828                        	.function	1044
  4829                        ~~k_fd_reset:
  4830                        	longa	on
  4831                        	longi	on
  4832 00:0F09: 3B           	tsc
  4833 00:0F0A: 38           	sec
  4834 00:0F0B: E9 00 00     	sbc	#L189
  4835 00:0F0E: 1B           	tcs
  4836 00:0F0F: 0B           	phd
  4837 00:0F10: 5B           	tcd
  4838                        	.block	1044
  4839                        ;	inportb(FDC_DOR);
  4840                        	.line	1045
  4841                        ;
  4842                        ;	return TRUE;
  4843                        	.line	1047
  4844 00:0F11: A9 01 00     	lda	#$1
  4845                        L192:
  4846 00:0F14: A8           	tay
  4847 00:0F15: 2B           	pld
  4848 00:0F16: 3B           	tsc
  4849 00:0F17: 18           	clc
  4850 00:0F18: 69 00 00     	adc	#L189
  4851 00:0F1B: 1B           	tcs
  4852 00:0F1C: 98           	tya
  4853 00:0F1D: 6B           	rtl
  4854                        ;}
  4855                        	.line	1048
  4856                        	.endblock	1048
  4857             00000000   L189	equ	0
  4858             00000001   L190	equ	1
  Thu Dec  3 2020 22:25                                                Page 96


  4859                        	ends
  4860                        	efunc
  4861                        	.endfunc	1048,1,0
  4862                        	.line	1048
  4863                        ;
  4864                        ;
  4865                        ;BOOL k_fd_init(VOID)
  4866                        ;{
  4867                        	.line	1051
  4868                        	.line	1052
  4869                        	code
  4870                        	xdef	~~k_fd_init
  4871                        	func
  4872                        	.function	1052
  4873                        ~~k_fd_init:
  4874                        	longa	on
  4875                        	longi	on
  4876 00:0F1E: 3B           	tsc
  4877 00:0F1F: 38           	sec
  4878 00:0F20: E9 08 00     	sbc	#L193
  4879 00:0F23: 1B           	tcs
  4880 00:0F24: 0B           	phd
  4881 00:0F25: 5B           	tcd
  4882                        	.block	1052
  4883                        ;	INT i = 0;
  4884                        ;	INT wait = 0;
  4885                        ;
  4886                        ;	inportb(FDC_DOR) = 0x04;
  4887             00000000   i_1	set	0
  4888             00000002   wait_1	set	2
  4889                        	.sym	i,0,5,1,16
  4890                        	.sym	wait,2,5,1,16
  4891 00:0F26: 64 05        	stz	<L194+i_1
  4892 00:0F28: 64 07        	stz	<L194+wait_1
  4893                        	.line	1056
  4894 00:0F2A: E2 20        	sep	#$20
  4895                        	longa	off
  4896 00:0F2C: A9 04        	lda	#$4
  4897 00:0F2E: 8F F2 13 AF  	sta	>11473906
  4898 00:0F32: C2 20        	rep	#$20
  4899                        	longa	on
  4900                        ;
  4901                        ;	sleep(1);
  4902                        	.line	1058
  4903 00:0F34: F4 01 00     	pea	#<$1
  4904 00:0F37: 22 xx xx xx  	jsl	~~sleep
  4905                        ;
  4906                        ;	inportb(FDC_DRS) = 0x02;
  4907                        	.line	1060
  4908 00:0F3B: E2 20        	sep	#$20
  4909                        	longa	off
  4910 00:0F3D: A9 02        	lda	#$2
  4911 00:0F3F: 8F F4 13 AF  	sta	>11473908
  4912 00:0F43: C2 20        	rep	#$20
  4913                        	longa	on
  4914                        ;
  4915                        ;	sleep(32768);
  4916                        	.line	1062
  Thu Dec  3 2020 22:25                                                Page 97


  4917 00:0F45: F4 00 80     	pea	#<$8000
  4918 00:0F48: 22 xx xx xx  	jsl	~~sleep
  4919                        ;
  4920                        ;	for ( i = 0; i < 5; i++)
  4921                        	.line	1064
  4922 00:0F4C: 64 05        	stz	<L194+i_1
  4923                        L10059:
  4924                        ;	{
  4925                        	.line	1065
  4926                        ;		sendbyte(CMD_SENSEI);
  4927                        	.line	1066
  4928 00:0F4E: F4 08 00     	pea	#<$8
  4929 00:0F51: 22 xx xx xx  	jsl	~~sendbyte
  4930                        ;		reg_sr0 = getbyte();
  4931                        	.line	1067
  4932 00:0F55: 22 xx xx xx  	jsl	~~getbyte
  4933 00:0F59: E2 20        	sep	#$20
  4934                        	longa	off
  4935 00:0F5B: 8D xx xx     	sta	|~~reg_sr0
  4936 00:0F5E: C2 20        	rep	#$20
  4937                        	longa	on
  4938                        ;		k_debug_bits("fdc_reset:CMD_SENSEI:reg_s
                    r0:",reg_sr0);
  4939                        	.line	1068
  4940 00:0F60: AD xx xx     	lda	|~~reg_sr0
  4941 00:0F63: 48           	pha
  4942 00:0F64: F4 xx xx     	pea	#^L188
  4943 00:0F67: F4 xx xx     	pea	#<L188
  4944 00:0F6A: 22 xx xx xx  	jsl	~~k_debug_bits
  4945                        ;		drives[i].track = getbyte();
  4946                        	.line	1069
  4947 00:0F6E: A5 05        	lda	<L194+i_1
  4948 00:0F70: 0A           	asl	A
  4949 00:0F71: 65 05        	adc	<L194+i_1
  4950 00:0F73: 0A           	asl	A
  4951 00:0F74: 85 01        	sta	<R0
  4952 00:0F76: 22 xx xx xx  	jsl	~~getbyte
  4953 00:0F7A: A6 01        	ldx	<R0
  4954 00:0F7C: 9D xx xx     	sta	|~~drives,X
  4955                        ;		k_debug_bits("fdc_reset:CMD_SENSEI:track
                    :",drives[i].track);
  4956                        	.line	1070
  4957 00:0F7F: A5 05        	lda	<L194+i_1
  4958 00:0F81: 0A           	asl	A
  4959 00:0F82: 65 05        	adc	<L194+i_1
  4960 00:0F84: 0A           	asl	A
  4961 00:0F85: 85 01        	sta	<R0
  4962 00:0F87: A6 01        	ldx	<R0
  4963 00:0F89: BD xx xx     	lda	|~~drives,X
  4964 00:0F8C: 48           	pha
  4965 00:0F8D: F4 xx xx     	pea	#^L188+30
  4966 00:0F90: F4 xx xx     	pea	#<L188+30
  4967 00:0F93: 22 xx xx xx  	jsl	~~k_debug_bits
  4968                        ;		sleep(30);
  4969                        	.line	1071
  4970 00:0F97: F4 1E 00     	pea	#<$1e
  4971 00:0F9A: 22 xx xx xx  	jsl	~~sleep
  4972                        ;	}
  Thu Dec  3 2020 22:25                                                Page 98


  4973                        	.line	1072
  4974                        L10057:
  4975 00:0F9E: E6 05        	inc	<L194+i_1
  4976 00:0FA0: A5 05        	lda	<L194+i_1
  4977 00:0FA2: 30 07        	bmi	L196
  4978 00:0FA4: 3A           	dea
  4979 00:0FA5: 3A           	dea
  4980 00:0FA6: 3A           	dea
  4981 00:0FA7: 3A           	dea
  4982 00:0FA8: 3A           	dea
  4983 00:0FA9: 10 03        	bpl	L197
  4984                        L196:
  4985 00:0FAB: 82 A0 FF     	brl	L10059
  4986                        L197:
  4987                        L10058:
  4988                        ;
  4989                        ;
  4990                        ;	return TRUE;
  4991                        	.line	1075
  4992 00:0FAE: A9 01 00     	lda	#$1
  4993                        L198:
  4994 00:0FB1: A8           	tay
  4995 00:0FB2: 2B           	pld
  4996 00:0FB3: 3B           	tsc
  4997 00:0FB4: 18           	clc
  4998 00:0FB5: 69 08 00     	adc	#L193
  4999 00:0FB8: 1B           	tcs
  5000 00:0FB9: 98           	tya
  5001 00:0FBA: 6B           	rtl
  5002                        ;}
  5003                        	.line	1076
  5004                        	.endblock	1076
  5005             00000008   L193	equ	8
  5006             00000005   L194	equ	5
  5007                        	ends
  5008                        	efunc
  5009                        	.endfunc	1076,5,8
  5010                        	.line	1076
  5011                        	data
  5012                        L188:
  5013 00:05DC: 66 64 63 5F  	db	$66,$64,$63,$5F,$72,$65,$73,$65,$74,$3A,
                    $43,$4D,$44,$5F,$53
       00:05E0: 72 65 73 65 
       00:05E4: 74 3A 43 4D 
       00:05E8: 44 5F 53 
  5014 00:05EB: 45 4E 53 45  	db	$45,$4E,$53,$45,$49,$3A,$72,$65,$67,$5F,
                    $73,$72,$30,$3A,$00
       00:05EF: 49 3A 72 65 
       00:05F3: 67 5F 73 72 
       00:05F7: 30 3A 00 
  5015 00:05FA: 66 64 63 5F  	db	$66,$64,$63,$5F,$72,$65,$73,$65,$74,$3A,
                    $43,$4D,$44,$5F,$53
       00:05FE: 72 65 73 65 
       00:0602: 74 3A 43 4D 
       00:0606: 44 5F 53 
  5016 00:0609: 45 4E 53 45  	db	$45,$4E,$53,$45,$49,$3A,$74,$72,$61,$63,
                    $6B,$3A,$00
       00:060D: 49 3A 74 72 
  Thu Dec  3 2020 22:25                                                Page 99


       00:0611: 61 63 6B 3A 
       00:0615: 00 
  5017 00:0616:              	ends
  5018                        ;
  5019                        ;BOOL k_fd_isreadable(VOID)
  5020                        ;{
  5021                        	.line	1078
  5022                        	.line	1079
  5023                        	code
  5024                        	xdef	~~k_fd_isreadable
  5025                        	func
  5026                        	.function	1079
  5027                        ~~k_fd_isreadable:
  5028                        	longa	on
  5029                        	longi	on
  5030 00:0FBB: 3B           	tsc
  5031 00:0FBC: 38           	sec
  5032 00:0FBD: E9 07 00     	sbc	#L200
  5033 00:0FC0: 1B           	tcs
  5034 00:0FC1: 0B           	phd
  5035 00:0FC2: 5B           	tcd
  5036                        	.block	1079
  5037                        ;	int timeout = 0;
  5038                        ;	UCHAR sts = 0;
  5039                        ;
  5040                        ;	for (timeout = 0; timeout < 0x0FF; timeout++)
  5041             00000000   timeout_1	set	0
  5042             00000002   sts_1	set	2
  5043                        	.sym	timeout,0,5,1,16
  5044                        	.sym	sts,2,14,1,8
  5045 00:0FC3: 64 05        	stz	<L201+timeout_1
  5046 00:0FC5: E2 20        	sep	#$20
  5047                        	longa	off
  5048 00:0FC7: 64 07        	stz	<L201+sts_1
  5049 00:0FC9: C2 20        	rep	#$20
  5050                        	longa	on
  5051                        	.line	1083
  5052 00:0FCB: 64 05        	stz	<L201+timeout_1
  5053                        L10062:
  5054                        ;	{
  5055                        	.line	1084
  5056                        ;		sts = inportb(FDC_MSR);
  5057                        	.line	1085
  5058 00:0FCD: E2 20        	sep	#$20
  5059                        	longa	off
  5060 00:0FCF: AF F4 13 AF  	lda	>11473908
  5061 00:0FD3: 85 07        	sta	<L201+sts_1
  5062 00:0FD5: C2 20        	rep	#$20
  5063                        	longa	on
  5064                        ;		if ((sts & MSR_DIO) == MSR_DIO)
  5065                        	.line	1086
  5066                        ;			return TRUE;
  5067 00:0FD7: A5 07        	lda	<L201+sts_1
  5068 00:0FD9: 29 40 00     	and	#<$40
  5069 00:0FDC: 85 01        	sta	<R0
  5070 00:0FDE: A5 01        	lda	<R0
  5071 00:0FE0: C9 40 00     	cmp	#<$40
  5072 00:0FE3: F0 03        	beq	L203
  Thu Dec  3 2020 22:25                                                Page 100


  5073 00:0FE5: 82 0D 00     	brl	L10063
  5074                        L203:
  5075                        	.line	1087
  5076 00:0FE8: A9 01 00     	lda	#$1
  5077                        L204:
  5078 00:0FEB: A8           	tay
  5079 00:0FEC: 2B           	pld
  5080 00:0FED: 3B           	tsc
  5081 00:0FEE: 18           	clc
  5082 00:0FEF: 69 07 00     	adc	#L200
  5083 00:0FF2: 1B           	tcs
  5084 00:0FF3: 98           	tya
  5085 00:0FF4: 6B           	rtl
  5086                        ;	}
  5087                        L10063:
  5088                        	.line	1088
  5089                        L10060:
  5090 00:0FF5: E6 05        	inc	<L201+timeout_1
  5091 00:0FF7: 38           	sec
  5092 00:0FF8: A5 05        	lda	<L201+timeout_1
  5093 00:0FFA: E9 FF 00     	sbc	#<$ff
  5094 00:0FFD: 70 03        	bvs	L205
  5095 00:0FFF: 49 00 80     	eor	#$8000
  5096                        L205:
  5097 00:1002: 30 03        	bmi	L206
  5098 00:1004: 82 C6 FF     	brl	L10062
  5099                        L206:
  5100                        L10061:
  5101                        ;
  5102                        ;	return FALSE;
  5103                        	.line	1090
  5104 00:1007: A9 00 00     	lda	#$0
  5105 00:100A: 82 DE FF     	brl	L204
  5106                        ;}
  5107                        	.line	1091
  5108                        	.endblock	1091
  5109             00000007   L200	equ	7
  5110             00000005   L201	equ	5
  5111                        	ends
  5112                        	efunc
  5113                        	.endfunc	1091,5,7
  5114                        	.line	1091
  5115                        ;
  5116                        ;BOOL k_fd_isready(VOID)
  5117                        ;{
  5118                        	.line	1093
  5119                        	.line	1094
  5120                        	code
  5121                        	xdef	~~k_fd_isready
  5122                        	func
  5123                        	.function	1094
  5124                        ~~k_fd_isready:
  5125                        	longa	on
  5126                        	longi	on
  5127 00:100D: 3B           	tsc
  5128 00:100E: 38           	sec
  5129 00:100F: E9 07 00     	sbc	#L207
  5130 00:1012: 1B           	tcs
  Thu Dec  3 2020 22:25                                                Page 101


  5131 00:1013: 0B           	phd
  5132 00:1014: 5B           	tcd
  5133                        	.block	1094
  5134                        ;	int timeout = 0;
  5135                        ;	UCHAR sts = 0;
  5136                        ;
  5137                        ;	for (timeout = 0; timeout < 0x0FF; timeout++)
  5138             00000000   timeout_1	set	0
  5139             00000002   sts_1	set	2
  5140                        	.sym	timeout,0,5,1,16
  5141                        	.sym	sts,2,14,1,8
  5142 00:1015: 64 05        	stz	<L208+timeout_1
  5143 00:1017: E2 20        	sep	#$20
  5144                        	longa	off
  5145 00:1019: 64 07        	stz	<L208+sts_1
  5146 00:101B: C2 20        	rep	#$20
  5147                        	longa	on
  5148                        	.line	1098
  5149 00:101D: 64 05        	stz	<L208+timeout_1
  5150                        L10066:
  5151                        ;	{
  5152                        	.line	1099
  5153                        ;		sts = inportb(FDC_MSR);
  5154                        	.line	1100
  5155 00:101F: E2 20        	sep	#$20
  5156                        	longa	off
  5157 00:1021: AF F4 13 AF  	lda	>11473908
  5158 00:1025: 85 07        	sta	<L208+sts_1
  5159 00:1027: C2 20        	rep	#$20
  5160                        	longa	on
  5161                        ;		if ((sts & MSR_RQM) == MSR_RQM)
  5162                        	.line	1101
  5163                        ;			return TRUE;
  5164 00:1029: A5 07        	lda	<L208+sts_1
  5165 00:102B: 29 80 00     	and	#<$80
  5166 00:102E: 85 01        	sta	<R0
  5167 00:1030: A5 01        	lda	<R0
  5168 00:1032: C9 80 00     	cmp	#<$80
  5169 00:1035: F0 03        	beq	L210
  5170 00:1037: 82 0D 00     	brl	L10067
  5171                        L210:
  5172                        	.line	1102
  5173 00:103A: A9 01 00     	lda	#$1
  5174                        L211:
  5175 00:103D: A8           	tay
  5176 00:103E: 2B           	pld
  5177 00:103F: 3B           	tsc
  5178 00:1040: 18           	clc
  5179 00:1041: 69 07 00     	adc	#L207
  5180 00:1044: 1B           	tcs
  5181 00:1045: 98           	tya
  5182 00:1046: 6B           	rtl
  5183                        ;	}
  5184                        L10067:
  5185                        	.line	1103
  5186                        L10064:
  5187 00:1047: E6 05        	inc	<L208+timeout_1
  5188 00:1049: 38           	sec
  Thu Dec  3 2020 22:25                                                Page 102


  5189 00:104A: A5 05        	lda	<L208+timeout_1
  5190 00:104C: E9 FF 00     	sbc	#<$ff
  5191 00:104F: 70 03        	bvs	L212
  5192 00:1051: 49 00 80     	eor	#$8000
  5193                        L212:
  5194 00:1054: 30 03        	bmi	L213
  5195 00:1056: 82 C6 FF     	brl	L10066
  5196                        L213:
  5197                        L10065:
  5198                        ;
  5199                        ;	return FALSE;
  5200                        	.line	1105
  5201 00:1059: A9 00 00     	lda	#$0
  5202 00:105C: 82 DE FF     	brl	L211
  5203                        ;}
  5204                        	.line	1106
  5205                        	.endblock	1106
  5206             00000007   L207	equ	7
  5207             00000005   L208	equ	5
  5208                        	ends
  5209                        	efunc
  5210                        	.endfunc	1106,5,7
  5211                        	.line	1106
  5212                        ;
  5213                        ;BOOL k_fd_isbusy(VOID)
  5214                        ;{
  5215                        	.line	1108
  5216                        	.line	1109
  5217                        	code
  5218                        	xdef	~~k_fd_isbusy
  5219                        	func
  5220                        	.function	1109
  5221                        ~~k_fd_isbusy:
  5222                        	longa	on
  5223                        	longi	on
  5224 00:105F: 3B           	tsc
  5225 00:1060: 38           	sec
  5226 00:1061: E9 03 00     	sbc	#L214
  5227 00:1064: 1B           	tcs
  5228 00:1065: 0B           	phd
  5229 00:1066: 5B           	tcd
  5230                        	.block	1109
  5231                        ;	int timeout = 0;
  5232                        ;	UCHAR sts = 0;
  5233                        ;
  5234                        ;	for (timeout = 0; timeout < 0x0FF; timeout++)
  5235             00000000   timeout_1	set	0
  5236             00000002   sts_1	set	2
  5237                        	.sym	timeout,0,5,1,16
  5238                        	.sym	sts,2,14,1,8
  5239 00:1067: 64 01        	stz	<L215+timeout_1
  5240 00:1069: E2 20        	sep	#$20
  5241                        	longa	off
  5242 00:106B: 64 03        	stz	<L215+sts_1
  5243 00:106D: C2 20        	rep	#$20
  5244                        	longa	on
  5245                        	.line	1113
  5246 00:106F: 64 01        	stz	<L215+timeout_1
  Thu Dec  3 2020 22:25                                                Page 103


  5247                        L10070:
  5248                        ;	{
  5249                        	.line	1114
  5250                        ;		sts = inportb(FDC_MSR);
  5251                        	.line	1115
  5252 00:1071: E2 20        	sep	#$20
  5253                        	longa	off
  5254 00:1073: AF F4 13 AF  	lda	>11473908
  5255 00:1077: 85 03        	sta	<L215+sts_1
  5256 00:1079: C2 20        	rep	#$20
  5257                        	longa	on
  5258                        ;		if ((sts & MSR_CB) == 0)
  5259                        	.line	1116
  5260                        ;			return TRUE;
  5261 00:107B: E2 20        	sep	#$20
  5262                        	longa	off
  5263 00:107D: A5 03        	lda	<L215+sts_1
  5264 00:107F: 29 10        	and	#<$10
  5265 00:1081: C2 20        	rep	#$20
  5266                        	longa	on
  5267 00:1083: F0 03        	beq	L217
  5268 00:1085: 82 0D 00     	brl	L10071
  5269                        L217:
  5270                        	.line	1117
  5271 00:1088: A9 01 00     	lda	#$1
  5272                        L218:
  5273 00:108B: A8           	tay
  5274 00:108C: 2B           	pld
  5275 00:108D: 3B           	tsc
  5276 00:108E: 18           	clc
  5277 00:108F: 69 03 00     	adc	#L214
  5278 00:1092: 1B           	tcs
  5279 00:1093: 98           	tya
  5280 00:1094: 6B           	rtl
  5281                        ;	}
  5282                        L10071:
  5283                        	.line	1118
  5284                        L10068:
  5285 00:1095: E6 01        	inc	<L215+timeout_1
  5286 00:1097: 38           	sec
  5287 00:1098: A5 01        	lda	<L215+timeout_1
  5288 00:109A: E9 FF 00     	sbc	#<$ff
  5289 00:109D: 70 03        	bvs	L219
  5290 00:109F: 49 00 80     	eor	#$8000
  5291                        L219:
  5292 00:10A2: 30 03        	bmi	L220
  5293 00:10A4: 82 CA FF     	brl	L10070
  5294                        L220:
  5295                        L10069:
  5296                        ;	return FALSE;
  5297                        	.line	1119
  5298 00:10A7: A9 00 00     	lda	#$0
  5299 00:10AA: 82 DE FF     	brl	L218
  5300                        ;}
  5301                        	.line	1120
  5302                        	.endblock	1120
  5303             00000003   L214	equ	3
  5304             00000001   L215	equ	1
  Thu Dec  3 2020 22:25                                                Page 104


  5305                        	ends
  5306                        	efunc
  5307                        	.endfunc	1120,1,3
  5308                        	.line	1120
  5309                        ;
  5310                        ;BOOL k_fd_isbusy_drive(UCHAR drive)
  5311                        ;{
  5312                        	.line	1122
  5313                        	.line	1123
  5314                        	code
  5315                        	xdef	~~k_fd_isbusy_drive
  5316                        	func
  5317                        	.function	1123
  5318                        ~~k_fd_isbusy_drive:
  5319                        	longa	on
  5320                        	longi	on
  5321 00:10AD: 3B           	tsc
  5322 00:10AE: 38           	sec
  5323 00:10AF: E9 03 00     	sbc	#L221
  5324 00:10B2: 1B           	tcs
  5325 00:10B3: 0B           	phd
  5326 00:10B4: 5B           	tcd
  5327             00000004   drive_0	set	4
  5328                        	.block	1123
  5329                        ;	int timeout = 0;
  5330                        ;	UCHAR sts = 0;
  5331                        ;
  5332                        ;	for (timeout = 0; timeout < 0x0FF; timeout++)
  5333             00000000   timeout_1	set	0
  5334             00000002   sts_1	set	2
  5335                        	.sym	timeout,0,5,1,16
  5336                        	.sym	sts,2,14,1,8
  5337                        	.sym	drive,4,14,6,8
  5338 00:10B5: 64 01        	stz	<L222+timeout_1
  5339 00:10B7: E2 20        	sep	#$20
  5340                        	longa	off
  5341 00:10B9: 64 03        	stz	<L222+sts_1
  5342 00:10BB: C2 20        	rep	#$20
  5343                        	longa	on
  5344                        	.line	1127
  5345 00:10BD: 64 01        	stz	<L222+timeout_1
  5346                        L10074:
  5347                        ;	{
  5348                        	.line	1128
  5349                        ;		sts = inportb(FDC_MSR);
  5350                        	.line	1129
  5351 00:10BF: E2 20        	sep	#$20
  5352                        	longa	off
  5353 00:10C1: AF F4 13 AF  	lda	>11473908
  5354 00:10C5: 85 03        	sta	<L222+sts_1
  5355 00:10C7: C2 20        	rep	#$20
  5356                        	longa	on
  5357                        ;		if ((sts & drive) == 0)
  5358                        	.line	1130
  5359                        ;			return TRUE;
  5360 00:10C9: E2 20        	sep	#$20
  5361                        	longa	off
  5362 00:10CB: A5 07        	lda	<L221+drive_0
  Thu Dec  3 2020 22:25                                                Page 105


  5363 00:10CD: 25 03        	and	<L222+sts_1
  5364 00:10CF: C2 20        	rep	#$20
  5365                        	longa	on
  5366 00:10D1: F0 03        	beq	L224
  5367 00:10D3: 82 15 00     	brl	L10075
  5368                        L224:
  5369                        	.line	1131
  5370 00:10D6: A9 01 00     	lda	#$1
  5371                        L225:
  5372 00:10D9: A8           	tay
  5373 00:10DA: A5 05        	lda	<L221+2
  5374 00:10DC: 85 07        	sta	<L221+2+2
  5375 00:10DE: A5 04        	lda	<L221+1
  5376 00:10E0: 85 06        	sta	<L221+1+2
  5377 00:10E2: 2B           	pld
  5378 00:10E3: 3B           	tsc
  5379 00:10E4: 18           	clc
  5380 00:10E5: 69 05 00     	adc	#L221+2
  5381 00:10E8: 1B           	tcs
  5382 00:10E9: 98           	tya
  5383 00:10EA: 6B           	rtl
  5384                        ;	}
  5385                        L10075:
  5386                        	.line	1132
  5387                        L10072:
  5388 00:10EB: E6 01        	inc	<L222+timeout_1
  5389 00:10ED: 38           	sec
  5390 00:10EE: A5 01        	lda	<L222+timeout_1
  5391 00:10F0: E9 FF 00     	sbc	#<$ff
  5392 00:10F3: 70 03        	bvs	L226
  5393 00:10F5: 49 00 80     	eor	#$8000
  5394                        L226:
  5395 00:10F8: 30 03        	bmi	L227
  5396 00:10FA: 82 C2 FF     	brl	L10074
  5397                        L227:
  5398                        L10073:
  5399                        ;	return FALSE;
  5400                        	.line	1133
  5401 00:10FD: A9 00 00     	lda	#$0
  5402 00:1100: 82 D6 FF     	brl	L225
  5403                        ;}
  5404                        	.line	1134
  5405                        	.endblock	1134
  5406             00000003   L221	equ	3
  5407             00000001   L222	equ	1
  5408                        	ends
  5409                        	efunc
  5410                        	.endfunc	1134,1,3
  5411                        	.line	1134
  5412                        ;
  5413                        ;UINT k_fd_read_sector(UCHAR *buf, ULONG lba)
  5414                        ;{
  5415                        	.line	1136
  5416                        	.line	1137
  5417                        	code
  5418                        	xdef	~~k_fd_read_sector
  5419                        	func
  5420                        	.function	1137
  Thu Dec  3 2020 22:25                                                Page 106


  5421                        ~~k_fd_read_sector:
  5422                        	longa	on
  5423                        	longi	on
  5424 00:1103: 3B           	tsc
  5425 00:1104: 38           	sec
  5426 00:1105: E9 00 00     	sbc	#L228
  5427 00:1108: 1B           	tcs
  5428 00:1109: 0B           	phd
  5429 00:110A: 5B           	tcd
  5430             00000004   buf_0	set	4
  5431             00000008   lba_0	set	8
  5432                        	.block	1137
  5433                        ;	return k_fd_read_lba(buf, lba, 1, FALSE);
  5434                        	.sym	buf,4,142,6,32
  5435                        	.sym	lba,8,18,6,32
  5436                        	.line	1138
  5437 00:110B: F4 00 00     	pea	#<$0
  5438 00:110E: F4 01 00     	pea	#<$1
  5439 00:1111: D4 0A        	pei	<L228+lba_0+2
  5440 00:1113: D4 08        	pei	<L228+lba_0
  5441 00:1115: D4 06        	pei	<L228+buf_0+2
  5442 00:1117: D4 04        	pei	<L228+buf_0
  5443 00:1119: 22 xx xx xx  	jsl	~~k_fd_read_lba
  5444                        L231:
  5445 00:111D: A8           	tay
  5446 00:111E: A5 02        	lda	<L228+2
  5447 00:1120: 85 0A        	sta	<L228+2+8
  5448 00:1122: A5 01        	lda	<L228+1
  5449 00:1124: 85 09        	sta	<L228+1+8
  5450 00:1126: 2B           	pld
  5451 00:1127: 3B           	tsc
  5452 00:1128: 18           	clc
  5453 00:1129: 69 08 00     	adc	#L228+8
  5454 00:112C: 1B           	tcs
  5455 00:112D: 98           	tya
  5456 00:112E: 6B           	rtl
  5457                        ;}
  5458                        	.line	1139
  5459                        	.endblock	1139
  5460             00000000   L228	equ	0
  5461             00000001   L229	equ	1
  5462                        	ends
  5463                        	efunc
  5464                        	.endfunc	1139,1,0
  5465                        	.line	1139
  5466                        ;
  5467                        ;static int k_fd_read_lba(UCHAR *buf, ULONG lba, U
                    INT num,int do_write)
  5468                        ;{
  5469                        	.line	1141
  5470                        	.line	1142
  5471                        	code
  5472                        	func
  5473                        	.function	1142
  5474                        ~~k_fd_read_lba:
  5475                        	longa	on
  5476                        	longi	on
  5477 00:112F: 3B           	tsc
  Thu Dec  3 2020 22:25                                                Page 107


  5478 00:1130: 38           	sec
  5479 00:1131: E9 0A 00     	sbc	#L232
  5480 00:1134: 1B           	tcs
  5481 00:1135: 0B           	phd
  5482 00:1136: 5B           	tcd
  5483             00000004   buf_0	set	4
  5484             00000008   lba_0	set	8
  5485             0000000C   num_0	set	12
  5486             0000000E   do_write_0	set	14
  5487                        	.block	1142
  5488                        ;	int i;
  5489                        ;	int res = 0;
  5490                        ;	UINT c, h, s;
  5491                        ;
  5492                        ;	motor_on();
  5493             00000000   i_1	set	0
  5494             00000002   res_1	set	2
  5495             00000004   c_1	set	4
  5496             00000006   h_1	set	6
  5497             00000008   s_1	set	8
  5498                        	.sym	i,0,5,1,16
  5499                        	.sym	res,2,5,1,16
  5500                        	.sym	c,4,16,1,16
  5501                        	.sym	h,6,16,1,16
  5502                        	.sym	s,8,16,1,16
  5503                        	.sym	buf,4,142,6,32
  5504                        	.sym	lba,8,18,6,32
  5505                        	.sym	num,12,16,6,16
  5506                        	.sym	do_write,14,5,6,16
  5507 00:1137: 64 03        	stz	<L233+res_1
  5508                        	.line	1147
  5509 00:1139: 22 xx xx xx  	jsl	~~motor_on
  5510                        ;
  5511                        ;	for (i = 0; i < num; i++)
  5512                        	.line	1149
  5513 00:113D: 64 01        	stz	<L233+i_1
  5514 00:113F: 82 57 00     	brl	L10079
  5515                        L10078:
  5516                        ;	{
  5517                        	.line	1150
  5518                        ;		k_debug_long("k_fd_read_lba:lba:", lba);
  5519                        	.line	1151
  5520 00:1142: D4 14        	pei	<L232+lba_0+2
  5521 00:1144: D4 12        	pei	<L232+lba_0
  5522 00:1146: F4 xx xx     	pea	#^L199
  5523 00:1149: F4 xx xx     	pea	#<L199
  5524 00:114C: 22 xx xx xx  	jsl	~~k_debug_long
  5525                        ;		lba_2_chs(lba, &c, &h, &s);
  5526                        	.line	1152
  5527 00:1150: F4 00 00     	pea	#0
  5528 00:1153: 18           	clc
  5529 00:1154: 7B           	tdc
  5530 00:1155: 69 09 00     	adc	#<L233+s_1
  5531 00:1158: 48           	pha
  5532 00:1159: F4 00 00     	pea	#0
  5533 00:115C: 18           	clc
  5534 00:115D: 7B           	tdc
  5535 00:115E: 69 07 00     	adc	#<L233+h_1
  Thu Dec  3 2020 22:25                                                Page 108


  5536 00:1161: 48           	pha
  5537 00:1162: F4 00 00     	pea	#0
  5538 00:1165: 18           	clc
  5539 00:1166: 7B           	tdc
  5540 00:1167: 69 05 00     	adc	#<L233+c_1
  5541 00:116A: 48           	pha
  5542 00:116B: D4 14        	pei	<L232+lba_0+2
  5543 00:116D: D4 12        	pei	<L232+lba_0
  5544 00:116F: 22 xx xx xx  	jsl	~~lba_2_chs
  5545                        ;
  5546                        ;		res = k_fd_rw_command(buf, do_write, c, 
                    h, s);
  5547                        	.line	1154
  5548 00:1173: D4 09        	pei	<L233+s_1
  5549 00:1175: D4 07        	pei	<L233+h_1
  5550 00:1177: D4 05        	pei	<L233+c_1
  5551 00:1179: D4 18        	pei	<L232+do_write_0
  5552 00:117B: D4 10        	pei	<L232+buf_0+2
  5553 00:117D: D4 0E        	pei	<L232+buf_0
  5554 00:117F: 22 xx xx xx  	jsl	~~k_fd_rw_command
  5555 00:1183: 85 03        	sta	<L233+res_1
  5556                        ;		k_debug_integer("k_fd_read_lba:res:", re
                    s);
  5557                        	.line	1155
  5558 00:1185: D4 03        	pei	<L233+res_1
  5559 00:1187: F4 xx xx     	pea	#^L199+19
  5560 00:118A: F4 xx xx     	pea	#<L199+19
  5561 00:118D: 22 xx xx xx  	jsl	~~k_debug_integer
  5562                        ;		lba++;
  5563                        	.line	1156
  5564 00:1191: E6 12        	inc	<L232+lba_0
  5565 00:1193: D0 02        	bne	L235
  5566 00:1195: E6 14        	inc	<L232+lba_0+2
  5567                        L235:
  5568                        ;	}
  5569                        	.line	1157
  5570                        L10076:
  5571 00:1197: E6 01        	inc	<L233+i_1
  5572                        L10079:
  5573 00:1199: A5 01        	lda	<L233+i_1
  5574 00:119B: C5 16        	cmp	<L232+num_0
  5575 00:119D: B0 03        	bcs	L236
  5576 00:119F: 82 A0 FF     	brl	L10078
  5577                        L236:
  5578                        L10077:
  5579                        ;
  5580                        ;	motor_off();
  5581                        	.line	1159
  5582 00:11A2: 22 xx xx xx  	jsl	~~motor_off
  5583                        ;
  5584                        ;	return res;
  5585                        	.line	1161
  5586 00:11A6: A5 03        	lda	<L233+res_1
  5587                        L237:
  5588 00:11A8: A8           	tay
  5589 00:11A9: A5 0C        	lda	<L232+2
  5590 00:11AB: 85 18        	sta	<L232+2+12
  5591 00:11AD: A5 0B        	lda	<L232+1
  Thu Dec  3 2020 22:25                                                Page 109


  5592 00:11AF: 85 17        	sta	<L232+1+12
  5593 00:11B1: 2B           	pld
  5594 00:11B2: 3B           	tsc
  5595 00:11B3: 18           	clc
  5596 00:11B4: 69 16 00     	adc	#L232+12
  5597 00:11B7: 1B           	tcs
  5598 00:11B8: 98           	tya
  5599 00:11B9: 6B           	rtl
  5600                        ;}
  5601                        	.line	1162
  5602                        	.endblock	1162
  5603             0000000A   L232	equ	10
  5604             00000001   L233	equ	1
  5605                        	ends
  5606                        	efunc
  5607                        	.endfunc	1162,1,10
  5608                        	.line	1162
  5609                        	data
  5610                        L199:
  5611 00:0616: 6B 5F 66 64  	db	$6B,$5F,$66,$64,$5F,$72,$65,$61,$64,$5F,
                    $6C,$62,$61,$3A,$6C
       00:061A: 5F 72 65 61 
       00:061E: 64 5F 6C 62 
       00:0622: 61 3A 6C 
  5612 00:0625: 62 61 3A 00  	db	$62,$61,$3A,$00,$6B,$5F,$66,$64,$5F,$72,
                    $65,$61,$64,$5F,$6C
       00:0629: 6B 5F 66 64 
       00:062D: 5F 72 65 61 
       00:0631: 64 5F 6C 
  5613 00:0634: 62 61 3A 72  	db	$62,$61,$3A,$72,$65,$73,$3A,$00
       00:0638: 65 73 3A 00 
  5614 00:063C:              	ends
  5615                        ;
  5616                        ;static int k_fd_rw_command(UCHAR* buf, int do_wri
                    te, UINT c,UINT h, UINT s)
  5617                        ;{
  5618                        	.line	1164
  5619                        	.line	1165
  5620                        	code
  5621                        	func
  5622                        	.function	1165
  5623                        ~~k_fd_rw_command:
  5624                        	longa	on
  5625                        	longi	on
  5626 00:11BA: 3B           	tsc
  5627 00:11BB: 38           	sec
  5628 00:11BC: E9 0D 00     	sbc	#L239
  5629 00:11BF: 1B           	tcs
  5630 00:11C0: 0B           	phd
  5631 00:11C1: 5B           	tcd
  5632             00000004   buf_0	set	4
  5633             00000008   do_write_0	set	8
  5634             0000000A   c_0	set	10
  5635             0000000C   h_0	set	12
  5636             0000000E   s_0	set	14
  5637                        	.block	1165
  5638                        ;	int i = 0;
  5639                        ;	UCHAR msr = 0;
  Thu Dec  3 2020 22:25                                                Page 110


  5640                        ;	UCHAR cmd = do_write ? CMD_WRITE : CMD_READ;
  5641                        ;	//UCHAR cmd = do_write ? CMD_WRITE : 0xE6;
  5642                        ;	BOOL retCode = FALSE;
  5643                        ;
  5644                        ;	k_debug_integer("k_fd_rw_command:",cur_drive);
  5645             00000000   i_1	set	0
  5646             00000002   msr_1	set	2
  5647             00000003   cmd_1	set	3
  5648             00000004   retCode_1	set	4
  5649                        	.sym	i,0,5,1,16
  5650                        	.sym	msr,2,14,1,8
  5651                        	.sym	cmd,3,14,1,8
  5652                        	.sym	retCode,4,14,1,8
  5653                        	.sym	buf,4,142,6,32
  5654                        	.sym	do_write,8,5,6,16
  5655                        	.sym	c,10,16,6,16
  5656                        	.sym	h,12,16,6,16
  5657                        	.sym	s,14,16,6,16
  5658 00:11C2: 64 09        	stz	<L240+i_1
  5659 00:11C4: E2 20        	sep	#$20
  5660                        	longa	off
  5661 00:11C6: 64 0B        	stz	<L240+msr_1
  5662 00:11C8: C2 20        	rep	#$20
  5663                        	longa	on
  5664 00:11CA: A5 15        	lda	<L239+do_write_0
  5665 00:11CC: D0 03        	bne	L243
  5666 00:11CE: 82 05 00     	brl	L242
  5667                        L243:
  5668 00:11D1: A9 45 00     	lda	#$45
  5669 00:11D4: 80 03        	bra	L244
  5670                        L242:
  5671 00:11D6: A9 46 00     	lda	#$46
  5672                        L244:
  5673 00:11D9: 85 01        	sta	<R0
  5674 00:11DB: E2 20        	sep	#$20
  5675                        	longa	off
  5676 00:11DD: A5 01        	lda	<R0
  5677 00:11DF: 85 0C        	sta	<L240+cmd_1
  5678 00:11E1: C2 20        	rep	#$20
  5679                        	longa	on
  5680 00:11E3: E2 20        	sep	#$20
  5681                        	longa	off
  5682 00:11E5: 64 0D        	stz	<L240+retCode_1
  5683 00:11E7: C2 20        	rep	#$20
  5684                        	longa	on
  5685                        	.line	1172
  5686 00:11E9: AD xx xx     	lda	|~~cur_drive
  5687 00:11EC: 29 FF 00     	and	#$ff
  5688 00:11EF: 48           	pha
  5689 00:11F0: F4 xx xx     	pea	#^L238
  5690 00:11F3: F4 xx xx     	pea	#<L238
  5691 00:11F6: 22 xx xx xx  	jsl	~~k_debug_integer
  5692                        ;	k_debug_integer("k_fd_rw_command:track:",c);
  5693                        	.line	1173
  5694 00:11FA: D4 17        	pei	<L239+c_0
  5695 00:11FC: F4 xx xx     	pea	#^L238+17
  5696 00:11FF: F4 xx xx     	pea	#<L238+17
  5697 00:1202: 22 xx xx xx  	jsl	~~k_debug_integer
  Thu Dec  3 2020 22:25                                                Page 111


  5698                        ;	k_debug_integer("k_fd_rw_command:head:",h);
  5699                        	.line	1174
  5700 00:1206: D4 19        	pei	<L239+h_0
  5701 00:1208: F4 xx xx     	pea	#^L238+40
  5702 00:120B: F4 xx xx     	pea	#<L238+40
  5703 00:120E: 22 xx xx xx  	jsl	~~k_debug_integer
  5704                        ;	k_debug_integer("k_fd_rw_command:sector:",s);
  5705                        	.line	1175
  5706 00:1212: D4 1B        	pei	<L239+s_0
  5707 00:1214: F4 xx xx     	pea	#^L238+62
  5708 00:1217: F4 xx xx     	pea	#<L238+62
  5709 00:121A: 22 xx xx xx  	jsl	~~k_debug_integer
  5710                        ;
  5711                        ;
  5712                        ;	//floppy_seek(c);
  5713                        ;
  5714                        ;	//sleep(32768);
  5715                        ;	//sleep(DRIVE_H1440_SPINUP);
  5716                        ;
  5717                        ;	sendbyte(CMD_SENSEI);
  5718                        	.line	1183
  5719 00:121E: F4 08 00     	pea	#<$8
  5720 00:1221: 22 xx xx xx  	jsl	~~sendbyte
  5721                        ;	reg_sr0 = getbyte();
  5722                        	.line	1184
  5723 00:1225: 22 xx xx xx  	jsl	~~getbyte
  5724 00:1229: E2 20        	sep	#$20
  5725                        	longa	off
  5726 00:122B: 8D xx xx     	sta	|~~reg_sr0
  5727 00:122E: C2 20        	rep	#$20
  5728                        	longa	on
  5729                        ;	k_debug_hex("k_fd_rw_command:CMD_SENSEI:reg_sr0:
                    ",reg_sr0);
  5730                        	.line	1185
  5731 00:1230: AD xx xx     	lda	|~~reg_sr0
  5732 00:1233: 48           	pha
  5733 00:1234: F4 xx xx     	pea	#^L238+86
  5734 00:1237: F4 xx xx     	pea	#<L238+86
  5735 00:123A: 22 xx xx xx  	jsl	~~k_debug_hex
  5736                        ;	drives[cur_drive].track = getbyte();
  5737                        	.line	1186
  5738 00:123E: AD xx xx     	lda	|~~cur_drive
  5739 00:1241: 29 FF 00     	and	#$ff
  5740 00:1244: 85 01        	sta	<R0
  5741 00:1246: A5 01        	lda	<R0
  5742 00:1248: 0A           	asl	A
  5743 00:1249: 65 01        	adc	<R0
  5744 00:124B: 0A           	asl	A
  5745 00:124C: 85 01        	sta	<R0
  5746 00:124E: 22 xx xx xx  	jsl	~~getbyte
  5747 00:1252: A6 01        	ldx	<R0
  5748 00:1254: 9D xx xx     	sta	|~~drives,X
  5749                        ;	k_debug_hex("k_fd_rw_command:CMD_SENSEI:track:",
                    drives[cur_drive].track);
  5750                        	.line	1187
  5751 00:1257: AD xx xx     	lda	|~~cur_drive
  5752 00:125A: 29 FF 00     	and	#$ff
  5753 00:125D: 85 01        	sta	<R0
  Thu Dec  3 2020 22:25                                                Page 112


  5754 00:125F: A5 01        	lda	<R0
  5755 00:1261: 0A           	asl	A
  5756 00:1262: 65 01        	adc	<R0
  5757 00:1264: 0A           	asl	A
  5758 00:1265: 85 01        	sta	<R0
  5759 00:1267: A6 01        	ldx	<R0
  5760 00:1269: BD xx xx     	lda	|~~drives,X
  5761 00:126C: 48           	pha
  5762 00:126D: F4 xx xx     	pea	#^L238+122
  5763 00:1270: F4 xx xx     	pea	#<L238+122
  5764 00:1273: 22 xx xx xx  	jsl	~~k_debug_hex
  5765                        ;
  5766                        ;	sleep(32768);
  5767                        	.line	1189
  5768 00:1277: F4 00 80     	pea	#<$8000
  5769 00:127A: 22 xx xx xx  	jsl	~~sleep
  5770                        ;
  5771                        ;	k_debug_string("k_fd_rw_command:READING NOW!\r\n
                    ");
  5772                        	.line	1191
  5773 00:127E: F4 xx xx     	pea	#^L238+156
  5774 00:1281: F4 xx xx     	pea	#<L238+156
  5775 00:1284: 22 xx xx xx  	jsl	~~k_debug_string
  5776                        ;
  5777                        ;	sendbyte(cmd);
  5778                        	.line	1193
  5779 00:1288: D4 0C        	pei	<L240+cmd_1
  5780 00:128A: 22 xx xx xx  	jsl	~~sendbyte
  5781                        ;	sendbyte((UCHAR) ((h << 2) | cur_drive));
  5782                        	.line	1194
  5783 00:128E: A5 19        	lda	<L239+h_0
  5784 00:1290: 0A           	asl	A
  5785 00:1291: 0A           	asl	A
  5786 00:1292: 85 01        	sta	<R0
  5787 00:1294: AD xx xx     	lda	|~~cur_drive
  5788 00:1297: 29 FF 00     	and	#$ff
  5789 00:129A: 85 05        	sta	<R1
  5790 00:129C: A5 05        	lda	<R1
  5791 00:129E: 05 01        	ora	<R0
  5792 00:12A0: 48           	pha
  5793 00:12A1: 22 xx xx xx  	jsl	~~sendbyte
  5794                        ;	//sendbyte((UCHAR) 0x00);
  5795                        ;	sendbyte((UCHAR) c);
  5796                        	.line	1196
  5797 00:12A5: D4 17        	pei	<L239+c_0
  5798 00:12A7: 22 xx xx xx  	jsl	~~sendbyte
  5799                        ;	sendbyte((UCHAR) h);
  5800                        	.line	1197
  5801 00:12AB: D4 19        	pei	<L239+h_0
  5802 00:12AD: 22 xx xx xx  	jsl	~~sendbyte
  5803                        ;	sendbyte((UCHAR) s);
  5804                        	.line	1198
  5805 00:12B1: D4 1B        	pei	<L239+s_0
  5806 00:12B3: 22 xx xx xx  	jsl	~~sendbyte
  5807                        ;	sendbyte(0x2);
  5808                        	.line	1199
  5809 00:12B7: F4 02 00     	pea	#<$2
  5810 00:12BA: 22 xx xx xx  	jsl	~~sendbyte
  Thu Dec  3 2020 22:25                                                Page 113


  5811                        ;	sendbyte((UCHAR) SEC_PER_TRACK);
  5812                        	.line	1200
  5813 00:12BE: F4 12 00     	pea	#<$12
  5814 00:12C1: 22 xx xx xx  	jsl	~~sendbyte
  5815                        ;	sendbyte(0x1b);
  5816                        	.line	1201
  5817 00:12C5: F4 1B 00     	pea	#<$1b
  5818 00:12C8: 22 xx xx xx  	jsl	~~sendbyte
  5819                        ;	sendbyte(0xff);
  5820                        	.line	1202
  5821 00:12CC: F4 FF 00     	pea	#<$ff
  5822 00:12CF: 22 xx xx xx  	jsl	~~sendbyte
  5823                        ;
  5824                        ;	sleep(DRIVE_H1440_SPINUP);
  5825                        	.line	1204
  5826 00:12D3: F4 90 01     	pea	#<$190
  5827 00:12D6: 22 xx xx xx  	jsl	~~sleep
  5828                        ;	sleep(DRIVE_H1440_SPINUP);
  5829                        	.line	1205
  5830 00:12DA: F4 90 01     	pea	#<$190
  5831 00:12DD: 22 xx xx xx  	jsl	~~sleep
  5832                        ;
  5833                        ;	k_fd_isreadable();
  5834                        	.line	1207
  5835 00:12E1: 22 xx xx xx  	jsl	~~k_fd_isreadable
  5836                        ;
  5837                        ;	for (i = 0; i < SECTOR_SIZE; i++)
  5838                        	.line	1209
  5839 00:12E5: 64 09        	stz	<L240+i_1
  5840                        L10082:
  5841                        ;	{
  5842                        	.line	1210
  5843                        ;		msr = inportb(FDC_MSR);
  5844                        	.line	1211
  5845 00:12E7: E2 20        	sep	#$20
  5846                        	longa	off
  5847 00:12E9: AF F4 13 AF  	lda	>11473908
  5848 00:12ED: 85 0B        	sta	<L240+msr_1
  5849 00:12EF: C2 20        	rep	#$20
  5850                        	longa	on
  5851                        ;		//k_debug_bits("floppy_transfer_try1:msr
                    :",msr);
  5852                        ;		if(msr & (MSR_RQM |  MSR_DIO))
  5853                        	.line	1213
  5854                        ;			break;
  5855 00:12F1: E2 20        	sep	#$20
  5856                        	longa	off
  5857 00:12F3: A5 0B        	lda	<L240+msr_1
  5858 00:12F5: 29 C0        	and	#<$c0
  5859 00:12F7: C2 20        	rep	#$20
  5860                        	longa	on
  5861 00:12F9: F0 03        	beq	L245
  5862 00:12FB: 82 1E 00     	brl	L10081
  5863                        L245:
  5864                        ;		//k_debug_integer("floppy_transfer_try:f
                    loppybufferIndex:",floppybufferIndex);
  5865                        ;		buf[i] = getbyte();
  5866                        	.line	1216
  Thu Dec  3 2020 22:25                                                Page 114


  5867 00:12FE: 22 xx xx xx  	jsl	~~getbyte
  5868 00:1302: E2 20        	sep	#$20
  5869                        	longa	off
  5870 00:1304: A4 09        	ldy	<L240+i_1
  5871 00:1306: 97 11        	sta	[<L239+buf_0],Y
  5872 00:1308: C2 20        	rep	#$20
  5873                        	longa	on
  5874                        ;
  5875                        ;	}
  5876                        	.line	1218
  5877                        L10080:
  5878 00:130A: E6 09        	inc	<L240+i_1
  5879 00:130C: 38           	sec
  5880 00:130D: A5 09        	lda	<L240+i_1
  5881 00:130F: E9 00 02     	sbc	#<$200
  5882 00:1312: 70 03        	bvs	L246
  5883 00:1314: 49 00 80     	eor	#$8000
  5884                        L246:
  5885 00:1317: 30 03        	bmi	L247
  5886 00:1319: 82 CB FF     	brl	L10082
  5887                        L247:
  5888                        L10081:
  5889                        ;
  5890                        ;	k_debug_byte_array("DATA:\r\n",buf,512);
  5891                        	.line	1220
  5892 00:131C: F4 00 00     	pea	#^$200
  5893 00:131F: F4 00 02     	pea	#<$200
  5894 00:1322: D4 13        	pei	<L239+buf_0+2
  5895 00:1324: D4 11        	pei	<L239+buf_0
  5896 00:1326: F4 xx xx     	pea	#^L238+187
  5897 00:1329: F4 xx xx     	pea	#<L238+187
  5898 00:132C: 22 xx xx xx  	jsl	~~k_debug_byte_array
  5899                        ;
  5900                        ;
  5901                        ;	reg_sr0 = getbyte();
  5902                        	.line	1223
  5903 00:1330: 22 xx xx xx  	jsl	~~getbyte
  5904 00:1334: E2 20        	sep	#$20
  5905                        	longa	off
  5906 00:1336: 8D xx xx     	sta	|~~reg_sr0
  5907 00:1339: C2 20        	rep	#$20
  5908                        	longa	on
  5909                        ;	k_debug_bits("floppy_transfer_try1:reg_sr0:msr:"
                    ,reg_sr0);
  5910                        	.line	1224
  5911 00:133B: AD xx xx     	lda	|~~reg_sr0
  5912 00:133E: 48           	pha
  5913 00:133F: F4 xx xx     	pea	#^L238+195
  5914 00:1342: F4 xx xx     	pea	#<L238+195
  5915 00:1345: 22 xx xx xx  	jsl	~~k_debug_bits
  5916                        ;	reg_sr1 = getbyte();
  5917                        	.line	1225
  5918 00:1349: 22 xx xx xx  	jsl	~~getbyte
  5919 00:134D: E2 20        	sep	#$20
  5920                        	longa	off
  5921 00:134F: 8D xx xx     	sta	|~~reg_sr1
  5922 00:1352: C2 20        	rep	#$20
  5923                        	longa	on
  Thu Dec  3 2020 22:25                                                Page 115


  5924                        ;	k_debug_bits("floppy_transfer_try1:reg_sr1:msr:"
                    ,reg_sr1);
  5925                        	.line	1226
  5926 00:1354: AD xx xx     	lda	|~~reg_sr1
  5927 00:1357: 48           	pha
  5928 00:1358: F4 xx xx     	pea	#^L238+229
  5929 00:135B: F4 xx xx     	pea	#<L238+229
  5930 00:135E: 22 xx xx xx  	jsl	~~k_debug_bits
  5931                        ;	reg_sr2 = getbyte();
  5932                        	.line	1227
  5933 00:1362: 22 xx xx xx  	jsl	~~getbyte
  5934 00:1366: E2 20        	sep	#$20
  5935                        	longa	off
  5936 00:1368: 8D xx xx     	sta	|~~reg_sr2
  5937 00:136B: C2 20        	rep	#$20
  5938                        	longa	on
  5939                        ;	k_debug_bits("floppy_transfer_try1:reg_sr2:msr:"
                    ,reg_sr2);
  5940                        	.line	1228
  5941 00:136D: AD xx xx     	lda	|~~reg_sr2
  5942 00:1370: 48           	pha
  5943 00:1371: F4 xx xx     	pea	#^L238+263
  5944 00:1374: F4 xx xx     	pea	#<L238+263
  5945 00:1377: 22 xx xx xx  	jsl	~~k_debug_bits
  5946                        ;	drives[cur_drive].track = getbyte();
  5947                        	.line	1229
  5948 00:137B: AD xx xx     	lda	|~~cur_drive
  5949 00:137E: 29 FF 00     	and	#$ff
  5950 00:1381: 85 01        	sta	<R0
  5951 00:1383: A5 01        	lda	<R0
  5952 00:1385: 0A           	asl	A
  5953 00:1386: 65 01        	adc	<R0
  5954 00:1388: 0A           	asl	A
  5955 00:1389: 85 01        	sta	<R0
  5956 00:138B: 22 xx xx xx  	jsl	~~getbyte
  5957 00:138F: A6 01        	ldx	<R0
  5958 00:1391: 9D xx xx     	sta	|~~drives,X
  5959                        ;
  5960                        ;	//k_debug_integer("floppy_transfer_try:drives[cu
                    r_drive].track:",drives[cur_drive].track);
  5961                        ;
  5962                        ;	i = getbyte();
  5963                        	.line	1233
  5964 00:1394: 22 xx xx xx  	jsl	~~getbyte
  5965 00:1398: 85 09        	sta	<L240+i_1
  5966                        ;	k_debug_bits("floppy_transfer_try1:1:c:",i);
  5967                        	.line	1234
  5968 00:139A: D4 09        	pei	<L240+i_1
  5969 00:139C: F4 xx xx     	pea	#^L238+297
  5970 00:139F: F4 xx xx     	pea	#<L238+297
  5971 00:13A2: 22 xx xx xx  	jsl	~~k_debug_bits
  5972                        ;	//k_debug_integer("floppy_transfer_try:i1:",i);
  5973                        ;	i = getbyte();
  5974                        	.line	1236
  5975 00:13A6: 22 xx xx xx  	jsl	~~getbyte
  5976 00:13AA: 85 09        	sta	<L240+i_1
  5977                        ;	k_debug_bits("floppy_transfer_try1:2:h:",i);
  5978                        	.line	1237
  Thu Dec  3 2020 22:25                                                Page 116


  5979 00:13AC: D4 09        	pei	<L240+i_1
  5980 00:13AE: F4 xx xx     	pea	#^L238+323
  5981 00:13B1: F4 xx xx     	pea	#<L238+323
  5982 00:13B4: 22 xx xx xx  	jsl	~~k_debug_bits
  5983                        ;	//k_debug_integer("floppy_transfer_try:i2:",i);
  5984                        ;	i = getbyte();
  5985                        	.line	1239
  5986 00:13B8: 22 xx xx xx  	jsl	~~getbyte
  5987 00:13BC: 85 09        	sta	<L240+i_1
  5988                        ;	k_debug_bits("floppy_transfer_try1:3:r:",i);
  5989                        	.line	1240
  5990 00:13BE: D4 09        	pei	<L240+i_1
  5991 00:13C0: F4 xx xx     	pea	#^L238+349
  5992 00:13C3: F4 xx xx     	pea	#<L238+349
  5993 00:13C6: 22 xx xx xx  	jsl	~~k_debug_bits
  5994                        ;	//k_debug_integer("floppy_transfer_try:i3:",i);
  5995                        ;	i = getbyte();
  5996                        	.line	1242
  5997 00:13CA: 22 xx xx xx  	jsl	~~getbyte
  5998 00:13CE: 85 09        	sta	<L240+i_1
  5999                        ;	k_debug_bits("floppy_transfer_try1:3:n:",i);
  6000                        	.line	1243
  6001 00:13D0: D4 09        	pei	<L240+i_1
  6002 00:13D2: F4 xx xx     	pea	#^L238+375
  6003 00:13D5: F4 xx xx     	pea	#<L238+375
  6004 00:13D8: 22 xx xx xx  	jsl	~~k_debug_bits
  6005                        ;	//k_debug_integer("floppy_transfer_try:i3:",i);
  6006                        ;
  6007                        ;	k_debug_integer("floppy_transfer_try:floppybuffe
                    rIndex:",floppybufferIndex);
  6008                        	.line	1246
  6009 00:13DC: AD xx xx     	lda	|~~floppybufferIndex
  6010 00:13DF: 48           	pha
  6011 00:13E0: F4 xx xx     	pea	#^L238+401
  6012 00:13E3: F4 xx xx     	pea	#<L238+401
  6013 00:13E6: 22 xx xx xx  	jsl	~~k_debug_integer
  6014                        ;	//return i != 2;
  6015                        ;
  6016                        ;	retCode = (i != 2);
  6017                        	.line	1249
  6018 00:13EA: 64 01        	stz	<R0
  6019 00:13EC: A5 09        	lda	<L240+i_1
  6020 00:13EE: C9 02 00     	cmp	#<$2
  6021 00:13F1: D0 03        	bne	L249
  6022 00:13F3: 82 02 00     	brl	L248
  6023                        L249:
  6024 00:13F6: E6 01        	inc	<R0
  6025                        L248:
  6026 00:13F8: E2 20        	sep	#$20
  6027                        	longa	off
  6028 00:13FA: A5 01        	lda	<R0
  6029 00:13FC: 85 0D        	sta	<L240+retCode_1
  6030 00:13FE: C2 20        	rep	#$20
  6031                        	longa	on
  6032                        ;
  6033                        ;	return retCode;
  6034                        	.line	1251
  6035 00:1400: A5 0D        	lda	<L240+retCode_1
  Thu Dec  3 2020 22:25                                                Page 117


  6036 00:1402: 29 FF 00     	and	#$ff
  6037                        L250:
  6038 00:1405: A8           	tay
  6039 00:1406: A5 0F        	lda	<L239+2
  6040 00:1408: 85 1B        	sta	<L239+2+12
  6041 00:140A: A5 0E        	lda	<L239+1
  6042 00:140C: 85 1A        	sta	<L239+1+12
  6043 00:140E: 2B           	pld
  6044 00:140F: 3B           	tsc
  6045 00:1410: 18           	clc
  6046 00:1411: 69 19 00     	adc	#L239+12
  6047 00:1414: 1B           	tcs
  6048 00:1415: 98           	tya
  6049 00:1416: 6B           	rtl
  6050                        ;}
  6051                        	.line	1252
  6052                        	.endblock	1252
  6053             0000000D   L239	equ	13
  6054             00000009   L240	equ	9
  6055                        	ends
  6056                        	efunc
  6057                        	.endfunc	1252,9,13
  6058                        	.line	1252
  6059                        	data
  6060                        L238:
  6061 00:063C: 6B 5F 66 64  	db	$6B,$5F,$66,$64,$5F,$72,$77,$5F,$63,$6F,
                    $6D,$6D,$61,$6E,$64
       00:0640: 5F 72 77 5F 
       00:0644: 63 6F 6D 6D 
       00:0648: 61 6E 64 
  6062 00:064B: 3A 00 6B 5F  	db	$3A,$00,$6B,$5F,$66,$64,$5F,$72,$77,$5F,
                    $63,$6F,$6D,$6D,$61
       00:064F: 66 64 5F 72 
       00:0653: 77 5F 63 6F 
       00:0657: 6D 6D 61 
  6063 00:065A: 6E 64 3A 74  	db	$6E,$64,$3A,$74,$72,$61,$63,$6B,$3A,$00,
                    $6B,$5F,$66,$64,$5F
       00:065E: 72 61 63 6B 
       00:0662: 3A 00 6B 5F 
       00:0666: 66 64 5F 
  6064 00:0669: 72 77 5F 63  	db	$72,$77,$5F,$63,$6F,$6D,$6D,$61,$6E,$64,
                    $3A,$68,$65,$61,$64
       00:066D: 6F 6D 6D 61 
       00:0671: 6E 64 3A 68 
       00:0675: 65 61 64 
  6065 00:0678: 3A 00 6B 5F  	db	$3A,$00,$6B,$5F,$66,$64,$5F,$72,$77,$5F,
                    $63,$6F,$6D,$6D,$61
       00:067C: 66 64 5F 72 
       00:0680: 77 5F 63 6F 
       00:0684: 6D 6D 61 
  6066 00:0687: 6E 64 3A 73  	db	$6E,$64,$3A,$73,$65,$63,$74,$6F,$72,$3A,
                    $00,$6B,$5F,$66,$64
       00:068B: 65 63 74 6F 
       00:068F: 72 3A 00 6B 
       00:0693: 5F 66 64 
  6067 00:0696: 5F 72 77 5F  	db	$5F,$72,$77,$5F,$63,$6F,$6D,$6D,$61,$6E,
                    $64,$3A,$43,$4D,$44
       00:069A: 63 6F 6D 6D 
  Thu Dec  3 2020 22:25                                                Page 118


       00:069E: 61 6E 64 3A 
       00:06A2: 43 4D 44 
  6068 00:06A5: 5F 53 45 4E  	db	$5F,$53,$45,$4E,$53,$45,$49,$3A,$72,$65,
                    $67,$5F,$73,$72,$30
       00:06A9: 53 45 49 3A 
       00:06AD: 72 65 67 5F 
       00:06B1: 73 72 30 
  6069 00:06B4: 3A 00 6B 5F  	db	$3A,$00,$6B,$5F,$66,$64,$5F,$72,$77,$5F,
                    $63,$6F,$6D,$6D,$61
       00:06B8: 66 64 5F 72 
       00:06BC: 77 5F 63 6F 
       00:06C0: 6D 6D 61 
  6070 00:06C3: 6E 64 3A 43  	db	$6E,$64,$3A,$43,$4D,$44,$5F,$53,$45,$4E,
                    $53,$45,$49,$3A,$74
       00:06C7: 4D 44 5F 53 
       00:06CB: 45 4E 53 45 
       00:06CF: 49 3A 74 
  6071 00:06D2: 72 61 63 6B  	db	$72,$61,$63,$6B,$3A,$00,$6B,$5F,$66,$64,
                    $5F,$72,$77,$5F,$63
       00:06D6: 3A 00 6B 5F 
       00:06DA: 66 64 5F 72 
       00:06DE: 77 5F 63 
  6072 00:06E1: 6F 6D 6D 61  	db	$6F,$6D,$6D,$61,$6E,$64,$3A,$52,$45,$41,
                    $44,$49,$4E,$47,$20
       00:06E5: 6E 64 3A 52 
       00:06E9: 45 41 44 49 
       00:06ED: 4E 47 20 
  6073 00:06F0: 4E 4F 57 21  	db	$4E,$4F,$57,$21,$0D,$0A,$00,$44,$41,$54,
                    $41,$3A,$0D,$0A,$00
       00:06F4: 0D 0A 00 44 
       00:06F8: 41 54 41 3A 
       00:06FC: 0D 0A 00 
  6074 00:06FF: 66 6C 6F 70  	db	$66,$6C,$6F,$70,$70,$79,$5F,$74,$72,$61,
                    $6E,$73,$66,$65,$72
       00:0703: 70 79 5F 74 
       00:0707: 72 61 6E 73 
       00:070B: 66 65 72 
  6075 00:070E: 5F 74 72 79  	db	$5F,$74,$72,$79,$31,$3A,$72,$65,$67,$5F,
                    $73,$72,$30,$3A,$6D
       00:0712: 31 3A 72 65 
       00:0716: 67 5F 73 72 
       00:071A: 30 3A 6D 
  6076 00:071D: 73 72 3A 00  	db	$73,$72,$3A,$00,$66,$6C,$6F,$70,$70,$79,
                    $5F,$74,$72,$61,$6E
       00:0721: 66 6C 6F 70 
       00:0725: 70 79 5F 74 
       00:0729: 72 61 6E 
  6077 00:072C: 73 66 65 72  	db	$73,$66,$65,$72,$5F,$74,$72,$79,$31,$3A,
                    $72,$65,$67,$5F,$73
       00:0730: 5F 74 72 79 
       00:0734: 31 3A 72 65 
       00:0738: 67 5F 73 
  6078 00:073B: 72 31 3A 6D  	db	$72,$31,$3A,$6D,$73,$72,$3A,$00,$66,$6C,
                    $6F,$70,$70,$79,$5F
       00:073F: 73 72 3A 00 
       00:0743: 66 6C 6F 70 
       00:0747: 70 79 5F 
  6079 00:074A: 74 72 61 6E  	db	$74,$72,$61,$6E,$73,$66,$65,$72,$5F,$74,
  Thu Dec  3 2020 22:25                                                Page 119


                    $72,$79,$31,$3A,$72
       00:074E: 73 66 65 72 
       00:0752: 5F 74 72 79 
       00:0756: 31 3A 72 
  6080 00:0759: 65 67 5F 73  	db	$65,$67,$5F,$73,$72,$32,$3A,$6D,$73,$72,
                    $3A,$00,$66,$6C,$6F
       00:075D: 72 32 3A 6D 
       00:0761: 73 72 3A 00 
       00:0765: 66 6C 6F 
  6081 00:0768: 70 70 79 5F  	db	$70,$70,$79,$5F,$74,$72,$61,$6E,$73,$66,
                    $65,$72,$5F,$74,$72
       00:076C: 74 72 61 6E 
       00:0770: 73 66 65 72 
       00:0774: 5F 74 72 
  6082 00:0777: 79 31 3A 31  	db	$79,$31,$3A,$31,$3A,$63,$3A,$00,$66,$6C,
                    $6F,$70,$70,$79,$5F
       00:077B: 3A 63 3A 00 
       00:077F: 66 6C 6F 70 
       00:0783: 70 79 5F 
  6083 00:0786: 74 72 61 6E  	db	$74,$72,$61,$6E,$73,$66,$65,$72,$5F,$74,
                    $72,$79,$31,$3A,$32
       00:078A: 73 66 65 72 
       00:078E: 5F 74 72 79 
       00:0792: 31 3A 32 
  6084 00:0795: 3A 68 3A 00  	db	$3A,$68,$3A,$00,$66,$6C,$6F,$70,$70,$79,
                    $5F,$74,$72,$61,$6E
       00:0799: 66 6C 6F 70 
       00:079D: 70 79 5F 74 
       00:07A1: 72 61 6E 
  6085 00:07A4: 73 66 65 72  	db	$73,$66,$65,$72,$5F,$74,$72,$79,$31,$3A,
                    $33,$3A,$72,$3A,$00
       00:07A8: 5F 74 72 79 
       00:07AC: 31 3A 33 3A 
       00:07B0: 72 3A 00 
  6086 00:07B3: 66 6C 6F 70  	db	$66,$6C,$6F,$70,$70,$79,$5F,$74,$72,$61,
                    $6E,$73,$66,$65,$72
       00:07B7: 70 79 5F 74 
       00:07BB: 72 61 6E 73 
       00:07BF: 66 65 72 
  6087 00:07C2: 5F 74 72 79  	db	$5F,$74,$72,$79,$31,$3A,$33,$3A,$6E,$3A,
                    $00,$66,$6C,$6F,$70
       00:07C6: 31 3A 33 3A 
       00:07CA: 6E 3A 00 66 
       00:07CE: 6C 6F 70 
  6088 00:07D1: 70 79 5F 74  	db	$70,$79,$5F,$74,$72,$61,$6E,$73,$66,$65,
                    $72,$5F,$74,$72,$79
       00:07D5: 72 61 6E 73 
       00:07D9: 66 65 72 5F 
       00:07DD: 74 72 79 
  6089 00:07E0: 3A 66 6C 6F  	db	$3A,$66,$6C,$6F,$70,$70,$79,$62,$75,$66,
                    $66,$65,$72,$49,$6E
       00:07E4: 70 70 79 62 
       00:07E8: 75 66 66 65 
       00:07EC: 72 49 6E 
  6090 00:07EF: 64 65 78 3A  	db	$64,$65,$78,$3A,$00
       00:07F3: 00 
  6091 00:07F4:              	ends
  6092                        ;
  Thu Dec  3 2020 22:25                                                Page 120


  6093                        ;
  6094                        ;
  6095                        	.line	1254
  6096                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxfloppy.c",1164
  6097                        	xref	~~k_debug_byte_array
  6098                        	xref	~~k_debug_bits
  6099                        	xref	~~k_debug_hex
  6100                        	xref	~~k_debug_long
  6101                        	xref	~~k_debug_integer
  6102                        	xref	~~k_debug_string
  6103                        	xref	~~sleep
  6104                        	udata
  6105                        	xdef	~~floppybuffer
  6106                        ~~floppybuffer
  6107 00:0000:              	ds	512
  6108 00:0200:              	ends
  6109                        	udata
  6110                        ~~status
  6111 00:0200:              	ds	7
  6112 00:0207:              	ends
  6113                        	udata
  6114                        ~~status_sz
  6115 00:0207:              	ds	2
  6116 00:0209:              	ends
  6117                        	udata
  6118                        ~~motoff_timer
  6119 00:0209:              	ds	2
  6120 00:020B:              	ends
  6121                        	udata
  6122                        ~~drives
  6123 00:020B:              	ds	24
  6124 00:0223:              	ends
  6125                        	udata
  6126                        ~~reg_sr2
  6127 00:0223:              	ds	1
  6128 00:0224:              	ends
  6129                        	udata
  6130                        ~~reg_sr1
  6131 00:0224:              	ds	1
  6132 00:0225:              	ends
  6133                        	udata
  6134                        ~~reg_sr0
  6135 00:0225:              	ds	1
  6136 00:0226:              	ends
  6137                        	udata
  6138                        ~~reg_dor
  6139 00:0226:              	ds	1
  6140 00:0227:              	ends
  6141                        	.sym	~~wait_til_ready,~~wait_til_ready,69,3,0
  6142                        	.sym	~~floppybuffer,~~floppybuffer,110,2,0,51
                    2
  6143                        	.sym	~~floppybufferIndex,~~floppybufferIndex,
                    16,2,16
  6144                        	.sym	~~status,~~status,110,3,0,7
  6145                        	.sym	~~status_sz,~~status_sz,5,3,16
  6146                        	.sym	~~motoff_timer,~~motoff_timer,5,3,16
  6147                        	.sym	~~cur_drive,~~cur_drive,14,3,8
  Thu Dec  3 2020 22:25                                                Page 121


  6148                        	.sym	~~drives,~~drives,106,3,0,64,4
  6149                        	.sym	~~reg_sr2,~~reg_sr2,14,3,8
  6150                        	.sym	~~reg_sr1,~~reg_sr1,14,3,8
  6151                        	.sym	~~reg_sr0,~~reg_sr0,14,3,8
  6152                        	.sym	~~reg_dor,~~reg_dor,14,3,8
  6153                        	.sym	drive_state_t,0,10,14,48,64
  6154                        	.sym	~~k_fd_rw_command,~~k_fd_rw_command,69,3
                    ,0
  6155                        	.sym	~~k_fd_read_lba,~~k_fd_read_lba,69,3,0
  6156                        	.sym	~~k_fd_read_sector,~~k_fd_read_sector,80
                    ,2,0
  6157                        	.sym	~~k_fd_isbusy_drive,~~k_fd_isbusy_drive,
                    78,2,0
  6158                        	.sym	~~k_fd_isbusy,~~k_fd_isbusy,78,2,0
  6159                        	.sym	~~k_fd_isready,~~k_fd_isready,78,2,0
  6160                        	.sym	~~k_fd_isreadable,~~k_fd_isreadable,78,2
                    ,0
  6161                        	.sym	~~k_fd_init,~~k_fd_init,78,2,0
  6162                        	.sym	~~k_fd_reset,~~k_fd_reset,78,2,0
  6163                        	.sym	~~floppy_timer,~~floppy_timer,65,2,0
  6164                        	.sym	~~floppy_isr,~~floppy_isr,65,2,0
  6165                        	.sym	~~floppy_write,~~floppy_write,69,2,0
  6166                        	.sym	~~floppy_read,~~floppy_read,69,2,0
  6167                        	.sym	~~floppy_transfer_lba,~~floppy_transfer_
                    lba,69,3,0
  6168                        	.sym	~~floppy_transfer,~~floppy_transfer,69,3
                    ,0
  6169                        	.sym	~~floppy_transfer_try2,~~floppy_transfer
                    _try2,69,3,0
  6170                        	.sym	~~floppy_transfer_try1,~~floppy_transfer
                    _try1,69,3,0
  6171                        	.sym	~~floppy_present,~~floppy_present,69,2,0
  6172                        	.sym	~~floppy_seek,~~floppy_seek,69,3,0
  6173                        	.sym	~~floppy_calibrate,~~floppy_calibrate,65
                    ,3,0
  6174                        	.sym	~~floppy_drive_data,~~floppy_drive_data,
                    65,2,0
  6175                        	.sym	~~floppy_select,~~floppy_select,69,3,0
  6176                        	.sym	~~floppy_specify,~~floppy_specify,65,3,0
  6177                        	.sym	~~fdc_reset,~~fdc_reset,65,3,0
  6178                        	.sym	~~fdc_configure,~~fdc_configure,65,3,0
  6179                        	.sym	~~motor_off,~~motor_off,65,3,0
  6180                        	.sym	~~motor_on,~~motor_on,65,3,0
  6181                        	.sym	~~fdc_wait,~~fdc_wait,69,3,0
  6182                        	.sym	~~fdc_waitint,~~fdc_waitint,69,3,0
  6183                        	.sym	~~getbyte,~~getbyte,69,2,0
  6184                        	.sym	~~sendbyte,~~sendbyte,69,2,0
  6185                        	.sym	~~lba_2_chs,~~lba_2_chs,65,3,0
  6186                        	.sym	~~io_wait,~~io_wait,65,3,0
  6187                        	.sym	~~floppy_check_int,~~floppy_check_int,65
                    ,2,0
  6188                        	.sym	~~floppy_init,~~floppy_init,65,2,0
  6189                        	.sym	~~irq_signaled,~~irq_signaled,14,2,8
  6190                        	.sym	DEVICEDRIVER_COMMAND,0,656,14,32
  6191                        	.sym	DEVICEDRIVER_UNLOAD,0,654,14,32
  6192                        	.sym	DEVICEDRIVER_WRITE,0,656,14,32
  6193                        	.sym	DEVICEDRIVER_READ,0,656,14,32
  6194                        	.sym	DEVICEDRIVER_LOAD,0,654,14,32
  Thu Dec  3 2020 22:25                                                Page 122


  6195                        	.sym	PFX_BLOCK_DEVICE_DRIVER,0,138,14,32,63
  6196                        	.sym	FX_BLOCK_DEVICE_DRIVER,0,10,14,1448,63
  6197                        	.sym	PFX_DEVICE_DRIVER,0,138,14,32,62
  6198                        	.sym	FX_DEVICE_DRIVER,0,10,14,1416,62
  6199                        	.sym	~~k_debug_byte_array,~~k_debug_byte_arra
                    y,65,18,0
  6200                        	.sym	~~k_debug_bits,~~k_debug_bits,65,18,0
  6201                        	.sym	~~k_debug_hex,~~k_debug_hex,65,18,0
  6202                        	.sym	~~k_debug_long,~~k_debug_long,65,18,0
  6203                        	.sym	~~k_debug_integer,~~k_debug_integer,65,1
                    8,0
  6204                        	.sym	~~k_debug_string,~~k_debug_string,65,18,
                    0
  6205                        	.sym	~~sleep,~~sleep,65,18,0
  6206                        	.sym	PDEBUGBYTEBITS,0,138,14,32,61
  6207                        	.sym	DEBUGBYTEBITS,0,10,14,8,61
  6208                        	.sym	PFXENVIRONMENT,0,138,14,32,60
  6209                        	.sym	FXENVIRONMENT,0,10,14,96,60
  6210                        	.sym	PFXZERPOPAGE,0,138,14,32,59
  6211                        	.sym	FXZERPOPAGE,0,10,14,448,59
  6212                        	.sym	KERNELTRAPCALL,0,641,14,32
  6213                        	.sym	PCOMMANDARGS,0,138,14,32,58
  6214                        	.sym	COMMANDARGS,0,10,14,64,58
  6215                        	.sym	PTOKENIZESTATE,0,133,14,32
  6216                        	.sym	TOKENIZESTATE,0,5,14,16
  6217                        	.sym	PTOKEN,0,138,14,32,57
  6218                        	.sym	TOKEN,0,10,14,64,57
  6219                        	.sym	PTOKENTYPE,0,133,14,32
  6220                        	.sym	TOKENTYPE,0,5,14,16
  6221                        	.sym	FXCommandHandler,0,656,14,32
  6222                        	.sym	PCONSOLECTX,0,138,14,32,56
  6223                        	.sym	CONSOLECTX,0,10,14,1144,56
  6224                        	.sym	PSPINNERCTX,0,138,14,32,55
  6225                        	.sym	SPINNERCTX,0,10,14,48,55
  6226                        	.sym	PMOUSE_MSG_STATE,0,138,14,32,54
  6227                        	.sym	MOUSE_MSG_STATE,0,10,14,184,54
  6228                        	.sym	PFXEVENTPROCESS,0,138,14,32,53
  6229                        	.sym	FXEVENTPROCESS,0,10,14,64,53
  6230                        	.sym	FXEventProc,0,641,14,32
  6231                        	.sym	PMOUSEMSGDATA,0,138,14,32,52
  6232                        	.sym	MOUSEMSGDATA,0,10,14,64,52
  6233                        	.sym	MSGIRQ,0,5,14,16
  6234                        	.sym	MAINLOOPARGS,0,10,14,16,51
  6235                        	.sym	PEACHCHILD_MSG,0,138,14,32,50
  6236                        	.sym	EACHCHILD_MSG,0,10,14,64,50
  6237                        	.sym	PCUR_PALETTE_MAP,0,138,14,32,49
  6238                        	.sym	CUR_PALETTE_MAP,0,10,14,400,49
  6239                        	.sym	PCLICKDETECTED,0,138,14,32,48
  6240                        	.sym	CLICKDETECTED,0,10,14,64,48
  6241                        	.sym	OBJECTCLICKED,0,641,14,32
  6242                        	.sym	MemoryCallback,0,641,14,32
  6243                        	.sym	PFXMEMORYMAP,0,138,14,32,47
  6244                        	.sym	FXMEMORYMAP,0,10,14,2072,47
  6245                        	.sym	UMM_HEAP_INFO,0,10,14,256,46
  6246                        	.sym	FOREACHNODEUNTIL,0,654,14,32
  6247                        	.sym	FOREACHNODE,0,641,14,32
  6248                        	.sym	PFXSTRING,0,138,14,32,45
  6249                        	.sym	FXSTRING,0,10,14,64,45
  Thu Dec  3 2020 22:25                                                Page 123


  6250                        	.sym	Boolean_T,0,5,14,16
  6251                        	.sym	ldiv_t,0,10,14,64,43
  6252                        	.sym	div_t,0,10,14,32,42
  6253                        	.sym	wctype_t,0,16,14,16
  6254                        	.sym	wint_t,0,16,14,16
  6255                        	.sym	wchar_t,0,14,14,8
  6256                        	.sym	ptrdiff_t,0,7,14,32
  6257                        	.sym	size_t,0,16,14,16
  6258                        	.sym	PFXCOMBUFFER,0,138,14,32,41
  6259                        	.sym	FXCOMBUFFER,0,10,14,2080,41
  6260                        	.sym	PSUBMENULIST,0,138,14,32,40
  6261                        	.sym	SUBMENULIST,0,10,14,40,40
  6262                        	.sym	HSUBMENU,0,7,14,32
  6263                        	.sym	PSUBMENU,0,138,14,32,39
  6264                        	.sym	SUBMENU,0,10,14,64,39
  6265                        	.sym	MenuAction,0,641,14,32
  6266                        	.sym	PMENUANCHOR,0,138,14,32,38
  6267                        	.sym	MENUANCHOR,0,10,14,144,38
  6268                        	.sym	PTEXTBOX,0,138,14,32,37
  6269                        	.sym	TEXTBOX,0,10,14,144,37
  6270                        	.sym	PLISTBOX,0,138,14,32,36
  6271                        	.sym	LISTBOX,0,10,14,240,36
  6272                        	.sym	PSCROLLBAR,0,138,14,32,35
  6273                        	.sym	SCROLLBAR,0,10,14,192,35
  6274                        	.sym	PBUTTON,0,138,14,32,34
  6275                        	.sym	BUTTON,0,10,14,80,34
  6276                        	.sym	PMENUDROPDOWNDATA,0,138,14,32,33
  6277                        	.sym	MENUDROPDOWNDATA,0,10,14,3568,33
  6278                        	.sym	PMENUTAG,0,138,14,32,32
  6279                        	.sym	MENUTAG,0,10,14,112,32
  6280                        	.sym	PMENU,0,138,14,32,31
  6281                        	.sym	MENU,0,10,14,248,31
  6282                        	.sym	HMENURESOURCE,0,129,14,32
  6283                        	.sym	HTEXTBOX,0,7,14,32
  6284                        	.sym	PTEXTBOXX,0,138,14,32,30
  6285                        	.sym	TEXTBOXX,0,10,14,112,30
  6286                        	.sym	FONTMETRIC,0,10,14,32,29
  6287                        	.sym	TITLE,0,142,14,32
  6288                        	.sym	PHANDLE,0,1153,14,32
  6289                        	.sym	HANDLE,0,129,14,32
  6290                        	.sym	PWINDOWEX,0,138,14,32,28
  6291                        	.sym	WINDOWEX,0,10,14,2704,28
  6292                        	.sym	PWINDOW,0,138,14,32,27
  6293                        	.sym	WINDOW,0,10,14,2808,27
  6294                        	.sym	PDRAGDATA,0,138,14,32,26
  6295                        	.sym	DRAGDATA,0,10,14,136,26
  6296                        	.sym	PNCCLICKABLE,0,138,14,32,25
  6297                        	.sym	NCCLICKABLE,0,10,14,88,25
  6298                        	.sym	HCLICKABLE,0,7,14,32
  6299                        	.sym	PCLICKABLE,0,138,14,32,24
  6300                        	.sym	CLICKABLE,0,10,14,88,24
  6301                        	.sym	PWNDCLASS,0,138,14,32,23
  6302                        	.sym	WNDCLASS,0,10,14,256,23
  6303                        	.sym	HBRUSH,0,129,14,32
  6304                        	.sym	HCURSOR,0,129,14,32
  6305                        	.sym	HICON,0,129,14,32
  6306                        	.sym	HINSTANCE,0,129,14,32
  6307                        	.sym	FXWndProc,0,654,14,32
  Thu Dec  3 2020 22:25                                                Page 124


  6308                        	.sym	PRECT,0,138,14,32,22
  6309                        	.sym	RECT,0,10,14,64,22
  6310                        	.sym	PPOINT,0,138,14,32,21
  6311                        	.sym	POINT,0,10,14,32,21
  6312                        	.sym	PFXPROPERTY,0,138,14,32,19
  6313                        	.sym	FXPROPERTY,0,10,14,384,19
  6314                        	.sym	SCANCODE,0,14,14,8
  6315                        	.sym	KEYCODE,0,14,14,8
  6316                        	.sym	PFXPROCESSMESSAGE,0,138,14,32,18
  6317                        	.sym	FXPROCESSMESSAGE,0,10,14,112,18
  6318                        	.sym	PFXPROCESS,0,138,14,32,17
  6319                        	.sym	FXPROCESS,0,10,14,800,17
  6320                        	.sym	PDESKTOP_CONTROL,0,138,14,32,16
  6321                        	.sym	DESKTOP_CONTROL,0,10,14,392,16
  6322                        	.sym	PCONSOLE_CONTROL,0,138,14,32,15
  6323                        	.sym	CONSOLE_CONTROL,0,10,14,448,15
  6324                        	.sym	FXProcessProc,0,641,14,32
  6325                        	.sym	PFXCMDMESSAGE,0,138,14,32,14
  6326                        	.sym	FXCMDMESSAGE,0,10,14,304,14
  6327                        	.sym	PFXOSMESSAGE,0,138,14,32,13
  6328                        	.sym	FXOSMESSAGE,0,10,14,304,13
  6329                        	.sym	PINT_REGS,0,138,14,32,12
  6330                        	.sym	INT_REGS,0,10,14,104,12
  6331                        	.sym	TASK_STACK,0,10,14,32,11
  6332                        	.sym	TASK,0,10,14,48,10
  6333                        	.sym	PIRQDATA,0,138,14,32,9
  6334                        	.sym	IRQDATA,0,10,14,48,9
  6335                        	.sym	HMENU,0,129,14,32
  6336                        	.sym	HWND,0,129,14,32
  6337                        	.sym	MSGDATA,0,14,14,8
  6338                        	.sym	MSGDEST,0,18,14,32
  6339                        	.sym	MSGSRC,0,18,14,32
  6340                        	.sym	MSGTYPE,0,16,14,16
  6341                        	.sym	PROCESS_RESOURCE_LIST,0,138,14,32,3
  6342                        	.sym	PROCESS_TLS_LIST,0,138,14,32,3
  6343                        	.sym	SEMAPHORE_LIST,0,138,14,32,3
  6344                        	.sym	FILE_BLOCK_LIST,0,138,14,32,3
  6345                        	.sym	FILE_PATH_LIST,0,138,14,32,3
  6346                        	.sym	PROCEDURE_LIST,0,138,14,32,3
  6347                        	.sym	FILE_HANDLE,0,138,14,32,8
  6348                        	.sym	FILE_BLOCK,0,10,14,552,8
  6349                        	.sym	SEMAPHORE,0,10,14,16,7
  6350                        	.sym	PPROCESS_SIGNAL,0,138,14,32,6
  6351                        	.sym	PROCESS_SIGNAL,0,10,14,16,6
  6352                        	.sym	KRESULT,0,18,14,32
  6353                        	.sym	PKERNEL_ERROR,0,138,14,32,5
  6354                        	.sym	KERNEL_ERROR,0,10,14,32,5
  6355                        	.sym	PROCESS_STATUS,0,16,14,16
  6356                        	.sym	FILE_PATH_NAME,0,142,14,32
  6357                        	.sym	PROCESS_RESOURCE,0,129,14,32
  6358                        	.sym	PROCESS_TLS,0,129,14,32
  6359                        	.sym	PROCESS_CTX,0,129,14,32
  6360                        	.sym	USERID,0,16,14,16
  6361                        	.sym	PROCESS_ID,0,18,14,32
  6362                        	.sym	PROCESS_BANK,0,14,14,8
  6363                        	.sym	PFXQUEUE,0,138,14,32,4
  6364                        	.sym	FXQUEUE,0,10,14,80,4
  6365                        	.sym	PFXNODELIST,0,138,14,32,3
  Thu Dec  3 2020 22:25                                                Page 125


  6366                        	.sym	FXNODELIST,0,10,14,96,3
  6367                        	.sym	NodeListDeallocator,0,641,14,32
  6368                        	.sym	PFXNODE,0,138,14,32,2
  6369                        	.sym	FXNODE,0,10,14,384,2
  6370                        	.sym	PBYTEBITS,0,138,14,32,1
  6371                        	.sym	BYTEBITS,0,10,14,8,1
  6372                        	.sym	HCOLOR,0,129,14,32
  6373                        	.sym	HFONT,0,129,14,32
  6374                        	.sym	HDC,0,129,14,32
  6375                        	.sym	HPOINTER,0,129,14,32
  6376                        	.sym	uint32_t,0,18,14,32
  6377                        	.sym	uint8_t,0,14,14,8
  6378                        	.sym	PFAR,0,142,14,32
  6379                        	.sym	LPBOOL,0,142,14,32
  6380                        	.sym	BOOL,0,14,14,8
  6381                        	.sym	DWORD,0,18,14,32
  6382                        	.sym	ULONG,0,18,14,32
  6383                        	.sym	LPLONG,0,135,14,32
  6384                        	.sym	LONG,0,7,14,32
  6385                        	.sym	PUINT,0,144,14,32
  6386                        	.sym	USHORT,0,16,14,16
  6387                        	.sym	UINT,0,16,14,16
  6388                        	.sym	INT,0,5,14,16
  6389                        	.sym	WORD,0,5,14,16
  6390                        	.sym	PBYTE,0,142,14,32
  6391                        	.sym	BYTE,0,14,14,8
  6392                        	.sym	UCHAR,0,14,14,8
  6393                        	.sym	LPWCSTR,0,142,14,32
  6394                        	.sym	LPCSTR,0,142,14,32
  6395                        	.sym	LPSTR,0,142,14,32
  6396                        	.sym	LPCHAR,0,142,14,32
  6397                        	.sym	CHAR,0,14,14,8
  6398                        	.sym	LPVOID,0,129,14,32
  6399                        	.sym	VOID,0,1,14,32
  6400                        	end


      Lines assembled: 6400
      Errors: 0
