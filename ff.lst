  Thu Dec  3 2020 22:25                                                Page 1


                     ***************************************
                     **      WDC 65C816 Macro Assembler   **
                     **                                   **
                     **     Version 3.49.1- Feb  6 2006    **
                     ***************************************

     1                        ;:ts=8
     2             00000001   R0	equ	1
     3             00000005   R1	equ	5
     4             00000009   R2	equ	9
     5             0000000D   R3	equ	13
     6                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ff.c",0
     7                        ;/*-----------------------------------------------
                    -----------------------------/
     8                        ;/  FatFs - Generic FAT Filesystem Module  R0.14  
                                                 /
     9                        ;/------------------------------------------------
                    -----------------------------/
    10                        ;/
    11                        ;/ Copyright (C) 2019, ChaN, all right reserved.
    12                        ;/
    13                        ;/ FatFs module is an open source software. Redist
                    ribution and use of FatFs in
    14                        ;/ source and binary forms, with or without modifi
                    cation, are permitted provided
    15                        ;/ that the following condition is met:
    16                        ;/
    17                        ;/ 1. Redistributions of source code must retain t
                    he above copyright notice,
    18                        ;/    this condition and the following disclaimer.
    19                        ;/
    20                        ;/ This software is provided by the copyright hold
                    er and contributors "AS IS"
    21                        ;/ and any warranties related to this software are
                     DISCLAIMED.
    22                        ;/ The copyright owner or contributors be NOT LIAB
                    LE for any damages caused
    23                        ;/ by use of this software.
    24                        ;/
    25                        ;/------------------------------------------------
                    ----------------------------*/
    26                        ;
    27                        ;
    28                        ;
    29                        ;#include "fxtypes.h"
    30                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
    31                        	.stag	_fx_bytebits,8,1
    32                        	.member	b7,0,14,17,1
    33                        	.member	b6,1,14,17,1
    34                        	.member	b5,2,14,17,1
    35                        	.member	b4,3,14,17,1
    36                        	.member	b3,4,14,17,1
    37                        	.member	b2,5,14,17,1
    38                        	.member	b1,6,14,17,1
    39                        	.member	b0,7,14,17,1
    40                        	.eos
  Thu Dec  3 2020 22:25                                                Page 2


    41                        	.stag	_fx_node,384,2
    42                        	.member	type,0,14,8,8
    43                        	.member	Reserved0,8,14,8,8
    44                        	.member	data,16,129,8,32
    45                        	.member	last,48,138,8,32,2
    46                        	.member	next,80,138,8,32,2
    47                        	.member	name,112,110,8,0,32
    48                        	.member	Reserved1,368,16,8,16
    49                        	.eos
    50                        	.stag	_fx_nodelist,96,3
    51                        	.member	listhead,0,138,8,32,2
    52                        	.member	listData,32,129,8,32
    53                        	.member	deallocator,64,641,8,32
    54                        	.eos
    55                        	.stag	_fx_queue,80,4
    56                        	.member	count,0,5,8,16
    57                        	.member	front,16,138,8,32,2
    58                        	.member	rear,48,138,8,32,2
    59                        	.eos
    60                        	.stag	fake5_,32,5
    61                        	.member	subsystem,0,14,8,8
    62                        	.member	level,8,14,8,8
    63                        	.member	error,16,16,8,16
    64                        	.eos
    65                        	.stag	_fx_process_signal,16,6
    66                        	.member	cbSize,0,16,8,16
    67                        	.eos
    68                        	.stag	_fx_semaphore,16,7
    69                        	.member	reserved,0,5,8,16
    70                        	.eos
    71                        	.stag	_fx_fileBlock,552,8
    72                        	.member	openCount,0,16,8,16
    73                        	.member	lockCount,16,16,8,16
    74                        	.member	dirty,32,14,8,8
    75                        	.member	fileBuffer,40,110,8,0,64
    76                        	.eos
    77                        	.stag	_fx_irq_data,48,9
    78                        	.member	line,0,5,8,16
    79                        	.member	keycode,16,142,8,32
    80                        	.eos
    81                        	.stag	_task,48,10
    82                        	.member	SPL,0,14,8,8
    83                        	.member	SPH,8,14,8,8
    84                        	.member	pstack,16,142,8,32
    85                        	.eos
    86                        	.stag	_task_stack,32,11
    87                        	.member	SS,0,142,8,32
    88                        	.eos
    89                        	.stag	int_regs,104,12
    90                        	.member	PB,0,14,8,8
    91                        	.member	PH,8,14,8,8
    92                        	.member	PL,16,14,8,8
    93                        	.member	PP,24,14,8,8
    94                        	.member	DB,32,14,8,8
    95                        	.member	DH,40,14,8,8
    96                        	.member	DL,48,14,8,8
    97                        	.member	AH,56,14,8,8
    98                        	.member	AL,64,14,8,8
  Thu Dec  3 2020 22:25                                                Page 3


    99                        	.member	XH,72,14,8,8
   100                        	.member	XL,80,14,8,8
   101                        	.member	YH,88,14,8,8
   102                        	.member	YL,96,14,8,8
   103                        	.eos
   104                        	.stag	_fx_eventMessage,304,13
   105                        	.member	src,0,18,8,32
   106                        	.member	dest,32,18,8,32
   107                        	.member	type,64,16,8,16
   108                        	.member	hwnd,80,129,8,32
   109                        	.member	pheap,112,129,8,32
   110                        	.member	msgTime,144,18,8,32
   111                        	.member	data,176,110,8,0,16
   112                        	.eos
   113                        	.stag	_fx_cmdMessage,304,14
   114                        	.member	src,0,18,8,32
   115                        	.member	dest,32,18,8,32
   116                        	.member	type,64,16,8,16
   117                        	.member	hwnd,80,129,8,32
   118                        	.member	pheap,112,129,8,32
   119                        	.member	msgTime,144,18,8,32
   120                        	.member	cmdCId,176,16,8,16
   121                        	.member	cmdMId,192,16,8,16
   122                        	.member	parameter1,208,18,8,32
   123                        	.member	parameter2,240,18,8,32
   124                        	.member	parameter3,272,18,8,32
   125                        	.eos
   126                        	.stag	_fx_console_ctl,448,15
   127                        	.member	maxCols,0,5,8,16
   128                        	.member	maxRows,16,5,8,16
   129                        	.member	curX,32,5,8,16
   130                        	.member	curY,48,5,8,16
   131                        	.member	fgColor,64,5,8,16
   132                        	.member	bgColor,80,5,8,16
   133                        	.member	mode,96,14,8,8
   134                        	.member	kbBuffer,104,101,8,0,16
   135                        	.member	screenBuffer,360,142,8,32
   136                        	.member	desktopMode,392,14,8,8
   137                        	.member	lastMouseButton,400,5,8,16
   138                        	.member	lastMouseX,416,5,8,16
   139                        	.member	lastMouseY,432,5,8,16
   140                        	.eos
   141                        	.stag	_fx_desktop_ctl,392,16
   142                        	.member	desktopMode,0,14,8,8
   143                        	.member	cursorCtl,8,5,8,16
   144                        	.member	cursorState,24,5,8,16
   145                        	.member	backgroundColor,40,5,8,16
   146                        	.member	foregroundColor,56,5,8,16
   147                        	.member	menuMode,72,5,8,16
   148                        	.member	lastMouseButton,88,5,8,16
   149                        	.member	lastMouseX,104,5,8,16
   150                        	.member	lastMouseY,120,5,8,16
   151                        	.member	currentDiskName,136,142,8,32
   152                        	.member	diskNodes,168,129,8,32
   153                        	.member	titleNodes,200,129,8,32
   154                        	.member	menuNodes,232,129,8,32
   155                        	.member	iconNodes,264,129,8,32
   156                        	.member	windowNodes,296,129,8,32
  Thu Dec  3 2020 22:25                                                Page 4


   157                        	.member	fontNodes,328,129,8,32
   158                        	.member	wndProc,360,138,8,32,3
   159                        	.eos
   160                        	.stag	_fx_process,800,17
   161                        	.member	cbSize,0,5,8,16
   162                        	.member	procId,16,18,8,32
   163                        	.member	parentId,48,18,8,32
   164                        	.member	ctx,80,129,8,32
   165                        	.member	userId,112,16,8,16
   166                        	.member	status,128,16,8,16
   167                        	.member	foregroundActive,144,14,8,8
   168                        	.member	tls,152,1121,8,32,8
   169                        	.member	commandLine,408,142,8,32
   170                        	.member	semaphores,440,138,8,32,3
   171                        	.member	fileHandles,472,138,8,32,3
   172                        	.member	pathList,504,138,8,32,3
   173                        	.member	resources,536,138,8,32,3
   174                        	.member	timerAware,568,14,8,8
   175                        	.member	timerTicks,576,112,8,0,2
   176                        	.member	timerTickCount,608,112,8,0,2
   177                        	.member	kernelError,640,10,8,32,5
   178                        	.member	consoleCtl,672,138,8,32,15
   179                        	.member	desktopCtl,704,138,8,32,16
   180                        	.member	execProc,736,641,8,32
   181                        	.member	startupArgs,768,129,8,32
   182                        	.eos
   183                        	.stag	_fxProcessMessage,112,18
   184                        	.member	src,0,18,8,32
   185                        	.member	dest,32,18,8,32
   186                        	.member	type,64,16,8,16
   187                        	.member	processInfo,80,138,8,32,17
   188                        	.eos
   189                        	.stag	_fx_property,384,19
   190                        	.member	name,0,110,8,0,16
   191                        	.member	value,128,110,8,0,32
   192                        	.eos
   193                        	.utag	_24bitPointer,32,20
   194                        	.member	address,0,142,11,32
   195                        	.member	bytes,0,110,11,0,4
   196                        	.eos
   197                        	.stag	_PointStruct,32,21
   198                        	.member	x,0,5,8,16
   199                        	.member	y,16,5,8,16
   200                        	.eos
   201                        	.stag	_RectStruct,64,22
   202                        	.member	x,0,5,8,16
   203                        	.member	y,16,5,8,16
   204                        	.member	width,32,5,8,16
   205                        	.member	height,48,5,8,16
   206                        	.eos
   207                        	.stag	_k_WindowClass,256,23
   208                        	.member	cbSize,0,16,8,16
   209                        	.member	style,16,16,8,16
   210                        	.member	pWndProc,32,654,8,32
   211                        	.member	hInstance,64,129,8,32
   212                        	.member	hIcon,96,129,8,32
   213                        	.member	hCursor,128,129,8,32
   214                        	.member	hbrBackground,160,129,8,32
  Thu Dec  3 2020 22:25                                                Page 5


   215                        	.member	lpszMenuName,192,142,8,32
   216                        	.member	lpszClassName,224,142,8,32
   217                        	.eos
   218                        	.stag	_ClickableRect,88,24
   219                        	.member	area,0,10,8,64,22
   220                        	.member	z,64,5,8,16
   221                        	.member	enabled,80,14,8,8
   222                        	.eos
   223                        	.stag	_NCClickableRect,88,25
   224                        	.member	area,0,10,8,64,22
   225                        	.member	msgType,64,16,8,16
   226                        	.member	enabled,80,14,8,8
   227                        	.eos
   228                        	.stag	_DragData,136,26
   229                        	.member	area,0,10,8,64,22
   230                        	.member	xoffset,64,5,8,16
   231                        	.member	yoffset,80,5,8,16
   232                        	.member	msgType,96,16,8,16
   233                        	.member	isDrag,112,14,8,8
   234                        	.member	canDrag,120,14,8,8
   235                        	.member	canDrop,128,14,8,8
   236                        	.eos
   237                        	.stag	_k_WindowStruct,2808,27
   238                        	.member	cbSize,0,16,8,16
   239                        	.member	style,16,18,8,32
   240                        	.member	win_id,48,5,8,16
   241                        	.member	win_x,64,5,8,16
   242                        	.member	win_y,80,5,8,16
   243                        	.member	win_width,96,5,8,16
   244                        	.member	win_height,112,5,8,16
   245                        	.member	wndRect,128,10,8,64,22
   246                        	.member	clientRect,192,10,8,64,22
   247                        	.member	nonclientGadgets,256,106,8,0,25,16
   248                        	.member	clickable,1664,129,8,32
   249                        	.member	win_title,1696,110,8,0,32
   250                        	.member	Reserved0,1952,16,8,16
   251                        	.member	win_class,1968,110,8,0,16
   252                        	.member	win_class_name,2096,110,8,0,32
   253                        	.member	nBitmapLayer,2352,16,8,16
   254                        	.member	procid,2368,18,8,32
   255                        	.member	pWndClass,2400,138,8,32,23
   256                        	.member	pParentWindow,2432,129,8,32
   257                        	.member	hMenu,2464,129,8,32
   258                        	.member	pChildWindows,2496,138,8,32,3
   259                        	.member	pChildHitList,2528,138,8,32,3
   260                        	.member	isVisible,2560,14,8,8
   261                        	.member	windowData,2568,129,8,32
   262                        	.member	clientData,2600,1121,8,32,6
   263                        	.member	isClosed,2792,14,8,8
   264                        	.member	isClosing,2800,14,8,8
   265                        	.eos
   266                        	.stag	_k_WindowStructEx,2704,28
   267                        	.member	cbSize,0,16,8,16
   268                        	.member	style,16,18,8,32
   269                        	.member	win_id,48,5,8,16
   270                        	.member	win_x,64,5,8,16
   271                        	.member	win_y,80,5,8,16
   272                        	.member	win_width,96,5,8,16
  Thu Dec  3 2020 22:25                                                Page 6


   273                        	.member	win_height,112,5,8,16
   274                        	.member	wndRect,128,10,8,64,22
   275                        	.member	clientRect,192,10,8,64,22
   276                        	.member	nonclientGadgets,256,106,8,0,25,16
   277                        	.member	clickable,1664,129,8,32
   278                        	.member	win_title,1696,110,8,0,32
   279                        	.member	Reserved0,1952,16,8,16
   280                        	.member	win_class,1968,110,8,0,16
   281                        	.member	nBitmapLayer,2096,16,8,16
   282                        	.member	procid,2112,18,8,32
   283                        	.member	pWndClass,2144,138,8,32,23
   284                        	.member	pParentWindow,2176,129,8,32
   285                        	.member	hMenu,2208,129,8,32
   286                        	.member	pChildWindows,2240,138,8,32,3
   287                        	.member	pChildHitList,2272,138,8,32,3
   288                        	.member	isVisible,2304,14,8,8
   289                        	.member	windowData,2312,129,8,32
   290                        	.member	clientData,2344,1121,8,32,4
   291                        	.member	isClosed,2472,14,8,8
   292                        	.member	hWnd,2480,129,8,32
   293                        	.member	localRect,2512,10,8,64,22
   294                        	.member	globalRect,2576,10,8,64,22
   295                        	.member	clientOffsetRect,2640,10,8,64,22
   296                        	.eos
   297                        	.stag	_FontMetric,32,29
   298                        	.member	width,0,5,8,16
   299                        	.member	height,16,5,8,16
   300                        	.eos
   301                        	.stag	_ctl_Textbox,112,30
   302                        	.member	win_id,0,5,8,16
   303                        	.member	win_x,16,5,8,16
   304                        	.member	win_y,32,5,8,16
   305                        	.member	win_width,48,5,8,16
   306                        	.member	win_height,64,5,8,16
   307                        	.member	content,80,1166,8,32
   308                        	.eos
   309                        	.stag	_MenuStruct,248,31
   310                        	.member	cx,0,5,8,16
   311                        	.member	cy,16,5,8,16
   312                        	.member	width,32,5,8,16
   313                        	.member	height,48,5,8,16
   314                        	.member	fcolor,64,14,8,8
   315                        	.member	bcolor,72,14,8,8
   316                        	.member	chromeLeft,80,14,8,8
   317                        	.member	chromeRight1,88,14,8,8
   318                        	.member	chromeRight2,96,14,8,8
   319                        	.member	itemId,104,16,8,16
   320                        	.member	pCaption,120,142,8,32
   321                        	.member	subMenus,152,138,8,32,3
   322                        	.member	pBackground,184,129,8,32
   323                        	.member	hWndOwner,216,129,8,32
   324                        	.eos
   325                        	.stag	fake32_,112,32
   326                        	.member	menuId,0,16,8,16
   327                        	.member	caption,16,142,8,32
   328                        	.member	rect,48,10,8,64,22
   329                        	.eos
   330                        	.stag	fake33_,3568,33
  Thu Dec  3 2020 22:25                                                Page 7


   331                        	.member	pParent,0,138,8,32,27
   332                        	.member	rect,32,10,8,64,22
   333                        	.member	captions,96,1134,8,32,24
   334                        	.member	chrome,864,110,8,0,24
   335                        	.member	ids,1056,112,8,0,24
   336                        	.member	clickable,1440,106,8,0,24,24
   337                        	.member	selected,3552,16,8,16
   338                        	.eos
   339                        	.stag	_fx_button_t,80,34
   340                        	.member	pCaption,0,142,8,32
   341                        	.member	data,32,129,8,32
   342                        	.member	captionPixelWidth,64,16,8,16
   343                        	.eos
   344                        	.stag	_fx_scrollbar_t,192,35
   345                        	.member	min,0,16,8,16
   346                        	.member	max,16,16,8,16
   347                        	.member	increment,32,16,8,16
   348                        	.member	stopsize,48,16,8,16
   349                        	.member	location,64,5,8,16
   350                        	.member	state,80,5,8,16
   351                        	.member	rectThumb,96,10,8,64,22
   352                        	.member	data,160,129,8,32
   353                        	.eos
   354                        	.stag	_fx_listbox_t,240,36
   355                        	.member	pos,0,5,8,16
   356                        	.member	selected,16,16,8,16
   357                        	.member	offsetX,32,5,8,16
   358                        	.member	offsetY,48,5,8,16
   359                        	.member	inc,64,5,8,16
   360                        	.member	direction,80,5,8,16
   361                        	.member	top,96,5,8,16
   362                        	.member	bottom,112,5,8,16
   363                        	.member	indexTop,128,5,8,16
   364                        	.member	indexBottom,144,5,8,16
   365                        	.member	maxItems,160,16,8,16
   366                        	.member	fontSet,176,142,8,32
   367                        	.member	data,208,129,8,32
   368                        	.eos
   369                        	.stag	_fx_textbox_t,144,37
   370                        	.member	pos,0,5,8,16
   371                        	.member	selected,16,16,8,16
   372                        	.member	offsetX,32,5,8,16
   373                        	.member	offsetY,48,5,8,16
   374                        	.member	isShifted,64,14,8,8
   375                        	.member	cursorState,72,14,8,8
   376                        	.member	fontSet,80,142,8,32
   377                        	.member	data,112,129,8,32
   378                        	.eos
   379                        	.stag	_fx_menuAnchor_t,144,38
   380                        	.member	pCaption,0,142,8,32
   381                        	.member	renderLayoutX,32,16,8,16
   382                        	.member	renderLayoutY,48,16,8,16
   383                        	.member	captionPixelWidth,64,16,8,16
   384                        	.member	data,80,129,8,32
   385                        	.member	droppedWindow,112,138,8,32,27
   386                        	.eos
   387                        	.stag	_SubMenuStruct,64,39
   388                        	.member	caption,0,142,8,32
  Thu Dec  3 2020 22:25                                                Page 8


   389                        	.member	action,32,641,8,32
   390                        	.eos
   391                        	.stag	_SubMenuListStruct,40,40
   392                        	.member	cMenus,0,14,8,8
   393                        	.member	psubmenus,8,9354,8,32,39
   394                        	.eos
   395                        	.stag	_fx_ComBuffer,2080,41
   396                        	.member	cbSize,0,16,8,16
   397                        	.member	cbBuffer,16,16,8,16
   398                        	.member	buffer,32,110,8,0,256
   399                        	.eos
   400                        	.line	708
   401                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ff.c",23
   402                        ;#include "fxdos.h"
   403                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxdos.h",0
   404                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   405                        	.line	708
   406                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxdos.h",5
   407                        	.stag	_fx_sd_direntry,256,42
   408                        	.member	filename,0,110,8,0,11
   409                        	.member	type,88,14,8,8
   410                        	.member	attrs,96,110,8,0,20
   411                        	.eos
   412                        	.stag	_fx_info,416,43
   413                        	.member	stgName,0,110,8,0,32
   414                        	.member	Reserved1,256,14,8,8
   415                        	.member	stgType,264,16,8,16
   416                        	.member	Reserved2,280,14,8,8
   417                        	.member	stgReserved,288,110,8,0,16
   418                        	.eos
   419                        	.stag	_fx_fileinfo,136,44
   420                        	.member	type,0,14,8,8
   421                        	.member	pFilename,8,142,8,32
   422                        	.member	lSize,40,18,8,32
   423                        	.member	lcreateDate,72,18,8,32
   424                        	.member	lchangeDate,104,18,8,32
   425                        	.eos
   426                        	.stag	_FX_FAT_DIR_INFO,256,45
   427                        	.member	DIR_Name,0,110,8,0,11
   428                        	.member	DIR_Attr,88,14,8,8
   429                        	.member	DIR_NTRes,96,14,8,8
   430                        	.member	DIR_CrtTimeTenth,104,14,8,8
   431                        	.member	DIR_CrtTime,112,16,8,16
   432                        	.member	DIR_CrtDate,128,16,8,16
   433                        	.member	DIR_LstAccDate,144,16,8,16
   434                        	.member	DIR_FstClusHI,160,16,8,16
   435                        	.member	DIR_WrtTime,176,16,8,16
   436                        	.member	DIR_WrtDate,192,16,8,16
   437                        	.member	DIR_FstClusLO,208,16,8,16
   438                        	.member	DIR_FileSize,224,18,8,32
   439                        	.eos
   440                        	.stag	fat_extBS_32,416,46
   441                        	.member	table_size_32,0,18,8,32
   442                        	.member	extended_flags,32,16,8,16
  Thu Dec  3 2020 22:25                                                Page 9


   443                        	.member	fat_version,48,16,8,16
   444                        	.member	root_cluster,64,18,8,32
   445                        	.member	fat_info,96,16,8,16
   446                        	.member	backup_BS_sector,112,16,8,16
   447                        	.member	reserved_0,128,110,8,0,12
   448                        	.member	drive_number,224,14,8,8
   449                        	.member	reserved_1,232,14,8,8
   450                        	.member	boot_signature,240,14,8,8
   451                        	.member	volume_id,248,16,8,16
   452                        	.member	volume_label,264,110,8,0,11
   453                        	.member	fat_type_label,352,110,8,0,8
   454                        	.eos
   455                        	.stag	fat_extBS_16,192,47
   456                        	.member	bios_drive_num,0,14,8,8
   457                        	.member	reserved1,8,14,8,8
   458                        	.member	boot_signature,16,14,8,8
   459                        	.member	volume_id,24,16,8,16
   460                        	.member	volume_label,40,110,8,0,11
   461                        	.member	fat_type_label,128,110,8,0,8
   462                        	.eos
   463                        	.stag	fat_BS,688,48
   464                        	.member	bootjmp,0,110,8,0,3
   465                        	.member	oem_name,24,110,8,0,8
   466                        	.member	bytes_per_sector,88,16,8,16
   467                        	.member	sectors_per_cluster,104,14,8,8
   468                        	.member	reserved_sector_count,112,16,8,16
   469                        	.member	table_count,128,14,8,8
   470                        	.member	root_entry_count,136,16,8,16
   471                        	.member	total_sectors_16,152,16,8,16
   472                        	.member	media_type,168,14,8,8
   473                        	.member	table_size_16,176,16,8,16
   474                        	.member	sectors_per_track,192,16,8,16
   475                        	.member	head_side_count,208,16,8,16
   476                        	.member	hidden_sector_count,224,16,8,16
   477                        	.member	total_sectors_32,240,16,8,16
   478                        	.member	extended_section,256,110,8,0,54
   479                        	.eos
   480                        	.stag	__FATBootSector,928,49
   481                        	.member	bootjmp,0,110,8,0,3
   482                        	.member	oem_name,24,110,8,0,8
   483                        	.member	bytes_per_sector,88,16,8,16
   484                        	.member	sectors_per_cluster,104,14,8,8
   485                        	.member	reserved_sector_count,112,16,8,16
   486                        	.member	fat_table_count,128,14,8,8
   487                        	.member	root_entry_count,136,16,8,16
   488                        	.member	total_sectors_16,152,16,8,16
   489                        	.member	media_type,168,14,8,8
   490                        	.member	sectors_per_fat,176,16,8,16
   491                        	.member	sectors_per_track,192,16,8,16
   492                        	.member	head_side_count,208,16,8,16
   493                        	.member	hidden_sector_count,224,18,8,32
   494                        	.member	total_sectors_32,256,18,8,32
   495                        	.member	drive_number,288,14,8,8
   496                        	.member	reserved1,296,14,8,8
   497                        	.member	boot_sig,304,14,8,8
   498                        	.member	vol_id,312,18,8,32
   499                        	.member	vol_name,344,110,8,0,11
   500                        	.member	file_system_type,432,110,8,0,8
  Thu Dec  3 2020 22:25                                                Page 10


   501                        	.member	extended_section,496,110,8,0,54
   502                        	.eos
   503                        	.stag	__PARTITIONTABLE,128,50
   504                        	.member	first_byte,0,14,8,8
   505                        	.member	start_chs,8,110,8,0,3
   506                        	.member	partition_type,32,14,8,8
   507                        	.member	end_chs,40,110,8,0,3
   508                        	.member	start_sector,64,18,8,32
   509                        	.member	length_sectors,96,18,8,32
   510                        	.eos
   511                        	.stag	fake51_,4096,51
   512                        	.member	jmp,0,110,8,0,3
   513                        	.member	oem,24,110,8,0,8
   514                        	.member	sector_size,88,15,8,16
   515                        	.member	sectors_per_cluster,104,14,8,8
   516                        	.member	reserved_sectors,112,15,8,16
   517                        	.member	number_of_fats,128,14,8,8
   518                        	.member	root_dir_entries,136,15,8,16
   519                        	.member	total_sectors_short,152,15,8,16
   520                        	.member	media_descriptor,168,14,8,8
   521                        	.member	fat_size_sectors,176,15,8,16
   522                        	.member	sectors_per_track,192,15,8,16
   523                        	.member	number_of_heads,208,15,8,16
   524                        	.member	hidden_sectors,224,18,8,32
   525                        	.member	total_sectors_long,256,18,8,32
   526                        	.member	drive_number,288,14,8,8
   527                        	.member	current_head,296,14,8,8
   528                        	.member	boot_signature,304,14,8,8
   529                        	.member	volume_id,312,18,8,32
   530                        	.member	volume_label,344,110,8,0,11
   531                        	.member	fs_type,432,110,8,0,8
   532                        	.member	boot_code,496,110,8,0,448
   533                        	.member	boot_sector_signature,4080,15,8,16
   534                        	.eos
   535                        	.stag	__FAT16ENTRY,256,52
   536                        	.member	filename,0,110,8,0,8
   537                        	.member	ext,64,110,8,0,3
   538                        	.member	attributes,88,14,8,8
   539                        	.member	reserved,96,110,8,0,10
   540                        	.member	modify_time,176,16,8,16
   541                        	.member	modify_date,192,16,8,16
   542                        	.member	starting_cluster,208,16,8,16
   543                        	.member	file_size,224,18,8,32
   544                        	.eos
   545                        	.stag	__FAT16ENTRYLONG,288,53
   546                        	.member	filename,0,110,8,0,8
   547                        	.member	ext,64,110,8,0,3
   548                        	.member	attributes,88,14,8,8
   549                        	.member	reserved,96,110,8,0,10
   550                        	.member	modify_time,176,16,8,16
   551                        	.member	modify_date,192,16,8,16
   552                        	.member	starting_cluster,208,16,8,16
   553                        	.member	file_size,224,18,8,32
   554                        	.member	plongfileName,256,142,8,32
   555                        	.eos
   556                        	.stag	_LongFileName,256,54
   557                        	.member	sequenceNo,0,14,8,8
   558                        	.member	fileName_Part1,8,110,8,0,10
  Thu Dec  3 2020 22:25                                                Page 11


   559                        	.member	fileattribute,88,14,8,8
   560                        	.member	type,96,14,8,8
   561                        	.member	checksum,104,14,8,8
   562                        	.member	fileName_Part2,112,110,8,0,12
   563                        	.member	fstclusLO,208,5,8,16
   564                        	.member	fileName_Part3,224,110,8,0,4
   565                        	.eos
   566                        	.stag	_IDSECTOR,2048,55
   567                        	.member	wGenConfig,0,16,8,16
   568                        	.member	wNumCyls,16,16,8,16
   569                        	.member	wReserved,32,16,8,16
   570                        	.member	wNumHeads,48,16,8,16
   571                        	.member	wBytesPerTrack,64,16,8,16
   572                        	.member	wBytesPerSector,80,16,8,16
   573                        	.member	wSectorsPerTrack,96,16,8,16
   574                        	.member	wVendorUnique,112,112,8,0,3
   575                        	.member	sSerialNumber,160,110,8,0,20
   576                        	.member	wBufferType,320,16,8,16
   577                        	.member	wBufferSize,336,16,8,16
   578                        	.member	wECCSize,352,16,8,16
   579                        	.member	sFirmwareRev,368,110,8,0,8
   580                        	.member	sModelNumber,432,110,8,0,40
   581                        	.member	wMoreVendorUnique,752,16,8,16
   582                        	.member	wDoubleWordIO,768,16,8,16
   583                        	.member	wCapabilities,784,16,8,16
   584                        	.member	wReserved1,800,16,8,16
   585                        	.member	wPIOTiming,816,16,8,16
   586                        	.member	wDMATiming,832,16,8,16
   587                        	.member	wBS,848,16,8,16
   588                        	.member	wNumCurrentCyls,864,16,8,16
   589                        	.member	wNumCurrentHeads,880,16,8,16
   590                        	.member	wNumCurrentSectorsPerTrack,896,16,8,16
   591                        	.member	ulCurrentSectorCapacity,912,18,8,32
   592                        	.member	wMultSectorStuff,944,16,8,16
   593                        	.member	ulTotalAddressableSectors,960,18,8,32
   594                        	.member	wSingleWordDMA,992,16,8,16
   595                        	.member	wMultiWordDMA,1008,16,8,16
   596                        	.member	bReserved,1024,110,8,0,128
   597                        	.eos
   598                        	.stag	fake56_,16,56
   599                        	.member	Reserved1,0,16,17,1
   600                        	.member	Retired3,1,16,17,1
   601                        	.member	ResponseIncomplete,2,16,17,1
   602                        	.member	Retired2,3,16,17,3
   603                        	.member	FixedDevice,6,16,17,1
   604                        	.member	RemovableMedia,7,16,17,1
   605                        	.member	Retired1,8,16,17,7
   606                        	.member	DeviceType,15,16,17,1
   607                        	.eos
   608                        	.stag	fake57_,16,57
   609                        	.member	FeatureSupported,0,16,17,1
   610                        	.member	Reserved,1,16,17,15
   611                        	.eos
   612                        	.stag	fake58_,32,58
   613                        	.member	CurrentLongPhysicalSectorAlignment,0,14,
                    17,2
   614                        	.member	ReservedByte49,2,14,17,6
   615                        	.member	DmaSupported,8,14,17,1
  Thu Dec  3 2020 22:25                                                Page 12


   616                        	.member	LbaSupported,9,14,17,1
   617                        	.member	IordyDisable,10,14,17,1
   618                        	.member	IordySupported,11,14,17,1
   619                        	.member	Reserved1,12,14,17,1
   620                        	.member	StandybyTimerSupport,13,14,17,1
   621                        	.member	Reserved2,14,14,17,2
   622                        	.member	ReservedWord50,16,16,8,16
   623                        	.eos
   624                        	.stag	fake59_,16,59
   625                        	.member	ZonedCapabilities,0,16,17,2
   626                        	.member	NonVolatileWriteCache,2,16,17,1
   627                        	.member	ExtendedUserAddressableSectorsSupported,
                    3,16,17,1
   628                        	.member	DeviceEncryptsAllUserData,4,16,17,1
   629                        	.member	ReadZeroAfterTrimSupported,5,16,17,1
   630                        	.member	Optional28BitCommandsSupported,6,16,17,1
   631                        	.member	IEEE1667,7,16,17,1
   632                        	.member	DownloadMicrocodeDmaSupported,8,16,17,1
   633                        	.member	SetMaxSetPasswordUnlockDmaSupported,9,16
                    ,17,1
   634                        	.member	WriteBufferDmaSupported,10,16,17,1
   635                        	.member	ReadBufferDmaSupported,11,16,17,1
   636                        	.member	DeviceConfigIdentifySetDmaSupported,12,1
                    6,17,1
   637                        	.member	LPSAERCSupported,13,16,17,1
   638                        	.member	DeterministicReadAfterTrimSupported,14,1
                    6,17,1
   639                        	.member	CFastSpecSupported,15,16,17,1
   640                        	.eos
   641                        	.stag	fake60_,32,60
   642                        	.member	Reserved0,0,16,17,1
   643                        	.member	SataGen1,1,16,17,1
   644                        	.member	SataGen2,2,16,17,1
   645                        	.member	SataGen3,3,16,17,1
   646                        	.member	Reserved1,4,16,17,4
   647                        	.member	NCQ,8,16,17,1
   648                        	.member	HIPM,9,16,17,1
   649                        	.member	PhyEvents,10,16,17,1
   650                        	.member	NcqUnload,11,16,17,1
   651                        	.member	NcqPriority,12,16,17,1
   652                        	.member	HostAutoPS,13,16,17,1
   653                        	.member	DeviceAutoPS,14,16,17,1
   654                        	.member	ReadLogDMA,15,16,17,1
   655                        	.member	Reserved2,16,16,17,1
   656                        	.member	CurrentSpeed,17,16,17,3
   657                        	.member	NcqStreaming,20,16,17,1
   658                        	.member	NcqQueueMgmt,21,16,17,1
   659                        	.member	NcqReceiveSend,22,16,17,1
   660                        	.member	DEVSLPtoReducedPwrState,23,16,17,1
   661                        	.member	Reserved3,24,16,17,8
   662                        	.eos
   663                        	.stag	fake61_,16,61
   664                        	.member	Reserved0,0,16,17,1
   665                        	.member	NonZeroOffsets,1,16,17,1
   666                        	.member	DmaSetupAutoActivate,2,16,17,1
   667                        	.member	DIPM,3,16,17,1
   668                        	.member	InOrderData,4,16,17,1
   669                        	.member	HardwareFeatureControl,5,16,17,1
  Thu Dec  3 2020 22:25                                                Page 13


   670                        	.member	SoftwareSettingsPreservation,6,16,17,1
   671                        	.member	NCQAutosense,7,16,17,1
   672                        	.member	DEVSLP,8,16,17,1
   673                        	.member	HybridInformation,9,16,17,1
   674                        	.member	Reserved1,10,16,17,6
   675                        	.eos
   676                        	.stag	fake62_,16,62
   677                        	.member	Reserved0,0,16,17,1
   678                        	.member	NonZeroOffsets,1,16,17,1
   679                        	.member	DmaSetupAutoActivate,2,16,17,1
   680                        	.member	DIPM,3,16,17,1
   681                        	.member	InOrderData,4,16,17,1
   682                        	.member	HardwareFeatureControl,5,16,17,1
   683                        	.member	SoftwareSettingsPreservation,6,16,17,1
   684                        	.member	DeviceAutoPS,7,16,17,1
   685                        	.member	DEVSLP,8,16,17,1
   686                        	.member	HybridInformation,9,16,17,1
   687                        	.member	Reserved1,10,16,17,6
   688                        	.eos
   689                        	.stag	fake63_,48,63
   690                        	.member	SmartCommands,0,16,17,1
   691                        	.member	SecurityMode,1,16,17,1
   692                        	.member	RemovableMediaFeature,2,16,17,1
   693                        	.member	PowerManagement,3,16,17,1
   694                        	.member	Reserved1,4,16,17,1
   695                        	.member	WriteCache,5,16,17,1
   696                        	.member	LookAhead,6,16,17,1
   697                        	.member	ReleaseInterrupt,7,16,17,1
   698                        	.member	ServiceInterrupt,8,16,17,1
   699                        	.member	DeviceReset,9,16,17,1
   700                        	.member	HostProtectedArea,10,16,17,1
   701                        	.member	Obsolete1,11,16,17,1
   702                        	.member	WriteBuffer,12,16,17,1
   703                        	.member	ReadBuffer,13,16,17,1
   704                        	.member	Nop,14,16,17,1
   705                        	.member	Obsolete2,15,16,17,1
   706                        	.member	DownloadMicrocode,16,16,17,1
   707                        	.member	DmaQueued,17,16,17,1
   708                        	.member	Cfa,18,16,17,1
   709                        	.member	AdvancedPm,19,16,17,1
   710                        	.member	Msn,20,16,17,1
   711                        	.member	PowerUpInStandby,21,16,17,1
   712                        	.member	ManualPowerUp,22,16,17,1
   713                        	.member	Reserved2,23,16,17,1
   714                        	.member	SetMax,24,16,17,1
   715                        	.member	Acoustics,25,16,17,1
   716                        	.member	BigLba,26,16,17,1
   717                        	.member	DeviceConfigOverlay,27,16,17,1
   718                        	.member	FlushCache,28,16,17,1
   719                        	.member	FlushCacheExt,29,16,17,1
   720                        	.member	WordValid83,30,16,17,2
   721                        	.member	SmartErrorLog,32,16,17,1
   722                        	.member	SmartSelfTest,33,16,17,1
   723                        	.member	MediaSerialNumber,34,16,17,1
   724                        	.member	MediaCardPassThrough,35,16,17,1
   725                        	.member	StreamingFeature,36,16,17,1
   726                        	.member	GpLogging,37,16,17,1
   727                        	.member	WriteFua,38,16,17,1
  Thu Dec  3 2020 22:25                                                Page 14


   728                        	.member	WriteQueuedFua,39,16,17,1
   729                        	.member	WWN64Bit,40,16,17,1
   730                        	.member	URGReadStream,41,16,17,1
   731                        	.member	URGWriteStream,42,16,17,1
   732                        	.member	ReservedForTechReport,43,16,17,2
   733                        	.member	IdleWithUnloadFeature,45,16,17,1
   734                        	.member	WordValid,46,16,17,2
   735                        	.eos
   736                        	.stag	fake64_,48,64
   737                        	.member	SmartCommands,0,16,17,1
   738                        	.member	SecurityMode,1,16,17,1
   739                        	.member	RemovableMediaFeature,2,16,17,1
   740                        	.member	PowerManagement,3,16,17,1
   741                        	.member	Reserved1,4,16,17,1
   742                        	.member	WriteCache,5,16,17,1
   743                        	.member	LookAhead,6,16,17,1
   744                        	.member	ReleaseInterrupt,7,16,17,1
   745                        	.member	ServiceInterrupt,8,16,17,1
   746                        	.member	DeviceReset,9,16,17,1
   747                        	.member	HostProtectedArea,10,16,17,1
   748                        	.member	Obsolete1,11,16,17,1
   749                        	.member	WriteBuffer,12,16,17,1
   750                        	.member	ReadBuffer,13,16,17,1
   751                        	.member	Nop,14,16,17,1
   752                        	.member	Obsolete2,15,16,17,1
   753                        	.member	DownloadMicrocode,16,16,17,1
   754                        	.member	DmaQueued,17,16,17,1
   755                        	.member	Cfa,18,16,17,1
   756                        	.member	AdvancedPm,19,16,17,1
   757                        	.member	Msn,20,16,17,1
   758                        	.member	PowerUpInStandby,21,16,17,1
   759                        	.member	ManualPowerUp,22,16,17,1
   760                        	.member	Reserved2,23,16,17,1
   761                        	.member	SetMax,24,16,17,1
   762                        	.member	Acoustics,25,16,17,1
   763                        	.member	BigLba,26,16,17,1
   764                        	.member	DeviceConfigOverlay,27,16,17,1
   765                        	.member	FlushCache,28,16,17,1
   766                        	.member	FlushCacheExt,29,16,17,1
   767                        	.member	Resrved3,30,16,17,1
   768                        	.member	Words119_120Valid,31,16,17,1
   769                        	.member	SmartErrorLog,32,16,17,1
   770                        	.member	SmartSelfTest,33,16,17,1
   771                        	.member	MediaSerialNumber,34,16,17,1
   772                        	.member	MediaCardPassThrough,35,16,17,1
   773                        	.member	StreamingFeature,36,16,17,1
   774                        	.member	GpLogging,37,16,17,1
   775                        	.member	WriteFua,38,16,17,1
   776                        	.member	WriteQueuedFua,39,16,17,1
   777                        	.member	WWN64Bit,40,16,17,1
   778                        	.member	URGReadStream,41,16,17,1
   779                        	.member	URGWriteStream,42,16,17,1
   780                        	.member	ReservedForTechReport,43,16,17,2
   781                        	.member	IdleWithUnloadFeature,45,16,17,1
   782                        	.member	Reserved4,46,16,17,2
   783                        	.eos
   784                        	.stag	fake65_,16,65
   785                        	.member	TimeRequired,0,16,17,15
  Thu Dec  3 2020 22:25                                                Page 15


   786                        	.member	ExtendedTimeReported,15,16,17,1
   787                        	.eos
   788                        	.stag	fake66_,16,66
   789                        	.member	TimeRequired,0,16,17,15
   790                        	.member	ExtendedTimeReported,15,16,17,1
   791                        	.eos
   792                        	.stag	fake67_,16,67
   793                        	.member	LogicalSectorsPerPhysicalSector,0,16,17,
                    4
   794                        	.member	Reserved0,4,16,17,8
   795                        	.member	LogicalSectorLongerThan256Words,12,16,17
                    ,1
   796                        	.member	MultipleLogicalSectorsPerPhysicalSector,
                    13,16,17,1
   797                        	.member	Reserved1,14,16,17,2
   798                        	.eos
   799                        	.stag	fake68_,16,68
   800                        	.member	ReservedForDrqTechnicalReport,0,16,17,1
   801                        	.member	WriteReadVerify,1,16,17,1
   802                        	.member	WriteUncorrectableExt,2,16,17,1
   803                        	.member	ReadWriteLogDmaExt,3,16,17,1
   804                        	.member	DownloadMicrocodeMode3,4,16,17,1
   805                        	.member	FreefallControl,5,16,17,1
   806                        	.member	SenseDataReporting,6,16,17,1
   807                        	.member	ExtendedPowerConditions,7,16,17,1
   808                        	.member	Reserved0,8,16,17,6
   809                        	.member	WordValid,14,16,17,2
   810                        	.eos
   811                        	.stag	fake69_,16,69
   812                        	.member	ReservedForDrqTechnicalReport,0,16,17,1
   813                        	.member	WriteReadVerify,1,16,17,1
   814                        	.member	WriteUncorrectableExt,2,16,17,1
   815                        	.member	ReadWriteLogDmaExt,3,16,17,1
   816                        	.member	DownloadMicrocodeMode3,4,16,17,1
   817                        	.member	FreefallControl,5,16,17,1
   818                        	.member	SenseDataReporting,6,16,17,1
   819                        	.member	ExtendedPowerConditions,7,16,17,1
   820                        	.member	Reserved0,8,16,17,6
   821                        	.member	Reserved1,14,16,17,2
   822                        	.eos
   823                        	.stag	fake70_,16,70
   824                        	.member	SecuritySupported,0,16,17,1
   825                        	.member	SecurityEnabled,1,16,17,1
   826                        	.member	SecurityLocked,2,16,17,1
   827                        	.member	SecurityFrozen,3,16,17,1
   828                        	.member	SecurityCountExpired,4,16,17,1
   829                        	.member	EnhancedSecurityEraseSupported,5,16,17,1
   830                        	.member	Reserved0,6,16,17,2
   831                        	.member	SecurityLevel,8,16,17,1
   832                        	.member	Reserved1,9,16,17,7
   833                        	.eos
   834                        	.stag	fake71_,16,71
   835                        	.member	MaximumCurrentInMA,0,16,17,12
   836                        	.member	CfaPowerMode1Disabled,12,16,17,1
   837                        	.member	CfaPowerMode1Required,13,16,17,1
   838                        	.member	Reserved0,14,16,17,1
   839                        	.member	Word160Supported,15,16,17,1
   840                        	.eos
  Thu Dec  3 2020 22:25                                                Page 16


   841                        	.stag	fake72_,16,72
   842                        	.member	SupportsTrim,0,16,17,1
   843                        	.member	Reserved0,1,16,17,15
   844                        	.eos
   845                        	.stag	fake73_,16,73
   846                        	.member	Supported,0,16,17,1
   847                        	.member	Reserved0,1,16,17,1
   848                        	.member	WriteSameSuported,2,16,17,1
   849                        	.member	ErrorRecoveryControlSupported,3,16,17,1
   850                        	.member	FeatureControlSuported,4,16,17,1
   851                        	.member	DataTablesSuported,5,16,17,1
   852                        	.member	Reserved1,6,16,17,6
   853                        	.member	VendorSpecific,12,16,17,4
   854                        	.eos
   855                        	.stag	fake74_,16,74
   856                        	.member	AlignmentOfLogicalWithinPhysical,0,16,17
                    ,14
   857                        	.member	Word209Supported,14,16,17,1
   858                        	.member	Reserved0,15,16,17,1
   859                        	.eos
   860                        	.stag	fake75_,16,75
   861                        	.member	NVCachePowerModeEnabled,0,16,17,1
   862                        	.member	Reserved0,1,16,17,3
   863                        	.member	NVCacheFeatureSetEnabled,4,16,17,1
   864                        	.member	Reserved1,5,16,17,3
   865                        	.member	NVCachePowerModeVersion,8,16,17,4
   866                        	.member	NVCacheFeatureSetVersion,12,16,17,4
   867                        	.eos
   868                        	.stag	fake76_,16,76
   869                        	.member	NVCacheEstimatedTimeToSpinUpInSeconds,0,
                    14,8,8
   870                        	.member	Reserved,8,14,8,8
   871                        	.eos
   872                        	.stag	fake77_,16,77
   873                        	.member	MajorVersion,0,16,17,12
   874                        	.member	TransportType,12,16,17,4
   875                        	.eos
   876                        	.stag	_IDENTIFY_DEVICE_DATA,4096,78
   877                        	.member	GeneralConfiguration,0,10,8,16,56
   878                        	.member	NumCylinders,16,16,8,16
   879                        	.member	SpecificConfiguration,32,16,8,16
   880                        	.member	NumHeads,48,16,8,16
   881                        	.member	Retired1Bytes,64,110,8,0,4
   882                        	.member	NumSectorsPerTrack,96,16,8,16
   883                        	.member	VendorUnique1Bytes,112,110,8,0,6
   884                        	.member	SerialNumber,160,110,8,0,20
   885                        	.member	Retired2,320,112,8,0,2
   886                        	.member	Obsolete1,352,16,8,16
   887                        	.member	FirmwareRevision,368,110,8,0,8
   888                        	.member	ModelNumber,432,110,8,0,40
   889                        	.member	MaximumBlockTransfer,752,14,8,8
   890                        	.member	VendorUnique2,760,14,8,8
   891                        	.member	TrustedComputing,768,10,8,16,57
   892                        	.member	Capabilities,784,10,8,32,58
   893                        	.member	ObsoleteWords51,816,112,8,0,2
   894                        	.member	TranslationFieldsValid,848,16,17,3
   895                        	.member	Reserved3,851,16,17,5
   896                        	.member	FreeFallControlSensitivity,856,16,17,8
  Thu Dec  3 2020 22:25                                                Page 17


   897                        	.member	NumberOfCurrentCylinders,864,16,8,16
   898                        	.member	NumberOfCurrentHeads,880,16,8,16
   899                        	.member	CurrentSectorsPerTrack,896,16,8,16
   900                        	.member	CurrentSectorCapacity,912,18,8,32
   901                        	.member	CurrentMultiSectorSetting,944,14,8,8
   902                        	.member	MultiSectorSettingValid,952,14,17,1
   903                        	.member	ReservedByte59,953,14,17,3
   904                        	.member	SanitizeFeatureSupported,956,14,17,1
   905                        	.member	CryptoScrambleExtCommandSupported,957,14
                    ,17,1
   906                        	.member	OverwriteExtCommandSupported,958,14,17,1
   907                        	.member	BlockEraseExtCommandSupported,959,14,17,
                    1
   908                        	.member	UserAddressableSectors,960,18,8,32
   909                        	.member	ObsoleteWord62,992,16,8,16
   910                        	.member	MultiWordDMASupport,1008,16,17,8
   911                        	.member	MultiWordDMAActive,1016,16,17,8
   912                        	.member	AdvancedPIOModes,1024,16,17,8
   913                        	.member	ReservedByte64,1032,16,17,8
   914                        	.member	MinimumMWXferCycleTime,1040,16,8,16
   915                        	.member	RecommendedMWXferCycleTime,1056,16,8,16
   916                        	.member	MinimumPIOCycleTime,1072,16,8,16
   917                        	.member	MinimumPIOCycleTimeIORDY,1088,16,8,16
   918                        	.member	AdditionalSupported,1104,10,8,16,59
   919                        	.member	ReservedWords70,1120,112,8,0,5
   920                        	.member	QueueDepth,1200,16,17,5
   921                        	.member	ReservedWord75,1205,16,17,11
   922                        	.member	SerialAtaCapabilities,1216,10,8,32,60
   923                        	.member	SerialAtaFeaturesSupported,1248,10,8,16,
                    61
   924                        	.member	SerialAtaFeaturesEnabled,1264,10,8,16,62
   925                        	.member	MajorRevision,1280,16,8,16
   926                        	.member	MinorRevision,1296,16,8,16
   927                        	.member	CommandSetSupport,1312,10,8,48,63
   928                        	.member	CommandSetActive,1360,10,8,48,64
   929                        	.member	UltraDMASupport,1408,16,17,8
   930                        	.member	UltraDMAActive,1416,16,17,8
   931                        	.member	NormalSecurityEraseUnit,1424,10,8,16,65
   932                        	.member	EnhancedSecurityEraseUnit,1440,10,8,16,6
                    6
   933                        	.member	CurrentAPMLevel,1456,16,17,8
   934                        	.member	ReservedWord91,1464,16,17,8
   935                        	.member	MasterPasswordID,1472,16,8,16
   936                        	.member	HardwareResetResult,1488,16,8,16
   937                        	.member	CurrentAcousticValue,1504,16,17,8
   938                        	.member	RecommendedAcousticValue,1512,16,17,8
   939                        	.member	StreamMinRequestSize,1520,16,8,16
   940                        	.member	StreamingTransferTimeDMA,1536,16,8,16
   941                        	.member	StreamingAccessLatencyDMAPIO,1552,16,8,1
                    6
   942                        	.member	StreamingPerfGranularity,1568,18,8,32
   943                        	.member	Max48BitLBA,1600,114,8,0,2
   944                        	.member	StreamingTransferTime,1664,16,8,16
   945                        	.member	DsmCap,1680,16,8,16
   946                        	.member	PhysicalLogicalSectorSize,1696,10,8,16,6
                    7
   947                        	.member	InterSeekDelay,1712,16,8,16
   948                        	.member	WorldWideName,1728,112,8,0,4
  Thu Dec  3 2020 22:25                                                Page 18


   949                        	.member	ReservedForWorldWideName128,1792,112,8,0
                    ,4
   950                        	.member	ReservedForTlcTechnicalReport,1856,16,8,
                    16
   951                        	.member	WordsPerLogicalSector,1872,112,8,0,2
   952                        	.member	CommandSetSupportExt,1904,10,8,16,68
   953                        	.member	CommandSetActiveExt,1920,10,8,16,69
   954                        	.member	ReservedForExpandedSupportandActive,1936
                    ,112,8,0,6
   955                        	.member	MsnSupport,2032,16,17,2
   956                        	.member	ReservedWord127,2034,16,17,14
   957                        	.member	SecurityStatus,2048,10,8,16,70
   958                        	.member	ReservedWord129,2064,112,8,0,31
   959                        	.member	CfaPowerMode1,2560,10,8,16,71
   960                        	.member	ReservedForCfaWord161,2576,112,8,0,7
   961                        	.member	NominalFormFactor,2688,16,17,4
   962                        	.member	ReservedWord168,2692,16,17,12
   963                        	.member	DataSetManagementFeature,2704,10,8,16,72
   964                        	.member	AdditionalProductID,2720,112,8,0,4
   965                        	.member	ReservedForCfaWord174,2784,112,8,0,2
   966                        	.member	CurrentMediaSerialNumber,2816,112,8,0,30
   967                        	.member	SCTCommandTransport,3296,10,8,16,73
   968                        	.member	ReservedWord207,3312,112,8,0,2
   969                        	.member	BlockAlignment,3344,10,8,16,74
   970                        	.member	WriteReadVerifySectorCountMode3Only,3360
                    ,112,8,0,2
   971                        	.member	WriteReadVerifySectorCountMode2Only,3392
                    ,112,8,0,2
   972                        	.member	NVCacheCapabilities,3424,10,8,16,75
   973                        	.member	NVCacheSizeLSW,3440,16,8,16
   974                        	.member	NVCacheSizeMSW,3456,16,8,16
   975                        	.member	NominalMediaRotationRate,3472,16,8,16
   976                        	.member	ReservedWord218,3488,16,8,16
   977                        	.member	NVCacheOptions,3504,10,8,16,76
   978                        	.member	WriteReadVerifySectorCountMode,3520,16,1
                    7,8
   979                        	.member	ReservedWord220,3528,16,17,8
   980                        	.member	ReservedWord221,3536,16,8,16
   981                        	.member	TransportMajorVersion,3552,10,8,16,77
   982                        	.member	TransportMinorVersion,3568,16,8,16
   983                        	.member	ReservedWord224,3584,112,8,0,6
   984                        	.member	ExtendedNumberOfUserAddressableSectors,3
                    680,114,8,0,2
   985                        	.member	MinBlocksPerDownloadMicrocodeMode03,3744
                    ,16,8,16
   986                        	.member	MaxBlocksPerDownloadMicrocodeMode03,3760
                    ,16,8,16
   987                        	.member	ReservedWord236,3776,112,8,0,19
   988                        	.member	Signature,4080,16,17,8
   989                        	.member	CheckSum,4088,16,17,8
   990                        	.eos
   991                        	.stag	_FXDosDevice,5648,79
   992                        	.member	type,0,14,8,8
   993                        	.member	initialized,8,14,8,8
   994                        	.member	devdata,16,129,8,32
   995                        	.member	devstatus,48,14,8,8
   996                        	.member	bootSector,56,10,8,928,49
   997                        	.member	partitionTable,984,10,8,128,50
  Thu Dec  3 2020 22:25                                                Page 19


   998                        	.member	fileAllocationTable,1112,110,8,0,512
   999                        	.member	bsOffset,5208,18,8,32
  1000                        	.member	rootDirSectors,5240,18,8,32
  1001                        	.member	root_entry_count,5272,5,8,16
  1002                        	.member	rootEntriesPerPage,5288,5,8,16
  1003                        	.member	sectors_per_cluster,5304,5,8,16
  1004                        	.member	fatTableOffset,5320,18,8,32
  1005                        	.member	volume_name,5352,110,8,0,12
  1006                        	.member	root_volume_name,5448,110,8,0,12
  1007                        	.member	errorCode,5544,14,8,8
  1008                        	.member	pfInit,5552,641,8,32
  1009                        	.member	pfReader,5584,654,8,32
  1010                        	.member	pfWriter,5616,654,8,32
  1011                        	.eos
  1012                        	.line	705
  1013                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ff.c",24
  1014                        ;#include "ff.h"			/* Declarations 
                    of FatFs API */
  1015                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ff.h",0
  1016                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ffconf.h",0
  1017                        	.line	298
  1018                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ff.h",29
  1019                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
  1020                        	.line	708
  1021                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ff.h",30
  1022                        	.stag	fake80_,4472,80
  1023                        	.member	fs_type,0,14,8,8
  1024                        	.member	pdrv,8,14,8,8
  1025                        	.member	n_fats,16,14,8,8
  1026                        	.member	wflag,24,14,8,8
  1027                        	.member	fsi_flag,32,14,8,8
  1028                        	.member	id,40,5,8,16
  1029                        	.member	n_rootdir,56,5,8,16
  1030                        	.member	csize,72,5,8,16
  1031                        	.member	last_clst,88,18,8,32
  1032                        	.member	free_clst,120,18,8,32
  1033                        	.member	n_fatent,152,18,8,32
  1034                        	.member	fsize,184,18,8,32
  1035                        	.member	volbase,216,18,8,32
  1036                        	.member	fatbase,248,18,8,32
  1037                        	.member	dirbase,280,18,8,32
  1038                        	.member	database,312,18,8,32
  1039                        	.member	winsect,344,18,8,32
  1040                        	.member	win,376,110,8,0,512
  1041                        	.eos
  1042                        	.stag	fake81_,128,81
  1043                        	.member	fs,0,138,8,32,80
  1044                        	.member	id,32,5,8,16
  1045                        	.member	attr,48,14,8,8
  1046                        	.member	stat,56,14,8,8
  1047                        	.member	sclust,64,18,8,32
  1048                        	.member	objsize,96,18,8,32
  Thu Dec  3 2020 22:25                                                Page 20


  1049                        	.eos
  1050                        	.stag	fake82_,4400,82
  1051                        	.member	obj,0,10,8,128,81
  1052                        	.member	flag,128,14,8,8
  1053                        	.member	err,136,14,8,8
  1054                        	.member	fptr,144,18,8,32
  1055                        	.member	clust,176,18,8,32
  1056                        	.member	sect,208,18,8,32
  1057                        	.member	dir_sect,240,18,8,32
  1058                        	.member	dir_ptr,272,142,8,32
  1059                        	.member	buf,304,110,8,0,512
  1060                        	.eos
  1061                        	.stag	fake83_,352,83
  1062                        	.member	obj,0,10,8,128,81
  1063                        	.member	dptr,128,18,8,32
  1064                        	.member	clust,160,18,8,32
  1065                        	.member	sect,192,18,8,32
  1066                        	.member	dir,224,142,8,32
  1067                        	.member	fn,256,110,8,0,12
  1068                        	.eos
  1069                        	.stag	fake84_,176,84
  1070                        	.member	fsize,0,18,8,32
  1071                        	.member	fdate,32,5,8,16
  1072                        	.member	ftime,48,5,8,16
  1073                        	.member	fattrib,64,14,8,8
  1074                        	.member	fname,72,110,8,0,13
  1075                        	.eos
  1076                        	.stag	fake85_,80,85
  1077                        	.member	fmt,0,14,8,8
  1078                        	.member	n_fat,8,14,8,8
  1079                        	.member	align,16,16,8,16
  1080                        	.member	n_root,32,16,8,16
  1081                        	.member	au_size,48,18,8,32
  1082                        	.eos
  1083                        	.line	429
  1084                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ff.c",25
  1085                        ;#include "diskio.h"		/* Declarations 
                    of device I/O functions */
  1086                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\diskio.h",0
  1087                        	.line	77
  1088                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ff.c",26
  1089                        ;
  1090                        ;#include <stdarg.h>
  1091                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdarg.h",0
  1092                        	.line	51
  1093                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ff.c",28
  1094                        ;
  1095                        ;#pragma section CODE=FFDOS,offset $08:0000
  1096                        FFDOS	section	offset $08:0000
  1097 08:0000:              	ends
  1098                        ;
  1099                        ;/*-----------------------------------------------
                    ---------------------------
  Thu Dec  3 2020 22:25                                                Page 21


  1100                        ;
  1101                        ;   Module Private Definitions
  1102                        ;
  1103                        ;-------------------------------------------------
                    --------------------------*/
  1104                        ;
  1105                        ;#if FF_DEFINED != 86606	/* Revision ID */
  1106                        ;#error Wrong include file (ff.h).
  1107                        ;#endif
  1108                        ;
  1109                        ;
  1110                        ;/* Limits and boundaries */
  1111                        ;#define MAX_DIR		0x200000		
                    /* Max size of FAT directory */
  1112                        ;#define MAX_DIR_EX	0x10000000		
                    /* Max size of exFAT directory */
  1113                        ;#define MAX_FAT12	0xFF5			
                    /* Max FAT12 clusters (differs from specs, but right for rea
                    l DOS/Windows behavior) */
  1114                        ;#define MAX_FAT16	0xFFF5			
                    /* Max FAT16 clusters (differs from specs, but right for rea
                    l DOS/Windows behavior) */
  1115                        ;#define MAX_FAT32	0x0FFFFFF5		
                    /* Max FAT32 clusters (not specified, practical limit) */
  1116                        ;#define MAX_EXFAT	0x7FFFFFFD		
                    /* Max exFAT clusters (differs from specs, implementation li
                    mit) */
  1117                        ;
  1118                        ;
  1119                        ;#define FADDR(x) (&(fs->win[x]))
  1120                        ;
  1121                        ;/* Character code support macros */
  1122                        ;#define IsUpper(c)		((c) >= 'A' && (
                    c) <= 'Z')
  1123                        ;#define IsLower(c)		((c) >= 'a' && (
                    c) <= 'z')
  1124                        ;#define IsDigit(c)		((c) >= '0' && (
                    c) <= '9')
  1125                        ;#define IsSurrogate(c)	((c) >= 0xD800 && (c) <=
                     0xDFFF)
  1126                        ;#define IsSurrogateH(c)	((c) >= 0xD800 && (c) <=
                     0xDBFF)
  1127                        ;#define IsSurrogateL(c)	((c) >= 0xDC00 && (c) <=
                     0xDFFF)
  1128                        ;
  1129                        ;
  1130                        ;/* Additional file access control and file status
                     flags for internal use */
  1131                        ;#define FA_SEEKEND	0x20	/* Seek to end o
                    f the file on file open */
  1132                        ;#define FA_MODIFIED	0x40	/* File has been
                     modified */
  1133                        ;#define FA_DIRTY	0x80	/* FIL.buf[] needs to be
                     written-back */
  1134                        ;
  1135                        ;
  1136                        ;/* Additional file attribute bits for internal us
                    e */
  Thu Dec  3 2020 22:25                                                Page 22


  1137                        ;#define AM_VOL		0x08	/* Volume label 
                    */
  1138                        ;#define AM_LFN		0x0F	/* LFN entry */
  1139                        ;#define AM_MASK		0x3F	/* Mask of defin
                    ed bits */
  1140                        ;
  1141                        ;
  1142                        ;/* Name status flags in fn[11] */
  1143                        ;#define NSFLAG		11		/* Index
                     of the name status byte */
  1144                        ;#define NS_LOSS		0x01	/* Out of 8.3 fo
                    rmat */
  1145                        ;#define NS_LFN		0x02	/* Force to crea
                    te LFN entry */
  1146                        ;#define NS_LAST		0x04	/* Last segment 
                    */
  1147                        ;#define NS_BODY		0x08	/* Lower case fl
                    ag (body) */
  1148                        ;#define NS_EXT		0x10	/* Lower case fl
                    ag (ext) */
  1149                        ;#define NS_DOT		0x20	/* Dot entry */
  1150                        ;#define NS_NOLFN	0x40	/* Do not find LFN */
  1151                        ;#define NS_NONAME	0x80	/* Not followed 
                    */
  1152                        ;
  1153                        ;
  1154                        ;/* exFAT directory entry types */
  1155                        ;#define	ET_BITMAP	0x81	/* Allocation bi
                    tmap */
  1156                        ;#define	ET_UPCASE	0x82	/* Up-case table
                     */
  1157                        ;#define	ET_VLABEL	0x83	/* Volume label 
                    */
  1158                        ;#define	ET_FILEDIR	0x85	/* File and dire
                    ctory */
  1159                        ;#define	ET_STREAM	0xC0	/* Stream extens
                    ion */
  1160                        ;#define	ET_FILENAME	0xC1	/* Name extensio
                    n */
  1161                        ;
  1162                        ;
  1163                        ;/* FatFs refers the FAT structure as simple byte 
                    array instead of structure member
  1164                        ;/ because the C structure is not binary compatibl
                    e between different platforms */
  1165                        ;
  1166                        ;#define BS_JmpBoot			0	
                    	/* x86 jump instruction (3-byte) */
  1167                        ;#define BS_OEMName			3	
                    	/* OEM name (8-byte) */
  1168                        ;#define BPB_BytsPerSec		11		
                    /* Sector size [byte] (WORD) */
  1169                        ;#define BPB_SecPerClus		13		
                    /* Cluster size [sector] (BYTE) */
  1170                        ;#define BPB_RsvdSecCnt		14		
                    /* Size of reserved area [sector] (WORD) */
  1171                        ;#define BPB_NumFATs			16	
                    	/* Number of FATs (BYTE) */
  Thu Dec  3 2020 22:25                                                Page 23


  1172                        ;#define BPB_RootEntCnt		17		
                    /* Size of root directory area for FAT [entry] (WORD) */
  1173                        ;#define BPB_TotSec16		19		
                    /* Volume size (16-bit) [sector] (WORD) */
  1174                        ;#define BPB_Media			21	
                    	/* Media descriptor byte (BYTE) */
  1175                        ;#define BPB_FATSz16			22	
                    	/* FAT size (16-bit) [sector] (WORD) */
  1176                        ;#define BPB_SecPerTrk		24		
                    /* Number of sectors per track for int13h [sector] (WORD) */
  1177                        ;#define BPB_NumHeads		26		
                    /* Number of heads for int13h (WORD) */
  1178                        ;#define BPB_HiddSec			28	
                    	/* Volume offset from top of the drive (DWORD) */
  1179                        ;#define BPB_TotSec32		32		
                    /* Volume size (32-bit) [sector] (DWORD) */
  1180                        ;#define BS_DrvNum			36	
                    	/* Physical drive number for int13h (BYTE) */
  1181                        ;#define BS_NTres			37		
                    /* WindowsNT error flag (BYTE) */
  1182                        ;#define BS_BootSig			38	
                    	/* Extended boot signature (BYTE) */
  1183                        ;#define BS_VolID			39		
                    /* Volume serial number (DWORD) */
  1184                        ;#define BS_VolLab			43	
                    	/* Volume label string (8-byte) */
  1185                        ;#define BS_FilSysType		54		
                    /* Filesystem type string (8-byte) */
  1186                        ;#define BS_BootCode			62	
                    	/* Boot code (448-byte) */
  1187                        ;#define BS_55AA				510	
                    	/* Signature word (WORD) */
  1188                        ;
  1189                        ;#define BPB_FATSz32			36	
                    	/* FAT32: FAT size [sector] (DWORD) */
  1190                        ;#define BPB_ExtFlags32		40		
                    /* FAT32: Extended flags (WORD) */
  1191                        ;#define BPB_FSVer32			42	
                    	/* FAT32: Filesystem version (WORD) */
  1192                        ;#define BPB_RootClus32		44		
                    /* FAT32: Root directory cluster (DWORD) */
  1193                        ;#define BPB_FSInfo32		48		
                    /* FAT32: Offset of FSINFO sector (WORD) */
  1194                        ;#define BPB_BkBootSec32		50		
                    /* FAT32: Offset of backup boot sector (WORD) */
  1195                        ;#define BS_DrvNum32			64	
                    	/* FAT32: Physical drive number for int13h (BYTE) */
  1196                        ;#define BS_NTres32			65	
                    	/* FAT32: Error flag (BYTE) */
  1197                        ;#define BS_BootSig32		66		
                    /* FAT32: Extended boot signature (BYTE) */
  1198                        ;#define BS_VolID32			67	
                    	/* FAT32: Volume serial number (DWORD) */
  1199                        ;#define BS_VolLab32			71	
                    	/* FAT32: Volume label string (8-byte) */
  1200                        ;#define BS_FilSysType32		82		
                    /* FAT32: Filesystem type string (8-byte) */
  1201                        ;#define BS_BootCode32		90		
  Thu Dec  3 2020 22:25                                                Page 24


                    /* FAT32: Boot code (420-byte) */
  1202                        ;
  1203                        ;#define BPB_ZeroedEx		11		
                    /* exFAT: MBZ field (53-byte) */
  1204                        ;#define BPB_VolOfsEx		64		
                    /* exFAT: Volume offset from top of the drive [sector] (QWOR
                    D) */
  1205                        ;#define BPB_TotSecEx		72		
                    /* exFAT: Volume size [sector] (QWORD) */
  1206                        ;#define BPB_FatOfsEx		80		
                    /* exFAT: FAT offset from top of the volume [sector] (DWORD)
                     */
  1207                        ;#define BPB_FatSzEx			84	
                    	/* exFAT: FAT size [sector] (DWORD) */
  1208                        ;#define BPB_DataOfsEx		88		
                    /* exFAT: Data offset from top of the volume [sector] (DWORD
                    ) */
  1209                        ;#define BPB_NumClusEx		92		
                    /* exFAT: Number of clusters (DWORD) */
  1210                        ;#define BPB_RootClusEx		96		
                    /* exFAT: Root directory start cluster (DWORD) */
  1211                        ;#define BPB_VolIDEx			100	
                    	/* exFAT: Volume serial number (DWORD) */
  1212                        ;#define BPB_FSVerEx			104	
                    	/* exFAT: Filesystem version (WORD) */
  1213                        ;#define BPB_VolFlagEx		106		
                    /* exFAT: Volume flags (WORD) */
  1214                        ;#define BPB_BytsPerSecEx	108		/* exFAT
                    : Log2 of sector size in unit of byte (BYTE) */
  1215                        ;#define BPB_SecPerClusEx	109		/* exFAT
                    : Log2 of cluster size in unit of sector (BYTE) */
  1216                        ;#define BPB_NumFATsEx		110		
                    /* exFAT: Number of FATs (BYTE) */
  1217                        ;#define BPB_DrvNumEx		111		
                    /* exFAT: Physical drive number for int13h (BYTE) */
  1218                        ;#define BPB_PercInUseEx		112		
                    /* exFAT: Percent in use (BYTE) */
  1219                        ;#define BPB_RsvdEx			113	
                    	/* exFAT: Reserved (7-byte) */
  1220                        ;#define BS_BootCodeEx		120		
                    /* exFAT: Boot code (390-byte) */
  1221                        ;
  1222                        ;#define DIR_Name			0		
                    /* Short file name (11-byte) */
  1223                        ;#define DIR_Attr			11		
                    /* Attribute (BYTE) */
  1224                        ;#define DIR_NTres			12	
                    	/* Lower case flag (BYTE) */
  1225                        ;#define DIR_CrtTime10		13		
                    /* Created time sub-second (BYTE) */
  1226                        ;#define DIR_CrtTime			14	
                    	/* Created time (DWORD) */
  1227                        ;#define DIR_LstAccDate		18		
                    /* Last accessed date (WORD) */
  1228                        ;#define DIR_FstClusHI		20		
                    /* Higher 16-bit of first cluster (WORD) */
  1229                        ;#define DIR_ModTime			22	
                    	/* Modified time (DWORD) */
  Thu Dec  3 2020 22:25                                                Page 25


  1230                        ;#define DIR_FstClusLO		26		
                    /* Lower 16-bit of first cluster (WORD) */
  1231                        ;#define DIR_FileSize		28		
                    /* File size (DWORD) */
  1232                        ;#define LDIR_Ord			0		
                    /* LFN: LFN order and LLE flag (BYTE) */
  1233                        ;#define LDIR_Attr			11	
                    	/* LFN: LFN attribute (BYTE) */
  1234                        ;#define LDIR_Type			12	
                    	/* LFN: Entry type (BYTE) */
  1235                        ;#define LDIR_Chksum			13	
                    	/* LFN: Checksum of the SFN (BYTE) */
  1236                        ;#define LDIR_FstClusLO		26		
                    /* LFN: MBZ field (WORD) */
  1237                        ;#define XDIR_Type			0	
                    	/* exFAT: Type of exFAT directory entry (BYTE) */
  1238                        ;#define XDIR_NumLabel		1		
                    /* exFAT: Number of volume label characters (BYTE) */
  1239                        ;#define XDIR_Label			2	
                    	/* exFAT: Volume label (11-WORD) */
  1240                        ;#define XDIR_CaseSum		4		
                    /* exFAT: Sum of case conversion table (DWORD) */
  1241                        ;#define XDIR_NumSec			1	
                    	/* exFAT: Number of secondary entries (BYTE) */
  1242                        ;#define XDIR_SetSum			2	
                    	/* exFAT: Sum of the set of directory entries (WORD) */
  1243                        ;#define XDIR_Attr			4	
                    	/* exFAT: File attribute (WORD) */
  1244                        ;#define XDIR_CrtTime		8		
                    /* exFAT: Created time (DWORD) */
  1245                        ;#define XDIR_ModTime		12		
                    /* exFAT: Modified time (DWORD) */
  1246                        ;#define XDIR_AccTime		16		
                    /* exFAT: Last accessed time (DWORD) */
  1247                        ;#define XDIR_CrtTime10		20		
                    /* exFAT: Created time subsecond (BYTE) */
  1248                        ;#define XDIR_ModTime10		21		
                    /* exFAT: Modified time subsecond (BYTE) */
  1249                        ;#define XDIR_CrtTZ			22	
                    	/* exFAT: Created timezone (BYTE) */
  1250                        ;#define XDIR_ModTZ			23	
                    	/* exFAT: Modified timezone (BYTE) */
  1251                        ;#define XDIR_AccTZ			24	
                    	/* exFAT: Last accessed timezone (BYTE) */
  1252                        ;#define XDIR_GenFlags		33		
                    /* exFAT: General secondary flags (BYTE) */
  1253                        ;#define XDIR_NumName		35		
                    /* exFAT: Number of file name characters (BYTE) */
  1254                        ;#define XDIR_NameHash		36		
                    /* exFAT: Hash of file name (WORD) */
  1255                        ;#define XDIR_ValidFileSize	40		
                    /* exFAT: Valid file size (QWORD) */
  1256                        ;#define XDIR_FstClus		52		
                    /* exFAT: First cluster of the file data (DWORD) */
  1257                        ;#define XDIR_FileSize		56		
                    /* exFAT: File/Directory size (QWORD) */
  1258                        ;
  1259                        ;#define SZDIRE				32	
  Thu Dec  3 2020 22:25                                                Page 26


                    	/* Size of a directory entry */
  1260                        ;#define DDEM				0xE5	
                    /* Deleted directory entry mark set to DIR_Name[0] */
  1261                        ;#define RDDEM				0x05	
                    /* Replacement of the character collides with DDEM */
  1262                        ;#define LLEF				0x40	
                    /* Last long entry flag in LDIR_Ord */
  1263                        ;
  1264                        ;#define FSI_LeadSig			0	
                    	/* FAT32 FSI: Leading signature (DWORD) */
  1265                        ;#define FSI_StrucSig		484		
                    /* FAT32 FSI: Structure signature (DWORD) */
  1266                        ;#define FSI_Free_Count		488		
                    /* FAT32 FSI: Number of free clusters (DWORD) */
  1267                        ;#define FSI_Nxt_Free		492		
                    /* FAT32 FSI: Last allocated cluster (DWORD) */
  1268                        ;
  1269                        ;#define MBR_Table			446	
                    	/* MBR: Offset of partition table in the MBR */
  1270                        ;#define SZ_PTE				16	
                    	/* MBR: Size of a partition table entry */
  1271                        ;#define PTE_Boot			0		
                    /* MBR PTE: Boot indicator */
  1272                        ;#define PTE_StHead			1	
                    	/* MBR PTE: Start head */
  1273                        ;#define PTE_StSec			2	
                    	/* MBR PTE: Start sector */
  1274                        ;#define PTE_StCyl			3	
                    	/* MBR PTE: Start cylinder */
  1275                        ;#define PTE_System			4	
                    	/* MBR PTE: System ID */
  1276                        ;#define PTE_EdHead			5	
                    	/* MBR PTE: End head */
  1277                        ;#define PTE_EdSec			6	
                    	/* MBR PTE: End sector */
  1278                        ;#define PTE_EdCyl			7	
                    	/* MBR PTE: End cylinder */
  1279                        ;#define PTE_StLba			8	
                    	/* MBR PTE: Start in LBA */
  1280                        ;#define PTE_SizLba			12	
                    	/* MBR PTE: Size in LBA */
  1281                        ;
  1282                        ;#define GPTH_Sign			0	
                    	/* GPT: Header signature (8-byte) */
  1283                        ;#define GPTH_Rev			8		
                    /* GPT: Revision (DWORD) */
  1284                        ;#define GPTH_Size			12	
                    	/* GPT: Header size (DWORD) */
  1285                        ;#define GPTH_Bcc			16		
                    /* GPT: Header BCC (DWORD) */
  1286                        ;#define GPTH_CurLba			24	
                    	/* GPT: Main header LBA (QWORD) */
  1287                        ;#define GPTH_BakLba			32	
                    	/* GPT: Backup header LBA (QWORD) */
  1288                        ;#define GPTH_FstLba			40	
                    	/* GPT: First LBA for partitions (QWORD) */
  1289                        ;#define GPTH_LstLba			48	
                    	/* GPT: Last LBA for partitions (QWORD) */
  Thu Dec  3 2020 22:25                                                Page 27


  1290                        ;#define GPTH_DskGuid		56		
                    /* GPT: Disk GUID (16-byte) */
  1291                        ;#define GPTH_PtOfs			72	
                    	/* GPT: Partation table LBA (QWORD) */
  1292                        ;#define GPTH_PtNum			80	
                    	/* GPT: Number of table entries (DWORD) */
  1293                        ;#define GPTH_PteSize		84		
                    /* GPT: Size of table entry (DWORD) */
  1294                        ;#define GPTH_PtBcc			88	
                    	/* GPT: Partation table BCC (DWORD) */
  1295                        ;#define SZ_GPTE				128	
                    	/* GPT: Size of partition table entry */
  1296                        ;#define GPTE_PtGuid			0	
                    	/* GPT PTE: Partition type GUID (16-byte) */
  1297                        ;#define GPTE_UpGuid			16	
                    	/* GPT PTE: Partition unique GUID (16-byte) */
  1298                        ;#define GPTE_FstLba			32	
                    	/* GPT PTE: First LBA (QWORD) */
  1299                        ;#define GPTE_LstLba			40	
                    	/* GPT PTE: Last LBA inclusive (QWORD) */
  1300                        ;#define GPTE_Flags			48	
                    	/* GPT PTE: Flags (QWORD) */
  1301                        ;#define GPTE_Name			56	
                    	/* GPT PTE: Name */
  1302                        ;
  1303                        ;
  1304                        ;/* Post process on fatal error in the file operat
                    ions */
  1305                        ;#define ABORT(fs, res)		{ fp->err = (BYT
                    E)(res); LEAVE_FF(fs, res); }
  1306                        ;
  1307                        ;
  1308                        ;/* Re-entrancy related */
  1309                        ;#if FF_FS_REENTRANT
  1310                        ;#if FF_USE_LFN == 1
  1311                        ;#error Static LFN work area cannot be used at thr
                    ead-safe configuration
  1312                        ;#endif
  1313                        ;#define LEAVE_FF(fs, res)	{ unlock_fs(fs, 
                    res); return res; }
  1314                        ;#else
  1315                        ;#define LEAVE_FF(fs, res)	return res
  1316                        ;#endif
  1317                        ;
  1318                        ;
  1319                        ;/* Definitions of logical drive - physical locati
                    on conversion */
  1320                        ;#if FF_MULTI_PARTITION
  1321                        ;#define LD2PD(vol) VolToPart[vol].pd	/* Get p
                    hysical drive number */
  1322                        ;#define LD2PT(vol) VolToPart[vol].pt	/* Get p
                    artition index */
  1323                        ;#else
  1324                        ;#define LD2PD(vol) (BYTE)(vol)	/* Each logical 
                    drive is associated with the same physical drive number */
  1325                        ;#define LD2PT(vol) 0			/* Find 
                    first valid partition or in SFD */
  1326                        ;#endif
  Thu Dec  3 2020 22:25                                                Page 28


  1327                        ;
  1328                        ;
  1329                        ;/* Definitions of sector size */
  1330                        ;#if (FF_MAX_SS < FF_MIN_SS) || (FF_MAX_SS != 512 
                    && FF_MAX_SS != 1024 && FF_MAX_SS != 2048 && FF_MAX_SS != 40
                    96) || (FF_MIN_SS != 512 && FF_MIN_SS != 1024 && FF_MIN_SS !
                    = 2048 && FF_MIN_SS != 4096)
  1331                        ;#error Wrong sector size configuration
  1332                        ;#endif
  1333                        ;#if FF_MAX_SS == FF_MIN_SS
  1334                        ;#define SS(fs)	((UINT)FF_MAX_SS)	/* Fixed
                     sector size */
  1335                        ;#else
  1336                        ;#define SS(fs)	((fs)->ssize)	/* Variable sect
                    or size */
  1337                        ;#endif
  1338                        ;
  1339                        ;
  1340                        ;/* Timestamp */
  1341                        ;#if FF_FS_NORTC == 1
  1342                        ;#if FF_NORTC_YEAR < 1980 || FF_NORTC_YEAR > 2107 
                    || FF_NORTC_MON < 1 || FF_NORTC_MON > 12 || FF_NORTC_MDAY < 
                    1 || FF_NORTC_MDAY > 31
  1343                        ;#error Invalid FF_FS_NORTC settings
  1344                        ;#endif
  1345                        ;#define GET_FATTIME()	((DWORD)(FF_NORTC_YEAR -
                     1980) << 25 | (DWORD)FF_NORTC_MON << 21 | (DWORD)FF_NORTC_M
                    DAY << 16)
  1346                        ;#else
  1347                        ;#define GET_FATTIME()	get_fattime()
  1348                        ;#endif
  1349                        ;
  1350                        ;
  1351                        ;/* File lock controls */
  1352                        ;#if FF_FS_LOCK != 0
  1353                        ;#if FF_FS_READONLY
  1354                        ;#error FF_FS_LOCK must be 0 at read-only configur
                    ation
  1355                        ;#endif
  1356                        ;typedef struct {
  1357                        ;	FATFS *fs;		/* Object ID 1, volume (
                    NULL:blank entry) */
  1358                        ;	DWORD clu;		/* Object ID 2, containi
                    ng directory (0:root) */
  1359                        ;	DWORD ofs;		/* Object ID 3, offset i
                    n the directory */
  1360                        ;	WORD ctr;		/* Object open counter, 
                    0:none, 0x01..0xFF:read mode open count, 0x100:write mode */
  1361                        ;} FILESEM;
  1362                        ;#endif
  1363                        ;
  1364                        ;
  1365                        ;/* SBCS up-case tables (\x80-\xFF) */
  1366                        ;#define TBL_CT437  {0x80,0x9A,0x45,0x41,0x8E,0x41
                    ,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F, \
  1367                        ;					0x90,0x92,0x92,0
                    x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0
                    x9F, \
  Thu Dec  3 2020 22:25                                                Page 29


  1368                        ;					0x41,0x49,0x4F,0
                    x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0
                    xAF, \
  1369                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
                    xBF, \
  1370                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
  1371                        ;					0xD0,0xD1,0xD2,0
                    xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0
                    xDF, \
  1372                        ;					0xE0,0xE1,0xE2,0
                    xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0
                    xEF, \
  1373                        ;					0xF0,0xF1,0xF2,0
                    xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0
                    xFF}
  1374                        ;#define TBL_CT720  {0x80,0x81,0x82,0x83,0x84,0x85
                    ,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
  1375                        ;					0x90,0x91,0x92,0
                    x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0
                    x9F, \
  1376                        ;					0xA0,0xA1,0xA2,0
                    xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0
                    xAF, \
  1377                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
                    xBF, \
  1378                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
  1379                        ;					0xD0,0xD1,0xD2,0
                    xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0
                    xDF, \
  1380                        ;					0xE0,0xE1,0xE2,0
                    xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0
                    xEF, \
  1381                        ;					0xF0,0xF1,0xF2,0
                    xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0
                    xFF}
  1382                        ;#define TBL_CT737  {0x80,0x81,0x82,0x83,0x84,0x85
                    ,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
  1383                        ;					0x90,0x92,0x92,0
                    x93,0x94,0x95,0x96,0x97,0x80,0x81,0x82,0x83,0x84,0x85,0x86,0
                    x87, \
  1384                        ;					0x88,0x89,0x8A,0
                    x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0xAA,0x92,0x93,0x94,0x95,0
                    x96, \
  1385                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
                    xBF, \
  1386                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
  1387                        ;					0xD0,0xD1,0xD2,0
                    xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0
                    xDF, \
  Thu Dec  3 2020 22:25                                                Page 30


  1388                        ;					0x97,0xEA,0xEB,0
                    xEC,0xE4,0xED,0xEE,0xEF,0xF5,0xF0,0xEA,0xEB,0xEC,0xED,0xEE,0
                    xEF, \
  1389                        ;					0xF0,0xF1,0xF2,0
                    xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0
                    xFF}
  1390                        ;#define TBL_CT771  {0x80,0x81,0x82,0x83,0x84,0x85
                    ,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
  1391                        ;					0x90,0x91,0x92,0
                    x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0
                    x9F, \
  1392                        ;					0x80,0x81,0x82,0
                    x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0
                    x8F, \
  1393                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
                    xBF, \
  1394                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
  1395                        ;					0xD0,0xD1,0xD2,0
                    xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDC,0xDE,0
                    xDE, \
  1396                        ;					0x90,0x91,0x92,0
                    x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0
                    x9F, \
  1397                        ;					0xF0,0xF0,0xF2,0
                    xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF8,0xFA,0xFA,0xFC,0xFC,0xFE,0
                    xFF}
  1398                        ;#define TBL_CT775  {0x80,0x9A,0x91,0xA0,0x8E,0x95
                    ,0x8F,0x80,0xAD,0xED,0x8A,0x8A,0xA1,0x8D,0x8E,0x8F, \
  1399                        ;					0x90,0x92,0x92,0
                    xE2,0x99,0x95,0x96,0x97,0x97,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0
                    x9F, \
  1400                        ;					0xA0,0xA1,0xE0,0
                    xA3,0xA3,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0
                    xAF, \
  1401                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
                    xBF, \
  1402                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
  1403                        ;					0xB5,0xB6,0xB7,0
                    xB8,0xBD,0xBE,0xC6,0xC7,0xA5,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0
                    xDF, \
  1404                        ;					0xE0,0xE1,0xE2,0
                    xE3,0xE5,0xE5,0xE6,0xE3,0xE8,0xE8,0xEA,0xEA,0xEE,0xED,0xEE,0
                    xEF, \
  1405                        ;					0xF0,0xF1,0xF2,0
                    xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0
                    xFF}
  1406                        ;#define TBL_CT850  {0x43,0x55,0x45,0x41,0x41,0x41
                    ,0x41,0x43,0x45,0x45,0x45,0x49,0x49,0x49,0x41,0x41, \
  1407                        ;					0x45,0x92,0x92,0
                    x4F,0x4F,0x4F,0x55,0x55,0x59,0x4F,0x55,0x4F,0x9C,0x4F,0x9E,0
                    x9F, \
  1408                        ;					0x41,0x49,0x4F,0
  Thu Dec  3 2020 22:25                                                Page 31


                    x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0
                    xAF, \
  1409                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0x41,0x41,0x41,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
                    xBF, \
  1410                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0x41,0x41,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
  1411                        ;					0xD1,0xD1,0x45,0
                    x45,0x45,0x49,0x49,0x49,0x49,0xD9,0xDA,0xDB,0xDC,0xDD,0x49,0
                    xDF, \
  1412                        ;					0x4F,0xE1,0x4F,0
                    x4F,0x4F,0x4F,0xE6,0xE8,0xE8,0x55,0x55,0x55,0x59,0x59,0xEE,0
                    xEF, \
  1413                        ;					0xF0,0xF1,0xF2,0
                    xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0
                    xFF}
  1414                        ;#define TBL_CT852  {0x80,0x9A,0x90,0xB6,0x8E,0xDE
                    ,0x8F,0x80,0x9D,0xD3,0x8A,0x8A,0xD7,0x8D,0x8E,0x8F, \
  1415                        ;					0x90,0x91,0x91,0
                    xE2,0x99,0x95,0x95,0x97,0x97,0x99,0x9A,0x9B,0x9B,0x9D,0x9E,0
                    xAC, \
  1416                        ;					0xB5,0xD6,0xE0,0
                    xE9,0xA4,0xA4,0xA6,0xA6,0xA8,0xA8,0xAA,0x8D,0xAC,0xB8,0xAE,0
                    xAF, \
  1417                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBD,0
                    xBF, \
  1418                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC6,0xC6,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
  1419                        ;					0xD1,0xD1,0xD2,0
                    xD3,0xD2,0xD5,0xD6,0xD7,0xB7,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0
                    xDF, \
  1420                        ;					0xE0,0xE1,0xE2,0
                    xE3,0xE3,0xD5,0xE6,0xE6,0xE8,0xE9,0xE8,0xEB,0xED,0xED,0xDD,0
                    xEF, \
  1421                        ;					0xF0,0xF1,0xF2,0
                    xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xEB,0xFC,0xFC,0xFE,0
                    xFF}
  1422                        ;#define TBL_CT855  {0x81,0x81,0x83,0x83,0x85,0x85
                    ,0x87,0x87,0x89,0x89,0x8B,0x8B,0x8D,0x8D,0x8F,0x8F, \
  1423                        ;					0x91,0x91,0x93,0
                    x93,0x95,0x95,0x97,0x97,0x99,0x99,0x9B,0x9B,0x9D,0x9D,0x9F,0
                    x9F, \
  1424                        ;					0xA1,0xA1,0xA3,0
                    xA3,0xA5,0xA5,0xA7,0xA7,0xA9,0xA9,0xAB,0xAB,0xAD,0xAD,0xAE,0
                    xAF, \
  1425                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB6,0xB6,0xB8,0xB8,0xB9,0xBA,0xBB,0xBC,0xBE,0xBE,0
                    xBF, \
  1426                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
  1427                        ;					0xD1,0xD1,0xD3,0
                    xD3,0xD5,0xD5,0xD7,0xD7,0xDD,0xD9,0xDA,0xDB,0xDC,0xDD,0xE0,0
                    xDF, \
  1428                        ;					0xE0,0xE2,0xE2,0
  Thu Dec  3 2020 22:25                                                Page 32


                    xE4,0xE4,0xE6,0xE6,0xE8,0xE8,0xEA,0xEA,0xEC,0xEC,0xEE,0xEE,0
                    xEF, \
  1429                        ;					0xF0,0xF2,0xF2,0
                    xF4,0xF4,0xF6,0xF6,0xF8,0xF8,0xFA,0xFA,0xFC,0xFC,0xFD,0xFE,0
                    xFF}
  1430                        ;#define TBL_CT857  {0x80,0x9A,0x90,0xB6,0x8E,0xB7
                    ,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0x49,0x8E,0x8F, \
  1431                        ;					0x90,0x92,0x92,0
                    xE2,0x99,0xE3,0xEA,0xEB,0x98,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0
                    x9E, \
  1432                        ;					0xB5,0xD6,0xE0,0
                    xE9,0xA5,0xA5,0xA6,0xA6,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0
                    xAF, \
  1433                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
                    xBF, \
  1434                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
  1435                        ;					0xD0,0xD1,0xD2,0
                    xD3,0xD4,0x49,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0
                    xDF, \
  1436                        ;					0xE0,0xE1,0xE2,0
                    xE3,0xE5,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xDE,0xED,0xEE,0
                    xEF, \
  1437                        ;					0xF0,0xF1,0xF2,0
                    xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0
                    xFF}
  1438                        ;#define TBL_CT860  {0x80,0x9A,0x90,0x8F,0x8E,0x91
                    ,0x86,0x80,0x89,0x89,0x92,0x8B,0x8C,0x98,0x8E,0x8F, \
  1439                        ;					0x90,0x91,0x92,0
                    x8C,0x99,0xA9,0x96,0x9D,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0
                    x9F, \
  1440                        ;					0x86,0x8B,0x9F,0
                    x96,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0
                    xAF, \
  1441                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
                    xBF, \
  1442                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
  1443                        ;					0xD0,0xD1,0xD2,0
                    xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0
                    xDF, \
  1444                        ;					0xE0,0xE1,0xE2,0
                    xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0
                    xEF, \
  1445                        ;					0xF0,0xF1,0xF2,0
                    xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0
                    xFF}
  1446                        ;#define TBL_CT861  {0x80,0x9A,0x90,0x41,0x8E,0x41
                    ,0x8F,0x80,0x45,0x45,0x45,0x8B,0x8B,0x8D,0x8E,0x8F, \
  1447                        ;					0x90,0x92,0x92,0
                    x4F,0x99,0x8D,0x55,0x97,0x97,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0
                    x9F, \
  1448                        ;					0xA4,0xA5,0xA6,0
                    xA7,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0
  Thu Dec  3 2020 22:25                                                Page 33


                    xAF, \
  1449                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
                    xBF, \
  1450                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
  1451                        ;					0xD0,0xD1,0xD2,0
                    xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0
                    xDF, \
  1452                        ;					0xE0,0xE1,0xE2,0
                    xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0
                    xEF, \
  1453                        ;					0xF0,0xF1,0xF2,0
                    xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0
                    xFF}
  1454                        ;#define TBL_CT862  {0x80,0x81,0x82,0x83,0x84,0x85
                    ,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
  1455                        ;					0x90,0x91,0x92,0
                    x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0
                    x9F, \
  1456                        ;					0x41,0x49,0x4F,0
                    x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0
                    xAF, \
  1457                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
                    xBF, \
  1458                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
  1459                        ;					0xD0,0xD1,0xD2,0
                    xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0
                    xDF, \
  1460                        ;					0xE0,0xE1,0xE2,0
                    xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0
                    xEF, \
  1461                        ;					0xF0,0xF1,0xF2,0
                    xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0
                    xFF}
  1462                        ;#define TBL_CT863  {0x43,0x55,0x45,0x41,0x41,0x41
                    ,0x86,0x43,0x45,0x45,0x45,0x49,0x49,0x8D,0x41,0x8F, \
  1463                        ;					0x45,0x45,0x45,0
                    x4F,0x45,0x49,0x55,0x55,0x98,0x4F,0x55,0x9B,0x9C,0x55,0x55,0
                    x9F, \
  1464                        ;					0xA0,0xA1,0x4F,0
                    x55,0xA4,0xA5,0xA6,0xA7,0x49,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0
                    xAF, \
  1465                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
                    xBF, \
  1466                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
  1467                        ;					0xD0,0xD1,0xD2,0
                    xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0
                    xDF, \
  1468                        ;					0xE0,0xE1,0xE2,0
                    xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0
  Thu Dec  3 2020 22:25                                                Page 34


                    xEF, \
  1469                        ;					0xF0,0xF1,0xF2,0
                    xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0
                    xFF}
  1470                        ;#define TBL_CT864  {0x80,0x9A,0x45,0x41,0x8E,0x41
                    ,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F, \
  1471                        ;					0x90,0x92,0x92,0
                    x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0
                    x9F, \
  1472                        ;					0x41,0x49,0x4F,0
                    x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0
                    xAF, \
  1473                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
                    xBF, \
  1474                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
  1475                        ;					0xD0,0xD1,0xD2,0
                    xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0
                    xDF, \
  1476                        ;					0xE0,0xE1,0xE2,0
                    xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0
                    xEF, \
  1477                        ;					0xF0,0xF1,0xF2,0
                    xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0
                    xFF}
  1478                        ;#define TBL_CT865  {0x80,0x9A,0x90,0x41,0x8E,0x41
                    ,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F, \
  1479                        ;					0x90,0x92,0x92,0
                    x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0
                    x9F, \
  1480                        ;					0x41,0x49,0x4F,0
                    x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0
                    xAF, \
  1481                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
                    xBF, \
  1482                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
  1483                        ;					0xD0,0xD1,0xD2,0
                    xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0
                    xDF, \
  1484                        ;					0xE0,0xE1,0xE2,0
                    xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0
                    xEF, \
  1485                        ;					0xF0,0xF1,0xF2,0
                    xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0
                    xFF}
  1486                        ;#define TBL_CT866  {0x80,0x81,0x82,0x83,0x84,0x85
                    ,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
  1487                        ;					0x90,0x91,0x92,0
                    x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0
                    x9F, \
  1488                        ;					0x80,0x81,0x82,0
                    x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0
                    x8F, \
  Thu Dec  3 2020 22:25                                                Page 35


  1489                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
                    xBF, \
  1490                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
  1491                        ;					0xD0,0xD1,0xD2,0
                    xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0
                    xDF, \
  1492                        ;					0x90,0x91,0x92,0
                    x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0
                    x9F, \
  1493                        ;					0xF0,0xF0,0xF2,0
                    xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0
                    xFF}
  1494                        ;#define TBL_CT869  {0x80,0x81,0x82,0x83,0x84,0x85
                    ,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
  1495                        ;					0x90,0x91,0x92,0
                    x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x86,0x9C,0x8D,0x8F,0
                    x90, \
  1496                        ;					0x91,0x90,0x92,0
                    x95,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0
                    xAF, \
  1497                        ;					0xB0,0xB1,0xB2,0
                    xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0
                    xBF, \
  1498                        ;					0xC0,0xC1,0xC2,0
                    xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0
                    xCF, \
  1499                        ;					0xD0,0xD1,0xD2,0
                    xD3,0xD4,0xD5,0xA4,0xA5,0xA6,0xD9,0xDA,0xDB,0xDC,0xA7,0xA8,0
                    xDF, \
  1500                        ;					0xA9,0xAA,0xAC,0
                    xAD,0xB5,0xB6,0xB7,0xB8,0xBD,0xBE,0xC6,0xC7,0xCF,0xCF,0xD0,0
                    xEF, \
  1501                        ;					0xF0,0xF1,0xD1,0
                    xD2,0xD3,0xF5,0xD4,0xF7,0xF8,0xF9,0xD5,0x96,0x95,0x98,0xFE,0
                    xFF}
  1502                        ;
  1503                        ;
  1504                        ;/* DBCS code range |----- 1st byte -----|  |-----
                    ------ 2nd byte -----------| */
  1505                        ;/*                  <------>    <------>    <----
                    -->    <------>    <------>  */
  1506                        ;#define TBL_DC932 {0x81, 0x9F, 0xE0, 0xFC, 0x40, 
                    0x7E, 0x80, 0xFC, 0x00, 0x00}
  1507                        ;#define TBL_DC936 {0x81, 0xFE, 0x00, 0x00, 0x40, 
                    0x7E, 0x80, 0xFE, 0x00, 0x00}
  1508                        ;#define TBL_DC949 {0x81, 0xFE, 0x00, 0x00, 0x41, 
                    0x5A, 0x61, 0x7A, 0x81, 0xFE}
  1509                        ;#define TBL_DC950 {0x81, 0xFE, 0x00, 0x00, 0x40, 
                    0x7E, 0xA1, 0xFE, 0x00, 0x00}
  1510                        ;
  1511                        ;
  1512                        ;/* Macros for table definitions */
  1513                        ;#define MERGE_2STR(a, b) a ## b
  1514                        ;#define MKCVTBL(hd, cp) MERGE_2STR(hd, cp)
  1515                        ;
  Thu Dec  3 2020 22:25                                                Page 36


  1516                        ;
  1517                        ;
  1518                        ;
  1519                        ;/*-----------------------------------------------
                    ---------------------------
  1520                        ;
  1521                        ;   Module Private Work Area
  1522                        ;
  1523                        ;-------------------------------------------------
                    --------------------------*/
  1524                        ;/* Remark: Variables defined here without initial
                     value shall be guaranteed
  1525                        ;/  zero/null at start-up. If not, the linker opti
                    on or start-up routine is
  1526                        ;/  not compliance with C standard. */
  1527                        ;
  1528                        ;/*--------------------------------*/
  1529                        ;/* File/Volume controls           */
  1530                        ;/*--------------------------------*/
  1531                        ;
  1532                        ;#if FF_VOLUMES < 1 || FF_VOLUMES > 10
  1533                        ;#error Wrong FF_VOLUMES setting
  1534                        ;#endif
  1535                        ;static FATFS* FatFs[FF_VOLUMES];	/* Pointer to th
                    e filesystem objects (logical drives) */
  1536                        ;static WORD Fsid;				
                    	/* Filesystem mount ID */
  1537                        ;
  1538                        ;#if FF_FS_RPATH != 0
  1539                        ;static BYTE CurrVol;				
                    /* Current drive */
  1540                        ;#endif
  1541                        ;
  1542                        ;#if FF_FS_LOCK != 0
  1543                        ;static FILESEM Files[FF_FS_LOCK];	/* Open 
                    object lock semaphores */
  1544                        ;#endif
  1545                        ;
  1546                        ;#if FF_STR_VOLUME_ID
  1547                        ;#ifdef FF_VOLUME_STRS
  1548                        ;static const char* const VolumeStr[FF_VOLUMES] = 
                    {FF_VOLUME_STRS};	/* Pre-defined volume ID */
  1549                        ;#endif
  1550                        ;#endif
  1551                        ;
  1552                        ;#if FF_LBA64
  1553                        ;#if FF_MIN_GPT > 0x100000000
  1554                        ;#error Wrong FF_MIN_GPT setting
  1555                        ;#endif
  1556                        ;static const BYTE GUID_MS_Basic[16] = {0xA2,0xA0,
                    0xD0,0xEB,0xE5,0xB9,0x33,0x44,0x87,0xC0,0x68,0xB6,0xB7,0x26,
                    0x99,0xC7};
  1557                        ;#endif
  1558                        ;
  1559                        ;
  1560                        ;
  1561                        ;/*--------------------------------*/
  1562                        ;/* LFN/Directory working buffer   */
  Thu Dec  3 2020 22:25                                                Page 37


  1563                        ;/*--------------------------------*/
  1564                        ;
  1565                        ;#if FF_USE_LFN == 0		/* Non-LFN confi
                    guration */
  1566                        ;#if FF_FS_EXFAT
  1567                        ;#error LFN must be enabled when enable exFAT
  1568                        ;#endif
  1569                        ;#define DEF_NAMBUF
  1570                        ;#define INIT_NAMBUF(fs)
  1571                        ;#define FREE_NAMBUF()
  1572                        ;#define LEAVE_MKFS(res)	return res
  1573                        ;
  1574                        ;#else					/* LFN c
                    onfigurations */
  1575                        ;#if FF_MAX_LFN < 12 || FF_MAX_LFN > 255
  1576                        ;#error Wrong setting of FF_MAX_LFN
  1577                        ;#endif
  1578                        ;#if FF_LFN_BUF < FF_SFN_BUF || FF_SFN_BUF < 12
  1579                        ;#error Wrong setting of FF_LFN_BUF or FF_SFN_BUF
  1580                        ;#endif
  1581                        ;#if FF_LFN_UNICODE < 0 || FF_LFN_UNICODE > 3
  1582                        ;#error Wrong setting of FF_LFN_UNICODE
  1583                        ;#endif
  1584                        ;static const BYTE LfnOfs[] = {1,3,5,7,9,14,16,18,
                    20,22,24,28,30};	/* FAT: Offset of LFN characters in the 
                    directory entry */
  1585                        ;#define MAXDIRB(nc)	((nc + 44U) / 15 * SZDIR
                    E)	/* exFAT: Size of directory entry block scratchpad buffe
                    r needed for the name length */
  1586                        ;
  1587                        ;#if FF_USE_LFN == 1		/* LFN enabled w
                    ith static working buffer */
  1588                        ;#if FF_FS_EXFAT
  1589                        ;static BYTE	DirBuf[MAXDIRB(FF_MAX_LFN)];	
                    /* Directory entry block scratchpad buffer */
  1590                        ;#endif
  1591                        ;static WCHAR LfnBuf[FF_MAX_LFN + 1];		
                    /* LFN working buffer */
  1592                        ;#define DEF_NAMBUF
  1593                        ;#define INIT_NAMBUF(fs)
  1594                        ;#define FREE_NAMBUF()
  1595                        ;#define LEAVE_MKFS(res)	return res
  1596                        ;
  1597                        ;#elif FF_USE_LFN == 2 	/* LFN enabled with dyna
                    mic working buffer on the stack */
  1598                        ;#if FF_FS_EXFAT
  1599                        ;#define DEF_NAMBUF		WCHAR lbuf[FF_MA
                    X_LFN+1]; BYTE dbuf[MAXDIRB(FF_MAX_LFN)];	/* LFN working b
                    uffer and directory entry block scratchpad buffer */
  1600                        ;#define INIT_NAMBUF(fs)	{ (fs)->lfnbuf = lbuf; (
                    fs)->dirbuf = dbuf; }
  1601                        ;#define FREE_NAMBUF()
  1602                        ;#else
  1603                        ;#define DEF_NAMBUF		WCHAR lbuf[FF_MA
                    X_LFN+1];	/* LFN working buffer */
  1604                        ;#define INIT_NAMBUF(fs)	{ (fs)->lfnbuf = lbuf; }
  1605                        ;#define FREE_NAMBUF()
  1606                        ;#endif
  Thu Dec  3 2020 22:25                                                Page 38


  1607                        ;#define LEAVE_MKFS(res)	return res
  1608                        ;
  1609                        ;#elif FF_USE_LFN == 3 	/* LFN enabled with dyna
                    mic working buffer on the heap */
  1610                        ;#if FF_FS_EXFAT
  1611                        ;#define DEF_NAMBUF		WCHAR *lfn;	
                    /* Pointer to LFN working buffer and directory entry block s
                    cratchpad buffer */
  1612                        ;#define INIT_NAMBUF(fs)	{ lfn = ff_memalloc((FF_
                    MAX_LFN+1)*2 + MAXDIRB(FF_MAX_LFN)); if (!lfn) LEAVE_FF(fs, 
                    FR_NOT_ENOUGH_CORE); (fs)->lfnbuf = lfn; (fs)->dirbuf = (BYT
                    E*)(lfn+FF_MAX_LFN+1); }
  1613                        ;#define FREE_NAMBUF()	ff_memfree(lfn)
  1614                        ;#else
  1615                        ;#define DEF_NAMBUF		WCHAR *lfn;	
                    /* Pointer to LFN working buffer */
  1616                        ;#define INIT_NAMBUF(fs)	{ lfn = ff_memalloc((FF_
                    MAX_LFN+1)*2); if (!lfn) LEAVE_FF(fs, FR_NOT_ENOUGH_CORE); (
                    fs)->lfnbuf = lfn; }
  1617                        ;#define FREE_NAMBUF()	ff_memfree(lfn)
  1618                        ;#endif
  1619                        ;#define LEAVE_MKFS(res)	{ if (!work) ff_memfree(
                    buf); return res; }
  1620                        ;#define MAX_MALLOC	0x8000	/* Must be >=FF_
                    MAX_SS */
  1621                        ;
  1622                        ;#else
  1623                        ;#error Wrong setting of FF_USE_LFN
  1624                        ;
  1625                        ;#endif	/* FF_USE_LFN == 1 */
  1626                        ;#endif	/* FF_USE_LFN == 0 */
  1627                        ;
  1628                        ;
  1629                        ;
  1630                        ;/*--------------------------------*/
  1631                        ;/* Code conversion tables         */
  1632                        ;/*--------------------------------*/
  1633                        ;
  1634                        ;#if FF_CODE_PAGE == 0		/* Run-time code
                     page configuration */
  1635                        ;#define CODEPAGE CodePage
  1636                        ;static WORD CodePage;	/* Current code page */
  1637                        ;static const BYTE *ExCvt, *DbcTbl;	/* Point
                    er to current SBCS up-case table and DBCS code range table b
                    elow */
  1638                        ;
  1639                        ;static const BYTE Ct437[] = TBL_CT437;
  1640                        ;static const BYTE Ct720[] = TBL_CT720;
  1641                        ;static const BYTE Ct737[] = TBL_CT737;
  1642                        ;static const BYTE Ct771[] = TBL_CT771;
  1643                        ;static const BYTE Ct775[] = TBL_CT775;
  1644                        ;static const BYTE Ct850[] = TBL_CT850;
  1645                        ;static const BYTE Ct852[] = TBL_CT852;
  1646                        ;static const BYTE Ct855[] = TBL_CT855;
  1647                        ;static const BYTE Ct857[] = TBL_CT857;
  1648                        ;static const BYTE Ct860[] = TBL_CT860;
  1649                        ;static const BYTE Ct861[] = TBL_CT861;
  1650                        ;static const BYTE Ct862[] = TBL_CT862;
  Thu Dec  3 2020 22:25                                                Page 39


  1651                        ;static const BYTE Ct863[] = TBL_CT863;
  1652                        ;static const BYTE Ct864[] = TBL_CT864;
  1653                        ;static const BYTE Ct865[] = TBL_CT865;
  1654                        ;static const BYTE Ct866[] = TBL_CT866;
  1655                        ;static const BYTE Ct869[] = TBL_CT869;
  1656                        ;static const BYTE Dc932[] = TBL_DC932;
  1657                        ;static const BYTE Dc936[] = TBL_DC936;
  1658                        ;static const BYTE Dc949[] = TBL_DC949;
  1659                        ;static const BYTE Dc950[] = TBL_DC950;
  1660                        ;
  1661                        ;#elif FF_CODE_PAGE < 900	/* Static code page conf
                    iguration (SBCS) */
  1662                        ;#define CODEPAGE FF_CODE_PAGE
  1663                        ;static const BYTE ExCvt[] = MKCVTBL(TBL_CT, FF_CO
                    DE_PAGE);
  1664                        	data
  1665                        ~~ExCvt:
  1666 00:0000: 80 9A 45 41  	db	$80,$9A,$45,$41,$8E,$41,$8F,$80,$45,$45
       00:0004: 8E 41 8F 80 
       00:0008: 45 45 
  1667 00:000A: 45 49 49 49  	db	$45,$49,$49,$49,$8E,$8F,$90,$92,$92,$4F
       00:000E: 8E 8F 90 92 
       00:0012: 92 4F 
  1668 00:0014: 99 4F 55 55  	db	$99,$4F,$55,$55,$59,$99,$9A,$9B,$9C,$9D
       00:0018: 59 99 9A 9B 
       00:001C: 9C 9D 
  1669 00:001E: 9E 9F 41 49  	db	$9E,$9F,$41,$49,$4F,$55,$A5,$A5,$A6,$A7
       00:0022: 4F 55 A5 A5 
       00:0026: A6 A7 
  1670 00:0028: A8 A9 AA AB  	db	$A8,$A9,$AA,$AB,$AC,$AD,$AE,$AF,$B0,$B1
       00:002C: AC AD AE AF 
       00:0030: B0 B1 
  1671 00:0032: B2 B3 B4 B5  	db	$B2,$B3,$B4,$B5,$B6,$B7,$B8,$B9,$BA,$BB
       00:0036: B6 B7 B8 B9 
       00:003A: BA BB 
  1672 00:003C: BC BD BE BF  	db	$BC,$BD,$BE,$BF,$C0,$C1,$C2,$C3,$C4,$C5
       00:0040: C0 C1 C2 C3 
       00:0044: C4 C5 
  1673 00:0046: C6 C7 C8 C9  	db	$C6,$C7,$C8,$C9,$CA,$CB,$CC,$CD,$CE,$CF
       00:004A: CA CB CC CD 
       00:004E: CE CF 
  1674 00:0050: D0 D1 D2 D3  	db	$D0,$D1,$D2,$D3,$D4,$D5,$D6,$D7,$D8,$D9
       00:0054: D4 D5 D6 D7 
       00:0058: D8 D9 
  1675 00:005A: DA DB DC DD  	db	$DA,$DB,$DC,$DD,$DE,$DF,$E0,$E1,$E2,$E3
       00:005E: DE DF E0 E1 
       00:0062: E2 E3 
  1676 00:0064: E4 E5 E6 E7  	db	$E4,$E5,$E6,$E7,$E8,$E9,$EA,$EB,$EC,$ED
       00:0068: E8 E9 EA EB 
       00:006C: EC ED 
  1677 00:006E: EE EF F0 F1  	db	$EE,$EF,$F0,$F1,$F2,$F3,$F4,$F5,$F6,$F7
       00:0072: F2 F3 F4 F5 
       00:0076: F6 F7 
  1678 00:0078: F8 F9 FA FB  	db	$F8,$F9,$FA,$FB,$FC,$FD,$FE,$FF
       00:007C: FC FD FE FF 
  1679 00:0080:              	ends
  1680                        ;
  1681                        ;#else					/* Stati
  Thu Dec  3 2020 22:25                                                Page 40


                    c code page configuration (DBCS) */
  1682                        ;#define CODEPAGE FF_CODE_PAGE
  1683                        ;static const BYTE DbcTbl[] = MKCVTBL(TBL_DC, FF_C
                    ODE_PAGE);
  1684                        ;
  1685                        ;#endif
  1686                        ;
  1687                        ;
  1688                        ;
  1689                        ;
  1690                        ;/*-----------------------------------------------
                    ---------------------------
  1691                        ;
  1692                        ;   Module Private Functions
  1693                        ;
  1694                        ;-------------------------------------------------
                    --------------------------*/
  1695                        ;
  1696                        ;
  1697                        ;/*-----------------------------------------------
                    ------------------------*/
  1698                        ;/* Load/Store multi-byte word in the FAT structur
                    e                       */
  1699                        ;/*-----------------------------------------------
                    ------------------------*/
  1700                        ;
  1701                        ;static WORD ld_word (const BYTE* ptr)	/*	
                     Load a 2-byte little-endian word */
  1702                        ;{
  1703                        	.line	618
  1704                        	.line	619
  1705                        	FFDOS
  1706                        	func
  1707                        	.function	619
  1708                        ~~ld_word:
  1709                        	longa	on
  1710                        	longi	on
  1711 08:0000: 3B           	tsc
  1712 08:0001: 38           	sec
  1713 08:0002: E9 0A 00     	sbc	#L2
  1714 08:0005: 1B           	tcs
  1715 08:0006: 0B           	phd
  1716 08:0007: 5B           	tcd
  1717             00000004   ptr_0	set	4
  1718                        	.block	619
  1719                        ;	WORD rv;
  1720                        ;
  1721                        ;	//k_debug_integer("ld_word::before:", *((UINT*)p
                    tr)  );
  1722                        ;
  1723                        ;	rv = ptr[1];
  1724             00000000   rv_1	set	0
  1725                        	.sym	rv,0,5,1,16
  1726                        	.sym	ptr,4,142,6,32
  1727                        	.line	624
  1728 08:0008: A0 01 00     	ldy	#$1
  1729 08:000B: B7 0E        	lda	[<L2+ptr_0],Y
  1730 08:000D: 29 FF 00     	and	#$ff
  Thu Dec  3 2020 22:25                                                Page 41


  1731 08:0010: 85 09        	sta	<L3+rv_1
  1732                        ;	rv = rv << 8 | ptr[0];
  1733                        	.line	625
  1734 08:0012: A5 09        	lda	<L3+rv_1
  1735 08:0014: EB           	xba
  1736 08:0015: 29 00 FF     	and	#$ff00
  1737 08:0018: 85 01        	sta	<R0
  1738 08:001A: A7 0E        	lda	[<L2+ptr_0]
  1739 08:001C: 29 FF 00     	and	#$ff
  1740 08:001F: 85 05        	sta	<R1
  1741 08:0021: A5 05        	lda	<R1
  1742 08:0023: 05 01        	ora	<R0
  1743 08:0025: 85 09        	sta	<L3+rv_1
  1744                        ;
  1745                        ;	//k_debug_integer("ld_word::after:", rv);
  1746                        ;
  1747                        ;	return rv;
  1748                        	.line	629
  1749 08:0027: A5 09        	lda	<L3+rv_1
  1750                        L5:
  1751 08:0029: A8           	tay
  1752 08:002A: A5 0C        	lda	<L2+2
  1753 08:002C: 85 10        	sta	<L2+2+4
  1754 08:002E: A5 0B        	lda	<L2+1
  1755 08:0030: 85 0F        	sta	<L2+1+4
  1756 08:0032: 2B           	pld
  1757 08:0033: 3B           	tsc
  1758 08:0034: 18           	clc
  1759 08:0035: 69 0E 00     	adc	#L2+4
  1760 08:0038: 1B           	tcs
  1761 08:0039: 98           	tya
  1762 08:003A: 6B           	rtl
  1763                        ;}
  1764                        	.line	630
  1765                        	.endblock	630
  1766             0000000A   L2	equ	10
  1767             00000009   L3	equ	9
  1768 08:003B:              	ends
  1769                        	efunc
  1770                        	.endfunc	630,9,10
  1771                        	.line	630
  1772                        ;
  1773                        ;static DWORD ld_dword (const BYTE* ptr)	/* Load 
                    a 4-byte little-endian word */
  1774                        ;{
  1775                        	.line	632
  1776                        	.line	633
  1777                        	FFDOS
  1778                        	func
  1779                        	.function	633
  1780                        ~~ld_dword:
  1781                        	longa	on
  1782                        	longi	on
  1783 08:003B: 3B           	tsc
  1784 08:003C: 38           	sec
  1785 08:003D: E9 0C 00     	sbc	#L6
  1786 08:0040: 1B           	tcs
  1787 08:0041: 0B           	phd
  Thu Dec  3 2020 22:25                                                Page 42


  1788 08:0042: 5B           	tcd
  1789             00000004   ptr_0	set	4
  1790                        	.block	633
  1791                        ;	DWORD rv;
  1792                        ;
  1793                        ;	rv = ptr[3];
  1794             00000000   rv_1	set	0
  1795                        	.sym	rv,0,18,1,32
  1796                        	.sym	ptr,4,142,6,32
  1797                        	.line	636
  1798 08:0043: A0 03 00     	ldy	#$3
  1799 08:0046: B7 10        	lda	[<L6+ptr_0],Y
  1800 08:0048: 29 FF 00     	and	#$ff
  1801 08:004B: 85 09        	sta	<L7+rv_1
  1802 08:004D: 64 0B        	stz	<L7+rv_1+2
  1803                        ;	rv = rv << 8 | ptr[2];
  1804                        	.line	637
  1805 08:004F: D4 0B        	pei	<L7+rv_1+2
  1806 08:0051: D4 09        	pei	<L7+rv_1
  1807 08:0053: A9 08 00     	lda	#$8
  1808                        	xref	~~~lasl
  1809 08:0056: 22 xx xx xx  	jsl	~~~lasl
  1810 08:005A: 85 01        	sta	<R0
  1811 08:005C: 86 03        	stx	<R0+2
  1812 08:005E: A0 02 00     	ldy	#$2
  1813 08:0061: B7 10        	lda	[<L6+ptr_0],Y
  1814 08:0063: 29 FF 00     	and	#$ff
  1815 08:0066: 85 05        	sta	<R1
  1816 08:0068: 64 07        	stz	<R1+2
  1817 08:006A: A5 05        	lda	<R1
  1818 08:006C: 05 01        	ora	<R0
  1819 08:006E: 85 09        	sta	<L7+rv_1
  1820 08:0070: A5 07        	lda	<R1+2
  1821 08:0072: 05 03        	ora	<R0+2
  1822 08:0074: 85 0B        	sta	<L7+rv_1+2
  1823                        ;	rv = rv << 8 | ptr[1];
  1824                        	.line	638
  1825 08:0076: D4 0B        	pei	<L7+rv_1+2
  1826 08:0078: D4 09        	pei	<L7+rv_1
  1827 08:007A: A9 08 00     	lda	#$8
  1828                        	xref	~~~lasl
  1829 08:007D: 22 xx xx xx  	jsl	~~~lasl
  1830 08:0081: 85 01        	sta	<R0
  1831 08:0083: 86 03        	stx	<R0+2
  1832 08:0085: A0 01 00     	ldy	#$1
  1833 08:0088: B7 10        	lda	[<L6+ptr_0],Y
  1834 08:008A: 29 FF 00     	and	#$ff
  1835 08:008D: 85 05        	sta	<R1
  1836 08:008F: 64 07        	stz	<R1+2
  1837 08:0091: A5 05        	lda	<R1
  1838 08:0093: 05 01        	ora	<R0
  1839 08:0095: 85 09        	sta	<L7+rv_1
  1840 08:0097: A5 07        	lda	<R1+2
  1841 08:0099: 05 03        	ora	<R0+2
  1842 08:009B: 85 0B        	sta	<L7+rv_1+2
  1843                        ;	rv = rv << 8 | ptr[0];
  1844                        	.line	639
  1845 08:009D: D4 0B        	pei	<L7+rv_1+2
  Thu Dec  3 2020 22:25                                                Page 43


  1846 08:009F: D4 09        	pei	<L7+rv_1
  1847 08:00A1: A9 08 00     	lda	#$8
  1848                        	xref	~~~lasl
  1849 08:00A4: 22 xx xx xx  	jsl	~~~lasl
  1850 08:00A8: 85 01        	sta	<R0
  1851 08:00AA: 86 03        	stx	<R0+2
  1852 08:00AC: A7 10        	lda	[<L6+ptr_0]
  1853 08:00AE: 29 FF 00     	and	#$ff
  1854 08:00B1: 85 05        	sta	<R1
  1855 08:00B3: 64 07        	stz	<R1+2
  1856 08:00B5: A5 05        	lda	<R1
  1857 08:00B7: 05 01        	ora	<R0
  1858 08:00B9: 85 09        	sta	<L7+rv_1
  1859 08:00BB: A5 07        	lda	<R1+2
  1860 08:00BD: 05 03        	ora	<R0+2
  1861 08:00BF: 85 0B        	sta	<L7+rv_1+2
  1862                        ;	return rv;
  1863                        	.line	640
  1864 08:00C1: A6 0B        	ldx	<L7+rv_1+2
  1865 08:00C3: A5 09        	lda	<L7+rv_1
  1866                        L9:
  1867 08:00C5: A8           	tay
  1868 08:00C6: A5 0E        	lda	<L6+2
  1869 08:00C8: 85 12        	sta	<L6+2+4
  1870 08:00CA: A5 0D        	lda	<L6+1
  1871 08:00CC: 85 11        	sta	<L6+1+4
  1872 08:00CE: 2B           	pld
  1873 08:00CF: 3B           	tsc
  1874 08:00D0: 18           	clc
  1875 08:00D1: 69 10 00     	adc	#L6+4
  1876 08:00D4: 1B           	tcs
  1877 08:00D5: 98           	tya
  1878 08:00D6: 6B           	rtl
  1879                        ;}
  1880                        	.line	641
  1881                        	.endblock	641
  1882             0000000C   L6	equ	12
  1883             00000009   L7	equ	9
  1884 08:00D7:              	ends
  1885                        	efunc
  1886                        	.endfunc	641,9,12
  1887                        	.line	641
  1888                        ;
  1889                        ;#if FF_FS_EXFAT
  1890                        ;static QWORD ld_qword (const BYTE* ptr)	/* Load 
                    an 8-byte little-endian word */
  1891                        ;{
  1892                        ;	QWORD rv;
  1893                        ;
  1894                        ;	rv = ptr[7];
  1895                        ;	rv = rv << 8 | ptr[6];
  1896                        ;	rv = rv << 8 | ptr[5];
  1897                        ;	rv = rv << 8 | ptr[4];
  1898                        ;	rv = rv << 8 | ptr[3];
  1899                        ;	rv = rv << 8 | ptr[2];
  1900                        ;	rv = rv << 8 | ptr[1];
  1901                        ;	rv = rv << 8 | ptr[0];
  1902                        ;	return rv;
  Thu Dec  3 2020 22:25                                                Page 44


  1903                        ;}
  1904                        ;#endif
  1905                        ;
  1906                        ;#if !FF_FS_READONLY
  1907                        ;static void st_word (BYTE* ptr, WORD val)	
                    /* Store a 2-byte word in little-endian */
  1908                        ;{
  1909                        	.line	661
  1910                        	.line	662
  1911                        	FFDOS
  1912                        	func
  1913                        	.function	662
  1914                        ~~st_word:
  1915                        	longa	on
  1916                        	longi	on
  1917 08:00D7: 3B           	tsc
  1918 08:00D8: 38           	sec
  1919 08:00D9: E9 00 00     	sbc	#L10
  1920 08:00DC: 1B           	tcs
  1921 08:00DD: 0B           	phd
  1922 08:00DE: 5B           	tcd
  1923             00000004   ptr_0	set	4
  1924             00000008   val_0	set	8
  1925                        	.block	662
  1926                        ;	*ptr++ = (BYTE)val; val >>= 8;
  1927                        	.sym	ptr,4,142,6,32
  1928                        	.sym	val,8,5,6,16
  1929                        	.line	663
  1930 08:00DF: E2 20        	sep	#$20
  1931                        	longa	off
  1932 08:00E1: A5 08        	lda	<L10+val_0
  1933 08:00E3: 87 04        	sta	[<L10+ptr_0]
  1934 08:00E5: C2 20        	rep	#$20
  1935                        	longa	on
  1936 08:00E7: E6 04        	inc	<L10+ptr_0
  1937 08:00E9: D0 02        	bne	L13
  1938 08:00EB: E6 06        	inc	<L10+ptr_0+2
  1939                        L13:
  1940                        	.line	663
  1941 08:00ED: A5 08        	lda	<L10+val_0
  1942 08:00EF: A2 08 00     	ldx	#<$8
  1943                        	xref	~~~asr
  1944 08:00F2: 22 xx xx xx  	jsl	~~~asr
  1945 08:00F6: 85 08        	sta	<L10+val_0
  1946                        ;	*ptr++ = (BYTE)val;
  1947                        	.line	664
  1948 08:00F8: E2 20        	sep	#$20
  1949                        	longa	off
  1950 08:00FA: A5 08        	lda	<L10+val_0
  1951 08:00FC: 87 04        	sta	[<L10+ptr_0]
  1952 08:00FE: C2 20        	rep	#$20
  1953                        	longa	on
  1954 08:0100: E6 04        	inc	<L10+ptr_0
  1955 08:0102: D0 02        	bne	L14
  1956 08:0104: E6 06        	inc	<L10+ptr_0+2
  1957                        L14:
  1958                        ;}
  1959                        	.line	665
  Thu Dec  3 2020 22:25                                                Page 45


  1960                        L15:
  1961 08:0106: A5 02        	lda	<L10+2
  1962 08:0108: 85 08        	sta	<L10+2+6
  1963 08:010A: A5 01        	lda	<L10+1
  1964 08:010C: 85 07        	sta	<L10+1+6
  1965 08:010E: 2B           	pld
  1966 08:010F: 3B           	tsc
  1967 08:0110: 18           	clc
  1968 08:0111: 69 06 00     	adc	#L10+6
  1969 08:0114: 1B           	tcs
  1970 08:0115: 6B           	rtl
  1971                        	.endblock	665
  1972             00000000   L10	equ	0
  1973             00000001   L11	equ	1
  1974 08:0116:              	ends
  1975                        	efunc
  1976                        	.endfunc	665,1,0
  1977                        	.line	665
  1978                        ;
  1979                        ;static void st_dword (BYTE* ptr, DWORD val)	
                    /* Store a 4-byte word in little-endian */
  1980                        ;{
  1981                        	.line	667
  1982                        	.line	668
  1983                        	FFDOS
  1984                        	func
  1985                        	.function	668
  1986                        ~~st_dword:
  1987                        	longa	on
  1988                        	longi	on
  1989 08:0116: 3B           	tsc
  1990 08:0117: 38           	sec
  1991 08:0118: E9 00 00     	sbc	#L16
  1992 08:011B: 1B           	tcs
  1993 08:011C: 0B           	phd
  1994 08:011D: 5B           	tcd
  1995             00000004   ptr_0	set	4
  1996             00000008   val_0	set	8
  1997                        	.block	668
  1998                        ;	*ptr++ = (BYTE)val; val >>= 8;
  1999                        	.sym	ptr,4,142,6,32
  2000                        	.sym	val,8,18,6,32
  2001                        	.line	669
  2002 08:011E: E2 20        	sep	#$20
  2003                        	longa	off
  2004 08:0120: A5 08        	lda	<L16+val_0
  2005 08:0122: 87 04        	sta	[<L16+ptr_0]
  2006 08:0124: C2 20        	rep	#$20
  2007                        	longa	on
  2008 08:0126: E6 04        	inc	<L16+ptr_0
  2009 08:0128: D0 02        	bne	L19
  2010 08:012A: E6 06        	inc	<L16+ptr_0+2
  2011                        L19:
  2012                        	.line	669
  2013 08:012C: D4 0A        	pei	<L16+val_0+2
  2014 08:012E: D4 08        	pei	<L16+val_0
  2015 08:0130: A9 08 00     	lda	#$8
  2016                        	xref	~~~llsr
  Thu Dec  3 2020 22:25                                                Page 46


  2017 08:0133: 22 xx xx xx  	jsl	~~~llsr
  2018 08:0137: 85 08        	sta	<L16+val_0
  2019 08:0139: 86 0A        	stx	<L16+val_0+2
  2020                        ;	*ptr++ = (BYTE)val; val >>= 8;
  2021                        	.line	670
  2022 08:013B: E2 20        	sep	#$20
  2023                        	longa	off
  2024 08:013D: A5 08        	lda	<L16+val_0
  2025 08:013F: 87 04        	sta	[<L16+ptr_0]
  2026 08:0141: C2 20        	rep	#$20
  2027                        	longa	on
  2028 08:0143: E6 04        	inc	<L16+ptr_0
  2029 08:0145: D0 02        	bne	L20
  2030 08:0147: E6 06        	inc	<L16+ptr_0+2
  2031                        L20:
  2032                        	.line	670
  2033 08:0149: D4 0A        	pei	<L16+val_0+2
  2034 08:014B: D4 08        	pei	<L16+val_0
  2035 08:014D: A9 08 00     	lda	#$8
  2036                        	xref	~~~llsr
  2037 08:0150: 22 xx xx xx  	jsl	~~~llsr
  2038 08:0154: 85 08        	sta	<L16+val_0
  2039 08:0156: 86 0A        	stx	<L16+val_0+2
  2040                        ;	*ptr++ = (BYTE)val; val >>= 8;
  2041                        	.line	671
  2042 08:0158: E2 20        	sep	#$20
  2043                        	longa	off
  2044 08:015A: A5 08        	lda	<L16+val_0
  2045 08:015C: 87 04        	sta	[<L16+ptr_0]
  2046 08:015E: C2 20        	rep	#$20
  2047                        	longa	on
  2048 08:0160: E6 04        	inc	<L16+ptr_0
  2049 08:0162: D0 02        	bne	L21
  2050 08:0164: E6 06        	inc	<L16+ptr_0+2
  2051                        L21:
  2052                        	.line	671
  2053 08:0166: D4 0A        	pei	<L16+val_0+2
  2054 08:0168: D4 08        	pei	<L16+val_0
  2055 08:016A: A9 08 00     	lda	#$8
  2056                        	xref	~~~llsr
  2057 08:016D: 22 xx xx xx  	jsl	~~~llsr
  2058 08:0171: 85 08        	sta	<L16+val_0
  2059 08:0173: 86 0A        	stx	<L16+val_0+2
  2060                        ;	*ptr++ = (BYTE)val;
  2061                        	.line	672
  2062 08:0175: E2 20        	sep	#$20
  2063                        	longa	off
  2064 08:0177: A5 08        	lda	<L16+val_0
  2065 08:0179: 87 04        	sta	[<L16+ptr_0]
  2066 08:017B: C2 20        	rep	#$20
  2067                        	longa	on
  2068 08:017D: E6 04        	inc	<L16+ptr_0
  2069 08:017F: D0 02        	bne	L22
  2070 08:0181: E6 06        	inc	<L16+ptr_0+2
  2071                        L22:
  2072                        ;}
  2073                        	.line	673
  2074                        L23:
  Thu Dec  3 2020 22:25                                                Page 47


  2075 08:0183: A5 02        	lda	<L16+2
  2076 08:0185: 85 0A        	sta	<L16+2+8
  2077 08:0187: A5 01        	lda	<L16+1
  2078 08:0189: 85 09        	sta	<L16+1+8
  2079 08:018B: 2B           	pld
  2080 08:018C: 3B           	tsc
  2081 08:018D: 18           	clc
  2082 08:018E: 69 08 00     	adc	#L16+8
  2083 08:0191: 1B           	tcs
  2084 08:0192: 6B           	rtl
  2085                        	.endblock	673
  2086             00000000   L16	equ	0
  2087             00000001   L17	equ	1
  2088 08:0193:              	ends
  2089                        	efunc
  2090                        	.endfunc	673,1,0
  2091                        	.line	673
  2092                        ;
  2093                        ;#if FF_FS_EXFAT
  2094                        ;static void st_qword (BYTE* ptr, QWORD val)	
                    /* Store an 8-byte word in little-endian */
  2095                        ;{
  2096                        ;	*ptr++ = (BYTE)val; val >>= 8;
  2097                        ;	*ptr++ = (BYTE)val; val >>= 8;
  2098                        ;	*ptr++ = (BYTE)val; val >>= 8;
  2099                        ;	*ptr++ = (BYTE)val; val >>= 8;
  2100                        ;	*ptr++ = (BYTE)val; val >>= 8;
  2101                        ;	*ptr++ = (BYTE)val; val >>= 8;
  2102                        ;	*ptr++ = (BYTE)val; val >>= 8;
  2103                        ;	*ptr++ = (BYTE)val;
  2104                        ;}
  2105                        ;#endif
  2106                        ;#endif	/* !FF_FS_READONLY */
  2107                        ;
  2108                        ;
  2109                        ;
  2110                        ;/*-----------------------------------------------
                    ------------------------*/
  2111                        ;/* String functions                              
                                            */
  2112                        ;/*-----------------------------------------------
                    ------------------------*/
  2113                        ;
  2114                        ;/* Copy memory to memory */
  2115                        ;static void mem_cpy (void* dst, const void* src, 
                    UINT cnt)
  2116                        ;{
  2117                        	.line	697
  2118                        	.line	698
  2119                        	FFDOS
  2120                        	func
  2121                        	.function	698
  2122                        ~~mem_cpy:
  2123                        	longa	on
  2124                        	longi	on
  2125 08:0193: 3B           	tsc
  2126 08:0194: 38           	sec
  2127 08:0195: E9 08 00     	sbc	#L24
  Thu Dec  3 2020 22:25                                                Page 48


  2128 08:0198: 1B           	tcs
  2129 08:0199: 0B           	phd
  2130 08:019A: 5B           	tcd
  2131             00000004   dst_0	set	4
  2132             00000008   src_0	set	8
  2133             0000000C   cnt_0	set	12
  2134                        	.block	698
  2135                        ;	BYTE *d = (BYTE*)dst;
  2136                        ;	const BYTE *s = (const BYTE*)src;
  2137                        ;
  2138                        ;	if (cnt != 0) {
  2139             00000000   d_1	set	0
  2140             00000004   s_1	set	4
  2141                        	.sym	d,0,142,1,32
  2142                        	.sym	s,4,142,1,32
  2143                        	.sym	dst,4,129,6,32
  2144                        	.sym	src,8,129,6,32
  2145                        	.sym	cnt,12,16,6,16
  2146 08:019B: A5 0C        	lda	<L24+dst_0
  2147 08:019D: 85 01        	sta	<L25+d_1
  2148 08:019F: A5 0E        	lda	<L24+dst_0+2
  2149 08:01A1: 85 03        	sta	<L25+d_1+2
  2150 08:01A3: A5 10        	lda	<L24+src_0
  2151 08:01A5: 85 05        	sta	<L25+s_1
  2152 08:01A7: A5 12        	lda	<L24+src_0+2
  2153 08:01A9: 85 07        	sta	<L25+s_1+2
  2154                        	.line	702
  2155 08:01AB: A5 14        	lda	<L24+cnt_0
  2156 08:01AD: D0 03        	bne	L27
  2157 08:01AF: 82 1D 00     	brl	L10001
  2158                        L27:
  2159                        	.line	702
  2160                        ;		do {
  2161                        	.line	703
  2162                        L10004:
  2163                        	.line	703
  2164                        ;			*d++ = *s++;
  2165                        	.line	704
  2166 08:01B2: E2 20        	sep	#$20
  2167                        	longa	off
  2168 08:01B4: A7 05        	lda	[<L25+s_1]
  2169 08:01B6: 87 01        	sta	[<L25+d_1]
  2170 08:01B8: C2 20        	rep	#$20
  2171                        	longa	on
  2172 08:01BA: E6 05        	inc	<L25+s_1
  2173 08:01BC: D0 02        	bne	L28
  2174 08:01BE: E6 07        	inc	<L25+s_1+2
  2175                        L28:
  2176 08:01C0: E6 01        	inc	<L25+d_1
  2177 08:01C2: D0 02        	bne	L29
  2178 08:01C4: E6 03        	inc	<L25+d_1+2
  2179                        L29:
  2180                        ;		} while (--cnt);
  2181                        	.line	705
  2182                        L10002:
  2183 08:01C6: C6 14        	dec	<L24+cnt_0
  2184 08:01C8: A5 14        	lda	<L24+cnt_0
  2185 08:01CA: F0 03        	beq	L30
  Thu Dec  3 2020 22:25                                                Page 49


  2186 08:01CC: 82 E3 FF     	brl	L10004
  2187                        L30:
  2188                        L10003:
  2189                        ;	}
  2190                        	.line	706
  2191                        ;}
  2192                        L10001:
  2193                        	.line	707
  2194                        L31:
  2195 08:01CF: A5 0A        	lda	<L24+2
  2196 08:01D1: 85 14        	sta	<L24+2+10
  2197 08:01D3: A5 09        	lda	<L24+1
  2198 08:01D5: 85 13        	sta	<L24+1+10
  2199 08:01D7: 2B           	pld
  2200 08:01D8: 3B           	tsc
  2201 08:01D9: 18           	clc
  2202 08:01DA: 69 12 00     	adc	#L24+10
  2203 08:01DD: 1B           	tcs
  2204 08:01DE: 6B           	rtl
  2205                        	.endblock	707
  2206             00000008   L24	equ	8
  2207             00000001   L25	equ	1
  2208 08:01DF:              	ends
  2209                        	efunc
  2210                        	.endfunc	707,1,8
  2211                        	.line	707
  2212                        ;
  2213                        ;
  2214                        ;/* Fill memory block */
  2215                        ;static void mem_set (void* dst, int val, UINT cnt
                    )
  2216                        ;{
  2217                        	.line	711
  2218                        	.line	712
  2219                        	FFDOS
  2220                        	func
  2221                        	.function	712
  2222                        ~~mem_set:
  2223                        	longa	on
  2224                        	longi	on
  2225 08:01DF: 3B           	tsc
  2226 08:01E0: 38           	sec
  2227 08:01E1: E9 04 00     	sbc	#L32
  2228 08:01E4: 1B           	tcs
  2229 08:01E5: 0B           	phd
  2230 08:01E6: 5B           	tcd
  2231             00000004   dst_0	set	4
  2232             00000008   val_0	set	8
  2233             0000000A   cnt_0	set	10
  2234                        	.block	712
  2235                        ;	BYTE *d = (BYTE*)dst;
  2236                        ;
  2237                        ;	do {
  2238             00000000   d_1	set	0
  2239                        	.sym	d,0,142,1,32
  2240                        	.sym	dst,4,129,6,32
  2241                        	.sym	val,8,5,6,16
  2242                        	.sym	cnt,10,16,6,16
  Thu Dec  3 2020 22:25                                                Page 50


  2243 08:01E7: A5 08        	lda	<L32+dst_0
  2244 08:01E9: 85 01        	sta	<L33+d_1
  2245 08:01EB: A5 0A        	lda	<L32+dst_0+2
  2246 08:01ED: 85 03        	sta	<L33+d_1+2
  2247                        	.line	715
  2248                        L10007:
  2249                        	.line	715
  2250                        ;		*d++ = (BYTE)val;
  2251                        	.line	716
  2252 08:01EF: E2 20        	sep	#$20
  2253                        	longa	off
  2254 08:01F1: A5 0C        	lda	<L32+val_0
  2255 08:01F3: 87 01        	sta	[<L33+d_1]
  2256 08:01F5: C2 20        	rep	#$20
  2257                        	longa	on
  2258 08:01F7: E6 01        	inc	<L33+d_1
  2259 08:01F9: D0 02        	bne	L35
  2260 08:01FB: E6 03        	inc	<L33+d_1+2
  2261                        L35:
  2262                        ;	} while (--cnt);
  2263                        	.line	717
  2264                        L10005:
  2265 08:01FD: C6 0E        	dec	<L32+cnt_0
  2266 08:01FF: A5 0E        	lda	<L32+cnt_0
  2267 08:0201: F0 03        	beq	L36
  2268 08:0203: 82 E9 FF     	brl	L10007
  2269                        L36:
  2270                        L10006:
  2271                        ;}
  2272                        	.line	718
  2273                        L37:
  2274 08:0206: A5 06        	lda	<L32+2
  2275 08:0208: 85 0E        	sta	<L32+2+8
  2276 08:020A: A5 05        	lda	<L32+1
  2277 08:020C: 85 0D        	sta	<L32+1+8
  2278 08:020E: 2B           	pld
  2279 08:020F: 3B           	tsc
  2280 08:0210: 18           	clc
  2281 08:0211: 69 0C 00     	adc	#L32+8
  2282 08:0214: 1B           	tcs
  2283 08:0215: 6B           	rtl
  2284                        	.endblock	718
  2285             00000004   L32	equ	4
  2286             00000001   L33	equ	1
  2287 08:0216:              	ends
  2288                        	efunc
  2289                        	.endfunc	718,1,4
  2290                        	.line	718
  2291                        ;
  2292                        ;
  2293                        ;/* Compare memory block */
  2294                        ;static int mem_cmp (const void* dst, const void* 
                    src, UINT cnt)	/* ZR:same, NZ:different */
  2295                        ;{
  2296                        	.line	722
  2297                        	.line	723
  2298                        	FFDOS
  2299                        	func
  Thu Dec  3 2020 22:25                                                Page 51


  2300                        	.function	723
  2301                        ~~mem_cmp:
  2302                        	longa	on
  2303                        	longi	on
  2304 08:0216: 3B           	tsc
  2305 08:0217: 38           	sec
  2306 08:0218: E9 12 00     	sbc	#L38
  2307 08:021B: 1B           	tcs
  2308 08:021C: 0B           	phd
  2309 08:021D: 5B           	tcd
  2310             00000004   dst_0	set	4
  2311             00000008   src_0	set	8
  2312             0000000C   cnt_0	set	12
  2313                        	.block	723
  2314                        ;	const BYTE *d = (const BYTE *)dst, *s = (const B
                    YTE *)src;
  2315                        ;	int r = 0;
  2316                        ;
  2317                        ;	do {
  2318             00000000   d_1	set	0
  2319             00000004   s_1	set	4
  2320             00000008   r_1	set	8
  2321                        	.sym	d,0,142,1,32
  2322                        	.sym	s,4,142,1,32
  2323                        	.sym	r,8,5,1,16
  2324                        	.sym	dst,4,129,6,32
  2325                        	.sym	src,8,129,6,32
  2326                        	.sym	cnt,12,16,6,16
  2327 08:021E: A5 16        	lda	<L38+dst_0
  2328 08:0220: 85 09        	sta	<L39+d_1
  2329 08:0222: A5 18        	lda	<L38+dst_0+2
  2330 08:0224: 85 0B        	sta	<L39+d_1+2
  2331 08:0226: A5 1A        	lda	<L38+src_0
  2332 08:0228: 85 0D        	sta	<L39+s_1
  2333 08:022A: A5 1C        	lda	<L38+src_0+2
  2334 08:022C: 85 0F        	sta	<L39+s_1+2
  2335 08:022E: 64 11        	stz	<L39+r_1
  2336                        	.line	727
  2337                        L10010:
  2338                        	.line	727
  2339                        ;		r = *d++ - *s++;
  2340                        	.line	728
  2341 08:0230: A7 0D        	lda	[<L39+s_1]
  2342 08:0232: 29 FF 00     	and	#$ff
  2343 08:0235: 85 01        	sta	<R0
  2344 08:0237: A7 09        	lda	[<L39+d_1]
  2345 08:0239: 29 FF 00     	and	#$ff
  2346 08:023C: 85 05        	sta	<R1
  2347 08:023E: 38           	sec
  2348 08:023F: A5 05        	lda	<R1
  2349 08:0241: E5 01        	sbc	<R0
  2350 08:0243: 85 11        	sta	<L39+r_1
  2351 08:0245: E6 0D        	inc	<L39+s_1
  2352 08:0247: D0 02        	bne	L41
  2353 08:0249: E6 0F        	inc	<L39+s_1+2
  2354                        L41:
  2355 08:024B: E6 09        	inc	<L39+d_1
  2356 08:024D: D0 02        	bne	L42
  Thu Dec  3 2020 22:25                                                Page 52


  2357 08:024F: E6 0B        	inc	<L39+d_1+2
  2358                        L42:
  2359                        ;	} while (--cnt && r == 0);
  2360                        	.line	729
  2361                        L10008:
  2362 08:0251: C6 1E        	dec	<L38+cnt_0
  2363 08:0253: A5 1E        	lda	<L38+cnt_0
  2364 08:0255: D0 03        	bne	L44
  2365 08:0257: 82 07 00     	brl	L43
  2366                        L44:
  2367 08:025A: A5 11        	lda	<L39+r_1
  2368 08:025C: D0 03        	bne	L45
  2369 08:025E: 82 CF FF     	brl	L10010
  2370                        L45:
  2371                        L43:
  2372                        L10009:
  2373                        ;
  2374                        ;	return r;
  2375                        	.line	731
  2376 08:0261: A5 11        	lda	<L39+r_1
  2377                        L46:
  2378 08:0263: A8           	tay
  2379 08:0264: A5 14        	lda	<L38+2
  2380 08:0266: 85 1E        	sta	<L38+2+10
  2381 08:0268: A5 13        	lda	<L38+1
  2382 08:026A: 85 1D        	sta	<L38+1+10
  2383 08:026C: 2B           	pld
  2384 08:026D: 3B           	tsc
  2385 08:026E: 18           	clc
  2386 08:026F: 69 1C 00     	adc	#L38+10
  2387 08:0272: 1B           	tcs
  2388 08:0273: 98           	tya
  2389 08:0274: 6B           	rtl
  2390                        ;}
  2391                        	.line	732
  2392                        	.endblock	732
  2393             00000012   L38	equ	18
  2394             00000009   L39	equ	9
  2395 08:0275:              	ends
  2396                        	efunc
  2397                        	.endfunc	732,9,18
  2398                        	.line	732
  2399                        ;
  2400                        ;
  2401                        ;/* Check if chr is contained in the string */
  2402                        ;static int chk_chr (const char* str, int chr)	
                    /* NZ:contained, ZR:not contained */
  2403                        ;{
  2404                        	.line	736
  2405                        	.line	737
  2406                        	FFDOS
  2407                        	func
  2408                        	.function	737
  2409                        ~~chk_chr:
  2410                        	longa	on
  2411                        	longi	on
  2412 08:0275: 3B           	tsc
  2413 08:0276: 38           	sec
  Thu Dec  3 2020 22:25                                                Page 53


  2414 08:0277: E9 04 00     	sbc	#L47
  2415 08:027A: 1B           	tcs
  2416 08:027B: 0B           	phd
  2417 08:027C: 5B           	tcd
  2418             00000004   str_0	set	4
  2419             00000008   chr_0	set	8
  2420                        	.block	737
  2421                        ;	while (*str && *str != chr) str++;
  2422                        	.sym	str,4,142,6,32
  2423                        	.sym	chr,8,5,6,16
  2424                        	.line	738
  2425                        L10011:
  2426 08:027D: A7 08        	lda	[<L47+str_0]
  2427 08:027F: 29 FF 00     	and	#$ff
  2428 08:0282: D0 03        	bne	L50
  2429 08:0284: 82 19 00     	brl	L10012
  2430                        L50:
  2431 08:0287: A7 08        	lda	[<L47+str_0]
  2432 08:0289: 29 FF 00     	and	#$ff
  2433 08:028C: 85 01        	sta	<R0
  2434 08:028E: A5 01        	lda	<R0
  2435 08:0290: C5 0C        	cmp	<L47+chr_0
  2436 08:0292: D0 03        	bne	L51
  2437 08:0294: 82 09 00     	brl	L10012
  2438                        L51:
  2439                        	.line	738
  2440 08:0297: E6 08        	inc	<L47+str_0
  2441 08:0299: D0 02        	bne	L52
  2442 08:029B: E6 0A        	inc	<L47+str_0+2
  2443                        L52:
  2444 08:029D: 82 DD FF     	brl	L10011
  2445                        L10012:
  2446                        ;	return *str;
  2447                        	.line	739
  2448 08:02A0: A7 08        	lda	[<L47+str_0]
  2449 08:02A2: 29 FF 00     	and	#$ff
  2450                        L53:
  2451 08:02A5: A8           	tay
  2452 08:02A6: A5 06        	lda	<L47+2
  2453 08:02A8: 85 0C        	sta	<L47+2+6
  2454 08:02AA: A5 05        	lda	<L47+1
  2455 08:02AC: 85 0B        	sta	<L47+1+6
  2456 08:02AE: 2B           	pld
  2457 08:02AF: 3B           	tsc
  2458 08:02B0: 18           	clc
  2459 08:02B1: 69 0A 00     	adc	#L47+6
  2460 08:02B4: 1B           	tcs
  2461 08:02B5: 98           	tya
  2462 08:02B6: 6B           	rtl
  2463                        ;}
  2464                        	.line	740
  2465                        	.endblock	740
  2466             00000004   L47	equ	4
  2467             00000005   L48	equ	5
  2468 08:02B7:              	ends
  2469                        	efunc
  2470                        	.endfunc	740,5,4
  2471                        	.line	740
  Thu Dec  3 2020 22:25                                                Page 54


  2472                        ;
  2473                        ;
  2474                        ;/* Test if the byte is DBC 1st byte */
  2475                        ;static int dbc_1st (BYTE c)
  2476                        ;{
  2477                        	.line	744
  2478                        	.line	745
  2479                        	FFDOS
  2480                        	func
  2481                        	.function	745
  2482                        ~~dbc_1st:
  2483                        	longa	on
  2484                        	longi	on
  2485 08:02B7: 3B           	tsc
  2486 08:02B8: 38           	sec
  2487 08:02B9: E9 00 00     	sbc	#L54
  2488 08:02BC: 1B           	tcs
  2489 08:02BD: 0B           	phd
  2490 08:02BE: 5B           	tcd
  2491             00000004   c_0	set	4
  2492                        	.block	745
  2493                        ;#if FF_CODE_PAGE == 0		/* Variable code
                     page */
  2494                        ;	if (DbcTbl && c >= DbcTbl[0]) {
  2495                        ;		if (c <= DbcTbl[1]) return 1;		
                    			/* 1st byte range 1 */
  2496                        ;		if (c >= DbcTbl[2] && c <= DbcTbl[3]) re
                    turn 1;	/* 1st byte range 2 */
  2497                        ;	}
  2498                        ;#elif FF_CODE_PAGE >= 900	/* DBCS fixed co
                    de page */
  2499                        ;	if (c >= DbcTbl[0]) {
  2500                        ;		if (c <= DbcTbl[1]) return 1;
  2501                        ;		if (c >= DbcTbl[2] && c <= DbcTbl[3]) re
                    turn 1;
  2502                        ;	}
  2503                        ;#else						
                    /* SBCS fixed code page */
  2504                        ;	if (c != 0) return 0;	/* Always false */
  2505                        	.sym	c,4,14,6,8
  2506                        	.line	757
  2507 08:02BF: A5 04        	lda	<L54+c_0
  2508 08:02C1: 29 FF 00     	and	#$ff
  2509 08:02C4: D0 03        	bne	L57
  2510 08:02C6: 82 15 00     	brl	L10013
  2511                        L57:
  2512                        	.line	757
  2513 08:02C9: A9 00 00     	lda	#$0
  2514                        L58:
  2515 08:02CC: A8           	tay
  2516 08:02CD: A5 02        	lda	<L54+2
  2517 08:02CF: 85 04        	sta	<L54+2+2
  2518 08:02D1: A5 01        	lda	<L54+1
  2519 08:02D3: 85 03        	sta	<L54+1+2
  2520 08:02D5: 2B           	pld
  2521 08:02D6: 3B           	tsc
  2522 08:02D7: 18           	clc
  2523 08:02D8: 69 02 00     	adc	#L54+2
  Thu Dec  3 2020 22:25                                                Page 55


  2524 08:02DB: 1B           	tcs
  2525 08:02DC: 98           	tya
  2526 08:02DD: 6B           	rtl
  2527                        ;#endif
  2528                        ;	return 0;
  2529                        L10013:
  2530                        	.line	759
  2531 08:02DE: A9 00 00     	lda	#$0
  2532 08:02E1: 82 E8 FF     	brl	L58
  2533                        ;}
  2534                        	.line	760
  2535                        	.endblock	760
  2536             00000000   L54	equ	0
  2537             00000001   L55	equ	1
  2538 08:02E4:              	ends
  2539                        	efunc
  2540                        	.endfunc	760,1,0
  2541                        	.line	760
  2542                        ;
  2543                        ;
  2544                        ;/* Test if the byte is DBC 2nd byte */
  2545                        ;static int dbc_2nd (BYTE c)
  2546                        ;{
  2547                        	.line	764
  2548                        	.line	765
  2549                        	FFDOS
  2550                        	func
  2551                        	.function	765
  2552                        ~~dbc_2nd:
  2553                        	longa	on
  2554                        	longi	on
  2555 08:02E4: 3B           	tsc
  2556 08:02E5: 38           	sec
  2557 08:02E6: E9 00 00     	sbc	#L59
  2558 08:02E9: 1B           	tcs
  2559 08:02EA: 0B           	phd
  2560 08:02EB: 5B           	tcd
  2561             00000004   c_0	set	4
  2562                        	.block	765
  2563                        ;#if FF_CODE_PAGE == 0		/* Variable code
                     page */
  2564                        ;	if (DbcTbl && c >= DbcTbl[4]) {
  2565                        ;		if (c <= DbcTbl[5]) return 1;		
                    			/* 2nd byte range 1 */
  2566                        ;		if (c >= DbcTbl[6] && c <= DbcTbl[7]) re
                    turn 1;	/* 2nd byte range 2 */
  2567                        ;		if (c >= DbcTbl[8] && c <= DbcTbl[9]) re
                    turn 1;	/* 2nd byte range 3 */
  2568                        ;	}
  2569                        ;#elif FF_CODE_PAGE >= 900	/* DBCS fixed co
                    de page */
  2570                        ;	if (c >= DbcTbl[4]) {
  2571                        ;		if (c <= DbcTbl[5]) return 1;
  2572                        ;		if (c >= DbcTbl[6] && c <= DbcTbl[7]) re
                    turn 1;
  2573                        ;		if (c >= DbcTbl[8] && c <= DbcTbl[9]) re
                    turn 1;
  2574                        ;	}
  Thu Dec  3 2020 22:25                                                Page 56


  2575                        ;#else						
                    /* SBCS fixed code page */
  2576                        ;	if (c != 0) return 0;	/* Always false */
  2577                        	.sym	c,4,14,6,8
  2578                        	.line	779
  2579 08:02EC: A5 04        	lda	<L59+c_0
  2580 08:02EE: 29 FF 00     	and	#$ff
  2581 08:02F1: D0 03        	bne	L62
  2582 08:02F3: 82 15 00     	brl	L10014
  2583                        L62:
  2584                        	.line	779
  2585 08:02F6: A9 00 00     	lda	#$0
  2586                        L63:
  2587 08:02F9: A8           	tay
  2588 08:02FA: A5 02        	lda	<L59+2
  2589 08:02FC: 85 04        	sta	<L59+2+2
  2590 08:02FE: A5 01        	lda	<L59+1
  2591 08:0300: 85 03        	sta	<L59+1+2
  2592 08:0302: 2B           	pld
  2593 08:0303: 3B           	tsc
  2594 08:0304: 18           	clc
  2595 08:0305: 69 02 00     	adc	#L59+2
  2596 08:0308: 1B           	tcs
  2597 08:0309: 98           	tya
  2598 08:030A: 6B           	rtl
  2599                        ;#endif
  2600                        ;	return 0;
  2601                        L10014:
  2602                        	.line	781
  2603 08:030B: A9 00 00     	lda	#$0
  2604 08:030E: 82 E8 FF     	brl	L63
  2605                        ;}
  2606                        	.line	782
  2607                        	.endblock	782
  2608             00000000   L59	equ	0
  2609             00000001   L60	equ	1
  2610 08:0311:              	ends
  2611                        	efunc
  2612                        	.endfunc	782,1,0
  2613                        	.line	782
  2614                        ;
  2615                        ;
  2616                        ;#if FF_USE_LFN
  2617                        ;
  2618                        ;/* Get a Unicode code point from the TCHAR string
                     in defined API encodeing */
  2619                        ;static DWORD tchar2uni (	/* Returns a character i
                    n UTF-16 encoding (>=0x10000 on surrogate pair, 0xFFFFFFFF o
                    n decode error) */
  2620                        ;	const TCHAR** str		/* Pointer to po
                    inter to TCHAR string in configured encoding */
  2621                        ;)
  2622                        ;{
  2623                        ;	DWORD uc;
  2624                        ;	const TCHAR *p = *str;
  2625                        ;
  2626                        ;#if FF_LFN_UNICODE == 1		/* UTF-16 input 
                    */
  Thu Dec  3 2020 22:25                                                Page 57


  2627                        ;	WCHAR wc;
  2628                        ;
  2629                        ;	uc = *p++;	/* Get a unit */
  2630                        ;	if (IsSurrogate(uc)) {	/* Surrogate? */
  2631                        ;		wc = *p++;		/* Get low surro
                    gate */
  2632                        ;		if (!IsSurrogateH(uc) || !IsSurrogateL(w
                    c)) return 0xFFFFFFFF;	/* Wrong surrogate? */
  2633                        ;		uc = uc << 16 | wc;
  2634                        ;	}
  2635                        ;
  2636                        ;#elif FF_LFN_UNICODE == 2	/* UTF-8 input *
                    /
  2637                        ;	BYTE b;
  2638                        ;	int nf;
  2639                        ;
  2640                        ;	uc = (BYTE)*p++;	/* Get an encoding unit 
                    */
  2641                        ;	if (uc & 0x80) {	/* Multiple byte code? *
                    /
  2642                        ;		if ((uc & 0xE0) == 0xC0) {	/* 2-byt
                    e sequence? */
  2643                        ;			uc &= 0x1F; nf = 1;
  2644                        ;		} else {
  2645                        ;			if ((uc & 0xF0) == 0xE0) {	
                    /* 3-byte sequence? */
  2646                        ;				uc &= 0x0F; nf = 2;
  2647                        ;			} else {
  2648                        ;				if ((uc & 0xF8) == 0xF0)
                     {	/* 4-byte sequence? */
  2649                        ;					uc &= 0x07; nf =
                     3;
  2650                        ;				} else {		
                    			/* Wrong sequence */
  2651                        ;					return 0xFFFFFFF
                    F;
  2652                        ;				}
  2653                        ;			}
  2654                        ;		}
  2655                        ;		do {	/* Get trailing bytes */
  2656                        ;			b = (BYTE)*p++;
  2657                        ;			if ((b & 0xC0) != 0x80) return 0
                    xFFFFFFFF;	/* Wrong sequence? */
  2658                        ;			uc = uc << 6 | (b & 0x3F);
  2659                        ;		} while (--nf != 0);
  2660                        ;		if (uc < 0x80 || IsSurrogate(uc) || uc >
                    = 0x110000) return 0xFFFFFFFF;	/* Wrong code? */
  2661                        ;		if (uc >= 0x010000) uc = 0xD800DC00 | ((
                    uc - 0x10000) << 6 & 0x3FF0000) | (uc & 0x3FF);	/* Make 
                    a surrogate pair if needed */
  2662                        ;	}
  2663                        ;
  2664                        ;#elif FF_LFN_UNICODE == 3	/* UTF-32 input 
                    */
  2665                        ;	uc = (TCHAR)*p++;	/* Get a unit */
  2666                        ;	if (uc >= 0x110000 || IsSurrogate(uc)) return 0x
                    FFFFFFFF;	/* Wrong code? */
  2667                        ;	if (uc >= 0x010000) uc = 0xD800DC00 | ((uc - 0x1
  Thu Dec  3 2020 22:25                                                Page 58


                    0000) << 6 & 0x3FF0000) | (uc & 0x3FF);	/* Make a surrog
                    ate pair if needed */
  2668                        ;
  2669                        ;#else		/* ANSI/OEM input */
  2670                        ;	BYTE b;
  2671                        ;	WCHAR wc;
  2672                        ;
  2673                        ;	wc = (BYTE)*p++;			/* Get a
                     byte */
  2674                        ;	if (dbc_1st((BYTE)wc)) {	/* Is it a DBC 1
                    st byte? */
  2675                        ;		b = (BYTE)*p++;			/* Get 2
                    nd byte */
  2676                        ;		if (!dbc_2nd(b)) return 0xFFFFFFFF;	
                    /* Invalid code? */
  2677                        ;		wc = (wc << 8) + b;		/* Make 
                    a DBC */
  2678                        ;	}
  2679                        ;	if (wc != 0) {
  2680                        ;		wc = ff_oem2uni(wc, CODEPAGE);	/* ANSI/
                    OEM ==> Unicode */
  2681                        ;		if (wc == 0) return 0xFFFFFFFF;	/* Inval
                    id code? */
  2682                        ;	}
  2683                        ;	uc = wc;
  2684                        ;
  2685                        ;#endif
  2686                        ;	*str = p;	/* Next read pointer */
  2687                        ;	return uc;
  2688                        ;}
  2689                        ;
  2690                        ;
  2691                        ;/* Output a TCHAR string in defined API encoding 
                    */
  2692                        ;static BYTE put_utf (	/* Returns number of enc
                    oding units written (0:buffer overflow or wrong encoding) */
  2693                        ;	DWORD chr,	/* UTF-16 encoded character (Sur
                    rogate pair if >=0x10000) */
  2694                        ;	TCHAR* buf,	/* Output buffer */
  2695                        ;	UINT szb	/* Size of the buffer */
  2696                        ;)
  2697                        ;{
  2698                        ;#if FF_LFN_UNICODE == 1	/* UTF-16 output */
  2699                        ;	WCHAR hs, wc;
  2700                        ;
  2701                        ;	hs = (WCHAR)(chr >> 16);
  2702                        ;	wc = (WCHAR)chr;
  2703                        ;	if (hs == 0) {	/* Single encoding unit? */
  2704                        ;		if (szb < 1 || IsSurrogate(wc)) return 0
                    ;	/* Buffer overflow or wrong code? */
  2705                        ;		*buf = wc;
  2706                        ;		return 1;
  2707                        ;	}
  2708                        ;	if (szb < 2 || !IsSurrogateH(hs) || !IsSurrogate
                    L(wc)) return 0;	/* Buffer overflow or wrong surrogate? *
                    /
  2709                        ;	*buf++ = hs;
  2710                        ;	*buf++ = wc;
  Thu Dec  3 2020 22:25                                                Page 59


  2711                        ;	return 2;
  2712                        ;
  2713                        ;#elif FF_LFN_UNICODE == 2	/* UTF-8 output 
                    */
  2714                        ;	DWORD hc;
  2715                        ;
  2716                        ;	if (chr < 0x80) {	/* Single byte code? */
  2717                        ;		if (szb < 1) return 0;	/* Buffer overfl
                    ow? */
  2718                        ;		*buf = (TCHAR)chr;
  2719                        ;		return 1;
  2720                        ;	}
  2721                        ;	if (chr < 0x800) {	/* 2-byte sequence? */
  2722                        ;		if (szb < 2) return 0;	/* Buffer overfl
                    ow? */
  2723                        ;		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F
                    ));
  2724                        ;		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F
                    ));
  2725                        ;		return 2;
  2726                        ;	}
  2727                        ;	if (chr < 0x10000) {	/* 3-byte sequence? */
  2728                        ;		if (szb < 3 || IsSurrogate(chr)) return 
                    0;	/* Buffer overflow or wrong code? */
  2729                        ;		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0
                    F));
  2730                        ;		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F
                    ));
  2731                        ;		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F
                    ));
  2732                        ;		return 3;
  2733                        ;	}
  2734                        ;	/* 4-byte sequence */
  2735                        ;	if (szb < 4) return 0;	/* Buffer overflow? */
  2736                        ;	hc = ((chr & 0xFFFF0000) - 0xD8000000) >> 6;	
                    /* Get high 10 bits */
  2737                        ;	chr = (chr & 0xFFFF) - 0xDC00;			
                    		/* Get low 10 bits */
  2738                        ;	if (hc >= 0x100000 || chr >= 0x400) return 0;	
                    /* Wrong surrogate? */
  2739                        ;	chr = (hc | chr) + 0x10000;
  2740                        ;	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
  2741                        ;	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
  2742                        ;	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
  2743                        ;	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
  2744                        ;	return 4;
  2745                        ;
  2746                        ;#elif FF_LFN_UNICODE == 3	/* UTF-32 output
                     */
  2747                        ;	DWORD hc;
  2748                        ;
  2749                        ;	if (szb < 1) return 0;	/* Buffer overflow? */
  2750                        ;	if (chr >= 0x10000) {	/* Out of BMP? */
  2751                        ;		hc = ((chr & 0xFFFF0000) - 0xD8000000) >
                    > 6;	/* Get high 10 bits */
  2752                        ;		chr = (chr & 0xFFFF) - 0xDC00;		
                    			/* Get low 10 bits */
  2753                        ;		if (hc >= 0x100000 || chr >= 0x400) retu
  Thu Dec  3 2020 22:25                                                Page 60


                    rn 0;	/* Wrong surrogate? */
  2754                        ;		chr = (hc | chr) + 0x10000;
  2755                        ;	}
  2756                        ;	*buf++ = (TCHAR)chr;
  2757                        ;	return 1;
  2758                        ;
  2759                        ;#else						
                    /* ANSI/OEM output */
  2760                        ;	WCHAR wc;
  2761                        ;
  2762                        ;	wc = ff_uni2oem(chr, CODEPAGE);
  2763                        ;	if (wc >= 0x100) {	/* Is this a DBC? */
  2764                        ;		if (szb < 2) return 0;
  2765                        ;		*buf++ = (char)(wc >> 8);	/* Store
                     DBC 1st byte */
  2766                        ;		*buf++ = (TCHAR)wc;			
                    /* Store DBC 2nd byte */
  2767                        ;		return 2;
  2768                        ;	}
  2769                        ;	if (wc == 0 || szb < 1) return 0;	/* Inval
                    id char or buffer overflow? */
  2770                        ;	*buf++ = (TCHAR)wc;				
                    	/* Store the character */
  2771                        ;	return 1;
  2772                        ;#endif
  2773                        ;}
  2774                        ;#endif	/* FF_USE_LFN */
  2775                        ;
  2776                        ;
  2777                        ;#if FF_FS_REENTRANT
  2778                        ;/*-----------------------------------------------
                    ------------------------*/
  2779                        ;/* Request/Release grant to access the volume    
                                            */
  2780                        ;/*-----------------------------------------------
                    ------------------------*/
  2781                        ;static int lock_fs (		/* 1:Ok, 0:timeo
                    ut */
  2782                        ;	FATFS* fs		/* Filesystem object */
  2783                        ;)
  2784                        ;{
  2785                        ;	return ff_req_grant(fs->sobj);
  2786                        ;}
  2787                        ;
  2788                        ;
  2789                        ;static void unlock_fs (
  2790                        ;	FATFS* fs,		/* Filesystem object */
  2791                        ;	FRESULT res		/* Result code to be ret
                    urned */
  2792                        ;)
  2793                        ;{
  2794                        ;	if (fs && res != FR_NOT_ENABLED && res != FR_INV
                    ALID_DRIVE && res != FR_TIMEOUT) {
  2795                        ;		ff_rel_grant(fs->sobj);
  2796                        ;	}
  2797                        ;}
  2798                        ;
  2799                        ;#endif
  Thu Dec  3 2020 22:25                                                Page 61


  2800                        ;
  2801                        ;
  2802                        ;
  2803                        ;#if FF_FS_LOCK != 0
  2804                        ;/*-----------------------------------------------
                    ------------------------*/
  2805                        ;/* File lock control functions                   
                                            */
  2806                        ;/*-----------------------------------------------
                    ------------------------*/
  2807                        ;
  2808                        ;static FRESULT chk_lock (	/* Check if the 
                    file can be accessed */
  2809                        ;	DIR* dp,		/* Directory object poin
                    ting the file to be checked */
  2810                        ;	int acc			/* Desired access type (
                    0:Read mode open, 1:Write mode open, 2:Delete or rename) */
  2811                        ;)
  2812                        ;{
  2813                        ;	UINT i, be;
  2814                        ;
  2815                        ;	/* Search open object table for the object */
  2816                        ;	be = 0;
  2817                        ;	for (i = 0; i < FF_FS_LOCK; i++) {
  2818                        ;		if (Files[i].fs) {	/* Existing entr
                    y */
  2819                        ;			if (Files[i].fs == dp->obj.fs &&
                    	 	/* Check if the object matches with an open obje
                    ct */
  2820                        ;				Files[i].clu == dp->obj.
                    sclust &&
  2821                        ;				Files[i].ofs == dp->dptr
                    ) break;
  2822                        ;		} else {			/* Blank
                     entry */
  2823                        ;			be = 1;
  2824                        ;		}
  2825                        ;	}
  2826                        ;	if (i == FF_FS_LOCK) {	/* The object has not be
                    en opened */
  2827                        ;		return (!be && acc != 2) ? FR_TOO_MANY_O
                    PEN_FILES : FR_OK;	/* Is there a blank entry for new object
                    ? */
  2828                        ;	}
  2829                        ;
  2830                        ;	/* The object was opened. Reject any open agains
                    t writing file and all write mode open */
  2831                        ;	return (acc != 0 || Files[i].ctr == 0x100) ? FR_
                    LOCKED : FR_OK;
  2832                        ;}
  2833                        ;
  2834                        ;
  2835                        ;static int enq_lock (void)	/* Check if an e
                    ntry is available for a new object */
  2836                        ;{
  2837                        ;	UINT i;
  2838                        ;
  2839                        ;	for (i = 0; i < FF_FS_LOCK && Files[i].fs; i++) 
  Thu Dec  3 2020 22:25                                                Page 62


                    ;
  2840                        ;	return (i == FF_FS_LOCK) ? 0 : 1;
  2841                        ;}
  2842                        ;
  2843                        ;
  2844                        ;static UINT inc_lock (	/* Increment object open
                     counter and returns its index (0:Internal error) */
  2845                        ;	DIR* dp,	/* Directory object pointing the
                     file to register or increment */
  2846                        ;	int acc		/* Desired access (0:Read, 1:Wri
                    te, 2:Delete/Rename) */
  2847                        ;)
  2848                        ;{
  2849                        ;	UINT i;
  2850                        ;
  2851                        ;
  2852                        ;	for (i = 0; i < FF_FS_LOCK; i++) {	/* Find 
                    the object */
  2853                        ;		if (Files[i].fs == dp->obj.fs
  2854                        ;		 && Files[i].clu == dp->obj.sclust
  2855                        ;		 && Files[i].ofs == dp->dptr) break;
  2856                        ;	}
  2857                        ;
  2858                        ;	if (i == FF_FS_LOCK) {				
                    /* Not opened. Register it as new. */
  2859                        ;		for (i = 0; i < FF_FS_LOCK && Files[i].f
                    s; i++) ;
  2860                        ;		if (i == FF_FS_LOCK) return 0;	/* No fr
                    ee entry to register (int err) */
  2861                        ;		Files[i].fs = dp->obj.fs;
  2862                        ;		Files[i].clu = dp->obj.sclust;
  2863                        ;		Files[i].ofs = dp->dptr;
  2864                        ;		Files[i].ctr = 0;
  2865                        ;	}
  2866                        ;
  2867                        ;	if (acc >= 1 && Files[i].ctr) return 0;	/* Acces
                    s violation (int err) */
  2868                        ;
  2869                        ;	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	
                    /* Set semaphore value */
  2870                        ;
  2871                        ;	return i + 1;	/* Index number origin from 1 */
  2872                        ;}
  2873                        ;
  2874                        ;
  2875                        ;static FRESULT dec_lock (	/* Decrement obj
                    ect open counter */
  2876                        ;	UINT i			/* Semaphore index (1..)
                     */
  2877                        ;)
  2878                        ;{
  2879                        ;	WORD n;
  2880                        ;	FRESULT res;
  2881                        ;
  2882                        ;
  2883                        ;	if (--i < FF_FS_LOCK) {	/* Index number origin f
                    rom 0 */
  2884                        ;		n = Files[i].ctr;
  Thu Dec  3 2020 22:25                                                Page 63


  2885                        ;		if (n == 0x100) n = 0;		/* If wr
                    ite mode open, delete the entry */
  2886                        ;		if (n > 0) n--;				
                    /* Decrement read mode open count */
  2887                        ;		Files[i].ctr = n;
  2888                        ;		if (n == 0) Files[i].fs = 0;	/* Delet
                    e the entry if open count gets zero */
  2889                        ;		res = FR_OK;
  2890                        ;	} else {
  2891                        ;		res = FR_INT_ERR;			
                    /* Invalid index nunber */
  2892                        ;	}
  2893                        ;	return res;
  2894                        ;}
  2895                        ;
  2896                        ;
  2897                        ;static void clear_lock (	/* Clear lock entries of
                     the volume */
  2898                        ;	FATFS *fs
  2899                        ;)
  2900                        ;{
  2901                        ;	UINT i;
  2902                        ;
  2903                        ;	for (i = 0; i < FF_FS_LOCK; i++) {
  2904                        ;		if (Files[i].fs == fs) Files[i].fs = 0;
  2905                        ;	}
  2906                        ;}
  2907                        ;
  2908                        ;#endif	/* FF_FS_LOCK != 0 */
  2909                        ;
  2910                        ;
  2911                        ;
  2912                        ;/*-----------------------------------------------
                    ------------------------*/
  2913                        ;/* Move/Flush disk access window in the filesyste
                    m object                */
  2914                        ;/*-----------------------------------------------
                    ------------------------*/
  2915                        ;#if !FF_FS_READONLY
  2916                        ;static FRESULT sync_window (	/* Returns FR_OK
                     or FR_DISK_ERR */
  2917                        ;	FATFS* fs			/* Filesystem ob
                    ject */
  2918                        ;)
  2919                        ;{
  2920                        	.line	1085
  2921                        	.line	1088
  2922                        	FFDOS
  2923                        	func
  2924                        	.function	1088
  2925                        ~~sync_window:
  2926                        	longa	on
  2927                        	longi	on
  2928 08:0311: 3B           	tsc
  2929 08:0312: 38           	sec
  2930 08:0313: E9 0A 00     	sbc	#L64
  2931 08:0316: 1B           	tcs
  2932 08:0317: 0B           	phd
  Thu Dec  3 2020 22:25                                                Page 64


  2933 08:0318: 5B           	tcd
  2934             00000004   fs_0	set	4
  2935                        	.block	1088
  2936                        ;	FRESULT res = FR_OK;
  2937                        ;
  2938                        ;
  2939                        ;	if (fs->wflag) {	/* Is the disk access wi
                    ndow dirty? */
  2940             00000000   res_1	set	0
  2941                        	.sym	res,0,5,1,16
  2942                        	.sym	fs,4,138,6,32,80
  2943 08:0319: 64 09        	stz	<L65+res_1
  2944                        	.line	1092
  2945 08:031B: A0 03 00     	ldy	#$3
  2946 08:031E: B7 0E        	lda	[<L64+fs_0],Y
  2947 08:0320: 29 FF 00     	and	#$ff
  2948 08:0323: D0 03        	bne	L67
  2949 08:0325: 82 BE 00     	brl	L10015
  2950                        L67:
  2951                        	.line	1092
  2952                        ;		if (disk_write(fs->pdrv, fs->win, fs->wi
                    nsect, 1) == RES_OK) {	/* Write it back into the volume
                     */
  2953                        	.line	1093
  2954 08:0328: F4 01 00     	pea	#<$1
  2955 08:032B: A0 2D 00     	ldy	#$2d
  2956 08:032E: B7 0E        	lda	[<L64+fs_0],Y
  2957 08:0330: 48           	pha
  2958 08:0331: A0 2B 00     	ldy	#$2b
  2959 08:0334: B7 0E        	lda	[<L64+fs_0],Y
  2960 08:0336: 48           	pha
  2961 08:0337: 18           	clc
  2962 08:0338: A9 2F 00     	lda	#$2f
  2963 08:033B: 65 0E        	adc	<L64+fs_0
  2964 08:033D: 85 01        	sta	<R0
  2965 08:033F: A9 00 00     	lda	#$0
  2966 08:0342: 65 10        	adc	<L64+fs_0+2
  2967 08:0344: 85 03        	sta	<R0+2
  2968 08:0346: D4 03        	pei	<R0+2
  2969 08:0348: D4 01        	pei	<R0
  2970 08:034A: A0 01 00     	ldy	#$1
  2971 08:034D: B7 0E        	lda	[<L64+fs_0],Y
  2972 08:034F: 48           	pha
  2973 08:0350: 22 xx xx xx  	jsl	~~disk_write
  2974 08:0354: AA           	tax
  2975 08:0355: F0 03        	beq	L68
  2976 08:0357: 82 87 00     	brl	L10016
  2977                        L68:
  2978                        	.line	1093
  2979                        ;			fs->wflag = 0;	/* Clear window 
                    dirty flag */
  2980                        	.line	1094
  2981 08:035A: E2 20        	sep	#$20
  2982                        	longa	off
  2983 08:035C: A9 00        	lda	#$0
  2984 08:035E: A0 03 00     	ldy	#$3
  2985 08:0361: 97 0E        	sta	[<L64+fs_0],Y
  2986 08:0363: C2 20        	rep	#$20
  Thu Dec  3 2020 22:25                                                Page 65


  2987                        	longa	on
  2988                        ;			if (fs->winsect - fs->fatbase < 
                    fs->fsize) {	/* Is it in the 1st FAT? */
  2989                        	.line	1095
  2990 08:0365: 38           	sec
  2991 08:0366: A0 2B 00     	ldy	#$2b
  2992 08:0369: B7 0E        	lda	[<L64+fs_0],Y
  2993 08:036B: A0 1F 00     	ldy	#$1f
  2994 08:036E: F7 0E        	sbc	[<L64+fs_0],Y
  2995 08:0370: 85 01        	sta	<R0
  2996 08:0372: A0 2D 00     	ldy	#$2d
  2997 08:0375: B7 0E        	lda	[<L64+fs_0],Y
  2998 08:0377: A0 21 00     	ldy	#$21
  2999 08:037A: F7 0E        	sbc	[<L64+fs_0],Y
  3000 08:037C: 85 03        	sta	<R0+2
  3001 08:037E: A5 01        	lda	<R0
  3002 08:0380: A0 17 00     	ldy	#$17
  3003 08:0383: D7 0E        	cmp	[<L64+fs_0],Y
  3004 08:0385: A5 03        	lda	<R0+2
  3005 08:0387: A0 19 00     	ldy	#$19
  3006 08:038A: F7 0E        	sbc	[<L64+fs_0],Y
  3007 08:038C: 90 03        	bcc	L69
  3008 08:038E: 82 4D 00     	brl	L10017
  3009                        L69:
  3010                        	.line	1095
  3011                        ;				if (fs->n_fats == 2) dis
                    k_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	
                    /* Reflect it to 2nd FAT if needed */
  3012                        	.line	1096
  3013 08:0391: E2 20        	sep	#$20
  3014                        	longa	off
  3015 08:0393: A0 02 00     	ldy	#$2
  3016 08:0396: B7 0E        	lda	[<L64+fs_0],Y
  3017 08:0398: C9 02        	cmp	#<$2
  3018 08:039A: C2 20        	rep	#$20
  3019                        	longa	on
  3020 08:039C: F0 03        	beq	L70
  3021 08:039E: 82 3D 00     	brl	L10018
  3022                        L70:
  3023                        	.line	1096
  3024 08:03A1: F4 01 00     	pea	#<$1
  3025 08:03A4: 18           	clc
  3026 08:03A5: A0 2B 00     	ldy	#$2b
  3027 08:03A8: B7 0E        	lda	[<L64+fs_0],Y
  3028 08:03AA: A0 17 00     	ldy	#$17
  3029 08:03AD: 77 0E        	adc	[<L64+fs_0],Y
  3030 08:03AF: 85 01        	sta	<R0
  3031 08:03B1: A0 2D 00     	ldy	#$2d
  3032 08:03B4: B7 0E        	lda	[<L64+fs_0],Y
  3033 08:03B6: A0 19 00     	ldy	#$19
  3034 08:03B9: 77 0E        	adc	[<L64+fs_0],Y
  3035 08:03BB: 85 03        	sta	<R0+2
  3036 08:03BD: D4 03        	pei	<R0+2
  3037 08:03BF: D4 01        	pei	<R0
  3038 08:03C1: 18           	clc
  3039 08:03C2: A9 2F 00     	lda	#$2f
  3040 08:03C5: 65 0E        	adc	<L64+fs_0
  3041 08:03C7: 85 05        	sta	<R1
  Thu Dec  3 2020 22:25                                                Page 66


  3042 08:03C9: A9 00 00     	lda	#$0
  3043 08:03CC: 65 10        	adc	<L64+fs_0+2
  3044 08:03CE: 85 07        	sta	<R1+2
  3045 08:03D0: D4 07        	pei	<R1+2
  3046 08:03D2: D4 05        	pei	<R1
  3047 08:03D4: A0 01 00     	ldy	#$1
  3048 08:03D7: B7 0E        	lda	[<L64+fs_0],Y
  3049 08:03D9: 48           	pha
  3050 08:03DA: 22 xx xx xx  	jsl	~~disk_write
  3051                        ;			}
  3052                        L10018:
  3053                        	.line	1097
  3054                        ;		} else {
  3055                        L10017:
  3056                        	.line	1098
  3057 08:03DE: 82 05 00     	brl	L10019
  3058                        L10016:
  3059                        	.line	1098
  3060                        ;			res = FR_DISK_ERR;
  3061                        	.line	1099
  3062 08:03E1: A9 01 00     	lda	#$1
  3063 08:03E4: 85 09        	sta	<L65+res_1
  3064                        ;		}
  3065                        	.line	1100
  3066                        L10019:
  3067                        ;	}
  3068                        	.line	1101
  3069                        ;	return res;
  3070                        L10015:
  3071                        	.line	1102
  3072 08:03E6: A5 09        	lda	<L65+res_1
  3073                        L71:
  3074 08:03E8: A8           	tay
  3075 08:03E9: A5 0C        	lda	<L64+2
  3076 08:03EB: 85 10        	sta	<L64+2+4
  3077 08:03ED: A5 0B        	lda	<L64+1
  3078 08:03EF: 85 0F        	sta	<L64+1+4
  3079 08:03F1: 2B           	pld
  3080 08:03F2: 3B           	tsc
  3081 08:03F3: 18           	clc
  3082 08:03F4: 69 0E 00     	adc	#L64+4
  3083 08:03F7: 1B           	tcs
  3084 08:03F8: 98           	tya
  3085 08:03F9: 6B           	rtl
  3086                        ;}
  3087                        	.line	1103
  3088                        	.endblock	1103
  3089             0000000A   L64	equ	10
  3090             00000009   L65	equ	9
  3091 08:03FA:              	ends
  3092                        	efunc
  3093                        	.endfunc	1103,9,10
  3094                        	.line	1103
  3095                        ;#endif
  3096                        ;
  3097                        ;
  3098                        ;static FRESULT move_window (	/* Returns FR_OK
                     or FR_DISK_ERR */
  Thu Dec  3 2020 22:25                                                Page 67


  3099                        ;	FATFS* fs,		/* Filesystem object */
  3100                        ;	LBA_t sect		/* Sector LBA to make ap
                    pearance in the fs->win[] */
  3101                        ;)
  3102                        ;{
  3103                        	.line	1107
  3104                        	.line	1111
  3105                        	FFDOS
  3106                        	func
  3107                        	.function	1111
  3108                        ~~move_window:
  3109                        	longa	on
  3110                        	longi	on
  3111 08:03FA: 3B           	tsc
  3112 08:03FB: 38           	sec
  3113 08:03FC: E9 06 00     	sbc	#L72
  3114 08:03FF: 1B           	tcs
  3115 08:0400: 0B           	phd
  3116 08:0401: 5B           	tcd
  3117             00000004   fs_0	set	4
  3118             00000008   sect_0	set	8
  3119                        	.block	1111
  3120                        ;	FRESULT res = FR_OK;
  3121                        ;
  3122                        ;
  3123                        ;	if (sect != fs->winsect) {	/* Window offset
                     changed? */
  3124             00000000   res_1	set	0
  3125                        	.sym	res,0,5,1,16
  3126                        	.sym	fs,4,138,6,32,80
  3127                        	.sym	sect,8,18,6,32
  3128 08:0402: 64 05        	stz	<L73+res_1
  3129                        	.line	1115
  3130 08:0404: A5 0E        	lda	<L72+sect_0
  3131 08:0406: A0 2B 00     	ldy	#$2b
  3132 08:0409: D7 0A        	cmp	[<L72+fs_0],Y
  3133 08:040B: D0 07        	bne	L75
  3134 08:040D: A5 10        	lda	<L72+sect_0+2
  3135 08:040F: A0 2D 00     	ldy	#$2d
  3136 08:0412: D7 0A        	cmp	[<L72+fs_0],Y
  3137                        L75:
  3138 08:0414: D0 03        	bne	L76
  3139 08:0416: 82 58 00     	brl	L10020
  3140                        L76:
  3141                        	.line	1115
  3142                        ;#if !FF_FS_READONLY
  3143                        ;		res = sync_window(fs);		/* Flush
                     the window */
  3144                        	.line	1117
  3145 08:0419: D4 0C        	pei	<L72+fs_0+2
  3146 08:041B: D4 0A        	pei	<L72+fs_0
  3147 08:041D: 22 11 03 08  	jsl	~~sync_window
  3148 08:0421: 85 05        	sta	<L73+res_1
  3149                        ;#endif
  3150                        ;		if (res == FR_OK) {			
                    /* Fill sector window with new data */
  3151                        	.line	1119
  3152 08:0423: A5 05        	lda	<L73+res_1
  Thu Dec  3 2020 22:25                                                Page 68


  3153 08:0425: F0 03        	beq	L77
  3154 08:0427: 82 47 00     	brl	L10021
  3155                        L77:
  3156                        	.line	1119
  3157                        ;			if (disk_read(fs->pdrv, fs->win,
                     sect, 1) != RES_OK) {
  3158                        	.line	1120
  3159 08:042A: F4 01 00     	pea	#<$1
  3160 08:042D: D4 10        	pei	<L72+sect_0+2
  3161 08:042F: D4 0E        	pei	<L72+sect_0
  3162 08:0431: 18           	clc
  3163 08:0432: A9 2F 00     	lda	#$2f
  3164 08:0435: 65 0A        	adc	<L72+fs_0
  3165 08:0437: 85 01        	sta	<R0
  3166 08:0439: A9 00 00     	lda	#$0
  3167 08:043C: 65 0C        	adc	<L72+fs_0+2
  3168 08:043E: 85 03        	sta	<R0+2
  3169 08:0440: D4 03        	pei	<R0+2
  3170 08:0442: D4 01        	pei	<R0
  3171 08:0444: A0 01 00     	ldy	#$1
  3172 08:0447: B7 0A        	lda	[<L72+fs_0],Y
  3173 08:0449: 48           	pha
  3174 08:044A: 22 xx xx xx  	jsl	~~disk_read
  3175 08:044E: AA           	tax
  3176 08:044F: D0 03        	bne	L78
  3177 08:0451: 82 0F 00     	brl	L10022
  3178                        L78:
  3179                        	.line	1120
  3180                        ;				sect = (LBA_t)0 - 1;	
                    /* Invalidate window if read data is not valid */
  3181                        	.line	1121
  3182 08:0454: A9 FF FF     	lda	#$ffff
  3183 08:0457: 85 0E        	sta	<L72+sect_0
  3184 08:0459: A9 FF FF     	lda	#$ffff
  3185 08:045C: 85 10        	sta	<L72+sect_0+2
  3186                        ;				res = FR_DISK_ERR;
  3187                        	.line	1122
  3188 08:045E: A9 01 00     	lda	#$1
  3189 08:0461: 85 05        	sta	<L73+res_1
  3190                        ;			}
  3191                        	.line	1123
  3192                        ;			fs->winsect = sect;
  3193                        L10022:
  3194                        	.line	1124
  3195 08:0463: A5 0E        	lda	<L72+sect_0
  3196 08:0465: A0 2B 00     	ldy	#$2b
  3197 08:0468: 97 0A        	sta	[<L72+fs_0],Y
  3198 08:046A: A5 10        	lda	<L72+sect_0+2
  3199 08:046C: A0 2D 00     	ldy	#$2d
  3200 08:046F: 97 0A        	sta	[<L72+fs_0],Y
  3201                        ;		}
  3202                        	.line	1125
  3203                        ;	}
  3204                        L10021:
  3205                        	.line	1126
  3206                        ;	return res;
  3207                        L10020:
  3208                        	.line	1127
  Thu Dec  3 2020 22:25                                                Page 69


  3209 08:0471: A5 05        	lda	<L73+res_1
  3210                        L79:
  3211 08:0473: A8           	tay
  3212 08:0474: A5 08        	lda	<L72+2
  3213 08:0476: 85 10        	sta	<L72+2+8
  3214 08:0478: A5 07        	lda	<L72+1
  3215 08:047A: 85 0F        	sta	<L72+1+8
  3216 08:047C: 2B           	pld
  3217 08:047D: 3B           	tsc
  3218 08:047E: 18           	clc
  3219 08:047F: 69 0E 00     	adc	#L72+8
  3220 08:0482: 1B           	tcs
  3221 08:0483: 98           	tya
  3222 08:0484: 6B           	rtl
  3223                        ;}
  3224                        	.line	1128
  3225                        	.endblock	1128
  3226             00000006   L72	equ	6
  3227             00000005   L73	equ	5
  3228 08:0485:              	ends
  3229                        	efunc
  3230                        	.endfunc	1128,5,6
  3231                        	.line	1128
  3232                        ;
  3233                        ;
  3234                        ;
  3235                        ;
  3236                        ;#if !FF_FS_READONLY
  3237                        ;/*-----------------------------------------------
                    ------------------------*/
  3238                        ;/* Synchronize filesystem and data on the storage
                                            */
  3239                        ;/*-----------------------------------------------
                    ------------------------*/
  3240                        ;
  3241                        ;static FRESULT sync_fs (	/* Returns FR_OK or FR_D
                    ISK_ERR */
  3242                        ;	FATFS* fs		/* Filesystem object */
  3243                        ;)
  3244                        ;{
  3245                        	.line	1138
  3246                        	.line	1141
  3247                        	FFDOS
  3248                        	func
  3249                        	.function	1141
  3250                        ~~sync_fs:
  3251                        	longa	on
  3252                        	longi	on
  3253 08:0485: 3B           	tsc
  3254 08:0486: 38           	sec
  3255 08:0487: E9 06 00     	sbc	#L80
  3256 08:048A: 1B           	tcs
  3257 08:048B: 0B           	phd
  3258 08:048C: 5B           	tcd
  3259             00000004   fs_0	set	4
  3260                        	.block	1141
  3261                        ;	FRESULT res;
  3262                        ;
  Thu Dec  3 2020 22:25                                                Page 70


  3263                        ;
  3264                        ;	res = sync_window(fs);
  3265             00000000   res_1	set	0
  3266                        	.sym	res,0,5,1,16
  3267                        	.sym	fs,4,138,6,32,80
  3268                        	.line	1145
  3269 08:048D: D4 0C        	pei	<L80+fs_0+2
  3270 08:048F: D4 0A        	pei	<L80+fs_0
  3271 08:0491: 22 11 03 08  	jsl	~~sync_window
  3272 08:0495: 85 05        	sta	<L81+res_1
  3273                        ;	if (res == FR_OK) {
  3274                        	.line	1146
  3275 08:0497: A5 05        	lda	<L81+res_1
  3276 08:0499: F0 03        	beq	L83
  3277 08:049B: 82 4C 01     	brl	L10023
  3278                        L83:
  3279                        	.line	1146
  3280                        ;		if (fs->fs_type == FS_FAT32 && fs->fsi_f
                    lag == 1) {	/* FAT32: Update FSInfo sector if needed */
  3281                        	.line	1147
  3282 08:049E: E2 20        	sep	#$20
  3283                        	longa	off
  3284 08:04A0: A7 0A        	lda	[<L80+fs_0]
  3285 08:04A2: C9 03        	cmp	#<$3
  3286 08:04A4: C2 20        	rep	#$20
  3287                        	longa	on
  3288 08:04A6: F0 03        	beq	L84
  3289 08:04A8: 82 21 01     	brl	L10024
  3290                        L84:
  3291 08:04AB: E2 20        	sep	#$20
  3292                        	longa	off
  3293 08:04AD: A0 04 00     	ldy	#$4
  3294 08:04B0: B7 0A        	lda	[<L80+fs_0],Y
  3295 08:04B2: C9 01        	cmp	#<$1
  3296 08:04B4: C2 20        	rep	#$20
  3297                        	longa	on
  3298 08:04B6: F0 03        	beq	L85
  3299 08:04B8: 82 11 01     	brl	L10024
  3300                        L85:
  3301                        	.line	1147
  3302                        ;			/* Create FSInfo structure */
  3303                        ;			mem_set(fs->win, 0, sizeof fs->w
                    in);
  3304                        	.line	1149
  3305 08:04BB: F4 00 02     	pea	#<$200
  3306 08:04BE: F4 00 00     	pea	#<$0
  3307 08:04C1: 18           	clc
  3308 08:04C2: A9 2F 00     	lda	#$2f
  3309 08:04C5: 65 0A        	adc	<L80+fs_0
  3310 08:04C7: 85 01        	sta	<R0
  3311 08:04C9: A9 00 00     	lda	#$0
  3312 08:04CC: 65 0C        	adc	<L80+fs_0+2
  3313 08:04CE: 85 03        	sta	<R0+2
  3314 08:04D0: D4 03        	pei	<R0+2
  3315 08:04D2: D4 01        	pei	<R0
  3316 08:04D4: 22 DF 01 08  	jsl	~~mem_set
  3317                        ;			st_word(fs->win + BS_55AA, 0xAA5
                    5);
  Thu Dec  3 2020 22:25                                                Page 71


  3318                        	.line	1150
  3319 08:04D8: F4 55 AA     	pea	#<$aa55
  3320 08:04DB: 18           	clc
  3321 08:04DC: A9 2D 02     	lda	#$22d
  3322 08:04DF: 65 0A        	adc	<L80+fs_0
  3323 08:04E1: 85 01        	sta	<R0
  3324 08:04E3: A9 00 00     	lda	#$0
  3325 08:04E6: 65 0C        	adc	<L80+fs_0+2
  3326 08:04E8: 85 03        	sta	<R0+2
  3327 08:04EA: D4 03        	pei	<R0+2
  3328 08:04EC: D4 01        	pei	<R0
  3329 08:04EE: 22 D7 00 08  	jsl	~~st_word
  3330                        ;			st_dword(fs->win + FSI_LeadSig, 
                    0x41615252);
  3331                        	.line	1151
  3332 08:04F2: F4 61 41     	pea	#^$41615252
  3333 08:04F5: F4 52 52     	pea	#<$41615252
  3334 08:04F8: 18           	clc
  3335 08:04F9: A9 2F 00     	lda	#$2f
  3336 08:04FC: 65 0A        	adc	<L80+fs_0
  3337 08:04FE: 85 01        	sta	<R0
  3338 08:0500: A9 00 00     	lda	#$0
  3339 08:0503: 65 0C        	adc	<L80+fs_0+2
  3340 08:0505: 85 03        	sta	<R0+2
  3341 08:0507: D4 03        	pei	<R0+2
  3342 08:0509: D4 01        	pei	<R0
  3343 08:050B: 22 16 01 08  	jsl	~~st_dword
  3344                        ;			st_dword(fs->win + FSI_StrucSig,
                     0x61417272);
  3345                        	.line	1152
  3346 08:050F: F4 41 61     	pea	#^$61417272
  3347 08:0512: F4 72 72     	pea	#<$61417272
  3348 08:0515: 18           	clc
  3349 08:0516: A9 13 02     	lda	#$213
  3350 08:0519: 65 0A        	adc	<L80+fs_0
  3351 08:051B: 85 01        	sta	<R0
  3352 08:051D: A9 00 00     	lda	#$0
  3353 08:0520: 65 0C        	adc	<L80+fs_0+2
  3354 08:0522: 85 03        	sta	<R0+2
  3355 08:0524: D4 03        	pei	<R0+2
  3356 08:0526: D4 01        	pei	<R0
  3357 08:0528: 22 16 01 08  	jsl	~~st_dword
  3358                        ;			st_dword(fs->win + FSI_Free_Coun
                    t, fs->free_clst);
  3359                        	.line	1153
  3360 08:052C: A0 11 00     	ldy	#$11
  3361 08:052F: B7 0A        	lda	[<L80+fs_0],Y
  3362 08:0531: 48           	pha
  3363 08:0532: A0 0F 00     	ldy	#$f
  3364 08:0535: B7 0A        	lda	[<L80+fs_0],Y
  3365 08:0537: 48           	pha
  3366 08:0538: 18           	clc
  3367 08:0539: A9 17 02     	lda	#$217
  3368 08:053C: 65 0A        	adc	<L80+fs_0
  3369 08:053E: 85 01        	sta	<R0
  3370 08:0540: A9 00 00     	lda	#$0
  3371 08:0543: 65 0C        	adc	<L80+fs_0+2
  3372 08:0545: 85 03        	sta	<R0+2
  Thu Dec  3 2020 22:25                                                Page 72


  3373 08:0547: D4 03        	pei	<R0+2
  3374 08:0549: D4 01        	pei	<R0
  3375 08:054B: 22 16 01 08  	jsl	~~st_dword
  3376                        ;			st_dword(fs->win + FSI_Nxt_Free,
                     fs->last_clst);
  3377                        	.line	1154
  3378 08:054F: A0 0D 00     	ldy	#$d
  3379 08:0552: B7 0A        	lda	[<L80+fs_0],Y
  3380 08:0554: 48           	pha
  3381 08:0555: A0 0B 00     	ldy	#$b
  3382 08:0558: B7 0A        	lda	[<L80+fs_0],Y
  3383 08:055A: 48           	pha
  3384 08:055B: 18           	clc
  3385 08:055C: A9 1B 02     	lda	#$21b
  3386 08:055F: 65 0A        	adc	<L80+fs_0
  3387 08:0561: 85 01        	sta	<R0
  3388 08:0563: A9 00 00     	lda	#$0
  3389 08:0566: 65 0C        	adc	<L80+fs_0+2
  3390 08:0568: 85 03        	sta	<R0+2
  3391 08:056A: D4 03        	pei	<R0+2
  3392 08:056C: D4 01        	pei	<R0
  3393 08:056E: 22 16 01 08  	jsl	~~st_dword
  3394                        ;			/* Write it into the FSInfo sect
                    or */
  3395                        ;			fs->winsect = fs->volbase + 1;
  3396                        	.line	1156
  3397 08:0572: 18           	clc
  3398 08:0573: A9 01 00     	lda	#$1
  3399 08:0576: A0 1B 00     	ldy	#$1b
  3400 08:0579: 77 0A        	adc	[<L80+fs_0],Y
  3401 08:057B: 85 01        	sta	<R0
  3402 08:057D: A9 00 00     	lda	#$0
  3403 08:0580: A0 1D 00     	ldy	#$1d
  3404 08:0583: 77 0A        	adc	[<L80+fs_0],Y
  3405 08:0585: 85 03        	sta	<R0+2
  3406 08:0587: A5 01        	lda	<R0
  3407 08:0589: A0 2B 00     	ldy	#$2b
  3408 08:058C: 97 0A        	sta	[<L80+fs_0],Y
  3409 08:058E: A5 03        	lda	<R0+2
  3410 08:0590: A0 2D 00     	ldy	#$2d
  3411 08:0593: 97 0A        	sta	[<L80+fs_0],Y
  3412                        ;			disk_write(fs->pdrv, fs->win, fs
                    ->winsect, 1);
  3413                        	.line	1157
  3414 08:0595: F4 01 00     	pea	#<$1
  3415 08:0598: A0 2D 00     	ldy	#$2d
  3416 08:059B: B7 0A        	lda	[<L80+fs_0],Y
  3417 08:059D: 48           	pha
  3418 08:059E: A0 2B 00     	ldy	#$2b
  3419 08:05A1: B7 0A        	lda	[<L80+fs_0],Y
  3420 08:05A3: 48           	pha
  3421 08:05A4: 18           	clc
  3422 08:05A5: A9 2F 00     	lda	#$2f
  3423 08:05A8: 65 0A        	adc	<L80+fs_0
  3424 08:05AA: 85 01        	sta	<R0
  3425 08:05AC: A9 00 00     	lda	#$0
  3426 08:05AF: 65 0C        	adc	<L80+fs_0+2
  3427 08:05B1: 85 03        	sta	<R0+2
  Thu Dec  3 2020 22:25                                                Page 73


  3428 08:05B3: D4 03        	pei	<R0+2
  3429 08:05B5: D4 01        	pei	<R0
  3430 08:05B7: A0 01 00     	ldy	#$1
  3431 08:05BA: B7 0A        	lda	[<L80+fs_0],Y
  3432 08:05BC: 48           	pha
  3433 08:05BD: 22 xx xx xx  	jsl	~~disk_write
  3434                        ;			fs->fsi_flag = 0;
  3435                        	.line	1158
  3436 08:05C1: E2 20        	sep	#$20
  3437                        	longa	off
  3438 08:05C3: A9 00        	lda	#$0
  3439 08:05C5: A0 04 00     	ldy	#$4
  3440 08:05C8: 97 0A        	sta	[<L80+fs_0],Y
  3441 08:05CA: C2 20        	rep	#$20
  3442                        	longa	on
  3443                        ;		}
  3444                        	.line	1159
  3445                        ;		/* Make sure that no pending write proce
                    ss in the lower layer */
  3446                        ;		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) !
                    = RES_OK) res = FR_DISK_ERR;
  3447                        L10024:
  3448                        	.line	1161
  3449 08:05CC: F4 00 00     	pea	#^$0
  3450 08:05CF: F4 00 00     	pea	#<$0
  3451 08:05D2: F4 00 00     	pea	#<$0
  3452 08:05D5: A0 01 00     	ldy	#$1
  3453 08:05D8: B7 0A        	lda	[<L80+fs_0],Y
  3454 08:05DA: 48           	pha
  3455 08:05DB: 22 xx xx xx  	jsl	~~disk_ioctl
  3456 08:05DF: AA           	tax
  3457 08:05E0: D0 03        	bne	L86
  3458 08:05E2: 82 05 00     	brl	L10025
  3459                        L86:
  3460                        	.line	1161
  3461 08:05E5: A9 01 00     	lda	#$1
  3462 08:05E8: 85 05        	sta	<L81+res_1
  3463                        ;	}
  3464                        L10025:
  3465                        	.line	1162
  3466                        ;
  3467                        ;	return res;
  3468                        L10023:
  3469                        	.line	1164
  3470 08:05EA: A5 05        	lda	<L81+res_1
  3471                        L87:
  3472 08:05EC: A8           	tay
  3473 08:05ED: A5 08        	lda	<L80+2
  3474 08:05EF: 85 0C        	sta	<L80+2+4
  3475 08:05F1: A5 07        	lda	<L80+1
  3476 08:05F3: 85 0B        	sta	<L80+1+4
  3477 08:05F5: 2B           	pld
  3478 08:05F6: 3B           	tsc
  3479 08:05F7: 18           	clc
  3480 08:05F8: 69 0A 00     	adc	#L80+4
  3481 08:05FB: 1B           	tcs
  3482 08:05FC: 98           	tya
  3483 08:05FD: 6B           	rtl
  Thu Dec  3 2020 22:25                                                Page 74


  3484                        ;}
  3485                        	.line	1165
  3486                        	.endblock	1165
  3487             00000006   L80	equ	6
  3488             00000005   L81	equ	5
  3489 08:05FE:              	ends
  3490                        	efunc
  3491                        	.endfunc	1165,5,6
  3492                        	.line	1165
  3493                        ;
  3494                        ;#endif
  3495                        ;
  3496                        ;
  3497                        ;
  3498                        ;/*-----------------------------------------------
                    ------------------------*/
  3499                        ;/* Get physical sector number from cluster number
                                            */
  3500                        ;/*-----------------------------------------------
                    ------------------------*/
  3501                        ;
  3502                        ;static LBA_t clst2sect (	/* !=0:Sector number, 0:
                    Failed (invalid cluster#) */
  3503                        ;	FATFS* fs,		/* Filesystem object */
  3504                        ;	DWORD clst		/* Cluster# to be conver
                    ted */
  3505                        ;)
  3506                        ;{
  3507                        	.line	1175
  3508                        	.line	1179
  3509                        	FFDOS
  3510                        	func
  3511                        	.function	1179
  3512                        ~~clst2sect:
  3513                        	longa	on
  3514                        	longi	on
  3515 08:05FE: 3B           	tsc
  3516 08:05FF: 38           	sec
  3517 08:0600: E9 08 00     	sbc	#L88
  3518 08:0603: 1B           	tcs
  3519 08:0604: 0B           	phd
  3520 08:0605: 5B           	tcd
  3521             00000004   fs_0	set	4
  3522             00000008   clst_0	set	8
  3523                        	.block	1179
  3524                        ;	clst -= 2;		/* Cluster number is ori
                    gin from 2 */
  3525                        	.sym	fs,4,138,6,32,80
  3526                        	.sym	clst,8,18,6,32
  3527                        	.line	1180
  3528 08:0606: 18           	clc
  3529 08:0607: A9 FE FF     	lda	#$fffe
  3530 08:060A: 65 10        	adc	<L88+clst_0
  3531 08:060C: 85 10        	sta	<L88+clst_0
  3532 08:060E: A9 FF FF     	lda	#$ffff
  3533 08:0611: 65 12        	adc	<L88+clst_0+2
  3534 08:0613: 85 12        	sta	<L88+clst_0+2
  3535                        ;	if (clst >= fs->n_fatent - 2) return 0;		
  Thu Dec  3 2020 22:25                                                Page 75


                    /* Is it invalid cluster number? */
  3536                        	.line	1181
  3537 08:0615: 18           	clc
  3538 08:0616: A9 FE FF     	lda	#$fffe
  3539 08:0619: A0 13 00     	ldy	#$13
  3540 08:061C: 77 0C        	adc	[<L88+fs_0],Y
  3541 08:061E: 85 01        	sta	<R0
  3542 08:0620: A9 FF FF     	lda	#$ffff
  3543 08:0623: A0 15 00     	ldy	#$15
  3544 08:0626: 77 0C        	adc	[<L88+fs_0],Y
  3545 08:0628: 85 03        	sta	<R0+2
  3546 08:062A: A5 10        	lda	<L88+clst_0
  3547 08:062C: C5 01        	cmp	<R0
  3548 08:062E: A5 12        	lda	<L88+clst_0+2
  3549 08:0630: E5 03        	sbc	<R0+2
  3550 08:0632: B0 03        	bcs	L91
  3551 08:0634: 82 19 00     	brl	L10026
  3552                        L91:
  3553                        	.line	1181
  3554 08:0637: A9 00 00     	lda	#$0
  3555 08:063A: AA           	tax
  3556 08:063B: A9 00 00     	lda	#$0
  3557                        L92:
  3558 08:063E: A8           	tay
  3559 08:063F: A5 0A        	lda	<L88+2
  3560 08:0641: 85 12        	sta	<L88+2+8
  3561 08:0643: A5 09        	lda	<L88+1
  3562 08:0645: 85 11        	sta	<L88+1+8
  3563 08:0647: 2B           	pld
  3564 08:0648: 3B           	tsc
  3565 08:0649: 18           	clc
  3566 08:064A: 69 10 00     	adc	#L88+8
  3567 08:064D: 1B           	tcs
  3568 08:064E: 98           	tya
  3569 08:064F: 6B           	rtl
  3570                        ;	return fs->database + (LBA_t)fs->csize * clst;	
                    /* Start sector number of the cluster */
  3571                        L10026:
  3572                        	.line	1182
  3573 08:0650: A0 00 00     	ldy	#$0
  3574 08:0653: 5A           	phy
  3575 08:0654: A0 09 00     	ldy	#$9
  3576 08:0657: B7 0C        	lda	[<L88+fs_0],Y
  3577 08:0659: 7A           	ply
  3578 08:065A: 2A           	rol	A
  3579 08:065B: 6A           	ror	A
  3580 08:065C: 10 01        	bpl	L93
  3581 08:065E: 88           	dey
  3582                        L93:
  3583 08:065F: 85 01        	sta	<R0
  3584 08:0661: 84 03        	sty	<R0+2
  3585 08:0663: D4 12        	pei	<L88+clst_0+2
  3586 08:0665: D4 10        	pei	<L88+clst_0
  3587 08:0667: D4 03        	pei	<R0+2
  3588 08:0669: D4 01        	pei	<R0
  3589                        	xref	~~~lmul
  3590 08:066B: 22 xx xx xx  	jsl	~~~lmul
  3591 08:066F: 85 01        	sta	<R0
  Thu Dec  3 2020 22:25                                                Page 76


  3592 08:0671: 86 03        	stx	<R0+2
  3593 08:0673: 18           	clc
  3594 08:0674: A5 01        	lda	<R0
  3595 08:0676: A0 27 00     	ldy	#$27
  3596 08:0679: 77 0C        	adc	[<L88+fs_0],Y
  3597 08:067B: 85 05        	sta	<R1
  3598 08:067D: A5 03        	lda	<R0+2
  3599 08:067F: A0 29 00     	ldy	#$29
  3600 08:0682: 77 0C        	adc	[<L88+fs_0],Y
  3601 08:0684: 85 07        	sta	<R1+2
  3602 08:0686: A6 07        	ldx	<R1+2
  3603 08:0688: A5 05        	lda	<R1
  3604 08:068A: 82 B1 FF     	brl	L92
  3605                        ;}
  3606                        	.line	1183
  3607                        	.endblock	1183
  3608             00000008   L88	equ	8
  3609             00000009   L89	equ	9
  3610 08:068D:              	ends
  3611                        	efunc
  3612                        	.endfunc	1183,9,8
  3613                        	.line	1183
  3614                        ;
  3615                        ;
  3616                        ;
  3617                        ;
  3618                        ;/*-----------------------------------------------
                    ------------------------*/
  3619                        ;/* FAT access - Read value of a FAT entry        
                                            */
  3620                        ;/*-----------------------------------------------
                    ------------------------*/
  3621                        ;
  3622                        ;static DWORD get_fat (		/* 0xFFFFFFFF:Di
                    sk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
  3623                        ;	FFOBJID* obj,	/* Corresponding object */
  3624                        ;	DWORD clst		/* Cluster number to get
                     the value */
  3625                        ;)
  3626                        ;{
  3627                        	.line	1192
  3628                        	.line	1196
  3629                        	FFDOS
  3630                        	func
  3631                        	.function	1196
  3632                        ~~get_fat:
  3633                        	longa	on
  3634                        	longi	on
  3635 08:068D: 3B           	tsc
  3636 08:068E: 38           	sec
  3637 08:068F: E9 18 00     	sbc	#L94
  3638 08:0692: 1B           	tcs
  3639 08:0693: 0B           	phd
  3640 08:0694: 5B           	tcd
  3641             00000004   obj_0	set	4
  3642             00000008   clst_0	set	8
  3643                        	.block	1196
  3644                        ;	UINT wc, bc;
  Thu Dec  3 2020 22:25                                                Page 77


  3645                        ;	DWORD val;
  3646                        ;	FATFS *fs = obj->fs;
  3647                        ;
  3648                        ;
  3649                        ;	if (clst < 2 || clst >= fs->n_fatent) {	/* Check
                     if in valid range */
  3650             00000000   wc_1	set	0
  3651             00000002   bc_1	set	2
  3652             00000004   val_1	set	4
  3653             00000008   fs_1	set	8
  3654                        	.sym	wc,0,16,1,16
  3655                        	.sym	bc,2,16,1,16
  3656                        	.sym	val,4,18,1,32
  3657                        	.sym	fs,8,138,1,32,80
  3658                        	.sym	obj,4,138,6,32,81
  3659                        	.sym	clst,8,18,6,32
  3660 08:0695: A7 1C        	lda	[<L94+obj_0]
  3661 08:0697: 85 15        	sta	<L95+fs_1
  3662 08:0699: A0 02 00     	ldy	#$2
  3663 08:069C: B7 1C        	lda	[<L94+obj_0],Y
  3664 08:069E: 85 17        	sta	<L95+fs_1+2
  3665                        	.line	1202
  3666 08:06A0: A5 20        	lda	<L94+clst_0
  3667 08:06A2: C9 02 00     	cmp	#<$2
  3668 08:06A5: A5 22        	lda	<L94+clst_0+2
  3669 08:06A7: E9 00 00     	sbc	#^$2
  3670 08:06AA: B0 03        	bcs	L98
  3671 08:06AC: 82 13 00     	brl	L97
  3672                        L98:
  3673 08:06AF: A5 20        	lda	<L94+clst_0
  3674 08:06B1: A0 13 00     	ldy	#$13
  3675 08:06B4: D7 15        	cmp	[<L95+fs_1],Y
  3676 08:06B6: A5 22        	lda	<L94+clst_0+2
  3677 08:06B8: A0 15 00     	ldy	#$15
  3678 08:06BB: F7 15        	sbc	[<L95+fs_1],Y
  3679 08:06BD: B0 03        	bcs	L99
  3680 08:06BF: 82 0D 00     	brl	L10027
  3681                        L99:
  3682                        L97:
  3683                        	.line	1202
  3684                        ;		val = 1;	/* Internal error */
  3685                        	.line	1203
  3686 08:06C2: A9 01 00     	lda	#$1
  3687 08:06C5: 85 11        	sta	<L95+val_1
  3688 08:06C7: A9 00 00     	lda	#$0
  3689 08:06CA: 85 13        	sta	<L95+val_1+2
  3690                        ;
  3691                        ;	} else {
  3692                        	.line	1205
  3693 08:06CC: 82 18 02     	brl	L10028
  3694                        L10027:
  3695                        	.line	1205
  3696                        ;		val = 0xFFFFFFFF;	/* Default value
                     falls on disk error */
  3697                        	.line	1206
  3698 08:06CF: A9 FF FF     	lda	#$ffff
  3699 08:06D2: 85 11        	sta	<L95+val_1
  3700 08:06D4: A9 FF FF     	lda	#$ffff
  Thu Dec  3 2020 22:25                                                Page 78


  3701 08:06D7: 85 13        	sta	<L95+val_1+2
  3702                        ;
  3703                        ;		switch (fs->fs_type) {
  3704                        	.line	1208
  3705 08:06D9: A7 15        	lda	[<L95+fs_1]
  3706 08:06DB: 29 FF 00     	and	#$ff
  3707 08:06DE: 82 F2 01     	brl	L10029
  3708                        	.line	1208
  3709                        ;		case FS_FAT12 :
  3710                        	.line	1209
  3711                        L10031:
  3712                        ;			bc = (UINT)clst; bc += bc / 2;
  3713                        	.line	1210
  3714 08:06E1: A5 20        	lda	<L94+clst_0
  3715 08:06E3: 85 0F        	sta	<L95+bc_1
  3716                        	.line	1210
  3717 08:06E5: A5 0F        	lda	<L95+bc_1
  3718 08:06E7: 4A           	lsr	A
  3719 08:06E8: 85 01        	sta	<R0
  3720 08:06EA: 18           	clc
  3721 08:06EB: A5 01        	lda	<R0
  3722 08:06ED: 65 0F        	adc	<L95+bc_1
  3723 08:06EF: 85 0F        	sta	<L95+bc_1
  3724                        ;			if (move_window(fs, fs->fatbase 
                    + (bc / SS(fs))) != FR_OK) break;
  3725                        	.line	1211
  3726 08:06F1: A5 0F        	lda	<L95+bc_1
  3727 08:06F3: A2 09 00     	ldx	#<$9
  3728                        	xref	~~~lsr
  3729 08:06F6: 22 xx xx xx  	jsl	~~~lsr
  3730 08:06FA: 85 01        	sta	<R0
  3731 08:06FC: A5 01        	lda	<R0
  3732 08:06FE: 85 01        	sta	<R0
  3733 08:0700: 64 03        	stz	<R0+2
  3734 08:0702: 18           	clc
  3735 08:0703: A5 01        	lda	<R0
  3736 08:0705: A0 1F 00     	ldy	#$1f
  3737 08:0708: 77 15        	adc	[<L95+fs_1],Y
  3738 08:070A: 85 05        	sta	<R1
  3739 08:070C: A5 03        	lda	<R0+2
  3740 08:070E: A0 21 00     	ldy	#$21
  3741 08:0711: 77 15        	adc	[<L95+fs_1],Y
  3742 08:0713: 85 07        	sta	<R1+2
  3743 08:0715: D4 07        	pei	<R1+2
  3744 08:0717: D4 05        	pei	<R1
  3745 08:0719: D4 17        	pei	<L95+fs_1+2
  3746 08:071B: D4 15        	pei	<L95+fs_1
  3747 08:071D: 22 FA 03 08  	jsl	~~move_window
  3748 08:0721: AA           	tax
  3749 08:0722: F0 03        	beq	L100
  3750 08:0724: 82 C0 01     	brl	L10030
  3751                        L100:
  3752                        ;			wc = fs->win[bc++ % SS(fs)];	
                    	/* Get 1st byte of the entry */
  3753                        	.line	1212
  3754 08:0727: A5 0F        	lda	<L95+bc_1
  3755 08:0729: 29 FF 01     	and	#<$1ff
  3756 08:072C: 85 01        	sta	<R0
  Thu Dec  3 2020 22:25                                                Page 79


  3757 08:072E: 18           	clc
  3758 08:072F: A9 2F 00     	lda	#$2f
  3759 08:0732: 65 01        	adc	<R0
  3760 08:0734: 85 05        	sta	<R1
  3761 08:0736: A4 05        	ldy	<R1
  3762 08:0738: B7 15        	lda	[<L95+fs_1],Y
  3763 08:073A: 29 FF 00     	and	#$ff
  3764 08:073D: 85 0D        	sta	<L95+wc_1
  3765 08:073F: E6 0F        	inc	<L95+bc_1
  3766                        ;			if (move_window(fs, fs->fatbase 
                    + (bc / SS(fs))) != FR_OK) break;
  3767                        	.line	1213
  3768 08:0741: A5 0F        	lda	<L95+bc_1
  3769 08:0743: A2 09 00     	ldx	#<$9
  3770                        	xref	~~~lsr
  3771 08:0746: 22 xx xx xx  	jsl	~~~lsr
  3772 08:074A: 85 01        	sta	<R0
  3773 08:074C: A5 01        	lda	<R0
  3774 08:074E: 85 01        	sta	<R0
  3775 08:0750: 64 03        	stz	<R0+2
  3776 08:0752: 18           	clc
  3777 08:0753: A5 01        	lda	<R0
  3778 08:0755: A0 1F 00     	ldy	#$1f
  3779 08:0758: 77 15        	adc	[<L95+fs_1],Y
  3780 08:075A: 85 05        	sta	<R1
  3781 08:075C: A5 03        	lda	<R0+2
  3782 08:075E: A0 21 00     	ldy	#$21
  3783 08:0761: 77 15        	adc	[<L95+fs_1],Y
  3784 08:0763: 85 07        	sta	<R1+2
  3785 08:0765: D4 07        	pei	<R1+2
  3786 08:0767: D4 05        	pei	<R1
  3787 08:0769: D4 17        	pei	<L95+fs_1+2
  3788 08:076B: D4 15        	pei	<L95+fs_1
  3789 08:076D: 22 FA 03 08  	jsl	~~move_window
  3790 08:0771: AA           	tax
  3791 08:0772: F0 03        	beq	L101
  3792 08:0774: 82 70 01     	brl	L10030
  3793                        L101:
  3794                        ;			wc |= fs->win[bc % SS(fs)] << 8;
                    	/* Merge 2nd byte of the entry */
  3795                        	.line	1214
  3796 08:0777: A5 0F        	lda	<L95+bc_1
  3797 08:0779: 29 FF 01     	and	#<$1ff
  3798 08:077C: 85 05        	sta	<R1
  3799 08:077E: 18           	clc
  3800 08:077F: A9 2F 00     	lda	#$2f
  3801 08:0782: 65 05        	adc	<R1
  3802 08:0784: 85 09        	sta	<R2
  3803 08:0786: A4 09        	ldy	<R2
  3804 08:0788: B7 15        	lda	[<L95+fs_1],Y
  3805 08:078A: 29 FF 00     	and	#$ff
  3806 08:078D: 85 05        	sta	<R1
  3807 08:078F: A5 05        	lda	<R1
  3808 08:0791: EB           	xba
  3809 08:0792: 29 00 FF     	and	#$ff00
  3810 08:0795: 85 01        	sta	<R0
  3811 08:0797: A5 01        	lda	<R0
  3812 08:0799: 04 0D        	tsb	<L95+wc_1
  Thu Dec  3 2020 22:25                                                Page 80


  3813                        ;			val = (clst & 1) ? (wc >> 4) : (
                    wc & 0xFFF);	/* Adjust bit position */
  3814                        	.line	1215
  3815 08:079B: A5 20        	lda	<L94+clst_0
  3816 08:079D: 29 01 00     	and	#<$1
  3817 08:07A0: D0 03        	bne	L103
  3818 08:07A2: 82 0C 00     	brl	L102
  3819                        L103:
  3820 08:07A5: A5 0D        	lda	<L95+wc_1
  3821 08:07A7: 4A           	lsr	A
  3822 08:07A8: 4A           	lsr	A
  3823 08:07A9: 4A           	lsr	A
  3824 08:07AA: 4A           	lsr	A
  3825 08:07AB: 85 01        	sta	<R0
  3826 08:07AD: A5 01        	lda	<R0
  3827 08:07AF: 80 09        	bra	L104
  3828                        L102:
  3829 08:07B1: A5 0D        	lda	<L95+wc_1
  3830 08:07B3: 29 FF 0F     	and	#<$fff
  3831 08:07B6: 85 01        	sta	<R0
  3832 08:07B8: A5 01        	lda	<R0
  3833                        L104:
  3834 08:07BA: 85 01        	sta	<R0
  3835 08:07BC: A5 01        	lda	<R0
  3836 08:07BE: 85 11        	sta	<L95+val_1
  3837 08:07C0: 64 13        	stz	<L95+val_1+2
  3838                        ;			break;
  3839                        	.line	1216
  3840 08:07C2: 82 22 01     	brl	L10030
  3841                        ;
  3842                        ;		case FS_FAT16 :
  3843                        	.line	1218
  3844                        L10032:
  3845                        ;			if (move_window(fs, fs->fatbase 
                    + (clst / (SS(fs) / 2))) != FR_OK) break;
  3846                        	.line	1219
  3847 08:07C5: D4 22        	pei	<L94+clst_0+2
  3848 08:07C7: D4 20        	pei	<L94+clst_0
  3849 08:07C9: A9 08 00     	lda	#$8
  3850                        	xref	~~~llsr
  3851 08:07CC: 22 xx xx xx  	jsl	~~~llsr
  3852 08:07D0: 85 01        	sta	<R0
  3853 08:07D2: 86 03        	stx	<R0+2
  3854 08:07D4: 18           	clc
  3855 08:07D5: A5 01        	lda	<R0
  3856 08:07D7: A0 1F 00     	ldy	#$1f
  3857 08:07DA: 77 15        	adc	[<L95+fs_1],Y
  3858 08:07DC: 85 05        	sta	<R1
  3859 08:07DE: A5 03        	lda	<R0+2
  3860 08:07E0: A0 21 00     	ldy	#$21
  3861 08:07E3: 77 15        	adc	[<L95+fs_1],Y
  3862 08:07E5: 85 07        	sta	<R1+2
  3863 08:07E7: D4 07        	pei	<R1+2
  3864 08:07E9: D4 05        	pei	<R1
  3865 08:07EB: D4 17        	pei	<L95+fs_1+2
  3866 08:07ED: D4 15        	pei	<L95+fs_1
  3867 08:07EF: 22 FA 03 08  	jsl	~~move_window
  3868 08:07F3: AA           	tax
  Thu Dec  3 2020 22:25                                                Page 81


  3869 08:07F4: F0 03        	beq	L105
  3870 08:07F6: 82 EE 00     	brl	L10030
  3871                        L105:
  3872                        ;			val = ld_word(fs->win + clst * 2
                     % SS(fs));		/* Simple WORD array */
  3873                        	.line	1220
  3874 08:07F9: A5 20        	lda	<L94+clst_0
  3875 08:07FB: 85 01        	sta	<R0
  3876 08:07FD: A5 22        	lda	<L94+clst_0+2
  3877 08:07FF: 85 03        	sta	<R0+2
  3878 08:0801: 06 01        	asl	<R0
  3879 08:0803: 26 03        	rol	<R0+2
  3880 08:0805: A5 01        	lda	<R0
  3881 08:0807: 29 FF 01     	and	#<$1ff
  3882 08:080A: 85 05        	sta	<R1
  3883 08:080C: 64 07        	stz	<R1+2
  3884 08:080E: 18           	clc
  3885 08:080F: A9 2F 00     	lda	#$2f
  3886 08:0812: 65 05        	adc	<R1
  3887 08:0814: 85 01        	sta	<R0
  3888 08:0816: A9 00 00     	lda	#$0
  3889 08:0819: 65 07        	adc	<R1+2
  3890 08:081B: 85 03        	sta	<R0+2
  3891 08:081D: 18           	clc
  3892 08:081E: A5 15        	lda	<L95+fs_1
  3893 08:0820: 65 01        	adc	<R0
  3894 08:0822: 85 05        	sta	<R1
  3895 08:0824: A5 17        	lda	<L95+fs_1+2
  3896 08:0826: 65 03        	adc	<R0+2
  3897 08:0828: 85 07        	sta	<R1+2
  3898 08:082A: D4 07        	pei	<R1+2
  3899 08:082C: D4 05        	pei	<R1
  3900 08:082E: 22 00 00 08  	jsl	~~ld_word
  3901 08:0832: 85 09        	sta	<R2
  3902 08:0834: A0 00 00     	ldy	#$0
  3903 08:0837: A5 09        	lda	<R2
  3904 08:0839: 10 01        	bpl	L106
  3905 08:083B: 88           	dey
  3906                        L106:
  3907 08:083C: 85 11        	sta	<L95+val_1
  3908 08:083E: 84 13        	sty	<L95+val_1+2
  3909                        ;			break;
  3910                        	.line	1221
  3911 08:0840: 82 A4 00     	brl	L10030
  3912                        ;
  3913                        ;		case FS_FAT32 :
  3914                        	.line	1223
  3915                        L10033:
  3916                        ;			if (move_window(fs, fs->fatbase 
                    + (clst / (SS(fs) / 4))) != FR_OK) break;
  3917                        	.line	1224
  3918 08:0843: D4 22        	pei	<L94+clst_0+2
  3919 08:0845: D4 20        	pei	<L94+clst_0
  3920 08:0847: A9 07 00     	lda	#$7
  3921                        	xref	~~~llsr
  3922 08:084A: 22 xx xx xx  	jsl	~~~llsr
  3923 08:084E: 85 01        	sta	<R0
  3924 08:0850: 86 03        	stx	<R0+2
  Thu Dec  3 2020 22:25                                                Page 82


  3925 08:0852: 18           	clc
  3926 08:0853: A5 01        	lda	<R0
  3927 08:0855: A0 1F 00     	ldy	#$1f
  3928 08:0858: 77 15        	adc	[<L95+fs_1],Y
  3929 08:085A: 85 05        	sta	<R1
  3930 08:085C: A5 03        	lda	<R0+2
  3931 08:085E: A0 21 00     	ldy	#$21
  3932 08:0861: 77 15        	adc	[<L95+fs_1],Y
  3933 08:0863: 85 07        	sta	<R1+2
  3934 08:0865: D4 07        	pei	<R1+2
  3935 08:0867: D4 05        	pei	<R1
  3936 08:0869: D4 17        	pei	<L95+fs_1+2
  3937 08:086B: D4 15        	pei	<L95+fs_1
  3938 08:086D: 22 FA 03 08  	jsl	~~move_window
  3939 08:0871: AA           	tax
  3940 08:0872: F0 03        	beq	L107
  3941 08:0874: 82 70 00     	brl	L10030
  3942                        L107:
  3943                        ;			val = ld_dword(fs->win + clst * 
                    4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask o
                    ut upper 4 bits */
  3944                        	.line	1225
  3945 08:0877: A5 20        	lda	<L94+clst_0
  3946 08:0879: 85 01        	sta	<R0
  3947 08:087B: A5 22        	lda	<L94+clst_0+2
  3948 08:087D: 85 03        	sta	<R0+2
  3949 08:087F: 06 01        	asl	<R0
  3950 08:0881: 26 03        	rol	<R0+2
  3951 08:0883: 06 01        	asl	<R0
  3952 08:0885: 26 03        	rol	<R0+2
  3953 08:0887: A5 01        	lda	<R0
  3954 08:0889: 29 FF 01     	and	#<$1ff
  3955 08:088C: 85 05        	sta	<R1
  3956 08:088E: 64 07        	stz	<R1+2
  3957 08:0890: 18           	clc
  3958 08:0891: A9 2F 00     	lda	#$2f
  3959 08:0894: 65 05        	adc	<R1
  3960 08:0896: 85 01        	sta	<R0
  3961 08:0898: A9 00 00     	lda	#$0
  3962 08:089B: 65 07        	adc	<R1+2
  3963 08:089D: 85 03        	sta	<R0+2
  3964 08:089F: 18           	clc
  3965 08:08A0: A5 15        	lda	<L95+fs_1
  3966 08:08A2: 65 01        	adc	<R0
  3967 08:08A4: 85 05        	sta	<R1
  3968 08:08A6: A5 17        	lda	<L95+fs_1+2
  3969 08:08A8: 65 03        	adc	<R0+2
  3970 08:08AA: 85 07        	sta	<R1+2
  3971 08:08AC: D4 07        	pei	<R1+2
  3972 08:08AE: D4 05        	pei	<R1
  3973 08:08B0: 22 3B 00 08  	jsl	~~ld_dword
  3974 08:08B4: 85 09        	sta	<R2
  3975 08:08B6: 86 0B        	stx	<R2+2
  3976 08:08B8: A5 09        	lda	<R2
  3977 08:08BA: 85 11        	sta	<L95+val_1
  3978 08:08BC: A5 0B        	lda	<R2+2
  3979 08:08BE: 29 FF 0F     	and	#^$fffffff
  3980 08:08C1: 85 13        	sta	<L95+val_1+2
  Thu Dec  3 2020 22:25                                                Page 83


  3981                        ;			break;
  3982                        	.line	1226
  3983 08:08C3: 82 21 00     	brl	L10030
  3984                        ;#if FF_FS_EXFAT
  3985                        ;		case FS_EXFAT :
  3986                        ;			if ((obj->objsize != 0 && obj->s
                    clust != 0) || obj->stat == 0) {	/* Object except root di
                    r must have valid data length */
  3987                        ;				DWORD cofs = clst - obj-
                    >sclust;	/* Offset from start cluster */
  3988                        ;				DWORD clen = (DWORD)((LB
                    A_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Numbe
                    r of clusters - 1 */
  3989                        ;
  3990                        ;				if (obj->stat == 2 && co
                    fs <= clen) {	/* Is it a contiguous chain? */
  3991                        ;					val = (cofs == c
                    len) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, g
                    enerate the value */
  3992                        ;					break;
  3993                        ;				}
  3994                        ;				if (obj->stat == 3 && co
                    fs < obj->n_cont) {	/* Is it in the 1st fragment? */
  3995                        ;					val = clst + 1; 
                    	/* Generate the value */
  3996                        ;					break;
  3997                        ;				}
  3998                        ;				if (obj->stat != 2) {	
                    /* Get value from FAT if FAT chain is valid */
  3999                        ;					if (obj->n_frag 
                    != 0) {	/* Is it on the growing edge? */
  4000                        ;						val = 0x
                    7FFFFFFF;	/* Generate EOC */
  4001                        ;					} else {
  4002                        ;						if (move
                    _window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) b
                    reak;
  4003                        ;						val = ld
                    _dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
  4004                        ;					}
  4005                        ;					break;
  4006                        ;				}
  4007                        ;			}
  4008                        ;			/* go to default */
  4009                        ;#endif
  4010                        ;		default:
  4011                        	.line	1253
  4012                        L10034:
  4013                        ;			val = 1;	/* Internal erro
                    r */
  4014                        	.line	1254
  4015 08:08C6: A9 01 00     	lda	#$1
  4016 08:08C9: 85 11        	sta	<L95+val_1
  4017 08:08CB: A9 00 00     	lda	#$0
  4018 08:08CE: 85 13        	sta	<L95+val_1+2
  4019                        ;		}
  4020                        	.line	1255
  4021 08:08D0: 82 14 00     	brl	L10030
  Thu Dec  3 2020 22:25                                                Page 84


  4022                        L10029:
  4023                        	xref	~~~swt
  4024 08:08D3: 22 xx xx xx  	jsl	~~~swt
  4025 08:08D7: 03 00        	dw	3
  4026 08:08D9: 01 00        	dw	1
  4027 08:08DB: E0 06        	dw	L10031-1
  4028 08:08DD: 02 00        	dw	2
  4029 08:08DF: C4 07        	dw	L10032-1
  4030 08:08E1: 03 00        	dw	3
  4031 08:08E3: 42 08        	dw	L10033-1
  4032 08:08E5: C5 08        	dw	L10034-1
  4033                        L10030:
  4034                        ;	}
  4035                        	.line	1256
  4036                        L10028:
  4037                        ;
  4038                        ;	return val;
  4039                        	.line	1258
  4040 08:08E7: A6 13        	ldx	<L95+val_1+2
  4041 08:08E9: A5 11        	lda	<L95+val_1
  4042                        L108:
  4043 08:08EB: A8           	tay
  4044 08:08EC: A5 1A        	lda	<L94+2
  4045 08:08EE: 85 22        	sta	<L94+2+8
  4046 08:08F0: A5 19        	lda	<L94+1
  4047 08:08F2: 85 21        	sta	<L94+1+8
  4048 08:08F4: 2B           	pld
  4049 08:08F5: 3B           	tsc
  4050 08:08F6: 18           	clc
  4051 08:08F7: 69 20 00     	adc	#L94+8
  4052 08:08FA: 1B           	tcs
  4053 08:08FB: 98           	tya
  4054 08:08FC: 6B           	rtl
  4055                        ;}
  4056                        	.line	1259
  4057                        	.endblock	1259
  4058             00000018   L94	equ	24
  4059             0000000D   L95	equ	13
  4060 08:08FD:              	ends
  4061                        	efunc
  4062                        	.endfunc	1259,13,24
  4063                        	.line	1259
  4064                        ;
  4065                        ;
  4066                        ;
  4067                        ;
  4068                        ;#if !FF_FS_READONLY
  4069                        ;/*-----------------------------------------------
                    ------------------------*/
  4070                        ;/* FAT access - Change value of a FAT entry      
                                            */
  4071                        ;/*-----------------------------------------------
                    ------------------------*/
  4072                        ;
  4073                        ;static FRESULT put_fat (	/* FR_OK(0):succeeded, !
                    =0:error */
  4074                        ;	FATFS* fs,		/* Corresponding filesys
                    tem object */
  Thu Dec  3 2020 22:25                                                Page 85


  4075                        ;	DWORD clst,		/* FAT index number (clu
                    ster number) to be changed */
  4076                        ;	DWORD val		/* New value to be set t
                    o the entry */
  4077                        ;)
  4078                        ;{
  4079                        	.line	1269
  4080                        	.line	1274
  4081                        	FFDOS
  4082                        	func
  4083                        	.function	1274
  4084                        ~~put_fat:
  4085                        	longa	on
  4086                        	longi	on
  4087 08:08FD: 3B           	tsc
  4088 08:08FE: 38           	sec
  4089 08:08FF: E9 18 00     	sbc	#L109
  4090 08:0902: 1B           	tcs
  4091 08:0903: 0B           	phd
  4092 08:0904: 5B           	tcd
  4093             00000004   fs_0	set	4
  4094             00000008   clst_0	set	8
  4095             0000000C   val_0	set	12
  4096                        	.block	1274
  4097                        ;	UINT bc;
  4098                        ;	BYTE *p;
  4099                        ;	FRESULT res = FR_INT_ERR;
  4100                        ;
  4101                        ;
  4102                        ;	if (clst >= 2 && clst < fs->n_fatent) {	/* Check
                     if in valid range */
  4103             00000000   bc_1	set	0
  4104             00000002   p_1	set	2
  4105             00000006   res_1	set	6
  4106                        	.sym	bc,0,16,1,16
  4107                        	.sym	p,2,142,1,32
  4108                        	.sym	res,6,5,1,16
  4109                        	.sym	fs,4,138,6,32,80
  4110                        	.sym	clst,8,18,6,32
  4111                        	.sym	val,12,18,6,32
  4112 08:0905: A9 02 00     	lda	#$2
  4113 08:0908: 85 17        	sta	<L110+res_1
  4114                        	.line	1280
  4115 08:090A: A5 20        	lda	<L109+clst_0
  4116 08:090C: C9 02 00     	cmp	#<$2
  4117 08:090F: A5 22        	lda	<L109+clst_0+2
  4118 08:0911: E9 00 00     	sbc	#^$2
  4119 08:0914: B0 03        	bcs	L112
  4120 08:0916: 82 16 03     	brl	L10035
  4121                        L112:
  4122 08:0919: A5 20        	lda	<L109+clst_0
  4123 08:091B: A0 13 00     	ldy	#$13
  4124 08:091E: D7 1C        	cmp	[<L109+fs_0],Y
  4125 08:0920: A5 22        	lda	<L109+clst_0+2
  4126 08:0922: A0 15 00     	ldy	#$15
  4127 08:0925: F7 1C        	sbc	[<L109+fs_0],Y
  4128 08:0927: 90 03        	bcc	L113
  4129 08:0929: 82 03 03     	brl	L10035
  Thu Dec  3 2020 22:25                                                Page 86


  4130                        L113:
  4131                        	.line	1280
  4132                        ;		switch (fs->fs_type) {
  4133                        	.line	1281
  4134 08:092C: A7 1C        	lda	[<L109+fs_0]
  4135 08:092E: 29 FF 00     	and	#$ff
  4136 08:0931: 82 E7 02     	brl	L10036
  4137                        	.line	1281
  4138                        ;		case FS_FAT12 :
  4139                        	.line	1282
  4140                        L10038:
  4141                        ;			bc = (UINT)clst; bc += bc / 2;	
                    /* bc: byte offset of the entry */
  4142                        	.line	1283
  4143 08:0934: A5 20        	lda	<L109+clst_0
  4144 08:0936: 85 11        	sta	<L110+bc_1
  4145                        	.line	1283
  4146 08:0938: A5 11        	lda	<L110+bc_1
  4147 08:093A: 4A           	lsr	A
  4148 08:093B: 85 01        	sta	<R0
  4149 08:093D: 18           	clc
  4150 08:093E: A5 01        	lda	<R0
  4151 08:0940: 65 11        	adc	<L110+bc_1
  4152 08:0942: 85 11        	sta	<L110+bc_1
  4153                        ;			res = move_window(fs, fs->fatbas
                    e + (bc / SS(fs)));
  4154                        	.line	1284
  4155 08:0944: A5 11        	lda	<L110+bc_1
  4156 08:0946: A2 09 00     	ldx	#<$9
  4157                        	xref	~~~lsr
  4158 08:0949: 22 xx xx xx  	jsl	~~~lsr
  4159 08:094D: 85 01        	sta	<R0
  4160 08:094F: A5 01        	lda	<R0
  4161 08:0951: 85 01        	sta	<R0
  4162 08:0953: 64 03        	stz	<R0+2
  4163 08:0955: 18           	clc
  4164 08:0956: A5 01        	lda	<R0
  4165 08:0958: A0 1F 00     	ldy	#$1f
  4166 08:095B: 77 1C        	adc	[<L109+fs_0],Y
  4167 08:095D: 85 05        	sta	<R1
  4168 08:095F: A5 03        	lda	<R0+2
  4169 08:0961: A0 21 00     	ldy	#$21
  4170 08:0964: 77 1C        	adc	[<L109+fs_0],Y
  4171 08:0966: 85 07        	sta	<R1+2
  4172 08:0968: D4 07        	pei	<R1+2
  4173 08:096A: D4 05        	pei	<R1
  4174 08:096C: D4 1E        	pei	<L109+fs_0+2
  4175 08:096E: D4 1C        	pei	<L109+fs_0
  4176 08:0970: 22 FA 03 08  	jsl	~~move_window
  4177 08:0974: 85 17        	sta	<L110+res_1
  4178                        ;			if (res != FR_OK) break;
  4179                        	.line	1285
  4180 08:0976: A5 17        	lda	<L110+res_1
  4181 08:0978: F0 03        	beq	L114
  4182 08:097A: 82 B2 02     	brl	L10037
  4183                        L114:
  4184                        ;			p = fs->win + bc++ % SS(fs);
  4185                        	.line	1286
  Thu Dec  3 2020 22:25                                                Page 87


  4186 08:097D: A5 11        	lda	<L110+bc_1
  4187 08:097F: 29 FF 01     	and	#<$1ff
  4188 08:0982: 85 01        	sta	<R0
  4189 08:0984: A5 01        	lda	<R0
  4190 08:0986: 85 01        	sta	<R0
  4191 08:0988: 64 03        	stz	<R0+2
  4192 08:098A: 18           	clc
  4193 08:098B: A9 2F 00     	lda	#$2f
  4194 08:098E: 65 01        	adc	<R0
  4195 08:0990: 85 05        	sta	<R1
  4196 08:0992: A9 00 00     	lda	#$0
  4197 08:0995: 65 03        	adc	<R0+2
  4198 08:0997: 85 07        	sta	<R1+2
  4199 08:0999: 18           	clc
  4200 08:099A: A5 1C        	lda	<L109+fs_0
  4201 08:099C: 65 05        	adc	<R1
  4202 08:099E: 85 13        	sta	<L110+p_1
  4203 08:09A0: A5 1E        	lda	<L109+fs_0+2
  4204 08:09A2: 65 07        	adc	<R1+2
  4205 08:09A4: 85 15        	sta	<L110+p_1+2
  4206 08:09A6: E6 11        	inc	<L110+bc_1
  4207                        ;			*p = (clst & 1) ? ((*p & 0x0F) |
                     ((BYTE)val << 4)) : (BYTE)val;		/* Update 1st by
                    te */
  4208                        	.line	1287
  4209 08:09A8: A5 20        	lda	<L109+clst_0
  4210 08:09AA: 29 01 00     	and	#<$1
  4211 08:09AD: D0 03        	bne	L116
  4212 08:09AF: 82 1C 00     	brl	L115
  4213                        L116:
  4214 08:09B2: A7 13        	lda	[<L110+p_1]
  4215 08:09B4: 29 0F 00     	and	#<$f
  4216 08:09B7: 85 01        	sta	<R0
  4217 08:09B9: A5 24        	lda	<L109+val_0
  4218 08:09BB: 29 FF 00     	and	#$ff
  4219 08:09BE: 85 09        	sta	<R2
  4220 08:09C0: A5 09        	lda	<R2
  4221 08:09C2: 0A           	asl	A
  4222 08:09C3: 0A           	asl	A
  4223 08:09C4: 0A           	asl	A
  4224 08:09C5: 0A           	asl	A
  4225 08:09C6: 85 05        	sta	<R1
  4226 08:09C8: A5 05        	lda	<R1
  4227 08:09CA: 05 01        	ora	<R0
  4228 08:09CC: 80 05        	bra	L117
  4229                        L115:
  4230 08:09CE: A5 24        	lda	<L109+val_0
  4231 08:09D0: 29 FF 00     	and	#$ff
  4232                        L117:
  4233 08:09D3: E2 20        	sep	#$20
  4234                        	longa	off
  4235 08:09D5: 87 13        	sta	[<L110+p_1]
  4236 08:09D7: C2 20        	rep	#$20
  4237                        	longa	on
  4238                        ;			fs->wflag = 1;
  4239                        	.line	1288
  4240 08:09D9: E2 20        	sep	#$20
  4241                        	longa	off
  Thu Dec  3 2020 22:25                                                Page 88


  4242 08:09DB: A9 01        	lda	#$1
  4243 08:09DD: A0 03 00     	ldy	#$3
  4244 08:09E0: 97 1C        	sta	[<L109+fs_0],Y
  4245 08:09E2: C2 20        	rep	#$20
  4246                        	longa	on
  4247                        ;			res = move_window(fs, fs->fatbas
                    e + (bc / SS(fs)));
  4248                        	.line	1289
  4249 08:09E4: A5 11        	lda	<L110+bc_1
  4250 08:09E6: A2 09 00     	ldx	#<$9
  4251                        	xref	~~~lsr
  4252 08:09E9: 22 xx xx xx  	jsl	~~~lsr
  4253 08:09ED: 85 01        	sta	<R0
  4254 08:09EF: A5 01        	lda	<R0
  4255 08:09F1: 85 01        	sta	<R0
  4256 08:09F3: 64 03        	stz	<R0+2
  4257 08:09F5: 18           	clc
  4258 08:09F6: A5 01        	lda	<R0
  4259 08:09F8: A0 1F 00     	ldy	#$1f
  4260 08:09FB: 77 1C        	adc	[<L109+fs_0],Y
  4261 08:09FD: 85 05        	sta	<R1
  4262 08:09FF: A5 03        	lda	<R0+2
  4263 08:0A01: A0 21 00     	ldy	#$21
  4264 08:0A04: 77 1C        	adc	[<L109+fs_0],Y
  4265 08:0A06: 85 07        	sta	<R1+2
  4266 08:0A08: D4 07        	pei	<R1+2
  4267 08:0A0A: D4 05        	pei	<R1
  4268 08:0A0C: D4 1E        	pei	<L109+fs_0+2
  4269 08:0A0E: D4 1C        	pei	<L109+fs_0
  4270 08:0A10: 22 FA 03 08  	jsl	~~move_window
  4271 08:0A14: 85 17        	sta	<L110+res_1
  4272                        ;			if (res != FR_OK) break;
  4273                        	.line	1290
  4274 08:0A16: A5 17        	lda	<L110+res_1
  4275 08:0A18: F0 03        	beq	L118
  4276 08:0A1A: 82 12 02     	brl	L10037
  4277                        L118:
  4278                        ;			p = fs->win + bc % SS(fs);
  4279                        	.line	1291
  4280 08:0A1D: A5 11        	lda	<L110+bc_1
  4281 08:0A1F: 29 FF 01     	and	#<$1ff
  4282 08:0A22: 85 01        	sta	<R0
  4283 08:0A24: A5 01        	lda	<R0
  4284 08:0A26: 85 01        	sta	<R0
  4285 08:0A28: 64 03        	stz	<R0+2
  4286 08:0A2A: 18           	clc
  4287 08:0A2B: A9 2F 00     	lda	#$2f
  4288 08:0A2E: 65 01        	adc	<R0
  4289 08:0A30: 85 05        	sta	<R1
  4290 08:0A32: A9 00 00     	lda	#$0
  4291 08:0A35: 65 03        	adc	<R0+2
  4292 08:0A37: 85 07        	sta	<R1+2
  4293 08:0A39: 18           	clc
  4294 08:0A3A: A5 1C        	lda	<L109+fs_0
  4295 08:0A3C: 65 05        	adc	<R1
  4296 08:0A3E: 85 13        	sta	<L110+p_1
  4297 08:0A40: A5 1E        	lda	<L109+fs_0+2
  4298 08:0A42: 65 07        	adc	<R1+2
  Thu Dec  3 2020 22:25                                                Page 89


  4299 08:0A44: 85 15        	sta	<L110+p_1+2
  4300                        ;			*p = (clst & 1) ? (BYTE)(val >> 
                    4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Updat
                    e 2nd byte */
  4301                        	.line	1292
  4302 08:0A46: A5 20        	lda	<L109+clst_0
  4303 08:0A48: 29 01 00     	and	#<$1
  4304 08:0A4B: D0 03        	bne	L120
  4305 08:0A4D: 82 1F 00     	brl	L119
  4306                        L120:
  4307 08:0A50: A5 24        	lda	<L109+val_0
  4308 08:0A52: 85 01        	sta	<R0
  4309 08:0A54: A5 26        	lda	<L109+val_0+2
  4310 08:0A56: 85 03        	sta	<R0+2
  4311 08:0A58: 46 03        	lsr	<R0+2
  4312 08:0A5A: 66 01        	ror	<R0
  4313 08:0A5C: 46 03        	lsr	<R0+2
  4314 08:0A5E: 66 01        	ror	<R0
  4315 08:0A60: 46 03        	lsr	<R0+2
  4316 08:0A62: 66 01        	ror	<R0
  4317 08:0A64: 46 03        	lsr	<R0+2
  4318 08:0A66: 66 01        	ror	<R0
  4319 08:0A68: A5 01        	lda	<R0
  4320 08:0A6A: 29 FF 00     	and	#$ff
  4321 08:0A6D: 80 21        	bra	L121
  4322                        L119:
  4323 08:0A6F: D4 26        	pei	<L109+val_0+2
  4324 08:0A71: D4 24        	pei	<L109+val_0
  4325 08:0A73: A9 08 00     	lda	#$8
  4326                        	xref	~~~llsr
  4327 08:0A76: 22 xx xx xx  	jsl	~~~llsr
  4328 08:0A7A: 85 01        	sta	<R0
  4329 08:0A7C: 86 03        	stx	<R0+2
  4330 08:0A7E: A5 01        	lda	<R0
  4331 08:0A80: 29 0F 00     	and	#<$f
  4332 08:0A83: 85 05        	sta	<R1
  4333 08:0A85: A7 13        	lda	[<L110+p_1]
  4334 08:0A87: 29 F0 00     	and	#<$f0
  4335 08:0A8A: 85 01        	sta	<R0
  4336 08:0A8C: A5 01        	lda	<R0
  4337 08:0A8E: 05 05        	ora	<R1
  4338                        L121:
  4339 08:0A90: E2 20        	sep	#$20
  4340                        	longa	off
  4341 08:0A92: 87 13        	sta	[<L110+p_1]
  4342 08:0A94: C2 20        	rep	#$20
  4343                        	longa	on
  4344                        ;			fs->wflag = 1;
  4345                        	.line	1293
  4346 08:0A96: E2 20        	sep	#$20
  4347                        	longa	off
  4348 08:0A98: A9 01        	lda	#$1
  4349 08:0A9A: A0 03 00     	ldy	#$3
  4350 08:0A9D: 97 1C        	sta	[<L109+fs_0],Y
  4351 08:0A9F: C2 20        	rep	#$20
  4352                        	longa	on
  4353                        ;			break;
  4354                        	.line	1294
  Thu Dec  3 2020 22:25                                                Page 90


  4355 08:0AA1: 82 8B 01     	brl	L10037
  4356                        ;
  4357                        ;		case FS_FAT16 :
  4358                        	.line	1296
  4359                        L10039:
  4360                        ;			res = move_window(fs, fs->fatbas
                    e + (clst / (SS(fs) / 2)));
  4361                        	.line	1297
  4362 08:0AA4: D4 22        	pei	<L109+clst_0+2
  4363 08:0AA6: D4 20        	pei	<L109+clst_0
  4364 08:0AA8: A9 08 00     	lda	#$8
  4365                        	xref	~~~llsr
  4366 08:0AAB: 22 xx xx xx  	jsl	~~~llsr
  4367 08:0AAF: 85 01        	sta	<R0
  4368 08:0AB1: 86 03        	stx	<R0+2
  4369 08:0AB3: 18           	clc
  4370 08:0AB4: A5 01        	lda	<R0
  4371 08:0AB6: A0 1F 00     	ldy	#$1f
  4372 08:0AB9: 77 1C        	adc	[<L109+fs_0],Y
  4373 08:0ABB: 85 05        	sta	<R1
  4374 08:0ABD: A5 03        	lda	<R0+2
  4375 08:0ABF: A0 21 00     	ldy	#$21
  4376 08:0AC2: 77 1C        	adc	[<L109+fs_0],Y
  4377 08:0AC4: 85 07        	sta	<R1+2
  4378 08:0AC6: D4 07        	pei	<R1+2
  4379 08:0AC8: D4 05        	pei	<R1
  4380 08:0ACA: D4 1E        	pei	<L109+fs_0+2
  4381 08:0ACC: D4 1C        	pei	<L109+fs_0
  4382 08:0ACE: 22 FA 03 08  	jsl	~~move_window
  4383 08:0AD2: 85 17        	sta	<L110+res_1
  4384                        ;			if (res != FR_OK) break;
  4385                        	.line	1298
  4386 08:0AD4: A5 17        	lda	<L110+res_1
  4387 08:0AD6: F0 03        	beq	L122
  4388 08:0AD8: 82 54 01     	brl	L10037
  4389                        L122:
  4390                        ;			st_word(fs->win + clst * 2 % SS(
                    fs), (WORD)val);	/* Simple WORD array */
  4391                        	.line	1299
  4392 08:0ADB: D4 24        	pei	<L109+val_0
  4393 08:0ADD: A5 20        	lda	<L109+clst_0
  4394 08:0ADF: 85 01        	sta	<R0
  4395 08:0AE1: A5 22        	lda	<L109+clst_0+2
  4396 08:0AE3: 85 03        	sta	<R0+2
  4397 08:0AE5: 06 01        	asl	<R0
  4398 08:0AE7: 26 03        	rol	<R0+2
  4399 08:0AE9: A5 01        	lda	<R0
  4400 08:0AEB: 29 FF 01     	and	#<$1ff
  4401 08:0AEE: 85 05        	sta	<R1
  4402 08:0AF0: 64 07        	stz	<R1+2
  4403 08:0AF2: 18           	clc
  4404 08:0AF3: A9 2F 00     	lda	#$2f
  4405 08:0AF6: 65 05        	adc	<R1
  4406 08:0AF8: 85 01        	sta	<R0
  4407 08:0AFA: A9 00 00     	lda	#$0
  4408 08:0AFD: 65 07        	adc	<R1+2
  4409 08:0AFF: 85 03        	sta	<R0+2
  4410 08:0B01: 18           	clc
  Thu Dec  3 2020 22:25                                                Page 91


  4411 08:0B02: A5 1C        	lda	<L109+fs_0
  4412 08:0B04: 65 01        	adc	<R0
  4413 08:0B06: 85 05        	sta	<R1
  4414 08:0B08: A5 1E        	lda	<L109+fs_0+2
  4415 08:0B0A: 65 03        	adc	<R0+2
  4416 08:0B0C: 85 07        	sta	<R1+2
  4417 08:0B0E: D4 07        	pei	<R1+2
  4418 08:0B10: D4 05        	pei	<R1
  4419 08:0B12: 22 D7 00 08  	jsl	~~st_word
  4420                        ;			fs->wflag = 1;
  4421                        	.line	1300
  4422 08:0B16: E2 20        	sep	#$20
  4423                        	longa	off
  4424 08:0B18: A9 01        	lda	#$1
  4425 08:0B1A: A0 03 00     	ldy	#$3
  4426 08:0B1D: 97 1C        	sta	[<L109+fs_0],Y
  4427 08:0B1F: C2 20        	rep	#$20
  4428                        	longa	on
  4429                        ;			break;
  4430                        	.line	1301
  4431 08:0B21: 82 0B 01     	brl	L10037
  4432                        ;
  4433                        ;		case FS_FAT32 :
  4434                        	.line	1303
  4435                        L10040:
  4436                        ;#if FF_FS_EXFAT
  4437                        ;		case FS_EXFAT :
  4438                        ;#endif
  4439                        ;			res = move_window(fs, fs->fatbas
                    e + (clst / (SS(fs) / 4)));
  4440                        	.line	1307
  4441 08:0B24: D4 22        	pei	<L109+clst_0+2
  4442 08:0B26: D4 20        	pei	<L109+clst_0
  4443 08:0B28: A9 07 00     	lda	#$7
  4444                        	xref	~~~llsr
  4445 08:0B2B: 22 xx xx xx  	jsl	~~~llsr
  4446 08:0B2F: 85 01        	sta	<R0
  4447 08:0B31: 86 03        	stx	<R0+2
  4448 08:0B33: 18           	clc
  4449 08:0B34: A5 01        	lda	<R0
  4450 08:0B36: A0 1F 00     	ldy	#$1f
  4451 08:0B39: 77 1C        	adc	[<L109+fs_0],Y
  4452 08:0B3B: 85 05        	sta	<R1
  4453 08:0B3D: A5 03        	lda	<R0+2
  4454 08:0B3F: A0 21 00     	ldy	#$21
  4455 08:0B42: 77 1C        	adc	[<L109+fs_0],Y
  4456 08:0B44: 85 07        	sta	<R1+2
  4457 08:0B46: D4 07        	pei	<R1+2
  4458 08:0B48: D4 05        	pei	<R1
  4459 08:0B4A: D4 1E        	pei	<L109+fs_0+2
  4460 08:0B4C: D4 1C        	pei	<L109+fs_0
  4461 08:0B4E: 22 FA 03 08  	jsl	~~move_window
  4462 08:0B52: 85 17        	sta	<L110+res_1
  4463                        ;			if (res != FR_OK) break;
  4464                        	.line	1308
  4465 08:0B54: A5 17        	lda	<L110+res_1
  4466 08:0B56: F0 03        	beq	L123
  4467 08:0B58: 82 D4 00     	brl	L10037
  Thu Dec  3 2020 22:25                                                Page 92


  4468                        L123:
  4469                        ;			if (!FF_FS_EXFAT || fs->fs_type 
                    != FS_EXFAT) {
  4470                        	.line	1309
  4471 08:0B5B: 82 0D 00     	brl	L124
  4472 08:0B5E: E2 20        	sep	#$20
  4473                        	longa	off
  4474 08:0B60: A7 1C        	lda	[<L109+fs_0]
  4475 08:0B62: C9 04        	cmp	#<$4
  4476 08:0B64: C2 20        	rep	#$20
  4477                        	longa	on
  4478 08:0B66: D0 03        	bne	L125
  4479 08:0B68: 82 61 00     	brl	L10041
  4480                        L125:
  4481                        L124:
  4482                        	.line	1309
  4483                        ;				val = (val & 0x0FFFFFFF)
                     | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
  4484                        	.line	1310
  4485 08:0B6B: A5 20        	lda	<L109+clst_0
  4486 08:0B6D: 85 01        	sta	<R0
  4487 08:0B6F: A5 22        	lda	<L109+clst_0+2
  4488 08:0B71: 85 03        	sta	<R0+2
  4489 08:0B73: 06 01        	asl	<R0
  4490 08:0B75: 26 03        	rol	<R0+2
  4491 08:0B77: 06 01        	asl	<R0
  4492 08:0B79: 26 03        	rol	<R0+2
  4493 08:0B7B: A5 01        	lda	<R0
  4494 08:0B7D: 29 FF 01     	and	#<$1ff
  4495 08:0B80: 85 05        	sta	<R1
  4496 08:0B82: 64 07        	stz	<R1+2
  4497 08:0B84: 18           	clc
  4498 08:0B85: A9 2F 00     	lda	#$2f
  4499 08:0B88: 65 05        	adc	<R1
  4500 08:0B8A: 85 01        	sta	<R0
  4501 08:0B8C: A9 00 00     	lda	#$0
  4502 08:0B8F: 65 07        	adc	<R1+2
  4503 08:0B91: 85 03        	sta	<R0+2
  4504 08:0B93: 18           	clc
  4505 08:0B94: A5 1C        	lda	<L109+fs_0
  4506 08:0B96: 65 01        	adc	<R0
  4507 08:0B98: 85 05        	sta	<R1
  4508 08:0B9A: A5 1E        	lda	<L109+fs_0+2
  4509 08:0B9C: 65 03        	adc	<R0+2
  4510 08:0B9E: 85 07        	sta	<R1+2
  4511 08:0BA0: D4 07        	pei	<R1+2
  4512 08:0BA2: D4 05        	pei	<R1
  4513 08:0BA4: 22 3B 00 08  	jsl	~~ld_dword
  4514 08:0BA8: 85 09        	sta	<R2
  4515 08:0BAA: 86 0B        	stx	<R2+2
  4516 08:0BAC: 64 0D        	stz	<R3
  4517 08:0BAE: A5 0B        	lda	<R2+2
  4518 08:0BB0: 29 00 F0     	and	#^$f0000000
  4519 08:0BB3: 85 0F        	sta	<R3+2
  4520 08:0BB5: A5 24        	lda	<L109+val_0
  4521 08:0BB7: 85 09        	sta	<R2
  4522 08:0BB9: A5 26        	lda	<L109+val_0+2
  4523 08:0BBB: 29 FF 0F     	and	#^$fffffff
  Thu Dec  3 2020 22:25                                                Page 93


  4524 08:0BBE: 85 0B        	sta	<R2+2
  4525 08:0BC0: A5 09        	lda	<R2
  4526 08:0BC2: 05 0D        	ora	<R3
  4527 08:0BC4: 85 24        	sta	<L109+val_0
  4528 08:0BC6: A5 0B        	lda	<R2+2
  4529 08:0BC8: 05 0F        	ora	<R3+2
  4530 08:0BCA: 85 26        	sta	<L109+val_0+2
  4531                        ;			}
  4532                        	.line	1311
  4533                        ;			st_dword(fs->win + clst * 4 % SS
                    (fs), val);
  4534                        L10041:
  4535                        	.line	1312
  4536 08:0BCC: D4 26        	pei	<L109+val_0+2
  4537 08:0BCE: D4 24        	pei	<L109+val_0
  4538 08:0BD0: A5 20        	lda	<L109+clst_0
  4539 08:0BD2: 85 01        	sta	<R0
  4540 08:0BD4: A5 22        	lda	<L109+clst_0+2
  4541 08:0BD6: 85 03        	sta	<R0+2
  4542 08:0BD8: 06 01        	asl	<R0
  4543 08:0BDA: 26 03        	rol	<R0+2
  4544 08:0BDC: 06 01        	asl	<R0
  4545 08:0BDE: 26 03        	rol	<R0+2
  4546 08:0BE0: A5 01        	lda	<R0
  4547 08:0BE2: 29 FF 01     	and	#<$1ff
  4548 08:0BE5: 85 05        	sta	<R1
  4549 08:0BE7: 64 07        	stz	<R1+2
  4550 08:0BE9: 18           	clc
  4551 08:0BEA: A9 2F 00     	lda	#$2f
  4552 08:0BED: 65 05        	adc	<R1
  4553 08:0BEF: 85 01        	sta	<R0
  4554 08:0BF1: A9 00 00     	lda	#$0
  4555 08:0BF4: 65 07        	adc	<R1+2
  4556 08:0BF6: 85 03        	sta	<R0+2
  4557 08:0BF8: 18           	clc
  4558 08:0BF9: A5 1C        	lda	<L109+fs_0
  4559 08:0BFB: 65 01        	adc	<R0
  4560 08:0BFD: 85 05        	sta	<R1
  4561 08:0BFF: A5 1E        	lda	<L109+fs_0+2
  4562 08:0C01: 65 03        	adc	<R0+2
  4563 08:0C03: 85 07        	sta	<R1+2
  4564 08:0C05: D4 07        	pei	<R1+2
  4565 08:0C07: D4 05        	pei	<R1
  4566 08:0C09: 22 16 01 08  	jsl	~~st_dword
  4567                        ;			fs->wflag = 1;
  4568                        	.line	1313
  4569 08:0C0D: E2 20        	sep	#$20
  4570                        	longa	off
  4571 08:0C0F: A9 01        	lda	#$1
  4572 08:0C11: A0 03 00     	ldy	#$3
  4573 08:0C14: 97 1C        	sta	[<L109+fs_0],Y
  4574 08:0C16: C2 20        	rep	#$20
  4575                        	longa	on
  4576                        ;			break;
  4577                        	.line	1314
  4578 08:0C18: 82 14 00     	brl	L10037
  4579                        ;		}
  4580                        	.line	1315
  Thu Dec  3 2020 22:25                                                Page 94


  4581                        L10036:
  4582                        	xref	~~~swt
  4583 08:0C1B: 22 xx xx xx  	jsl	~~~swt
  4584 08:0C1F: 03 00        	dw	3
  4585 08:0C21: 01 00        	dw	1
  4586 08:0C23: 33 09        	dw	L10038-1
  4587 08:0C25: 02 00        	dw	2
  4588 08:0C27: A3 0A        	dw	L10039-1
  4589 08:0C29: 03 00        	dw	3
  4590 08:0C2B: 23 0B        	dw	L10040-1
  4591 08:0C2D: 2E 0C        	dw	L10037-1
  4592                        L10037:
  4593                        ;	}
  4594                        	.line	1316
  4595                        ;	return res;
  4596                        L10035:
  4597                        	.line	1317
  4598 08:0C2F: A5 17        	lda	<L110+res_1
  4599                        L126:
  4600 08:0C31: A8           	tay
  4601 08:0C32: A5 1A        	lda	<L109+2
  4602 08:0C34: 85 26        	sta	<L109+2+12
  4603 08:0C36: A5 19        	lda	<L109+1
  4604 08:0C38: 85 25        	sta	<L109+1+12
  4605 08:0C3A: 2B           	pld
  4606 08:0C3B: 3B           	tsc
  4607 08:0C3C: 18           	clc
  4608 08:0C3D: 69 24 00     	adc	#L109+12
  4609 08:0C40: 1B           	tcs
  4610 08:0C41: 98           	tya
  4611 08:0C42: 6B           	rtl
  4612                        ;}
  4613                        	.line	1318
  4614                        	.endblock	1318
  4615             00000018   L109	equ	24
  4616             00000011   L110	equ	17
  4617 08:0C43:              	ends
  4618                        	efunc
  4619                        	.endfunc	1318,17,24
  4620                        	.line	1318
  4621                        ;
  4622                        ;#endif /* !FF_FS_READONLY */
  4623                        ;
  4624                        ;
  4625                        ;
  4626                        ;
  4627                        ;#if FF_FS_EXFAT && !FF_FS_READONLY
  4628                        ;/*-----------------------------------------------
                    ------------------------*/
  4629                        ;/* exFAT: Accessing FAT and Allocation Bitmap    
                                            */
  4630                        ;/*-----------------------------------------------
                    ------------------------*/
  4631                        ;
  4632                        ;/*--------------------------------------*/
  4633                        ;/* Find a contiguous free cluster block */
  4634                        ;/*--------------------------------------*/
  4635                        ;
  Thu Dec  3 2020 22:25                                                Page 95


  4636                        ;static DWORD find_bitmap (	/* 0:Not found, 
                    2..:Cluster block found, 0xFFFFFFFF:Disk error */
  4637                        ;	FATFS* fs,	/* Filesystem object */
  4638                        ;	DWORD clst,	/* Cluster number to scan from *
                    /
  4639                        ;	DWORD ncl	/* Number of contiguous clusters
                     to find (1..) */
  4640                        ;)
  4641                        ;{
  4642                        ;	BYTE bm, bv;
  4643                        ;	UINT i;
  4644                        ;	DWORD val, scl, ctr;
  4645                        ;
  4646                        ;
  4647                        ;	clst -= 2;	/* The first bit in the bitmap c
                    orresponds to cluster #2 */
  4648                        ;	if (clst >= fs->n_fatent - 2) clst = 0;
  4649                        ;	scl = val = clst; ctr = 0;
  4650                        ;	for (;;) {
  4651                        ;		if (move_window(fs, fs->bitbase + val / 
                    8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
  4652                        ;		i = val / 8 % SS(fs); bm = 1 << (val % 8
                    );
  4653                        ;		do {
  4654                        ;			do {
  4655                        ;				bv = fs->win[i] & bm; bm
                     <<= 1;		/* Get bit value */
  4656                        ;				if (++val >= fs->n_faten
                    t - 2) {	/* Next cluster (with wrap-around) */
  4657                        ;					val = 0; bm = 0;
                     i = SS(fs);
  4658                        ;				}
  4659                        ;				if (bv == 0) {	/* Is it
                     a free cluster? */
  4660                        ;					if (++ctr == ncl
                    ) return scl + 2;	/* Check if run length is sufficient for
                     required */
  4661                        ;				} else {
  4662                        ;					scl = val; ctr =
                     0;		/* Encountered a cluster in-use, restart to scan
                     */
  4663                        ;				}
  4664                        ;				if (val == clst) return 
                    0;	/* All cluster scanned? */
  4665                        ;			} while (bm != 0);
  4666                        ;			bm = 1;
  4667                        ;		} while (++i < SS(fs));
  4668                        ;	}
  4669                        ;}
  4670                        ;
  4671                        ;
  4672                        ;/*----------------------------------------*/
  4673                        ;/* Set/Clear a block of allocation bitmap */
  4674                        ;/*----------------------------------------*/
  4675                        ;
  4676                        ;static FRESULT change_bitmap (
  4677                        ;	FATFS* fs,	/* Filesystem object */
  4678                        ;	DWORD clst,	/* Cluster number to change from
  Thu Dec  3 2020 22:25                                                Page 96


                     */
  4679                        ;	DWORD ncl,	/* Number of clusters to be chan
                    ged */
  4680                        ;	int bv		/* bit value to be set (0 or 1) 
                    */
  4681                        ;)
  4682                        ;{
  4683                        ;	BYTE bm;
  4684                        ;	UINT i;
  4685                        ;	LBA_t sect;
  4686                        ;
  4687                        ;
  4688                        ;	clst -= 2;	/* The first bit corresponds to 
                    cluster #2 */
  4689                        ;	sect = fs->bitbase + clst / 8 / SS(fs);	/* Secto
                    r address */
  4690                        ;	i = clst / 8 % SS(fs);				
                    	/* Byte offset in the sector */
  4691                        ;	bm = 1 << (clst % 8);				
                    	/* Bit mask in the byte */
  4692                        ;	for (;;) {
  4693                        ;		if (move_window(fs, sect++) != FR_OK) re
                    turn FR_DISK_ERR;
  4694                        ;		do {
  4695                        ;			do {
  4696                        ;				if (bv == (int)((fs->win
                    [i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected v
                    alue? */
  4697                        ;				fs->win[i] ^= bm;	
                    /* Flip the bit */
  4698                        ;				fs->wflag = 1;
  4699                        ;				if (--ncl == 0) return F
                    R_OK;	/* All bits processed? */
  4700                        ;			} while (bm <<= 1);		
                    /* Next bit */
  4701                        ;			bm = 1;
  4702                        ;		} while (++i < SS(fs));		/* Next 
                    byte */
  4703                        ;		i = 0;
  4704                        ;	}
  4705                        ;}
  4706                        ;
  4707                        ;
  4708                        ;/*---------------------------------------------*/
  4709                        ;/* Fill the first fragment of the FAT chain    */
  4710                        ;/*---------------------------------------------*/
  4711                        ;
  4712                        ;static FRESULT fill_first_frag (
  4713                        ;	FFOBJID* obj	/* Pointer to the corresponding 
                    object */
  4714                        ;)
  4715                        ;{
  4716                        ;	FRESULT res;
  4717                        ;	DWORD cl, n;
  4718                        ;
  4719                        ;
  4720                        ;	if (obj->stat == 3) {	/* Has the object been c
                    hanged 'fragmented' in this session? */
  Thu Dec  3 2020 22:25                                                Page 97


  4721                        ;		for (cl = obj->sclust, n = obj->n_cont; 
                    n; cl++, n--) {	/* Create cluster chain on the FAT */
  4722                        ;			res = put_fat(obj->fs, cl, cl + 
                    1);
  4723                        ;			if (res != FR_OK) return res;
  4724                        ;		}
  4725                        ;		obj->stat = 0;	/* Change status 'FAT ch
                    ain is valid' */
  4726                        ;	}
  4727                        ;	return FR_OK;
  4728                        ;}
  4729                        ;
  4730                        ;
  4731                        ;/*---------------------------------------------*/
  4732                        ;/* Fill the last fragment of the FAT chain     */
  4733                        ;/*---------------------------------------------*/
  4734                        ;
  4735                        ;static FRESULT fill_last_frag (
  4736                        ;	FFOBJID* obj,	/* Pointer to the corresponding 
                    object */
  4737                        ;	DWORD lcl,		/* Last cluster of the f
                    ragment */
  4738                        ;	DWORD term		/* Value to set the last
                     FAT entry */
  4739                        ;)
  4740                        ;{
  4741                        ;	FRESULT res;
  4742                        ;
  4743                        ;
  4744                        ;	while (obj->n_frag > 0) {	/* Create the ch
                    ain of last fragment */
  4745                        ;		res = put_fat(obj->fs, lcl - obj->n_frag
                     + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
  4746                        ;		if (res != FR_OK) return res;
  4747                        ;		obj->n_frag--;
  4748                        ;	}
  4749                        ;	return FR_OK;
  4750                        ;}
  4751                        ;
  4752                        ;#endif	/* FF_FS_EXFAT && !FF_FS_READONLY */
  4753                        ;
  4754                        ;
  4755                        ;
  4756                        ;#if !FF_FS_READONLY
  4757                        ;/*-----------------------------------------------
                    ------------------------*/
  4758                        ;/* FAT handling - Remove a cluster chain         
                                            */
  4759                        ;/*-----------------------------------------------
                    ------------------------*/
  4760                        ;
  4761                        ;static FRESULT remove_chain (	/* FR_OK(0):succ
                    eeded, !=0:error */
  4762                        ;	FFOBJID* obj,		/* Corresponding object 
                    */
  4763                        ;	DWORD clst,			/* Cluster to re
                    move a chain from */
  4764                        ;	DWORD pclst			/* Previous clus
  Thu Dec  3 2020 22:25                                                Page 98


                    ter of clst (0 if entire chain) */
  4765                        ;)
  4766                        ;{
  4767                        	.line	1459
  4768                        	.line	1464
  4769                        	FFDOS
  4770                        	func
  4771                        	.function	1464
  4772                        ~~remove_chain:
  4773                        	longa	on
  4774                        	longi	on
  4775 08:0C43: 3B           	tsc
  4776 08:0C44: 38           	sec
  4777 08:0C45: E9 0E 00     	sbc	#L127
  4778 08:0C48: 1B           	tcs
  4779 08:0C49: 0B           	phd
  4780 08:0C4A: 5B           	tcd
  4781             00000004   obj_0	set	4
  4782             00000008   clst_0	set	8
  4783             0000000C   pclst_0	set	12
  4784                        	.block	1464
  4785                        ;	FRESULT res = FR_OK;
  4786                        ;	DWORD nxt;
  4787                        ;	FATFS *fs = obj->fs;
  4788                        ;#if FF_FS_EXFAT || FF_USE_TRIM
  4789                        ;	DWORD scl = clst, ecl = clst;
  4790                        ;#endif
  4791                        ;#if FF_USE_TRIM
  4792                        ;	LBA_t rt[2];
  4793                        ;#endif
  4794                        ;
  4795                        ;	if (clst < 2 || clst >= fs->n_fatent) return FR_
                    INT_ERR;	/* Check if in valid range */
  4796             00000000   res_1	set	0
  4797             00000002   nxt_1	set	2
  4798             00000006   fs_1	set	6
  4799                        	.sym	res,0,5,1,16
  4800                        	.sym	nxt,2,18,1,32
  4801                        	.sym	fs,6,138,1,32,80
  4802                        	.sym	obj,4,138,6,32,81
  4803                        	.sym	clst,8,18,6,32
  4804                        	.sym	pclst,12,18,6,32
  4805 08:0C4B: 64 05        	stz	<L128+res_1
  4806 08:0C4D: A7 12        	lda	[<L127+obj_0]
  4807 08:0C4F: 85 0B        	sta	<L128+fs_1
  4808 08:0C51: A0 02 00     	ldy	#$2
  4809 08:0C54: B7 12        	lda	[<L127+obj_0],Y
  4810 08:0C56: 85 0D        	sta	<L128+fs_1+2
  4811                        	.line	1475
  4812 08:0C58: A5 16        	lda	<L127+clst_0
  4813 08:0C5A: C9 02 00     	cmp	#<$2
  4814 08:0C5D: A5 18        	lda	<L127+clst_0+2
  4815 08:0C5F: E9 00 00     	sbc	#^$2
  4816 08:0C62: B0 03        	bcs	L131
  4817 08:0C64: 82 13 00     	brl	L130
  4818                        L131:
  4819 08:0C67: A5 16        	lda	<L127+clst_0
  4820 08:0C69: A0 13 00     	ldy	#$13
  Thu Dec  3 2020 22:25                                                Page 99


  4821 08:0C6C: D7 0B        	cmp	[<L128+fs_1],Y
  4822 08:0C6E: A5 18        	lda	<L127+clst_0+2
  4823 08:0C70: A0 15 00     	ldy	#$15
  4824 08:0C73: F7 0B        	sbc	[<L128+fs_1],Y
  4825 08:0C75: B0 03        	bcs	L132
  4826 08:0C77: 82 15 00     	brl	L10042
  4827                        L132:
  4828                        L130:
  4829                        	.line	1475
  4830 08:0C7A: A9 02 00     	lda	#$2
  4831                        L133:
  4832 08:0C7D: A8           	tay
  4833 08:0C7E: A5 10        	lda	<L127+2
  4834 08:0C80: 85 1C        	sta	<L127+2+12
  4835 08:0C82: A5 0F        	lda	<L127+1
  4836 08:0C84: 85 1B        	sta	<L127+1+12
  4837 08:0C86: 2B           	pld
  4838 08:0C87: 3B           	tsc
  4839 08:0C88: 18           	clc
  4840 08:0C89: 69 1A 00     	adc	#L127+12
  4841 08:0C8C: 1B           	tcs
  4842 08:0C8D: 98           	tya
  4843 08:0C8E: 6B           	rtl
  4844                        ;
  4845                        ;	/* Mark the previous cluster 'EOC' on the FAT if
                     it exists */
  4846                        ;	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type !
                    = FS_EXFAT || obj->stat != 2)) {
  4847                        L10042:
  4848                        	.line	1478
  4849 08:0C8F: A5 1A        	lda	<L127+pclst_0
  4850 08:0C91: 05 1C        	ora	<L127+pclst_0+2
  4851 08:0C93: D0 03        	bne	L134
  4852 08:0C95: 82 40 00     	brl	L10043
  4853                        L134:
  4854 08:0C98: 82 1D 00     	brl	L135
  4855 08:0C9B: E2 20        	sep	#$20
  4856                        	longa	off
  4857 08:0C9D: A7 0B        	lda	[<L128+fs_1]
  4858 08:0C9F: C9 04        	cmp	#<$4
  4859 08:0CA1: C2 20        	rep	#$20
  4860                        	longa	on
  4861 08:0CA3: F0 03        	beq	L136
  4862 08:0CA5: 82 10 00     	brl	L135
  4863                        L136:
  4864 08:0CA8: E2 20        	sep	#$20
  4865                        	longa	off
  4866 08:0CAA: A0 07 00     	ldy	#$7
  4867 08:0CAD: B7 12        	lda	[<L127+obj_0],Y
  4868 08:0CAF: C9 02        	cmp	#<$2
  4869 08:0CB1: C2 20        	rep	#$20
  4870                        	longa	on
  4871 08:0CB3: D0 03        	bne	L137
  4872 08:0CB5: 82 20 00     	brl	L10043
  4873                        L137:
  4874                        L135:
  4875                        	.line	1478
  4876                        ;		res = put_fat(fs, pclst, 0xFFFFFFFF);
  Thu Dec  3 2020 22:25                                                Page 100


  4877                        	.line	1479
  4878 08:0CB8: F4 FF FF     	pea	#^$ffffffff
  4879 08:0CBB: F4 FF FF     	pea	#<$ffffffff
  4880 08:0CBE: D4 1C        	pei	<L127+pclst_0+2
  4881 08:0CC0: D4 1A        	pei	<L127+pclst_0
  4882 08:0CC2: D4 0D        	pei	<L128+fs_1+2
  4883 08:0CC4: D4 0B        	pei	<L128+fs_1
  4884 08:0CC6: 22 FD 08 08  	jsl	~~put_fat
  4885 08:0CCA: 85 05        	sta	<L128+res_1
  4886                        ;		if (res != FR_OK) return res;
  4887                        	.line	1480
  4888 08:0CCC: A5 05        	lda	<L128+res_1
  4889 08:0CCE: D0 03        	bne	L138
  4890 08:0CD0: 82 05 00     	brl	L10044
  4891                        L138:
  4892                        	.line	1480
  4893 08:0CD3: A5 05        	lda	<L128+res_1
  4894 08:0CD5: 82 A5 FF     	brl	L133
  4895                        ;	}
  4896                        L10044:
  4897                        	.line	1481
  4898                        ;
  4899                        ;	/* Remove the chain */
  4900                        ;	do {
  4901                        L10043:
  4902                        	.line	1484
  4903                        L10047:
  4904                        	.line	1484
  4905                        ;		nxt = get_fat(obj, clst);		
                    	/* Get cluster status */
  4906                        	.line	1485
  4907 08:0CD8: D4 18        	pei	<L127+clst_0+2
  4908 08:0CDA: D4 16        	pei	<L127+clst_0
  4909 08:0CDC: D4 14        	pei	<L127+obj_0+2
  4910 08:0CDE: D4 12        	pei	<L127+obj_0
  4911 08:0CE0: 22 8D 06 08  	jsl	~~get_fat
  4912 08:0CE4: 85 07        	sta	<L128+nxt_1
  4913 08:0CE6: 86 09        	stx	<L128+nxt_1+2
  4914                        ;		if (nxt == 0) break;			
                    	/* Empty cluster? */
  4915                        	.line	1486
  4916 08:0CE8: A5 07        	lda	<L128+nxt_1
  4917 08:0CEA: 05 09        	ora	<L128+nxt_1+2
  4918 08:0CEC: D0 03        	bne	L139
  4919 08:0CEE: 82 D5 00     	brl	L10046
  4920                        L139:
  4921                        ;		if (nxt == 1) return FR_INT_ERR;	
                    /* Internal error? */
  4922                        	.line	1487
  4923 08:0CF1: A5 07        	lda	<L128+nxt_1
  4924 08:0CF3: C9 01 00     	cmp	#<$1
  4925 08:0CF6: D0 05        	bne	L140
  4926 08:0CF8: A5 09        	lda	<L128+nxt_1+2
  4927 08:0CFA: C9 00 00     	cmp	#^$1
  4928                        L140:
  4929 08:0CFD: F0 03        	beq	L141
  4930 08:0CFF: 82 06 00     	brl	L10048
  4931                        L141:
  Thu Dec  3 2020 22:25                                                Page 101


  4932                        	.line	1487
  4933 08:0D02: A9 02 00     	lda	#$2
  4934 08:0D05: 82 75 FF     	brl	L133
  4935                        ;		if (nxt == 0xFFFFFFFF) return FR_DISK_ER
                    R;	/* Disk error? */
  4936                        L10048:
  4937                        	.line	1488
  4938 08:0D08: A5 07        	lda	<L128+nxt_1
  4939 08:0D0A: C9 FF FF     	cmp	#<$ffffffff
  4940 08:0D0D: D0 05        	bne	L142
  4941 08:0D0F: A5 09        	lda	<L128+nxt_1+2
  4942 08:0D11: C9 FF FF     	cmp	#^$ffffffff
  4943                        L142:
  4944 08:0D14: F0 03        	beq	L143
  4945 08:0D16: 82 06 00     	brl	L10049
  4946                        L143:
  4947                        	.line	1488
  4948 08:0D19: A9 01 00     	lda	#$1
  4949 08:0D1C: 82 5E FF     	brl	L133
  4950                        ;		if (!FF_FS_EXFAT || fs->fs_type != FS_EX
                    FAT) {
  4951                        L10049:
  4952                        	.line	1489
  4953 08:0D1F: 82 0D 00     	brl	L144
  4954 08:0D22: E2 20        	sep	#$20
  4955                        	longa	off
  4956 08:0D24: A7 0B        	lda	[<L128+fs_1]
  4957 08:0D26: C9 04        	cmp	#<$4
  4958 08:0D28: C2 20        	rep	#$20
  4959                        	longa	on
  4960 08:0D2A: D0 03        	bne	L145
  4961 08:0D2C: 82 20 00     	brl	L10050
  4962                        L145:
  4963                        L144:
  4964                        	.line	1489
  4965                        ;			res = put_fat(fs, clst, 0);	
                    	/* Mark the cluster 'free' on the FAT */
  4966                        	.line	1490
  4967 08:0D2F: F4 00 00     	pea	#^$0
  4968 08:0D32: F4 00 00     	pea	#<$0
  4969 08:0D35: D4 18        	pei	<L127+clst_0+2
  4970 08:0D37: D4 16        	pei	<L127+clst_0
  4971 08:0D39: D4 0D        	pei	<L128+fs_1+2
  4972 08:0D3B: D4 0B        	pei	<L128+fs_1
  4973 08:0D3D: 22 FD 08 08  	jsl	~~put_fat
  4974 08:0D41: 85 05        	sta	<L128+res_1
  4975                        ;			if (res != FR_OK) return res;
  4976                        	.line	1491
  4977 08:0D43: A5 05        	lda	<L128+res_1
  4978 08:0D45: D0 03        	bne	L146
  4979 08:0D47: 82 05 00     	brl	L10051
  4980                        L146:
  4981                        	.line	1491
  4982 08:0D4A: A5 05        	lda	<L128+res_1
  4983 08:0D4C: 82 2E FF     	brl	L133
  4984                        ;		}
  4985                        L10051:
  4986                        	.line	1492
  Thu Dec  3 2020 22:25                                                Page 102


  4987                        ;		if (fs->free_clst < fs->n_fatent - 2) {	
                    /* Update FSINFO */
  4988                        L10050:
  4989                        	.line	1493
  4990 08:0D4F: 18           	clc
  4991 08:0D50: A9 FE FF     	lda	#$fffe
  4992 08:0D53: A0 13 00     	ldy	#$13
  4993 08:0D56: 77 0B        	adc	[<L128+fs_1],Y
  4994 08:0D58: 85 01        	sta	<R0
  4995 08:0D5A: A9 FF FF     	lda	#$ffff
  4996 08:0D5D: A0 15 00     	ldy	#$15
  4997 08:0D60: 77 0B        	adc	[<L128+fs_1],Y
  4998 08:0D62: 85 03        	sta	<R0+2
  4999 08:0D64: A0 0F 00     	ldy	#$f
  5000 08:0D67: B7 0B        	lda	[<L128+fs_1],Y
  5001 08:0D69: C5 01        	cmp	<R0
  5002 08:0D6B: A0 11 00     	ldy	#$11
  5003 08:0D6E: B7 0B        	lda	[<L128+fs_1],Y
  5004 08:0D70: E5 03        	sbc	<R0+2
  5005 08:0D72: 90 03        	bcc	L147
  5006 08:0D74: 82 34 00     	brl	L10052
  5007                        L147:
  5008                        	.line	1493
  5009                        ;			fs->free_clst++;
  5010                        	.line	1494
  5011 08:0D77: 18           	clc
  5012 08:0D78: A9 01 00     	lda	#$1
  5013 08:0D7B: A0 0F 00     	ldy	#$f
  5014 08:0D7E: 77 0B        	adc	[<L128+fs_1],Y
  5015 08:0D80: A0 0F 00     	ldy	#$f
  5016 08:0D83: 97 0B        	sta	[<L128+fs_1],Y
  5017 08:0D85: A9 00 00     	lda	#$0
  5018 08:0D88: A0 11 00     	ldy	#$11
  5019 08:0D8B: 77 0B        	adc	[<L128+fs_1],Y
  5020 08:0D8D: A0 11 00     	ldy	#$11
  5021 08:0D90: 97 0B        	sta	[<L128+fs_1],Y
  5022                        ;			fs->fsi_flag |= 1;
  5023                        	.line	1495
  5024 08:0D92: 18           	clc
  5025 08:0D93: A9 04 00     	lda	#$4
  5026 08:0D96: 65 0B        	adc	<L128+fs_1
  5027 08:0D98: 85 01        	sta	<R0
  5028 08:0D9A: A9 00 00     	lda	#$0
  5029 08:0D9D: 65 0D        	adc	<L128+fs_1+2
  5030 08:0D9F: 85 03        	sta	<R0+2
  5031 08:0DA1: E2 20        	sep	#$20
  5032                        	longa	off
  5033 08:0DA3: A7 01        	lda	[<R0]
  5034 08:0DA5: 09 01        	ora	#<$1
  5035 08:0DA7: 87 01        	sta	[<R0]
  5036 08:0DA9: C2 20        	rep	#$20
  5037                        	longa	on
  5038                        ;		}
  5039                        	.line	1496
  5040                        ;#if FF_FS_EXFAT || FF_USE_TRIM
  5041                        ;		if (ecl + 1 == nxt) {	/* Is next clust
                    er contiguous? */
  5042                        ;			ecl = nxt;
  Thu Dec  3 2020 22:25                                                Page 103


  5043                        ;		} else {				
                    /* End of contiguous cluster block */
  5044                        ;#if FF_FS_EXFAT
  5045                        ;			if (fs->fs_type == FS_EXFAT) {
  5046                        ;				res = change_bitmap(fs, 
                    scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free'
                     on the bitmap */
  5047                        ;				if (res != FR_OK) return
                     res;
  5048                        ;			}
  5049                        ;#endif
  5050                        ;#if FF_USE_TRIM
  5051                        ;			rt[0] = clst2sect(fs, scl);	
                    				/* Start of data area to be free
                    d */
  5052                        ;			rt[1] = clst2sect(fs, ecl) + fs-
                    >csize - 1;	/* End of data area to be freed */
  5053                        ;			disk_ioctl(fs->pdrv, CTRL_TRIM, 
                    rt);		/* Inform storage device that the data i
                    n the block may be erased */
  5054                        ;#endif
  5055                        ;			scl = ecl = nxt;
  5056                        ;		}
  5057                        ;#endif
  5058                        ;		clst = nxt;				
                    	/* Next cluster */
  5059                        L10052:
  5060                        	.line	1515
  5061 08:0DAB: A5 07        	lda	<L128+nxt_1
  5062 08:0DAD: 85 16        	sta	<L127+clst_0
  5063 08:0DAF: A5 09        	lda	<L128+nxt_1+2
  5064 08:0DB1: 85 18        	sta	<L127+clst_0+2
  5065                        ;	} while (clst < fs->n_fatent);	/* Repeat while 
                    not the last link */
  5066                        	.line	1516
  5067                        L10045:
  5068 08:0DB3: A5 16        	lda	<L127+clst_0
  5069 08:0DB5: A0 13 00     	ldy	#$13
  5070 08:0DB8: D7 0B        	cmp	[<L128+fs_1],Y
  5071 08:0DBA: A5 18        	lda	<L127+clst_0+2
  5072 08:0DBC: A0 15 00     	ldy	#$15
  5073 08:0DBF: F7 0B        	sbc	[<L128+fs_1],Y
  5074 08:0DC1: B0 03        	bcs	L148
  5075 08:0DC3: 82 12 FF     	brl	L10047
  5076                        L148:
  5077                        L10046:
  5078                        ;
  5079                        ;#if FF_FS_EXFAT
  5080                        ;	/* Some post processes for chain status */
  5081                        ;	if (fs->fs_type == FS_EXFAT) {
  5082                        ;		if (pclst == 0) {	/* Has the entir
                    e chain been removed? */
  5083                        ;			obj->stat = 0;		/* Chang
                    e the chain status 'initial' */
  5084                        ;		} else {
  5085                        ;			if (obj->stat == 0) {	/* Is it
                     a fragmented chain from the beginning of this session? */
  5086                        ;				clst = obj->sclust;	
  Thu Dec  3 2020 22:25                                                Page 104


                    	/* Follow the chain to check if it gets contiguous */
  5087                        ;				while (clst != pclst) {
  5088                        ;					nxt = get_fat(ob
                    j, clst);
  5089                        ;					if (nxt < 2) ret
                    urn FR_INT_ERR;
  5090                        ;					if (nxt == 0xFFF
                    FFFFF) return FR_DISK_ERR;
  5091                        ;					if (nxt != clst 
                    + 1) break;	/* Not contiguous? */
  5092                        ;					clst++;
  5093                        ;				}
  5094                        ;				if (clst == pclst) {	
                    /* Has the chain got contiguous again? */
  5095                        ;					obj->stat = 2;	
                    	/* Change the chain status 'contiguous' */
  5096                        ;				}
  5097                        ;			} else {
  5098                        ;				if (obj->stat == 3 && pc
                    lst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	
                    /* Was the chain fragmented in this session and got contiguo
                    us again? */
  5099                        ;					obj->stat = 2;	
                    /* Change the chain status 'contiguous' */
  5100                        ;				}
  5101                        ;			}
  5102                        ;		}
  5103                        ;	}
  5104                        ;#endif
  5105                        ;	return FR_OK;
  5106                        	.line	1544
  5107 08:0DC6: A9 00 00     	lda	#$0
  5108 08:0DC9: 82 B1 FE     	brl	L133
  5109                        ;}
  5110                        	.line	1545
  5111                        	.endblock	1545
  5112             0000000E   L127	equ	14
  5113             00000005   L128	equ	5
  5114 08:0DCC:              	ends
  5115                        	efunc
  5116                        	.endfunc	1545,5,14
  5117                        	.line	1545
  5118                        ;
  5119                        ;
  5120                        ;
  5121                        ;
  5122                        ;/*-----------------------------------------------
                    ------------------------*/
  5123                        ;/* FAT handling - Stretch a chain or Create a new
                     chain                  */
  5124                        ;/*-----------------------------------------------
                    ------------------------*/
  5125                        ;
  5126                        ;static DWORD create_chain (	/* 0:No free clu
                    ster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New clust
                    er# */
  5127                        ;	FFOBJID* obj,		/* Corresponding object 
                    */
  Thu Dec  3 2020 22:25                                                Page 105


  5128                        ;	DWORD clst			/* Cluster# to s
                    tretch, 0:Create a new chain */
  5129                        ;)
  5130                        ;{
  5131                        	.line	1554
  5132                        	.line	1558
  5133                        	FFDOS
  5134                        	func
  5135                        	.function	1558
  5136                        ~~create_chain:
  5137                        	longa	on
  5138                        	longi	on
  5139 08:0DCC: 3B           	tsc
  5140 08:0DCD: 38           	sec
  5141 08:0DCE: E9 16 00     	sbc	#L149
  5142 08:0DD1: 1B           	tcs
  5143 08:0DD2: 0B           	phd
  5144 08:0DD3: 5B           	tcd
  5145             00000004   obj_0	set	4
  5146             00000008   clst_0	set	8
  5147                        	.block	1558
  5148                        ;	DWORD cs, ncl, scl;
  5149                        ;	FRESULT res;
  5150                        ;	FATFS *fs = obj->fs;
  5151                        ;
  5152                        ;
  5153                        ;	if (clst == 0) {	/* Create a new chain */
  5154             00000000   cs_1	set	0
  5155             00000004   ncl_1	set	4
  5156             00000008   scl_1	set	8
  5157             0000000C   res_1	set	12
  5158             0000000E   fs_1	set	14
  5159                        	.sym	cs,0,18,1,32
  5160                        	.sym	ncl,4,18,1,32
  5161                        	.sym	scl,8,18,1,32
  5162                        	.sym	res,12,5,1,16
  5163                        	.sym	fs,14,138,1,32,80
  5164                        	.sym	obj,4,138,6,32,81
  5165                        	.sym	clst,8,18,6,32
  5166 08:0DD4: A7 1A        	lda	[<L149+obj_0]
  5167 08:0DD6: 85 13        	sta	<L150+fs_1
  5168 08:0DD8: A0 02 00     	ldy	#$2
  5169 08:0DDB: B7 1A        	lda	[<L149+obj_0],Y
  5170 08:0DDD: 85 15        	sta	<L150+fs_1+2
  5171                        	.line	1564
  5172 08:0DDF: A5 1E        	lda	<L149+clst_0
  5173 08:0DE1: 05 20        	ora	<L149+clst_0+2
  5174 08:0DE3: F0 03        	beq	L152
  5175 08:0DE5: 82 37 00     	brl	L10053
  5176                        L152:
  5177                        	.line	1564
  5178                        ;		scl = fs->last_clst;			
                    	/* Suggested cluster to start to find */
  5179                        	.line	1565
  5180 08:0DE8: A0 0B 00     	ldy	#$b
  5181 08:0DEB: B7 13        	lda	[<L150+fs_1],Y
  5182 08:0DED: 85 0D        	sta	<L150+scl_1
  5183 08:0DEF: A0 0D 00     	ldy	#$d
  Thu Dec  3 2020 22:25                                                Page 106


  5184 08:0DF2: B7 13        	lda	[<L150+fs_1],Y
  5185 08:0DF4: 85 0F        	sta	<L150+scl_1+2
  5186                        ;		if (scl == 0 || scl >= fs->n_fatent) scl
                     = 1;
  5187                        	.line	1566
  5188 08:0DF6: A5 0D        	lda	<L150+scl_1
  5189 08:0DF8: 05 0F        	ora	<L150+scl_1+2
  5190 08:0DFA: D0 03        	bne	L154
  5191 08:0DFC: 82 13 00     	brl	L153
  5192                        L154:
  5193 08:0DFF: A5 0D        	lda	<L150+scl_1
  5194 08:0E01: A0 13 00     	ldy	#$13
  5195 08:0E04: D7 13        	cmp	[<L150+fs_1],Y
  5196 08:0E06: A5 0F        	lda	<L150+scl_1+2
  5197 08:0E08: A0 15 00     	ldy	#$15
  5198 08:0E0B: F7 13        	sbc	[<L150+fs_1],Y
  5199 08:0E0D: B0 03        	bcs	L155
  5200 08:0E0F: 82 0A 00     	brl	L10054
  5201                        L155:
  5202                        L153:
  5203                        	.line	1566
  5204 08:0E12: A9 01 00     	lda	#$1
  5205 08:0E15: 85 0D        	sta	<L150+scl_1
  5206 08:0E17: A9 00 00     	lda	#$0
  5207 08:0E1A: 85 0F        	sta	<L150+scl_1+2
  5208                        ;	}
  5209                        L10054:
  5210                        	.line	1567
  5211                        ;	else {				/* Stretch a cha
                    in */
  5212 08:0E1C: 82 72 00     	brl	L10055
  5213                        L10053:
  5214                        	.line	1568
  5215                        ;		cs = get_fat(obj, clst);		
                    	/* Check the cluster status */
  5216                        	.line	1569
  5217 08:0E1F: D4 20        	pei	<L149+clst_0+2
  5218 08:0E21: D4 1E        	pei	<L149+clst_0
  5219 08:0E23: D4 1C        	pei	<L149+obj_0+2
  5220 08:0E25: D4 1A        	pei	<L149+obj_0
  5221 08:0E27: 22 8D 06 08  	jsl	~~get_fat
  5222 08:0E2B: 85 05        	sta	<L150+cs_1
  5223 08:0E2D: 86 07        	stx	<L150+cs_1+2
  5224                        ;		if (cs < 2) return 1;			
                    	/* Test for insanity */
  5225                        	.line	1570
  5226 08:0E2F: A5 05        	lda	<L150+cs_1
  5227 08:0E31: C9 02 00     	cmp	#<$2
  5228 08:0E34: A5 07        	lda	<L150+cs_1+2
  5229 08:0E36: E9 00 00     	sbc	#^$2
  5230 08:0E39: 90 03        	bcc	L156
  5231 08:0E3B: 82 19 00     	brl	L10056
  5232                        L156:
  5233                        	.line	1570
  5234 08:0E3E: A9 00 00     	lda	#$0
  5235 08:0E41: AA           	tax
  5236 08:0E42: A9 01 00     	lda	#$1
  5237                        L157:
  Thu Dec  3 2020 22:25                                                Page 107


  5238 08:0E45: A8           	tay
  5239 08:0E46: A5 18        	lda	<L149+2
  5240 08:0E48: 85 20        	sta	<L149+2+8
  5241 08:0E4A: A5 17        	lda	<L149+1
  5242 08:0E4C: 85 1F        	sta	<L149+1+8
  5243 08:0E4E: 2B           	pld
  5244 08:0E4F: 3B           	tsc
  5245 08:0E50: 18           	clc
  5246 08:0E51: 69 1E 00     	adc	#L149+8
  5247 08:0E54: 1B           	tcs
  5248 08:0E55: 98           	tya
  5249 08:0E56: 6B           	rtl
  5250                        ;		if (cs == 0xFFFFFFFF) return cs;	
                    /* Test for disk error */
  5251                        L10056:
  5252                        	.line	1571
  5253 08:0E57: A5 05        	lda	<L150+cs_1
  5254 08:0E59: C9 FF FF     	cmp	#<$ffffffff
  5255 08:0E5C: D0 05        	bne	L158
  5256 08:0E5E: A5 07        	lda	<L150+cs_1+2
  5257 08:0E60: C9 FF FF     	cmp	#^$ffffffff
  5258                        L158:
  5259 08:0E63: F0 03        	beq	L159
  5260 08:0E65: 82 07 00     	brl	L10057
  5261                        L159:
  5262                        	.line	1571
  5263 08:0E68: A6 07        	ldx	<L150+cs_1+2
  5264 08:0E6A: A5 05        	lda	<L150+cs_1
  5265 08:0E6C: 82 D6 FF     	brl	L157
  5266                        ;		if (cs < fs->n_fatent) return cs;	
                    /* It is already followed by next cluster */
  5267                        L10057:
  5268                        	.line	1572
  5269 08:0E6F: A5 05        	lda	<L150+cs_1
  5270 08:0E71: A0 13 00     	ldy	#$13
  5271 08:0E74: D7 13        	cmp	[<L150+fs_1],Y
  5272 08:0E76: A5 07        	lda	<L150+cs_1+2
  5273 08:0E78: A0 15 00     	ldy	#$15
  5274 08:0E7B: F7 13        	sbc	[<L150+fs_1],Y
  5275 08:0E7D: 90 03        	bcc	L160
  5276 08:0E7F: 82 07 00     	brl	L10058
  5277                        L160:
  5278                        	.line	1572
  5279 08:0E82: A6 07        	ldx	<L150+cs_1+2
  5280 08:0E84: A5 05        	lda	<L150+cs_1
  5281 08:0E86: 82 BC FF     	brl	L157
  5282                        ;		scl = clst;				
                    			/* Cluster to start to find */
  5283                        L10058:
  5284                        	.line	1573
  5285 08:0E89: A5 1E        	lda	<L149+clst_0
  5286 08:0E8B: 85 0D        	sta	<L150+scl_1
  5287 08:0E8D: A5 20        	lda	<L149+clst_0+2
  5288 08:0E8F: 85 0F        	sta	<L150+scl_1+2
  5289                        ;	}
  5290                        	.line	1574
  5291                        L10055:
  5292                        ;	if (fs->free_clst == 0) return 0;		
  Thu Dec  3 2020 22:25                                                Page 108


                    /* No free cluster */
  5293                        	.line	1575
  5294 08:0E91: A0 0F 00     	ldy	#$f
  5295 08:0E94: B7 13        	lda	[<L150+fs_1],Y
  5296 08:0E96: A0 11 00     	ldy	#$11
  5297 08:0E99: 17 13        	ora	[<L150+fs_1],Y
  5298 08:0E9B: F0 03        	beq	L161
  5299 08:0E9D: 82 0A 00     	brl	L10059
  5300                        L161:
  5301                        	.line	1575
  5302 08:0EA0: A9 00 00     	lda	#$0
  5303 08:0EA3: AA           	tax
  5304 08:0EA4: A9 00 00     	lda	#$0
  5305 08:0EA7: 82 9B FF     	brl	L157
  5306                        ;
  5307                        ;#if FF_FS_EXFAT
  5308                        ;	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT 
                    volume */
  5309                        ;		ncl = find_bitmap(fs, scl, 1);		
                    		/* Find a free cluster */
  5310                        ;		if (ncl == 0 || ncl == 0xFFFFFFFF) retur
                    n ncl;	/* No free cluster or hard error? */
  5311                        ;		res = change_bitmap(fs, ncl, 1, 1);	
                    		/* Mark the cluster 'in use' */
  5312                        ;		if (res == FR_INT_ERR) return 1;
  5313                        ;		if (res == FR_DISK_ERR) return 0xFFFFFFF
                    F;
  5314                        ;		if (clst == 0) {			
                    				/* Is it a new chain? */
  5315                        ;			obj->stat = 2;			
                    				/* Set status 'contiguous' */
  5316                        ;		} else {				
                    					/* It is a stretched cha
                    in */
  5317                        ;			if (obj->stat == 2 && ncl != scl
                     + 1) {	/* Is the chain got fragmented? */
  5318                        ;				obj->n_cont = scl - obj-
                    >sclust;	/* Set size of the contiguous part */
  5319                        ;				obj->stat = 3;		
                    				/* Change status 'just fragmente
                    d' */
  5320                        ;			}
  5321                        ;		}
  5322                        ;		if (obj->stat != 2) {	/* Is the file n
                    on-contiguous? */
  5323                        ;			if (ncl == clst + 1) {	/* Is th
                    e cluster next to previous one? */
  5324                        ;				obj->n_frag = obj->n_fra
                    g ? obj->n_frag + 1 : 2;	/* Increment size of last framge
                    nt */
  5325                        ;			} else {			
                    	/* New fragment */
  5326                        ;				if (obj->n_frag == 0) ob
                    j->n_frag = 1;
  5327                        ;				res = fill_last_frag(obj
                    , clst, ncl);	/* Fill last fragment on the FAT and lin
                    k it to new one */
  5328                        ;				if (res == FR_OK) obj->n
  Thu Dec  3 2020 22:25                                                Page 109


                    _frag = 1;
  5329                        ;			}
  5330                        ;		}
  5331                        ;	} else
  5332                        ;#endif
  5333                        ;	{	/* On the FAT/FAT32 volume */
  5334                        L10059:
  5335                        	.line	1603
  5336                        ;		ncl = 0;
  5337                        	.line	1604
  5338 08:0EAA: 64 09        	stz	<L150+ncl_1
  5339 08:0EAC: 64 0B        	stz	<L150+ncl_1+2
  5340                        ;		if (scl == clst) {			
                    			/* Stretching an existing chain? */
  5341                        	.line	1605
  5342 08:0EAE: A5 0D        	lda	<L150+scl_1
  5343 08:0EB0: C5 1E        	cmp	<L149+clst_0
  5344 08:0EB2: D0 04        	bne	L162
  5345 08:0EB4: A5 0F        	lda	<L150+scl_1+2
  5346 08:0EB6: C5 20        	cmp	<L149+clst_0+2
  5347                        L162:
  5348 08:0EB8: F0 03        	beq	L163
  5349 08:0EBA: 82 AA 00     	brl	L10060
  5350                        L163:
  5351                        	.line	1605
  5352                        ;			ncl = scl + 1;			
                    			/* Test if next cluster is free */
  5353                        	.line	1606
  5354 08:0EBD: 18           	clc
  5355 08:0EBE: A9 01 00     	lda	#$1
  5356 08:0EC1: 65 0D        	adc	<L150+scl_1
  5357 08:0EC3: 85 09        	sta	<L150+ncl_1
  5358 08:0EC5: A9 00 00     	lda	#$0
  5359 08:0EC8: 65 0F        	adc	<L150+scl_1+2
  5360 08:0ECA: 85 0B        	sta	<L150+ncl_1+2
  5361                        ;			if (ncl >= fs->n_fatent) ncl = 2
                    ;
  5362                        	.line	1607
  5363 08:0ECC: A5 09        	lda	<L150+ncl_1
  5364 08:0ECE: A0 13 00     	ldy	#$13
  5365 08:0ED1: D7 13        	cmp	[<L150+fs_1],Y
  5366 08:0ED3: A5 0B        	lda	<L150+ncl_1+2
  5367 08:0ED5: A0 15 00     	ldy	#$15
  5368 08:0ED8: F7 13        	sbc	[<L150+fs_1],Y
  5369 08:0EDA: B0 03        	bcs	L164
  5370 08:0EDC: 82 0A 00     	brl	L10061
  5371                        L164:
  5372                        	.line	1607
  5373 08:0EDF: A9 02 00     	lda	#$2
  5374 08:0EE2: 85 09        	sta	<L150+ncl_1
  5375 08:0EE4: A9 00 00     	lda	#$0
  5376 08:0EE7: 85 0B        	sta	<L150+ncl_1+2
  5377                        ;			cs = get_fat(obj, ncl);		
                    		/* Get next cluster status */
  5378                        L10061:
  5379                        	.line	1608
  5380 08:0EE9: D4 0B        	pei	<L150+ncl_1+2
  5381 08:0EEB: D4 09        	pei	<L150+ncl_1
  Thu Dec  3 2020 22:25                                                Page 110


  5382 08:0EED: D4 1C        	pei	<L149+obj_0+2
  5383 08:0EEF: D4 1A        	pei	<L149+obj_0
  5384 08:0EF1: 22 8D 06 08  	jsl	~~get_fat
  5385 08:0EF5: 85 05        	sta	<L150+cs_1
  5386 08:0EF7: 86 07        	stx	<L150+cs_1+2
  5387                        ;			if (cs == 1 || cs == 0xFFFFFFFF)
                     return cs;	/* Test for error */
  5388                        	.line	1609
  5389 08:0EF9: A5 05        	lda	<L150+cs_1
  5390 08:0EFB: C9 01 00     	cmp	#<$1
  5391 08:0EFE: D0 05        	bne	L166
  5392 08:0F00: A5 07        	lda	<L150+cs_1+2
  5393 08:0F02: C9 00 00     	cmp	#^$1
  5394                        L166:
  5395 08:0F05: D0 03        	bne	L167
  5396 08:0F07: 82 11 00     	brl	L165
  5397                        L167:
  5398 08:0F0A: A5 05        	lda	<L150+cs_1
  5399 08:0F0C: C9 FF FF     	cmp	#<$ffffffff
  5400 08:0F0F: D0 05        	bne	L168
  5401 08:0F11: A5 07        	lda	<L150+cs_1+2
  5402 08:0F13: C9 FF FF     	cmp	#^$ffffffff
  5403                        L168:
  5404 08:0F16: F0 03        	beq	L169
  5405 08:0F18: 82 07 00     	brl	L10062
  5406                        L169:
  5407                        L165:
  5408                        	.line	1609
  5409 08:0F1B: A6 07        	ldx	<L150+cs_1+2
  5410 08:0F1D: A5 05        	lda	<L150+cs_1
  5411 08:0F1F: 82 23 FF     	brl	L157
  5412                        ;			if (cs != 0) {			
                    			/* Not free? */
  5413                        L10062:
  5414                        	.line	1610
  5415 08:0F22: A5 05        	lda	<L150+cs_1
  5416 08:0F24: 05 07        	ora	<L150+cs_1+2
  5417 08:0F26: D0 03        	bne	L170
  5418 08:0F28: 82 3C 00     	brl	L10063
  5419                        L170:
  5420                        	.line	1610
  5421                        ;				cs = fs->last_clst;	
                    			/* Start at suggested cluster if it is v
                    alid */
  5422                        	.line	1611
  5423 08:0F2B: A0 0B 00     	ldy	#$b
  5424 08:0F2E: B7 13        	lda	[<L150+fs_1],Y
  5425 08:0F30: 85 05        	sta	<L150+cs_1
  5426 08:0F32: A0 0D 00     	ldy	#$d
  5427 08:0F35: B7 13        	lda	[<L150+fs_1],Y
  5428 08:0F37: 85 07        	sta	<L150+cs_1+2
  5429                        ;				if (cs >= 2 && cs < fs->
                    n_fatent) scl = cs;
  5430                        	.line	1612
  5431 08:0F39: A5 05        	lda	<L150+cs_1
  5432 08:0F3B: C9 02 00     	cmp	#<$2
  5433 08:0F3E: A5 07        	lda	<L150+cs_1+2
  5434 08:0F40: E9 00 00     	sbc	#^$2
  Thu Dec  3 2020 22:25                                                Page 111


  5435 08:0F43: B0 03        	bcs	L171
  5436 08:0F45: 82 1B 00     	brl	L10064
  5437                        L171:
  5438 08:0F48: A5 05        	lda	<L150+cs_1
  5439 08:0F4A: A0 13 00     	ldy	#$13
  5440 08:0F4D: D7 13        	cmp	[<L150+fs_1],Y
  5441 08:0F4F: A5 07        	lda	<L150+cs_1+2
  5442 08:0F51: A0 15 00     	ldy	#$15
  5443 08:0F54: F7 13        	sbc	[<L150+fs_1],Y
  5444 08:0F56: 90 03        	bcc	L172
  5445 08:0F58: 82 08 00     	brl	L10064
  5446                        L172:
  5447                        	.line	1612
  5448 08:0F5B: A5 05        	lda	<L150+cs_1
  5449 08:0F5D: 85 0D        	sta	<L150+scl_1
  5450 08:0F5F: A5 07        	lda	<L150+cs_1+2
  5451 08:0F61: 85 0F        	sta	<L150+scl_1+2
  5452                        ;				ncl = 0;
  5453                        L10064:
  5454                        	.line	1613
  5455 08:0F63: 64 09        	stz	<L150+ncl_1
  5456 08:0F65: 64 0B        	stz	<L150+ncl_1+2
  5457                        ;			}
  5458                        	.line	1614
  5459                        ;		}
  5460                        L10063:
  5461                        	.line	1615
  5462                        ;		if (ncl == 0) {	/* The new cluster canno
                    t be contiguous and find another fragment */
  5463                        L10060:
  5464                        	.line	1616
  5465 08:0F67: A5 09        	lda	<L150+ncl_1
  5466 08:0F69: 05 0B        	ora	<L150+ncl_1+2
  5467 08:0F6B: F0 03        	beq	L173
  5468 08:0F6D: 82 A0 00     	brl	L10065
  5469                        L173:
  5470                        	.line	1616
  5471                        ;			ncl = scl;	/* Start cluster
                     */
  5472                        	.line	1617
  5473 08:0F70: A5 0D        	lda	<L150+scl_1
  5474 08:0F72: 85 09        	sta	<L150+ncl_1
  5475 08:0F74: A5 0F        	lda	<L150+scl_1+2
  5476 08:0F76: 85 0B        	sta	<L150+ncl_1+2
  5477                        ;			for (;;) {
  5478                        	.line	1618
  5479                        L10068:
  5480                        	.line	1618
  5481                        ;				ncl++;			
                    				/* Next cluster */
  5482                        	.line	1619
  5483 08:0F78: E6 09        	inc	<L150+ncl_1
  5484 08:0F7A: D0 02        	bne	L174
  5485 08:0F7C: E6 0B        	inc	<L150+ncl_1+2
  5486                        L174:
  5487                        ;				if (ncl >= fs->n_fatent)
                     {		/* Check wrap-around */
  5488                        	.line	1620
  Thu Dec  3 2020 22:25                                                Page 112


  5489 08:0F7E: A5 09        	lda	<L150+ncl_1
  5490 08:0F80: A0 13 00     	ldy	#$13
  5491 08:0F83: D7 13        	cmp	[<L150+fs_1],Y
  5492 08:0F85: A5 0B        	lda	<L150+ncl_1+2
  5493 08:0F87: A0 15 00     	ldy	#$15
  5494 08:0F8A: F7 13        	sbc	[<L150+fs_1],Y
  5495 08:0F8C: B0 03        	bcs	L175
  5496 08:0F8E: 82 21 00     	brl	L10069
  5497                        L175:
  5498                        	.line	1620
  5499                        ;					ncl = 2;
  5500                        	.line	1621
  5501 08:0F91: A9 02 00     	lda	#$2
  5502 08:0F94: 85 09        	sta	<L150+ncl_1
  5503 08:0F96: A9 00 00     	lda	#$0
  5504 08:0F99: 85 0B        	sta	<L150+ncl_1+2
  5505                        ;					if (ncl > scl) r
                    eturn 0;	/* No free cluster found? */
  5506                        	.line	1622
  5507 08:0F9B: A5 0D        	lda	<L150+scl_1
  5508 08:0F9D: C5 09        	cmp	<L150+ncl_1
  5509 08:0F9F: A5 0F        	lda	<L150+scl_1+2
  5510 08:0FA1: E5 0B        	sbc	<L150+ncl_1+2
  5511 08:0FA3: 90 03        	bcc	L176
  5512 08:0FA5: 82 0A 00     	brl	L10070
  5513                        L176:
  5514                        	.line	1622
  5515 08:0FA8: A9 00 00     	lda	#$0
  5516 08:0FAB: AA           	tax
  5517 08:0FAC: A9 00 00     	lda	#$0
  5518 08:0FAF: 82 93 FE     	brl	L157
  5519                        ;				}
  5520                        L10070:
  5521                        	.line	1623
  5522                        ;				cs = get_fat(obj, ncl);	
                    		/* Get the cluster status */
  5523                        L10069:
  5524                        	.line	1624
  5525 08:0FB2: D4 0B        	pei	<L150+ncl_1+2
  5526 08:0FB4: D4 09        	pei	<L150+ncl_1
  5527 08:0FB6: D4 1C        	pei	<L149+obj_0+2
  5528 08:0FB8: D4 1A        	pei	<L149+obj_0
  5529 08:0FBA: 22 8D 06 08  	jsl	~~get_fat
  5530 08:0FBE: 85 05        	sta	<L150+cs_1
  5531 08:0FC0: 86 07        	stx	<L150+cs_1+2
  5532                        ;				if (cs == 0) break;	
                    			/* Found a free cluster? */
  5533                        	.line	1625
  5534 08:0FC2: A5 05        	lda	<L150+cs_1
  5535 08:0FC4: 05 07        	ora	<L150+cs_1+2
  5536 08:0FC6: D0 03        	bne	L177
  5537 08:0FC8: 82 45 00     	brl	L10067
  5538                        L177:
  5539                        ;				if (cs == 1 || cs == 0xF
                    FFFFFFF) return cs;	/* Test for error */
  5540                        	.line	1626
  5541 08:0FCB: A5 05        	lda	<L150+cs_1
  5542 08:0FCD: C9 01 00     	cmp	#<$1
  Thu Dec  3 2020 22:25                                                Page 113


  5543 08:0FD0: D0 05        	bne	L179
  5544 08:0FD2: A5 07        	lda	<L150+cs_1+2
  5545 08:0FD4: C9 00 00     	cmp	#^$1
  5546                        L179:
  5547 08:0FD7: D0 03        	bne	L180
  5548 08:0FD9: 82 11 00     	brl	L178
  5549                        L180:
  5550 08:0FDC: A5 05        	lda	<L150+cs_1
  5551 08:0FDE: C9 FF FF     	cmp	#<$ffffffff
  5552 08:0FE1: D0 05        	bne	L181
  5553 08:0FE3: A5 07        	lda	<L150+cs_1+2
  5554 08:0FE5: C9 FF FF     	cmp	#^$ffffffff
  5555                        L181:
  5556 08:0FE8: F0 03        	beq	L182
  5557 08:0FEA: 82 07 00     	brl	L10071
  5558                        L182:
  5559                        L178:
  5560                        	.line	1626
  5561 08:0FED: A6 07        	ldx	<L150+cs_1+2
  5562 08:0FEF: A5 05        	lda	<L150+cs_1
  5563 08:0FF1: 82 51 FE     	brl	L157
  5564                        ;				if (ncl == scl) return 0
                    ;		/* No free cluster found? */
  5565                        L10071:
  5566                        	.line	1627
  5567 08:0FF4: A5 09        	lda	<L150+ncl_1
  5568 08:0FF6: C5 0D        	cmp	<L150+scl_1
  5569 08:0FF8: D0 04        	bne	L183
  5570 08:0FFA: A5 0B        	lda	<L150+ncl_1+2
  5571 08:0FFC: C5 0F        	cmp	<L150+scl_1+2
  5572                        L183:
  5573 08:0FFE: F0 03        	beq	L184
  5574 08:1000: 82 0A 00     	brl	L10072
  5575                        L184:
  5576                        	.line	1627
  5577 08:1003: A9 00 00     	lda	#$0
  5578 08:1006: AA           	tax
  5579 08:1007: A9 00 00     	lda	#$0
  5580 08:100A: 82 38 FE     	brl	L157
  5581                        ;			}
  5582                        L10072:
  5583                        	.line	1628
  5584                        L10066:
  5585 08:100D: 82 68 FF     	brl	L10068
  5586                        L10067:
  5587                        ;		}
  5588                        	.line	1629
  5589                        ;		res = put_fat(fs, ncl, 0xFFFFFFFF);	
                    	/* Mark the new cluster 'EOC' */
  5590                        L10065:
  5591                        	.line	1630
  5592 08:1010: F4 FF FF     	pea	#^$ffffffff
  5593 08:1013: F4 FF FF     	pea	#<$ffffffff
  5594 08:1016: D4 0B        	pei	<L150+ncl_1+2
  5595 08:1018: D4 09        	pei	<L150+ncl_1
  5596 08:101A: D4 15        	pei	<L150+fs_1+2
  5597 08:101C: D4 13        	pei	<L150+fs_1
  5598 08:101E: 22 FD 08 08  	jsl	~~put_fat
  Thu Dec  3 2020 22:25                                                Page 114


  5599 08:1022: 85 11        	sta	<L150+res_1
  5600                        ;		if (res == FR_OK && clst != 0) {
  5601                        	.line	1631
  5602 08:1024: A5 11        	lda	<L150+res_1
  5603 08:1026: F0 03        	beq	L185
  5604 08:1028: 82 1B 00     	brl	L10073
  5605                        L185:
  5606 08:102B: A5 1E        	lda	<L149+clst_0
  5607 08:102D: 05 20        	ora	<L149+clst_0+2
  5608 08:102F: D0 03        	bne	L186
  5609 08:1031: 82 12 00     	brl	L10073
  5610                        L186:
  5611                        	.line	1631
  5612                        ;			res = put_fat(fs, clst, ncl);	
                    	/* Link it from the previous one if needed */
  5613                        	.line	1632
  5614 08:1034: D4 0B        	pei	<L150+ncl_1+2
  5615 08:1036: D4 09        	pei	<L150+ncl_1
  5616 08:1038: D4 20        	pei	<L149+clst_0+2
  5617 08:103A: D4 1E        	pei	<L149+clst_0
  5618 08:103C: D4 15        	pei	<L150+fs_1+2
  5619 08:103E: D4 13        	pei	<L150+fs_1
  5620 08:1040: 22 FD 08 08  	jsl	~~put_fat
  5621 08:1044: 85 11        	sta	<L150+res_1
  5622                        ;		}
  5623                        	.line	1633
  5624                        ;	}
  5625                        L10073:
  5626                        	.line	1634
  5627                        ;
  5628                        ;	if (res == FR_OK) {			/* Updat
                    e FSINFO if function succeeded. */
  5629                        	.line	1636
  5630 08:1046: A5 11        	lda	<L150+res_1
  5631 08:1048: F0 03        	beq	L187
  5632 08:104A: 82 6D 00     	brl	L10074
  5633                        L187:
  5634                        	.line	1636
  5635                        ;		fs->last_clst = ncl;
  5636                        	.line	1637
  5637 08:104D: A5 09        	lda	<L150+ncl_1
  5638 08:104F: A0 0B 00     	ldy	#$b
  5639 08:1052: 97 13        	sta	[<L150+fs_1],Y
  5640 08:1054: A5 0B        	lda	<L150+ncl_1+2
  5641 08:1056: A0 0D 00     	ldy	#$d
  5642 08:1059: 97 13        	sta	[<L150+fs_1],Y
  5643                        ;		if (fs->free_clst <= fs->n_fatent - 2) f
                    s->free_clst--;
  5644                        	.line	1638
  5645 08:105B: 18           	clc
  5646 08:105C: A9 FE FF     	lda	#$fffe
  5647 08:105F: A0 13 00     	ldy	#$13
  5648 08:1062: 77 13        	adc	[<L150+fs_1],Y
  5649 08:1064: 85 01        	sta	<R0
  5650 08:1066: A9 FF FF     	lda	#$ffff
  5651 08:1069: A0 15 00     	ldy	#$15
  5652 08:106C: 77 13        	adc	[<L150+fs_1],Y
  5653 08:106E: 85 03        	sta	<R0+2
  Thu Dec  3 2020 22:25                                                Page 115


  5654 08:1070: A5 01        	lda	<R0
  5655 08:1072: A0 0F 00     	ldy	#$f
  5656 08:1075: D7 13        	cmp	[<L150+fs_1],Y
  5657 08:1077: A5 03        	lda	<R0+2
  5658 08:1079: A0 11 00     	ldy	#$11
  5659 08:107C: F7 13        	sbc	[<L150+fs_1],Y
  5660 08:107E: B0 03        	bcs	L188
  5661 08:1080: 82 1B 00     	brl	L10075
  5662                        L188:
  5663                        	.line	1638
  5664 08:1083: 18           	clc
  5665 08:1084: A9 FF FF     	lda	#$ffff
  5666 08:1087: A0 0F 00     	ldy	#$f
  5667 08:108A: 77 13        	adc	[<L150+fs_1],Y
  5668 08:108C: A0 0F 00     	ldy	#$f
  5669 08:108F: 97 13        	sta	[<L150+fs_1],Y
  5670 08:1091: A9 FF FF     	lda	#$ffff
  5671 08:1094: A0 11 00     	ldy	#$11
  5672 08:1097: 77 13        	adc	[<L150+fs_1],Y
  5673 08:1099: A0 11 00     	ldy	#$11
  5674 08:109C: 97 13        	sta	[<L150+fs_1],Y
  5675                        ;		fs->fsi_flag |= 1;
  5676                        L10075:
  5677                        	.line	1639
  5678 08:109E: 18           	clc
  5679 08:109F: A9 04 00     	lda	#$4
  5680 08:10A2: 65 13        	adc	<L150+fs_1
  5681 08:10A4: 85 01        	sta	<R0
  5682 08:10A6: A9 00 00     	lda	#$0
  5683 08:10A9: 65 15        	adc	<L150+fs_1+2
  5684 08:10AB: 85 03        	sta	<R0+2
  5685 08:10AD: E2 20        	sep	#$20
  5686                        	longa	off
  5687 08:10AF: A7 01        	lda	[<R0]
  5688 08:10B1: 09 01        	ora	#<$1
  5689 08:10B3: 87 01        	sta	[<R0]
  5690 08:10B5: C2 20        	rep	#$20
  5691                        	longa	on
  5692                        ;	} else {
  5693                        	.line	1640
  5694 08:10B7: 82 26 00     	brl	L10076
  5695                        L10074:
  5696                        	.line	1640
  5697                        ;		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF 
                    : 1;	/* Failed. Generate error status */
  5698                        	.line	1641
  5699 08:10BA: A5 11        	lda	<L150+res_1
  5700 08:10BC: C9 01 00     	cmp	#<$1
  5701 08:10BF: F0 03        	beq	L190
  5702 08:10C1: 82 09 00     	brl	L189
  5703                        L190:
  5704 08:10C4: A9 FF FF     	lda	#$ffff
  5705 08:10C7: AA           	tax
  5706 08:10C8: A9 FF FF     	lda	#$ffff
  5707 08:10CB: 80 07        	bra	L191
  5708                        L189:
  5709 08:10CD: A9 00 00     	lda	#$0
  5710 08:10D0: AA           	tax
  Thu Dec  3 2020 22:25                                                Page 116


  5711 08:10D1: A9 01 00     	lda	#$1
  5712                        L191:
  5713 08:10D4: 85 01        	sta	<R0
  5714 08:10D6: 86 03        	stx	<R0+2
  5715 08:10D8: A5 01        	lda	<R0
  5716 08:10DA: 85 09        	sta	<L150+ncl_1
  5717 08:10DC: A5 03        	lda	<R0+2
  5718 08:10DE: 85 0B        	sta	<L150+ncl_1+2
  5719                        ;	}
  5720                        	.line	1642
  5721                        L10076:
  5722                        ;
  5723                        ;	return ncl;		/* Return new cluster nu
                    mber or error status */
  5724                        	.line	1644
  5725 08:10E0: A6 0B        	ldx	<L150+ncl_1+2
  5726 08:10E2: A5 09        	lda	<L150+ncl_1
  5727 08:10E4: 82 5E FD     	brl	L157
  5728                        ;}
  5729                        	.line	1645
  5730                        	.endblock	1645
  5731             00000016   L149	equ	22
  5732             00000005   L150	equ	5
  5733 08:10E7:              	ends
  5734                        	efunc
  5735                        	.endfunc	1645,5,22
  5736                        	.line	1645
  5737                        ;
  5738                        ;#endif /* !FF_FS_READONLY */
  5739                        ;
  5740                        ;
  5741                        ;
  5742                        ;
  5743                        ;#if FF_USE_FASTSEEK
  5744                        ;/*-----------------------------------------------
                    ------------------------*/
  5745                        ;/* FAT handling - Convert offset into cluster wit
                    h link map table        */
  5746                        ;/*-----------------------------------------------
                    ------------------------*/
  5747                        ;
  5748                        ;static DWORD clmt_clust (	/* <2:Error, >=2
                    :Cluster number */
  5749                        ;	FIL* fp,		/* Pointer to the file o
                    bject */
  5750                        ;	FSIZE_t ofs		/* File offset to be con
                    verted to cluster# */
  5751                        ;)
  5752                        ;{
  5753                        ;	DWORD cl, ncl, *tbl;
  5754                        ;	FATFS *fs = fp->obj.fs;
  5755                        ;
  5756                        ;
  5757                        ;	tbl = fp->cltbl + 1;	/* Top of CLMT */
  5758                        ;	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Clust
                    er order from top of the file */
  5759                        ;	for (;;) {
  5760                        ;		ncl = *tbl++;			/* Numbe
  Thu Dec  3 2020 22:25                                                Page 117


                    r of cluters in the fragment */
  5761                        ;		if (ncl == 0) return 0;	/* End of table?
                     (error) */
  5762                        ;		if (cl < ncl) break;	/* In this fragm
                    ent? */
  5763                        ;		cl -= ncl; tbl++;		/* Next 
                    fragment */
  5764                        ;	}
  5765                        ;	return cl + *tbl;	/* Return the cluster nu
                    mber */
  5766                        ;}
  5767                        ;
  5768                        ;#endif	/* FF_USE_FASTSEEK */
  5769                        ;
  5770                        ;
  5771                        ;
  5772                        ;
  5773                        ;/*-----------------------------------------------
                    ------------------------*/
  5774                        ;/* Directory handling - Fill a cluster with zeros
                                            */
  5775                        ;/*-----------------------------------------------
                    ------------------------*/
  5776                        ;
  5777                        ;#if !FF_FS_READONLY
  5778                        ;static FRESULT dir_clear (	/* Returns FR_OK
                     or FR_DISK_ERR */
  5779                        ;	FATFS *fs,		/* Filesystem object */
  5780                        ;	DWORD clst		/* Directory table to cl
                    ear */
  5781                        ;)
  5782                        ;{
  5783                        	.line	1687
  5784                        	.line	1691
  5785                        	FFDOS
  5786                        	func
  5787                        	.function	1691
  5788                        ~~dir_clear:
  5789                        	longa	on
  5790                        	longi	on
  5791 08:10E7: 3B           	tsc
  5792 08:10E8: 38           	sec
  5793 08:10E9: E9 14 00     	sbc	#L192
  5794 08:10EC: 1B           	tcs
  5795 08:10ED: 0B           	phd
  5796 08:10EE: 5B           	tcd
  5797             00000004   fs_0	set	4
  5798             00000008   clst_0	set	8
  5799                        	.block	1691
  5800                        ;	LBA_t sect;
  5801                        ;	UINT n, szb;
  5802                        ;	BYTE *ibuf;
  5803                        ;
  5804                        ;
  5805                        ;	if (sync_window(fs) != FR_OK) return FR_DISK_ERR
                    ;	/* Flush disk access window */
  5806             00000000   sect_1	set	0
  5807             00000004   n_1	set	4
  Thu Dec  3 2020 22:25                                                Page 118


  5808             00000006   szb_1	set	6
  5809             00000008   ibuf_1	set	8
  5810                        	.sym	sect,0,18,1,32
  5811                        	.sym	n,4,16,1,16
  5812                        	.sym	szb,6,16,1,16
  5813                        	.sym	ibuf,8,142,1,32
  5814                        	.sym	fs,4,138,6,32,80
  5815                        	.sym	clst,8,18,6,32
  5816                        	.line	1697
  5817 08:10EF: D4 1A        	pei	<L192+fs_0+2
  5818 08:10F1: D4 18        	pei	<L192+fs_0
  5819 08:10F3: 22 11 03 08  	jsl	~~sync_window
  5820 08:10F7: AA           	tax
  5821 08:10F8: D0 03        	bne	L195
  5822 08:10FA: 82 15 00     	brl	L10077
  5823                        L195:
  5824                        	.line	1697
  5825 08:10FD: A9 01 00     	lda	#$1
  5826                        L196:
  5827 08:1100: A8           	tay
  5828 08:1101: A5 16        	lda	<L192+2
  5829 08:1103: 85 1E        	sta	<L192+2+8
  5830 08:1105: A5 15        	lda	<L192+1
  5831 08:1107: 85 1D        	sta	<L192+1+8
  5832 08:1109: 2B           	pld
  5833 08:110A: 3B           	tsc
  5834 08:110B: 18           	clc
  5835 08:110C: 69 1C 00     	adc	#L192+8
  5836 08:110F: 1B           	tcs
  5837 08:1110: 98           	tya
  5838 08:1111: 6B           	rtl
  5839                        ;	sect = clst2sect(fs, clst);		/* Top o
                    f the cluster */
  5840                        L10077:
  5841                        	.line	1698
  5842 08:1112: D4 1E        	pei	<L192+clst_0+2
  5843 08:1114: D4 1C        	pei	<L192+clst_0
  5844 08:1116: D4 1A        	pei	<L192+fs_0+2
  5845 08:1118: D4 18        	pei	<L192+fs_0
  5846 08:111A: 22 FE 05 08  	jsl	~~clst2sect
  5847 08:111E: 85 09        	sta	<L193+sect_1
  5848 08:1120: 86 0B        	stx	<L193+sect_1+2
  5849                        ;	fs->winsect = sect;				
                    /* Set window to top of the cluster */
  5850                        	.line	1699
  5851 08:1122: A5 09        	lda	<L193+sect_1
  5852 08:1124: A0 2B 00     	ldy	#$2b
  5853 08:1127: 97 18        	sta	[<L192+fs_0],Y
  5854 08:1129: A5 0B        	lda	<L193+sect_1+2
  5855 08:112B: A0 2D 00     	ldy	#$2d
  5856 08:112E: 97 18        	sta	[<L192+fs_0],Y
  5857                        ;	mem_set(fs->win, 0, sizeof fs->win);	/* Clear
                     window buffer */
  5858                        	.line	1700
  5859 08:1130: F4 00 02     	pea	#<$200
  5860 08:1133: F4 00 00     	pea	#<$0
  5861 08:1136: 18           	clc
  5862 08:1137: A9 2F 00     	lda	#$2f
  Thu Dec  3 2020 22:25                                                Page 119


  5863 08:113A: 65 18        	adc	<L192+fs_0
  5864 08:113C: 85 01        	sta	<R0
  5865 08:113E: A9 00 00     	lda	#$0
  5866 08:1141: 65 1A        	adc	<L192+fs_0+2
  5867 08:1143: 85 03        	sta	<R0+2
  5868 08:1145: D4 03        	pei	<R0+2
  5869 08:1147: D4 01        	pei	<R0
  5870 08:1149: 22 DF 01 08  	jsl	~~mem_set
  5871                        ;#if FF_USE_LFN == 3		/* Quick table c
                    lear by using multi-secter write */
  5872                        ;	/* Allocate a temporary buffer */
  5873                        ;	for (szb = ((DWORD)fs->csize * SS(fs) >= MAX_MAL
                    LOC) ? MAX_MALLOC : fs->csize * SS(fs), ibuf = 0; szb > SS(f
                    s) && (ibuf = ff_memalloc(szb)) == 0; szb /= 2) ;
  5874                        ;	if (szb > SS(fs)) {		/* Buffer alloca
                    ted? */
  5875                        ;		mem_set(ibuf, 0, szb);
  5876                        ;		szb /= SS(fs);		/* Bytes -> Sect
                    ors */
  5877                        ;		for (n = 0; n < fs->csize && disk_write(
                    fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	
                    /* Fill the cluster with 0 */
  5878                        ;		ff_memfree(ibuf);
  5879                        ;	} else
  5880                        ;#endif
  5881                        ;	{
  5882                        	.line	1711
  5883                        ;		ibuf = fs->win; szb = 1;	/* Use w
                    indow buffer (many single-sector writes may take a time) */
  5884                        	.line	1712
  5885 08:114D: 18           	clc
  5886 08:114E: A9 2F 00     	lda	#$2f
  5887 08:1151: 65 18        	adc	<L192+fs_0
  5888 08:1153: 85 11        	sta	<L193+ibuf_1
  5889 08:1155: A9 00 00     	lda	#$0
  5890 08:1158: 65 1A        	adc	<L192+fs_0+2
  5891 08:115A: 85 13        	sta	<L193+ibuf_1+2
  5892                        	.line	1712
  5893 08:115C: A9 01 00     	lda	#$1
  5894 08:115F: 85 0F        	sta	<L193+szb_1
  5895                        ;		for (n = 0; n < fs->csize && disk_write(
                    fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	
                    /* Fill the cluster with 0 */
  5896                        	.line	1713
  5897 08:1161: 64 0D        	stz	<L193+n_1
  5898 08:1163: 82 07 00     	brl	L10081
  5899                        L10080:
  5900                        	.line	1713
  5901                        L10078:
  5902 08:1166: 18           	clc
  5903 08:1167: A5 0D        	lda	<L193+n_1
  5904 08:1169: 65 0F        	adc	<L193+szb_1
  5905 08:116B: 85 0D        	sta	<L193+n_1
  5906                        L10081:
  5907 08:116D: A5 0D        	lda	<L193+n_1
  5908 08:116F: A0 09 00     	ldy	#$9
  5909 08:1172: D7 18        	cmp	[<L192+fs_0],Y
  5910 08:1174: 90 03        	bcc	L198
  Thu Dec  3 2020 22:25                                                Page 120


  5911 08:1176: 82 2D 00     	brl	L197
  5912                        L198:
  5913 08:1179: D4 0F        	pei	<L193+szb_1
  5914 08:117B: A5 0D        	lda	<L193+n_1
  5915 08:117D: 85 01        	sta	<R0
  5916 08:117F: 64 03        	stz	<R0+2
  5917 08:1181: 18           	clc
  5918 08:1182: A5 01        	lda	<R0
  5919 08:1184: 65 09        	adc	<L193+sect_1
  5920 08:1186: 85 05        	sta	<R1
  5921 08:1188: A5 03        	lda	<R0+2
  5922 08:118A: 65 0B        	adc	<L193+sect_1+2
  5923 08:118C: 85 07        	sta	<R1+2
  5924 08:118E: D4 07        	pei	<R1+2
  5925 08:1190: D4 05        	pei	<R1
  5926 08:1192: D4 13        	pei	<L193+ibuf_1+2
  5927 08:1194: D4 11        	pei	<L193+ibuf_1
  5928 08:1196: A0 01 00     	ldy	#$1
  5929 08:1199: B7 18        	lda	[<L192+fs_0],Y
  5930 08:119B: 48           	pha
  5931 08:119C: 22 xx xx xx  	jsl	~~disk_write
  5932 08:11A0: AA           	tax
  5933 08:11A1: D0 03        	bne	L199
  5934 08:11A3: 82 C0 FF     	brl	L10080
  5935                        L199:
  5936                        L197:
  5937                        L10079:
  5938                        ;	}
  5939                        	.line	1714
  5940                        ;	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
  5941                        	.line	1715
  5942 08:11A6: A5 0D        	lda	<L193+n_1
  5943 08:11A8: A0 09 00     	ldy	#$9
  5944 08:11AB: D7 18        	cmp	[<L192+fs_0],Y
  5945 08:11AD: F0 03        	beq	L201
  5946 08:11AF: 82 05 00     	brl	L200
  5947                        L201:
  5948 08:11B2: A9 00 00     	lda	#$0
  5949 08:11B5: 80 03        	bra	L202
  5950                        L200:
  5951 08:11B7: A9 01 00     	lda	#$1
  5952                        L202:
  5953 08:11BA: 82 43 FF     	brl	L196
  5954                        ;}
  5955                        	.line	1716
  5956                        	.endblock	1716
  5957             00000014   L192	equ	20
  5958             00000009   L193	equ	9
  5959 08:11BD:              	ends
  5960                        	efunc
  5961                        	.endfunc	1716,9,20
  5962                        	.line	1716
  5963                        ;#endif	/* !FF_FS_READONLY */
  5964                        ;
  5965                        ;
  5966                        ;
  5967                        ;
  5968                        ;/*-----------------------------------------------
  Thu Dec  3 2020 22:25                                                Page 121


                    ------------------------*/
  5969                        ;/* Directory handling - Set directory index      
                                            */
  5970                        ;/*-----------------------------------------------
                    ------------------------*/
  5971                        ;
  5972                        ;static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !
                    =0:error */
  5973                        ;	DIR* dp,		/* Pointer to directory 
                    object */
  5974                        ;	DWORD ofs		/* Offset of directory t
                    able */
  5975                        ;)
  5976                        ;{
  5977                        	.line	1726
  5978                        	.line	1730
  5979                        	FFDOS
  5980                        	func
  5981                        	.function	1730
  5982                        ~~dir_sdi:
  5983                        	longa	on
  5984                        	longi	on
  5985 08:11BD: 3B           	tsc
  5986 08:11BE: 38           	sec
  5987 08:11BF: E9 14 00     	sbc	#L203
  5988 08:11C2: 1B           	tcs
  5989 08:11C3: 0B           	phd
  5990 08:11C4: 5B           	tcd
  5991             00000004   dp_0	set	4
  5992             00000008   ofs_0	set	8
  5993                        	.block	1730
  5994                        ;	DWORD csz, clst;
  5995                        ;	FATFS *fs = dp->obj.fs;
  5996                        ;
  5997                        ;
  5998                        ;	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type =
                    = FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	
                    /* Check range of offset and alignment */
  5999             00000000   csz_1	set	0
  6000             00000004   clst_1	set	4
  6001             00000008   fs_1	set	8
  6002                        	.sym	csz,0,18,1,32
  6003                        	.sym	clst,4,18,1,32
  6004                        	.sym	fs,8,138,1,32,80
  6005                        	.sym	dp,4,138,6,32,83
  6006                        	.sym	ofs,8,18,6,32
  6007 08:11C5: A7 18        	lda	[<L203+dp_0]
  6008 08:11C7: 85 11        	sta	<L204+fs_1
  6009 08:11C9: A0 02 00     	ldy	#$2
  6010 08:11CC: B7 18        	lda	[<L203+dp_0],Y
  6011 08:11CE: 85 13        	sta	<L204+fs_1+2
  6012                        	.line	1735
  6013 08:11D0: 82 16 00     	brl	L207
  6014 08:11D3: E2 20        	sep	#$20
  6015                        	longa	off
  6016 08:11D5: A7 11        	lda	[<L204+fs_1]
  6017 08:11D7: C9 04        	cmp	#<$4
  6018 08:11D9: C2 20        	rep	#$20
  Thu Dec  3 2020 22:25                                                Page 122


  6019                        	longa	on
  6020 08:11DB: F0 03        	beq	L208
  6021 08:11DD: 82 09 00     	brl	L207
  6022                        L208:
  6023 08:11E0: A9 00 10     	lda	#$1000
  6024 08:11E3: AA           	tax
  6025 08:11E4: A9 00 00     	lda	#$0
  6026 08:11E7: 80 07        	bra	L209
  6027                        L207:
  6028 08:11E9: A9 20 00     	lda	#$20
  6029 08:11EC: AA           	tax
  6030 08:11ED: A9 00 00     	lda	#$0
  6031                        L209:
  6032 08:11F0: 85 01        	sta	<R0
  6033 08:11F2: 86 03        	stx	<R0+2
  6034 08:11F4: A5 1C        	lda	<L203+ofs_0
  6035 08:11F6: C5 01        	cmp	<R0
  6036 08:11F8: A5 1E        	lda	<L203+ofs_0+2
  6037 08:11FA: E5 03        	sbc	<R0+2
  6038 08:11FC: 90 03        	bcc	L210
  6039 08:11FE: 82 0A 00     	brl	L206
  6040                        L210:
  6041 08:1201: A5 1C        	lda	<L203+ofs_0
  6042 08:1203: 29 1F 00     	and	#<$1f
  6043 08:1206: D0 03        	bne	L211
  6044 08:1208: 82 15 00     	brl	L10082
  6045                        L211:
  6046                        L206:
  6047                        	.line	1735
  6048                        ;		return FR_INT_ERR;
  6049                        	.line	1736
  6050 08:120B: A9 02 00     	lda	#$2
  6051                        L212:
  6052 08:120E: A8           	tay
  6053 08:120F: A5 16        	lda	<L203+2
  6054 08:1211: 85 1E        	sta	<L203+2+8
  6055 08:1213: A5 15        	lda	<L203+1
  6056 08:1215: 85 1D        	sta	<L203+1+8
  6057 08:1217: 2B           	pld
  6058 08:1218: 3B           	tsc
  6059 08:1219: 18           	clc
  6060 08:121A: 69 1C 00     	adc	#L203+8
  6061 08:121D: 1B           	tcs
  6062 08:121E: 98           	tya
  6063 08:121F: 6B           	rtl
  6064                        ;	}
  6065                        	.line	1737
  6066                        ;	dp->dptr = ofs;				/* Set c
                    urrent offset */
  6067                        L10082:
  6068                        	.line	1738
  6069 08:1220: A5 1C        	lda	<L203+ofs_0
  6070 08:1222: A0 10 00     	ldy	#$10
  6071 08:1225: 97 18        	sta	[<L203+dp_0],Y
  6072 08:1227: A5 1E        	lda	<L203+ofs_0+2
  6073 08:1229: A0 12 00     	ldy	#$12
  6074 08:122C: 97 18        	sta	[<L203+dp_0],Y
  6075                        ;	clst = dp->obj.sclust;		/* Table start c
  Thu Dec  3 2020 22:25                                                Page 123


                    luster (0:root) */
  6076                        	.line	1739
  6077 08:122E: A0 08 00     	ldy	#$8
  6078 08:1231: B7 18        	lda	[<L203+dp_0],Y
  6079 08:1233: 85 0D        	sta	<L204+clst_1
  6080 08:1235: A0 0A 00     	ldy	#$a
  6081 08:1238: B7 18        	lda	[<L203+dp_0],Y
  6082 08:123A: 85 0F        	sta	<L204+clst_1+2
  6083                        ;	if (clst == 0 && fs->fs_type >= FS_FAT32) {	
                    /* Replace cluster# 0 with root cluster# */
  6084                        	.line	1740
  6085 08:123C: A5 0D        	lda	<L204+clst_1
  6086 08:123E: 05 0F        	ora	<L204+clst_1+2
  6087 08:1240: F0 03        	beq	L213
  6088 08:1242: 82 29 00     	brl	L10083
  6089                        L213:
  6090 08:1245: E2 20        	sep	#$20
  6091                        	longa	off
  6092 08:1247: A7 11        	lda	[<L204+fs_1]
  6093 08:1249: C9 03        	cmp	#<$3
  6094 08:124B: C2 20        	rep	#$20
  6095                        	longa	on
  6096 08:124D: B0 03        	bcs	L214
  6097 08:124F: 82 1C 00     	brl	L10083
  6098                        L214:
  6099                        	.line	1740
  6100                        ;		clst = (DWORD)fs->dirbase;
  6101                        	.line	1741
  6102 08:1252: A0 23 00     	ldy	#$23
  6103 08:1255: B7 11        	lda	[<L204+fs_1],Y
  6104 08:1257: 85 0D        	sta	<L204+clst_1
  6105 08:1259: A0 25 00     	ldy	#$25
  6106 08:125C: B7 11        	lda	[<L204+fs_1],Y
  6107 08:125E: 85 0F        	sta	<L204+clst_1+2
  6108                        ;		if (FF_FS_EXFAT) dp->obj.stat = 0;	
                    /* exFAT: Root dir has an FAT chain */
  6109                        	.line	1742
  6110 08:1260: 82 0B 00     	brl	L10084
  6111                        	.line	1742
  6112 08:1263: E2 20        	sep	#$20
  6113                        	longa	off
  6114 08:1265: A9 00        	lda	#$0
  6115 08:1267: A0 07 00     	ldy	#$7
  6116 08:126A: 97 18        	sta	[<L203+dp_0],Y
  6117 08:126C: C2 20        	rep	#$20
  6118                        	longa	on
  6119                        ;	}
  6120                        L10084:
  6121                        	.line	1743
  6122                        ;
  6123                        ;	if (clst == 0) {	/* Static table (root-di
                    rectory on the FAT volume) */
  6124                        L10083:
  6125                        	.line	1745
  6126 08:126E: A5 0D        	lda	<L204+clst_1
  6127 08:1270: 05 0F        	ora	<L204+clst_1+2
  6128 08:1272: F0 03        	beq	L215
  6129 08:1274: 82 4C 00     	brl	L10085
  Thu Dec  3 2020 22:25                                                Page 124


  6130                        L215:
  6131                        	.line	1745
  6132                        ;		if (ofs / SZDIRE >= fs->n_rootdir) retur
                    n FR_INT_ERR;	/* Is index out of range? */
  6133                        	.line	1746
  6134 08:1277: A0 00 00     	ldy	#$0
  6135 08:127A: 5A           	phy
  6136 08:127B: A0 07 00     	ldy	#$7
  6137 08:127E: B7 11        	lda	[<L204+fs_1],Y
  6138 08:1280: 7A           	ply
  6139 08:1281: 2A           	rol	A
  6140 08:1282: 6A           	ror	A
  6141 08:1283: 10 01        	bpl	L216
  6142 08:1285: 88           	dey
  6143                        L216:
  6144 08:1286: 85 01        	sta	<R0
  6145 08:1288: 84 03        	sty	<R0+2
  6146 08:128A: D4 1E        	pei	<L203+ofs_0+2
  6147 08:128C: D4 1C        	pei	<L203+ofs_0
  6148 08:128E: A9 05 00     	lda	#$5
  6149                        	xref	~~~llsr
  6150 08:1291: 22 xx xx xx  	jsl	~~~llsr
  6151 08:1295: 85 05        	sta	<R1
  6152 08:1297: 86 07        	stx	<R1+2
  6153 08:1299: A5 05        	lda	<R1
  6154 08:129B: C5 01        	cmp	<R0
  6155 08:129D: A5 07        	lda	<R1+2
  6156 08:129F: E5 03        	sbc	<R0+2
  6157 08:12A1: B0 03        	bcs	L217
  6158 08:12A3: 82 06 00     	brl	L10086
  6159                        L217:
  6160                        	.line	1746
  6161 08:12A6: A9 02 00     	lda	#$2
  6162 08:12A9: 82 62 FF     	brl	L212
  6163                        ;		dp->sect = fs->dirbase;
  6164                        L10086:
  6165                        	.line	1747
  6166 08:12AC: A0 23 00     	ldy	#$23
  6167 08:12AF: B7 11        	lda	[<L204+fs_1],Y
  6168 08:12B1: A0 18 00     	ldy	#$18
  6169 08:12B4: 97 18        	sta	[<L203+dp_0],Y
  6170 08:12B6: A0 25 00     	ldy	#$25
  6171 08:12B9: B7 11        	lda	[<L204+fs_1],Y
  6172 08:12BB: A0 1A 00     	ldy	#$1a
  6173 08:12BE: 97 18        	sta	[<L203+dp_0],Y
  6174                        ;
  6175                        ;	} else {			/* Dynamic table
                     (sub-directory or root-directory on the FAT32/exFAT volume)
                     */
  6176                        	.line	1749
  6177 08:12C0: 82 AC 00     	brl	L10087
  6178                        L10085:
  6179                        	.line	1749
  6180                        ;		csz = (DWORD)fs->csize * SS(fs);	
                    /* Bytes per cluster */
  6181                        	.line	1750
  6182 08:12C3: A0 00 00     	ldy	#$0
  6183 08:12C6: 5A           	phy
  Thu Dec  3 2020 22:25                                                Page 125


  6184 08:12C7: A0 09 00     	ldy	#$9
  6185 08:12CA: B7 11        	lda	[<L204+fs_1],Y
  6186 08:12CC: 7A           	ply
  6187 08:12CD: 2A           	rol	A
  6188 08:12CE: 6A           	ror	A
  6189 08:12CF: 10 01        	bpl	L218
  6190 08:12D1: 88           	dey
  6191                        L218:
  6192 08:12D2: 85 01        	sta	<R0
  6193 08:12D4: 84 03        	sty	<R0+2
  6194 08:12D6: D4 03        	pei	<R0+2
  6195 08:12D8: D4 01        	pei	<R0
  6196 08:12DA: A9 09 00     	lda	#$9
  6197                        	xref	~~~lasl
  6198 08:12DD: 22 xx xx xx  	jsl	~~~lasl
  6199 08:12E1: 85 09        	sta	<L204+csz_1
  6200 08:12E3: 86 0B        	stx	<L204+csz_1+2
  6201                        ;		while (ofs >= csz) {			
                    	/* Follow cluster chain */
  6202                        	.line	1751
  6203                        L10088:
  6204 08:12E5: A5 1C        	lda	<L203+ofs_0
  6205 08:12E7: C5 09        	cmp	<L204+csz_1
  6206 08:12E9: A5 1E        	lda	<L203+ofs_0+2
  6207 08:12EB: E5 0B        	sbc	<L204+csz_1+2
  6208 08:12ED: B0 03        	bcs	L219
  6209 08:12EF: 82 5F 00     	brl	L10089
  6210                        L219:
  6211                        	.line	1751
  6212                        ;			clst = get_fat(&dp->obj, clst);	
                    			/* Get next cluster */
  6213                        	.line	1752
  6214 08:12F2: D4 0F        	pei	<L204+clst_1+2
  6215 08:12F4: D4 0D        	pei	<L204+clst_1
  6216 08:12F6: D4 1A        	pei	<L203+dp_0+2
  6217 08:12F8: D4 18        	pei	<L203+dp_0
  6218 08:12FA: 22 8D 06 08  	jsl	~~get_fat
  6219 08:12FE: 85 0D        	sta	<L204+clst_1
  6220 08:1300: 86 0F        	stx	<L204+clst_1+2
  6221                        ;			if (clst == 0xFFFFFFFF) return F
                    R_DISK_ERR;	/* Disk error */
  6222                        	.line	1753
  6223 08:1302: A5 0D        	lda	<L204+clst_1
  6224 08:1304: C9 FF FF     	cmp	#<$ffffffff
  6225 08:1307: D0 05        	bne	L220
  6226 08:1309: A5 0F        	lda	<L204+clst_1+2
  6227 08:130B: C9 FF FF     	cmp	#^$ffffffff
  6228                        L220:
  6229 08:130E: F0 03        	beq	L221
  6230 08:1310: 82 06 00     	brl	L10090
  6231                        L221:
  6232                        	.line	1753
  6233 08:1313: A9 01 00     	lda	#$1
  6234 08:1316: 82 F5 FE     	brl	L212
  6235                        ;			if (clst < 2 || clst >= fs->n_fa
                    tent) return FR_INT_ERR;	/* Reached to end of table or in
                    ternal error */
  6236                        L10090:
  Thu Dec  3 2020 22:25                                                Page 126


  6237                        	.line	1754
  6238 08:1319: A5 0D        	lda	<L204+clst_1
  6239 08:131B: C9 02 00     	cmp	#<$2
  6240 08:131E: A5 0F        	lda	<L204+clst_1+2
  6241 08:1320: E9 00 00     	sbc	#^$2
  6242 08:1323: B0 03        	bcs	L223
  6243 08:1325: 82 13 00     	brl	L222
  6244                        L223:
  6245 08:1328: A5 0D        	lda	<L204+clst_1
  6246 08:132A: A0 13 00     	ldy	#$13
  6247 08:132D: D7 11        	cmp	[<L204+fs_1],Y
  6248 08:132F: A5 0F        	lda	<L204+clst_1+2
  6249 08:1331: A0 15 00     	ldy	#$15
  6250 08:1334: F7 11        	sbc	[<L204+fs_1],Y
  6251 08:1336: B0 03        	bcs	L224
  6252 08:1338: 82 06 00     	brl	L10091
  6253                        L224:
  6254                        L222:
  6255                        	.line	1754
  6256 08:133B: A9 02 00     	lda	#$2
  6257 08:133E: 82 CD FE     	brl	L212
  6258                        ;			ofs -= csz;
  6259                        L10091:
  6260                        	.line	1755
  6261 08:1341: 38           	sec
  6262 08:1342: A5 1C        	lda	<L203+ofs_0
  6263 08:1344: E5 09        	sbc	<L204+csz_1
  6264 08:1346: 85 1C        	sta	<L203+ofs_0
  6265 08:1348: A5 1E        	lda	<L203+ofs_0+2
  6266 08:134A: E5 0B        	sbc	<L204+csz_1+2
  6267 08:134C: 85 1E        	sta	<L203+ofs_0+2
  6268                        ;		}
  6269                        	.line	1756
  6270 08:134E: 82 94 FF     	brl	L10088
  6271                        L10089:
  6272                        ;		dp->sect = clst2sect(fs, clst);
  6273                        	.line	1757
  6274 08:1351: D4 0F        	pei	<L204+clst_1+2
  6275 08:1353: D4 0D        	pei	<L204+clst_1
  6276 08:1355: D4 13        	pei	<L204+fs_1+2
  6277 08:1357: D4 11        	pei	<L204+fs_1
  6278 08:1359: 22 FE 05 08  	jsl	~~clst2sect
  6279 08:135D: 85 01        	sta	<R0
  6280 08:135F: 86 03        	stx	<R0+2
  6281 08:1361: A5 01        	lda	<R0
  6282 08:1363: A0 18 00     	ldy	#$18
  6283 08:1366: 97 18        	sta	[<L203+dp_0],Y
  6284 08:1368: A5 03        	lda	<R0+2
  6285 08:136A: A0 1A 00     	ldy	#$1a
  6286 08:136D: 97 18        	sta	[<L203+dp_0],Y
  6287                        ;	}
  6288                        	.line	1758
  6289                        L10087:
  6290                        ;	dp->clust = clst;				
                    	/* Current cluster# */
  6291                        	.line	1759
  6292 08:136F: A5 0D        	lda	<L204+clst_1
  6293 08:1371: A0 14 00     	ldy	#$14
  Thu Dec  3 2020 22:25                                                Page 127


  6294 08:1374: 97 18        	sta	[<L203+dp_0],Y
  6295 08:1376: A5 0F        	lda	<L204+clst_1+2
  6296 08:1378: A0 16 00     	ldy	#$16
  6297 08:137B: 97 18        	sta	[<L203+dp_0],Y
  6298                        ;	if (dp->sect == 0) return FR_INT_ERR;
  6299                        	.line	1760
  6300 08:137D: A0 18 00     	ldy	#$18
  6301 08:1380: B7 18        	lda	[<L203+dp_0],Y
  6302 08:1382: A0 1A 00     	ldy	#$1a
  6303 08:1385: 17 18        	ora	[<L203+dp_0],Y
  6304 08:1387: F0 03        	beq	L225
  6305 08:1389: 82 06 00     	brl	L10092
  6306                        L225:
  6307                        	.line	1760
  6308 08:138C: A9 02 00     	lda	#$2
  6309 08:138F: 82 7C FE     	brl	L212
  6310                        ;	dp->sect += ofs / SS(fs);			
                    /* Sector# of the directory entry */
  6311                        L10092:
  6312                        	.line	1761
  6313 08:1392: 18           	clc
  6314 08:1393: A9 18 00     	lda	#$18
  6315 08:1396: 65 18        	adc	<L203+dp_0
  6316 08:1398: 85 01        	sta	<R0
  6317 08:139A: A9 00 00     	lda	#$0
  6318 08:139D: 65 1A        	adc	<L203+dp_0+2
  6319 08:139F: 85 03        	sta	<R0+2
  6320 08:13A1: D4 1E        	pei	<L203+ofs_0+2
  6321 08:13A3: D4 1C        	pei	<L203+ofs_0
  6322 08:13A5: A9 09 00     	lda	#$9
  6323                        	xref	~~~llsr
  6324 08:13A8: 22 xx xx xx  	jsl	~~~llsr
  6325 08:13AC: 85 05        	sta	<R1
  6326 08:13AE: 86 07        	stx	<R1+2
  6327 08:13B0: 18           	clc
  6328 08:13B1: A5 05        	lda	<R1
  6329 08:13B3: 67 01        	adc	[<R0]
  6330 08:13B5: 87 01        	sta	[<R0]
  6331 08:13B7: A5 07        	lda	<R1+2
  6332 08:13B9: A0 02 00     	ldy	#$2
  6333 08:13BC: 77 01        	adc	[<R0],Y
  6334 08:13BE: A0 02 00     	ldy	#$2
  6335 08:13C1: 97 01        	sta	[<R0],Y
  6336                        ;	dp->dir = fs->win + (ofs % SS(fs));	/* Point
                    er to the entry in the win[] */
  6337                        	.line	1762
  6338 08:13C3: A5 1C        	lda	<L203+ofs_0
  6339 08:13C5: 29 FF 01     	and	#<$1ff
  6340 08:13C8: 85 01        	sta	<R0
  6341 08:13CA: 64 03        	stz	<R0+2
  6342 08:13CC: 18           	clc
  6343 08:13CD: A9 2F 00     	lda	#$2f
  6344 08:13D0: 65 01        	adc	<R0
  6345 08:13D2: 85 05        	sta	<R1
  6346 08:13D4: A9 00 00     	lda	#$0
  6347 08:13D7: 65 03        	adc	<R0+2
  6348 08:13D9: 85 07        	sta	<R1+2
  6349 08:13DB: 18           	clc
  Thu Dec  3 2020 22:25                                                Page 128


  6350 08:13DC: A5 11        	lda	<L204+fs_1
  6351 08:13DE: 65 05        	adc	<R1
  6352 08:13E0: 85 01        	sta	<R0
  6353 08:13E2: A5 13        	lda	<L204+fs_1+2
  6354 08:13E4: 65 07        	adc	<R1+2
  6355 08:13E6: 85 03        	sta	<R0+2
  6356 08:13E8: A5 01        	lda	<R0
  6357 08:13EA: A0 1C 00     	ldy	#$1c
  6358 08:13ED: 97 18        	sta	[<L203+dp_0],Y
  6359 08:13EF: A5 03        	lda	<R0+2
  6360 08:13F1: A0 1E 00     	ldy	#$1e
  6361 08:13F4: 97 18        	sta	[<L203+dp_0],Y
  6362                        ;
  6363                        ;	return FR_OK;
  6364                        	.line	1764
  6365 08:13F6: A9 00 00     	lda	#$0
  6366 08:13F9: 82 12 FE     	brl	L212
  6367                        ;}
  6368                        	.line	1765
  6369                        	.endblock	1765
  6370             00000014   L203	equ	20
  6371             00000009   L204	equ	9
  6372 08:13FC:              	ends
  6373                        	efunc
  6374                        	.endfunc	1765,9,20
  6375                        	.line	1765
  6376                        ;
  6377                        ;
  6378                        ;
  6379                        ;
  6380                        ;/*-----------------------------------------------
                    ------------------------*/
  6381                        ;/* Directory handling - Move directory table inde
                    x next                  */
  6382                        ;/*-----------------------------------------------
                    ------------------------*/
  6383                        ;
  6384                        ;static FRESULT dir_next (	/* FR_OK(0):succ
                    eeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch 
                    */
  6385                        ;	DIR* dp,				/* Point
                    er to the directory object */
  6386                        ;	int stretch				/* 0: Do
                     not stretch table, 1: Stretch table if needed */
  6387                        ;)
  6388                        ;{
  6389                        	.line	1774
  6390                        	.line	1778
  6391                        	FFDOS
  6392                        	func
  6393                        	.function	1778
  6394                        ~~dir_next:
  6395                        	longa	on
  6396                        	longi	on
  6397 08:13FC: 3B           	tsc
  6398 08:13FD: 38           	sec
  6399 08:13FE: E9 18 00     	sbc	#L226
  6400 08:1401: 1B           	tcs
  Thu Dec  3 2020 22:25                                                Page 129


  6401 08:1402: 0B           	phd
  6402 08:1403: 5B           	tcd
  6403             00000004   dp_0	set	4
  6404             00000008   stretch_0	set	8
  6405                        	.block	1778
  6406                        ;	DWORD ofs, clst;
  6407                        ;	FATFS *fs = dp->obj.fs;
  6408                        ;
  6409                        ;
  6410                        ;	ofs = dp->dptr + SZDIRE;	/* Next entry */
  6411             00000000   ofs_1	set	0
  6412             00000004   clst_1	set	4
  6413             00000008   fs_1	set	8
  6414                        	.sym	ofs,0,18,1,32
  6415                        	.sym	clst,4,18,1,32
  6416                        	.sym	fs,8,138,1,32,80
  6417                        	.sym	dp,4,138,6,32,83
  6418                        	.sym	stretch,8,5,6,16
  6419 08:1404: A7 1C        	lda	[<L226+dp_0]
  6420 08:1406: 85 15        	sta	<L227+fs_1
  6421 08:1408: A0 02 00     	ldy	#$2
  6422 08:140B: B7 1C        	lda	[<L226+dp_0],Y
  6423 08:140D: 85 17        	sta	<L227+fs_1+2
  6424                        	.line	1783
  6425 08:140F: 18           	clc
  6426 08:1410: A9 20 00     	lda	#$20
  6427 08:1413: A0 10 00     	ldy	#$10
  6428 08:1416: 77 1C        	adc	[<L226+dp_0],Y
  6429 08:1418: 85 0D        	sta	<L227+ofs_1
  6430 08:141A: A9 00 00     	lda	#$0
  6431 08:141D: A0 12 00     	ldy	#$12
  6432 08:1420: 77 1C        	adc	[<L226+dp_0],Y
  6433 08:1422: 85 0F        	sta	<L227+ofs_1+2
  6434                        ;	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type =
                    = FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disab
                    le it if the offset reached the max value */
  6435                        	.line	1784
  6436 08:1424: 82 16 00     	brl	L229
  6437 08:1427: E2 20        	sep	#$20
  6438                        	longa	off
  6439 08:1429: A7 15        	lda	[<L227+fs_1]
  6440 08:142B: C9 04        	cmp	#<$4
  6441 08:142D: C2 20        	rep	#$20
  6442                        	longa	on
  6443 08:142F: F0 03        	beq	L230
  6444 08:1431: 82 09 00     	brl	L229
  6445                        L230:
  6446 08:1434: A9 00 10     	lda	#$1000
  6447 08:1437: AA           	tax
  6448 08:1438: A9 00 00     	lda	#$0
  6449 08:143B: 80 07        	bra	L231
  6450                        L229:
  6451 08:143D: A9 20 00     	lda	#$20
  6452 08:1440: AA           	tax
  6453 08:1441: A9 00 00     	lda	#$0
  6454                        L231:
  6455 08:1444: 85 01        	sta	<R0
  6456 08:1446: 86 03        	stx	<R0+2
  Thu Dec  3 2020 22:25                                                Page 130


  6457 08:1448: A5 0D        	lda	<L227+ofs_1
  6458 08:144A: C5 01        	cmp	<R0
  6459 08:144C: A5 0F        	lda	<L227+ofs_1+2
  6460 08:144E: E5 03        	sbc	<R0+2
  6461 08:1450: B0 03        	bcs	L232
  6462 08:1452: 82 10 00     	brl	L10093
  6463                        L232:
  6464                        	.line	1784
  6465 08:1455: A9 00 00     	lda	#$0
  6466 08:1458: A0 18 00     	ldy	#$18
  6467 08:145B: 97 1C        	sta	[<L226+dp_0],Y
  6468 08:145D: A9 00 00     	lda	#$0
  6469 08:1460: A0 1A 00     	ldy	#$1a
  6470 08:1463: 97 1C        	sta	[<L226+dp_0],Y
  6471                        ;	if (dp->sect == 0) return FR_NO_FILE;	/* Repor
                    t EOT if it has been disabled */
  6472                        L10093:
  6473                        	.line	1785
  6474 08:1465: A0 18 00     	ldy	#$18
  6475 08:1468: B7 1C        	lda	[<L226+dp_0],Y
  6476 08:146A: A0 1A 00     	ldy	#$1a
  6477 08:146D: 17 1C        	ora	[<L226+dp_0],Y
  6478 08:146F: F0 03        	beq	L233
  6479 08:1471: 82 15 00     	brl	L10094
  6480                        L233:
  6481                        	.line	1785
  6482 08:1474: A9 04 00     	lda	#$4
  6483                        L234:
  6484 08:1477: A8           	tay
  6485 08:1478: A5 1A        	lda	<L226+2
  6486 08:147A: 85 20        	sta	<L226+2+6
  6487 08:147C: A5 19        	lda	<L226+1
  6488 08:147E: 85 1F        	sta	<L226+1+6
  6489 08:1480: 2B           	pld
  6490 08:1481: 3B           	tsc
  6491 08:1482: 18           	clc
  6492 08:1483: 69 1E 00     	adc	#L226+6
  6493 08:1486: 1B           	tcs
  6494 08:1487: 98           	tya
  6495 08:1488: 6B           	rtl
  6496                        ;
  6497                        ;	if (ofs % SS(fs) == 0) {	/* Sector change
                    d? */
  6498                        L10094:
  6499                        	.line	1787
  6500 08:1489: A5 0D        	lda	<L227+ofs_1
  6501 08:148B: 29 FF 01     	and	#<$1ff
  6502 08:148E: F0 03        	beq	L235
  6503 08:1490: 82 D6 01     	brl	L10095
  6504                        L235:
  6505                        	.line	1787
  6506                        ;		dp->sect++;				
                    /* Next sector */
  6507                        	.line	1788
  6508 08:1493: 18           	clc
  6509 08:1494: A9 01 00     	lda	#$1
  6510 08:1497: A0 18 00     	ldy	#$18
  6511 08:149A: 77 1C        	adc	[<L226+dp_0],Y
  Thu Dec  3 2020 22:25                                                Page 131


  6512 08:149C: A0 18 00     	ldy	#$18
  6513 08:149F: 97 1C        	sta	[<L226+dp_0],Y
  6514 08:14A1: A9 00 00     	lda	#$0
  6515 08:14A4: A0 1A 00     	ldy	#$1a
  6516 08:14A7: 77 1C        	adc	[<L226+dp_0],Y
  6517 08:14A9: A0 1A 00     	ldy	#$1a
  6518 08:14AC: 97 1C        	sta	[<L226+dp_0],Y
  6519                        ;
  6520                        ;		if (dp->clust == 0) {	/* Static table 
                    */
  6521                        	.line	1790
  6522 08:14AE: A0 14 00     	ldy	#$14
  6523 08:14B1: B7 1C        	lda	[<L226+dp_0],Y
  6524 08:14B3: A0 16 00     	ldy	#$16
  6525 08:14B6: 17 1C        	ora	[<L226+dp_0],Y
  6526 08:14B8: F0 03        	beq	L236
  6527 08:14BA: 82 48 00     	brl	L10096
  6528                        L236:
  6529                        	.line	1790
  6530                        ;			if (ofs / SZDIRE >= fs->n_rootdi
                    r) {	/* Report EOT if it reached end of static table 
                    */
  6531                        	.line	1791
  6532 08:14BD: A0 00 00     	ldy	#$0
  6533 08:14C0: 5A           	phy
  6534 08:14C1: A0 07 00     	ldy	#$7
  6535 08:14C4: B7 15        	lda	[<L227+fs_1],Y
  6536 08:14C6: 7A           	ply
  6537 08:14C7: 2A           	rol	A
  6538 08:14C8: 6A           	ror	A
  6539 08:14C9: 10 01        	bpl	L237
  6540 08:14CB: 88           	dey
  6541                        L237:
  6542 08:14CC: 85 01        	sta	<R0
  6543 08:14CE: 84 03        	sty	<R0+2
  6544 08:14D0: D4 0F        	pei	<L227+ofs_1+2
  6545 08:14D2: D4 0D        	pei	<L227+ofs_1
  6546 08:14D4: A9 05 00     	lda	#$5
  6547                        	xref	~~~llsr
  6548 08:14D7: 22 xx xx xx  	jsl	~~~llsr
  6549 08:14DB: 85 05        	sta	<R1
  6550 08:14DD: 86 07        	stx	<R1+2
  6551 08:14DF: A5 05        	lda	<R1
  6552 08:14E1: C5 01        	cmp	<R0
  6553 08:14E3: A5 07        	lda	<R1+2
  6554 08:14E5: E5 03        	sbc	<R0+2
  6555 08:14E7: B0 03        	bcs	L238
  6556 08:14E9: 82 16 00     	brl	L10097
  6557                        L238:
  6558                        	.line	1791
  6559                        ;				dp->sect = 0; return FR_
                    NO_FILE;
  6560                        	.line	1792
  6561 08:14EC: A9 00 00     	lda	#$0
  6562 08:14EF: A0 18 00     	ldy	#$18
  6563 08:14F2: 97 1C        	sta	[<L226+dp_0],Y
  6564 08:14F4: A9 00 00     	lda	#$0
  6565 08:14F7: A0 1A 00     	ldy	#$1a
  Thu Dec  3 2020 22:25                                                Page 132


  6566 08:14FA: 97 1C        	sta	[<L226+dp_0],Y
  6567                        	.line	1792
  6568 08:14FC: A9 04 00     	lda	#$4
  6569 08:14FF: 82 75 FF     	brl	L234
  6570                        ;			}
  6571                        	.line	1793
  6572                        ;		}
  6573                        L10097:
  6574                        	.line	1794
  6575                        ;		else {					
                    /* Dynamic table */
  6576 08:1502: 82 64 01     	brl	L10098
  6577                        L10096:
  6578                        	.line	1795
  6579                        ;			if ((ofs / SS(fs) & (fs->csize -
                     1)) == 0) {	/* Cluster changed? */
  6580                        	.line	1796
  6581 08:1505: D4 0F        	pei	<L227+ofs_1+2
  6582 08:1507: D4 0D        	pei	<L227+ofs_1
  6583 08:1509: A9 09 00     	lda	#$9
  6584                        	xref	~~~llsr
  6585 08:150C: 22 xx xx xx  	jsl	~~~llsr
  6586 08:1510: 85 01        	sta	<R0
  6587 08:1512: 86 03        	stx	<R0+2
  6588 08:1514: 18           	clc
  6589 08:1515: A9 FF FF     	lda	#$ffff
  6590 08:1518: A0 09 00     	ldy	#$9
  6591 08:151B: 77 15        	adc	[<L227+fs_1],Y
  6592 08:151D: 85 05        	sta	<R1
  6593 08:151F: A0 00 00     	ldy	#$0
  6594 08:1522: A5 05        	lda	<R1
  6595 08:1524: 10 01        	bpl	L239
  6596 08:1526: 88           	dey
  6597                        L239:
  6598 08:1527: 85 05        	sta	<R1
  6599 08:1529: 84 07        	sty	<R1+2
  6600 08:152B: A5 05        	lda	<R1
  6601 08:152D: 25 01        	and	<R0
  6602 08:152F: 85 09        	sta	<R2
  6603 08:1531: A5 07        	lda	<R1+2
  6604 08:1533: 25 03        	and	<R0+2
  6605 08:1535: 85 0B        	sta	<R2+2
  6606 08:1537: A5 09        	lda	<R2
  6607 08:1539: 05 0B        	ora	<R2+2
  6608 08:153B: F0 03        	beq	L240
  6609 08:153D: 82 29 01     	brl	L10099
  6610                        L240:
  6611                        	.line	1796
  6612                        ;				clst = get_fat(&dp->obj,
                     dp->clust);		/* Get next cluster */
  6613                        	.line	1797
  6614 08:1540: A0 16 00     	ldy	#$16
  6615 08:1543: B7 1C        	lda	[<L226+dp_0],Y
  6616 08:1545: 48           	pha
  6617 08:1546: A0 14 00     	ldy	#$14
  6618 08:1549: B7 1C        	lda	[<L226+dp_0],Y
  6619 08:154B: 48           	pha
  6620 08:154C: D4 1E        	pei	<L226+dp_0+2
  Thu Dec  3 2020 22:25                                                Page 133


  6621 08:154E: D4 1C        	pei	<L226+dp_0
  6622 08:1550: 22 8D 06 08  	jsl	~~get_fat
  6623 08:1554: 85 11        	sta	<L227+clst_1
  6624 08:1556: 86 13        	stx	<L227+clst_1+2
  6625                        ;				if (clst <= 1) return FR
                    _INT_ERR;			/* Internal error */
  6626                        	.line	1798
  6627 08:1558: A9 01 00     	lda	#$1
  6628 08:155B: C5 11        	cmp	<L227+clst_1
  6629 08:155D: A9 00 00     	lda	#$0
  6630 08:1560: E5 13        	sbc	<L227+clst_1+2
  6631 08:1562: B0 03        	bcs	L241
  6632 08:1564: 82 06 00     	brl	L10100
  6633                        L241:
  6634                        	.line	1798
  6635 08:1567: A9 02 00     	lda	#$2
  6636 08:156A: 82 0A FF     	brl	L234
  6637                        ;				if (clst == 0xFFFFFFFF) 
                    return FR_DISK_ERR;	/* Disk error */
  6638                        L10100:
  6639                        	.line	1799
  6640 08:156D: A5 11        	lda	<L227+clst_1
  6641 08:156F: C9 FF FF     	cmp	#<$ffffffff
  6642 08:1572: D0 05        	bne	L242
  6643 08:1574: A5 13        	lda	<L227+clst_1+2
  6644 08:1576: C9 FF FF     	cmp	#^$ffffffff
  6645                        L242:
  6646 08:1579: F0 03        	beq	L243
  6647 08:157B: 82 06 00     	brl	L10101
  6648                        L243:
  6649                        	.line	1799
  6650 08:157E: A9 01 00     	lda	#$1
  6651 08:1581: 82 F3 FE     	brl	L234
  6652                        ;				if (clst >= fs->n_fatent
                    ) {					/* It reached end of dyn
                    amic table */
  6653                        L10101:
  6654                        	.line	1800
  6655 08:1584: A5 11        	lda	<L227+clst_1
  6656 08:1586: A0 13 00     	ldy	#$13
  6657 08:1589: D7 15        	cmp	[<L227+fs_1],Y
  6658 08:158B: A5 13        	lda	<L227+clst_1+2
  6659 08:158D: A0 15 00     	ldy	#$15
  6660 08:1590: F7 15        	sbc	[<L227+fs_1],Y
  6661 08:1592: B0 03        	bcs	L244
  6662 08:1594: 82 A6 00     	brl	L10102
  6663                        L244:
  6664                        	.line	1800
  6665                        ;#if !FF_FS_READONLY
  6666                        ;					if (!stretch) {	
                    							/* If no
                     stretch, report EOT */
  6667                        	.line	1802
  6668 08:1597: A5 20        	lda	<L226+stretch_0
  6669 08:1599: F0 03        	beq	L245
  6670 08:159B: 82 16 00     	brl	L10103
  6671                        L245:
  6672                        	.line	1802
  Thu Dec  3 2020 22:25                                                Page 134


  6673                        ;						dp->sect
                     = 0; return FR_NO_FILE;
  6674                        	.line	1803
  6675 08:159E: A9 00 00     	lda	#$0
  6676 08:15A1: A0 18 00     	ldy	#$18
  6677 08:15A4: 97 1C        	sta	[<L226+dp_0],Y
  6678 08:15A6: A9 00 00     	lda	#$0
  6679 08:15A9: A0 1A 00     	ldy	#$1a
  6680 08:15AC: 97 1C        	sta	[<L226+dp_0],Y
  6681                        	.line	1803
  6682 08:15AE: A9 04 00     	lda	#$4
  6683 08:15B1: 82 C3 FE     	brl	L234
  6684                        ;					}
  6685                        	.line	1804
  6686                        ;					clst = create_ch
                    ain(&dp->obj, dp->clust);	/* Allocate a cluster */
  6687                        L10103:
  6688                        	.line	1805
  6689 08:15B4: A0 16 00     	ldy	#$16
  6690 08:15B7: B7 1C        	lda	[<L226+dp_0],Y
  6691 08:15B9: 48           	pha
  6692 08:15BA: A0 14 00     	ldy	#$14
  6693 08:15BD: B7 1C        	lda	[<L226+dp_0],Y
  6694 08:15BF: 48           	pha
  6695 08:15C0: D4 1E        	pei	<L226+dp_0+2
  6696 08:15C2: D4 1C        	pei	<L226+dp_0
  6697 08:15C4: 22 CC 0D 08  	jsl	~~create_chain
  6698 08:15C8: 85 11        	sta	<L227+clst_1
  6699 08:15CA: 86 13        	stx	<L227+clst_1+2
  6700                        ;					if (clst == 0) r
                    eturn FR_DENIED;			/* No free cluster */
  6701                        	.line	1806
  6702 08:15CC: A5 11        	lda	<L227+clst_1
  6703 08:15CE: 05 13        	ora	<L227+clst_1+2
  6704 08:15D0: F0 03        	beq	L246
  6705 08:15D2: 82 06 00     	brl	L10104
  6706                        L246:
  6707                        	.line	1806
  6708 08:15D5: A9 07 00     	lda	#$7
  6709 08:15D8: 82 9C FE     	brl	L234
  6710                        ;					if (clst == 1) r
                    eturn FR_INT_ERR;			/* Internal error */
  6711                        L10104:
  6712                        	.line	1807
  6713 08:15DB: A5 11        	lda	<L227+clst_1
  6714 08:15DD: C9 01 00     	cmp	#<$1
  6715 08:15E0: D0 05        	bne	L247
  6716 08:15E2: A5 13        	lda	<L227+clst_1+2
  6717 08:15E4: C9 00 00     	cmp	#^$1
  6718                        L247:
  6719 08:15E7: F0 03        	beq	L248
  6720 08:15E9: 82 06 00     	brl	L10105
  6721                        L248:
  6722                        	.line	1807
  6723 08:15EC: A9 02 00     	lda	#$2
  6724 08:15EF: 82 85 FE     	brl	L234
  6725                        ;					if (clst == 0xFF
                    FFFFFF) return FR_DISK_ERR;	/* Disk error */
  Thu Dec  3 2020 22:25                                                Page 135


  6726                        L10105:
  6727                        	.line	1808
  6728 08:15F2: A5 11        	lda	<L227+clst_1
  6729 08:15F4: C9 FF FF     	cmp	#<$ffffffff
  6730 08:15F7: D0 05        	bne	L249
  6731 08:15F9: A5 13        	lda	<L227+clst_1+2
  6732 08:15FB: C9 FF FF     	cmp	#^$ffffffff
  6733                        L249:
  6734 08:15FE: F0 03        	beq	L250
  6735 08:1600: 82 06 00     	brl	L10106
  6736                        L250:
  6737                        	.line	1808
  6738 08:1603: A9 01 00     	lda	#$1
  6739 08:1606: 82 6E FE     	brl	L234
  6740                        ;					if (dir_clear(fs
                    , clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the 
                    stretched table */
  6741                        L10106:
  6742                        	.line	1809
  6743 08:1609: D4 13        	pei	<L227+clst_1+2
  6744 08:160B: D4 11        	pei	<L227+clst_1
  6745 08:160D: D4 17        	pei	<L227+fs_1+2
  6746 08:160F: D4 15        	pei	<L227+fs_1
  6747 08:1611: 22 E7 10 08  	jsl	~~dir_clear
  6748 08:1615: AA           	tax
  6749 08:1616: D0 03        	bne	L251
  6750 08:1618: 82 06 00     	brl	L10107
  6751                        L251:
  6752                        	.line	1809
  6753 08:161B: A9 01 00     	lda	#$1
  6754 08:161E: 82 56 FE     	brl	L234
  6755                        ;					if (FF_FS_EXFAT)
                     dp->obj.stat |= 4;			/* exFAT: The directory 
                    has been stretched */
  6756                        L10107:
  6757                        	.line	1810
  6758 08:1621: 82 19 00     	brl	L10108
  6759                        	.line	1810
  6760 08:1624: 18           	clc
  6761 08:1625: A9 07 00     	lda	#$7
  6762 08:1628: 65 1C        	adc	<L226+dp_0
  6763 08:162A: 85 01        	sta	<R0
  6764 08:162C: A9 00 00     	lda	#$0
  6765 08:162F: 65 1E        	adc	<L226+dp_0+2
  6766 08:1631: 85 03        	sta	<R0+2
  6767 08:1633: E2 20        	sep	#$20
  6768                        	longa	off
  6769 08:1635: A7 01        	lda	[<R0]
  6770 08:1637: 09 04        	ora	#<$4
  6771 08:1639: 87 01        	sta	[<R0]
  6772 08:163B: C2 20        	rep	#$20
  6773                        	longa	on
  6774                        ;#else
  6775                        ;					if (!stretch) dp
                    ->sect = 0;					/* (this line is
                     to suppress compiler warning) */
  6776                        ;					dp->sect = 0; re
                    turn FR_NO_FILE;			/* Report EOT */
  Thu Dec  3 2020 22:25                                                Page 136


  6777                        ;#endif
  6778                        ;				}
  6779                        L10108:
  6780                        	.line	1815
  6781                        ;				dp->clust = clst;	
                    	/* Initialize data for new cluster */
  6782                        L10102:
  6783                        	.line	1816
  6784 08:163D: A5 11        	lda	<L227+clst_1
  6785 08:163F: A0 14 00     	ldy	#$14
  6786 08:1642: 97 1C        	sta	[<L226+dp_0],Y
  6787 08:1644: A5 13        	lda	<L227+clst_1+2
  6788 08:1646: A0 16 00     	ldy	#$16
  6789 08:1649: 97 1C        	sta	[<L226+dp_0],Y
  6790                        ;				dp->sect = clst2sect(fs,
                     clst);
  6791                        	.line	1817
  6792 08:164B: D4 13        	pei	<L227+clst_1+2
  6793 08:164D: D4 11        	pei	<L227+clst_1
  6794 08:164F: D4 17        	pei	<L227+fs_1+2
  6795 08:1651: D4 15        	pei	<L227+fs_1
  6796 08:1653: 22 FE 05 08  	jsl	~~clst2sect
  6797 08:1657: 85 01        	sta	<R0
  6798 08:1659: 86 03        	stx	<R0+2
  6799 08:165B: A5 01        	lda	<R0
  6800 08:165D: A0 18 00     	ldy	#$18
  6801 08:1660: 97 1C        	sta	[<L226+dp_0],Y
  6802 08:1662: A5 03        	lda	<R0+2
  6803 08:1664: A0 1A 00     	ldy	#$1a
  6804 08:1667: 97 1C        	sta	[<L226+dp_0],Y
  6805                        ;			}
  6806                        	.line	1818
  6807                        ;		}
  6808                        L10099:
  6809                        	.line	1819
  6810                        L10098:
  6811                        ;	}
  6812                        	.line	1820
  6813                        ;	dp->dptr = ofs;					
                    	/* Current entry */
  6814                        L10095:
  6815                        	.line	1821
  6816 08:1669: A5 0D        	lda	<L227+ofs_1
  6817 08:166B: A0 10 00     	ldy	#$10
  6818 08:166E: 97 1C        	sta	[<L226+dp_0],Y
  6819 08:1670: A5 0F        	lda	<L227+ofs_1+2
  6820 08:1672: A0 12 00     	ldy	#$12
  6821 08:1675: 97 1C        	sta	[<L226+dp_0],Y
  6822                        ;	dp->dir = fs->win + ofs % SS(fs);	/* Point
                    er to the entry in the win[] */
  6823                        	.line	1822
  6824 08:1677: A5 0D        	lda	<L227+ofs_1
  6825 08:1679: 29 FF 01     	and	#<$1ff
  6826 08:167C: 85 01        	sta	<R0
  6827 08:167E: 64 03        	stz	<R0+2
  6828 08:1680: 18           	clc
  6829 08:1681: A9 2F 00     	lda	#$2f
  6830 08:1684: 65 01        	adc	<R0
  Thu Dec  3 2020 22:25                                                Page 137


  6831 08:1686: 85 05        	sta	<R1
  6832 08:1688: A9 00 00     	lda	#$0
  6833 08:168B: 65 03        	adc	<R0+2
  6834 08:168D: 85 07        	sta	<R1+2
  6835 08:168F: 18           	clc
  6836 08:1690: A5 15        	lda	<L227+fs_1
  6837 08:1692: 65 05        	adc	<R1
  6838 08:1694: 85 01        	sta	<R0
  6839 08:1696: A5 17        	lda	<L227+fs_1+2
  6840 08:1698: 65 07        	adc	<R1+2
  6841 08:169A: 85 03        	sta	<R0+2
  6842 08:169C: A5 01        	lda	<R0
  6843 08:169E: A0 1C 00     	ldy	#$1c
  6844 08:16A1: 97 1C        	sta	[<L226+dp_0],Y
  6845 08:16A3: A5 03        	lda	<R0+2
  6846 08:16A5: A0 1E 00     	ldy	#$1e
  6847 08:16A8: 97 1C        	sta	[<L226+dp_0],Y
  6848                        ;
  6849                        ;	return FR_OK;
  6850                        	.line	1824
  6851 08:16AA: A9 00 00     	lda	#$0
  6852 08:16AD: 82 C7 FD     	brl	L234
  6853                        ;}
  6854                        	.line	1825
  6855                        	.endblock	1825
  6856             00000018   L226	equ	24
  6857             0000000D   L227	equ	13
  6858 08:16B0:              	ends
  6859                        	efunc
  6860                        	.endfunc	1825,13,24
  6861                        	.line	1825
  6862                        ;
  6863                        ;
  6864                        ;
  6865                        ;
  6866                        ;#if !FF_FS_READONLY
  6867                        ;/*-----------------------------------------------
                    ------------------------*/
  6868                        ;/* Directory handling - Reserve a block of direct
                    ory entries             */
  6869                        ;/*-----------------------------------------------
                    ------------------------*/
  6870                        ;
  6871                        ;static FRESULT dir_alloc (	/* FR_OK(0):succ
                    eeded, !=0:error */
  6872                        ;	DIR* dp,				/* Point
                    er to the directory object */
  6873                        ;	UINT nent				/* Numbe
                    r of contiguous entries to allocate */
  6874                        ;)
  6875                        ;{
  6876                        	.line	1835
  6877                        	.line	1839
  6878                        	FFDOS
  6879                        	func
  6880                        	.function	1839
  6881                        ~~dir_alloc:
  6882                        	longa	on
  Thu Dec  3 2020 22:25                                                Page 138


  6883                        	longi	on
  6884 08:16B0: 3B           	tsc
  6885 08:16B1: 38           	sec
  6886 08:16B2: E9 0C 00     	sbc	#L252
  6887 08:16B5: 1B           	tcs
  6888 08:16B6: 0B           	phd
  6889 08:16B7: 5B           	tcd
  6890             00000004   dp_0	set	4
  6891             00000008   nent_0	set	8
  6892                        	.block	1839
  6893                        ;	FRESULT res;
  6894                        ;	UINT n;
  6895                        ;	FATFS *fs = dp->obj.fs;
  6896                        ;
  6897                        ;
  6898                        ;	res = dir_sdi(dp, 0);
  6899             00000000   res_1	set	0
  6900             00000002   n_1	set	2
  6901             00000004   fs_1	set	4
  6902                        	.sym	res,0,5,1,16
  6903                        	.sym	n,2,16,1,16
  6904                        	.sym	fs,4,138,1,32,80
  6905                        	.sym	dp,4,138,6,32,83
  6906                        	.sym	nent,8,16,6,16
  6907 08:16B8: A7 10        	lda	[<L252+dp_0]
  6908 08:16BA: 85 09        	sta	<L253+fs_1
  6909 08:16BC: A0 02 00     	ldy	#$2
  6910 08:16BF: B7 10        	lda	[<L252+dp_0],Y
  6911 08:16C1: 85 0B        	sta	<L253+fs_1+2
  6912                        	.line	1845
  6913 08:16C3: F4 00 00     	pea	#^$0
  6914 08:16C6: F4 00 00     	pea	#<$0
  6915 08:16C9: D4 12        	pei	<L252+dp_0+2
  6916 08:16CB: D4 10        	pei	<L252+dp_0
  6917 08:16CD: 22 BD 11 08  	jsl	~~dir_sdi
  6918 08:16D1: 85 05        	sta	<L253+res_1
  6919                        ;	if (res == FR_OK) {
  6920                        	.line	1846
  6921 08:16D3: A5 05        	lda	<L253+res_1
  6922 08:16D5: F0 03        	beq	L255
  6923 08:16D7: 82 76 00     	brl	L10109
  6924                        L255:
  6925                        	.line	1846
  6926                        ;		n = 0;
  6927                        	.line	1847
  6928 08:16DA: 64 07        	stz	<L253+n_1
  6929                        ;		do {
  6930                        	.line	1848
  6931                        L10112:
  6932                        	.line	1848
  6933                        ;			res = move_window(fs, dp->sect);
  6934                        	.line	1849
  6935 08:16DC: A0 1A 00     	ldy	#$1a
  6936 08:16DF: B7 10        	lda	[<L252+dp_0],Y
  6937 08:16E1: 48           	pha
  6938 08:16E2: A0 18 00     	ldy	#$18
  6939 08:16E5: B7 10        	lda	[<L252+dp_0],Y
  6940 08:16E7: 48           	pha
  Thu Dec  3 2020 22:25                                                Page 139


  6941 08:16E8: D4 0B        	pei	<L253+fs_1+2
  6942 08:16EA: D4 09        	pei	<L253+fs_1
  6943 08:16EC: 22 FA 03 08  	jsl	~~move_window
  6944 08:16F0: 85 05        	sta	<L253+res_1
  6945                        ;			if (res != FR_OK) break;
  6946                        	.line	1850
  6947 08:16F2: A5 05        	lda	<L253+res_1
  6948 08:16F4: F0 03        	beq	L256
  6949 08:16F6: 82 57 00     	brl	L10111
  6950                        L256:
  6951                        ;#if FF_FS_EXFAT
  6952                        ;			if ((fs->fs_type == FS_EXFAT) ? 
                    (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_
                    Name] == DDEM || dp->dir[DIR_Name] == 0)) {
  6953                        ;#else
  6954                        ;			if (dp->dir[DIR_Name] == DDEM ||
                     dp->dir[DIR_Name] == 0) {
  6955                        	.line	1854
  6956 08:16F9: A0 1C 00     	ldy	#$1c
  6957 08:16FC: B7 10        	lda	[<L252+dp_0],Y
  6958 08:16FE: 85 01        	sta	<R0
  6959 08:1700: A0 1E 00     	ldy	#$1e
  6960 08:1703: B7 10        	lda	[<L252+dp_0],Y
  6961 08:1705: 85 03        	sta	<R0+2
  6962 08:1707: E2 20        	sep	#$20
  6963                        	longa	off
  6964 08:1709: A7 01        	lda	[<R0]
  6965 08:170B: C9 E5        	cmp	#<$e5
  6966 08:170D: C2 20        	rep	#$20
  6967                        	longa	on
  6968 08:170F: D0 03        	bne	L258
  6969 08:1711: 82 18 00     	brl	L257
  6970                        L258:
  6971 08:1714: A0 1C 00     	ldy	#$1c
  6972 08:1717: B7 10        	lda	[<L252+dp_0],Y
  6973 08:1719: 85 01        	sta	<R0
  6974 08:171B: A0 1E 00     	ldy	#$1e
  6975 08:171E: B7 10        	lda	[<L252+dp_0],Y
  6976 08:1720: 85 03        	sta	<R0+2
  6977 08:1722: A7 01        	lda	[<R0]
  6978 08:1724: 29 FF 00     	and	#$ff
  6979 08:1727: F0 03        	beq	L259
  6980 08:1729: 82 0E 00     	brl	L10113
  6981                        L259:
  6982                        L257:
  6983                        	.line	1854
  6984                        ;#endif
  6985                        ;				if (++n == nent) break;	
                    /* A block of contiguous free entries is found */
  6986                        	.line	1856
  6987 08:172C: E6 07        	inc	<L253+n_1
  6988 08:172E: A5 07        	lda	<L253+n_1
  6989 08:1730: C5 14        	cmp	<L252+nent_0
  6990 08:1732: D0 03        	bne	L260
  6991 08:1734: 82 19 00     	brl	L10111
  6992                        L260:
  6993                        ;			} else {
  6994                        	.line	1857
  Thu Dec  3 2020 22:25                                                Page 140


  6995 08:1737: 82 02 00     	brl	L10114
  6996                        L10113:
  6997                        	.line	1857
  6998                        ;				n = 0;			
                    		/* Not a blank entry. Restart to search */
  6999                        	.line	1858
  7000 08:173A: 64 07        	stz	<L253+n_1
  7001                        ;			}
  7002                        	.line	1859
  7003                        L10114:
  7004                        ;			res = dir_next(dp, 1);
  7005                        	.line	1860
  7006 08:173C: F4 01 00     	pea	#<$1
  7007 08:173F: D4 12        	pei	<L252+dp_0+2
  7008 08:1741: D4 10        	pei	<L252+dp_0
  7009 08:1743: 22 FC 13 08  	jsl	~~dir_next
  7010 08:1747: 85 05        	sta	<L253+res_1
  7011                        ;		} while (res == FR_OK);	/* Next entry wi
                    th table stretch enabled */
  7012                        	.line	1861
  7013                        L10110:
  7014 08:1749: A5 05        	lda	<L253+res_1
  7015 08:174B: D0 03        	bne	L261
  7016 08:174D: 82 8C FF     	brl	L10112
  7017                        L261:
  7018                        L10111:
  7019                        ;	}
  7020                        	.line	1862
  7021                        ;
  7022                        ;	if (res == FR_NO_FILE) res = FR_DENIED;	/* No di
                    rectory entry to allocate */
  7023                        L10109:
  7024                        	.line	1864
  7025 08:1750: A5 05        	lda	<L253+res_1
  7026 08:1752: C9 04 00     	cmp	#<$4
  7027 08:1755: F0 03        	beq	L262
  7028 08:1757: 82 05 00     	brl	L10115
  7029                        L262:
  7030                        	.line	1864
  7031 08:175A: A9 07 00     	lda	#$7
  7032 08:175D: 85 05        	sta	<L253+res_1
  7033                        ;	return res;
  7034                        L10115:
  7035                        	.line	1865
  7036 08:175F: A5 05        	lda	<L253+res_1
  7037                        L263:
  7038 08:1761: A8           	tay
  7039 08:1762: A5 0E        	lda	<L252+2
  7040 08:1764: 85 14        	sta	<L252+2+6
  7041 08:1766: A5 0D        	lda	<L252+1
  7042 08:1768: 85 13        	sta	<L252+1+6
  7043 08:176A: 2B           	pld
  7044 08:176B: 3B           	tsc
  7045 08:176C: 18           	clc
  7046 08:176D: 69 12 00     	adc	#L252+6
  7047 08:1770: 1B           	tcs
  7048 08:1771: 98           	tya
  7049 08:1772: 6B           	rtl
  Thu Dec  3 2020 22:25                                                Page 141


  7050                        ;}
  7051                        	.line	1866
  7052                        	.endblock	1866
  7053             0000000C   L252	equ	12
  7054             00000005   L253	equ	5
  7055 08:1773:              	ends
  7056                        	efunc
  7057                        	.endfunc	1866,5,12
  7058                        	.line	1866
  7059                        ;
  7060                        ;#endif	/* !FF_FS_READONLY */
  7061                        ;
  7062                        ;
  7063                        ;
  7064                        ;
  7065                        ;/*-----------------------------------------------
                    ------------------------*/
  7066                        ;/* FAT: Directory handling - Load/Store start clu
                    ster number             */
  7067                        ;/*-----------------------------------------------
                    ------------------------*/
  7068                        ;
  7069                        ;static DWORD ld_clust (	/* Returns the top clust
                    er value of the SFN entry */
  7070                        ;	FATFS* fs,			/* Pointer to th
                    e fs object */
  7071                        ;	const BYTE* dir		/* Pointer to the key en
                    try */
  7072                        ;)
  7073                        ;{
  7074                        	.line	1877
  7075                        	.line	1881
  7076                        	FFDOS
  7077                        	func
  7078                        	.function	1881
  7079                        ~~ld_clust:
  7080                        	longa	on
  7081                        	longi	on
  7082 08:1773: 3B           	tsc
  7083 08:1774: 38           	sec
  7084 08:1775: E9 10 00     	sbc	#L264
  7085 08:1778: 1B           	tcs
  7086 08:1779: 0B           	phd
  7087 08:177A: 5B           	tcd
  7088             00000004   fs_0	set	4
  7089             00000008   dir_0	set	8
  7090                        	.block	1881
  7091                        ;	DWORD cl;
  7092                        ;
  7093                        ;	cl = ld_word(dir + DIR_FstClusLO);
  7094             00000000   cl_1	set	0
  7095                        	.sym	cl,0,18,1,32
  7096                        	.sym	fs,4,138,6,32,80
  7097                        	.sym	dir,8,142,6,32
  7098                        	.line	1884
  7099 08:177B: 18           	clc
  7100 08:177C: A9 1A 00     	lda	#$1a
  7101 08:177F: 65 18        	adc	<L264+dir_0
  Thu Dec  3 2020 22:25                                                Page 142


  7102 08:1781: 85 01        	sta	<R0
  7103 08:1783: A9 00 00     	lda	#$0
  7104 08:1786: 65 1A        	adc	<L264+dir_0+2
  7105 08:1788: 85 03        	sta	<R0+2
  7106 08:178A: D4 03        	pei	<R0+2
  7107 08:178C: D4 01        	pei	<R0
  7108 08:178E: 22 00 00 08  	jsl	~~ld_word
  7109 08:1792: 85 05        	sta	<R1
  7110 08:1794: A0 00 00     	ldy	#$0
  7111 08:1797: A5 05        	lda	<R1
  7112 08:1799: 10 01        	bpl	L267
  7113 08:179B: 88           	dey
  7114                        L267:
  7115 08:179C: 85 0D        	sta	<L265+cl_1
  7116 08:179E: 84 0F        	sty	<L265+cl_1+2
  7117                        ;	if (fs->fs_type == FS_FAT32) {
  7118                        	.line	1885
  7119 08:17A0: E2 20        	sep	#$20
  7120                        	longa	off
  7121 08:17A2: A7 14        	lda	[<L264+fs_0]
  7122 08:17A4: C9 03        	cmp	#<$3
  7123 08:17A6: C2 20        	rep	#$20
  7124                        	longa	on
  7125 08:17A8: F0 03        	beq	L268
  7126 08:17AA: 82 40 00     	brl	L10116
  7127                        L268:
  7128                        	.line	1885
  7129                        ;		cl |= (DWORD)ld_word(dir + DIR_FstClusHI
                    ) << 16;
  7130                        	.line	1886
  7131 08:17AD: 18           	clc
  7132 08:17AE: A9 14 00     	lda	#$14
  7133 08:17B1: 65 18        	adc	<L264+dir_0
  7134 08:17B3: 85 05        	sta	<R1
  7135 08:17B5: A9 00 00     	lda	#$0
  7136 08:17B8: 65 1A        	adc	<L264+dir_0+2
  7137 08:17BA: 85 07        	sta	<R1+2
  7138 08:17BC: D4 07        	pei	<R1+2
  7139 08:17BE: D4 05        	pei	<R1
  7140 08:17C0: 22 00 00 08  	jsl	~~ld_word
  7141 08:17C4: 85 09        	sta	<R2
  7142 08:17C6: A0 00 00     	ldy	#$0
  7143 08:17C9: A5 09        	lda	<R2
  7144 08:17CB: 10 01        	bpl	L269
  7145 08:17CD: 88           	dey
  7146                        L269:
  7147 08:17CE: 85 09        	sta	<R2
  7148 08:17D0: 84 0B        	sty	<R2+2
  7149 08:17D2: D4 0B        	pei	<R2+2
  7150 08:17D4: D4 09        	pei	<R2
  7151 08:17D6: A9 10 00     	lda	#$10
  7152                        	xref	~~~lasl
  7153 08:17D9: 22 xx xx xx  	jsl	~~~lasl
  7154 08:17DD: 85 01        	sta	<R0
  7155 08:17DF: 86 03        	stx	<R0+2
  7156 08:17E1: A5 0D        	lda	<L265+cl_1
  7157 08:17E3: 05 01        	ora	<R0
  7158 08:17E5: 85 0D        	sta	<L265+cl_1
  Thu Dec  3 2020 22:25                                                Page 143


  7159 08:17E7: A5 0F        	lda	<L265+cl_1+2
  7160 08:17E9: 05 03        	ora	<R0+2
  7161 08:17EB: 85 0F        	sta	<L265+cl_1+2
  7162                        ;	}
  7163                        	.line	1887
  7164                        ;
  7165                        ;	return cl;
  7166                        L10116:
  7167                        	.line	1889
  7168 08:17ED: A6 0F        	ldx	<L265+cl_1+2
  7169 08:17EF: A5 0D        	lda	<L265+cl_1
  7170                        L270:
  7171 08:17F1: A8           	tay
  7172 08:17F2: A5 12        	lda	<L264+2
  7173 08:17F4: 85 1A        	sta	<L264+2+8
  7174 08:17F6: A5 11        	lda	<L264+1
  7175 08:17F8: 85 19        	sta	<L264+1+8
  7176 08:17FA: 2B           	pld
  7177 08:17FB: 3B           	tsc
  7178 08:17FC: 18           	clc
  7179 08:17FD: 69 18 00     	adc	#L264+8
  7180 08:1800: 1B           	tcs
  7181 08:1801: 98           	tya
  7182 08:1802: 6B           	rtl
  7183                        ;}
  7184                        	.line	1890
  7185                        	.endblock	1890
  7186             00000010   L264	equ	16
  7187             0000000D   L265	equ	13
  7188 08:1803:              	ends
  7189                        	efunc
  7190                        	.endfunc	1890,13,16
  7191                        	.line	1890
  7192                        ;
  7193                        ;
  7194                        ;#if !FF_FS_READONLY
  7195                        ;static void st_clust (
  7196                        ;	FATFS* fs,	/* Pointer to the fs object */
  7197                        ;	BYTE* dir,	/* Pointer to the key entry */
  7198                        ;	DWORD cl	/* Value to be set */
  7199                        ;)
  7200                        ;{
  7201                        	.line	1894
  7202                        	.line	1899
  7203                        	FFDOS
  7204                        	func
  7205                        	.function	1899
  7206                        ~~st_clust:
  7207                        	longa	on
  7208                        	longi	on
  7209 08:1803: 3B           	tsc
  7210 08:1804: 38           	sec
  7211 08:1805: E9 08 00     	sbc	#L271
  7212 08:1808: 1B           	tcs
  7213 08:1809: 0B           	phd
  7214 08:180A: 5B           	tcd
  7215             00000004   fs_0	set	4
  7216             00000008   dir_0	set	8
  Thu Dec  3 2020 22:25                                                Page 144


  7217             0000000C   cl_0	set	12
  7218                        	.block	1899
  7219                        ;	st_word(dir + DIR_FstClusLO, (WORD)cl);
  7220                        	.sym	fs,4,138,6,32,80
  7221                        	.sym	dir,8,142,6,32
  7222                        	.sym	cl,12,18,6,32
  7223                        	.line	1900
  7224 08:180B: D4 14        	pei	<L271+cl_0
  7225 08:180D: 18           	clc
  7226 08:180E: A9 1A 00     	lda	#$1a
  7227 08:1811: 65 10        	adc	<L271+dir_0
  7228 08:1813: 85 01        	sta	<R0
  7229 08:1815: A9 00 00     	lda	#$0
  7230 08:1818: 65 12        	adc	<L271+dir_0+2
  7231 08:181A: 85 03        	sta	<R0+2
  7232 08:181C: D4 03        	pei	<R0+2
  7233 08:181E: D4 01        	pei	<R0
  7234 08:1820: 22 D7 00 08  	jsl	~~st_word
  7235                        ;	if (fs->fs_type == FS_FAT32) {
  7236                        	.line	1901
  7237 08:1824: E2 20        	sep	#$20
  7238                        	longa	off
  7239 08:1826: A7 0C        	lda	[<L271+fs_0]
  7240 08:1828: C9 03        	cmp	#<$3
  7241 08:182A: C2 20        	rep	#$20
  7242                        	longa	on
  7243 08:182C: F0 03        	beq	L274
  7244 08:182E: 82 28 00     	brl	L10117
  7245                        L274:
  7246                        	.line	1901
  7247                        ;		st_word(dir + DIR_FstClusHI, (WORD)(cl >
                    > 16));
  7248                        	.line	1902
  7249 08:1831: D4 16        	pei	<L271+cl_0+2
  7250 08:1833: D4 14        	pei	<L271+cl_0
  7251 08:1835: A9 10 00     	lda	#$10
  7252                        	xref	~~~llsr
  7253 08:1838: 22 xx xx xx  	jsl	~~~llsr
  7254 08:183C: 85 01        	sta	<R0
  7255 08:183E: 86 03        	stx	<R0+2
  7256 08:1840: D4 01        	pei	<R0
  7257 08:1842: 18           	clc
  7258 08:1843: A9 14 00     	lda	#$14
  7259 08:1846: 65 10        	adc	<L271+dir_0
  7260 08:1848: 85 05        	sta	<R1
  7261 08:184A: A9 00 00     	lda	#$0
  7262 08:184D: 65 12        	adc	<L271+dir_0+2
  7263 08:184F: 85 07        	sta	<R1+2
  7264 08:1851: D4 07        	pei	<R1+2
  7265 08:1853: D4 05        	pei	<R1
  7266 08:1855: 22 D7 00 08  	jsl	~~st_word
  7267                        ;	}
  7268                        	.line	1903
  7269                        ;}
  7270                        L10117:
  7271                        	.line	1904
  7272                        L275:
  7273 08:1859: A5 0A        	lda	<L271+2
  Thu Dec  3 2020 22:25                                                Page 145


  7274 08:185B: 85 16        	sta	<L271+2+12
  7275 08:185D: A5 09        	lda	<L271+1
  7276 08:185F: 85 15        	sta	<L271+1+12
  7277 08:1861: 2B           	pld
  7278 08:1862: 3B           	tsc
  7279 08:1863: 18           	clc
  7280 08:1864: 69 14 00     	adc	#L271+12
  7281 08:1867: 1B           	tcs
  7282 08:1868: 6B           	rtl
  7283                        	.endblock	1904
  7284             00000008   L271	equ	8
  7285             00000009   L272	equ	9
  7286 08:1869:              	ends
  7287                        	efunc
  7288                        	.endfunc	1904,9,8
  7289                        	.line	1904
  7290                        ;#endif
  7291                        ;
  7292                        ;
  7293                        ;
  7294                        ;#if FF_USE_LFN
  7295                        ;/*-----------------------------------------------
                    ---------*/
  7296                        ;/* FAT-LFN: Compare a part of file name with an L
                    FN entry */
  7297                        ;/*-----------------------------------------------
                    ---------*/
  7298                        ;
  7299                        ;static int cmp_lfn (		/* 1:matched, 0:
                    not matched */
  7300                        ;	const WCHAR* lfnbuf,	/* Pointer to the LFN wo
                    rking buffer to be compared */
  7301                        ;	BYTE* dir				/* Point
                    er to the directory entry containing the part of LFN */
  7302                        ;)
  7303                        ;{
  7304                        ;	UINT i, s;
  7305                        ;	WCHAR wc, uc;
  7306                        ;
  7307                        ;
  7308                        ;	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0
                    ;	/* Check LDIR_FstClusLO */
  7309                        ;
  7310                        ;	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offse
                    t in the LFN buffer */
  7311                        ;
  7312                        ;	for (wc = 1, s = 0; s < 13; s++) {		
                    /* Process all characters in the entry */
  7313                        ;		uc = ld_word(dir + LfnOfs[s]);		
                    /* Pick an LFN character */
  7314                        ;		if (wc != 0) {
  7315                        ;			if (i >= FF_MAX_LFN + 1 || ff_wt
                    oupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
  7316                        ;				return 0;		
                    			/* Not matched */
  7317                        ;			}
  7318                        ;			wc = uc;
  7319                        ;		} else {
  Thu Dec  3 2020 22:25                                                Page 146


  7320                        ;			if (uc != 0xFFFF) return 0;	
                    	/* Check filler */
  7321                        ;		}
  7322                        ;	}
  7323                        ;
  7324                        ;	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) r
                    eturn 0;	/* Last segment matched but different length */
  7325                        ;
  7326                        ;	return 1;		/* The part of LFN match
                    ed */
  7327                        ;}
  7328                        ;
  7329                        ;
  7330                        ;#if FF_FS_MINIMIZE <= 1 || FF_FS_RPATH >= 2 || FF
                    _USE_LABEL || FF_FS_EXFAT
  7331                        ;/*-----------------------------------------------
                    ------*/
  7332                        ;/* FAT-LFN: Pick a part of file name from an LFN 
                    entry */
  7333                        ;/*-----------------------------------------------
                    ------*/
  7334                        ;
  7335                        ;static int pick_lfn (	/* 1:succeeded, 0:buffer
                     overflow or invalid LFN entry */
  7336                        ;	WCHAR* lfnbuf,		/* Pointer to the LFN wo
                    rking buffer */
  7337                        ;	BYTE* dir			/* Pointer to th
                    e LFN entry */
  7338                        ;)
  7339                        ;{
  7340                        ;	UINT i, s;
  7341                        ;	WCHAR wc, uc;
  7342                        ;
  7343                        ;
  7344                        ;	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0
                    ;	/* Check LDIR_FstClusLO is 0 */
  7345                        ;
  7346                        ;	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offse
                    t in the LFN buffer */
  7347                        ;
  7348                        ;	for (wc = 1, s = 0; s < 13; s++) {		
                    /* Process all characters in the entry */
  7349                        ;		uc = ld_word(dir + LfnOfs[s]);		
                    /* Pick an LFN character */
  7350                        ;		if (wc != 0) {
  7351                        ;			if (i >= FF_MAX_LFN + 1) return 
                    0;	/* Buffer overflow? */
  7352                        ;			lfnbuf[i++] = wc = uc;		
                    	/* Store it */
  7353                        ;		} else {
  7354                        ;			if (uc != 0xFFFF) return 0;	
                    	/* Check filler */
  7355                        ;		}
  7356                        ;	}
  7357                        ;
  7358                        ;	if (dir[LDIR_Ord] & LLEF && wc != 0) {	/* Put t
                    erminator if it is the last LFN part and not terminated */
  7359                        ;		if (i >= FF_MAX_LFN + 1) return 0;	
  Thu Dec  3 2020 22:25                                                Page 147


                    /* Buffer overflow? */
  7360                        ;		lfnbuf[i] = 0;
  7361                        ;	}
  7362                        ;
  7363                        ;	return 1;		/* The part of LFN is va
                    lid */
  7364                        ;}
  7365                        ;#endif
  7366                        ;
  7367                        ;
  7368                        ;#if !FF_FS_READONLY
  7369                        ;/*-----------------------------------------*/
  7370                        ;/* FAT-LFN: Create an entry of LFN entries */
  7371                        ;/*-----------------------------------------*/
  7372                        ;
  7373                        ;static void put_lfn (
  7374                        ;	const WCHAR* lfn,	/* Pointer to the LFN */
  7375                        ;	BYTE* dir,			/* Pointer to th
                    e LFN entry to be created */
  7376                        ;	BYTE ord,			/* LFN order (1-
                    20) */
  7377                        ;	BYTE sum			/* Checksum of t
                    he corresponding SFN */
  7378                        ;)
  7379                        ;{
  7380                        ;	UINT i, s;
  7381                        ;	WCHAR wc;
  7382                        ;
  7383                        ;
  7384                        ;	dir[LDIR_Chksum] = sum;			/* Set c
                    hecksum */
  7385                        ;	dir[LDIR_Attr] = AM_LFN;		/* Set a
                    ttribute. LFN entry */
  7386                        ;	dir[LDIR_Type] = 0;
  7387                        ;	st_word(dir + LDIR_FstClusLO, 0);
  7388                        ;
  7389                        ;	i = (ord - 1) * 13;				
                    /* Get offset in the LFN working buffer */
  7390                        ;	s = wc = 0;
  7391                        ;	do {
  7392                        ;		if (wc != 0xFFFF) wc = lfn[i++];	
                    /* Get an effective character */
  7393                        ;		st_word(dir + LfnOfs[s], wc);		
                    /* Put it */
  7394                        ;		if (wc == 0) wc = 0xFFFF;		
                    /* Padding characters for following items */
  7395                        ;	} while (++s < 13);
  7396                        ;	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	
                    /* Last LFN part is the start of LFN sequence */
  7397                        ;	dir[LDIR_Ord] = ord;			/* Set t
                    he LFN order */
  7398                        ;}
  7399                        ;
  7400                        ;#endif	/* !FF_FS_READONLY */
  7401                        ;#endif	/* FF_USE_LFN */
  7402                        ;
  7403                        ;
  7404                        ;
  Thu Dec  3 2020 22:25                                                Page 148


  7405                        ;#if FF_USE_LFN && !FF_FS_READONLY
  7406                        ;/*-----------------------------------------------
                    ------------------------*/
  7407                        ;/* FAT-LFN: Create a Numbered SFN                
                                            */
  7408                        ;/*-----------------------------------------------
                    ------------------------*/
  7409                        ;
  7410                        ;static void gen_numname (
  7411                        ;	BYTE* dst,			/* Pointer to th
                    e buffer to store numbered SFN */
  7412                        ;	const BYTE* src,	/* Pointer to SFN */
  7413                        ;	const WCHAR* lfn,	/* Pointer to LFN */
  7414                        ;	UINT seq			/* Sequence numb
                    er */
  7415                        ;)
  7416                        ;{
  7417                        ;	BYTE ns[8], c;
  7418                        ;	UINT i, j;
  7419                        ;	WCHAR wc;
  7420                        ;	DWORD sreg;
  7421                        ;
  7422                        ;
  7423                        ;	mem_cpy(dst, src, 11);
  7424                        ;
  7425                        ;	if (seq > 5) {	/* In case of many collisions, g
                    enerate a hash number instead of sequential number */
  7426                        ;		sreg = seq;
  7427                        ;		while (*lfn) {	/* Create a CRC as hash 
                    value */
  7428                        ;			wc = *lfn++;
  7429                        ;			for (i = 0; i < 16; i++) {
  7430                        ;				sreg = (sreg << 1) + (wc
                     & 1);
  7431                        ;				wc >>= 1;
  7432                        ;				if (sreg & 0x10000) sreg
                     ^= 0x11021;
  7433                        ;			}
  7434                        ;		}
  7435                        ;		seq = (UINT)sreg;
  7436                        ;	}
  7437                        ;
  7438                        ;	/* itoa (hexdecimal) */
  7439                        ;	i = 7;
  7440                        ;	do {
  7441                        ;		c = (BYTE)((seq % 16) + '0');
  7442                        ;		if (c > '9') c += 7;
  7443                        ;		ns[i--] = c;
  7444                        ;		seq /= 16;
  7445                        ;	} while (seq);
  7446                        ;	ns[i] = '~';
  7447                        ;
  7448                        ;	/* Append the number to the SFN body */
  7449                        ;	for (j = 0; j < i && dst[j] != ' '; j++) {
  7450                        ;		if (dbc_1st(dst[j])) {
  7451                        ;			if (j == i - 1) break;
  7452                        ;			j++;
  7453                        ;		}
  Thu Dec  3 2020 22:25                                                Page 149


  7454                        ;	}
  7455                        ;	do {
  7456                        ;		dst[j++] = (i < 8) ? ns[i++] : ' ';
  7457                        ;	} while (j < 8);
  7458                        ;}
  7459                        ;#endif	/* FF_USE_LFN && !FF_FS_READONLY */
  7460                        ;
  7461                        ;
  7462                        ;
  7463                        ;#if FF_USE_LFN
  7464                        ;/*-----------------------------------------------
                    ------------------------*/
  7465                        ;/* FAT-LFN: Calculate checksum of an SFN entry   
                                            */
  7466                        ;/*-----------------------------------------------
                    ------------------------*/
  7467                        ;
  7468                        ;static BYTE sum_sfn (
  7469                        ;	const BYTE* dir		/* Pointer to the SFN en
                    try */
  7470                        ;)
  7471                        ;{
  7472                        ;	BYTE sum = 0;
  7473                        ;	UINT n = 11;
  7474                        ;
  7475                        ;	do {
  7476                        ;		sum = (sum >> 1) + (sum << 7) + *dir++;
  7477                        ;	} while (--n);
  7478                        ;	return sum;
  7479                        ;}
  7480                        ;
  7481                        ;#endif	/* FF_USE_LFN */
  7482                        ;
  7483                        ;
  7484                        ;
  7485                        ;#if FF_FS_EXFAT
  7486                        ;/*-----------------------------------------------
                    ------------------------*/
  7487                        ;/* exFAT: Checksum                               
                                            */
  7488                        ;/*-----------------------------------------------
                    ------------------------*/
  7489                        ;
  7490                        ;static WORD xdir_sum (	/* Get checksum of the d
                    irectoly entry block */
  7491                        ;	const BYTE* dir		/* Directory entry block
                     to be calculated */
  7492                        ;)
  7493                        ;{
  7494                        ;	UINT i, szblk;
  7495                        ;	WORD sum;
  7496                        ;
  7497                        ;
  7498                        ;	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;	
                    /* Number of bytes of the entry block */
  7499                        ;	for (i = sum = 0; i < szblk; i++) {
  7500                        ;		if (i == XDIR_SetSum) {	/* Skip 2-byte s
                    um field */
  Thu Dec  3 2020 22:25                                                Page 150


  7501                        ;			i++;
  7502                        ;		} else {
  7503                        ;			sum = ((sum & 1) ? 0x8000 : 0) +
                     (sum >> 1) + dir[i];
  7504                        ;		}
  7505                        ;	}
  7506                        ;	return sum;
  7507                        ;}
  7508                        ;
  7509                        ;
  7510                        ;
  7511                        ;static WORD xname_sum (	/* Get check sum (to be 
                    used as hash) of the file name */
  7512                        ;	const WCHAR* name	/* File name to be calcu
                    lated */
  7513                        ;)
  7514                        ;{
  7515                        ;	WCHAR chr;
  7516                        ;	WORD sum = 0;
  7517                        ;
  7518                        ;
  7519                        ;	while ((chr = *name++) != 0) {
  7520                        ;		chr = (WCHAR)ff_wtoupper(chr);		
                    /* File name needs to be up-case converted */
  7521                        ;		sum = ((sum & 1) ? 0x8000 : 0) + (sum >>
                     1) + (chr & 0xFF);
  7522                        ;		sum = ((sum & 1) ? 0x8000 : 0) + (sum >>
                     1) + (chr >> 8);
  7523                        ;	}
  7524                        ;	return sum;
  7525                        ;}
  7526                        ;
  7527                        ;
  7528                        ;#if !FF_FS_READONLY && FF_USE_MKFS
  7529                        ;static DWORD xsum32 (	/* Returns 32-bit checks
                    um */
  7530                        ;	BYTE  dat,			/* Byte to be ca
                    lculated (byte-by-byte processing) */
  7531                        ;	DWORD sum			/* Previous sum 
                    value */
  7532                        ;)
  7533                        ;{
  7534                        ;	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) 
                    + dat;
  7535                        ;	return sum;
  7536                        ;}
  7537                        ;#endif
  7538                        ;
  7539                        ;
  7540                        ;#if FF_FS_MINIMIZE <= 1 || FF_FS_RPATH >= 2
  7541                        ;/*-----------------------------------------------
                    -------*/
  7542                        ;/* exFAT: Get object information from a directory
                     block */
  7543                        ;/*-----------------------------------------------
                    -------*/
  7544                        ;
  7545                        ;static void get_xfileinfo (
  Thu Dec  3 2020 22:25                                                Page 151


  7546                        ;	BYTE* dirb,			/* Pointer to th
                    e direcotry entry block 85+C0+C1s */
  7547                        ;	FILINFO* fno		/* Buffer to store the e
                    xtracted file information */
  7548                        ;)
  7549                        ;{
  7550                        ;	WCHAR wc, hs;
  7551                        ;	UINT di, si, nc;
  7552                        ;
  7553                        ;	/* Get file name from the entry block */
  7554                        ;	si = SZDIRE * 2;	/* 1st C1 entry */
  7555                        ;	nc = 0; hs = 0; di = 0;
  7556                        ;	while (nc < dirb[XDIR_NumName]) {
  7557                        ;		if (si >= MAXDIRB(FF_MAX_LFN)) { di = 0;
                     break; }	/* Truncated directory block? */
  7558                        ;		if ((si % SZDIRE) == 0) si += 2;	
                    	/* Skip entry type field */
  7559                        ;		wc = ld_word(dirb + si); si += 2; nc++;	
                    /* Get a character */
  7560                        ;		if (hs == 0 && IsSurrogate(wc)) {	
                    /* Is it a surrogate? */
  7561                        ;			hs = wc; continue;	/* Get l
                    ow surrogate */
  7562                        ;		}
  7563                        ;		wc = put_utf((DWORD)hs << 16 | wc, &fno-
                    >fname[di], FF_LFN_BUF - di);	/* Store it in API encod
                    ing */
  7564                        ;		if (wc == 0) { di = 0; break; }	/* Buffe
                    r overflow or wrong encoding? */
  7565                        ;		di += wc;
  7566                        ;		hs = 0;
  7567                        ;	}
  7568                        ;	if (hs != 0) di = 0;				
                    	/* Broken surrogate pair? */
  7569                        ;	if (di == 0) fno->fname[di++] = '?';	/* Inacc
                    essible object name? */
  7570                        ;	fno->fname[di] = 0;				
                    		/* Terminate the name */
  7571                        ;	fno->altname[0] = 0;				
                    	/* exFAT does not support SFN */
  7572                        ;
  7573                        ;	fno->fattrib = dirb[XDIR_Attr];			
                    /* Attribute */
  7574                        ;	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qw
                    ord(dirb + XDIR_FileSize);	/* Size */
  7575                        ;	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	
                    /* Time */
  7576                        ;	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	
                    /* Date */
  7577                        ;}
  7578                        ;
  7579                        ;#endif	/* FF_FS_MINIMIZE <= 1 || FF_FS_RPATH >=
                     2 */
  7580                        ;
  7581                        ;
  7582                        ;/*-----------------------------------*/
  7583                        ;/* exFAT: Get a directry entry block */
  7584                        ;/*-----------------------------------*/
  Thu Dec  3 2020 22:25                                                Page 152


  7585                        ;
  7586                        ;static FRESULT load_xdir (	/* FR_INT_ERR: i
                    nvalid entry block */
  7587                        ;	DIR* dp					/* Readi
                    ng direcotry object pointing top of the entry block to load 
                    */
  7588                        ;)
  7589                        ;{
  7590                        ;	FRESULT res;
  7591                        ;	UINT i, sz_ent;
  7592                        ;	BYTE* dirb = dp->obj.fs->dirbuf;	/* Point
                    er to the on-memory direcotry entry block 85+C0+C1s */
  7593                        ;
  7594                        ;
  7595                        ;	/* Load file-directory entry */
  7596                        ;	res = move_window(dp->obj.fs, dp->sect);
  7597                        ;	if (res != FR_OK) return res;
  7598                        ;	if (dp->dir[XDIR_Type] != ET_FILEDIR) return FR_
                    INT_ERR;	/* Invalid order */
  7599                        ;	mem_cpy(dirb + 0 * SZDIRE, dp->dir, SZDIRE);
  7600                        ;	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
  7601                        ;	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE)
                     return FR_INT_ERR;
  7602                        ;
  7603                        ;	/* Load stream-extension entry */
  7604                        ;	res = dir_next(dp, 0);
  7605                        ;	if (res == FR_NO_FILE) res = FR_INT_ERR;	
                    /* It cannot be */
  7606                        ;	if (res != FR_OK) return res;
  7607                        ;	res = move_window(dp->obj.fs, dp->sect);
  7608                        ;	if (res != FR_OK) return res;
  7609                        ;	if (dp->dir[XDIR_Type] != ET_STREAM) return FR_I
                    NT_ERR;	/* Invalid order */
  7610                        ;	mem_cpy(dirb + 1 * SZDIRE, dp->dir, SZDIRE);
  7611                        ;	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return
                     FR_INT_ERR;
  7612                        ;
  7613                        ;	/* Load file-name entries */
  7614                        ;	i = 2 * SZDIRE;	/* Name offset to load */
  7615                        ;	do {
  7616                        ;		res = dir_next(dp, 0);
  7617                        ;		if (res == FR_NO_FILE) res = FR_INT_ERR;
                    	/* It cannot be */
  7618                        ;		if (res != FR_OK) return res;
  7619                        ;		res = move_window(dp->obj.fs, dp->sect);
  7620                        ;		if (res != FR_OK) return res;
  7621                        ;		if (dp->dir[XDIR_Type] != ET_FILENAME) r
                    eturn FR_INT_ERR;	/* Invalid order */
  7622                        ;		if (i < MAXDIRB(FF_MAX_LFN)) mem_cpy(dir
                    b + i, dp->dir, SZDIRE);
  7623                        ;	} while ((i += SZDIRE) < sz_ent);
  7624                        ;
  7625                        ;	/* Sanity check (do it for only accessible objec
                    t) */
  7626                        ;	if (i <= MAXDIRB(FF_MAX_LFN)) {
  7627                        ;		if (xdir_sum(dirb) != ld_word(dirb + XDI
                    R_SetSum)) return FR_INT_ERR;
  7628                        ;	}
  Thu Dec  3 2020 22:25                                                Page 153


  7629                        ;	return FR_OK;
  7630                        ;}
  7631                        ;
  7632                        ;
  7633                        ;/*-----------------------------------------------
                    -------------------*/
  7634                        ;/* exFAT: Initialize object allocation info with 
                    loaded entry block */
  7635                        ;/*-----------------------------------------------
                    -------------------*/
  7636                        ;
  7637                        ;static void init_alloc_info (
  7638                        ;	FATFS* fs,		/* Filesystem object */
  7639                        ;	FFOBJID* obj	/* Object allocation information
                     to be initialized */
  7640                        ;)
  7641                        ;{
  7642                        ;	obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus
                    );		/* Start cluster */
  7643                        ;	obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSi
                    ze);	/* Size */
  7644                        ;	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;	
                    			/* Allocation status */
  7645                        ;	obj->n_frag = 0;				
                    						/* No last fragm
                    ent info */
  7646                        ;}
  7647                        ;
  7648                        ;
  7649                        ;
  7650                        ;#if !FF_FS_READONLY || FF_FS_RPATH != 0
  7651                        ;/*-----------------------------------------------
                    -*/
  7652                        ;/* exFAT: Load the object's directory entry block
                     */
  7653                        ;/*-----------------------------------------------
                    -*/
  7654                        ;
  7655                        ;static FRESULT load_obj_xdir (
  7656                        ;	DIR* dp,			/* Blank directo
                    ry object to be used to access containing direcotry */
  7657                        ;	const FFOBJID* obj	/* Object with its conta
                    ining directory information */
  7658                        ;)
  7659                        ;{
  7660                        ;	FRESULT res;
  7661                        ;
  7662                        ;	/* Open object containing directory */
  7663                        ;	dp->obj.fs = obj->fs;
  7664                        ;	dp->obj.sclust = obj->c_scl;
  7665                        ;	dp->obj.stat = (BYTE)obj->c_size;
  7666                        ;	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
  7667                        ;	dp->obj.n_frag = 0;
  7668                        ;	dp->blk_ofs = obj->c_ofs;
  7669                        ;
  7670                        ;	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's
                     entry block */
  7671                        ;	if (res == FR_OK) {
  Thu Dec  3 2020 22:25                                                Page 154


  7672                        ;		res = load_xdir(dp);		/* Load 
                    the object's entry block */
  7673                        ;	}
  7674                        ;	return res;
  7675                        ;}
  7676                        ;#endif
  7677                        ;
  7678                        ;
  7679                        ;#if !FF_FS_READONLY
  7680                        ;/*----------------------------------------*/
  7681                        ;/* exFAT: Store the directory entry block */
  7682                        ;/*----------------------------------------*/
  7683                        ;
  7684                        ;static FRESULT store_xdir (
  7685                        ;	DIR* dp				/* Pointer to th
                    e direcotry object */
  7686                        ;)
  7687                        ;{
  7688                        ;	FRESULT res;
  7689                        ;	UINT nent;
  7690                        ;	BYTE* dirb = dp->obj.fs->dirbuf;	/* Point
                    er to the direcotry entry block 85+C0+C1s */
  7691                        ;
  7692                        ;	/* Create set sum */
  7693                        ;	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
  7694                        ;	nent = dirb[XDIR_NumSec] + 1;
  7695                        ;
  7696                        ;	/* Store the direcotry entry block to the direct
                    ory */
  7697                        ;	res = dir_sdi(dp, dp->blk_ofs);
  7698                        ;	while (res == FR_OK) {
  7699                        ;		res = move_window(dp->obj.fs, dp->sect);
  7700                        ;		if (res != FR_OK) break;
  7701                        ;		mem_cpy(dp->dir, dirb, SZDIRE);
  7702                        ;		dp->obj.fs->wflag = 1;
  7703                        ;		if (--nent == 0) break;
  7704                        ;		dirb += SZDIRE;
  7705                        ;		res = dir_next(dp, 0);
  7706                        ;	}
  7707                        ;	return (res == FR_OK || res == FR_DISK_ERR) ? re
                    s : FR_INT_ERR;
  7708                        ;}
  7709                        ;
  7710                        ;
  7711                        ;
  7712                        ;/*-------------------------------------------*/
  7713                        ;/* exFAT: Create a new directory enrty block */
  7714                        ;/*-------------------------------------------*/
  7715                        ;
  7716                        ;static void create_xdir (
  7717                        ;	BYTE* dirb,			/* Pointer to th
                    e direcotry entry block buffer */
  7718                        ;	const WCHAR* lfn	/* Pointer to the object
                     name */
  7719                        ;)
  7720                        ;{
  7721                        ;	UINT i;
  7722                        ;	BYTE nc1, nlen;
  Thu Dec  3 2020 22:25                                                Page 155


  7723                        ;	WCHAR wc;
  7724                        ;
  7725                        ;
  7726                        ;	/* Create file-directory and stream-extension en
                    try */
  7727                        ;	mem_set(dirb, 0, 2 * SZDIRE);
  7728                        ;	dirb[0 * SZDIRE + XDIR_Type] = ET_FILEDIR;
  7729                        ;	dirb[1 * SZDIRE + XDIR_Type] = ET_STREAM;
  7730                        ;
  7731                        ;	/* Create file-name entries */
  7732                        ;	i = SZDIRE * 2;	/* Top of file_name entries */
  7733                        ;	nlen = nc1 = 0; wc = 1;
  7734                        ;	do {
  7735                        ;		dirb[i++] = ET_FILENAME; dirb[i++] = 0;
  7736                        ;		do {	/* Fill name field */
  7737                        ;			if (wc != 0 && (wc = lfn[nlen]) 
                    != 0) nlen++;	/* Get a character if exist */
  7738                        ;			st_word(dirb + i, wc); 		
                    /* Store it */
  7739                        ;			i += 2;
  7740                        ;		} while (i % SZDIRE != 0);
  7741                        ;		nc1++;
  7742                        ;	} while (lfn[nlen]);	/* Fill next entry if an
                    y char follows */
  7743                        ;
  7744                        ;	dirb[XDIR_NumName] = nlen;		/* Set n
                    ame length */
  7745                        ;	dirb[XDIR_NumSec] = 1 + nc1;	/* Set secondary
                     count (C0 + C1s) */
  7746                        ;	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	
                    /* Set name hash */
  7747                        ;}
  7748                        ;
  7749                        ;#endif	/* !FF_FS_READONLY */
  7750                        ;#endif	/* FF_FS_EXFAT */
  7751                        ;
  7752                        ;
  7753                        ;
  7754                        ;#if FF_FS_MINIMIZE <= 1 || FF_FS_RPATH >= 2 || FF
                    _USE_LABEL || FF_FS_EXFAT
  7755                        ;/*-----------------------------------------------
                    ------------------------*/
  7756                        ;/* Read an object from the directory             
                                            */
  7757                        ;/*-----------------------------------------------
                    ------------------------*/
  7758                        ;
  7759                        ;#define DIR_READ_FILE(dp) dir_read(dp, 0)
  7760                        ;#define DIR_READ_LABEL(dp) dir_read(dp, 1)
  7761                        ;
  7762                        ;static FRESULT dir_read (
  7763                        ;	DIR* dp,		/* Pointer to the direct
                    ory object */
  7764                        ;	int vol			/* Filtered by 0:file/di
                    rectory or 1:volume label */
  7765                        ;)
  7766                        ;{
  7767                        	.line	2377
  Thu Dec  3 2020 22:25                                                Page 156


  7768                        	.line	2381
  7769                        	FFDOS
  7770                        	func
  7771                        	.function	2381
  7772                        ~~dir_read:
  7773                        	longa	on
  7774                        	longi	on
  7775 08:1869: 3B           	tsc
  7776 08:186A: 38           	sec
  7777 08:186B: E9 10 00     	sbc	#L276
  7778 08:186E: 1B           	tcs
  7779 08:186F: 0B           	phd
  7780 08:1870: 5B           	tcd
  7781             00000004   dp_0	set	4
  7782             00000008   vol_0	set	8
  7783                        	.block	2381
  7784                        ;	FRESULT res = FR_NO_FILE;
  7785                        ;	FATFS *fs = dp->obj.fs;
  7786                        ;	BYTE attr, b;
  7787                        ;#if FF_USE_LFN
  7788                        ;	BYTE ord = 0xFF, sum = 0xFF;
  7789                        ;#endif
  7790                        ;
  7791                        ;	while (dp->sect) {
  7792             00000000   res_1	set	0
  7793             00000002   fs_1	set	2
  7794             00000006   attr_1	set	6
  7795             00000007   b_1	set	7
  7796                        	.sym	res,0,5,1,16
  7797                        	.sym	fs,2,138,1,32,80
  7798                        	.sym	attr,6,14,1,8
  7799                        	.sym	b,7,14,1,8
  7800                        	.sym	dp,4,138,6,32,83
  7801                        	.sym	vol,8,5,6,16
  7802 08:1871: A9 04 00     	lda	#$4
  7803 08:1874: 85 09        	sta	<L277+res_1
  7804 08:1876: A7 14        	lda	[<L276+dp_0]
  7805 08:1878: 85 0B        	sta	<L277+fs_1
  7806 08:187A: A0 02 00     	ldy	#$2
  7807 08:187D: B7 14        	lda	[<L276+dp_0],Y
  7808 08:187F: 85 0D        	sta	<L277+fs_1+2
  7809                        	.line	2389
  7810                        L10118:
  7811 08:1881: A0 18 00     	ldy	#$18
  7812 08:1884: B7 14        	lda	[<L276+dp_0],Y
  7813 08:1886: A0 1A 00     	ldy	#$1a
  7814 08:1889: 17 14        	ora	[<L276+dp_0],Y
  7815 08:188B: D0 03        	bne	L279
  7816 08:188D: 82 CD 00     	brl	L10119
  7817                        L279:
  7818                        	.line	2389
  7819                        ;		res = move_window(fs, dp->sect);
  7820                        	.line	2390
  7821 08:1890: A0 1A 00     	ldy	#$1a
  7822 08:1893: B7 14        	lda	[<L276+dp_0],Y
  7823 08:1895: 48           	pha
  7824 08:1896: A0 18 00     	ldy	#$18
  7825 08:1899: B7 14        	lda	[<L276+dp_0],Y
  Thu Dec  3 2020 22:25                                                Page 157


  7826 08:189B: 48           	pha
  7827 08:189C: D4 0D        	pei	<L277+fs_1+2
  7828 08:189E: D4 0B        	pei	<L277+fs_1
  7829 08:18A0: 22 FA 03 08  	jsl	~~move_window
  7830 08:18A4: 85 09        	sta	<L277+res_1
  7831                        ;		if (res != FR_OK) break;
  7832                        	.line	2391
  7833 08:18A6: A5 09        	lda	<L277+res_1
  7834 08:18A8: F0 03        	beq	L280
  7835 08:18AA: 82 B0 00     	brl	L10119
  7836                        L280:
  7837                        ;		b = dp->dir[DIR_Name];	/* Test for the 
                    entry type */
  7838                        	.line	2392
  7839 08:18AD: A0 1C 00     	ldy	#$1c
  7840 08:18B0: B7 14        	lda	[<L276+dp_0],Y
  7841 08:18B2: 85 01        	sta	<R0
  7842 08:18B4: A0 1E 00     	ldy	#$1e
  7843 08:18B7: B7 14        	lda	[<L276+dp_0],Y
  7844 08:18B9: 85 03        	sta	<R0+2
  7845 08:18BB: E2 20        	sep	#$20
  7846                        	longa	off
  7847 08:18BD: A7 01        	lda	[<R0]
  7848 08:18BF: 85 10        	sta	<L277+b_1
  7849 08:18C1: C2 20        	rep	#$20
  7850                        	longa	on
  7851                        ;		if (b == 0) {
  7852                        	.line	2393
  7853 08:18C3: A5 10        	lda	<L277+b_1
  7854 08:18C5: 29 FF 00     	and	#$ff
  7855 08:18C8: F0 03        	beq	L281
  7856 08:18CA: 82 08 00     	brl	L10120
  7857                        L281:
  7858                        	.line	2393
  7859                        ;			res = FR_NO_FILE; break; /* Reac
                    hed to end of the directory */
  7860                        	.line	2394
  7861 08:18CD: A9 04 00     	lda	#$4
  7862 08:18D0: 85 09        	sta	<L277+res_1
  7863                        	.line	2394
  7864 08:18D2: 82 88 00     	brl	L10119
  7865                        ;		}
  7866                        	.line	2395
  7867                        ;#if FF_FS_EXFAT
  7868                        ;		if (fs->fs_type == FS_EXFAT) {	/* On th
                    e exFAT volume */
  7869                        ;			if (FF_USE_LABEL && vol) {
  7870                        ;				if (b == ET_VLABEL) brea
                    k;	/* Volume label entry? */
  7871                        ;			} else {
  7872                        ;				if (b == ET_FILEDIR) {	
                    	/* Start of the file entry block? */
  7873                        ;					dp->blk_ofs = dp
                    ->dptr;	/* Get location of the block */
  7874                        ;					res = load_xdir(
                    dp);	/* Load the entry block */
  7875                        ;					if (res == FR_OK
                    ) {
  Thu Dec  3 2020 22:25                                                Page 158


  7876                        ;						dp->obj.
                    attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute
                     */
  7877                        ;					}
  7878                        ;					break;
  7879                        ;				}
  7880                        ;			}
  7881                        ;		} else
  7882                        ;#endif
  7883                        ;		{	/* On the FAT/FAT32 volume */
  7884                        L10120:
  7885                        	.line	2412
  7886                        ;			dp->obj.attr = attr = dp->dir[DI
                    R_Attr] & AM_MASK;	/* Get attribute */
  7887                        	.line	2413
  7888 08:18D5: A0 1C 00     	ldy	#$1c
  7889 08:18D8: B7 14        	lda	[<L276+dp_0],Y
  7890 08:18DA: 85 01        	sta	<R0
  7891 08:18DC: A0 1E 00     	ldy	#$1e
  7892 08:18DF: B7 14        	lda	[<L276+dp_0],Y
  7893 08:18E1: 85 03        	sta	<R0+2
  7894 08:18E3: E2 20        	sep	#$20
  7895                        	longa	off
  7896 08:18E5: A0 0B 00     	ldy	#$b
  7897 08:18E8: B7 01        	lda	[<R0],Y
  7898 08:18EA: 29 3F        	and	#<$3f
  7899 08:18EC: 85 0F        	sta	<L277+attr_1
  7900 08:18EE: C2 20        	rep	#$20
  7901                        	longa	on
  7902 08:18F0: E2 20        	sep	#$20
  7903                        	longa	off
  7904 08:18F2: A5 0F        	lda	<L277+attr_1
  7905 08:18F4: A0 06 00     	ldy	#$6
  7906 08:18F7: 97 14        	sta	[<L276+dp_0],Y
  7907 08:18F9: C2 20        	rep	#$20
  7908                        	longa	on
  7909                        ;#if FF_USE_LFN		/* LFN configuration */
  7910                        ;			if (b == DDEM || b == '.' || (in
                    t)((attr & ~AM_ARC) == AM_VOL) != vol) {	/* An entry with
                    out valid data */
  7911                        ;				ord = 0xFF;
  7912                        ;			} else {
  7913                        ;				if (attr == AM_LFN) {	
                    		/* An LFN entry is found */
  7914                        ;					if (b & LLEF) {	
                    		/* Is it start of an LFN sequence? */
  7915                        ;						sum = dp
                    ->dir[LDIR_Chksum];
  7916                        ;						b &= (BY
                    TE)~LLEF; ord = b;
  7917                        ;						dp->blk_
                    ofs = dp->dptr;
  7918                        ;					}
  7919                        ;					/* Check LFN val
                    idity and capture it */
  7920                        ;					ord = (b == ord 
                    && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->d
                    ir)) ? ord - 1 : 0xFF;
  Thu Dec  3 2020 22:25                                                Page 159


  7921                        ;				} else {		
                    			/* An SFN entry is found */
  7922                        ;					if (ord != 0 || 
                    sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
  7923                        ;						dp->blk_
                    ofs = 0xFFFFFFFF;			/* It has no LFN. */
  7924                        ;					}
  7925                        ;					break;
  7926                        ;				}
  7927                        ;			}
  7928                        ;#else		/* Non LFN configuration */
  7929                        ;			if (b != DDEM && b != '.' && att
                    r != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	
                    /* Is it a valid entry? */
  7930                        	.line	2434
  7931 08:18FB: E2 20        	sep	#$20
  7932                        	longa	off
  7933 08:18FD: A5 10        	lda	<L277+b_1
  7934 08:18FF: C9 E5        	cmp	#<$e5
  7935 08:1901: C2 20        	rep	#$20
  7936                        	longa	on
  7937 08:1903: D0 03        	bne	L282
  7938 08:1905: 82 3E 00     	brl	L10121
  7939                        L282:
  7940 08:1908: E2 20        	sep	#$20
  7941                        	longa	off
  7942 08:190A: A5 10        	lda	<L277+b_1
  7943 08:190C: C9 2E        	cmp	#<$2e
  7944 08:190E: C2 20        	rep	#$20
  7945                        	longa	on
  7946 08:1910: D0 03        	bne	L283
  7947 08:1912: 82 31 00     	brl	L10121
  7948                        L283:
  7949 08:1915: E2 20        	sep	#$20
  7950                        	longa	off
  7951 08:1917: A5 0F        	lda	<L277+attr_1
  7952 08:1919: C9 0F        	cmp	#<$f
  7953 08:191B: C2 20        	rep	#$20
  7954                        	longa	on
  7955 08:191D: D0 03        	bne	L284
  7956 08:191F: 82 24 00     	brl	L10121
  7957                        L284:
  7958 08:1922: 64 01        	stz	<R0
  7959 08:1924: A5 0F        	lda	<L277+attr_1
  7960 08:1926: 29 FF 00     	and	#$ff
  7961 08:1929: 29 DF FF     	and	#<$ffffffdf
  7962 08:192C: 85 05        	sta	<R1
  7963 08:192E: A5 05        	lda	<R1
  7964 08:1930: C9 08 00     	cmp	#<$8
  7965 08:1933: F0 03        	beq	L286
  7966 08:1935: 82 02 00     	brl	L285
  7967                        L286:
  7968 08:1938: E6 01        	inc	<R0
  7969                        L285:
  7970 08:193A: A5 01        	lda	<R0
  7971 08:193C: C5 18        	cmp	<L276+vol_0
  7972 08:193E: F0 03        	beq	L287
  7973 08:1940: 82 03 00     	brl	L10121
  Thu Dec  3 2020 22:25                                                Page 160


  7974                        L287:
  7975                        	.line	2434
  7976                        ;				break;
  7977                        	.line	2435
  7978 08:1943: 82 17 00     	brl	L10119
  7979                        ;			}
  7980                        	.line	2436
  7981                        ;#endif
  7982                        ;		}
  7983                        L10121:
  7984                        	.line	2438
  7985                        ;		res = dir_next(dp, 0);		/* Next 
                    entry */
  7986                        	.line	2439
  7987 08:1946: F4 00 00     	pea	#<$0
  7988 08:1949: D4 16        	pei	<L276+dp_0+2
  7989 08:194B: D4 14        	pei	<L276+dp_0
  7990 08:194D: 22 FC 13 08  	jsl	~~dir_next
  7991 08:1951: 85 09        	sta	<L277+res_1
  7992                        ;		if (res != FR_OK) break;
  7993                        	.line	2440
  7994 08:1953: A5 09        	lda	<L277+res_1
  7995 08:1955: F0 03        	beq	L288
  7996 08:1957: 82 03 00     	brl	L10119
  7997                        L288:
  7998                        ;	}
  7999                        	.line	2441
  8000 08:195A: 82 24 FF     	brl	L10118
  8001                        L10119:
  8002                        ;
  8003                        ;	if (res != FR_OK) dp->sect = 0;		/* Termi
                    nate the read operation on error or EOT */
  8004                        	.line	2443
  8005 08:195D: A5 09        	lda	<L277+res_1
  8006 08:195F: D0 03        	bne	L289
  8007 08:1961: 82 10 00     	brl	L10122
  8008                        L289:
  8009                        	.line	2443
  8010 08:1964: A9 00 00     	lda	#$0
  8011 08:1967: A0 18 00     	ldy	#$18
  8012 08:196A: 97 14        	sta	[<L276+dp_0],Y
  8013 08:196C: A9 00 00     	lda	#$0
  8014 08:196F: A0 1A 00     	ldy	#$1a
  8015 08:1972: 97 14        	sta	[<L276+dp_0],Y
  8016                        ;	return res;
  8017                        L10122:
  8018                        	.line	2444
  8019 08:1974: A5 09        	lda	<L277+res_1
  8020                        L290:
  8021 08:1976: A8           	tay
  8022 08:1977: A5 12        	lda	<L276+2
  8023 08:1979: 85 18        	sta	<L276+2+6
  8024 08:197B: A5 11        	lda	<L276+1
  8025 08:197D: 85 17        	sta	<L276+1+6
  8026 08:197F: 2B           	pld
  8027 08:1980: 3B           	tsc
  8028 08:1981: 18           	clc
  8029 08:1982: 69 16 00     	adc	#L276+6
  Thu Dec  3 2020 22:25                                                Page 161


  8030 08:1985: 1B           	tcs
  8031 08:1986: 98           	tya
  8032 08:1987: 6B           	rtl
  8033                        ;}
  8034                        	.line	2445
  8035                        	.endblock	2445
  8036             00000010   L276	equ	16
  8037             00000009   L277	equ	9
  8038 08:1988:              	ends
  8039                        	efunc
  8040                        	.endfunc	2445,9,16
  8041                        	.line	2445
  8042                        ;
  8043                        ;#endif	/* FF_FS_MINIMIZE <= 1 || FF_USE_LABEL |
                    | FF_FS_RPATH >= 2 */
  8044                        ;
  8045                        ;
  8046                        ;
  8047                        ;/*-----------------------------------------------
                    ------------------------*/
  8048                        ;/* Directory handling - Find an object in the dir
                    ectory                  */
  8049                        ;/*-----------------------------------------------
                    ------------------------*/
  8050                        ;
  8051                        ;static FRESULT dir_find (	/* FR_OK(0):succ
                    eeded, !=0:error */
  8052                        ;	DIR* dp					/* Point
                    er to the directory object with the file name */
  8053                        ;)
  8054                        ;{
  8055                        	.line	2455
  8056                        	.line	2458
  8057                        	FFDOS
  8058                        	func
  8059                        	.function	2458
  8060                        ~~dir_find:
  8061                        	longa	on
  8062                        	longi	on
  8063 08:1988: 3B           	tsc
  8064 08:1989: 38           	sec
  8065 08:198A: E9 0B 00     	sbc	#L291
  8066 08:198D: 1B           	tcs
  8067 08:198E: 0B           	phd
  8068 08:198F: 5B           	tcd
  8069             00000004   dp_0	set	4
  8070                        	.block	2458
  8071                        ;	FRESULT res;
  8072                        ;	FATFS *fs = dp->obj.fs;
  8073                        ;	BYTE c;
  8074                        ;#if FF_USE_LFN
  8075                        ;	BYTE a, ord, sum;
  8076                        ;#endif
  8077                        ;
  8078                        ;	res = dir_sdi(dp, 0);			/* Rewin
                    d directory object */
  8079             00000000   res_1	set	0
  8080             00000002   fs_1	set	2
  Thu Dec  3 2020 22:25                                                Page 162


  8081             00000006   c_1	set	6
  8082                        	.sym	res,0,5,1,16
  8083                        	.sym	fs,2,138,1,32,80
  8084                        	.sym	c,6,14,1,8
  8085                        	.sym	dp,4,138,6,32,83
  8086 08:1990: A7 0F        	lda	[<L291+dp_0]
  8087 08:1992: 85 07        	sta	<L292+fs_1
  8088 08:1994: A0 02 00     	ldy	#$2
  8089 08:1997: B7 0F        	lda	[<L291+dp_0],Y
  8090 08:1999: 85 09        	sta	<L292+fs_1+2
  8091                        	.line	2466
  8092 08:199B: F4 00 00     	pea	#^$0
  8093 08:199E: F4 00 00     	pea	#<$0
  8094 08:19A1: D4 11        	pei	<L291+dp_0+2
  8095 08:19A3: D4 0F        	pei	<L291+dp_0
  8096 08:19A5: 22 BD 11 08  	jsl	~~dir_sdi
  8097 08:19A9: 85 05        	sta	<L292+res_1
  8098                        ;	if (res != FR_OK) return res;
  8099                        	.line	2467
  8100 08:19AB: A5 05        	lda	<L292+res_1
  8101 08:19AD: D0 03        	bne	L294
  8102 08:19AF: 82 14 00     	brl	L10123
  8103                        L294:
  8104                        	.line	2467
  8105 08:19B2: A5 05        	lda	<L292+res_1
  8106                        L295:
  8107 08:19B4: A8           	tay
  8108 08:19B5: A5 0D        	lda	<L291+2
  8109 08:19B7: 85 11        	sta	<L291+2+4
  8110 08:19B9: A5 0C        	lda	<L291+1
  8111 08:19BB: 85 10        	sta	<L291+1+4
  8112 08:19BD: 2B           	pld
  8113 08:19BE: 3B           	tsc
  8114 08:19BF: 18           	clc
  8115 08:19C0: 69 0F 00     	adc	#L291+4
  8116 08:19C3: 1B           	tcs
  8117 08:19C4: 98           	tya
  8118 08:19C5: 6B           	rtl
  8119                        ;#if FF_FS_EXFAT
  8120                        ;	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT 
                    volume */
  8121                        ;		BYTE nc;
  8122                        ;		UINT di, ni;
  8123                        ;		WORD hash = xname_sum(fs->lfnbuf);	
                    	/* Hash value of the name to find */
  8124                        ;
  8125                        ;		while ((res = DIR_READ_FILE(dp)) == FR_O
                    K) {	/* Read an item */
  8126                        ;#if FF_MAX_LFN < 255
  8127                        ;			if (fs->dirbuf[XDIR_NumName] > F
                    F_MAX_LFN) continue;			/* Skip comparis
                    on if inaccessible object name */
  8128                        ;#endif
  8129                        ;			if (ld_word(fs->dirbuf + XDIR_Na
                    meHash) != hash) continue;	/* Skip comparison if hash misma
                    tched */
  8130                        ;			for (nc = fs->dirbuf[XDIR_NumNam
                    e], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	
  Thu Dec  3 2020 22:25                                                Page 163


                    /* Compare the name */
  8131                        ;				if ((di % SZDIRE) == 0) 
                    di += 2;
  8132                        ;				if (ff_wtoupper(ld_word(
                    fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
  8133                        ;			}
  8134                        ;			if (nc == 0 && !fs->lfnbuf[ni]) 
                    break;	/* Name matched? */
  8135                        ;		}
  8136                        ;		return res;
  8137                        ;	}
  8138                        ;#endif
  8139                        ;	/* On the FAT/FAT32 volume */
  8140                        ;#if FF_USE_LFN
  8141                        ;	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	
                    /* Reset LFN sequence */
  8142                        ;#endif
  8143                        ;	do {
  8144                        L10123:
  8145                        	.line	2492
  8146                        L10126:
  8147                        	.line	2492
  8148                        ;		res = move_window(fs, dp->sect);
  8149                        	.line	2493
  8150 08:19C6: A0 1A 00     	ldy	#$1a
  8151 08:19C9: B7 0F        	lda	[<L291+dp_0],Y
  8152 08:19CB: 48           	pha
  8153 08:19CC: A0 18 00     	ldy	#$18
  8154 08:19CF: B7 0F        	lda	[<L291+dp_0],Y
  8155 08:19D1: 48           	pha
  8156 08:19D2: D4 09        	pei	<L292+fs_1+2
  8157 08:19D4: D4 07        	pei	<L292+fs_1
  8158 08:19D6: 22 FA 03 08  	jsl	~~move_window
  8159 08:19DA: 85 05        	sta	<L292+res_1
  8160                        ;		if (res != FR_OK) break;
  8161                        	.line	2494
  8162 08:19DC: A5 05        	lda	<L292+res_1
  8163 08:19DE: F0 03        	beq	L296
  8164 08:19E0: 82 A8 00     	brl	L10125
  8165                        L296:
  8166                        ;		c = dp->dir[DIR_Name];
  8167                        	.line	2495
  8168 08:19E3: A0 1C 00     	ldy	#$1c
  8169 08:19E6: B7 0F        	lda	[<L291+dp_0],Y
  8170 08:19E8: 85 01        	sta	<R0
  8171 08:19EA: A0 1E 00     	ldy	#$1e
  8172 08:19ED: B7 0F        	lda	[<L291+dp_0],Y
  8173 08:19EF: 85 03        	sta	<R0+2
  8174 08:19F1: E2 20        	sep	#$20
  8175                        	longa	off
  8176 08:19F3: A7 01        	lda	[<R0]
  8177 08:19F5: 85 0B        	sta	<L292+c_1
  8178 08:19F7: C2 20        	rep	#$20
  8179                        	longa	on
  8180                        ;		if (c == 0) { res = FR_NO_FILE; break; }
                    	/* Reached to end of table */
  8181                        	.line	2496
  8182 08:19F9: A5 0B        	lda	<L292+c_1
  Thu Dec  3 2020 22:25                                                Page 164


  8183 08:19FB: 29 FF 00     	and	#$ff
  8184 08:19FE: F0 03        	beq	L297
  8185 08:1A00: 82 08 00     	brl	L10127
  8186                        L297:
  8187                        	.line	2496
  8188                        	.line	2496
  8189 08:1A03: A9 04 00     	lda	#$4
  8190 08:1A06: 85 05        	sta	<L292+res_1
  8191                        	.line	2496
  8192 08:1A08: 82 80 00     	brl	L10125
  8193                        	.line	2496
  8194                        ;#if FF_USE_LFN		/* LFN configuration */
  8195                        ;		dp->obj.attr = a = dp->dir[DIR_Attr] & A
                    M_MASK;
  8196                        ;		if (c == DDEM || ((a & AM_VOL) && a != A
                    M_LFN)) {	/* An entry without valid data */
  8197                        ;			ord = 0xFF; dp->blk_ofs = 0xFFFF
                    FFFF;	/* Reset LFN sequence */
  8198                        ;		} else {
  8199                        ;			if (a == AM_LFN) {		
                    	/* An LFN entry is found */
  8200                        ;				if (!(dp->fn[NSFLAG] & N
                    S_NOLFN)) {
  8201                        ;					if (c & LLEF) {	
                    	/* Is it start of LFN sequence? */
  8202                        ;						sum = dp
                    ->dir[LDIR_Chksum];
  8203                        ;						c &= (BY
                    TE)~LLEF; ord = c;	/* LFN start order */
  8204                        ;						dp->blk_
                    ofs = dp->dptr;	/* Start offset of LFN */
  8205                        ;					}
  8206                        ;					/* Check validit
                    y of the LFN entry and compare it with given name */
  8207                        ;					ord = (c == ord 
                    && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->di
                    r)) ? ord - 1 : 0xFF;
  8208                        ;				}
  8209                        ;			} else {			
                    		/* An SFN entry is found */
  8210                        ;				if (ord == 0 && sum == s
                    um_sfn(dp->dir)) break;	/* LFN matched? */
  8211                        ;				if (!(dp->fn[NSFLAG] & N
                    S_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN m
                    atched? */
  8212                        ;				ord = 0xFF; dp->blk_ofs 
                    = 0xFFFFFFFF;	/* Reset LFN sequence */
  8213                        ;			}
  8214                        ;		}
  8215                        ;#else		/* Non LFN configuration */
  8216                        ;		dp->obj.attr = dp->dir[DIR_Attr] & AM_MA
                    SK;
  8217                        L10127:
  8218                        	.line	2519
  8219 08:1A0B: A0 1C 00     	ldy	#$1c
  8220 08:1A0E: B7 0F        	lda	[<L291+dp_0],Y
  8221 08:1A10: 85 01        	sta	<R0
  8222 08:1A12: A0 1E 00     	ldy	#$1e
  Thu Dec  3 2020 22:25                                                Page 165


  8223 08:1A15: B7 0F        	lda	[<L291+dp_0],Y
  8224 08:1A17: 85 03        	sta	<R0+2
  8225 08:1A19: E2 20        	sep	#$20
  8226                        	longa	off
  8227 08:1A1B: A0 0B 00     	ldy	#$b
  8228 08:1A1E: B7 01        	lda	[<R0],Y
  8229 08:1A20: 29 3F        	and	#<$3f
  8230 08:1A22: C2 20        	rep	#$20
  8231                        	longa	on
  8232 08:1A24: E2 20        	sep	#$20
  8233                        	longa	off
  8234 08:1A26: A0 06 00     	ldy	#$6
  8235 08:1A29: 97 0F        	sta	[<L291+dp_0],Y
  8236 08:1A2B: C2 20        	rep	#$20
  8237                        	longa	on
  8238                        ;		if (!(dp->dir[DIR_Attr] & AM_VOL) && !me
                    m_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? 
                    */
  8239                        	.line	2520
  8240 08:1A2D: A0 1C 00     	ldy	#$1c
  8241 08:1A30: B7 0F        	lda	[<L291+dp_0],Y
  8242 08:1A32: 85 01        	sta	<R0
  8243 08:1A34: A0 1E 00     	ldy	#$1e
  8244 08:1A37: B7 0F        	lda	[<L291+dp_0],Y
  8245 08:1A39: 85 03        	sta	<R0+2
  8246 08:1A3B: E2 20        	sep	#$20
  8247                        	longa	off
  8248 08:1A3D: A0 0B 00     	ldy	#$b
  8249 08:1A40: B7 01        	lda	[<R0],Y
  8250 08:1A42: 29 08        	and	#<$8
  8251 08:1A44: C2 20        	rep	#$20
  8252                        	longa	on
  8253 08:1A46: F0 03        	beq	L299
  8254 08:1A48: 82 2C 00     	brl	L298
  8255                        L299:
  8256 08:1A4B: F4 0B 00     	pea	#<$b
  8257 08:1A4E: 18           	clc
  8258 08:1A4F: A9 20 00     	lda	#$20
  8259 08:1A52: 65 0F        	adc	<L291+dp_0
  8260 08:1A54: 85 01        	sta	<R0
  8261 08:1A56: A9 00 00     	lda	#$0
  8262 08:1A59: 65 11        	adc	<L291+dp_0+2
  8263 08:1A5B: 85 03        	sta	<R0+2
  8264 08:1A5D: D4 03        	pei	<R0+2
  8265 08:1A5F: D4 01        	pei	<R0
  8266 08:1A61: A0 1E 00     	ldy	#$1e
  8267 08:1A64: B7 0F        	lda	[<L291+dp_0],Y
  8268 08:1A66: 48           	pha
  8269 08:1A67: A0 1C 00     	ldy	#$1c
  8270 08:1A6A: B7 0F        	lda	[<L291+dp_0],Y
  8271 08:1A6C: 48           	pha
  8272 08:1A6D: 22 16 02 08  	jsl	~~mem_cmp
  8273 08:1A71: AA           	tax
  8274 08:1A72: D0 03        	bne	L300
  8275 08:1A74: 82 14 00     	brl	L10125
  8276                        L300:
  8277                        L298:
  8278                        ;#endif
  Thu Dec  3 2020 22:25                                                Page 166


  8279                        ;		res = dir_next(dp, 0);	/* Next entry */
  8280                        	.line	2522
  8281 08:1A77: F4 00 00     	pea	#<$0
  8282 08:1A7A: D4 11        	pei	<L291+dp_0+2
  8283 08:1A7C: D4 0F        	pei	<L291+dp_0
  8284 08:1A7E: 22 FC 13 08  	jsl	~~dir_next
  8285 08:1A82: 85 05        	sta	<L292+res_1
  8286                        ;	} while (res == FR_OK);
  8287                        	.line	2523
  8288                        L10124:
  8289 08:1A84: A5 05        	lda	<L292+res_1
  8290 08:1A86: D0 03        	bne	L301
  8291 08:1A88: 82 3B FF     	brl	L10126
  8292                        L301:
  8293                        L10125:
  8294                        ;
  8295                        ;	return res;
  8296                        	.line	2525
  8297 08:1A8B: A5 05        	lda	<L292+res_1
  8298 08:1A8D: 82 24 FF     	brl	L295
  8299                        ;}
  8300                        	.line	2526
  8301                        	.endblock	2526
  8302             0000000B   L291	equ	11
  8303             00000005   L292	equ	5
  8304 08:1A90:              	ends
  8305                        	efunc
  8306                        	.endfunc	2526,5,11
  8307                        	.line	2526
  8308                        ;
  8309                        ;
  8310                        ;
  8311                        ;
  8312                        ;#if !FF_FS_READONLY
  8313                        ;/*-----------------------------------------------
                    ------------------------*/
  8314                        ;/* Register an object to the directory           
                                            */
  8315                        ;/*-----------------------------------------------
                    ------------------------*/
  8316                        ;
  8317                        ;static FRESULT dir_register (	/* FR_OK:succeed
                    ed, FR_DENIED:no free entry or too many SFN collision, FR_DI
                    SK_ERR:disk error */
  8318                        ;	DIR* dp						
                    /* Target directory with object name to be created */
  8319                        ;)
  8320                        ;{
  8321                        	.line	2536
  8322                        	.line	2539
  8323                        	FFDOS
  8324                        	func
  8325                        	.function	2539
  8326                        ~~dir_register:
  8327                        	longa	on
  8328                        	longi	on
  8329 08:1A90: 3B           	tsc
  8330 08:1A91: 38           	sec
  Thu Dec  3 2020 22:25                                                Page 167


  8331 08:1A92: E9 0A 00     	sbc	#L302
  8332 08:1A95: 1B           	tcs
  8333 08:1A96: 0B           	phd
  8334 08:1A97: 5B           	tcd
  8335             00000004   dp_0	set	4
  8336                        	.block	2539
  8337                        ;	FRESULT res;
  8338                        ;	FATFS *fs = dp->obj.fs;
  8339                        ;#if FF_USE_LFN		/* LFN configuration */
  8340                        ;	UINT n, nlen, nent;
  8341                        ;	BYTE sn[12], sum;
  8342                        ;
  8343                        ;
  8344                        ;	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) retur
                    n FR_INVALID_NAME;	/* Check name validity */
  8345                        ;	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	
                    /* Get lfn length */
  8346                        ;
  8347                        ;#if FF_FS_EXFAT
  8348                        ;	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT 
                    volume */
  8349                        ;		nent = (nlen + 14) / 15 + 2;	/* Numbe
                    r of entries to allocate (85+C0+C1s) */
  8350                        ;		res = dir_alloc(dp, nent);		
                    /* Allocate directory entries */
  8351                        ;		if (res != FR_OK) return res;
  8352                        ;		dp->blk_ofs = dp->dptr - SZDIRE * (nent 
                    - 1);	/* Set the allocated entry block offset */
  8353                        ;
  8354                        ;		if (dp->obj.stat & 4) {			
                    /* Has the directory been stretched by new allocation? */
  8355                        ;			dp->obj.stat &= ~4;
  8356                        ;			res = fill_first_frag(&dp->obj);
                    	/* Fill the first fragment on the FAT if needed */
  8357                        ;			if (res != FR_OK) return res;
  8358                        ;			res = fill_last_frag(&dp->obj, d
                    p->clust, 0xFFFFFFFF);	/* Fill the last fragment on the
                     FAT if needed */
  8359                        ;			if (res != FR_OK) return res;
  8360                        ;			if (dp->obj.sclust != 0) {	
                    	/* Is it a sub-directory? */
  8361                        ;				DIR dj;
  8362                        ;
  8363                        ;				res = load_obj_xdir(&dj,
                     &dp->obj);	/* Load the object status */
  8364                        ;				if (res != FR_OK) return
                     res;
  8365                        ;				dp->obj.objsize += (DWOR
                    D)fs->csize * SS(fs);			/* Increase the 
                    directory size by cluster size */
  8366                        ;				st_qword(fs->dirbuf + XD
                    IR_FileSize, dp->obj.objsize);
  8367                        ;				st_qword(fs->dirbuf + XD
                    IR_ValidFileSize, dp->obj.objsize);
  8368                        ;				fs->dirbuf[XDIR_GenFlags
                    ] = dp->obj.stat | 1;			/* Update the al
                    location status */
  8369                        ;				res = store_xdir(&dj);	
  Thu Dec  3 2020 22:25                                                Page 168


                    			/* Store the object status */
  8370                        ;				if (res != FR_OK) return
                     res;
  8371                        ;			}
  8372                        ;		}
  8373                        ;
  8374                        ;		create_xdir(fs->dirbuf, fs->lfnbuf);	
                    /* Create on-memory directory block to be written later */
  8375                        ;		return FR_OK;
  8376                        ;	}
  8377                        ;#endif
  8378                        ;	/* On the FAT/FAT32 volume */
  8379                        ;	mem_cpy(sn, dp->fn, 12);
  8380                        ;	if (sn[NSFLAG] & NS_LOSS) {			
                    /* When LFN is out of 8.3 format, generate a numbered name *
                    /
  8381                        ;		dp->fn[NSFLAG] = NS_NOLFN;		
                    /* Find only SFN */
  8382                        ;		for (n = 1; n < 100; n++) {
  8383                        ;			gen_numname(dp->fn, sn, fs->lfnb
                    uf, n);	/* Generate a numbered name */
  8384                        ;			res = dir_find(dp);		
                    		/* Check if the name collides with existing SFN 
                    */
  8385                        ;			if (res != FR_OK) break;
  8386                        ;		}
  8387                        ;		if (n == 100) return FR_DENIED;		
                    /* Abort if too many collisions */
  8388                        ;		if (res != FR_NO_FILE) return res;	
                    /* Abort if the result is other than 'not collided' */
  8389                        ;		dp->fn[NSFLAG] = sn[NSFLAG];
  8390                        ;	}
  8391                        ;
  8392                        ;	/* Create an SFN with/without LFNs. */
  8393                        ;	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 
                    + 1 : 1;	/* Number of entries to allocate */
  8394                        ;	res = dir_alloc(dp, nent);		/* Alloc
                    ate entries */
  8395                        ;	if (res == FR_OK && --nent) {	/* Set LFN entry
                     if needed */
  8396                        ;		res = dir_sdi(dp, dp->dptr - nent * SZDI
                    RE);
  8397                        ;		if (res == FR_OK) {
  8398                        ;			sum = sum_sfn(dp->fn);	/* Check
                    sum value of the SFN tied to the LFN */
  8399                        ;			do {				
                    	/* Store LFN entries in bottom first */
  8400                        ;				res = move_window(fs, dp
                    ->sect);
  8401                        ;				if (res != FR_OK) break;
  8402                        ;				put_lfn(fs->lfnbuf, dp->
                    dir, (BYTE)nent, sum);
  8403                        ;				fs->wflag = 1;
  8404                        ;				res = dir_next(dp, 0);	
                    /* Next entry */
  8405                        ;			} while (res == FR_OK && --nent)
                    ;
  8406                        ;		}
  Thu Dec  3 2020 22:25                                                Page 169


  8407                        ;	}
  8408                        ;
  8409                        ;#else	/* Non LFN configuration */
  8410                        ;	res = dir_alloc(dp, 1);		/* Allocate an e
                    ntry for SFN */
  8411             00000000   res_1	set	0
  8412             00000002   fs_1	set	2
  8413                        	.sym	res,0,5,1,16
  8414                        	.sym	fs,2,138,1,32,80
  8415                        	.sym	dp,4,138,6,32,83
  8416 08:1A98: A7 0E        	lda	[<L302+dp_0]
  8417 08:1A9A: 85 07        	sta	<L303+fs_1
  8418 08:1A9C: A0 02 00     	ldy	#$2
  8419 08:1A9F: B7 0E        	lda	[<L302+dp_0],Y
  8420 08:1AA1: 85 09        	sta	<L303+fs_1+2
  8421                        	.line	2613
  8422 08:1AA3: F4 01 00     	pea	#<$1
  8423 08:1AA6: D4 10        	pei	<L302+dp_0+2
  8424 08:1AA8: D4 0E        	pei	<L302+dp_0
  8425 08:1AAA: 22 B0 16 08  	jsl	~~dir_alloc
  8426 08:1AAE: 85 05        	sta	<L303+res_1
  8427                        ;
  8428                        ;#endif
  8429                        ;
  8430                        ;	/* Set SFN entry */
  8431                        ;	if (res == FR_OK) {
  8432                        	.line	2618
  8433 08:1AB0: A5 05        	lda	<L303+res_1
  8434 08:1AB2: F0 03        	beq	L305
  8435 08:1AB4: 82 64 00     	brl	L10128
  8436                        L305:
  8437                        	.line	2618
  8438                        ;		res = move_window(fs, dp->sect);
  8439                        	.line	2619
  8440 08:1AB7: A0 1A 00     	ldy	#$1a
  8441 08:1ABA: B7 0E        	lda	[<L302+dp_0],Y
  8442 08:1ABC: 48           	pha
  8443 08:1ABD: A0 18 00     	ldy	#$18
  8444 08:1AC0: B7 0E        	lda	[<L302+dp_0],Y
  8445 08:1AC2: 48           	pha
  8446 08:1AC3: D4 09        	pei	<L303+fs_1+2
  8447 08:1AC5: D4 07        	pei	<L303+fs_1
  8448 08:1AC7: 22 FA 03 08  	jsl	~~move_window
  8449 08:1ACB: 85 05        	sta	<L303+res_1
  8450                        ;		if (res == FR_OK) {
  8451                        	.line	2620
  8452 08:1ACD: A5 05        	lda	<L303+res_1
  8453 08:1ACF: F0 03        	beq	L306
  8454 08:1AD1: 82 47 00     	brl	L10129
  8455                        L306:
  8456                        	.line	2620
  8457                        ;			mem_set(dp->dir, 0, SZDIRE);	
                    /* Clean the entry */
  8458                        	.line	2621
  8459 08:1AD4: F4 20 00     	pea	#<$20
  8460 08:1AD7: F4 00 00     	pea	#<$0
  8461 08:1ADA: A0 1E 00     	ldy	#$1e
  8462 08:1ADD: B7 0E        	lda	[<L302+dp_0],Y
  Thu Dec  3 2020 22:25                                                Page 170


  8463 08:1ADF: 48           	pha
  8464 08:1AE0: A0 1C 00     	ldy	#$1c
  8465 08:1AE3: B7 0E        	lda	[<L302+dp_0],Y
  8466 08:1AE5: 48           	pha
  8467 08:1AE6: 22 DF 01 08  	jsl	~~mem_set
  8468                        ;			mem_cpy(dp->dir + DIR_Name, dp->
                    fn, 11);	/* Put SFN */
  8469                        	.line	2622
  8470 08:1AEA: F4 0B 00     	pea	#<$b
  8471 08:1AED: 18           	clc
  8472 08:1AEE: A9 20 00     	lda	#$20
  8473 08:1AF1: 65 0E        	adc	<L302+dp_0
  8474 08:1AF3: 85 01        	sta	<R0
  8475 08:1AF5: A9 00 00     	lda	#$0
  8476 08:1AF8: 65 10        	adc	<L302+dp_0+2
  8477 08:1AFA: 85 03        	sta	<R0+2
  8478 08:1AFC: D4 03        	pei	<R0+2
  8479 08:1AFE: D4 01        	pei	<R0
  8480 08:1B00: A0 1E 00     	ldy	#$1e
  8481 08:1B03: B7 0E        	lda	[<L302+dp_0],Y
  8482 08:1B05: 48           	pha
  8483 08:1B06: A0 1C 00     	ldy	#$1c
  8484 08:1B09: B7 0E        	lda	[<L302+dp_0],Y
  8485 08:1B0B: 48           	pha
  8486 08:1B0C: 22 93 01 08  	jsl	~~mem_cpy
  8487                        ;#if FF_USE_LFN
  8488                        ;			dp->dir[DIR_NTres] = dp->fn[NSFL
                    AG] & (NS_BODY | NS_EXT);	/* Put NT flag */
  8489                        ;#endif
  8490                        ;			fs->wflag = 1;
  8491                        	.line	2626
  8492 08:1B10: E2 20        	sep	#$20
  8493                        	longa	off
  8494 08:1B12: A9 01        	lda	#$1
  8495 08:1B14: A0 03 00     	ldy	#$3
  8496 08:1B17: 97 07        	sta	[<L303+fs_1],Y
  8497 08:1B19: C2 20        	rep	#$20
  8498                        	longa	on
  8499                        ;		}
  8500                        	.line	2627
  8501                        ;	}
  8502                        L10129:
  8503                        	.line	2628
  8504                        ;
  8505                        ;	return res;
  8506                        L10128:
  8507                        	.line	2630
  8508 08:1B1B: A5 05        	lda	<L303+res_1
  8509                        L307:
  8510 08:1B1D: A8           	tay
  8511 08:1B1E: A5 0C        	lda	<L302+2
  8512 08:1B20: 85 10        	sta	<L302+2+4
  8513 08:1B22: A5 0B        	lda	<L302+1
  8514 08:1B24: 85 0F        	sta	<L302+1+4
  8515 08:1B26: 2B           	pld
  8516 08:1B27: 3B           	tsc
  8517 08:1B28: 18           	clc
  8518 08:1B29: 69 0E 00     	adc	#L302+4
  Thu Dec  3 2020 22:25                                                Page 171


  8519 08:1B2C: 1B           	tcs
  8520 08:1B2D: 98           	tya
  8521 08:1B2E: 6B           	rtl
  8522                        ;}
  8523                        	.line	2631
  8524                        	.endblock	2631
  8525             0000000A   L302	equ	10
  8526             00000005   L303	equ	5
  8527 08:1B2F:              	ends
  8528                        	efunc
  8529                        	.endfunc	2631,5,10
  8530                        	.line	2631
  8531                        ;
  8532                        ;#endif /* !FF_FS_READONLY */
  8533                        ;
  8534                        ;
  8535                        ;
  8536                        ;#if !FF_FS_READONLY && FF_FS_MINIMIZE == 0
  8537                        ;/*-----------------------------------------------
                    ------------------------*/
  8538                        ;/* Remove an object from the directory           
                                            */
  8539                        ;/*-----------------------------------------------
                    ------------------------*/
  8540                        ;
  8541                        ;static FRESULT dir_remove (	/* FR_OK:Succeed
                    ed, FR_DISK_ERR:A disk error */
  8542                        ;	DIR* dp					/* Direc
                    tory object pointing the entry to be removed */
  8543                        ;)
  8544                        ;{
  8545                        	.line	2642
  8546                        	.line	2645
  8547                        	FFDOS
  8548                        	func
  8549                        	.function	2645
  8550                        ~~dir_remove:
  8551                        	longa	on
  8552                        	longi	on
  8553 08:1B2F: 3B           	tsc
  8554 08:1B30: 38           	sec
  8555 08:1B31: E9 0A 00     	sbc	#L308
  8556 08:1B34: 1B           	tcs
  8557 08:1B35: 0B           	phd
  8558 08:1B36: 5B           	tcd
  8559             00000004   dp_0	set	4
  8560                        	.block	2645
  8561                        ;	FRESULT res;
  8562                        ;	FATFS *fs = dp->obj.fs;
  8563                        ;#if FF_USE_LFN		/* LFN configuration */
  8564                        ;	DWORD last = dp->dptr;
  8565                        ;
  8566                        ;	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_
                    sdi(dp, dp->blk_ofs);	/* Goto top of the entry block i
                    f LFN is exist */
  8567                        ;	if (res == FR_OK) {
  8568                        ;		do {
  8569                        ;			res = move_window(fs, dp->sect);
  Thu Dec  3 2020 22:25                                                Page 172


  8570                        ;			if (res != FR_OK) break;
  8571                        ;			if (FF_FS_EXFAT && fs->fs_type =
                    = FS_EXFAT) {	/* On the exFAT volume */
  8572                        ;				dp->dir[XDIR_Type] &= 0x
                    7F;	/* Clear the entry InUse flag. */
  8573                        ;			} else {			
                    						/* On the FAT/FA
                    T32 volume */
  8574                        ;				dp->dir[DIR_Name] = DDEM
                    ;	/* Mark the entry 'deleted'. */
  8575                        ;			}
  8576                        ;			fs->wflag = 1;
  8577                        ;			if (dp->dptr >= last) break;	
                    /* If reached last entry then all entries of the object has 
                    been deleted. */
  8578                        ;			res = dir_next(dp, 0);	/* Next 
                    entry */
  8579                        ;		} while (res == FR_OK);
  8580                        ;		if (res == FR_NO_FILE) res = FR_INT_ERR;
  8581                        ;	}
  8582                        ;#else			/* Non LFN configuration
                     */
  8583                        ;
  8584                        ;	res = move_window(fs, dp->sect);
  8585             00000000   res_1	set	0
  8586             00000002   fs_1	set	2
  8587                        	.sym	res,0,5,1,16
  8588                        	.sym	fs,2,138,1,32,80
  8589                        	.sym	dp,4,138,6,32,83
  8590 08:1B37: A7 0E        	lda	[<L308+dp_0]
  8591 08:1B39: 85 07        	sta	<L309+fs_1
  8592 08:1B3B: A0 02 00     	ldy	#$2
  8593 08:1B3E: B7 0E        	lda	[<L308+dp_0],Y
  8594 08:1B40: 85 09        	sta	<L309+fs_1+2
  8595                        	.line	2669
  8596 08:1B42: A0 1A 00     	ldy	#$1a
  8597 08:1B45: B7 0E        	lda	[<L308+dp_0],Y
  8598 08:1B47: 48           	pha
  8599 08:1B48: A0 18 00     	ldy	#$18
  8600 08:1B4B: B7 0E        	lda	[<L308+dp_0],Y
  8601 08:1B4D: 48           	pha
  8602 08:1B4E: D4 09        	pei	<L309+fs_1+2
  8603 08:1B50: D4 07        	pei	<L309+fs_1
  8604 08:1B52: 22 FA 03 08  	jsl	~~move_window
  8605 08:1B56: 85 05        	sta	<L309+res_1
  8606                        ;	if (res == FR_OK) {
  8607                        	.line	2670
  8608 08:1B58: A5 05        	lda	<L309+res_1
  8609 08:1B5A: F0 03        	beq	L311
  8610 08:1B5C: 82 21 00     	brl	L10130
  8611                        L311:
  8612                        	.line	2670
  8613                        ;		dp->dir[DIR_Name] = DDEM;	/* Mark 
                    the entry 'deleted'.*/
  8614                        	.line	2671
  8615 08:1B5F: A0 1C 00     	ldy	#$1c
  8616 08:1B62: B7 0E        	lda	[<L308+dp_0],Y
  8617 08:1B64: 85 01        	sta	<R0
  Thu Dec  3 2020 22:25                                                Page 173


  8618 08:1B66: A0 1E 00     	ldy	#$1e
  8619 08:1B69: B7 0E        	lda	[<L308+dp_0],Y
  8620 08:1B6B: 85 03        	sta	<R0+2
  8621 08:1B6D: E2 20        	sep	#$20
  8622                        	longa	off
  8623 08:1B6F: A9 E5        	lda	#$e5
  8624 08:1B71: 87 01        	sta	[<R0]
  8625 08:1B73: C2 20        	rep	#$20
  8626                        	longa	on
  8627                        ;		fs->wflag = 1;
  8628                        	.line	2672
  8629 08:1B75: E2 20        	sep	#$20
  8630                        	longa	off
  8631 08:1B77: A9 01        	lda	#$1
  8632 08:1B79: A0 03 00     	ldy	#$3
  8633 08:1B7C: 97 07        	sta	[<L309+fs_1],Y
  8634 08:1B7E: C2 20        	rep	#$20
  8635                        	longa	on
  8636                        ;	}
  8637                        	.line	2673
  8638                        ;#endif
  8639                        ;
  8640                        ;	return res;
  8641                        L10130:
  8642                        	.line	2676
  8643 08:1B80: A5 05        	lda	<L309+res_1
  8644                        L312:
  8645 08:1B82: A8           	tay
  8646 08:1B83: A5 0C        	lda	<L308+2
  8647 08:1B85: 85 10        	sta	<L308+2+4
  8648 08:1B87: A5 0B        	lda	<L308+1
  8649 08:1B89: 85 0F        	sta	<L308+1+4
  8650 08:1B8B: 2B           	pld
  8651 08:1B8C: 3B           	tsc
  8652 08:1B8D: 18           	clc
  8653 08:1B8E: 69 0E 00     	adc	#L308+4
  8654 08:1B91: 1B           	tcs
  8655 08:1B92: 98           	tya
  8656 08:1B93: 6B           	rtl
  8657                        ;}
  8658                        	.line	2677
  8659                        	.endblock	2677
  8660             0000000A   L308	equ	10
  8661             00000005   L309	equ	5
  8662 08:1B94:              	ends
  8663                        	efunc
  8664                        	.endfunc	2677,5,10
  8665                        	.line	2677
  8666                        ;
  8667                        ;#endif /* !FF_FS_READONLY && FF_FS_MINIMIZE == 0 
                    */
  8668                        ;
  8669                        ;
  8670                        ;
  8671                        ;#if FF_FS_MINIMIZE <= 1 || FF_FS_RPATH >= 2
  8672                        ;/*-----------------------------------------------
                    ------------------------*/
  8673                        ;/* Get file information from directory entry     
  Thu Dec  3 2020 22:25                                                Page 174


                                            */
  8674                        ;/*-----------------------------------------------
                    ------------------------*/
  8675                        ;
  8676                        ;static void get_fileinfo (
  8677                        ;	DIR* dp,			/* Pointer to th
                    e directory object */
  8678                        ;	FILINFO* fno		/* Pointer to the file i
                    nformation to be filled */
  8679                        ;)
  8680                        ;{
  8681                        	.line	2688
  8682                        	.line	2692
  8683                        	FFDOS
  8684                        	func
  8685                        	.function	2692
  8686                        ~~get_fileinfo:
  8687                        	longa	on
  8688                        	longi	on
  8689 08:1B94: 3B           	tsc
  8690 08:1B95: 38           	sec
  8691 08:1B96: E9 0D 00     	sbc	#L313
  8692 08:1B99: 1B           	tcs
  8693 08:1B9A: 0B           	phd
  8694 08:1B9B: 5B           	tcd
  8695             00000004   dp_0	set	4
  8696             00000008   fno_0	set	8
  8697                        	.block	2692
  8698                        ;	UINT si, di;
  8699                        ;#if FF_USE_LFN
  8700                        ;	BYTE lcf;
  8701                        ;	WCHAR wc, hs;
  8702                        ;	FATFS *fs = dp->obj.fs;
  8703                        ;#else
  8704                        ;	TCHAR c;
  8705                        ;#endif
  8706                        ;
  8707                        ;
  8708                        ;	fno->fname[0] = 0;			/* Invai
                    date file info */
  8709             00000000   si_1	set	0
  8710             00000002   di_1	set	2
  8711             00000004   c_1	set	4
  8712                        	.sym	si,0,16,1,16
  8713                        	.sym	di,2,16,1,16
  8714                        	.sym	c,4,14,1,8
  8715                        	.sym	dp,4,138,6,32,83
  8716                        	.sym	fno,8,138,6,32,84
  8717                        	.line	2703
  8718 08:1B9C: E2 20        	sep	#$20
  8719                        	longa	off
  8720 08:1B9E: A9 00        	lda	#$0
  8721 08:1BA0: A0 09 00     	ldy	#$9
  8722 08:1BA3: 97 15        	sta	[<L313+fno_0],Y
  8723 08:1BA5: C2 20        	rep	#$20
  8724                        	longa	on
  8725                        ;	if (dp->sect == 0) return;	/* Exit if read 
                    pointer has reached end of directory */
  Thu Dec  3 2020 22:25                                                Page 175


  8726                        	.line	2704
  8727 08:1BA7: A0 18 00     	ldy	#$18
  8728 08:1BAA: B7 11        	lda	[<L313+dp_0],Y
  8729 08:1BAC: A0 1A 00     	ldy	#$1a
  8730 08:1BAF: 17 11        	ora	[<L313+dp_0],Y
  8731 08:1BB1: F0 03        	beq	L316
  8732 08:1BB3: 82 10 00     	brl	L10131
  8733                        L316:
  8734                        	.line	2704
  8735                        L317:
  8736 08:1BB6: A5 0F        	lda	<L313+2
  8737 08:1BB8: 85 17        	sta	<L313+2+8
  8738 08:1BBA: A5 0E        	lda	<L313+1
  8739 08:1BBC: 85 16        	sta	<L313+1+8
  8740 08:1BBE: 2B           	pld
  8741 08:1BBF: 3B           	tsc
  8742 08:1BC0: 18           	clc
  8743 08:1BC1: 69 15 00     	adc	#L313+8
  8744 08:1BC4: 1B           	tcs
  8745 08:1BC5: 6B           	rtl
  8746                        ;
  8747                        ;#if FF_USE_LFN		/* LFN configuration */
  8748                        ;#if FF_FS_EXFAT
  8749                        ;	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT 
                    volume */
  8750                        ;		get_xfileinfo(fs->dirbuf, fno);
  8751                        ;		return;
  8752                        ;	} else
  8753                        ;#endif
  8754                        ;	{	/* On the FAT/FAT32 volume */
  8755                        ;		if (dp->blk_ofs != 0xFFFFFFFF) {	
                    /* Get LFN if available */
  8756                        ;			si = di = hs = 0;
  8757                        ;			while (fs->lfnbuf[si] != 0) {
  8758                        ;				wc = fs->lfnbuf[si++];	
                    	/* Get an LFN character (UTF-16) */
  8759                        ;				if (hs == 0 && IsSurroga
                    te(wc)) {	/* Is it a surrogate? */
  8760                        ;					hs = wc; continu
                    e;		/* Get low surrogate */
  8761                        ;				}
  8762                        ;				wc = put_utf((DWORD)hs <
                    < 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store
                     it in UTF-16 or UTF-8 encoding */
  8763                        ;				if (wc == 0) { di = 0; b
                    reak; }	/* Invalid char or buffer overflow? */
  8764                        ;				di += wc;
  8765                        ;				hs = 0;
  8766                        ;			}
  8767                        ;			if (hs != 0) di = 0;	/* Broke
                    n surrogate pair? */
  8768                        ;			fno->fname[di] = 0;		
                    /* Terminate the LFN (null string means LFN is invalid) */
  8769                        ;		}
  8770                        ;	}
  8771                        ;
  8772                        ;	si = di = 0;
  8773                        ;	while (si < 11) {		/* Get SFN from 
  Thu Dec  3 2020 22:25                                                Page 176


                    SFN entry */
  8774                        ;		wc = dp->dir[si++];			
                    /* Get a char */
  8775                        ;		if (wc == ' ') continue;	/* Skip 
                    padding spaces */
  8776                        ;		if (wc == RDDEM) wc = DDEM;	/* Resto
                    re replaced DDEM character */
  8777                        ;		if (si == 9 && di < FF_SFN_BUF) fno->alt
                    name[di++] = '.';	/* Insert a . if extension is exist */
  8778                        ;#if FF_LFN_UNICODE >= 1	/* Unicode output */
  8779                        ;		if (dbc_1st((BYTE)wc) && si != 8 && si !
                    = 11 && dbc_2nd(dp->dir[si])) {	/* Make a DBC if needed 
                    */
  8780                        ;			wc = wc << 8 | dp->dir[si++];
  8781                        ;		}
  8782                        ;		wc = ff_oem2uni(wc, CODEPAGE);		
                    /* ANSI/OEM -> Unicode */
  8783                        ;		if (wc == 0) { di = 0; break; }		
                    /* Wrong char in the current code page? */
  8784                        ;		wc = put_utf(wc, &fno->altname[di], FF_S
                    FN_BUF - di);	/* Store it in Unicode */
  8785                        ;		if (wc == 0) { di = 0; break; }		
                    /* Buffer overflow? */
  8786                        ;		di += wc;
  8787                        ;#else					/* ANSI/
                    OEM output */
  8788                        ;		fno->altname[di++] = (TCHAR)wc;	/* Store
                     it without any conversion */
  8789                        ;#endif
  8790                        ;	}
  8791                        ;	fno->altname[di] = 0;	/* Terminate the SFN  (n
                    ull string means SFN is invalid) */
  8792                        ;
  8793                        ;	if (fno->fname[0] == 0) {	/* If LFN is inv
                    alid, altname[] needs to be copied to fname[] */
  8794                        ;		if (di == 0) {	/* If LFN and SFN both a
                    re invalid, this object is inaccesible */
  8795                        ;			fno->fname[di++] = '?';
  8796                        ;		} else {
  8797                        ;			for (si = di = 0, lcf = NS_BODY;
                     fno->altname[si]; si++, di++) {	/* Copy altname[] to fna
                    me[] with case information */
  8798                        ;				wc = (WCHAR)fno->altname
                    [si];
  8799                        ;				if (wc == '.') lcf = NS_
                    EXT;
  8800                        ;				if (IsUpper(wc) && (dp->
                    dir[DIR_NTres] & lcf)) wc += 0x20;
  8801                        ;				fno->fname[di] = (TCHAR)
                    wc;
  8802                        ;			}
  8803                        ;		}
  8804                        ;		fno->fname[di] = 0;	/* Terminate the
                     LFN */
  8805                        ;		if (!dp->dir[DIR_NTres]) fno->altname[0]
                     = 0;	/* Altname is not needed if neither LFN nor case
                     info is exist. */
  8806                        ;	}
  Thu Dec  3 2020 22:25                                                Page 177


  8807                        ;
  8808                        ;#else	/* Non-LFN configuration */
  8809                        ;	si = di = 0;
  8810                        L10131:
  8811                        	.line	2768
  8812 08:1BC6: 64 0B        	stz	<L314+di_1
  8813 08:1BC8: 64 09        	stz	<L314+si_1
  8814                        ;	while (si < 11) {		/* Copy name bod
                    y and extension */
  8815                        	.line	2769
  8816                        L10132:
  8817 08:1BCA: A5 09        	lda	<L314+si_1
  8818 08:1BCC: C9 0B 00     	cmp	#<$b
  8819 08:1BCF: 90 03        	bcc	L318
  8820 08:1BD1: 82 71 00     	brl	L10133
  8821                        L318:
  8822                        	.line	2769
  8823                        ;		c = (TCHAR)dp->dir[si++];
  8824                        	.line	2770
  8825 08:1BD4: A0 1C 00     	ldy	#$1c
  8826 08:1BD7: B7 11        	lda	[<L313+dp_0],Y
  8827 08:1BD9: 85 01        	sta	<R0
  8828 08:1BDB: A0 1E 00     	ldy	#$1e
  8829 08:1BDE: B7 11        	lda	[<L313+dp_0],Y
  8830 08:1BE0: 85 03        	sta	<R0+2
  8831 08:1BE2: E2 20        	sep	#$20
  8832                        	longa	off
  8833 08:1BE4: A4 09        	ldy	<L314+si_1
  8834 08:1BE6: B7 01        	lda	[<R0],Y
  8835 08:1BE8: 85 0D        	sta	<L314+c_1
  8836 08:1BEA: C2 20        	rep	#$20
  8837                        	longa	on
  8838 08:1BEC: E6 09        	inc	<L314+si_1
  8839                        ;		if (c == ' ') continue;		/* Skip 
                    padding spaces */
  8840                        	.line	2771
  8841 08:1BEE: E2 20        	sep	#$20
  8842                        	longa	off
  8843 08:1BF0: A5 0D        	lda	<L314+c_1
  8844 08:1BF2: C9 20        	cmp	#<$20
  8845 08:1BF4: C2 20        	rep	#$20
  8846                        	longa	on
  8847 08:1BF6: D0 03        	bne	L319
  8848 08:1BF8: 82 CF FF     	brl	L10132
  8849                        L319:
  8850                        ;		if (c == RDDEM) c = DDEM;	/* Resto
                    re replaced DDEM character */
  8851                        	.line	2772
  8852 08:1BFB: E2 20        	sep	#$20
  8853                        	longa	off
  8854 08:1BFD: A5 0D        	lda	<L314+c_1
  8855 08:1BFF: C9 05        	cmp	#<$5
  8856 08:1C01: C2 20        	rep	#$20
  8857                        	longa	on
  8858 08:1C03: F0 03        	beq	L320
  8859 08:1C05: 82 08 00     	brl	L10134
  8860                        L320:
  8861                        	.line	2772
  Thu Dec  3 2020 22:25                                                Page 178


  8862 08:1C08: E2 20        	sep	#$20
  8863                        	longa	off
  8864 08:1C0A: A9 E5        	lda	#$e5
  8865 08:1C0C: 85 0D        	sta	<L314+c_1
  8866 08:1C0E: C2 20        	rep	#$20
  8867                        	longa	on
  8868                        ;		if (si == 9) fno->fname[di++] = '.';/* I
                    nsert a . if extension is exist */
  8869                        L10134:
  8870                        	.line	2773
  8871 08:1C10: A5 09        	lda	<L314+si_1
  8872 08:1C12: C9 09 00     	cmp	#<$9
  8873 08:1C15: F0 03        	beq	L321
  8874 08:1C17: 82 14 00     	brl	L10135
  8875                        L321:
  8876                        	.line	2773
  8877 08:1C1A: 18           	clc
  8878 08:1C1B: A9 09 00     	lda	#$9
  8879 08:1C1E: 65 0B        	adc	<L314+di_1
  8880 08:1C20: 85 01        	sta	<R0
  8881 08:1C22: E2 20        	sep	#$20
  8882                        	longa	off
  8883 08:1C24: A9 2E        	lda	#$2e
  8884 08:1C26: A4 01        	ldy	<R0
  8885 08:1C28: 97 15        	sta	[<L313+fno_0],Y
  8886 08:1C2A: C2 20        	rep	#$20
  8887                        	longa	on
  8888 08:1C2C: E6 0B        	inc	<L314+di_1
  8889                        ;		fno->fname[di++] = c;
  8890                        L10135:
  8891                        	.line	2774
  8892 08:1C2E: 18           	clc
  8893 08:1C2F: A9 09 00     	lda	#$9
  8894 08:1C32: 65 0B        	adc	<L314+di_1
  8895 08:1C34: 85 01        	sta	<R0
  8896 08:1C36: E2 20        	sep	#$20
  8897                        	longa	off
  8898 08:1C38: A5 0D        	lda	<L314+c_1
  8899 08:1C3A: A4 01        	ldy	<R0
  8900 08:1C3C: 97 15        	sta	[<L313+fno_0],Y
  8901 08:1C3E: C2 20        	rep	#$20
  8902                        	longa	on
  8903 08:1C40: E6 0B        	inc	<L314+di_1
  8904                        ;	}
  8905                        	.line	2775
  8906 08:1C42: 82 85 FF     	brl	L10132
  8907                        L10133:
  8908                        ;	fno->fname[di] = 0;
  8909                        	.line	2776
  8910 08:1C45: 18           	clc
  8911 08:1C46: A9 09 00     	lda	#$9
  8912 08:1C49: 65 0B        	adc	<L314+di_1
  8913 08:1C4B: 85 01        	sta	<R0
  8914 08:1C4D: E2 20        	sep	#$20
  8915                        	longa	off
  8916 08:1C4F: A9 00        	lda	#$0
  8917 08:1C51: A4 01        	ldy	<R0
  8918 08:1C53: 97 15        	sta	[<L313+fno_0],Y
  Thu Dec  3 2020 22:25                                                Page 179


  8919 08:1C55: C2 20        	rep	#$20
  8920                        	longa	on
  8921                        ;#endif
  8922                        ;
  8923                        ;	fno->fattrib = dp->dir[DIR_Attr];		
                    			/* Attribute */
  8924                        	.line	2779
  8925 08:1C57: A0 1C 00     	ldy	#$1c
  8926 08:1C5A: B7 11        	lda	[<L313+dp_0],Y
  8927 08:1C5C: 85 01        	sta	<R0
  8928 08:1C5E: A0 1E 00     	ldy	#$1e
  8929 08:1C61: B7 11        	lda	[<L313+dp_0],Y
  8930 08:1C63: 85 03        	sta	<R0+2
  8931 08:1C65: E2 20        	sep	#$20
  8932                        	longa	off
  8933 08:1C67: A0 0B 00     	ldy	#$b
  8934 08:1C6A: B7 01        	lda	[<R0],Y
  8935 08:1C6C: A0 08 00     	ldy	#$8
  8936 08:1C6F: 97 15        	sta	[<L313+fno_0],Y
  8937 08:1C71: C2 20        	rep	#$20
  8938                        	longa	on
  8939                        ;	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	
                    	/* Size */
  8940                        	.line	2780
  8941 08:1C73: 18           	clc
  8942 08:1C74: A9 1C 00     	lda	#$1c
  8943 08:1C77: A0 1C 00     	ldy	#$1c
  8944 08:1C7A: 77 11        	adc	[<L313+dp_0],Y
  8945 08:1C7C: 85 01        	sta	<R0
  8946 08:1C7E: A9 00 00     	lda	#$0
  8947 08:1C81: A0 1E 00     	ldy	#$1e
  8948 08:1C84: 77 11        	adc	[<L313+dp_0],Y
  8949 08:1C86: 85 03        	sta	<R0+2
  8950 08:1C88: D4 03        	pei	<R0+2
  8951 08:1C8A: D4 01        	pei	<R0
  8952 08:1C8C: 22 3B 00 08  	jsl	~~ld_dword
  8953 08:1C90: 85 05        	sta	<R1
  8954 08:1C92: 86 07        	stx	<R1+2
  8955 08:1C94: A5 05        	lda	<R1
  8956 08:1C96: 87 15        	sta	[<L313+fno_0]
  8957 08:1C98: A5 07        	lda	<R1+2
  8958 08:1C9A: A0 02 00     	ldy	#$2
  8959 08:1C9D: 97 15        	sta	[<L313+fno_0],Y
  8960                        ;	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);
                    	/* Time */
  8961                        	.line	2781
  8962 08:1C9F: 18           	clc
  8963 08:1CA0: A9 16 00     	lda	#$16
  8964 08:1CA3: A0 1C 00     	ldy	#$1c
  8965 08:1CA6: 77 11        	adc	[<L313+dp_0],Y
  8966 08:1CA8: 85 01        	sta	<R0
  8967 08:1CAA: A9 00 00     	lda	#$0
  8968 08:1CAD: A0 1E 00     	ldy	#$1e
  8969 08:1CB0: 77 11        	adc	[<L313+dp_0],Y
  8970 08:1CB2: 85 03        	sta	<R0+2
  8971 08:1CB4: D4 03        	pei	<R0+2
  8972 08:1CB6: D4 01        	pei	<R0
  8973 08:1CB8: 22 00 00 08  	jsl	~~ld_word
  Thu Dec  3 2020 22:25                                                Page 180


  8974 08:1CBC: A0 06 00     	ldy	#$6
  8975 08:1CBF: 97 15        	sta	[<L313+fno_0],Y
  8976                        ;	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);
                    	/* Date */
  8977                        	.line	2782
  8978 08:1CC1: 18           	clc
  8979 08:1CC2: A9 18 00     	lda	#$18
  8980 08:1CC5: A0 1C 00     	ldy	#$1c
  8981 08:1CC8: 77 11        	adc	[<L313+dp_0],Y
  8982 08:1CCA: 85 01        	sta	<R0
  8983 08:1CCC: A9 00 00     	lda	#$0
  8984 08:1CCF: A0 1E 00     	ldy	#$1e
  8985 08:1CD2: 77 11        	adc	[<L313+dp_0],Y
  8986 08:1CD4: 85 03        	sta	<R0+2
  8987 08:1CD6: D4 03        	pei	<R0+2
  8988 08:1CD8: D4 01        	pei	<R0
  8989 08:1CDA: 22 00 00 08  	jsl	~~ld_word
  8990 08:1CDE: A0 04 00     	ldy	#$4
  8991 08:1CE1: 97 15        	sta	[<L313+fno_0],Y
  8992                        ;}
  8993                        	.line	2783
  8994 08:1CE3: 82 D0 FE     	brl	L317
  8995                        	.endblock	2783
  8996             0000000D   L313	equ	13
  8997             00000009   L314	equ	9
  8998 08:1CE6:              	ends
  8999                        	efunc
  9000                        	.endfunc	2783,9,13
  9001                        	.line	2783
  9002                        ;
  9003                        ;#endif /* FF_FS_MINIMIZE <= 1 || FF_FS_RPATH >= 2
                     */
  9004                        ;
  9005                        ;
  9006                        ;
  9007                        ;#if FF_USE_FIND && FF_FS_MINIMIZE <= 1
  9008                        ;/*-----------------------------------------------
                    ------------------------*/
  9009                        ;/* Pattern matching                              
                                            */
  9010                        ;/*-----------------------------------------------
                    ------------------------*/
  9011                        ;
  9012                        ;static DWORD get_achar (	/* Get a character and a
                    dvances ptr */
  9013                        ;	const TCHAR** ptr		/* Pointer to po
                    inter to the ANSI/OEM or Unicode string */
  9014                        ;)
  9015                        ;{
  9016                        ;	DWORD chr;
  9017                        ;
  9018                        ;
  9019                        ;#if FF_USE_LFN && FF_LFN_UNICODE >= 1	/* Unico
                    de input */
  9020                        ;	chr = tchar2uni(ptr);
  9021                        ;	if (chr == 0xFFFFFFFF) chr = 0;		/* Wrong
                     UTF encoding is recognized as end of the string */
  9022                        ;	chr = ff_wtoupper(chr);
  Thu Dec  3 2020 22:25                                                Page 181


  9023                        ;
  9024                        ;#else						
                    			/* ANSI/OEM input */
  9025                        ;	chr = (BYTE)*(*ptr)++;				
                    /* Get a byte */
  9026                        ;	if (IsLower(chr)) chr -= 0x20;		/* To up
                    per ASCII char */
  9027                        ;#if FF_CODE_PAGE == 0
  9028                        ;	if (ExCvt && chr >= 0x80) chr = ExCvt[chr - 0x80
                    ];	/* To upper SBCS extended char */
  9029                        ;#elif FF_CODE_PAGE < 900
  9030                        ;	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	
                    /* To upper SBCS extended char */
  9031                        ;#endif
  9032                        ;#if FF_CODE_PAGE == 0 || FF_CODE_PAGE >= 900
  9033                        ;	if (dbc_1st((BYTE)chr)) {	/* Get DBC 2nd b
                    yte if needed */
  9034                        ;		chr = dbc_2nd((BYTE)**ptr) ? chr << 8 | 
                    (BYTE)*(*ptr)++ : 0;
  9035                        ;	}
  9036                        ;#endif
  9037                        ;
  9038                        ;#endif
  9039                        ;	return chr;
  9040                        ;}
  9041                        ;
  9042                        ;
  9043                        ;static int pattern_matching (	/* 0:not matched
                    , 1:matched */
  9044                        ;	const TCHAR* pat,	/* Matching pattern */
  9045                        ;	const TCHAR* nam,	/* String to be tested *
                    /
  9046                        ;	int skip,			/* Number of pre
                    -skip chars (number of ?s) */
  9047                        ;	int inf				/* Infinite sear
                    ch (* specified) */
  9048                        ;)
  9049                        ;{
  9050                        ;	const TCHAR *pp, *np;
  9051                        ;	DWORD pc, nc;
  9052                        ;	int nm, nx;
  9053                        ;
  9054                        ;
  9055                        ;	while (skip--) {				
                    /* Pre-skip name chars */
  9056                        ;		if (!get_achar(&nam)) return 0;	/* Branc
                    h mismatched if less name chars */
  9057                        ;	}
  9058                        ;	if (*pat == 0 && inf) return 1;	/* (short circui
                    t) */
  9059                        ;
  9060                        ;	do {
  9061                        ;		pp = pat; np = nam;			
                    /* Top of pattern and name to match */
  9062                        ;		for (;;) {
  9063                        ;			if (*pp == '?' || *pp == '*') {	
                    /* Wildcard? */
  9064                        ;				nm = nx = 0;
  Thu Dec  3 2020 22:25                                                Page 182


  9065                        ;				do {			
                    	/* Analyze the wildcard block */
  9066                        ;					if (*pp++ == '?'
                    ) nm++; else nx = 1;
  9067                        ;				} while (*pp == '?' || *
                    pp == '*');
  9068                        ;				if (pattern_matching(pp,
                     np, nm, nx)) return 1;	/* Test new branch (recurs upto 
                    number of wildcard blocks in the pattern) */
  9069                        ;				nc = *np; break;	
                    /* Branch mismatched */
  9070                        ;			}
  9071                        ;			pc = get_achar(&pp);	/* Get a
                     pattern char */
  9072                        ;			nc = get_achar(&np);	/* Get a
                     name char */
  9073                        ;			if (pc != nc) break;	/* Branc
                    h mismatched? */
  9074                        ;			if (pc == 0) return 1;	/* Branc
                    h matched? (matched at end of both strings) */
  9075                        ;		}
  9076                        ;		get_achar(&nam);			
                    /* nam++ */
  9077                        ;	} while (inf && nc);			/* Retry
                     until end of name if infinite search is specified */
  9078                        ;
  9079                        ;	return 0;
  9080                        ;}
  9081                        ;
  9082                        ;#endif /* FF_USE_FIND && FF_FS_MINIMIZE <= 1 */
  9083                        ;
  9084                        ;
  9085                        ;
  9086                        ;/*-----------------------------------------------
                    ------------------------*/
  9087                        ;/* Pick a top segment and create the object name 
                    in directory form       */
  9088                        ;/*-----------------------------------------------
                    ------------------------*/
  9089                        ;
  9090                        ;static FRESULT create_name (	/* FR_OK: succes
                    sful, FR_INVALID_NAME: could not create */
  9091                        ;	DIR* dp,					
                    /* Pointer to the directory object */
  9092                        ;	const TCHAR** path			/* Point
                    er to pointer to the segment in the path string */
  9093                        ;)
  9094                        ;{
  9095                        	.line	2872
  9096                        	.line	2876
  9097                        	FFDOS
  9098                        	func
  9099                        	.function	2876
  9100                        ~~create_name:
  9101                        	longa	on
  9102                        	longi	on
  9103 08:1CE6: 3B           	tsc
  9104 08:1CE7: 38           	sec
  Thu Dec  3 2020 22:25                                                Page 183


  9105 08:1CE8: E9 18 00     	sbc	#L322
  9106 08:1CEB: 1B           	tcs
  9107 08:1CEC: 0B           	phd
  9108 08:1CED: 5B           	tcd
  9109             00000004   dp_0	set	4
  9110             00000008   path_0	set	8
  9111                        	.block	2876
  9112                        ;#if FF_USE_LFN		/* LFN configuration */
  9113                        ;	BYTE b, cf;
  9114                        ;	WCHAR wc, *lfn;
  9115                        ;	DWORD uc;
  9116                        ;	UINT i, ni, si, di;
  9117                        ;	const TCHAR *p;
  9118                        ;
  9119                        ;
  9120                        ;	/* Create LFN into LFN working buffer */
  9121                        ;	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
  9122                        ;	for (;;) {
  9123                        ;		uc = tchar2uni(&p);			
                    /* Get a character */
  9124                        ;		if (uc == 0xFFFFFFFF) return FR_INVALID_
                    NAME;		/* Invalid code or UTF decode error */
  9125                        ;		if (uc >= 0x10000) lfn[di++] = (WCHAR)(u
                    c >> 16);	/* Store high surrogate if needed */
  9126                        ;		wc = (WCHAR)uc;
  9127                        ;		if (wc < ' ' || wc == '/' || wc == '\\')
                     break;	/* Break if end of the path or a separator is fo
                    und */
  9128                        ;		if (wc < 0x80 && chk_chr("\"*:<>\?|\x7F"
                    , wc)) return FR_INVALID_NAME;	/* Reject illegal charac
                    ters for LFN */
  9129                        ;		if (di >= FF_MAX_LFN) return FR_INVALID_
                    NAME;	/* Reject too long name */
  9130                        ;		lfn[di++] = wc;				
                    	/* Store the Unicode character */
  9131                        ;	}
  9132                        ;	if (wc < ' ') {				/* End o
                    f path? */
  9133                        ;		cf = NS_LAST;			/* Set l
                    ast segment flag */
  9134                        ;	} else {
  9135                        ;		cf = 0;					
                    /* Next segment follows */
  9136                        ;		while (*p == '/' || *p == '\\') p++;	
                    /* Skip duplicated separators if exist */
  9137                        ;	}
  9138                        ;	*path = p;					
                    /* Return pointer to the next segment */
  9139                        ;
  9140                        ;#if FF_FS_RPATH != 0
  9141                        ;	if ((di == 1 && lfn[di - 1] == '.') ||
  9142                        ;		(di == 2 && lfn[di - 1] == '.' && lfn[di
                     - 2] == '.')) {	/* Is this segment a dot name? */
  9143                        ;		lfn[di] = 0;
  9144                        ;		for (i = 0; i < 11; i++) {		
                    /* Create dot name for SFN entry */
  9145                        ;			dp->fn[i] = (i < di) ? '.' : ' '
                    ;
  Thu Dec  3 2020 22:25                                                Page 184


  9146                        ;		}
  9147                        ;		dp->fn[i] = cf | NS_DOT;		
                    /* This is a dot entry */
  9148                        ;		return FR_OK;
  9149                        ;	}
  9150                        ;#endif
  9151                        ;	while (di) {					
                    	/* Snip off trailing spaces and dots if exist */
  9152                        ;		wc = lfn[di - 1];
  9153                        ;		if (wc != ' ' && wc != '.') break;
  9154                        ;		di--;
  9155                        ;	}
  9156                        ;	lfn[di] = 0;					
                    		/* LFN is created into the working buffer */
  9157                        ;	if (di == 0) return FR_INVALID_NAME;	/* Rejec
                    t null name */
  9158                        ;
  9159                        ;	/* Create SFN in directory form */
  9160                        ;	for (si = 0; lfn[si] == ' '; si++) ;	/* Remov
                    e leading spaces */
  9161                        ;	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS
                    _LFN;	/* Is there any leading space or dot? */
  9162                        ;	while (di > 0 && lfn[di - 1] != '.') di--;	
                    /* Find last dot (di<=si: no extension) */
  9163                        ;
  9164                        ;	mem_set(dp->fn, ' ', 11);
  9165                        ;	i = b = 0; ni = 8;
  9166                        ;	for (;;) {
  9167                        ;		wc = lfn[si++];				
                    	/* Get an LFN character */
  9168                        ;		if (wc == 0) break;			
                    	/* Break on end of the LFN */
  9169                        ;		if (wc == ' ' || (wc == '.' && si != di)
                    ) {	/* Remove embedded spaces and dots */
  9170                        ;			cf |= NS_LOSS | NS_LFN;
  9171                        ;			continue;
  9172                        ;		}
  9173                        ;
  9174                        ;		if (i >= ni || si == di) {		
                    /* End of field? */
  9175                        ;			if (ni == 11) {			
                    	/* Name extension overflow? */
  9176                        ;				cf |= NS_LOSS | NS_LFN;
  9177                        ;				break;
  9178                        ;			}
  9179                        ;			if (si != di) cf |= NS_LOSS | NS
                    _LFN;	/* Name body overflow? */
  9180                        ;			if (si > di) break;		
                    				/* No name extension? */
  9181                        ;			si = di; i = 8; ni = 11; b <<= 2
                    ;		/* Enter name extension */
  9182                        ;			continue;
  9183                        ;		}
  9184                        ;
  9185                        ;		if (wc >= 0x80) {	/* Is this a non
                    -ASCII character? */
  9186                        ;			cf |= NS_LFN;	/* LFN entry nee
                    ds to be created */
  Thu Dec  3 2020 22:25                                                Page 185


  9187                        ;#if FF_CODE_PAGE == 0
  9188                        ;			if (ExCvt) {	/* At SBCS */
  9189                        ;				wc = ff_uni2oem(wc, CODE
                    PAGE);			/* Unicode ==> ANSI/OEM code */
  9190                        ;				if (wc & 0x80) wc = ExCv
                    t[wc & 0x7F];	/* Convert extended character to upper (
                    SBCS) */
  9191                        ;			} else {		/* At DB
                    CS */
  9192                        ;				wc = ff_uni2oem(ff_wtoup
                    per(wc), CODEPAGE);	/* Unicode ==> Upper convert ==> ANSI/OE
                    M code */
  9193                        ;			}
  9194                        ;#elif FF_CODE_PAGE < 900	/* SBCS cfg */
  9195                        ;			wc = ff_uni2oem(wc, CODEPAGE);	
                    		/* Unicode ==> ANSI/OEM code */
  9196                        ;			if (wc & 0x80) wc = ExCvt[wc & 0
                    x7F];	/* Convert extended character to upper (SBCS) */
  9197                        ;#else						
                    /* DBCS cfg */
  9198                        ;			wc = ff_uni2oem(ff_wtoupper(wc),
                     CODEPAGE);	/* Unicode ==> Upper convert ==> ANSI/OEM code *
                    /
  9199                        ;#endif
  9200                        ;		}
  9201                        ;
  9202                        ;		if (wc >= 0x100) {			
                    	/* Is this a DBC? */
  9203                        ;			if (i >= ni - 1) {		
                    	/* Field overflow? */
  9204                        ;				cf |= NS_LOSS | NS_LFN;
  9205                        ;				i = ni; continue;	
                    	/* Next field */
  9206                        ;			}
  9207                        ;			dp->fn[i++] = (BYTE)(wc >> 8);	
                    /* Put 1st byte */
  9208                        ;		} else {				
                    		/* SBC */
  9209                        ;			if (wc == 0 || chk_chr("+,;=[]",
                     wc)) {	/* Replace illegal characters for SFN if needed 
                    */
  9210                        ;				wc = '_'; cf |= NS_LOSS 
                    | NS_LFN;/* Lossy conversion */
  9211                        ;			} else {
  9212                        ;				if (IsUpper(wc)) {	
                    	/* ASCII upper case? */
  9213                        ;					b |= 2;
  9214                        ;				}
  9215                        ;				if (IsLower(wc)) {	
                    	/* ASCII lower case? */
  9216                        ;					b |= 1; wc -= 0x
                    20;
  9217                        ;				}
  9218                        ;			}
  9219                        ;		}
  9220                        ;		dp->fn[i++] = (BYTE)wc;
  9221                        ;	}
  9222                        ;
  Thu Dec  3 2020 22:25                                                Page 186


  9223                        ;	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	
                    /* If the first character collides with DDEM, replace it wit
                    h RDDEM */
  9224                        ;
  9225                        ;	if (ni == 8) b <<= 2;				
                    /* Shift capital flags if no extension */
  9226                        ;	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf
                     |= NS_LFN;	/* LFN entry needs to be created if composite ca
                    pitals */
  9227                        ;	if (!(cf & NS_LFN)) {				
                    /* When LFN is in 8.3 format without extended character, NT 
                    flags are created */
  9228                        ;		if (b & 0x01) cf |= NS_EXT;		
                    /* NT flag (Extension has small capital letters only) */
  9229                        ;		if (b & 0x04) cf |= NS_BODY;	/* NT fl
                    ag (Body has small capital letters only) */
  9230                        ;	}
  9231                        ;
  9232                        ;	dp->fn[NSFLAG] = cf;	/* SFN is created into d
                    p->fn[] */
  9233                        ;
  9234                        ;	return FR_OK;
  9235                        ;
  9236                        ;
  9237                        ;#else	/* FF_USE_LFN : Non-LFN configuration */
  9238                        ;	BYTE c, d, *sfn;
  9239                        ;	UINT ni, si, i;
  9240                        ;	const char *p;
  9241                        ;
  9242                        ;	/* Create file name in directory form */
  9243                        ;	p = *path; sfn = dp->fn;
  9244             00000000   c_1	set	0
  9245             00000001   d_1	set	1
  9246             00000002   sfn_1	set	2
  9247             00000006   ni_1	set	6
  9248             00000008   si_1	set	8
  9249             0000000A   i_1	set	10
  9250             0000000C   p_1	set	12
  9251                        	.sym	c,0,14,1,8
  9252                        	.sym	d,1,14,1,8
  9253                        	.sym	sfn,2,142,1,32
  9254                        	.sym	ni,6,16,1,16
  9255                        	.sym	si,8,16,1,16
  9256                        	.sym	i,10,16,1,16
  9257                        	.sym	p,12,142,1,32
  9258                        	.sym	dp,4,138,6,32,83
  9259                        	.sym	path,8,1166,6,32
  9260                        	.line	3008
  9261 08:1CEE: A7 20        	lda	[<L322+path_0]
  9262 08:1CF0: 85 15        	sta	<L323+p_1
  9263 08:1CF2: A0 02 00     	ldy	#$2
  9264 08:1CF5: B7 20        	lda	[<L322+path_0],Y
  9265 08:1CF7: 85 17        	sta	<L323+p_1+2
  9266                        	.line	3008
  9267 08:1CF9: 18           	clc
  9268 08:1CFA: A9 20 00     	lda	#$20
  9269 08:1CFD: 65 1C        	adc	<L322+dp_0
  9270 08:1CFF: 85 0B        	sta	<L323+sfn_1
  Thu Dec  3 2020 22:25                                                Page 187


  9271 08:1D01: A9 00 00     	lda	#$0
  9272 08:1D04: 65 1E        	adc	<L322+dp_0+2
  9273 08:1D06: 85 0D        	sta	<L323+sfn_1+2
  9274                        ;	mem_set(sfn, ' ', 11);
  9275                        	.line	3009
  9276 08:1D08: F4 0B 00     	pea	#<$b
  9277 08:1D0B: F4 20 00     	pea	#<$20
  9278 08:1D0E: D4 0D        	pei	<L323+sfn_1+2
  9279 08:1D10: D4 0B        	pei	<L323+sfn_1
  9280 08:1D12: 22 DF 01 08  	jsl	~~mem_set
  9281                        ;	si = i = 0; ni = 8;
  9282                        	.line	3010
  9283 08:1D16: 64 13        	stz	<L323+i_1
  9284 08:1D18: 64 11        	stz	<L323+si_1
  9285                        	.line	3010
  9286 08:1D1A: A9 08 00     	lda	#$8
  9287 08:1D1D: 85 0F        	sta	<L323+ni_1
  9288                        ;#if FF_FS_RPATH != 0
  9289                        ;	if (p[si] == '.') { /* Is this a dot entry? */
  9290                        ;		for (;;) {
  9291                        ;			c = (BYTE)p[si++];
  9292                        ;			if (c != '.' || si >= 3) break;
  9293                        ;			sfn[i++] = c;
  9294                        ;		}
  9295                        ;		if (c != '/' && c != '\\' && c > ' ') re
                    turn FR_INVALID_NAME;
  9296                        ;		*path = p + si;				
                    				/* Return pointer to the next se
                    gment */
  9297                        ;		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_
                    DOT : NS_DOT;	/* Set last segment flag if end of the p
                    ath */
  9298                        ;		return FR_OK;
  9299                        ;	}
  9300                        ;#endif
  9301                        ;	for (;;) {
  9302                        	.line	3024
  9303                        L10138:
  9304                        	.line	3024
  9305                        ;		c = (BYTE)p[si++];			
                    	/* Get a byte */
  9306                        	.line	3025
  9307 08:1D1F: E2 20        	sep	#$20
  9308                        	longa	off
  9309 08:1D21: A4 11        	ldy	<L323+si_1
  9310 08:1D23: B7 15        	lda	[<L323+p_1],Y
  9311 08:1D25: 85 09        	sta	<L323+c_1
  9312 08:1D27: C2 20        	rep	#$20
  9313                        	longa	on
  9314 08:1D29: E6 11        	inc	<L323+si_1
  9315                        ;		if (c <= ' ') break; 			
                    /* Break if end of the path name */
  9316                        	.line	3026
  9317 08:1D2B: E2 20        	sep	#$20
  9318                        	longa	off
  9319 08:1D2D: A9 20        	lda	#$20
  9320 08:1D2F: C5 09        	cmp	<L323+c_1
  9321 08:1D31: C2 20        	rep	#$20
  Thu Dec  3 2020 22:25                                                Page 188


  9322                        	longa	on
  9323 08:1D33: 90 03        	bcc	L325
  9324 08:1D35: 82 60 01     	brl	L10137
  9325                        L325:
  9326                        ;		if (c == '/' || c == '\\') {	/* Break
                     if a separator is found */
  9327                        	.line	3027
  9328 08:1D38: E2 20        	sep	#$20
  9329                        	longa	off
  9330 08:1D3A: A5 09        	lda	<L323+c_1
  9331 08:1D3C: C9 2F        	cmp	#<$2f
  9332 08:1D3E: C2 20        	rep	#$20
  9333                        	longa	on
  9334 08:1D40: D0 03        	bne	L327
  9335 08:1D42: 82 0D 00     	brl	L326
  9336                        L327:
  9337 08:1D45: E2 20        	sep	#$20
  9338                        	longa	off
  9339 08:1D47: A5 09        	lda	<L323+c_1
  9340 08:1D49: C9 5C        	cmp	#<$5c
  9341 08:1D4B: C2 20        	rep	#$20
  9342                        	longa	on
  9343 08:1D4D: F0 03        	beq	L328
  9344 08:1D4F: 82 26 00     	brl	L10139
  9345                        L328:
  9346                        L326:
  9347                        	.line	3027
  9348                        ;			while (p[si] == '/' || p[si] == 
                    '\\') si++;	/* Skip duplicated separator if exist */
  9349                        	.line	3028
  9350                        L10140:
  9351 08:1D52: E2 20        	sep	#$20
  9352                        	longa	off
  9353 08:1D54: A4 11        	ldy	<L323+si_1
  9354 08:1D56: B7 15        	lda	[<L323+p_1],Y
  9355 08:1D58: C9 2F        	cmp	#<$2f
  9356 08:1D5A: C2 20        	rep	#$20
  9357                        	longa	on
  9358 08:1D5C: D0 03        	bne	L330
  9359 08:1D5E: 82 0F 00     	brl	L329
  9360                        L330:
  9361 08:1D61: E2 20        	sep	#$20
  9362                        	longa	off
  9363 08:1D63: A4 11        	ldy	<L323+si_1
  9364 08:1D65: B7 15        	lda	[<L323+p_1],Y
  9365 08:1D67: C9 5C        	cmp	#<$5c
  9366 08:1D69: C2 20        	rep	#$20
  9367                        	longa	on
  9368 08:1D6B: F0 03        	beq	L331
  9369 08:1D6D: 82 05 00     	brl	L10141
  9370                        L331:
  9371                        L329:
  9372                        	.line	3028
  9373 08:1D70: E6 11        	inc	<L323+si_1
  9374 08:1D72: 82 DD FF     	brl	L10140
  9375                        L10141:
  9376                        ;			break;
  9377                        	.line	3029
  Thu Dec  3 2020 22:25                                                Page 189


  9378 08:1D75: 82 20 01     	brl	L10137
  9379                        ;		}
  9380                        	.line	3030
  9381                        ;		if (c == '.' || i >= ni) {		
                    /* End of body or field overflow? */
  9382                        L10139:
  9383                        	.line	3031
  9384 08:1D78: E2 20        	sep	#$20
  9385                        	longa	off
  9386 08:1D7A: A5 09        	lda	<L323+c_1
  9387 08:1D7C: C9 2E        	cmp	#<$2e
  9388 08:1D7E: C2 20        	rep	#$20
  9389                        	longa	on
  9390 08:1D80: D0 03        	bne	L333
  9391 08:1D82: 82 09 00     	brl	L332
  9392                        L333:
  9393 08:1D85: A5 13        	lda	<L323+i_1
  9394 08:1D87: C5 0F        	cmp	<L323+ni_1
  9395 08:1D89: B0 03        	bcs	L334
  9396 08:1D8B: 82 39 00     	brl	L10142
  9397                        L334:
  9398                        L332:
  9399                        	.line	3031
  9400                        ;			if (ni == 11 || c != '.') return
                     FR_INVALID_NAME;	/* Field overflow or invalid dot? */
  9401                        	.line	3032
  9402 08:1D8E: A5 0F        	lda	<L323+ni_1
  9403 08:1D90: C9 0B 00     	cmp	#<$b
  9404 08:1D93: D0 03        	bne	L336
  9405 08:1D95: 82 0D 00     	brl	L335
  9406                        L336:
  9407 08:1D98: E2 20        	sep	#$20
  9408                        	longa	off
  9409 08:1D9A: A5 09        	lda	<L323+c_1
  9410 08:1D9C: C9 2E        	cmp	#<$2e
  9411 08:1D9E: C2 20        	rep	#$20
  9412                        	longa	on
  9413 08:1DA0: D0 03        	bne	L337
  9414 08:1DA2: 82 15 00     	brl	L10143
  9415                        L337:
  9416                        L335:
  9417                        	.line	3032
  9418 08:1DA5: A9 06 00     	lda	#$6
  9419                        L338:
  9420 08:1DA8: A8           	tay
  9421 08:1DA9: A5 1A        	lda	<L322+2
  9422 08:1DAB: 85 22        	sta	<L322+2+8
  9423 08:1DAD: A5 19        	lda	<L322+1
  9424 08:1DAF: 85 21        	sta	<L322+1+8
  9425 08:1DB1: 2B           	pld
  9426 08:1DB2: 3B           	tsc
  9427 08:1DB3: 18           	clc
  9428 08:1DB4: 69 20 00     	adc	#L322+8
  9429 08:1DB7: 1B           	tcs
  9430 08:1DB8: 98           	tya
  9431 08:1DB9: 6B           	rtl
  9432                        ;			i = 8; ni = 11;			
                    	/* Enter file extension field */
  Thu Dec  3 2020 22:25                                                Page 190


  9433                        L10143:
  9434                        	.line	3033
  9435 08:1DBA: A9 08 00     	lda	#$8
  9436 08:1DBD: 85 13        	sta	<L323+i_1
  9437                        	.line	3033
  9438 08:1DBF: A9 0B 00     	lda	#$b
  9439 08:1DC2: 85 0F        	sta	<L323+ni_1
  9440                        ;			continue;
  9441                        	.line	3034
  9442 08:1DC4: 82 CE 00     	brl	L10136
  9443                        ;		}
  9444                        	.line	3035
  9445                        ;#if FF_CODE_PAGE == 0
  9446                        ;		if (ExCvt && c >= 0x80) {		
                    /* Is SBC extended character? */
  9447                        ;			c = ExCvt[c & 0x7F];		
                    /* To upper SBC extended character */
  9448                        ;		}
  9449                        ;#elif FF_CODE_PAGE < 900
  9450                        ;		if (c >= 0x80) {			
                    	/* Is SBC extended character? */
  9451                        L10142:
  9452                        	.line	3041
  9453 08:1DC7: E2 20        	sep	#$20
  9454                        	longa	off
  9455 08:1DC9: A5 09        	lda	<L323+c_1
  9456 08:1DCB: C9 80        	cmp	#<$80
  9457 08:1DCD: C2 20        	rep	#$20
  9458                        	longa	on
  9459 08:1DCF: B0 03        	bcs	L339
  9460 08:1DD1: 82 12 00     	brl	L10144
  9461                        L339:
  9462                        	.line	3041
  9463                        ;			c = ExCvt[c & 0x7F];		
                    /* To upper SBC extended character */
  9464                        	.line	3042
  9465 08:1DD4: A5 09        	lda	<L323+c_1
  9466 08:1DD6: 29 7F 00     	and	#<$7f
  9467 08:1DD9: 85 01        	sta	<R0
  9468 08:1DDB: E2 20        	sep	#$20
  9469                        	longa	off
  9470 08:1DDD: A6 01        	ldx	<R0
  9471 08:1DDF: BD xx xx     	lda	|~~ExCvt,X
  9472 08:1DE2: 85 09        	sta	<L323+c_1
  9473 08:1DE4: C2 20        	rep	#$20
  9474                        	longa	on
  9475                        ;		}
  9476                        	.line	3043
  9477                        ;#endif
  9478                        ;		if (dbc_1st(c)) {			
                    	/* Check if it is a DBC 1st byte */
  9479                        L10144:
  9480                        	.line	3045
  9481 08:1DE6: D4 09        	pei	<L323+c_1
  9482 08:1DE8: 22 B7 02 08  	jsl	~~dbc_1st
  9483 08:1DEC: AA           	tax
  9484 08:1DED: D0 03        	bne	L340
  9485 08:1DEF: 82 4A 00     	brl	L10145
  Thu Dec  3 2020 22:25                                                Page 191


  9486                        L340:
  9487                        	.line	3045
  9488                        ;			d = (BYTE)p[si++];		
                    	/* Get 2nd byte */
  9489                        	.line	3046
  9490 08:1DF2: E2 20        	sep	#$20
  9491                        	longa	off
  9492 08:1DF4: A4 11        	ldy	<L323+si_1
  9493 08:1DF6: B7 15        	lda	[<L323+p_1],Y
  9494 08:1DF8: 85 0A        	sta	<L323+d_1
  9495 08:1DFA: C2 20        	rep	#$20
  9496                        	longa	on
  9497 08:1DFC: E6 11        	inc	<L323+si_1
  9498                        ;			if (!dbc_2nd(d) || i >= ni - 1) 
                    return FR_INVALID_NAME;	/* Reject invalid DBC */
  9499                        	.line	3047
  9500 08:1DFE: D4 0A        	pei	<L323+d_1
  9501 08:1E00: 22 E4 02 08  	jsl	~~dbc_2nd
  9502 08:1E04: AA           	tax
  9503 08:1E05: D0 03        	bne	L342
  9504 08:1E07: 82 11 00     	brl	L341
  9505                        L342:
  9506 08:1E0A: 18           	clc
  9507 08:1E0B: A9 FF FF     	lda	#$ffff
  9508 08:1E0E: 65 0F        	adc	<L323+ni_1
  9509 08:1E10: 85 01        	sta	<R0
  9510 08:1E12: A5 13        	lda	<L323+i_1
  9511 08:1E14: C5 01        	cmp	<R0
  9512 08:1E16: B0 03        	bcs	L343
  9513 08:1E18: 82 06 00     	brl	L10146
  9514                        L343:
  9515                        L341:
  9516                        	.line	3047
  9517 08:1E1B: A9 06 00     	lda	#$6
  9518 08:1E1E: 82 87 FF     	brl	L338
  9519                        ;			sfn[i++] = c;
  9520                        L10146:
  9521                        	.line	3048
  9522 08:1E21: E2 20        	sep	#$20
  9523                        	longa	off
  9524 08:1E23: A5 09        	lda	<L323+c_1
  9525 08:1E25: A4 13        	ldy	<L323+i_1
  9526 08:1E27: 97 0B        	sta	[<L323+sfn_1],Y
  9527 08:1E29: C2 20        	rep	#$20
  9528                        	longa	on
  9529 08:1E2B: E6 13        	inc	<L323+i_1
  9530                        ;			sfn[i++] = d;
  9531                        	.line	3049
  9532 08:1E2D: E2 20        	sep	#$20
  9533                        	longa	off
  9534 08:1E2F: A5 0A        	lda	<L323+d_1
  9535 08:1E31: A4 13        	ldy	<L323+i_1
  9536 08:1E33: 97 0B        	sta	[<L323+sfn_1],Y
  9537 08:1E35: C2 20        	rep	#$20
  9538                        	longa	on
  9539 08:1E37: E6 13        	inc	<L323+i_1
  9540                        ;		} else {				
                    		/* SBC */
  Thu Dec  3 2020 22:25                                                Page 192


  9541                        	.line	3050
  9542 08:1E39: 82 59 00     	brl	L10147
  9543                        L10145:
  9544                        	.line	3050
  9545                        ;			if (chk_chr("\"*+,:;<=>\?[]|\x7F
                    ", c)) return FR_INVALID_NAME;	/* Reject illegal chrs f
                    or SFN */
  9546                        	.line	3051
  9547 08:1E3C: A5 09        	lda	<L323+c_1
  9548 08:1E3E: 29 FF 00     	and	#$ff
  9549 08:1E41: 48           	pha
  9550 08:1E42: F4 xx xx     	pea	#^L1
  9551 08:1E45: F4 xx xx     	pea	#<L1
  9552 08:1E48: 22 75 02 08  	jsl	~~chk_chr
  9553 08:1E4C: AA           	tax
  9554 08:1E4D: D0 03        	bne	L344
  9555 08:1E4F: 82 06 00     	brl	L10148
  9556                        L344:
  9557                        	.line	3051
  9558 08:1E52: A9 06 00     	lda	#$6
  9559 08:1E55: 82 50 FF     	brl	L338
  9560                        ;			if (IsLower(c)) c -= 0x20;	
                    /* To upper */
  9561                        L10148:
  9562                        	.line	3052
  9563 08:1E58: E2 20        	sep	#$20
  9564                        	longa	off
  9565 08:1E5A: A5 09        	lda	<L323+c_1
  9566 08:1E5C: C9 61        	cmp	#<$61
  9567 08:1E5E: C2 20        	rep	#$20
  9568                        	longa	on
  9569 08:1E60: B0 03        	bcs	L345
  9570 08:1E62: 82 24 00     	brl	L10149
  9571                        L345:
  9572 08:1E65: E2 20        	sep	#$20
  9573                        	longa	off
  9574 08:1E67: A9 7A        	lda	#$7a
  9575 08:1E69: C5 09        	cmp	<L323+c_1
  9576 08:1E6B: C2 20        	rep	#$20
  9577                        	longa	on
  9578 08:1E6D: B0 03        	bcs	L346
  9579 08:1E6F: 82 17 00     	brl	L10149
  9580                        L346:
  9581                        	.line	3052
  9582 08:1E72: A5 09        	lda	<L323+c_1
  9583 08:1E74: 29 FF 00     	and	#$ff
  9584 08:1E77: 85 01        	sta	<R0
  9585 08:1E79: 18           	clc
  9586 08:1E7A: A9 E0 FF     	lda	#$ffe0
  9587 08:1E7D: 65 01        	adc	<R0
  9588 08:1E7F: 85 05        	sta	<R1
  9589 08:1E81: E2 20        	sep	#$20
  9590                        	longa	off
  9591 08:1E83: A5 05        	lda	<R1
  9592 08:1E85: 85 09        	sta	<L323+c_1
  9593 08:1E87: C2 20        	rep	#$20
  9594                        	longa	on
  9595                        ;			sfn[i++] = c;
  Thu Dec  3 2020 22:25                                                Page 193


  9596                        L10149:
  9597                        	.line	3053
  9598 08:1E89: E2 20        	sep	#$20
  9599                        	longa	off
  9600 08:1E8B: A5 09        	lda	<L323+c_1
  9601 08:1E8D: A4 13        	ldy	<L323+i_1
  9602 08:1E8F: 97 0B        	sta	[<L323+sfn_1],Y
  9603 08:1E91: C2 20        	rep	#$20
  9604                        	longa	on
  9605 08:1E93: E6 13        	inc	<L323+i_1
  9606                        ;		}
  9607                        	.line	3054
  9608                        L10147:
  9609                        ;	}
  9610                        	.line	3055
  9611                        L10136:
  9612 08:1E95: 82 87 FE     	brl	L10138
  9613                        L10137:
  9614                        ;	*path = p + si;					
                    	/* Return pointer to the next segment */
  9615                        	.line	3056
  9616 08:1E98: A5 11        	lda	<L323+si_1
  9617 08:1E9A: 85 01        	sta	<R0
  9618 08:1E9C: 64 03        	stz	<R0+2
  9619 08:1E9E: 18           	clc
  9620 08:1E9F: A5 15        	lda	<L323+p_1
  9621 08:1EA1: 65 01        	adc	<R0
  9622 08:1EA3: 85 05        	sta	<R1
  9623 08:1EA5: A5 17        	lda	<L323+p_1+2
  9624 08:1EA7: 65 03        	adc	<R0+2
  9625 08:1EA9: 85 07        	sta	<R1+2
  9626 08:1EAB: A5 05        	lda	<R1
  9627 08:1EAD: 87 20        	sta	[<L322+path_0]
  9628 08:1EAF: A5 07        	lda	<R1+2
  9629 08:1EB1: A0 02 00     	ldy	#$2
  9630 08:1EB4: 97 20        	sta	[<L322+path_0],Y
  9631                        ;	if (i == 0) return FR_INVALID_NAME;	/* Rejec
                    t nul string */
  9632                        	.line	3057
  9633 08:1EB6: A5 13        	lda	<L323+i_1
  9634 08:1EB8: F0 03        	beq	L347
  9635 08:1EBA: 82 06 00     	brl	L10150
  9636                        L347:
  9637                        	.line	3057
  9638 08:1EBD: A9 06 00     	lda	#$6
  9639 08:1EC0: 82 E5 FE     	brl	L338
  9640                        ;
  9641                        ;	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If th
                    e first character collides with DDEM, replace it with RDDEM 
                    */
  9642                        L10150:
  9643                        	.line	3059
  9644 08:1EC3: E2 20        	sep	#$20
  9645                        	longa	off
  9646 08:1EC5: A7 0B        	lda	[<L323+sfn_1]
  9647 08:1EC7: C9 E5        	cmp	#<$e5
  9648 08:1EC9: C2 20        	rep	#$20
  9649                        	longa	on
  Thu Dec  3 2020 22:25                                                Page 194


  9650 08:1ECB: F0 03        	beq	L348
  9651 08:1ECD: 82 08 00     	brl	L10151
  9652                        L348:
  9653                        	.line	3059
  9654 08:1ED0: E2 20        	sep	#$20
  9655                        	longa	off
  9656 08:1ED2: A9 05        	lda	#$5
  9657 08:1ED4: 87 0B        	sta	[<L323+sfn_1]
  9658 08:1ED6: C2 20        	rep	#$20
  9659                        	longa	on
  9660                        ;	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		
                    /* Set last segment flag if end of the path */
  9661                        L10151:
  9662                        	.line	3060
  9663 08:1ED8: E2 20        	sep	#$20
  9664                        	longa	off
  9665 08:1EDA: A9 20        	lda	#$20
  9666 08:1EDC: C5 09        	cmp	<L323+c_1
  9667 08:1EDE: C2 20        	rep	#$20
  9668                        	longa	on
  9669 08:1EE0: B0 03        	bcs	L350
  9670 08:1EE2: 82 05 00     	brl	L349
  9671                        L350:
  9672 08:1EE5: A9 04 00     	lda	#$4
  9673 08:1EE8: 80 03        	bra	L351
  9674                        L349:
  9675 08:1EEA: A9 00 00     	lda	#$0
  9676                        L351:
  9677 08:1EED: E2 20        	sep	#$20
  9678                        	longa	off
  9679 08:1EEF: A0 0B 00     	ldy	#$b
  9680 08:1EF2: 97 0B        	sta	[<L323+sfn_1],Y
  9681 08:1EF4: C2 20        	rep	#$20
  9682                        	longa	on
  9683                        ;
  9684                        ;	return FR_OK;
  9685                        	.line	3062
  9686 08:1EF6: A9 00 00     	lda	#$0
  9687 08:1EF9: 82 AC FE     	brl	L338
  9688                        ;#endif /* FF_USE_LFN */
  9689                        ;}
  9690                        	.line	3064
  9691                        	.endblock	3064
  9692             00000018   L322	equ	24
  9693             00000009   L323	equ	9
  9694 08:1EFC:              	ends
  9695                        	efunc
  9696                        	.endfunc	3064,9,24
  9697                        	.line	3064
  9698                        	data
  9699                        L1:
  9700 00:0080: 22 2A 2B 2C  	db	$22,$2A,$2B,$2C,$3A,$3B,$3C,$3D,$3E,$3F,
                    $5B,$5D,$7C,$7F,$00
       00:0084: 3A 3B 3C 3D 
       00:0088: 3E 3F 5B 5D 
       00:008C: 7C 7F 00 
  9701 00:008F:              	ends
  9702                        ;
  Thu Dec  3 2020 22:25                                                Page 195


  9703                        ;
  9704                        ;
  9705                        ;
  9706                        ;/*-----------------------------------------------
                    ------------------------*/
  9707                        ;/* Follow a file path                            
                                            */
  9708                        ;/*-----------------------------------------------
                    ------------------------*/
  9709                        ;
  9710                        ;static FRESULT follow_path (	/* FR_OK(0): suc
                    cessful, !=0: error code */
  9711                        ;	DIR* dp,					
                    /* Directory object to return last directory and found objec
                    t */
  9712                        ;	const TCHAR* path			/* Full-
                    path string to find a file or directory */
  9713                        ;)
  9714                        ;{
  9715                        	.line	3073
  9716                        	.line	3077
  9717                        	FFDOS
  9718                        	func
  9719                        	.function	3077
  9720                        ~~follow_path:
  9721                        	longa	on
  9722                        	longi	on
  9723 08:1EFC: 3B           	tsc
  9724 08:1EFD: 38           	sec
  9725 08:1EFE: E9 13 00     	sbc	#L353
  9726 08:1F01: 1B           	tcs
  9727 08:1F02: 0B           	phd
  9728 08:1F03: 5B           	tcd
  9729             00000004   dp_0	set	4
  9730             00000008   path_0	set	8
  9731                        	.block	3077
  9732                        ;	FRESULT res;
  9733                        ;	BYTE ns;
  9734                        ;	FATFS *fs = dp->obj.fs;
  9735                        ;
  9736                        ;
  9737                        ;	k_debug_string( "follow_path...\r\n");
  9738             00000000   res_1	set	0
  9739             00000002   ns_1	set	2
  9740             00000003   fs_1	set	3
  9741                        	.sym	res,0,5,1,16
  9742                        	.sym	ns,2,14,1,8
  9743                        	.sym	fs,3,138,1,32,80
  9744                        	.sym	dp,4,138,6,32,83
  9745                        	.sym	path,8,142,6,32
  9746 08:1F04: A7 17        	lda	[<L353+dp_0]
  9747 08:1F06: 85 10        	sta	<L354+fs_1
  9748 08:1F08: A0 02 00     	ldy	#$2
  9749 08:1F0B: B7 17        	lda	[<L353+dp_0],Y
  9750 08:1F0D: 85 12        	sta	<L354+fs_1+2
  9751                        	.line	3083
  9752 08:1F0F: F4 xx xx     	pea	#^L352
  9753 08:1F12: F4 xx xx     	pea	#<L352
  Thu Dec  3 2020 22:25                                                Page 196


  9754 08:1F15: 22 xx xx xx  	jsl	~~k_debug_string
  9755                        ;
  9756                        ;
  9757                        ;#if FF_FS_RPATH != 0
  9758                        ;	if (*path != '/' && *path != '\\') {	/* Witho
                    ut heading separator */
  9759                        ;		dp->obj.sclust = fs->cdir;		
                    		/* Start from current directory */
  9760                        ;	} else
  9761                        ;#endif
  9762                        ;	{						
                    				/* With heading separator */
  9763                        	.line	3091
  9764                        ;		while (*path == '/' || *path == '\\') pa
                    th++;	/* Strip heading separator */
  9765                        	.line	3092
  9766                        L10152:
  9767 08:1F19: E2 20        	sep	#$20
  9768                        	longa	off
  9769 08:1F1B: A7 1B        	lda	[<L353+path_0]
  9770 08:1F1D: C9 2F        	cmp	#<$2f
  9771 08:1F1F: C2 20        	rep	#$20
  9772                        	longa	on
  9773 08:1F21: D0 03        	bne	L357
  9774 08:1F23: 82 0D 00     	brl	L356
  9775                        L357:
  9776 08:1F26: E2 20        	sep	#$20
  9777                        	longa	off
  9778 08:1F28: A7 1B        	lda	[<L353+path_0]
  9779 08:1F2A: C9 5C        	cmp	#<$5c
  9780 08:1F2C: C2 20        	rep	#$20
  9781                        	longa	on
  9782 08:1F2E: F0 03        	beq	L358
  9783 08:1F30: 82 09 00     	brl	L10153
  9784                        L358:
  9785                        L356:
  9786                        	.line	3092
  9787 08:1F33: E6 1B        	inc	<L353+path_0
  9788 08:1F35: D0 02        	bne	L359
  9789 08:1F37: E6 1D        	inc	<L353+path_0+2
  9790                        L359:
  9791 08:1F39: 82 DD FF     	brl	L10152
  9792                        L10153:
  9793                        ;		dp->obj.sclust = 0;			
                    		/* Start from root directory */
  9794                        	.line	3093
  9795 08:1F3C: A9 00 00     	lda	#$0
  9796 08:1F3F: A0 08 00     	ldy	#$8
  9797 08:1F42: 97 17        	sta	[<L353+dp_0],Y
  9798 08:1F44: A9 00 00     	lda	#$0
  9799 08:1F47: A0 0A 00     	ldy	#$a
  9800 08:1F4A: 97 17        	sta	[<L353+dp_0],Y
  9801                        ;	}
  9802                        	.line	3094
  9803                        ;#if FF_FS_EXFAT
  9804                        ;	dp->obj.n_frag = 0;	/* Invalidate last fragm
                    ent counter of the object */
  9805                        ;#if FF_FS_RPATH != 0
  Thu Dec  3 2020 22:25                                                Page 197


  9806                        ;	if (fs->fs_type == FS_EXFAT && dp->obj.sclust) {
                    	/* exFAT: Retrieve the sub-directory's status */
  9807                        ;		DIR dj;
  9808                        ;
  9809                        ;		dp->obj.c_scl = fs->cdc_scl;
  9810                        ;		dp->obj.c_size = fs->cdc_size;
  9811                        ;		dp->obj.c_ofs = fs->cdc_ofs;
  9812                        ;		res = load_obj_xdir(&dj, &dp->obj);
  9813                        ;		if (res != FR_OK) return res;
  9814                        ;		dp->obj.objsize = ld_dword(fs->dirbuf + 
                    XDIR_FileSize);
  9815                        ;		dp->obj.stat = fs->dirbuf[XDIR_GenFlags]
                     & 2;
  9816                        ;	}
  9817                        ;#endif
  9818                        ;#endif
  9819                        ;
  9820                        ;	if ((UINT)*path < ' ') {			
                    	/* Null path name is the origin directory itself */
  9821                        	.line	3112
  9822 08:1F4C: E2 20        	sep	#$20
  9823                        	longa	off
  9824 08:1F4E: A7 1B        	lda	[<L353+path_0]
  9825 08:1F50: C9 20        	cmp	#<$20
  9826 08:1F52: C2 20        	rep	#$20
  9827                        	longa	on
  9828 08:1F54: 90 03        	bcc	L360
  9829 08:1F56: 82 1E 00     	brl	L10154
  9830                        L360:
  9831                        	.line	3112
  9832                        ;		dp->fn[NSFLAG] = NS_NONAME;
  9833                        	.line	3113
  9834 08:1F59: E2 20        	sep	#$20
  9835                        	longa	off
  9836 08:1F5B: A9 80        	lda	#$80
  9837 08:1F5D: A0 2B 00     	ldy	#$2b
  9838 08:1F60: 97 17        	sta	[<L353+dp_0],Y
  9839 08:1F62: C2 20        	rep	#$20
  9840                        	longa	on
  9841                        ;		res = dir_sdi(dp, 0);
  9842                        	.line	3114
  9843 08:1F64: F4 00 00     	pea	#^$0
  9844 08:1F67: F4 00 00     	pea	#<$0
  9845 08:1F6A: D4 19        	pei	<L353+dp_0+2
  9846 08:1F6C: D4 17        	pei	<L353+dp_0
  9847 08:1F6E: 22 BD 11 08  	jsl	~~dir_sdi
  9848 08:1F72: 85 0D        	sta	<L354+res_1
  9849                        ;
  9850                        ;	} else {					
                    			/* Follow path */
  9851                        	.line	3116
  9852 08:1F74: 82 F0 00     	brl	L10155
  9853                        L10154:
  9854                        	.line	3116
  9855                        ;		for (;;) {
  9856                        	.line	3117
  9857                        L10158:
  9858                        	.line	3117
  Thu Dec  3 2020 22:25                                                Page 198


  9859                        ;			res = create_name(dp, &path);	
                    /* Get a segment name of the path */
  9860                        	.line	3118
  9861 08:1F77: F4 00 00     	pea	#0
  9862 08:1F7A: 18           	clc
  9863 08:1F7B: 7B           	tdc
  9864 08:1F7C: 69 1B 00     	adc	#<L353+path_0
  9865 08:1F7F: 48           	pha
  9866 08:1F80: D4 19        	pei	<L353+dp_0+2
  9867 08:1F82: D4 17        	pei	<L353+dp_0
  9868 08:1F84: 22 E6 1C 08  	jsl	~~create_name
  9869 08:1F88: 85 0D        	sta	<L354+res_1
  9870                        ;			if (res != FR_OK) break;
  9871                        	.line	3119
  9872 08:1F8A: A5 0D        	lda	<L354+res_1
  9873 08:1F8C: F0 03        	beq	L361
  9874 08:1F8E: 82 D6 00     	brl	L10157
  9875                        L361:
  9876                        ;			res = dir_find(dp);		
                    		/* Find an object with the segment name */
  9877                        	.line	3120
  9878 08:1F91: D4 19        	pei	<L353+dp_0+2
  9879 08:1F93: D4 17        	pei	<L353+dp_0
  9880 08:1F95: 22 88 19 08  	jsl	~~dir_find
  9881 08:1F99: 85 0D        	sta	<L354+res_1
  9882                        ;			ns = dp->fn[NSFLAG];
  9883                        	.line	3121
  9884 08:1F9B: E2 20        	sep	#$20
  9885                        	longa	off
  9886 08:1F9D: A0 2B 00     	ldy	#$2b
  9887 08:1FA0: B7 17        	lda	[<L353+dp_0],Y
  9888 08:1FA2: 85 0F        	sta	<L354+ns_1
  9889 08:1FA4: C2 20        	rep	#$20
  9890                        	longa	on
  9891                        ;			if (res != FR_OK) {		
                    		/* Failed to find the object */
  9892                        	.line	3122
  9893 08:1FA6: A5 0D        	lda	<L354+res_1
  9894 08:1FA8: D0 03        	bne	L362
  9895 08:1FAA: 82 4C 00     	brl	L10159
  9896                        L362:
  9897                        	.line	3122
  9898                        ;				if (res == FR_NO_FILE) {
                    	/* Object is not found */
  9899                        	.line	3123
  9900 08:1FAD: A5 0D        	lda	<L354+res_1
  9901 08:1FAF: C9 04 00     	cmp	#<$4
  9902 08:1FB2: F0 03        	beq	L363
  9903 08:1FB4: 82 3F 00     	brl	L10160
  9904                        L363:
  9905                        	.line	3123
  9906                        ;					if (FF_FS_RPATH 
                    && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there
                     */
  9907                        	.line	3124
  9908 08:1FB7: 82 2A 00     	brl	L10161
  9909 08:1FBA: E2 20        	sep	#$20
  9910                        	longa	off
  Thu Dec  3 2020 22:25                                                Page 199


  9911 08:1FBC: A5 0F        	lda	<L354+ns_1
  9912 08:1FBE: 29 20        	and	#<$20
  9913 08:1FC0: C2 20        	rep	#$20
  9914                        	longa	on
  9915 08:1FC2: D0 03        	bne	L364
  9916 08:1FC4: 82 1D 00     	brl	L10161
  9917                        L364:
  9918                        	.line	3124
  9919                        ;						if (!(ns
                     & NS_LAST)) continue;	/* Continue to follow if not las
                    t segment */
  9920                        	.line	3125
  9921 08:1FC7: E2 20        	sep	#$20
  9922                        	longa	off
  9923 08:1FC9: A5 0F        	lda	<L354+ns_1
  9924 08:1FCB: 29 04        	and	#<$4
  9925 08:1FCD: C2 20        	rep	#$20
  9926                        	longa	on
  9927 08:1FCF: D0 03        	bne	L365
  9928 08:1FD1: 82 90 00     	brl	L10156
  9929                        L365:
  9930                        ;						dp->fn[N
                    SFLAG] = NS_NONAME;
  9931                        	.line	3126
  9932 08:1FD4: E2 20        	sep	#$20
  9933                        	longa	off
  9934 08:1FD6: A9 80        	lda	#$80
  9935 08:1FD8: A0 2B 00     	ldy	#$2b
  9936 08:1FDB: 97 17        	sta	[<L353+dp_0],Y
  9937 08:1FDD: C2 20        	rep	#$20
  9938                        	longa	on
  9939                        ;						res = FR
                    _OK;
  9940                        	.line	3127
  9941 08:1FDF: 64 0D        	stz	<L354+res_1
  9942                        ;					} else {	
                    						/* Could not fin
                    d the object */
  9943                        	.line	3128
  9944 08:1FE1: 82 12 00     	brl	L10162
  9945                        L10161:
  9946                        	.line	3128
  9947                        ;						if (!(ns
                     & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if 
                    not last segment */
  9948                        	.line	3129
  9949 08:1FE4: E2 20        	sep	#$20
  9950                        	longa	off
  9951 08:1FE6: A5 0F        	lda	<L354+ns_1
  9952 08:1FE8: 29 04        	and	#<$4
  9953 08:1FEA: C2 20        	rep	#$20
  9954                        	longa	on
  9955 08:1FEC: F0 03        	beq	L366
  9956 08:1FEE: 82 05 00     	brl	L10163
  9957                        L366:
  9958                        	.line	3129
  9959 08:1FF1: A9 05 00     	lda	#$5
  9960 08:1FF4: 85 0D        	sta	<L354+res_1
  Thu Dec  3 2020 22:25                                                Page 200


  9961                        ;					}
  9962                        L10163:
  9963                        	.line	3130
  9964                        L10162:
  9965                        ;				}
  9966                        	.line	3131
  9967                        ;				break;
  9968                        L10160:
  9969                        	.line	3132
  9970 08:1FF6: 82 6E 00     	brl	L10157
  9971                        ;			}
  9972                        	.line	3133
  9973                        ;			if (ns & NS_LAST) break;	
                    		/* Last segment matched. Function completed. */
  9974                        L10159:
  9975                        	.line	3134
  9976 08:1FF9: E2 20        	sep	#$20
  9977                        	longa	off
  9978 08:1FFB: A5 0F        	lda	<L354+ns_1
  9979 08:1FFD: 29 04        	and	#<$4
  9980 08:1FFF: C2 20        	rep	#$20
  9981                        	longa	on
  9982 08:2001: F0 03        	beq	L367
  9983 08:2003: 82 61 00     	brl	L10157
  9984                        L367:
  9985                        ;			/* Get into the sub-directory */
  9986                        ;			if (!(dp->obj.attr & AM_DIR)) {	
                    	/* It is not a sub-directory and cannot follow */
  9987                        	.line	3136
  9988 08:2006: E2 20        	sep	#$20
  9989                        	longa	off
  9990 08:2008: A0 06 00     	ldy	#$6
  9991 08:200B: B7 17        	lda	[<L353+dp_0],Y
  9992 08:200D: 29 10        	and	#<$10
  9993 08:200F: C2 20        	rep	#$20
  9994                        	longa	on
  9995 08:2011: F0 03        	beq	L368
  9996 08:2013: 82 08 00     	brl	L10164
  9997                        L368:
  9998                        	.line	3136
  9999                        ;				res = FR_NO_PATH; break;
 10000                        	.line	3137
 10001 08:2016: A9 05 00     	lda	#$5
 10002 08:2019: 85 0D        	sta	<L354+res_1
 10003                        	.line	3137
 10004 08:201B: 82 49 00     	brl	L10157
 10005                        ;			}
 10006                        	.line	3138
 10007                        ;#if FF_FS_EXFAT
 10008                        ;			if (fs->fs_type == FS_EXFAT) {	
                    	/* Save containing directory information for next dir */
 10009                        ;				dp->obj.c_scl = dp->obj.
                    sclust;
 10010                        ;				dp->obj.c_size = ((DWORD
                    )dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 10011                        ;				dp->obj.c_ofs = dp->blk_
                    ofs;
 10012                        ;				init_alloc_info(fs, &dp-
  Thu Dec  3 2020 22:25                                                Page 201


                    >obj);	/* Open next directory */
 10013                        ;			} else
 10014                        ;#endif
 10015                        ;			{
 10016                        L10164:
 10017                        	.line	3147
 10018                        ;				dp->obj.sclust = ld_clus
                    t(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory *
                    /
 10019                        	.line	3148
 10020 08:201E: A0 10 00     	ldy	#$10
 10021 08:2021: B7 17        	lda	[<L353+dp_0],Y
 10022 08:2023: 29 FF 01     	and	#<$1ff
 10023 08:2026: 85 01        	sta	<R0
 10024 08:2028: 64 03        	stz	<R0+2
 10025 08:202A: 18           	clc
 10026 08:202B: A9 2F 00     	lda	#$2f
 10027 08:202E: 65 01        	adc	<R0
 10028 08:2030: 85 05        	sta	<R1
 10029 08:2032: A9 00 00     	lda	#$0
 10030 08:2035: 65 03        	adc	<R0+2
 10031 08:2037: 85 07        	sta	<R1+2
 10032 08:2039: 18           	clc
 10033 08:203A: A5 10        	lda	<L354+fs_1
 10034 08:203C: 65 05        	adc	<R1
 10035 08:203E: 85 01        	sta	<R0
 10036 08:2040: A5 12        	lda	<L354+fs_1+2
 10037 08:2042: 65 07        	adc	<R1+2
 10038 08:2044: 85 03        	sta	<R0+2
 10039 08:2046: D4 03        	pei	<R0+2
 10040 08:2048: D4 01        	pei	<R0
 10041 08:204A: D4 12        	pei	<L354+fs_1+2
 10042 08:204C: D4 10        	pei	<L354+fs_1
 10043 08:204E: 22 73 17 08  	jsl	~~ld_clust
 10044 08:2052: 85 09        	sta	<R2
 10045 08:2054: 86 0B        	stx	<R2+2
 10046 08:2056: A5 09        	lda	<R2
 10047 08:2058: A0 08 00     	ldy	#$8
 10048 08:205B: 97 17        	sta	[<L353+dp_0],Y
 10049 08:205D: A5 0B        	lda	<R2+2
 10050 08:205F: A0 0A 00     	ldy	#$a
 10051 08:2062: 97 17        	sta	[<L353+dp_0],Y
 10052                        ;			}
 10053                        	.line	3149
 10054                        ;		}
 10055                        	.line	3150
 10056                        L10156:
 10057 08:2064: 82 10 FF     	brl	L10158
 10058                        L10157:
 10059                        ;	}
 10060                        	.line	3151
 10061                        L10155:
 10062                        ;
 10063                        ;	return res;
 10064                        	.line	3153
 10065 08:2067: A5 0D        	lda	<L354+res_1
 10066                        L369:
 10067 08:2069: A8           	tay
  Thu Dec  3 2020 22:25                                                Page 202


 10068 08:206A: A5 15        	lda	<L353+2
 10069 08:206C: 85 1D        	sta	<L353+2+8
 10070 08:206E: A5 14        	lda	<L353+1
 10071 08:2070: 85 1C        	sta	<L353+1+8
 10072 08:2072: 2B           	pld
 10073 08:2073: 3B           	tsc
 10074 08:2074: 18           	clc
 10075 08:2075: 69 1B 00     	adc	#L353+8
 10076 08:2078: 1B           	tcs
 10077 08:2079: 98           	tya
 10078 08:207A: 6B           	rtl
 10079                        ;}
 10080                        	.line	3154
 10081                        	.endblock	3154
 10082             00000013   L353	equ	19
 10083             0000000D   L354	equ	13
 10084 08:207B:              	ends
 10085                        	efunc
 10086                        	.endfunc	3154,13,19
 10087                        	.line	3154
 10088                        	data
 10089                        L352:
 10090 00:008F: 66 6F 6C 6C  	db	$66,$6F,$6C,$6C,$6F,$77,$5F,$70,$61,$74,
                    $68,$2E,$2E,$2E,$0D
       00:0093: 6F 77 5F 70 
       00:0097: 61 74 68 2E 
       00:009B: 2E 2E 0D 
 10091 00:009E: 0A 00        	db	$0A,$00
 10092 00:00A0:              	ends
 10093                        ;
 10094                        ;
 10095                        ;
 10096                        ;
 10097                        ;/*-----------------------------------------------
                    ------------------------*/
 10098                        ;/* Get logical drive number from path name       
                                            */
 10099                        ;/*-----------------------------------------------
                    ------------------------*/
 10100                        ;
 10101                        ;static int get_ldnumber (	/* Returns logic
                    al drive number (-1:invalid drive number or null pointer) */
 10102                        ;	const TCHAR** path		/* Pointer to po
                    inter to the path name */
 10103                        ;)
 10104                        ;{
 10105                        	.line	3163
 10106                        	.line	3166
 10107                        	FFDOS
 10108                        	func
 10109                        	.function	3166
 10110                        ~~get_ldnumber:
 10111                        	longa	on
 10112                        	longi	on
 10113 08:207B: 3B           	tsc
 10114 08:207C: 38           	sec
 10115 08:207D: E9 11 00     	sbc	#L371
 10116 08:2080: 1B           	tcs
  Thu Dec  3 2020 22:25                                                Page 203


 10117 08:2081: 0B           	phd
 10118 08:2082: 5B           	tcd
 10119             00000004   path_0	set	4
 10120                        	.block	3166
 10121                        ;	const TCHAR *tp, *tt;
 10122                        ;	TCHAR tc;
 10123                        ;	int i, vol = -1;
 10124                        ;#if FF_STR_VOLUME_ID		/* Find string v
                    olume ID */
 10125                        ;	const char *sp;
 10126                        ;	char c;
 10127                        ;#endif
 10128                        ;
 10129                        ;	tt = tp = *path;
 10130             00000000   tp_1	set	0
 10131             00000004   tt_1	set	4
 10132             00000008   tc_1	set	8
 10133             00000009   i_1	set	9
 10134             0000000B   vol_1	set	11
 10135                        	.sym	tp,0,142,1,32
 10136                        	.sym	tt,4,142,1,32
 10137                        	.sym	tc,8,14,1,8
 10138                        	.sym	i,9,5,1,16
 10139                        	.sym	vol,11,5,1,16
 10140                        	.sym	path,4,1166,6,32
 10141 08:2083: A9 FF FF     	lda	#$ffff
 10142 08:2086: 85 10        	sta	<L372+vol_1
 10143                        	.line	3175
 10144 08:2088: A7 15        	lda	[<L371+path_0]
 10145 08:208A: 85 05        	sta	<L372+tp_1
 10146 08:208C: A0 02 00     	ldy	#$2
 10147 08:208F: B7 15        	lda	[<L371+path_0],Y
 10148 08:2091: 85 07        	sta	<L372+tp_1+2
 10149 08:2093: A5 05        	lda	<L372+tp_1
 10150 08:2095: 85 09        	sta	<L372+tt_1
 10151 08:2097: A5 07        	lda	<L372+tp_1+2
 10152 08:2099: 85 0B        	sta	<L372+tt_1+2
 10153                        ;	if (!tp) return vol;	/* Invalid path name? */
 10154                        	.line	3176
 10155 08:209B: A5 05        	lda	<L372+tp_1
 10156 08:209D: 05 07        	ora	<L372+tp_1+2
 10157 08:209F: F0 03        	beq	L374
 10158 08:20A1: 82 14 00     	brl	L10165
 10159                        L374:
 10160                        	.line	3176
 10161 08:20A4: A5 10        	lda	<L372+vol_1
 10162                        L375:
 10163 08:20A6: A8           	tay
 10164 08:20A7: A5 13        	lda	<L371+2
 10165 08:20A9: 85 17        	sta	<L371+2+4
 10166 08:20AB: A5 12        	lda	<L371+1
 10167 08:20AD: 85 16        	sta	<L371+1+4
 10168 08:20AF: 2B           	pld
 10169 08:20B0: 3B           	tsc
 10170 08:20B1: 18           	clc
 10171 08:20B2: 69 15 00     	adc	#L371+4
 10172 08:20B5: 1B           	tcs
 10173 08:20B6: 98           	tya
  Thu Dec  3 2020 22:25                                                Page 204


 10174 08:20B7: 6B           	rtl
 10175                        ;	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? 
                    ' ' : '!') && tc != ':');	/* Find a colon in the path */
 10176                        L10165:
 10177                        	.line	3177
 10178                        L10168:
 10179                        	.line	3177
 10180 08:20B8: E2 20        	sep	#$20
 10181                        	longa	off
 10182 08:20BA: A7 09        	lda	[<L372+tt_1]
 10183 08:20BC: 85 0D        	sta	<L372+tc_1
 10184 08:20BE: C2 20        	rep	#$20
 10185                        	longa	on
 10186 08:20C0: E6 09        	inc	<L372+tt_1
 10187 08:20C2: D0 02        	bne	L376
 10188 08:20C4: E6 0B        	inc	<L372+tt_1+2
 10189                        L376:
 10190                        L10166:
 10191 08:20C6: E2 20        	sep	#$20
 10192                        	longa	off
 10193 08:20C8: A5 0D        	lda	<L372+tc_1
 10194 08:20CA: C9 21        	cmp	#<$21
 10195 08:20CC: C2 20        	rep	#$20
 10196                        	longa	on
 10197 08:20CE: B0 03        	bcs	L378
 10198 08:20D0: 82 0D 00     	brl	L377
 10199                        L378:
 10200 08:20D3: E2 20        	sep	#$20
 10201                        	longa	off
 10202 08:20D5: A5 0D        	lda	<L372+tc_1
 10203 08:20D7: C9 3A        	cmp	#<$3a
 10204 08:20D9: C2 20        	rep	#$20
 10205                        	longa	on
 10206 08:20DB: F0 03        	beq	L379
 10207 08:20DD: 82 D8 FF     	brl	L10168
 10208                        L379:
 10209                        L377:
 10210                        L10167:
 10211                        ;
 10212                        ;	if (tc == ':') {	/* DOS/Windows style vol
                    ume ID? */
 10213                        	.line	3179
 10214 08:20E0: E2 20        	sep	#$20
 10215                        	longa	off
 10216 08:20E2: A5 0D        	lda	<L372+tc_1
 10217 08:20E4: C9 3A        	cmp	#<$3a
 10218 08:20E6: C2 20        	rep	#$20
 10219                        	longa	on
 10220 08:20E8: F0 03        	beq	L380
 10221 08:20EA: 82 6A 00     	brl	L10169
 10222                        L380:
 10223                        	.line	3179
 10224                        ;		i = FF_VOLUMES;
 10225                        	.line	3180
 10226 08:20ED: A9 01 00     	lda	#$1
 10227 08:20F0: 85 0E        	sta	<L372+i_1
 10228                        ;		if (IsDigit(*tp) && tp + 2 == tt) {	
                    /* Is there a numeric volume ID + colon? */
  Thu Dec  3 2020 22:25                                                Page 205


 10229                        	.line	3181
 10230 08:20F2: E2 20        	sep	#$20
 10231                        	longa	off
 10232 08:20F4: A7 05        	lda	[<L372+tp_1]
 10233 08:20F6: C9 30        	cmp	#<$30
 10234 08:20F8: C2 20        	rep	#$20
 10235                        	longa	on
 10236 08:20FA: B0 03        	bcs	L381
 10237 08:20FC: 82 3A 00     	brl	L10170
 10238                        L381:
 10239 08:20FF: E2 20        	sep	#$20
 10240                        	longa	off
 10241 08:2101: A9 39        	lda	#$39
 10242 08:2103: C7 05        	cmp	[<L372+tp_1]
 10243 08:2105: C2 20        	rep	#$20
 10244                        	longa	on
 10245 08:2107: B0 03        	bcs	L382
 10246 08:2109: 82 2D 00     	brl	L10170
 10247                        L382:
 10248 08:210C: 18           	clc
 10249 08:210D: A9 02 00     	lda	#$2
 10250 08:2110: 65 05        	adc	<L372+tp_1
 10251 08:2112: 85 01        	sta	<R0
 10252 08:2114: A9 00 00     	lda	#$0
 10253 08:2117: 65 07        	adc	<L372+tp_1+2
 10254 08:2119: 85 03        	sta	<R0+2
 10255 08:211B: A5 09        	lda	<L372+tt_1
 10256 08:211D: C5 01        	cmp	<R0
 10257 08:211F: D0 04        	bne	L383
 10258 08:2121: A5 0B        	lda	<L372+tt_1+2
 10259 08:2123: C5 03        	cmp	<R0+2
 10260                        L383:
 10261 08:2125: F0 03        	beq	L384
 10262 08:2127: 82 0F 00     	brl	L10170
 10263                        L384:
 10264                        	.line	3181
 10265                        ;			i = (int)*tp - '0';	/* Get t
                    he LD number */
 10266                        	.line	3182
 10267 08:212A: A7 05        	lda	[<L372+tp_1]
 10268 08:212C: 29 FF 00     	and	#$ff
 10269 08:212F: 85 01        	sta	<R0
 10270 08:2131: 18           	clc
 10271 08:2132: A9 D0 FF     	lda	#$ffd0
 10272 08:2135: 65 01        	adc	<R0
 10273 08:2137: 85 0E        	sta	<L372+i_1
 10274                        ;		}
 10275                        	.line	3183
 10276                        ;#if FF_STR_VOLUME_ID == 1	/* Arbitrary str
                    ing is enabled */
 10277                        ;		else {
 10278                        ;			i = 0;
 10279                        ;			do {
 10280                        ;				sp = VolumeStr[i]; tp = 
                    *path;	/* This string volume ID and path name */
 10281                        ;				do {	/* Compare the v
                    olume ID with path name */
 10282                        ;					c = *sp++; tc = 
  Thu Dec  3 2020 22:25                                                Page 206


                    *tp++;
 10283                        ;					if (IsLower(c)) 
                    c -= 0x20;
 10284                        ;					if (IsLower(tc))
                     tc -= 0x20;
 10285                        ;				} while (c && (TCHAR)c =
                    = tc);
 10286                        ;			} while ((c || tp != tt) && ++i 
                    < FF_VOLUMES);	/* Repeat for each id until pattern matc
                    h */
 10287                        ;		}
 10288                        ;#endif
 10289                        ;		if (i < FF_VOLUMES) {	/* If a volume I
                    D is found, get the drive number and strip it */
 10290                        L10170:
 10291                        	.line	3197
 10292 08:2139: A5 0E        	lda	<L372+i_1
 10293 08:213B: 30 06        	bmi	L385
 10294 08:213D: 3A           	dea
 10295 08:213E: 30 03        	bmi	L385
 10296 08:2140: 82 0F 00     	brl	L10171
 10297                        L385:
 10298                        	.line	3197
 10299                        ;			vol = i;		/* Drive
                     number */
 10300                        	.line	3198
 10301 08:2143: A5 0E        	lda	<L372+i_1
 10302 08:2145: 85 10        	sta	<L372+vol_1
 10303                        ;			*path = tt;		/* Snip 
                    the drive prefix off */
 10304                        	.line	3199
 10305 08:2147: A5 09        	lda	<L372+tt_1
 10306 08:2149: 87 15        	sta	[<L371+path_0]
 10307 08:214B: A5 0B        	lda	<L372+tt_1+2
 10308 08:214D: A0 02 00     	ldy	#$2
 10309 08:2150: 97 15        	sta	[<L371+path_0],Y
 10310                        ;		}
 10311                        	.line	3200
 10312                        ;		return vol;
 10313                        L10171:
 10314                        	.line	3201
 10315 08:2152: A5 10        	lda	<L372+vol_1
 10316 08:2154: 82 4F FF     	brl	L375
 10317                        ;	}
 10318                        	.line	3202
 10319                        ;#if FF_STR_VOLUME_ID == 2		/* Unix 
                    style volume ID is enabled */
 10320                        ;	if (*tp == '/') {
 10321                        ;		i = 0;
 10322                        ;		do {
 10323                        ;			sp = VolumeStr[i]; tp = *path;	
                    /* This string volume ID and path name */
 10324                        ;			do {	/* Compare the volume ID
                     with path name */
 10325                        ;				c = *sp++; tc = *(++tp);
 10326                        ;				if (IsLower(c)) c -= 0x2
                    0;
 10327                        ;				if (IsLower(tc)) tc -= 0
  Thu Dec  3 2020 22:25                                                Page 207


                    x20;
 10328                        ;			} while (c && (TCHAR)c == tc);
 10329                        ;		} while ((c || (tc != '/' && (UINT)tc >=
                     (FF_USE_LFN ? ' ' : '!'))) && ++i < FF_VOLUMES);	/* Repea
                    t for each ID until pattern match */
 10330                        ;		if (i < FF_VOLUMES) {	/* If a volume I
                    D is found, get the drive number and strip it */
 10331                        ;			vol = i;		/* Drive
                     number */
 10332                        ;			*path = tp;		/* Snip 
                    the drive prefix off */
 10333                        ;			return vol;
 10334                        ;		}
 10335                        ;	}
 10336                        ;#endif
 10337                        ;	/* No drive prefix is found */
 10338                        ;#if FF_FS_RPATH != 0
 10339                        ;	vol = CurrVol;	/* Default drive is current driv
                    e */
 10340                        ;#else
 10341                        ;	vol = 0;		/* Default drive is 0 */
 10342                        L10169:
 10343                        	.line	3225
 10344 08:2157: 64 10        	stz	<L372+vol_1
 10345                        ;#endif
 10346                        ;	return vol;		/* Return the default dr
                    ive */
 10347                        	.line	3227
 10348 08:2159: A5 10        	lda	<L372+vol_1
 10349 08:215B: 82 48 FF     	brl	L375
 10350                        ;}
 10351                        	.line	3228
 10352                        	.endblock	3228
 10353             00000011   L371	equ	17
 10354             00000005   L372	equ	5
 10355 08:215E:              	ends
 10356                        	efunc
 10357                        	.endfunc	3228,5,17
 10358                        	.line	3228
 10359                        ;
 10360                        ;
 10361                        ;
 10362                        ;
 10363                        ;/*-----------------------------------------------
                    ------------------------*/
 10364                        ;/* GPT support functions                         
                                            */
 10365                        ;/*-----------------------------------------------
                    ------------------------*/
 10366                        ;
 10367                        ;#if FF_LBA64
 10368                        ;
 10369                        ;/* Calculate CRC32 in byte-by-byte */
 10370                        ;
 10371                        ;static DWORD crc32 (	/* Returns next CRC valu
                    e */
 10372                        ;	DWORD crc,			/* Current CRC v
                    alue */
  Thu Dec  3 2020 22:25                                                Page 208


 10373                        ;	BYTE d				/* A byte to be 
                    processed */
 10374                        ;)
 10375                        ;{
 10376                        ;	BYTE b;
 10377                        ;
 10378                        ;
 10379                        ;	for (b = 1; b; b <<= 1) {
 10380                        ;		crc ^= (d & b) ? 1 : 0;
 10381                        ;		crc = (crc & 1) ? crc >> 1 ^ 0xEDB88320 
                    : crc >> 1;
 10382                        ;	}
 10383                        ;	return crc;
 10384                        ;}
 10385                        ;
 10386                        ;
 10387                        ;/* Check validity of GPT header */
 10388                        ;
 10389                        ;static int test_gpt_header (	/* 0:Invalid, 1:
                    Valid */
 10390                        ;	const BYTE* gpth			/* Point
                    er to the GPT header */
 10391                        ;)
 10392                        ;{
 10393                        ;	UINT i;
 10394                        ;	DWORD bcc;
 10395                        ;
 10396                        ;
 10397                        ;	if (mem_cmp(gpth + GPTH_Sign, "EFI PART" "\0\0\1
                    \0" "\x5C\0\0", 16)) return 0;	/* Check sign, version (
                    1.0) and length (92) */
 10398                        ;	for (i = 0, bcc = 0xFFFFFFFF; i < 92; i++) {	
                    	/* Check header BCC */
 10399                        ;		bcc = crc32(bcc, i - GPTH_Bcc < 4 ? 0 : 
                    gpth[i]);
 10400                        ;	}
 10401                        ;	if (~bcc != ld_dword(gpth + GPTH_Bcc)) return 0;
 10402                        ;	if (ld_dword(gpth + GPTH_PteSize) != SZ_GPTE) re
                    turn 0;	/* Table entry size (must be SZ_GPTE bytes) */
 10403                        ;	if (ld_dword(gpth + GPTH_PtNum) > 128) return 0;
                    	/* Table size (must be 128 entries or less) */
 10404                        ;
 10405                        ;	return 1;
 10406                        ;}
 10407                        ;
 10408                        ;#if !FF_FS_READONLY && FF_USE_MKFS
 10409                        ;
 10410                        ;/* Generate random value */
 10411                        ;static DWORD make_rand (
 10412                        ;	DWORD seed,		/* Seed value */
 10413                        ;	BYTE* buff,		/* Output buffer */
 10414                        ;	UINT n			/* Data length */
 10415                        ;)
 10416                        ;{
 10417                        ;	UINT r;
 10418                        ;
 10419                        ;
 10420                        ;	if (seed == 0) seed = 1;
  Thu Dec  3 2020 22:25                                                Page 209


 10421                        ;	do {
 10422                        ;		for (r = 0; r < 8; r++) seed = seed & 1 
                    ? seed >> 1 ^ 0xA3000000 : seed >> 1;	/* Shift 8 bits 
                    the 32-bit LFSR */
 10423                        ;		*buff++ = (BYTE)seed;
 10424                        ;	} while (--n);
 10425                        ;	return seed;
 10426                        ;}
 10427                        ;
 10428                        ;#endif
 10429                        ;#endif
 10430                        ;
 10431                        ;
 10432                        ;
 10433                        ;/*-----------------------------------------------
                    ------------------------*/
 10434                        ;/* Load a sector and check if it is an FAT VBR   
                                            */
 10435                        ;/*-----------------------------------------------
                    ------------------------*/
 10436                        ;
 10437                        ;/* Check what the sector is */
 10438                        ;
 10439                        ;static UINT check_fs (	/* 0:FAT VBR, 1:exFAT VB
                    R, 2:Valid BS but not FAT, 3:Invalid BS, 4:Disk error */
 10440                        ;	FATFS* fs,			/* Filesystem ob
                    ject */
 10441                        ;	LBA_t sect			/* Sector to loa
                    d and check if it is an FAT-VBR or not */
 10442                        ;)
 10443                        ;{
 10444                        	.line	3309
 10445                        	.line	3313
 10446                        	FFDOS
 10447                        	func
 10448                        	.function	3313
 10449                        ~~check_fs:
 10450                        	longa	on
 10451                        	longi	on
 10452 08:215E: 3B           	tsc
 10453 08:215F: 38           	sec
 10454 08:2160: E9 08 00     	sbc	#L386
 10455 08:2163: 1B           	tcs
 10456 08:2164: 0B           	phd
 10457 08:2165: 5B           	tcd
 10458             00000004   fs_0	set	4
 10459             00000008   sect_0	set	8
 10460                        	.block	3313
 10461                        ;
 10462                        ;	k_debug_long( "check_fs:", sect);
 10463                        	.sym	fs,4,138,6,32,80
 10464                        	.sym	sect,8,18,6,32
 10465                        	.line	3315
 10466 08:2166: D4 12        	pei	<L386+sect_0+2
 10467 08:2168: D4 10        	pei	<L386+sect_0
 10468 08:216A: F4 xx xx     	pea	#^L370
 10469 08:216D: F4 xx xx     	pea	#<L370
 10470 08:2170: 22 xx xx xx  	jsl	~~k_debug_long
  Thu Dec  3 2020 22:25                                                Page 210


 10471                        ;
 10472                        ;	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;	
                    	/* Invaidate window */
 10473                        	.line	3317
 10474 08:2174: E2 20        	sep	#$20
 10475                        	longa	off
 10476 08:2176: A9 00        	lda	#$0
 10477 08:2178: A0 03 00     	ldy	#$3
 10478 08:217B: 97 0C        	sta	[<L386+fs_0],Y
 10479 08:217D: C2 20        	rep	#$20
 10480                        	longa	on
 10481                        	.line	3317
 10482 08:217F: A9 FF FF     	lda	#$ffff
 10483 08:2182: A0 2B 00     	ldy	#$2b
 10484 08:2185: 97 0C        	sta	[<L386+fs_0],Y
 10485 08:2187: A9 FF FF     	lda	#$ffff
 10486 08:218A: A0 2D 00     	ldy	#$2d
 10487 08:218D: 97 0C        	sta	[<L386+fs_0],Y
 10488                        ;	if (move_window(fs, sect) != FR_OK) return 4;	
                    /* Load the boot sector */
 10489                        	.line	3318
 10490 08:218F: D4 12        	pei	<L386+sect_0+2
 10491 08:2191: D4 10        	pei	<L386+sect_0
 10492 08:2193: D4 0E        	pei	<L386+fs_0+2
 10493 08:2195: D4 0C        	pei	<L386+fs_0
 10494 08:2197: 22 FA 03 08  	jsl	~~move_window
 10495 08:219B: AA           	tax
 10496 08:219C: D0 03        	bne	L389
 10497 08:219E: 82 15 00     	brl	L10172
 10498                        L389:
 10499                        	.line	3318
 10500 08:21A1: A9 04 00     	lda	#$4
 10501                        L390:
 10502 08:21A4: A8           	tay
 10503 08:21A5: A5 0A        	lda	<L386+2
 10504 08:21A7: 85 12        	sta	<L386+2+8
 10505 08:21A9: A5 09        	lda	<L386+1
 10506 08:21AB: 85 11        	sta	<L386+1+8
 10507 08:21AD: 2B           	pld
 10508 08:21AE: 3B           	tsc
 10509 08:21AF: 18           	clc
 10510 08:21B0: 69 10 00     	adc	#L386+8
 10511 08:21B3: 1B           	tcs
 10512 08:21B4: 98           	tya
 10513 08:21B5: 6B           	rtl
 10514                        ;
 10515                        ;
 10516                        ;	k_debug_integer( "check_fs:ld_word(&fs->win[BS_5
                    5AA]):",ld_word(&fs->win[BS_55AA]));
 10517                        L10172:
 10518                        	.line	3321
 10519 08:21B6: 18           	clc
 10520 08:21B7: A9 2D 02     	lda	#$22d
 10521 08:21BA: 65 0C        	adc	<L386+fs_0
 10522 08:21BC: 85 01        	sta	<R0
 10523 08:21BE: A9 00 00     	lda	#$0
 10524 08:21C1: 65 0E        	adc	<L386+fs_0+2
 10525 08:21C3: 85 03        	sta	<R0+2
  Thu Dec  3 2020 22:25                                                Page 211


 10526 08:21C5: D4 03        	pei	<R0+2
 10527 08:21C7: D4 01        	pei	<R0
 10528 08:21C9: 22 00 00 08  	jsl	~~ld_word
 10529 08:21CD: 48           	pha
 10530 08:21CE: F4 xx xx     	pea	#^L370+10
 10531 08:21D1: F4 xx xx     	pea	#<L370+10
 10532 08:21D4: 22 xx xx xx  	jsl	~~k_debug_integer
 10533                        ;	if (ld_word(&fs->win[BS_55AA]) != 0xAA55) return
                     3;	/* Check boot signature (always here regardless of the s
                    ector size) */
 10534                        	.line	3322
 10535 08:21D8: 18           	clc
 10536 08:21D9: A9 2D 02     	lda	#$22d
 10537 08:21DC: 65 0C        	adc	<L386+fs_0
 10538 08:21DE: 85 01        	sta	<R0
 10539 08:21E0: A9 00 00     	lda	#$0
 10540 08:21E3: 65 0E        	adc	<L386+fs_0+2
 10541 08:21E5: 85 03        	sta	<R0+2
 10542 08:21E7: D4 03        	pei	<R0+2
 10543 08:21E9: D4 01        	pei	<R0
 10544 08:21EB: 22 00 00 08  	jsl	~~ld_word
 10545 08:21EF: 85 05        	sta	<R1
 10546 08:21F1: A5 05        	lda	<R1
 10547 08:21F3: C9 55 AA     	cmp	#<$aa55
 10548 08:21F6: D0 03        	bne	L391
 10549 08:21F8: 82 06 00     	brl	L10173
 10550                        L391:
 10551                        	.line	3322
 10552 08:21FB: A9 03 00     	lda	#$3
 10553 08:21FE: 82 A3 FF     	brl	L390
 10554                        ;
 10555                        ;	if (FF_FS_EXFAT && !mem_cmp(&(fs->win[BS_JmpBoot
                    ]), "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check
                     if exFAT VBR */
 10556                        L10173:
 10557                        	.line	3324
 10558 08:2201: 82 2C 00     	brl	L10174
 10559 08:2204: F4 0B 00     	pea	#<$b
 10560 08:2207: F4 xx xx     	pea	#^L370+47
 10561 08:220A: F4 xx xx     	pea	#<L370+47
 10562 08:220D: 18           	clc
 10563 08:220E: A9 2F 00     	lda	#$2f
 10564 08:2211: 65 0C        	adc	<L386+fs_0
 10565 08:2213: 85 01        	sta	<R0
 10566 08:2215: A9 00 00     	lda	#$0
 10567 08:2218: 65 0E        	adc	<L386+fs_0+2
 10568 08:221A: 85 03        	sta	<R0+2
 10569 08:221C: D4 03        	pei	<R0+2
 10570 08:221E: D4 01        	pei	<R0
 10571 08:2220: 22 16 02 08  	jsl	~~mem_cmp
 10572 08:2224: AA           	tax
 10573 08:2225: F0 03        	beq	L392
 10574 08:2227: 82 06 00     	brl	L10174
 10575                        L392:
 10576                        	.line	3324
 10577 08:222A: A9 01 00     	lda	#$1
 10578 08:222D: 82 74 FF     	brl	L390
 10579                        ;
  Thu Dec  3 2020 22:25                                                Page 212


 10580                        ;	k_debug_hex( "check_fs:BS_JmpBoot:",fs->win[BS_J
                    mpBoot]);
 10581                        L10174:
 10582                        	.line	3326
 10583 08:2230: A0 2F 00     	ldy	#$2f
 10584 08:2233: B7 0C        	lda	[<L386+fs_0],Y
 10585 08:2235: 29 FF 00     	and	#$ff
 10586 08:2238: 48           	pha
 10587 08:2239: F4 xx xx     	pea	#^L370+59
 10588 08:223C: F4 xx xx     	pea	#<L370+59
 10589 08:223F: 22 xx xx xx  	jsl	~~k_debug_hex
 10590                        ;
 10591                        ;	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_Jm
                    pBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8)
 10592                        	.line	3328
 10593                        ;	{	/* Valid JumpBoot code? */
 10594 08:2243: E2 20        	sep	#$20
 10595                        	longa	off
 10596 08:2245: A0 2F 00     	ldy	#$2f
 10597 08:2248: B7 0C        	lda	[<L386+fs_0],Y
 10598 08:224A: C9 E9        	cmp	#<$e9
 10599 08:224C: C2 20        	rep	#$20
 10600                        	longa	on
 10601 08:224E: D0 03        	bne	L394
 10602 08:2250: 82 20 00     	brl	L393
 10603                        L394:
 10604 08:2253: E2 20        	sep	#$20
 10605                        	longa	off
 10606 08:2255: A0 2F 00     	ldy	#$2f
 10607 08:2258: B7 0C        	lda	[<L386+fs_0],Y
 10608 08:225A: C9 EB        	cmp	#<$eb
 10609 08:225C: C2 20        	rep	#$20
 10610                        	longa	on
 10611 08:225E: D0 03        	bne	L395
 10612 08:2260: 82 10 00     	brl	L393
 10613                        L395:
 10614 08:2263: E2 20        	sep	#$20
 10615                        	longa	off
 10616 08:2265: A0 2F 00     	ldy	#$2f
 10617 08:2268: B7 0C        	lda	[<L386+fs_0],Y
 10618 08:226A: C9 E8        	cmp	#<$e8
 10619 08:226C: C2 20        	rep	#$20
 10620                        	longa	on
 10621 08:226E: F0 03        	beq	L396
 10622 08:2270: 82 58 00     	brl	L10175
 10623                        L396:
 10624                        L393:
 10625                        	.line	3329
 10626                        ;		if (!mem_cmp(&(fs->win[BS_FilSysType]) ,
                     "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 10627                        	.line	3330
 10628 08:2273: F4 03 00     	pea	#<$3
 10629 08:2276: F4 xx xx     	pea	#^L370+80
 10630 08:2279: F4 xx xx     	pea	#<L370+80
 10631 08:227C: 18           	clc
 10632 08:227D: A9 65 00     	lda	#$65
 10633 08:2280: 65 0C        	adc	<L386+fs_0
 10634 08:2282: 85 01        	sta	<R0
  Thu Dec  3 2020 22:25                                                Page 213


 10635 08:2284: A9 00 00     	lda	#$0
 10636 08:2287: 65 0E        	adc	<L386+fs_0+2
 10637 08:2289: 85 03        	sta	<R0+2
 10638 08:228B: D4 03        	pei	<R0+2
 10639 08:228D: D4 01        	pei	<R0
 10640 08:228F: 22 16 02 08  	jsl	~~mem_cmp
 10641 08:2293: AA           	tax
 10642 08:2294: F0 03        	beq	L397
 10643 08:2296: 82 06 00     	brl	L10176
 10644                        L397:
 10645                        	.line	3330
 10646 08:2299: A9 00 00     	lda	#$0
 10647 08:229C: 82 05 FF     	brl	L390
 10648                        ;		if (!mem_cmp(&(fs->win[BS_FilSysType32])
                     , "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
 10649                        L10176:
 10650                        	.line	3331
 10651 08:229F: F4 05 00     	pea	#<$5
 10652 08:22A2: F4 xx xx     	pea	#^L370+84
 10653 08:22A5: F4 xx xx     	pea	#<L370+84
 10654 08:22A8: 18           	clc
 10655 08:22A9: A9 81 00     	lda	#$81
 10656 08:22AC: 65 0C        	adc	<L386+fs_0
 10657 08:22AE: 85 01        	sta	<R0
 10658 08:22B0: A9 00 00     	lda	#$0
 10659 08:22B3: 65 0E        	adc	<L386+fs_0+2
 10660 08:22B5: 85 03        	sta	<R0+2
 10661 08:22B7: D4 03        	pei	<R0+2
 10662 08:22B9: D4 01        	pei	<R0
 10663 08:22BB: 22 16 02 08  	jsl	~~mem_cmp
 10664 08:22BF: AA           	tax
 10665 08:22C0: F0 03        	beq	L398
 10666 08:22C2: 82 06 00     	brl	L10177
 10667                        L398:
 10668                        	.line	3331
 10669 08:22C5: A9 00 00     	lda	#$0
 10670 08:22C8: 82 D9 FE     	brl	L390
 10671                        ;	}
 10672                        L10177:
 10673                        	.line	3332
 10674                        ;	return 2;	/* Valid BS but not FAT */
 10675                        L10175:
 10676                        	.line	3333
 10677 08:22CB: A9 02 00     	lda	#$2
 10678 08:22CE: 82 D3 FE     	brl	L390
 10679                        ;}
 10680                        	.line	3334
 10681                        	.endblock	3334
 10682             00000008   L386	equ	8
 10683             00000009   L387	equ	9
 10684 08:22D1:              	ends
 10685                        	efunc
 10686                        	.endfunc	3334,9,8
 10687                        	.line	3334
 10688                        	data
 10689                        L370:
 10690 00:00A0: 63 68 65 63  	db	$63,$68,$65,$63,$6B,$5F,$66,$73,$3A,$00,
                    $63,$68,$65,$63,$6B
  Thu Dec  3 2020 22:25                                                Page 214


       00:00A4: 6B 5F 66 73 
       00:00A8: 3A 00 63 68 
       00:00AC: 65 63 6B 
 10691 00:00AF: 5F 66 73 3A  	db	$5F,$66,$73,$3A,$6C,$64,$5F,$77,$6F,$72,
                    $64,$28,$26,$66,$73
       00:00B3: 6C 64 5F 77 
       00:00B7: 6F 72 64 28 
       00:00BB: 26 66 73 
 10692 00:00BE: 2D 3E 77 69  	db	$2D,$3E,$77,$69,$6E,$5B,$42,$53,$5F,$35,
                    $35,$41,$41,$5D,$29
       00:00C2: 6E 5B 42 53 
       00:00C6: 5F 35 35 41 
       00:00CA: 41 5D 29 
 10693 00:00CD: 3A 00 EB 76  	db	$3A,$00,$FFFFFFEB,$76,$FFFFFF90,$45,$58,
                    $46,$41,$54,$20,$20,$20,$00,$63
       00:00D1: 90 45 58 46 
       00:00D5: 41 54 20 20 
       00:00D9: 20 00 63 
 10694 00:00DC: 68 65 63 6B  	db	$68,$65,$63,$6B,$5F,$66,$73,$3A,$42,$53,
                    $5F,$4A,$6D,$70,$42
       00:00E0: 5F 66 73 3A 
       00:00E4: 42 53 5F 4A 
       00:00E8: 6D 70 42 
 10695 00:00EB: 6F 6F 74 3A  	db	$6F,$6F,$74,$3A,$00,$46,$41,$54,$00,$46,
                    $41,$54,$33,$32,$00
       00:00EF: 00 46 41 54 
       00:00F3: 00 46 41 54 
       00:00F7: 33 32 00 
 10696 00:00FA:              	ends
 10697                        ;
 10698                        ;
 10699                        ;/* Find an FAT volume */
 10700                        ;/* (It supports only generic partitioning rules, 
                    MBR, GPT and SFD) */
 10701                        ;
 10702                        ;static UINT find_volume (	/* Returns BS st
                    atus found in the hosting drive */
 10703                        ;	FATFS* fs,		/* Filesystem object */
 10704                        ;	UINT part		/* Partition to fined = 
                    0:auto, 1..:forced */
 10705                        ;)
 10706                        ;{
 10707                        	.line	3340
 10708                        	.line	3344
 10709                        	FFDOS
 10710                        	func
 10711                        	.function	3344
 10712                        ~~find_volume:
 10713                        	longa	on
 10714                        	longi	on
 10715 08:22D1: 3B           	tsc
 10716 08:22D2: 38           	sec
 10717 08:22D3: E9 3C 00     	sbc	#L400
 10718 08:22D6: 1B           	tcs
 10719 08:22D7: 0B           	phd
 10720 08:22D8: 5B           	tcd
 10721             00000004   fs_0	set	4
 10722             00000008   part_0	set	8
  Thu Dec  3 2020 22:25                                                Page 215


 10723                        	.block	3344
 10724                        ;	UINT fmt, i;
 10725                        ;	DWORD mbr_pt[4];
 10726                        ;
 10727                        ;	PPARTITIONTABLE ppt[4];
 10728                        ;
 10729                        ;	k_debug_string( "find_volume...\r\n");
 10730             00000000   fmt_1	set	0
 10731             00000002   i_1	set	2
 10732             00000004   mbr_pt_1	set	4
 10733             00000014   ppt_1	set	20
 10734                        	.sym	fmt,0,16,1,16
 10735                        	.sym	i,2,16,1,16
 10736                        	.sym	mbr_pt,4,114,1,0,4
 10737                        	.sym	ppt,20,1130,1,32,50,4
 10738                        	.sym	fs,4,138,6,32,80
 10739                        	.sym	part,8,16,6,16
 10740                        	.line	3350
 10741 08:22D9: F4 xx xx     	pea	#^L399
 10742 08:22DC: F4 xx xx     	pea	#<L399
 10743 08:22DF: 22 xx xx xx  	jsl	~~k_debug_string
 10744                        ;
 10745                        ;	fmt = check_fs(fs, 0);				
                    /* Load sector 0 and check if it is an FAT VBR as SFD */
 10746                        	.line	3352
 10747 08:22E3: F4 00 00     	pea	#^$0
 10748 08:22E6: F4 00 00     	pea	#<$0
 10749 08:22E9: D4 42        	pei	<L400+fs_0+2
 10750 08:22EB: D4 40        	pei	<L400+fs_0
 10751 08:22ED: 22 5E 21 08  	jsl	~~check_fs
 10752 08:22F1: 85 19        	sta	<L401+fmt_1
 10753                        ;
 10754                        ;	k_debug_integer( "find_volume:fmt:",fmt);
 10755                        	.line	3354
 10756 08:22F3: D4 19        	pei	<L401+fmt_1
 10757 08:22F5: F4 xx xx     	pea	#^L399+17
 10758 08:22F8: F4 xx xx     	pea	#<L399+17
 10759 08:22FB: 22 xx xx xx  	jsl	~~k_debug_integer
 10760                        ;
 10761                        ;	if (fmt != 2 && (fmt >= 3 || part == 0))
 10762                        	.line	3356
 10763                        ;	{
 10764 08:22FF: A5 19        	lda	<L401+fmt_1
 10765 08:2301: C9 02 00     	cmp	#<$2
 10766 08:2304: D0 03        	bne	L403
 10767 08:2306: 82 25 00     	brl	L10178
 10768                        L403:
 10769 08:2309: A5 19        	lda	<L401+fmt_1
 10770 08:230B: C9 03 00     	cmp	#<$3
 10771 08:230E: 90 03        	bcc	L405
 10772 08:2310: 82 07 00     	brl	L404
 10773                        L405:
 10774 08:2313: A5 44        	lda	<L400+part_0
 10775 08:2315: F0 03        	beq	L406
 10776 08:2317: 82 14 00     	brl	L10178
 10777                        L406:
 10778                        L404:
 10779                        	.line	3357
  Thu Dec  3 2020 22:25                                                Page 216


 10780                        ;		return fmt;	/* Returns if it is a FA
                    T VBR as auto scan, not a BS or disk error */
 10781                        	.line	3358
 10782 08:231A: A5 19        	lda	<L401+fmt_1
 10783                        L407:
 10784 08:231C: A8           	tay
 10785 08:231D: A5 3E        	lda	<L400+2
 10786 08:231F: 85 44        	sta	<L400+2+6
 10787 08:2321: A5 3D        	lda	<L400+1
 10788 08:2323: 85 43        	sta	<L400+1+6
 10789 08:2325: 2B           	pld
 10790 08:2326: 3B           	tsc
 10791 08:2327: 18           	clc
 10792 08:2328: 69 42 00     	adc	#L400+6
 10793 08:232B: 1B           	tcs
 10794 08:232C: 98           	tya
 10795 08:232D: 6B           	rtl
 10796                        ;	}
 10797                        	.line	3359
 10798                        ;	/* Sector 0 is not an FAT VBR or forced partitio
                    n number wants a partition */
 10799                        ;
 10800                        ;#if FF_LBA64
 10801                        ;	if (fs->win[MBR_Table + PTE_System] == 0xEE) {	
                    /* GPT protective MBR? */
 10802                        ;		DWORD n_ent, v_ent, ofs;
 10803                        ;		QWORD pt_lba;
 10804                        ;
 10805                        ;		if (move_window(fs, 1) != FR_OK) return 
                    4;	/* Load GPT header sector (next to MBR) */
 10806                        ;		if (!test_gpt_header(fs->win)) return 3;
                    	/* Check if GPT header is valid */
 10807                        ;		n_ent = ld_dword(fs->win + GPTH_PtNum);	
                    	/* Number of entries */
 10808                        ;		pt_lba = ld_qword(fs->win + GPTH_PtOfs);
                    	/* Table location */
 10809                        ;		for (v_ent = i = 0; i < n_ent; i++) {	
                    	/* Find FAT partition */
 10810                        ;			if (move_window(fs, pt_lba + i *
                     SZ_GPTE / SS(fs)) != FR_OK) return 4;	/* PT sector */
 10811                        ;			ofs = i * SZ_GPTE % SS(fs);	
                    								
                    			/* Offset in the sector */
 10812                        ;			if (!mem_cmp(fs->win + ofs + GPT
                    E_PtGuid, GUID_MS_Basic, 16)) {	/* MS basic data partiti
                    on? */
 10813                        ;				v_ent++;
 10814                        ;				fmt = check_fs(fs, ld_qw
                    ord(fs->win + ofs + GPTE_FstLba));	/* Load VBR and check st
                    atus */
 10815                        ;				if (part == 0 && fmt <= 
                    1) return fmt;			/* Auto search (valid FA
                    T volume found first) */
 10816                        ;				if (part != 0 && v_ent =
                    = part) return fmt;		/* Forced partition order (regar
                    dless of it is valid or not) */
 10817                        ;			}
 10818                        ;		}
  Thu Dec  3 2020 22:25                                                Page 217


 10819                        ;		return 3;	/* Not found */
 10820                        ;	}
 10821                        ;#endif
 10822                        ;	if (FF_MULTI_PARTITION && part > 4) return 3;	
                    /* MBR has 4 partitions max */
 10823                        L10178:
 10824                        	.line	3384
 10825 08:232E: 82 10 00     	brl	L10179
 10826 08:2331: A9 04 00     	lda	#$4
 10827 08:2334: C5 44        	cmp	<L400+part_0
 10828 08:2336: 90 03        	bcc	L408
 10829 08:2338: 82 06 00     	brl	L10179
 10830                        L408:
 10831                        	.line	3384
 10832 08:233B: A9 03 00     	lda	#$3
 10833 08:233E: 82 DB FF     	brl	L407
 10834                        ;	for (i = 0; i < 4; i++)
 10835                        L10179:
 10836                        	.line	3385
 10837 08:2341: 64 1B        	stz	<L401+i_1
 10838                        L10182:
 10839                        ;	{		/* Load partition offset in the 
                    MBR */
 10840                        	.line	3386
 10841                        ;		//mbr_pt[i] = ld_dword(&(fs->win[ MBR_Ta
                    ble + i * SZ_PTE + PTE_StLba ]));
 10842                        ;
 10843                        ;		ppt[i] = (PPARTITIONTABLE)&(fs->win[ (UL
                    ONG)MBR_Table + ((ULONG)i * 0x10L)]);
 10844                        	.line	3389
 10845 08:2343: A5 1B        	lda	<L401+i_1
 10846 08:2345: 85 05        	sta	<R1
 10847 08:2347: 64 07        	stz	<R1+2
 10848 08:2349: D4 07        	pei	<R1+2
 10849 08:234B: D4 05        	pei	<R1
 10850 08:234D: A9 02 00     	lda	#$2
 10851                        	xref	~~~lasl
 10852 08:2350: 22 xx xx xx  	jsl	~~~lasl
 10853 08:2354: 85 01        	sta	<R0
 10854 08:2356: 86 03        	stx	<R0+2
 10855 08:2358: 18           	clc
 10856 08:2359: 7B           	tdc
 10857 08:235A: 69 2D 00     	adc	#<L401+ppt_1
 10858 08:235D: 85 09        	sta	<R2
 10859 08:235F: A9 00 00     	lda	#$0
 10860 08:2362: 85 0B        	sta	<R2+2
 10861 08:2364: 18           	clc
 10862 08:2365: A5 09        	lda	<R2
 10863 08:2367: 65 01        	adc	<R0
 10864 08:2369: 85 0D        	sta	<R3
 10865 08:236B: A5 0B        	lda	<R2+2
 10866 08:236D: 65 03        	adc	<R0+2
 10867 08:236F: 85 0F        	sta	<R3+2
 10868 08:2371: A5 1B        	lda	<L401+i_1
 10869 08:2373: 85 09        	sta	<R2
 10870 08:2375: 64 0B        	stz	<R2+2
 10871 08:2377: D4 0B        	pei	<R2+2
 10872 08:2379: D4 09        	pei	<R2
  Thu Dec  3 2020 22:25                                                Page 218


 10873 08:237B: A9 04 00     	lda	#$4
 10874                        	xref	~~~lasl
 10875 08:237E: 22 xx xx xx  	jsl	~~~lasl
 10876 08:2382: 85 01        	sta	<R0
 10877 08:2384: 86 03        	stx	<R0+2
 10878 08:2386: 18           	clc
 10879 08:2387: A9 ED 01     	lda	#$1ed
 10880 08:238A: 65 01        	adc	<R0
 10881 08:238C: 85 11        	sta	<17
 10882 08:238E: A9 00 00     	lda	#$0
 10883 08:2391: 65 03        	adc	<R0+2
 10884 08:2393: 85 13        	sta	<17+2
 10885 08:2395: 18           	clc
 10886 08:2396: A5 40        	lda	<L400+fs_0
 10887 08:2398: 65 11        	adc	<17
 10888 08:239A: 85 01        	sta	<R0
 10889 08:239C: A5 42        	lda	<L400+fs_0+2
 10890 08:239E: 65 13        	adc	<17+2
 10891 08:23A0: 85 03        	sta	<R0+2
 10892 08:23A2: A5 01        	lda	<R0
 10893 08:23A4: 87 0D        	sta	[<R3]
 10894 08:23A6: A5 03        	lda	<R0+2
 10895 08:23A8: A0 02 00     	ldy	#$2
 10896 08:23AB: 97 0D        	sta	[<R3],Y
 10897                        ;		k_debug_hex( "find_volume:ppt[i].partiti
                    on_type:",ppt[i]->partition_type);
 10898                        	.line	3390
 10899 08:23AD: A5 1B        	lda	<L401+i_1
 10900 08:23AF: 85 05        	sta	<R1
 10901 08:23B1: 64 07        	stz	<R1+2
 10902 08:23B3: D4 07        	pei	<R1+2
 10903 08:23B5: D4 05        	pei	<R1
 10904 08:23B7: A9 02 00     	lda	#$2
 10905                        	xref	~~~lasl
 10906 08:23BA: 22 xx xx xx  	jsl	~~~lasl
 10907 08:23BE: 85 01        	sta	<R0
 10908 08:23C0: 86 03        	stx	<R0+2
 10909 08:23C2: 18           	clc
 10910 08:23C3: 7B           	tdc
 10911 08:23C4: 69 2D 00     	adc	#<L401+ppt_1
 10912 08:23C7: 85 09        	sta	<R2
 10913 08:23C9: A9 00 00     	lda	#$0
 10914 08:23CC: 85 0B        	sta	<R2+2
 10915 08:23CE: 18           	clc
 10916 08:23CF: A5 09        	lda	<R2
 10917 08:23D1: 65 01        	adc	<R0
 10918 08:23D3: 85 0D        	sta	<R3
 10919 08:23D5: A5 0B        	lda	<R2+2
 10920 08:23D7: 65 03        	adc	<R0+2
 10921 08:23D9: 85 0F        	sta	<R3+2
 10922 08:23DB: A7 0D        	lda	[<R3]
 10923 08:23DD: 85 01        	sta	<R0
 10924 08:23DF: A0 02 00     	ldy	#$2
 10925 08:23E2: B7 0D        	lda	[<R3],Y
 10926 08:23E4: 85 03        	sta	<R0+2
 10927 08:23E6: A0 04 00     	ldy	#$4
 10928 08:23E9: B7 01        	lda	[<R0],Y
 10929 08:23EB: 29 FF 00     	and	#$ff
  Thu Dec  3 2020 22:25                                                Page 219


 10930 08:23EE: 48           	pha
 10931 08:23EF: F4 xx xx     	pea	#^L399+34
 10932 08:23F2: F4 xx xx     	pea	#<L399+34
 10933 08:23F5: 22 xx xx xx  	jsl	~~k_debug_hex
 10934                        ;		k_debug_long( "find_volume:ppt[i].start_
                    sector:",ppt[i]->start_sector);
 10935                        	.line	3391
 10936 08:23F9: A5 1B        	lda	<L401+i_1
 10937 08:23FB: 85 05        	sta	<R1
 10938 08:23FD: 64 07        	stz	<R1+2
 10939 08:23FF: D4 07        	pei	<R1+2
 10940 08:2401: D4 05        	pei	<R1
 10941 08:2403: A9 02 00     	lda	#$2
 10942                        	xref	~~~lasl
 10943 08:2406: 22 xx xx xx  	jsl	~~~lasl
 10944 08:240A: 85 01        	sta	<R0
 10945 08:240C: 86 03        	stx	<R0+2
 10946 08:240E: 18           	clc
 10947 08:240F: 7B           	tdc
 10948 08:2410: 69 2D 00     	adc	#<L401+ppt_1
 10949 08:2413: 85 09        	sta	<R2
 10950 08:2415: A9 00 00     	lda	#$0
 10951 08:2418: 85 0B        	sta	<R2+2
 10952 08:241A: 18           	clc
 10953 08:241B: A5 09        	lda	<R2
 10954 08:241D: 65 01        	adc	<R0
 10955 08:241F: 85 0D        	sta	<R3
 10956 08:2421: A5 0B        	lda	<R2+2
 10957 08:2423: 65 03        	adc	<R0+2
 10958 08:2425: 85 0F        	sta	<R3+2
 10959 08:2427: A7 0D        	lda	[<R3]
 10960 08:2429: 85 01        	sta	<R0
 10961 08:242B: A0 02 00     	ldy	#$2
 10962 08:242E: B7 0D        	lda	[<R3],Y
 10963 08:2430: 85 03        	sta	<R0+2
 10964 08:2432: A0 0A 00     	ldy	#$a
 10965 08:2435: B7 01        	lda	[<R0],Y
 10966 08:2437: 48           	pha
 10967 08:2438: A0 08 00     	ldy	#$8
 10968 08:243B: B7 01        	lda	[<R0],Y
 10969 08:243D: 48           	pha
 10970 08:243E: F4 xx xx     	pea	#^L399+69
 10971 08:2441: F4 xx xx     	pea	#<L399+69
 10972 08:2444: 22 xx xx xx  	jsl	~~k_debug_long
 10973                        ;
 10974                        ;
 10975                        ;		mbr_pt[i] = ld_dword(&(fs->win[ (ULONG)M
                    BR_Table + ((ULONG)i * 0x10L)]));
 10976                        	.line	3394
 10977 08:2448: A5 1B        	lda	<L401+i_1
 10978 08:244A: 85 05        	sta	<R1
 10979 08:244C: 64 07        	stz	<R1+2
 10980 08:244E: D4 07        	pei	<R1+2
 10981 08:2450: D4 05        	pei	<R1
 10982 08:2452: A9 02 00     	lda	#$2
 10983                        	xref	~~~lasl
 10984 08:2455: 22 xx xx xx  	jsl	~~~lasl
 10985 08:2459: 85 01        	sta	<R0
  Thu Dec  3 2020 22:25                                                Page 220


 10986 08:245B: 86 03        	stx	<R0+2
 10987 08:245D: 18           	clc
 10988 08:245E: 7B           	tdc
 10989 08:245F: 69 1D 00     	adc	#<L401+mbr_pt_1
 10990 08:2462: 85 09        	sta	<R2
 10991 08:2464: A9 00 00     	lda	#$0
 10992 08:2467: 85 0B        	sta	<R2+2
 10993 08:2469: 18           	clc
 10994 08:246A: A5 09        	lda	<R2
 10995 08:246C: 65 01        	adc	<R0
 10996 08:246E: 85 0D        	sta	<R3
 10997 08:2470: A5 0B        	lda	<R2+2
 10998 08:2472: 65 03        	adc	<R0+2
 10999 08:2474: 85 0F        	sta	<R3+2
 11000 08:2476: A5 1B        	lda	<L401+i_1
 11001 08:2478: 85 09        	sta	<R2
 11002 08:247A: 64 0B        	stz	<R2+2
 11003 08:247C: D4 0B        	pei	<R2+2
 11004 08:247E: D4 09        	pei	<R2
 11005 08:2480: A9 04 00     	lda	#$4
 11006                        	xref	~~~lasl
 11007 08:2483: 22 xx xx xx  	jsl	~~~lasl
 11008 08:2487: 85 01        	sta	<R0
 11009 08:2489: 86 03        	stx	<R0+2
 11010 08:248B: 18           	clc
 11011 08:248C: A9 ED 01     	lda	#$1ed
 11012 08:248F: 65 01        	adc	<R0
 11013 08:2491: 85 11        	sta	<17
 11014 08:2493: A9 00 00     	lda	#$0
 11015 08:2496: 65 03        	adc	<R0+2
 11016 08:2498: 85 13        	sta	<17+2
 11017 08:249A: 18           	clc
 11018 08:249B: A5 40        	lda	<L400+fs_0
 11019 08:249D: 65 11        	adc	<17
 11020 08:249F: 85 01        	sta	<R0
 11021 08:24A1: A5 42        	lda	<L400+fs_0+2
 11022 08:24A3: 65 13        	adc	<17+2
 11023 08:24A5: 85 03        	sta	<R0+2
 11024 08:24A7: D4 03        	pei	<R0+2
 11025 08:24A9: D4 01        	pei	<R0
 11026 08:24AB: 22 3B 00 08  	jsl	~~ld_dword
 11027 08:24AF: 85 15        	sta	<21
 11028 08:24B1: 86 17        	stx	<21+2
 11029 08:24B3: A5 15        	lda	<21
 11030 08:24B5: 87 0D        	sta	[<R3]
 11031 08:24B7: A5 17        	lda	<21+2
 11032 08:24B9: A0 02 00     	ldy	#$2
 11033 08:24BC: 97 0D        	sta	[<R3],Y
 11034                        ;		k_debug_long( "find_volume:mbr_pt[i]:",m
                    br_pt[i]);
 11035                        	.line	3395
 11036 08:24BE: A5 1B        	lda	<L401+i_1
 11037 08:24C0: 85 05        	sta	<R1
 11038 08:24C2: 64 07        	stz	<R1+2
 11039 08:24C4: D4 07        	pei	<R1+2
 11040 08:24C6: D4 05        	pei	<R1
 11041 08:24C8: A9 02 00     	lda	#$2
 11042                        	xref	~~~lasl
  Thu Dec  3 2020 22:25                                                Page 221


 11043 08:24CB: 22 xx xx xx  	jsl	~~~lasl
 11044 08:24CF: 85 01        	sta	<R0
 11045 08:24D1: 86 03        	stx	<R0+2
 11046 08:24D3: 18           	clc
 11047 08:24D4: 7B           	tdc
 11048 08:24D5: 69 1D 00     	adc	#<L401+mbr_pt_1
 11049 08:24D8: 85 09        	sta	<R2
 11050 08:24DA: A9 00 00     	lda	#$0
 11051 08:24DD: 85 0B        	sta	<R2+2
 11052 08:24DF: 18           	clc
 11053 08:24E0: A5 09        	lda	<R2
 11054 08:24E2: 65 01        	adc	<R0
 11055 08:24E4: 85 0D        	sta	<R3
 11056 08:24E6: A5 0B        	lda	<R2+2
 11057 08:24E8: 65 03        	adc	<R0+2
 11058 08:24EA: 85 0F        	sta	<R3+2
 11059 08:24EC: A0 02 00     	ldy	#$2
 11060 08:24EF: B7 0D        	lda	[<R3],Y
 11061 08:24F1: 48           	pha
 11062 08:24F2: A7 0D        	lda	[<R3]
 11063 08:24F4: 48           	pha
 11064 08:24F5: F4 xx xx     	pea	#^L399+102
 11065 08:24F8: F4 xx xx     	pea	#<L399+102
 11066 08:24FB: 22 xx xx xx  	jsl	~~k_debug_long
 11067                        ;	}
 11068                        	.line	3396
 11069                        L10180:
 11070 08:24FF: E6 1B        	inc	<L401+i_1
 11071 08:2501: A5 1B        	lda	<L401+i_1
 11072 08:2503: C9 04 00     	cmp	#<$4
 11073 08:2506: B0 03        	bcs	L409
 11074 08:2508: 82 38 FE     	brl	L10182
 11075                        L409:
 11076                        L10181:
 11077                        ;
 11078                        ;	i = part ? part - 1 : 0;		/* Table
                     index to find first */
 11079                        	.line	3398
 11080 08:250B: A5 44        	lda	<L400+part_0
 11081 08:250D: D0 03        	bne	L411
 11082 08:250F: 82 08 00     	brl	L410
 11083                        L411:
 11084 08:2512: 18           	clc
 11085 08:2513: A9 FF FF     	lda	#$ffff
 11086 08:2516: 65 44        	adc	<L400+part_0
 11087 08:2518: 80 03        	bra	L412
 11088                        L410:
 11089 08:251A: A9 00 00     	lda	#$0
 11090                        L412:
 11091 08:251D: 85 1B        	sta	<L401+i_1
 11092                        ;
 11093                        ;	do
 11094                        	.line	3400
 11095                        L10185:
 11096                        ;	{						
                    	/* Find an FAT volume */
 11097                        	.line	3401
 11098                        ;
  Thu Dec  3 2020 22:25                                                Page 222


 11099                        ;
 11100                        ;
 11101                        ;		//fmt = mbr_pt[i] ? check_fs(fs,  mbr_pt
                    [i]) : 3;	/* Check if the partition is FAT */
 11102                        ;		fmt = mbr_pt[i] ? check_fs(fs,  ppt[i]->
                    start_sector) : 3;	/* Check if the partition is FAT */
 11103                        	.line	3406
 11104 08:251F: A5 1B        	lda	<L401+i_1
 11105 08:2521: 85 05        	sta	<R1
 11106 08:2523: 64 07        	stz	<R1+2
 11107 08:2525: D4 07        	pei	<R1+2
 11108 08:2527: D4 05        	pei	<R1
 11109 08:2529: A9 02 00     	lda	#$2
 11110                        	xref	~~~lasl
 11111 08:252C: 22 xx xx xx  	jsl	~~~lasl
 11112 08:2530: 85 01        	sta	<R0
 11113 08:2532: 86 03        	stx	<R0+2
 11114 08:2534: 18           	clc
 11115 08:2535: 7B           	tdc
 11116 08:2536: 69 1D 00     	adc	#<L401+mbr_pt_1
 11117 08:2539: 85 09        	sta	<R2
 11118 08:253B: A9 00 00     	lda	#$0
 11119 08:253E: 85 0B        	sta	<R2+2
 11120 08:2540: 18           	clc
 11121 08:2541: A5 09        	lda	<R2
 11122 08:2543: 65 01        	adc	<R0
 11123 08:2545: 85 0D        	sta	<R3
 11124 08:2547: A5 0B        	lda	<R2+2
 11125 08:2549: 65 03        	adc	<R0+2
 11126 08:254B: 85 0F        	sta	<R3+2
 11127 08:254D: A7 0D        	lda	[<R3]
 11128 08:254F: A0 02 00     	ldy	#$2
 11129 08:2552: 17 0D        	ora	[<R3],Y
 11130 08:2554: D0 03        	bne	L414
 11131 08:2556: 82 4F 00     	brl	L413
 11132                        L414:
 11133 08:2559: A5 1B        	lda	<L401+i_1
 11134 08:255B: 85 09        	sta	<R2
 11135 08:255D: 64 0B        	stz	<R2+2
 11136 08:255F: D4 0B        	pei	<R2+2
 11137 08:2561: D4 09        	pei	<R2
 11138 08:2563: A9 02 00     	lda	#$2
 11139                        	xref	~~~lasl
 11140 08:2566: 22 xx xx xx  	jsl	~~~lasl
 11141 08:256A: 85 01        	sta	<R0
 11142 08:256C: 86 03        	stx	<R0+2
 11143 08:256E: 18           	clc
 11144 08:256F: 7B           	tdc
 11145 08:2570: 69 2D 00     	adc	#<L401+ppt_1
 11146 08:2573: 85 0D        	sta	<R3
 11147 08:2575: A9 00 00     	lda	#$0
 11148 08:2578: 85 0F        	sta	<R3+2
 11149 08:257A: 18           	clc
 11150 08:257B: A5 0D        	lda	<R3
 11151 08:257D: 65 01        	adc	<R0
 11152 08:257F: 85 11        	sta	<17
 11153 08:2581: A5 0F        	lda	<R3+2
 11154 08:2583: 65 03        	adc	<R0+2
  Thu Dec  3 2020 22:25                                                Page 223


 11155 08:2585: 85 13        	sta	<17+2
 11156 08:2587: A7 11        	lda	[<17]
 11157 08:2589: 85 01        	sta	<R0
 11158 08:258B: A0 02 00     	ldy	#$2
 11159 08:258E: B7 11        	lda	[<17],Y
 11160 08:2590: 85 03        	sta	<R0+2
 11161 08:2592: A0 0A 00     	ldy	#$a
 11162 08:2595: B7 01        	lda	[<R0],Y
 11163 08:2597: 48           	pha
 11164 08:2598: A0 08 00     	ldy	#$8
 11165 08:259B: B7 01        	lda	[<R0],Y
 11166 08:259D: 48           	pha
 11167 08:259E: D4 42        	pei	<L400+fs_0+2
 11168 08:25A0: D4 40        	pei	<L400+fs_0
 11169 08:25A2: 22 5E 21 08  	jsl	~~check_fs
 11170 08:25A6: 80 03        	bra	L415
 11171                        L413:
 11172 08:25A8: A9 03 00     	lda	#$3
 11173                        L415:
 11174 08:25AB: 85 19        	sta	<L401+fmt_1
 11175                        ;		k_debug_integer( "find_volume:part-fmt:"
                    ,fmt);
 11176                        	.line	3407
 11177 08:25AD: D4 19        	pei	<L401+fmt_1
 11178 08:25AF: F4 xx xx     	pea	#^L399+125
 11179 08:25B2: F4 xx xx     	pea	#<L399+125
 11180 08:25B5: 22 xx xx xx  	jsl	~~k_debug_integer
 11181                        ;	}
 11182                        	.line	3408
 11183                        ;	while (part == 0 && fmt >= 2 && ++i < 4);
 11184                        L10183:
 11185 08:25B9: A5 44        	lda	<L400+part_0
 11186 08:25BB: F0 03        	beq	L417
 11187 08:25BD: 82 16 00     	brl	L416
 11188                        L417:
 11189 08:25C0: A5 19        	lda	<L401+fmt_1
 11190 08:25C2: C9 02 00     	cmp	#<$2
 11191 08:25C5: B0 03        	bcs	L418
 11192 08:25C7: 82 0C 00     	brl	L416
 11193                        L418:
 11194 08:25CA: E6 1B        	inc	<L401+i_1
 11195 08:25CC: A5 1B        	lda	<L401+i_1
 11196 08:25CE: C9 04 00     	cmp	#<$4
 11197 08:25D1: B0 03        	bcs	L419
 11198 08:25D3: 82 49 FF     	brl	L10185
 11199                        L419:
 11200                        L416:
 11201                        L10184:
 11202                        ;
 11203                        ;	k_debug_integer( "find_volume:fmt2:",fmt);
 11204                        	.line	3411
 11205 08:25D6: D4 19        	pei	<L401+fmt_1
 11206 08:25D8: F4 xx xx     	pea	#^L399+147
 11207 08:25DB: F4 xx xx     	pea	#<L399+147
 11208 08:25DE: 22 xx xx xx  	jsl	~~k_debug_integer
 11209                        ;
 11210                        ;
 11211                        ;	return fmt;
  Thu Dec  3 2020 22:25                                                Page 224


 11212                        	.line	3414
 11213 08:25E2: A5 19        	lda	<L401+fmt_1
 11214 08:25E4: 82 35 FD     	brl	L407
 11215                        ;}
 11216                        	.line	3415
 11217                        	.endblock	3415
 11218             0000003C   L400	equ	60
 11219             00000019   L401	equ	25
 11220 08:25E7:              	ends
 11221                        	efunc
 11222                        	.endfunc	3415,25,60
 11223                        	.line	3415
 11224                        	data
 11225                        L399:
 11226 00:00FA: 66 69 6E 64  	db	$66,$69,$6E,$64,$5F,$76,$6F,$6C,$75,$6D,
                    $65,$2E,$2E,$2E,$0D
       00:00FE: 5F 76 6F 6C 
       00:0102: 75 6D 65 2E 
       00:0106: 2E 2E 0D 
 11227 00:0109: 0A 00 66 69  	db	$0A,$00,$66,$69,$6E,$64,$5F,$76,$6F,$6C,
                    $75,$6D,$65,$3A,$66
       00:010D: 6E 64 5F 76 
       00:0111: 6F 6C 75 6D 
       00:0115: 65 3A 66 
 11228 00:0118: 6D 74 3A 00  	db	$6D,$74,$3A,$00,$66,$69,$6E,$64,$5F,$76,
                    $6F,$6C,$75,$6D,$65
       00:011C: 66 69 6E 64 
       00:0120: 5F 76 6F 6C 
       00:0124: 75 6D 65 
 11229 00:0127: 3A 70 70 74  	db	$3A,$70,$70,$74,$5B,$69,$5D,$2E,$70,$61,
                    $72,$74,$69,$74,$69
       00:012B: 5B 69 5D 2E 
       00:012F: 70 61 72 74 
       00:0133: 69 74 69 
 11230 00:0136: 6F 6E 5F 74  	db	$6F,$6E,$5F,$74,$79,$70,$65,$3A,$00,$66,
                    $69,$6E,$64,$5F,$76
       00:013A: 79 70 65 3A 
       00:013E: 00 66 69 6E 
       00:0142: 64 5F 76 
 11231 00:0145: 6F 6C 75 6D  	db	$6F,$6C,$75,$6D,$65,$3A,$70,$70,$74,$5B,
                    $69,$5D,$2E,$73,$74
       00:0149: 65 3A 70 70 
       00:014D: 74 5B 69 5D 
       00:0151: 2E 73 74 
 11232 00:0154: 61 72 74 5F  	db	$61,$72,$74,$5F,$73,$65,$63,$74,$6F,$72,
                    $3A,$00,$66,$69,$6E
       00:0158: 73 65 63 74 
       00:015C: 6F 72 3A 00 
       00:0160: 66 69 6E 
 11233 00:0163: 64 5F 76 6F  	db	$64,$5F,$76,$6F,$6C,$75,$6D,$65,$3A,$6D,
                    $62,$72,$5F,$70,$74
       00:0167: 6C 75 6D 65 
       00:016B: 3A 6D 62 72 
       00:016F: 5F 70 74 
 11234 00:0172: 5B 69 5D 3A  	db	$5B,$69,$5D,$3A,$00,$66,$69,$6E,$64,$5F,
                    $76,$6F,$6C,$75,$6D
       00:0176: 00 66 69 6E 
       00:017A: 64 5F 76 6F 
  Thu Dec  3 2020 22:25                                                Page 225


       00:017E: 6C 75 6D 
 11235 00:0181: 65 3A 70 61  	db	$65,$3A,$70,$61,$72,$74,$2D,$66,$6D,$74,
                    $3A,$00,$66,$69,$6E
       00:0185: 72 74 2D 66 
       00:0189: 6D 74 3A 00 
       00:018D: 66 69 6E 
 11236 00:0190: 64 5F 76 6F  	db	$64,$5F,$76,$6F,$6C,$75,$6D,$65,$3A,$66,
                    $6D,$74,$32,$3A,$00
       00:0194: 6C 75 6D 65 
       00:0198: 3A 66 6D 74 
       00:019C: 32 3A 00 
 11237 00:019F:              	ends
 11238                        ;
 11239                        ;
 11240                        ;
 11241                        ;
 11242                        ;/*-----------------------------------------------
                    ------------------------*/
 11243                        ;/* Determine logical drive number and mount the v
                    olume if needed         */
 11244                        ;/*-----------------------------------------------
                    ------------------------*/
 11245                        ;
 11246                        ;static FRESULT mount_volume (	/* FR_OK(0): suc
                    cessful, !=0: an error occurred */
 11247                        ;	const TCHAR** path,			/* Point
                    er to pointer to the path name (drive number) */
 11248                        ;	FATFS** rfs,				/* Point
                    er to pointer to the found filesystem object */
 11249                        ;	BYTE mode					
                    /* !=0: Check write protection for write access */
 11250                        ;)
 11251                        ;{
 11252                        	.line	3424
 11253                        	.line	3429
 11254                        	FFDOS
 11255                        	func
 11256                        	.function	3429
 11257                        ~~mount_volume:
 11258                        	longa	on
 11259                        	longi	on
 11260 08:25E7: 3B           	tsc
 11261 08:25E8: 38           	sec
 11262 08:25E9: E9 33 00     	sbc	#L421
 11263 08:25EC: 1B           	tcs
 11264 08:25ED: 0B           	phd
 11265 08:25EE: 5B           	tcd
 11266             00000004   path_0	set	4
 11267             00000008   rfs_0	set	8
 11268             0000000C   mode_0	set	12
 11269                        	.block	3429
 11270                        ;	int vol;
 11271                        ;	DSTATUS stat;
 11272                        ;	LBA_t bsect;
 11273                        ;	DWORD tsect, sysect, fasize, nclst, szbfat;
 11274                        ;	WORD nrsv;
 11275                        ;	FATFS *fs;
 11276                        ;	UINT fmt;
  Thu Dec  3 2020 22:25                                                Page 226


 11277                        ;
 11278                        ;	k_debug_string( "mount_volume...\r\n");
 11279             00000000   vol_1	set	0
 11280             00000002   stat_1	set	2
 11281             00000003   bsect_1	set	3
 11282             00000007   tsect_1	set	7
 11283             0000000B   sysect_1	set	11
 11284             0000000F   fasize_1	set	15
 11285             00000013   nclst_1	set	19
 11286             00000017   szbfat_1	set	23
 11287             0000001B   nrsv_1	set	27
 11288             0000001D   fs_1	set	29
 11289             00000021   fmt_1	set	33
 11290                        	.sym	vol,0,5,1,16
 11291                        	.sym	stat,2,14,1,8
 11292                        	.sym	bsect,3,18,1,32
 11293                        	.sym	tsect,7,18,1,32
 11294                        	.sym	sysect,11,18,1,32
 11295                        	.sym	fasize,15,18,1,32
 11296                        	.sym	nclst,19,18,1,32
 11297                        	.sym	szbfat,23,18,1,32
 11298                        	.sym	nrsv,27,5,1,16
 11299                        	.sym	fs,29,138,1,32,80
 11300                        	.sym	fmt,33,16,1,16
 11301                        	.sym	path,4,1166,6,32
 11302                        	.sym	rfs,8,1162,6,32,80
 11303                        	.sym	mode,12,14,6,8
 11304                        	.line	3438
 11305 08:25EF: F4 xx xx     	pea	#^L420
 11306 08:25F2: F4 xx xx     	pea	#<L420
 11307 08:25F5: 22 xx xx xx  	jsl	~~k_debug_string
 11308                        ;
 11309                        ;	/* Get logical drive number */
 11310                        ;	*rfs = 0;
 11311                        	.line	3441
 11312 08:25F9: A9 00 00     	lda	#$0
 11313 08:25FC: 87 3B        	sta	[<L421+rfs_0]
 11314 08:25FE: A9 00 00     	lda	#$0
 11315 08:2601: A0 02 00     	ldy	#$2
 11316 08:2604: 97 3B        	sta	[<L421+rfs_0],Y
 11317                        ;	vol = get_ldnumber(path);
 11318                        	.line	3442
 11319 08:2606: D4 39        	pei	<L421+path_0+2
 11320 08:2608: D4 37        	pei	<L421+path_0
 11321 08:260A: 22 7B 20 08  	jsl	~~get_ldnumber
 11322 08:260E: 85 11        	sta	<L422+vol_1
 11323                        ;	if (vol < 0) return FR_INVALID_DRIVE;
 11324                        	.line	3443
 11325 08:2610: A5 11        	lda	<L422+vol_1
 11326 08:2612: 30 03        	bmi	L424
 11327 08:2614: 82 15 00     	brl	L10186
 11328                        L424:
 11329                        	.line	3443
 11330 08:2617: A9 0B 00     	lda	#$b
 11331                        L425:
 11332 08:261A: A8           	tay
 11333 08:261B: A5 35        	lda	<L421+2
 11334 08:261D: 85 3F        	sta	<L421+2+10
  Thu Dec  3 2020 22:25                                                Page 227


 11335 08:261F: A5 34        	lda	<L421+1
 11336 08:2621: 85 3E        	sta	<L421+1+10
 11337 08:2623: 2B           	pld
 11338 08:2624: 3B           	tsc
 11339 08:2625: 18           	clc
 11340 08:2626: 69 3D 00     	adc	#L421+10
 11341 08:2629: 1B           	tcs
 11342 08:262A: 98           	tya
 11343 08:262B: 6B           	rtl
 11344                        ;
 11345                        ;	/* Check if the filesystem object is valid or no
                    t */
 11346                        ;	fs = FatFs[vol];				
                    	/* Get pointer to the filesystem object */
 11347                        L10186:
 11348                        	.line	3446
 11349 08:262C: A5 11        	lda	<L422+vol_1
 11350 08:262E: 0A           	asl	A
 11351 08:262F: 0A           	asl	A
 11352 08:2630: 85 01        	sta	<R0
 11353 08:2632: 18           	clc
 11354 08:2633: A9 xx xx     	lda	#<~~FatFs
 11355 08:2636: 65 01        	adc	<R0
 11356 08:2638: 85 05        	sta	<R1
 11357 08:263A: B2 05        	lda	(<R1)
 11358 08:263C: 85 2E        	sta	<L422+fs_1
 11359 08:263E: A0 02 00     	ldy	#$2
 11360 08:2641: B1 05        	lda	(<R1),Y
 11361 08:2643: 85 30        	sta	<L422+fs_1+2
 11362                        ;	if (!fs) return FR_NOT_ENABLED;		/* Is th
                    e filesystem object available? */
 11363                        	.line	3447
 11364 08:2645: A5 2E        	lda	<L422+fs_1
 11365 08:2647: 05 30        	ora	<L422+fs_1+2
 11366 08:2649: F0 03        	beq	L426
 11367 08:264B: 82 06 00     	brl	L10187
 11368                        L426:
 11369                        	.line	3447
 11370 08:264E: A9 0C 00     	lda	#$c
 11371 08:2651: 82 C6 FF     	brl	L425
 11372                        ;#if FF_FS_REENTRANT
 11373                        ;	if (!lock_fs(fs)) return FR_TIMEOUT;	/* Lock 
                    the volume */
 11374                        ;#endif
 11375                        ;	*rfs = fs;					
                    		/* Return pointer to the filesystem object */
 11376                        L10187:
 11377                        	.line	3451
 11378 08:2654: A5 2E        	lda	<L422+fs_1
 11379 08:2656: 87 3B        	sta	[<L421+rfs_0]
 11380 08:2658: A5 30        	lda	<L422+fs_1+2
 11381 08:265A: A0 02 00     	ldy	#$2
 11382 08:265D: 97 3B        	sta	[<L421+rfs_0],Y
 11383                        ;
 11384                        ;	mode &= (BYTE)~FA_READ;				
                    /* Desired access mode, write access or not */
 11385                        	.line	3453
 11386 08:265F: E2 20        	sep	#$20
  Thu Dec  3 2020 22:25                                                Page 228


 11387                        	longa	off
 11388 08:2661: A9 01        	lda	#$1
 11389 08:2663: 14 3F        	trb	<L421+mode_0
 11390 08:2665: C2 20        	rep	#$20
 11391                        	longa	on
 11392                        ;	if (fs->fs_type != 0) {				
                    /* If the volume has been mounted */
 11393                        	.line	3454
 11394 08:2667: A7 2E        	lda	[<L422+fs_1]
 11395 08:2669: 29 FF 00     	and	#$ff
 11396 08:266C: D0 03        	bne	L427
 11397 08:266E: 82 40 00     	brl	L10188
 11398                        L427:
 11399                        	.line	3454
 11400                        ;		stat = disk_status(fs->pdrv);
 11401                        	.line	3455
 11402 08:2671: A0 01 00     	ldy	#$1
 11403 08:2674: B7 2E        	lda	[<L422+fs_1],Y
 11404 08:2676: 48           	pha
 11405 08:2677: 22 xx xx xx  	jsl	~~disk_status
 11406 08:267B: E2 20        	sep	#$20
 11407                        	longa	off
 11408 08:267D: 85 13        	sta	<L422+stat_1
 11409 08:267F: C2 20        	rep	#$20
 11410                        	longa	on
 11411                        ;		if (!(stat & STA_NOINIT)) {		
                    /* and the physical drive is kept initialized */
 11412                        	.line	3456
 11413 08:2681: E2 20        	sep	#$20
 11414                        	longa	off
 11415 08:2683: A5 13        	lda	<L422+stat_1
 11416 08:2685: 29 01        	and	#<$1
 11417 08:2687: C2 20        	rep	#$20
 11418                        	longa	on
 11419 08:2689: F0 03        	beq	L428
 11420 08:268B: 82 23 00     	brl	L10189
 11421                        L428:
 11422                        	.line	3456
 11423                        ;			if (!FF_FS_READONLY && mode && (
                    stat & STA_PROTECT)) {	/* Check write protection if nee
                    ded */
 11424                        	.line	3457
 11425 08:268E: A5 3F        	lda	<L421+mode_0
 11426 08:2690: 29 FF 00     	and	#$ff
 11427 08:2693: D0 03        	bne	L429
 11428 08:2695: 82 13 00     	brl	L10190
 11429                        L429:
 11430 08:2698: E2 20        	sep	#$20
 11431                        	longa	off
 11432 08:269A: A5 13        	lda	<L422+stat_1
 11433 08:269C: 29 04        	and	#<$4
 11434 08:269E: C2 20        	rep	#$20
 11435                        	longa	on
 11436 08:26A0: D0 03        	bne	L430
 11437 08:26A2: 82 06 00     	brl	L10190
 11438                        L430:
 11439                        	.line	3457
 11440                        ;				return FR_WRITE_PROTECTE
  Thu Dec  3 2020 22:25                                                Page 229


                    D;
 11441                        	.line	3458
 11442 08:26A5: A9 0A 00     	lda	#$a
 11443 08:26A8: 82 6F FF     	brl	L425
 11444                        ;			}
 11445                        	.line	3459
 11446                        ;			return FR_OK;			
                    	/* The filesystem object is already valid */
 11447                        L10190:
 11448                        	.line	3460
 11449 08:26AB: A9 00 00     	lda	#$0
 11450 08:26AE: 82 69 FF     	brl	L425
 11451                        ;		}
 11452                        	.line	3461
 11453                        ;	}
 11454                        L10189:
 11455                        	.line	3462
 11456                        ;
 11457                        ;	/* The filesystem object is not valid. */
 11458                        ;	/* Following code attempts to mount the volume. 
                    (find a FAT volume, analyze the BPB and initialize the files
                    ystem object) */
 11459                        ;
 11460                        ;	fs->fs_type = 0;				
                    	/* Clear the filesystem object */
 11461                        L10188:
 11462                        	.line	3467
 11463 08:26B1: E2 20        	sep	#$20
 11464                        	longa	off
 11465 08:26B3: A9 00        	lda	#$0
 11466 08:26B5: 87 2E        	sta	[<L422+fs_1]
 11467 08:26B7: C2 20        	rep	#$20
 11468                        	longa	on
 11469                        ;	fs->pdrv = LD2PD(vol);				
                    /* Volume hosting physical drive */
 11470                        	.line	3468
 11471 08:26B9: E2 20        	sep	#$20
 11472                        	longa	off
 11473 08:26BB: A5 11        	lda	<L422+vol_1
 11474 08:26BD: A0 01 00     	ldy	#$1
 11475 08:26C0: 97 2E        	sta	[<L422+fs_1],Y
 11476 08:26C2: C2 20        	rep	#$20
 11477                        	longa	on
 11478                        ;	stat = disk_initialize(fs->pdrv);	/* Initi
                    alize the physical drive */
 11479                        	.line	3469
 11480 08:26C4: A0 01 00     	ldy	#$1
 11481 08:26C7: B7 2E        	lda	[<L422+fs_1],Y
 11482 08:26C9: 48           	pha
 11483 08:26CA: 22 xx xx xx  	jsl	~~disk_initialize
 11484 08:26CE: E2 20        	sep	#$20
 11485                        	longa	off
 11486 08:26D0: 85 13        	sta	<L422+stat_1
 11487 08:26D2: C2 20        	rep	#$20
 11488                        	longa	on
 11489                        ;	if (stat & STA_NOINIT) { 			
                    /* Check if the initialization succeeded */
 11490                        	.line	3470
  Thu Dec  3 2020 22:25                                                Page 230


 11491 08:26D4: E2 20        	sep	#$20
 11492                        	longa	off
 11493 08:26D6: A5 13        	lda	<L422+stat_1
 11494 08:26D8: 29 01        	and	#<$1
 11495 08:26DA: C2 20        	rep	#$20
 11496                        	longa	on
 11497 08:26DC: D0 03        	bne	L431
 11498 08:26DE: 82 06 00     	brl	L10191
 11499                        L431:
 11500                        	.line	3470
 11501                        ;		return FR_NOT_READY;			
                    /* Failed to initialize due to no medium or hard error */
 11502                        	.line	3471
 11503 08:26E1: A9 03 00     	lda	#$3
 11504 08:26E4: 82 33 FF     	brl	L425
 11505                        ;	}
 11506                        	.line	3472
 11507                        ;	if (!FF_FS_READONLY && mode && (stat & STA_PROTE
                    CT)) { /* Check disk write protection if needed */
 11508                        L10191:
 11509                        	.line	3473
 11510 08:26E7: A5 3F        	lda	<L421+mode_0
 11511 08:26E9: 29 FF 00     	and	#$ff
 11512 08:26EC: D0 03        	bne	L432
 11513 08:26EE: 82 13 00     	brl	L10192
 11514                        L432:
 11515 08:26F1: E2 20        	sep	#$20
 11516                        	longa	off
 11517 08:26F3: A5 13        	lda	<L422+stat_1
 11518 08:26F5: 29 04        	and	#<$4
 11519 08:26F7: C2 20        	rep	#$20
 11520                        	longa	on
 11521 08:26F9: D0 03        	bne	L433
 11522 08:26FB: 82 06 00     	brl	L10192
 11523                        L433:
 11524                        	.line	3473
 11525                        ;		return FR_WRITE_PROTECTED;
 11526                        	.line	3474
 11527 08:26FE: A9 0A 00     	lda	#$a
 11528 08:2701: 82 16 FF     	brl	L425
 11529                        ;	}
 11530                        	.line	3475
 11531                        ;#if FF_MAX_SS != FF_MIN_SS			
                    	/* Get sector size (multiple sector size cfg only) */
 11532                        ;	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs
                    )) != RES_OK) return FR_DISK_ERR;
 11533                        ;	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || 
                    (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 11534                        ;#endif
 11535                        ;
 11536                        ;
 11537                        ;
 11538                        ;
 11539                        ;	/* Find an FAT volume on the drive */
 11540                        ;	fmt = find_volume(fs, LD2PT(vol));
 11541                        L10192:
 11542                        	.line	3485
 11543 08:2704: F4 00 00     	pea	#<$0
  Thu Dec  3 2020 22:25                                                Page 231


 11544 08:2707: D4 30        	pei	<L422+fs_1+2
 11545 08:2709: D4 2E        	pei	<L422+fs_1
 11546 08:270B: 22 D1 22 08  	jsl	~~find_volume
 11547 08:270F: 85 32        	sta	<L422+fmt_1
 11548                        ;
 11549                        ;	k_debug_integer( "mount_volume:fmt:",fmt);
 11550                        	.line	3487
 11551 08:2711: D4 32        	pei	<L422+fmt_1
 11552 08:2713: F4 xx xx     	pea	#^L420+18
 11553 08:2716: F4 xx xx     	pea	#<L420+18
 11554 08:2719: 22 xx xx xx  	jsl	~~k_debug_integer
 11555                        ;
 11556                        ;	if (fmt == 4) return FR_DISK_ERR;		
                    /* An error occured in the disk I/O layer */
 11557                        	.line	3489
 11558 08:271D: A5 32        	lda	<L422+fmt_1
 11559 08:271F: C9 04 00     	cmp	#<$4
 11560 08:2722: F0 03        	beq	L434
 11561 08:2724: 82 06 00     	brl	L10193
 11562                        L434:
 11563                        	.line	3489
 11564 08:2727: A9 01 00     	lda	#$1
 11565 08:272A: 82 ED FE     	brl	L425
 11566                        ;	//if (fmt >= 2) return FR_NO_FILESYSTEM;	
                    /* No FAT volume is found */
 11567                        ;	if (fmt == 2) return FR_NO_FILESYSTEM;	/* No FA
                    T volume is found */
 11568                        L10193:
 11569                        	.line	3491
 11570 08:272D: A5 32        	lda	<L422+fmt_1
 11571 08:272F: C9 02 00     	cmp	#<$2
 11572 08:2732: F0 03        	beq	L435
 11573 08:2734: 82 06 00     	brl	L10194
 11574                        L435:
 11575                        	.line	3491
 11576 08:2737: A9 0D 00     	lda	#$d
 11577 08:273A: 82 DD FE     	brl	L425
 11578                        ;	bsect = fs->winsect;				
                    	/* Volume location */
 11579                        L10194:
 11580                        	.line	3492
 11581 08:273D: A0 2B 00     	ldy	#$2b
 11582 08:2740: B7 2E        	lda	[<L422+fs_1],Y
 11583 08:2742: 85 14        	sta	<L422+bsect_1
 11584 08:2744: A0 2D 00     	ldy	#$2d
 11585 08:2747: B7 2E        	lda	[<L422+fs_1],Y
 11586 08:2749: 85 16        	sta	<L422+bsect_1+2
 11587                        ;
 11588                        ;	k_debug_long( "mount_volume:bsect:",bsect);
 11589                        	.line	3494
 11590 08:274B: D4 16        	pei	<L422+bsect_1+2
 11591 08:274D: D4 14        	pei	<L422+bsect_1
 11592 08:274F: F4 xx xx     	pea	#^L420+36
 11593 08:2752: F4 xx xx     	pea	#<L420+36
 11594 08:2755: 22 xx xx xx  	jsl	~~k_debug_long
 11595                        ;	/* An FAT volume is found (bsect). Following cod
                    e initializes the filesystem object */
 11596                        ;
  Thu Dec  3 2020 22:25                                                Page 232


 11597                        ;#if FF_FS_EXFAT
 11598                        ;	if (fmt == 1) {
 11599                        ;		QWORD maxlba;
 11600                        ;		DWORD so, cv, bcl, i;
 11601                        ;
 11602                        ;		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx 
                    + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 11603                        ;		if (i < BPB_ZeroedEx + 53) return FR_NO_
                    FILESYSTEM;
 11604                        ;
 11605                        ;		if (ld_word(FADDR(BPB_FSVerEx)) != 0x100
                    ) return FR_NO_FILESYSTEM;	/* Check exFAT version (must be 
                    version 1.0) */
 11606                        ;
 11607                        ;		if (1 << fs->win[BPB_BytsPerSecEx] != SS
                    (fs)) {	/* (BPB_BytsPerSecEx must be equal to the physic
                    al sector size) */
 11608                        ;			return FR_NO_FILESYSTEM;
 11609                        ;		}
 11610                        ;
 11611                        ;		maxlba = ld_qword(FADDR(BPB_TotSecEx)) +
                     bsect;	/* Last LBA + 1 of the volume */
 11612                        ;		if (!FF_LBA64 && maxlba >= 0x100000000) 
                    return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-b
                    it LBA) */
 11613                        ;
 11614                        ;		fs->fsize = ld_dword(fs->win[BPB_FatSzEx
                    ]);	/* Number of sectors per FAT */
 11615                        ;
 11616                        ;		fs->n_fats = fs->win[BPB_NumFATsEx];	
                    		/* Number of FATs */
 11617                        ;		if (fs->n_fats != 1) return FR_NO_FILESY
                    STEM;	/* (Supports only 1 FAT) */
 11618                        ;
 11619                        ;		fs->csize = 1 << fs->win[BPB_SecPerClusE
                    x];		/* Cluster size */
 11620                        ;		if (fs->csize == 0)	return FR_NO_FIL
                    ESYSTEM;	/* (Must be 1..32768) */
 11621                        ;
 11622                        ;		nclst = ld_dword(fs->win + BPB_NumClusEx
                    );		/* Number of clusters */
 11623                        ;		if (nclst > MAX_EXFAT) return FR_NO_FILE
                    SYSTEM;	/* (Too many clusters) */
 11624                        ;		fs->n_fatent = nclst + 2;
 11625                        ;
 11626                        ;		/* Boundaries and Limits */
 11627                        ;		fs->volbase = bsect;
 11628                        ;		fs->database = bsect + ld_dword(fs->win 
                    + BPB_DataOfsEx);
 11629                        ;		fs->fatbase = bsect + ld_dword(fs->win +
                     BPB_FatOfsEx);
 11630                        ;		if (maxlba < (QWORD)fs->database + nclst
                     * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size 
                    must not be smaller than the size requiered) */
 11631                        ;		fs->dirbase = ld_dword(fs->win + BPB_Roo
                    tClusEx);
 11632                        ;
 11633                        ;		/* Get bitmap location and check if it i
  Thu Dec  3 2020 22:25                                                Page 233


                    s contiguous (implementation assumption) */
 11634                        ;		so = i = 0;
 11635                        ;		for (;;) {	/* Find the bitmap entry
                     in the root directory (in only first cluster) */
 11636                        ;			if (i == 0) {
 11637                        ;				if (so >= fs->csize) ret
                    urn FR_NO_FILESYSTEM;	/* Not found? */
 11638                        ;				if (move_window(fs, clst
                    2sect(fs, (DWORD)fs->dirbase) + so) != FR_OK) return FR_DISK
                    _ERR;
 11639                        ;				so++;
 11640                        ;			}
 11641                        ;			if (fs->win[i] == ET_BITMAP) bre
                    ak;				/* Is it a bitmap entry? */
 11642                        ;			i = (i + SZDIRE) % SS(fs);	
                    /* Next entry */
 11643                        ;		}
 11644                        ;		bcl = ld_dword(fs->win + i + 20);	
                    				/* Bitmap cluster */
 11645                        ;		if (bcl < 2 || bcl >= fs->n_fatent) retu
                    rn FR_NO_FILESYSTEM;
 11646                        ;		fs->bitbase = fs->database + fs->csize *
                     (bcl - 2);	/* Bitmap sector */
 11647                        ;		for (;;) {	/* Check if bitmap is co
                    ntiguous */
 11648                        ;			if (move_window(fs, fs->fatbase 
                    + bcl / (SS(fs) / 4)) != FR_OK) return FR_DISK_ERR;
 11649                        ;			cv = ld_dword(fs->win + bcl % (S
                    S(fs) / 4) * 4);
 11650                        ;			if (cv == 0xFFFFFFFF) break;	
                    			/* Last link? */
 11651                        ;			if (cv != ++bcl) return FR_NO_FI
                    LESYSTEM;	/* Fragmented? */
 11652                        ;		}
 11653                        ;
 11654                        ;#if !FF_FS_READONLY
 11655                        ;		fs->last_clst = fs->free_clst = 0xFFFFFF
                    FF;		/* Initialize cluster allocation information */
 11656                        ;#endif
 11657                        ;		fmt = FS_EXFAT;			/* FAT s
                    ub-type */
 11658                        ;	} else
 11659                        ;#endif	/* FF_FS_EXFAT */
 11660                        ;	{
 11661                        	.line	3560
 11662                        ;
 11663                        ;		k_debug_pointer( "mount_volume:fs->win:"
                    ,fs->win);
 11664                        	.line	3562
 11665 08:2759: 18           	clc
 11666 08:275A: A9 2F 00     	lda	#$2f
 11667 08:275D: 65 2E        	adc	<L422+fs_1
 11668 08:275F: 85 01        	sta	<R0
 11669 08:2761: A9 00 00     	lda	#$0
 11670 08:2764: 65 30        	adc	<L422+fs_1+2
 11671 08:2766: 85 03        	sta	<R0+2
 11672 08:2768: D4 03        	pei	<R0+2
 11673 08:276A: D4 01        	pei	<R0
  Thu Dec  3 2020 22:25                                                Page 234


 11674 08:276C: F4 xx xx     	pea	#^L420+56
 11675 08:276F: F4 xx xx     	pea	#<L420+56
 11676 08:2772: 22 xx xx xx  	jsl	~~k_debug_pointer
 11677                        ;		//k_debug_long( "mount_volume:BPB_BytsPe
                    rSec:",(long)BPB_BytsPerSec);
 11678                        ;		k_debug_integer( "mount_volume:SS(fs):",
                    SS(fs));
 11679                        	.line	3564
 11680 08:2776: F4 00 02     	pea	#<$200
 11681 08:2779: F4 xx xx     	pea	#^L420+78
 11682 08:277C: F4 xx xx     	pea	#<L420+78
 11683 08:277F: 22 xx xx xx  	jsl	~~k_debug_integer
 11684                        ;		k_debug_integer( "mount_volume:fs->win +
                     BPB_BytsPerSec:",ld_word(FADDR(BPB_BytsPerSec)) );
 11685                        	.line	3565
 11686 08:2783: 18           	clc
 11687 08:2784: A9 3A 00     	lda	#$3a
 11688 08:2787: 65 2E        	adc	<L422+fs_1
 11689 08:2789: 85 01        	sta	<R0
 11690 08:278B: A9 00 00     	lda	#$0
 11691 08:278E: 65 30        	adc	<L422+fs_1+2
 11692 08:2790: 85 03        	sta	<R0+2
 11693 08:2792: D4 03        	pei	<R0+2
 11694 08:2794: D4 01        	pei	<R0
 11695 08:2796: 22 00 00 08  	jsl	~~ld_word
 11696 08:279A: 48           	pha
 11697 08:279B: F4 xx xx     	pea	#^L420+99
 11698 08:279E: F4 xx xx     	pea	#<L420+99
 11699 08:27A1: 22 xx xx xx  	jsl	~~k_debug_integer
 11700                        ;
 11701                        ;
 11702                        ;
 11703                        ;
 11704                        ;		if (ld_word(FADDR(BPB_BytsPerSec)) != SS
                    (fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must 
                    be equal to the physical sector size) */
 11705                        	.line	3570
 11706 08:27A5: 18           	clc
 11707 08:27A6: A9 3A 00     	lda	#$3a
 11708 08:27A9: 65 2E        	adc	<L422+fs_1
 11709 08:27AB: 85 01        	sta	<R0
 11710 08:27AD: A9 00 00     	lda	#$0
 11711 08:27B0: 65 30        	adc	<L422+fs_1+2
 11712 08:27B2: 85 03        	sta	<R0+2
 11713 08:27B4: D4 03        	pei	<R0+2
 11714 08:27B6: D4 01        	pei	<R0
 11715 08:27B8: 22 00 00 08  	jsl	~~ld_word
 11716 08:27BC: 85 05        	sta	<R1
 11717 08:27BE: A5 05        	lda	<R1
 11718 08:27C0: C9 00 02     	cmp	#<$200
 11719 08:27C3: D0 03        	bne	L436
 11720 08:27C5: 82 06 00     	brl	L10195
 11721                        L436:
 11722                        	.line	3570
 11723 08:27C8: A9 0D 00     	lda	#$d
 11724 08:27CB: 82 4C FE     	brl	L425
 11725                        ;
 11726                        ;		fasize = ld_word(FADDR(BPB_FATSz16));	
  Thu Dec  3 2020 22:25                                                Page 235


                    	/* Number of sectors per FAT */
 11727                        L10195:
 11728                        	.line	3572
 11729 08:27CE: 18           	clc
 11730 08:27CF: A9 45 00     	lda	#$45
 11731 08:27D2: 65 2E        	adc	<L422+fs_1
 11732 08:27D4: 85 01        	sta	<R0
 11733 08:27D6: A9 00 00     	lda	#$0
 11734 08:27D9: 65 30        	adc	<L422+fs_1+2
 11735 08:27DB: 85 03        	sta	<R0+2
 11736 08:27DD: D4 03        	pei	<R0+2
 11737 08:27DF: D4 01        	pei	<R0
 11738 08:27E1: 22 00 00 08  	jsl	~~ld_word
 11739 08:27E5: 85 05        	sta	<R1
 11740 08:27E7: A0 00 00     	ldy	#$0
 11741 08:27EA: A5 05        	lda	<R1
 11742 08:27EC: 10 01        	bpl	L437
 11743 08:27EE: 88           	dey
 11744                        L437:
 11745 08:27EF: 85 20        	sta	<L422+fasize_1
 11746 08:27F1: 84 22        	sty	<L422+fasize_1+2
 11747                        ;		if (fasize == 0) fasize = ld_dword(&(fs-
                    >win[BPB_FATSz32]));
 11748                        	.line	3573
 11749 08:27F3: A5 20        	lda	<L422+fasize_1
 11750 08:27F5: 05 22        	ora	<L422+fasize_1+2
 11751 08:27F7: F0 03        	beq	L438
 11752 08:27F9: 82 1B 00     	brl	L10196
 11753                        L438:
 11754                        	.line	3573
 11755 08:27FC: 18           	clc
 11756 08:27FD: A9 53 00     	lda	#$53
 11757 08:2800: 65 2E        	adc	<L422+fs_1
 11758 08:2802: 85 01        	sta	<R0
 11759 08:2804: A9 00 00     	lda	#$0
 11760 08:2807: 65 30        	adc	<L422+fs_1+2
 11761 08:2809: 85 03        	sta	<R0+2
 11762 08:280B: D4 03        	pei	<R0+2
 11763 08:280D: D4 01        	pei	<R0
 11764 08:280F: 22 3B 00 08  	jsl	~~ld_dword
 11765 08:2813: 85 20        	sta	<L422+fasize_1
 11766 08:2815: 86 22        	stx	<L422+fasize_1+2
 11767                        ;		fs->fsize = fasize;
 11768                        L10196:
 11769                        	.line	3574
 11770 08:2817: A5 20        	lda	<L422+fasize_1
 11771 08:2819: A0 17 00     	ldy	#$17
 11772 08:281C: 97 2E        	sta	[<L422+fs_1],Y
 11773 08:281E: A5 22        	lda	<L422+fasize_1+2
 11774 08:2820: A0 19 00     	ldy	#$19
 11775 08:2823: 97 2E        	sta	[<L422+fs_1],Y
 11776                        ;
 11777                        ;		fs->n_fats = fs->win[BPB_NumFATs];	
                    			/* Number of FATs */
 11778                        	.line	3576
 11779 08:2825: E2 20        	sep	#$20
 11780                        	longa	off
 11781 08:2827: A0 3F 00     	ldy	#$3f
  Thu Dec  3 2020 22:25                                                Page 236


 11782 08:282A: B7 2E        	lda	[<L422+fs_1],Y
 11783 08:282C: A0 02 00     	ldy	#$2
 11784 08:282F: 97 2E        	sta	[<L422+fs_1],Y
 11785 08:2831: C2 20        	rep	#$20
 11786                        	longa	on
 11787                        ;
 11788                        ;
 11789                        ;		k_debug_long( "mount_volume:n_fats:",fs-
                    >n_fats);
 11790                        	.line	3579
 11791 08:2833: A0 02 00     	ldy	#$2
 11792 08:2836: B7 2E        	lda	[<L422+fs_1],Y
 11793 08:2838: 29 FF 00     	and	#$ff
 11794 08:283B: 48           	pha
 11795 08:283C: F4 xx xx     	pea	#^L420+138
 11796 08:283F: F4 xx xx     	pea	#<L420+138
 11797 08:2842: 22 xx xx xx  	jsl	~~k_debug_long
 11798                        ;
 11799                        ;
 11800                        ;		if (fs->n_fats != 1 && fs->n_fats != 2) 
                    return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 11801                        	.line	3582
 11802 08:2846: E2 20        	sep	#$20
 11803                        	longa	off
 11804 08:2848: A0 02 00     	ldy	#$2
 11805 08:284B: B7 2E        	lda	[<L422+fs_1],Y
 11806 08:284D: C9 01        	cmp	#<$1
 11807 08:284F: C2 20        	rep	#$20
 11808                        	longa	on
 11809 08:2851: D0 03        	bne	L439
 11810 08:2853: 82 16 00     	brl	L10197
 11811                        L439:
 11812 08:2856: E2 20        	sep	#$20
 11813                        	longa	off
 11814 08:2858: A0 02 00     	ldy	#$2
 11815 08:285B: B7 2E        	lda	[<L422+fs_1],Y
 11816 08:285D: C9 02        	cmp	#<$2
 11817 08:285F: C2 20        	rep	#$20
 11818                        	longa	on
 11819 08:2861: D0 03        	bne	L440
 11820 08:2863: 82 06 00     	brl	L10197
 11821                        L440:
 11822                        	.line	3582
 11823 08:2866: A9 0D 00     	lda	#$d
 11824 08:2869: 82 AE FD     	brl	L425
 11825                        ;		fasize *= fs->n_fats;			
                    				/* Number of sectors for FAT are
                    a */
 11826                        L10197:
 11827                        	.line	3583
 11828 08:286C: A0 02 00     	ldy	#$2
 11829 08:286F: B7 2E        	lda	[<L422+fs_1],Y
 11830 08:2871: 29 FF 00     	and	#$ff
 11831 08:2874: 85 01        	sta	<R0
 11832 08:2876: 64 03        	stz	<R0+2
 11833 08:2878: D4 22        	pei	<L422+fasize_1+2
 11834 08:287A: D4 20        	pei	<L422+fasize_1
 11835 08:287C: D4 03        	pei	<R0+2
  Thu Dec  3 2020 22:25                                                Page 237


 11836 08:287E: D4 01        	pei	<R0
 11837                        	xref	~~~lmul
 11838 08:2880: 22 xx xx xx  	jsl	~~~lmul
 11839 08:2884: 85 20        	sta	<L422+fasize_1
 11840 08:2886: 86 22        	stx	<L422+fasize_1+2
 11841                        ;
 11842                        ;		fs->csize = fs->win[BPB_SecPerClus];	
                    		/* Cluster size */
 11843                        	.line	3585
 11844 08:2888: A0 3C 00     	ldy	#$3c
 11845 08:288B: B7 2E        	lda	[<L422+fs_1],Y
 11846 08:288D: 29 FF 00     	and	#$ff
 11847 08:2890: A0 09 00     	ldy	#$9
 11848 08:2893: 97 2E        	sta	[<L422+fs_1],Y
 11849                        ;		if (fs->csize == 0 || (fs->csize & (fs->
                    csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be powe
                    r of 2) */
 11850                        	.line	3586
 11851 08:2895: A0 09 00     	ldy	#$9
 11852 08:2898: B7 2E        	lda	[<L422+fs_1],Y
 11853 08:289A: D0 03        	bne	L442
 11854 08:289C: 82 17 00     	brl	L441
 11855                        L442:
 11856 08:289F: 18           	clc
 11857 08:28A0: A9 FF FF     	lda	#$ffff
 11858 08:28A3: A0 09 00     	ldy	#$9
 11859 08:28A6: 77 2E        	adc	[<L422+fs_1],Y
 11860 08:28A8: 85 01        	sta	<R0
 11861 08:28AA: A0 09 00     	ldy	#$9
 11862 08:28AD: B7 2E        	lda	[<L422+fs_1],Y
 11863 08:28AF: 25 01        	and	<R0
 11864 08:28B1: D0 03        	bne	L443
 11865 08:28B3: 82 06 00     	brl	L10198
 11866                        L443:
 11867                        L441:
 11868                        	.line	3586
 11869 08:28B6: A9 0D 00     	lda	#$d
 11870 08:28B9: 82 5E FD     	brl	L425
 11871                        ;
 11872                        ;		fs->n_rootdir = ld_word(FADDR(BPB_RootEn
                    tCnt));	/* Number of root directory entries */
 11873                        L10198:
 11874                        	.line	3588
 11875 08:28BC: 18           	clc
 11876 08:28BD: A9 40 00     	lda	#$40
 11877 08:28C0: 65 2E        	adc	<L422+fs_1
 11878 08:28C2: 85 01        	sta	<R0
 11879 08:28C4: A9 00 00     	lda	#$0
 11880 08:28C7: 65 30        	adc	<L422+fs_1+2
 11881 08:28C9: 85 03        	sta	<R0+2
 11882 08:28CB: D4 03        	pei	<R0+2
 11883 08:28CD: D4 01        	pei	<R0
 11884 08:28CF: 22 00 00 08  	jsl	~~ld_word
 11885 08:28D3: A0 07 00     	ldy	#$7
 11886 08:28D6: 97 2E        	sta	[<L422+fs_1],Y
 11887                        ;		if (fs->n_rootdir % (SS(fs) / SZDIRE)) r
                    eturn FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 11888                        	.line	3589
  Thu Dec  3 2020 22:25                                                Page 238


 11889 08:28D8: A0 07 00     	ldy	#$7
 11890 08:28DB: B7 2E        	lda	[<L422+fs_1],Y
 11891 08:28DD: 29 0F 00     	and	#<$f
 11892 08:28E0: D0 03        	bne	L444
 11893 08:28E2: 82 06 00     	brl	L10199
 11894                        L444:
 11895                        	.line	3589
 11896 08:28E5: A9 0D 00     	lda	#$d
 11897 08:28E8: 82 2F FD     	brl	L425
 11898                        ;
 11899                        ;		tsect = ld_word(FADDR(BPB_TotSec16));	
                    	/* Number of sectors on the volume */
 11900                        L10199:
 11901                        	.line	3591
 11902 08:28EB: 18           	clc
 11903 08:28EC: A9 42 00     	lda	#$42
 11904 08:28EF: 65 2E        	adc	<L422+fs_1
 11905 08:28F1: 85 01        	sta	<R0
 11906 08:28F3: A9 00 00     	lda	#$0
 11907 08:28F6: 65 30        	adc	<L422+fs_1+2
 11908 08:28F8: 85 03        	sta	<R0+2
 11909 08:28FA: D4 03        	pei	<R0+2
 11910 08:28FC: D4 01        	pei	<R0
 11911 08:28FE: 22 00 00 08  	jsl	~~ld_word
 11912 08:2902: 85 05        	sta	<R1
 11913 08:2904: A0 00 00     	ldy	#$0
 11914 08:2907: A5 05        	lda	<R1
 11915 08:2909: 10 01        	bpl	L445
 11916 08:290B: 88           	dey
 11917                        L445:
 11918 08:290C: 85 18        	sta	<L422+tsect_1
 11919 08:290E: 84 1A        	sty	<L422+tsect_1+2
 11920                        ;		if (tsect == 0) tsect = ld_dword(fs->win
                     + BPB_TotSec32);
 11921                        	.line	3592
 11922 08:2910: A5 18        	lda	<L422+tsect_1
 11923 08:2912: 05 1A        	ora	<L422+tsect_1+2
 11924 08:2914: F0 03        	beq	L446
 11925 08:2916: 82 1B 00     	brl	L10200
 11926                        L446:
 11927                        	.line	3592
 11928 08:2919: 18           	clc
 11929 08:291A: A9 4F 00     	lda	#$4f
 11930 08:291D: 65 2E        	adc	<L422+fs_1
 11931 08:291F: 85 01        	sta	<R0
 11932 08:2921: A9 00 00     	lda	#$0
 11933 08:2924: 65 30        	adc	<L422+fs_1+2
 11934 08:2926: 85 03        	sta	<R0+2
 11935 08:2928: D4 03        	pei	<R0+2
 11936 08:292A: D4 01        	pei	<R0
 11937 08:292C: 22 3B 00 08  	jsl	~~ld_dword
 11938 08:2930: 85 18        	sta	<L422+tsect_1
 11939 08:2932: 86 1A        	stx	<L422+tsect_1+2
 11940                        ;
 11941                        ;		nrsv = ld_word(FADDR(BPB_RsvdSecCnt));	
                    	/* Number of reserved sectors */
 11942                        L10200:
 11943                        	.line	3594
  Thu Dec  3 2020 22:25                                                Page 239


 11944 08:2934: 18           	clc
 11945 08:2935: A9 3D 00     	lda	#$3d
 11946 08:2938: 65 2E        	adc	<L422+fs_1
 11947 08:293A: 85 01        	sta	<R0
 11948 08:293C: A9 00 00     	lda	#$0
 11949 08:293F: 65 30        	adc	<L422+fs_1+2
 11950 08:2941: 85 03        	sta	<R0+2
 11951 08:2943: D4 03        	pei	<R0+2
 11952 08:2945: D4 01        	pei	<R0
 11953 08:2947: 22 00 00 08  	jsl	~~ld_word
 11954 08:294B: 85 2C        	sta	<L422+nrsv_1
 11955                        ;		if (nrsv == 0) return FR_NO_FILESYSTEM;	
                    		/* (Must not be 0) */
 11956                        	.line	3595
 11957 08:294D: A5 2C        	lda	<L422+nrsv_1
 11958 08:294F: F0 03        	beq	L447
 11959 08:2951: 82 06 00     	brl	L10201
 11960                        L447:
 11961                        	.line	3595
 11962 08:2954: A9 0D 00     	lda	#$d
 11963 08:2957: 82 C0 FC     	brl	L425
 11964                        ;
 11965                        ;		/* Determine the FAT sub type */
 11966                        ;		sysect = nrsv + fasize + fs->n_rootdir /
                     (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 11967                        L10201:
 11968                        	.line	3598
 11969 08:295A: A0 07 00     	ldy	#$7
 11970 08:295D: B7 2E        	lda	[<L422+fs_1],Y
 11971 08:295F: 4A           	lsr	A
 11972 08:2960: 4A           	lsr	A
 11973 08:2961: 4A           	lsr	A
 11974 08:2962: 4A           	lsr	A
 11975 08:2963: 85 01        	sta	<R0
 11976 08:2965: A5 01        	lda	<R0
 11977 08:2967: 85 01        	sta	<R0
 11978 08:2969: 64 03        	stz	<R0+2
 11979 08:296B: A0 00 00     	ldy	#$0
 11980 08:296E: A5 2C        	lda	<L422+nrsv_1
 11981 08:2970: 10 01        	bpl	L448
 11982 08:2972: 88           	dey
 11983                        L448:
 11984 08:2973: 85 05        	sta	<R1
 11985 08:2975: 84 07        	sty	<R1+2
 11986 08:2977: 18           	clc
 11987 08:2978: A5 05        	lda	<R1
 11988 08:297A: 65 01        	adc	<R0
 11989 08:297C: 85 09        	sta	<R2
 11990 08:297E: A5 07        	lda	<R1+2
 11991 08:2980: 65 03        	adc	<R0+2
 11992 08:2982: 85 0B        	sta	<R2+2
 11993 08:2984: 18           	clc
 11994 08:2985: A5 09        	lda	<R2
 11995 08:2987: 65 20        	adc	<L422+fasize_1
 11996 08:2989: 85 1C        	sta	<L422+sysect_1
 11997 08:298B: A5 0B        	lda	<R2+2
 11998 08:298D: 65 22        	adc	<L422+fasize_1+2
 11999 08:298F: 85 1E        	sta	<L422+sysect_1+2
  Thu Dec  3 2020 22:25                                                Page 240


 12000                        ;		if (tsect < sysect) return FR_NO_FILESYS
                    TEM;	/* (Invalid volume size) */
 12001                        	.line	3599
 12002 08:2991: A5 18        	lda	<L422+tsect_1
 12003 08:2993: C5 1C        	cmp	<L422+sysect_1
 12004 08:2995: A5 1A        	lda	<L422+tsect_1+2
 12005 08:2997: E5 1E        	sbc	<L422+sysect_1+2
 12006 08:2999: 90 03        	bcc	L449
 12007 08:299B: 82 06 00     	brl	L10202
 12008                        L449:
 12009                        	.line	3599
 12010 08:299E: A9 0D 00     	lda	#$d
 12011 08:29A1: 82 76 FC     	brl	L425
 12012                        ;		nclst = (tsect - sysect) / fs->csize;	
                    		/* Number of clusters */
 12013                        L10202:
 12014                        	.line	3600
 12015 08:29A4: A0 00 00     	ldy	#$0
 12016 08:29A7: 5A           	phy
 12017 08:29A8: A0 09 00     	ldy	#$9
 12018 08:29AB: B7 2E        	lda	[<L422+fs_1],Y
 12019 08:29AD: 7A           	ply
 12020 08:29AE: 2A           	rol	A
 12021 08:29AF: 6A           	ror	A
 12022 08:29B0: 10 01        	bpl	L450
 12023 08:29B2: 88           	dey
 12024                        L450:
 12025 08:29B3: 85 01        	sta	<R0
 12026 08:29B5: 84 03        	sty	<R0+2
 12027 08:29B7: 38           	sec
 12028 08:29B8: A5 18        	lda	<L422+tsect_1
 12029 08:29BA: E5 1C        	sbc	<L422+sysect_1
 12030 08:29BC: 85 05        	sta	<R1
 12031 08:29BE: A5 1A        	lda	<L422+tsect_1+2
 12032 08:29C0: E5 1E        	sbc	<L422+sysect_1+2
 12033 08:29C2: 85 07        	sta	<R1+2
 12034 08:29C4: D4 03        	pei	<R0+2
 12035 08:29C6: D4 01        	pei	<R0
 12036 08:29C8: D4 07        	pei	<R1+2
 12037 08:29CA: D4 05        	pei	<R1
 12038                        	xref	~~~ludv
 12039 08:29CC: 22 xx xx xx  	jsl	~~~ludv
 12040 08:29D0: 85 24        	sta	<L422+nclst_1
 12041 08:29D2: 86 26        	stx	<L422+nclst_1+2
 12042                        ;		if (nclst == 0) return FR_NO_FILESYSTEM;
                    		/* (Invalid volume size) */
 12043                        	.line	3601
 12044 08:29D4: A5 24        	lda	<L422+nclst_1
 12045 08:29D6: 05 26        	ora	<L422+nclst_1+2
 12046 08:29D8: F0 03        	beq	L451
 12047 08:29DA: 82 06 00     	brl	L10203
 12048                        L451:
 12049                        	.line	3601
 12050 08:29DD: A9 0D 00     	lda	#$d
 12051 08:29E0: 82 37 FC     	brl	L425
 12052                        ;		fmt = 0;
 12053                        L10203:
 12054                        	.line	3602
  Thu Dec  3 2020 22:25                                                Page 241


 12055 08:29E3: 64 32        	stz	<L422+fmt_1
 12056                        ;		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 12057                        	.line	3603
 12058 08:29E5: A9 F5 FF     	lda	#$fff5
 12059 08:29E8: C5 24        	cmp	<L422+nclst_1
 12060 08:29EA: A9 FF 0F     	lda	#$fff
 12061 08:29ED: E5 26        	sbc	<L422+nclst_1+2
 12062 08:29EF: B0 03        	bcs	L452
 12063 08:29F1: 82 05 00     	brl	L10204
 12064                        L452:
 12065                        	.line	3603
 12066 08:29F4: A9 03 00     	lda	#$3
 12067 08:29F7: 85 32        	sta	<L422+fmt_1
 12068                        ;		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 12069                        L10204:
 12070                        	.line	3604
 12071 08:29F9: A9 F5 FF     	lda	#$fff5
 12072 08:29FC: C5 24        	cmp	<L422+nclst_1
 12073 08:29FE: A9 00 00     	lda	#$0
 12074 08:2A01: E5 26        	sbc	<L422+nclst_1+2
 12075 08:2A03: B0 03        	bcs	L453
 12076 08:2A05: 82 05 00     	brl	L10205
 12077                        L453:
 12078                        	.line	3604
 12079 08:2A08: A9 02 00     	lda	#$2
 12080 08:2A0B: 85 32        	sta	<L422+fmt_1
 12081                        ;		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 12082                        L10205:
 12083                        	.line	3605
 12084 08:2A0D: A9 F5 0F     	lda	#$ff5
 12085 08:2A10: C5 24        	cmp	<L422+nclst_1
 12086 08:2A12: A9 00 00     	lda	#$0
 12087 08:2A15: E5 26        	sbc	<L422+nclst_1+2
 12088 08:2A17: B0 03        	bcs	L454
 12089 08:2A19: 82 05 00     	brl	L10206
 12090                        L454:
 12091                        	.line	3605
 12092 08:2A1C: A9 01 00     	lda	#$1
 12093 08:2A1F: 85 32        	sta	<L422+fmt_1
 12094                        ;		if (fmt == 0) return FR_NO_FILESYSTEM;
 12095                        L10206:
 12096                        	.line	3606
 12097 08:2A21: A5 32        	lda	<L422+fmt_1
 12098 08:2A23: F0 03        	beq	L455
 12099 08:2A25: 82 06 00     	brl	L10207
 12100                        L455:
 12101                        	.line	3606
 12102 08:2A28: A9 0D 00     	lda	#$d
 12103 08:2A2B: 82 EC FB     	brl	L425
 12104                        ;
 12105                        ;		/* Boundaries and Limits */
 12106                        ;		fs->n_fatent = nclst + 2;		
                    				/* Number of FAT entries */
 12107                        L10207:
 12108                        	.line	3609
 12109 08:2A2E: 18           	clc
 12110 08:2A2F: A9 02 00     	lda	#$2
 12111 08:2A32: 65 24        	adc	<L422+nclst_1
  Thu Dec  3 2020 22:25                                                Page 242


 12112 08:2A34: 85 01        	sta	<R0
 12113 08:2A36: A9 00 00     	lda	#$0
 12114 08:2A39: 65 26        	adc	<L422+nclst_1+2
 12115 08:2A3B: 85 03        	sta	<R0+2
 12116 08:2A3D: A5 01        	lda	<R0
 12117 08:2A3F: A0 13 00     	ldy	#$13
 12118 08:2A42: 97 2E        	sta	[<L422+fs_1],Y
 12119 08:2A44: A5 03        	lda	<R0+2
 12120 08:2A46: A0 15 00     	ldy	#$15
 12121 08:2A49: 97 2E        	sta	[<L422+fs_1],Y
 12122                        ;		fs->volbase = bsect;			
                    				/* Volume start sector */
 12123                        	.line	3610
 12124 08:2A4B: A5 14        	lda	<L422+bsect_1
 12125 08:2A4D: A0 1B 00     	ldy	#$1b
 12126 08:2A50: 97 2E        	sta	[<L422+fs_1],Y
 12127 08:2A52: A5 16        	lda	<L422+bsect_1+2
 12128 08:2A54: A0 1D 00     	ldy	#$1d
 12129 08:2A57: 97 2E        	sta	[<L422+fs_1],Y
 12130                        ;		fs->fatbase = bsect + nrsv; 		
                    			/* FAT start sector */
 12131                        	.line	3611
 12132 08:2A59: A0 00 00     	ldy	#$0
 12133 08:2A5C: A5 2C        	lda	<L422+nrsv_1
 12134 08:2A5E: 10 01        	bpl	L456
 12135 08:2A60: 88           	dey
 12136                        L456:
 12137 08:2A61: 85 01        	sta	<R0
 12138 08:2A63: 84 03        	sty	<R0+2
 12139 08:2A65: 18           	clc
 12140 08:2A66: A5 01        	lda	<R0
 12141 08:2A68: 65 14        	adc	<L422+bsect_1
 12142 08:2A6A: 85 05        	sta	<R1
 12143 08:2A6C: A5 03        	lda	<R0+2
 12144 08:2A6E: 65 16        	adc	<L422+bsect_1+2
 12145 08:2A70: 85 07        	sta	<R1+2
 12146 08:2A72: A5 05        	lda	<R1
 12147 08:2A74: A0 1F 00     	ldy	#$1f
 12148 08:2A77: 97 2E        	sta	[<L422+fs_1],Y
 12149 08:2A79: A5 07        	lda	<R1+2
 12150 08:2A7B: A0 21 00     	ldy	#$21
 12151 08:2A7E: 97 2E        	sta	[<L422+fs_1],Y
 12152                        ;		fs->database = bsect + sysect;		
                    			/* Data start sector */
 12153                        	.line	3612
 12154 08:2A80: 18           	clc
 12155 08:2A81: A5 14        	lda	<L422+bsect_1
 12156 08:2A83: 65 1C        	adc	<L422+sysect_1
 12157 08:2A85: 85 01        	sta	<R0
 12158 08:2A87: A5 16        	lda	<L422+bsect_1+2
 12159 08:2A89: 65 1E        	adc	<L422+sysect_1+2
 12160 08:2A8B: 85 03        	sta	<R0+2
 12161 08:2A8D: A5 01        	lda	<R0
 12162 08:2A8F: A0 27 00     	ldy	#$27
 12163 08:2A92: 97 2E        	sta	[<L422+fs_1],Y
 12164 08:2A94: A5 03        	lda	<R0+2
 12165 08:2A96: A0 29 00     	ldy	#$29
 12166 08:2A99: 97 2E        	sta	[<L422+fs_1],Y
  Thu Dec  3 2020 22:25                                                Page 243


 12167                        ;		if (fmt == FS_FAT32) {
 12168                        	.line	3613
 12169 08:2A9B: A5 32        	lda	<L422+fmt_1
 12170 08:2A9D: C9 03 00     	cmp	#<$3
 12171 08:2AA0: F0 03        	beq	L457
 12172 08:2AA2: 82 76 00     	brl	L10208
 12173                        L457:
 12174                        	.line	3613
 12175                        ;			if (ld_word(FADDR(BPB_FSVer32)) 
                    != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revisi
                    on 0.0) */
 12176                        	.line	3614
 12177 08:2AA5: 18           	clc
 12178 08:2AA6: A9 59 00     	lda	#$59
 12179 08:2AA9: 65 2E        	adc	<L422+fs_1
 12180 08:2AAB: 85 01        	sta	<R0
 12181 08:2AAD: A9 00 00     	lda	#$0
 12182 08:2AB0: 65 30        	adc	<L422+fs_1+2
 12183 08:2AB2: 85 03        	sta	<R0+2
 12184 08:2AB4: D4 03        	pei	<R0+2
 12185 08:2AB6: D4 01        	pei	<R0
 12186 08:2AB8: 22 00 00 08  	jsl	~~ld_word
 12187 08:2ABC: AA           	tax
 12188 08:2ABD: D0 03        	bne	L458
 12189 08:2ABF: 82 06 00     	brl	L10209
 12190                        L458:
 12191                        	.line	3614
 12192 08:2AC2: A9 0D 00     	lda	#$d
 12193 08:2AC5: 82 52 FB     	brl	L425
 12194                        ;			if (fs->n_rootdir != 0) return F
                    R_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 12195                        L10209:
 12196                        	.line	3615
 12197 08:2AC8: A0 07 00     	ldy	#$7
 12198 08:2ACB: B7 2E        	lda	[<L422+fs_1],Y
 12199 08:2ACD: D0 03        	bne	L459
 12200 08:2ACF: 82 06 00     	brl	L10210
 12201                        L459:
 12202                        	.line	3615
 12203 08:2AD2: A9 0D 00     	lda	#$d
 12204 08:2AD5: 82 42 FB     	brl	L425
 12205                        ;			fs->dirbase = ld_dword(fs->win +
                     BPB_RootClus32);	/* Root directory start cluster */
 12206                        L10210:
 12207                        	.line	3616
 12208 08:2AD8: 18           	clc
 12209 08:2AD9: A9 5B 00     	lda	#$5b
 12210 08:2ADC: 65 2E        	adc	<L422+fs_1
 12211 08:2ADE: 85 01        	sta	<R0
 12212 08:2AE0: A9 00 00     	lda	#$0
 12213 08:2AE3: 65 30        	adc	<L422+fs_1+2
 12214 08:2AE5: 85 03        	sta	<R0+2
 12215 08:2AE7: D4 03        	pei	<R0+2
 12216 08:2AE9: D4 01        	pei	<R0
 12217 08:2AEB: 22 3B 00 08  	jsl	~~ld_dword
 12218 08:2AEF: 85 05        	sta	<R1
 12219 08:2AF1: 86 07        	stx	<R1+2
 12220 08:2AF3: A5 05        	lda	<R1
  Thu Dec  3 2020 22:25                                                Page 244


 12221 08:2AF5: A0 23 00     	ldy	#$23
 12222 08:2AF8: 97 2E        	sta	[<L422+fs_1],Y
 12223 08:2AFA: A5 07        	lda	<R1+2
 12224 08:2AFC: A0 25 00     	ldy	#$25
 12225 08:2AFF: 97 2E        	sta	[<L422+fs_1],Y
 12226                        ;			szbfat = fs->n_fatent * 4;	
                    				/* (Needed FAT size) */
 12227                        	.line	3617
 12228 08:2B01: A0 15 00     	ldy	#$15
 12229 08:2B04: B7 2E        	lda	[<L422+fs_1],Y
 12230 08:2B06: 48           	pha
 12231 08:2B07: A0 13 00     	ldy	#$13
 12232 08:2B0A: B7 2E        	lda	[<L422+fs_1],Y
 12233 08:2B0C: 48           	pha
 12234 08:2B0D: A9 02 00     	lda	#$2
 12235                        	xref	~~~lasl
 12236 08:2B10: 22 xx xx xx  	jsl	~~~lasl
 12237 08:2B14: 85 28        	sta	<L422+szbfat_1
 12238 08:2B16: 86 2A        	stx	<L422+szbfat_1+2
 12239                        ;		} else {
 12240                        	.line	3618
 12241 08:2B18: 82 AA 00     	brl	L10211
 12242                        L10208:
 12243                        	.line	3618
 12244                        ;			if (fs->n_rootdir == 0)	return F
                    R_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 12245                        	.line	3619
 12246 08:2B1B: A0 07 00     	ldy	#$7
 12247 08:2B1E: B7 2E        	lda	[<L422+fs_1],Y
 12248 08:2B20: F0 03        	beq	L460
 12249 08:2B22: 82 06 00     	brl	L10212
 12250                        L460:
 12251                        	.line	3619
 12252 08:2B25: A9 0D 00     	lda	#$d
 12253 08:2B28: 82 EF FA     	brl	L425
 12254                        ;			fs->dirbase = fs->fatbase + fasi
                    ze;			/* Root directory start sector */
 12255                        L10212:
 12256                        	.line	3620
 12257 08:2B2B: 18           	clc
 12258 08:2B2C: A0 1F 00     	ldy	#$1f
 12259 08:2B2F: B7 2E        	lda	[<L422+fs_1],Y
 12260 08:2B31: 65 20        	adc	<L422+fasize_1
 12261 08:2B33: 85 01        	sta	<R0
 12262 08:2B35: A0 21 00     	ldy	#$21
 12263 08:2B38: B7 2E        	lda	[<L422+fs_1],Y
 12264 08:2B3A: 65 22        	adc	<L422+fasize_1+2
 12265 08:2B3C: 85 03        	sta	<R0+2
 12266 08:2B3E: A5 01        	lda	<R0
 12267 08:2B40: A0 23 00     	ldy	#$23
 12268 08:2B43: 97 2E        	sta	[<L422+fs_1],Y
 12269 08:2B45: A5 03        	lda	<R0+2
 12270 08:2B47: A0 25 00     	ldy	#$25
 12271 08:2B4A: 97 2E        	sta	[<L422+fs_1],Y
 12272                        ;			szbfat = (fmt == FS_FAT16) ?	
                    			/* (Needed FAT size) */
 12273                        	.line	3621
 12274                        ;				fs->n_fatent * 2 : fs->n
  Thu Dec  3 2020 22:25                                                Page 245


                    _fatent * 3 / 2 + (fs->n_fatent & 1);
 12275 08:2B4C: A5 32        	lda	<L422+fmt_1
 12276 08:2B4E: C9 02 00     	cmp	#<$2
 12277 08:2B51: F0 03        	beq	L462
 12278 08:2B53: 82 1D 00     	brl	L461
 12279                        L462:
 12280 08:2B56: A0 15 00     	ldy	#$15
 12281 08:2B59: B7 2E        	lda	[<L422+fs_1],Y
 12282 08:2B5B: 48           	pha
 12283 08:2B5C: A0 13 00     	ldy	#$13
 12284 08:2B5F: B7 2E        	lda	[<L422+fs_1],Y
 12285 08:2B61: 48           	pha
 12286 08:2B62: A9 01 00     	lda	#$1
 12287                        	xref	~~~lasl
 12288 08:2B65: 22 xx xx xx  	jsl	~~~lasl
 12289 08:2B69: 85 01        	sta	<R0
 12290 08:2B6B: 86 03        	stx	<R0+2
 12291 08:2B6D: A6 03        	ldx	<R0+2
 12292 08:2B6F: A5 01        	lda	<R0
 12293 08:2B71: 80 46        	bra	L463
 12294                        L461:
 12295 08:2B73: A0 13 00     	ldy	#$13
 12296 08:2B76: B7 2E        	lda	[<L422+fs_1],Y
 12297 08:2B78: 29 01 00     	and	#<$1
 12298 08:2B7B: 85 01        	sta	<R0
 12299 08:2B7D: 64 03        	stz	<R0+2
 12300 08:2B7F: F4 00 00     	pea	#^$3
 12301 08:2B82: F4 03 00     	pea	#<$3
 12302 08:2B85: A0 15 00     	ldy	#$15
 12303 08:2B88: B7 2E        	lda	[<L422+fs_1],Y
 12304 08:2B8A: 48           	pha
 12305 08:2B8B: A0 13 00     	ldy	#$13
 12306 08:2B8E: B7 2E        	lda	[<L422+fs_1],Y
 12307 08:2B90: 48           	pha
 12308                        	xref	~~~lmul
 12309 08:2B91: 22 xx xx xx  	jsl	~~~lmul
 12310 08:2B95: 85 09        	sta	<R2
 12311 08:2B97: 86 0B        	stx	<R2+2
 12312 08:2B99: D4 0B        	pei	<R2+2
 12313 08:2B9B: D4 09        	pei	<R2
 12314 08:2B9D: A9 01 00     	lda	#$1
 12315                        	xref	~~~llsr
 12316 08:2BA0: 22 xx xx xx  	jsl	~~~llsr
 12317 08:2BA4: 85 05        	sta	<R1
 12318 08:2BA6: 86 07        	stx	<R1+2
 12319 08:2BA8: 18           	clc
 12320 08:2BA9: A5 05        	lda	<R1
 12321 08:2BAB: 65 01        	adc	<R0
 12322 08:2BAD: 85 0D        	sta	<R3
 12323 08:2BAF: A5 07        	lda	<R1+2
 12324 08:2BB1: 65 03        	adc	<R0+2
 12325 08:2BB3: 85 0F        	sta	<R3+2
 12326 08:2BB5: A6 0F        	ldx	<R3+2
 12327 08:2BB7: A5 0D        	lda	<R3
 12328                        L463:
 12329 08:2BB9: 85 01        	sta	<R0
 12330 08:2BBB: 86 03        	stx	<R0+2
 12331 08:2BBD: A5 01        	lda	<R0
  Thu Dec  3 2020 22:25                                                Page 246


 12332 08:2BBF: 85 28        	sta	<L422+szbfat_1
 12333 08:2BC1: A5 03        	lda	<R0+2
 12334 08:2BC3: 85 2A        	sta	<L422+szbfat_1+2
 12335                        ;		}
 12336                        	.line	3623
 12337                        L10211:
 12338                        ;		if (fs->fsize < (szbfat + (SS(fs) - 1)) 
                    / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not b
                    e less than the size needed) */
 12339                        	.line	3624
 12340 08:2BC5: 18           	clc
 12341 08:2BC6: A9 FF 01     	lda	#$1ff
 12342 08:2BC9: 65 28        	adc	<L422+szbfat_1
 12343 08:2BCB: 85 05        	sta	<R1
 12344 08:2BCD: A9 00 00     	lda	#$0
 12345 08:2BD0: 65 2A        	adc	<L422+szbfat_1+2
 12346 08:2BD2: 85 07        	sta	<R1+2
 12347 08:2BD4: D4 07        	pei	<R1+2
 12348 08:2BD6: D4 05        	pei	<R1
 12349 08:2BD8: A9 09 00     	lda	#$9
 12350                        	xref	~~~llsr
 12351 08:2BDB: 22 xx xx xx  	jsl	~~~llsr
 12352 08:2BDF: 85 01        	sta	<R0
 12353 08:2BE1: 86 03        	stx	<R0+2
 12354 08:2BE3: A0 17 00     	ldy	#$17
 12355 08:2BE6: B7 2E        	lda	[<L422+fs_1],Y
 12356 08:2BE8: C5 01        	cmp	<R0
 12357 08:2BEA: A0 19 00     	ldy	#$19
 12358 08:2BED: B7 2E        	lda	[<L422+fs_1],Y
 12359 08:2BEF: E5 03        	sbc	<R0+2
 12360 08:2BF1: 90 03        	bcc	L464
 12361 08:2BF3: 82 06 00     	brl	L10213
 12362                        L464:
 12363                        	.line	3624
 12364 08:2BF6: A9 0D 00     	lda	#$d
 12365 08:2BF9: 82 1E FA     	brl	L425
 12366                        ;
 12367                        ;#if !FF_FS_READONLY
 12368                        ;		/* Get FSInfo if available */
 12369                        ;		fs->last_clst = fs->free_clst = 0xFFFFFF
                    FF;		/* Initialize cluster allocation information */
 12370                        L10213:
 12371                        	.line	3628
 12372 08:2BFC: A9 FF FF     	lda	#$ffff
 12373 08:2BFF: A0 0F 00     	ldy	#$f
 12374 08:2C02: 97 2E        	sta	[<L422+fs_1],Y
 12375 08:2C04: A9 FF FF     	lda	#$ffff
 12376 08:2C07: A0 11 00     	ldy	#$11
 12377 08:2C0A: 97 2E        	sta	[<L422+fs_1],Y
 12378 08:2C0C: A9 FF FF     	lda	#$ffff
 12379 08:2C0F: A0 0B 00     	ldy	#$b
 12380 08:2C12: 97 2E        	sta	[<L422+fs_1],Y
 12381 08:2C14: A9 FF FF     	lda	#$ffff
 12382 08:2C17: A0 0D 00     	ldy	#$d
 12383 08:2C1A: 97 2E        	sta	[<L422+fs_1],Y
 12384                        ;		fs->fsi_flag = 0x80;
 12385                        	.line	3629
 12386 08:2C1C: E2 20        	sep	#$20
  Thu Dec  3 2020 22:25                                                Page 247


 12387                        	longa	off
 12388 08:2C1E: A9 80        	lda	#$80
 12389 08:2C20: A0 04 00     	ldy	#$4
 12390 08:2C23: 97 2E        	sta	[<L422+fs_1],Y
 12391 08:2C25: C2 20        	rep	#$20
 12392                        	longa	on
 12393                        ;#if (FF_FS_NOFSINFO & 3) != 3
 12394                        ;		if (fmt == FS_FAT32			
                    	/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 12395                        	.line	3631
 12396                        ;			&& ld_word(fs->win + BPB_FSInfo3
                    2) == 1
 12397                        ;			&& move_window(fs, bsect + 1) ==
                     FR_OK)
 12398                        ;		{
 12399 08:2C27: A5 32        	lda	<L422+fmt_1
 12400 08:2C29: C9 03 00     	cmp	#<$3
 12401 08:2C2C: F0 03        	beq	L465
 12402 08:2C2E: 82 1C 01     	brl	L10214
 12403                        L465:
 12404 08:2C31: 18           	clc
 12405 08:2C32: A9 5F 00     	lda	#$5f
 12406 08:2C35: 65 2E        	adc	<L422+fs_1
 12407 08:2C37: 85 01        	sta	<R0
 12408 08:2C39: A9 00 00     	lda	#$0
 12409 08:2C3C: 65 30        	adc	<L422+fs_1+2
 12410 08:2C3E: 85 03        	sta	<R0+2
 12411 08:2C40: D4 03        	pei	<R0+2
 12412 08:2C42: D4 01        	pei	<R0
 12413 08:2C44: 22 00 00 08  	jsl	~~ld_word
 12414 08:2C48: 85 05        	sta	<R1
 12415 08:2C4A: A5 05        	lda	<R1
 12416 08:2C4C: C9 01 00     	cmp	#<$1
 12417 08:2C4F: F0 03        	beq	L466
 12418 08:2C51: 82 F9 00     	brl	L10214
 12419                        L466:
 12420 08:2C54: 18           	clc
 12421 08:2C55: A9 01 00     	lda	#$1
 12422 08:2C58: 65 14        	adc	<L422+bsect_1
 12423 08:2C5A: 85 05        	sta	<R1
 12424 08:2C5C: A9 00 00     	lda	#$0
 12425 08:2C5F: 65 16        	adc	<L422+bsect_1+2
 12426 08:2C61: 85 07        	sta	<R1+2
 12427 08:2C63: D4 07        	pei	<R1+2
 12428 08:2C65: D4 05        	pei	<R1
 12429 08:2C67: D4 30        	pei	<L422+fs_1+2
 12430 08:2C69: D4 2E        	pei	<L422+fs_1
 12431 08:2C6B: 22 FA 03 08  	jsl	~~move_window
 12432 08:2C6F: AA           	tax
 12433 08:2C70: F0 03        	beq	L467
 12434 08:2C72: 82 D8 00     	brl	L10214
 12435                        L467:
 12436                        	.line	3634
 12437                        ;			fs->fsi_flag = 0;
 12438                        	.line	3635
 12439 08:2C75: E2 20        	sep	#$20
 12440                        	longa	off
 12441 08:2C77: A9 00        	lda	#$0
  Thu Dec  3 2020 22:25                                                Page 248


 12442 08:2C79: A0 04 00     	ldy	#$4
 12443 08:2C7C: 97 2E        	sta	[<L422+fs_1],Y
 12444 08:2C7E: C2 20        	rep	#$20
 12445                        	longa	on
 12446                        ;			if (ld_word(fs->win + BS_55AA) =
                    = 0xAA55	/* Load FSInfo data if available */
 12447                        	.line	3636
 12448                        ;				&& ld_dword(fs->win + FS
                    I_LeadSig) == 0x41615252
 12449                        ;				&& ld_dword(fs->win + FS
                    I_StrucSig) == 0x61417272)
 12450                        ;			{
 12451 08:2C80: 18           	clc
 12452 08:2C81: A9 2D 02     	lda	#$22d
 12453 08:2C84: 65 2E        	adc	<L422+fs_1
 12454 08:2C86: 85 01        	sta	<R0
 12455 08:2C88: A9 00 00     	lda	#$0
 12456 08:2C8B: 65 30        	adc	<L422+fs_1+2
 12457 08:2C8D: 85 03        	sta	<R0+2
 12458 08:2C8F: D4 03        	pei	<R0+2
 12459 08:2C91: D4 01        	pei	<R0
 12460 08:2C93: 22 00 00 08  	jsl	~~ld_word
 12461 08:2C97: 85 05        	sta	<R1
 12462 08:2C99: A5 05        	lda	<R1
 12463 08:2C9B: C9 55 AA     	cmp	#<$aa55
 12464 08:2C9E: F0 03        	beq	L468
 12465 08:2CA0: 82 AA 00     	brl	L10215
 12466                        L468:
 12467 08:2CA3: 18           	clc
 12468 08:2CA4: A9 2F 00     	lda	#$2f
 12469 08:2CA7: 65 2E        	adc	<L422+fs_1
 12470 08:2CA9: 85 05        	sta	<R1
 12471 08:2CAB: A9 00 00     	lda	#$0
 12472 08:2CAE: 65 30        	adc	<L422+fs_1+2
 12473 08:2CB0: 85 07        	sta	<R1+2
 12474 08:2CB2: D4 07        	pei	<R1+2
 12475 08:2CB4: D4 05        	pei	<R1
 12476 08:2CB6: 22 3B 00 08  	jsl	~~ld_dword
 12477 08:2CBA: 85 09        	sta	<R2
 12478 08:2CBC: 86 0B        	stx	<R2+2
 12479 08:2CBE: A5 09        	lda	<R2
 12480 08:2CC0: C9 52 52     	cmp	#<$41615252
 12481 08:2CC3: D0 05        	bne	L469
 12482 08:2CC5: A5 0B        	lda	<R2+2
 12483 08:2CC7: C9 61 41     	cmp	#^$41615252
 12484                        L469:
 12485 08:2CCA: F0 03        	beq	L470
 12486 08:2CCC: 82 7E 00     	brl	L10215
 12487                        L470:
 12488 08:2CCF: 18           	clc
 12489 08:2CD0: A9 13 02     	lda	#$213
 12490 08:2CD3: 65 2E        	adc	<L422+fs_1
 12491 08:2CD5: 85 09        	sta	<R2
 12492 08:2CD7: A9 00 00     	lda	#$0
 12493 08:2CDA: 65 30        	adc	<L422+fs_1+2
 12494 08:2CDC: 85 0B        	sta	<R2+2
 12495 08:2CDE: D4 0B        	pei	<R2+2
 12496 08:2CE0: D4 09        	pei	<R2
  Thu Dec  3 2020 22:25                                                Page 249


 12497 08:2CE2: 22 3B 00 08  	jsl	~~ld_dword
 12498 08:2CE6: 85 0D        	sta	<R3
 12499 08:2CE8: 86 0F        	stx	<R3+2
 12500 08:2CEA: A5 0D        	lda	<R3
 12501 08:2CEC: C9 72 72     	cmp	#<$61417272
 12502 08:2CEF: D0 05        	bne	L471
 12503 08:2CF1: A5 0F        	lda	<R3+2
 12504 08:2CF3: C9 41 61     	cmp	#^$61417272
 12505                        L471:
 12506 08:2CF6: F0 03        	beq	L472
 12507 08:2CF8: 82 52 00     	brl	L10215
 12508                        L472:
 12509                        	.line	3639
 12510                        ;#if (FF_FS_NOFSINFO & 1) == 0
 12511                        ;				fs->free_clst = ld_dword
                    (fs->win + FSI_Free_Count);
 12512                        	.line	3641
 12513 08:2CFB: 18           	clc
 12514 08:2CFC: A9 17 02     	lda	#$217
 12515 08:2CFF: 65 2E        	adc	<L422+fs_1
 12516 08:2D01: 85 01        	sta	<R0
 12517 08:2D03: A9 00 00     	lda	#$0
 12518 08:2D06: 65 30        	adc	<L422+fs_1+2
 12519 08:2D08: 85 03        	sta	<R0+2
 12520 08:2D0A: D4 03        	pei	<R0+2
 12521 08:2D0C: D4 01        	pei	<R0
 12522 08:2D0E: 22 3B 00 08  	jsl	~~ld_dword
 12523 08:2D12: 85 05        	sta	<R1
 12524 08:2D14: 86 07        	stx	<R1+2
 12525 08:2D16: A5 05        	lda	<R1
 12526 08:2D18: A0 0F 00     	ldy	#$f
 12527 08:2D1B: 97 2E        	sta	[<L422+fs_1],Y
 12528 08:2D1D: A5 07        	lda	<R1+2
 12529 08:2D1F: A0 11 00     	ldy	#$11
 12530 08:2D22: 97 2E        	sta	[<L422+fs_1],Y
 12531                        ;#endif
 12532                        ;#if (FF_FS_NOFSINFO & 2) == 0
 12533                        ;				fs->last_clst = ld_dword
                    (fs->win + FSI_Nxt_Free);
 12534                        	.line	3644
 12535 08:2D24: 18           	clc
 12536 08:2D25: A9 1B 02     	lda	#$21b
 12537 08:2D28: 65 2E        	adc	<L422+fs_1
 12538 08:2D2A: 85 01        	sta	<R0
 12539 08:2D2C: A9 00 00     	lda	#$0
 12540 08:2D2F: 65 30        	adc	<L422+fs_1+2
 12541 08:2D31: 85 03        	sta	<R0+2
 12542 08:2D33: D4 03        	pei	<R0+2
 12543 08:2D35: D4 01        	pei	<R0
 12544 08:2D37: 22 3B 00 08  	jsl	~~ld_dword
 12545 08:2D3B: 85 05        	sta	<R1
 12546 08:2D3D: 86 07        	stx	<R1+2
 12547 08:2D3F: A5 05        	lda	<R1
 12548 08:2D41: A0 0B 00     	ldy	#$b
 12549 08:2D44: 97 2E        	sta	[<L422+fs_1],Y
 12550 08:2D46: A5 07        	lda	<R1+2
 12551 08:2D48: A0 0D 00     	ldy	#$d
 12552 08:2D4B: 97 2E        	sta	[<L422+fs_1],Y
  Thu Dec  3 2020 22:25                                                Page 250


 12553                        ;#endif
 12554                        ;			}
 12555                        	.line	3646
 12556                        ;		}
 12557                        L10215:
 12558                        	.line	3647
 12559                        ;#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
 12560                        ;#endif	/* !FF_FS_READONLY */
 12561                        ;	}
 12562                        L10214:
 12563                        	.line	3650
 12564                        ;
 12565                        ;	fs->fs_type = (BYTE)fmt;/* FAT sub-type */
 12566                        	.line	3652
 12567 08:2D4D: E2 20        	sep	#$20
 12568                        	longa	off
 12569 08:2D4F: A5 32        	lda	<L422+fmt_1
 12570 08:2D51: 87 2E        	sta	[<L422+fs_1]
 12571 08:2D53: C2 20        	rep	#$20
 12572                        	longa	on
 12573                        ;	fs->id = ++Fsid;		/* Volume mount 
                    ID */
 12574                        	.line	3653
 12575 08:2D55: EE xx xx     	inc	|~~Fsid
 12576 08:2D58: AD xx xx     	lda	|~~Fsid
 12577 08:2D5B: A0 05 00     	ldy	#$5
 12578 08:2D5E: 97 2E        	sta	[<L422+fs_1],Y
 12579                        ;#if FF_USE_LFN == 1
 12580                        ;	fs->lfnbuf = LfnBuf;	/* Static LFN working bu
                    ffer */
 12581                        ;#if FF_FS_EXFAT
 12582                        ;	fs->dirbuf = DirBuf;	/* Static directory bloc
                    k scratchpad buuffer */
 12583                        ;#endif
 12584                        ;#endif
 12585                        ;#if FF_FS_RPATH != 0
 12586                        ;	fs->cdir = 0;			/* Initialize cu
                    rrent directory */
 12587                        ;#endif
 12588                        ;#if FF_FS_LOCK != 0			/* Clear
                     file lock semaphores */
 12589                        ;	clear_lock(fs);
 12590                        ;#endif
 12591                        ;	return FR_OK;
 12592                        	.line	3666
 12593 08:2D60: A9 00 00     	lda	#$0
 12594 08:2D63: 82 B4 F8     	brl	L425
 12595                        ;}
 12596                        	.line	3667
 12597                        	.endblock	3667
 12598             00000033   L421	equ	51
 12599             00000011   L422	equ	17
 12600 08:2D66:              	ends
 12601                        	efunc
 12602                        	.endfunc	3667,17,51
 12603                        	.line	3667
 12604                        	data
 12605                        L420:
  Thu Dec  3 2020 22:25                                                Page 251


 12606 00:019F: 6D 6F 75 6E  	db	$6D,$6F,$75,$6E,$74,$5F,$76,$6F,$6C,$75,
                    $6D,$65,$2E,$2E,$2E
       00:01A3: 74 5F 76 6F 
       00:01A7: 6C 75 6D 65 
       00:01AB: 2E 2E 2E 
 12607 00:01AE: 0D 0A 00 6D  	db	$0D,$0A,$00,$6D,$6F,$75,$6E,$74,$5F,$76,
                    $6F,$6C,$75,$6D,$65
       00:01B2: 6F 75 6E 74 
       00:01B6: 5F 76 6F 6C 
       00:01BA: 75 6D 65 
 12608 00:01BD: 3A 66 6D 74  	db	$3A,$66,$6D,$74,$3A,$00,$6D,$6F,$75,$6E,
                    $74,$5F,$76,$6F,$6C
       00:01C1: 3A 00 6D 6F 
       00:01C5: 75 6E 74 5F 
       00:01C9: 76 6F 6C 
 12609 00:01CC: 75 6D 65 3A  	db	$75,$6D,$65,$3A,$62,$73,$65,$63,$74,$3A,
                    $00,$6D,$6F,$75,$6E
       00:01D0: 62 73 65 63 
       00:01D4: 74 3A 00 6D 
       00:01D8: 6F 75 6E 
 12610 00:01DB: 74 5F 76 6F  	db	$74,$5F,$76,$6F,$6C,$75,$6D,$65,$3A,$66,
                    $73,$2D,$3E,$77,$69
       00:01DF: 6C 75 6D 65 
       00:01E3: 3A 66 73 2D 
       00:01E7: 3E 77 69 
 12611 00:01EA: 6E 3A 00 6D  	db	$6E,$3A,$00,$6D,$6F,$75,$6E,$74,$5F,$76,
                    $6F,$6C,$75,$6D,$65
       00:01EE: 6F 75 6E 74 
       00:01F2: 5F 76 6F 6C 
       00:01F6: 75 6D 65 
 12612 00:01F9: 3A 53 53 28  	db	$3A,$53,$53,$28,$66,$73,$29,$3A,$00,$6D,
                    $6F,$75,$6E,$74,$5F
       00:01FD: 66 73 29 3A 
       00:0201: 00 6D 6F 75 
       00:0205: 6E 74 5F 
 12613 00:0208: 76 6F 6C 75  	db	$76,$6F,$6C,$75,$6D,$65,$3A,$66,$73,$2D,
                    $3E,$77,$69,$6E,$20
       00:020C: 6D 65 3A 66 
       00:0210: 73 2D 3E 77 
       00:0214: 69 6E 20 
 12614 00:0217: 2B 20 42 50  	db	$2B,$20,$42,$50,$42,$5F,$42,$79,$74,$73,
                    $50,$65,$72,$53,$65
       00:021B: 42 5F 42 79 
       00:021F: 74 73 50 65 
       00:0223: 72 53 65 
 12615 00:0226: 63 3A 00 6D  	db	$63,$3A,$00,$6D,$6F,$75,$6E,$74,$5F,$76,
                    $6F,$6C,$75,$6D,$65
       00:022A: 6F 75 6E 74 
       00:022E: 5F 76 6F 6C 
       00:0232: 75 6D 65 
 12616 00:0235: 3A 6E 5F 66  	db	$3A,$6E,$5F,$66,$61,$74,$73,$3A,$00
       00:0239: 61 74 73 3A 
       00:023D: 00 
 12617 00:023E:              	ends
 12618                        ;
 12619                        ;
 12620                        ;
 12621                        ;
  Thu Dec  3 2020 22:25                                                Page 252


 12622                        ;/*-----------------------------------------------
                    ------------------------*/
 12623                        ;/* Check if the file/directory object is valid or
                     not                    */
 12624                        ;/*-----------------------------------------------
                    ------------------------*/
 12625                        ;
 12626                        ;static FRESULT validate (	/* Returns FR_OK
                     or FR_INVALID_OBJECT */
 12627                        ;	FFOBJID* obj,			/* Pointer to th
                    e FFOBJID, the 1st member in the FIL/DIR object, to check va
                    lidity */
 12628                        ;	FATFS** rfs				/* Point
                    er to pointer to the owner filesystem object to return */
 12629                        ;)
 12630                        ;{
 12631                        	.line	3676
 12632                        	.line	3680
 12633                        	FFDOS
 12634                        	func
 12635                        	.function	3680
 12636                        ~~validate:
 12637                        	longa	on
 12638                        	longi	on
 12639 08:2D66: 3B           	tsc
 12640 08:2D67: 38           	sec
 12641 08:2D68: E9 06 00     	sbc	#L474
 12642 08:2D6B: 1B           	tcs
 12643 08:2D6C: 0B           	phd
 12644 08:2D6D: 5B           	tcd
 12645             00000004   obj_0	set	4
 12646             00000008   rfs_0	set	8
 12647                        	.block	3680
 12648                        ;	FRESULT res = FR_INVALID_OBJECT;
 12649                        ;
 12650                        ;
 12651                        ;	if (obj && obj->fs && obj->fs->fs_type && obj->i
                    d == obj->fs->id) {	/* Test if the object is valid */
 12652             00000000   res_1	set	0
 12653                        	.sym	res,0,5,1,16
 12654                        	.sym	obj,4,138,6,32,81
 12655                        	.sym	rfs,8,1162,6,32,80
 12656 08:2D6E: A9 09 00     	lda	#$9
 12657 08:2D71: 85 05        	sta	<L475+res_1
 12658                        	.line	3684
 12659 08:2D73: A5 0A        	lda	<L474+obj_0
 12660 08:2D75: 05 0C        	ora	<L474+obj_0+2
 12661 08:2D77: D0 03        	bne	L477
 12662 08:2D79: 82 5D 00     	brl	L10216
 12663                        L477:
 12664 08:2D7C: A7 0A        	lda	[<L474+obj_0]
 12665 08:2D7E: A0 02 00     	ldy	#$2
 12666 08:2D81: 17 0A        	ora	[<L474+obj_0],Y
 12667 08:2D83: D0 03        	bne	L478
 12668 08:2D85: 82 51 00     	brl	L10216
 12669                        L478:
 12670 08:2D88: A7 0A        	lda	[<L474+obj_0]
 12671 08:2D8A: 85 01        	sta	<R0
  Thu Dec  3 2020 22:25                                                Page 253


 12672 08:2D8C: A0 02 00     	ldy	#$2
 12673 08:2D8F: B7 0A        	lda	[<L474+obj_0],Y
 12674 08:2D91: 85 03        	sta	<R0+2
 12675 08:2D93: A7 01        	lda	[<R0]
 12676 08:2D95: 29 FF 00     	and	#$ff
 12677 08:2D98: D0 03        	bne	L479
 12678 08:2D9A: 82 3C 00     	brl	L10216
 12679                        L479:
 12680 08:2D9D: A7 0A        	lda	[<L474+obj_0]
 12681 08:2D9F: 85 01        	sta	<R0
 12682 08:2DA1: A0 02 00     	ldy	#$2
 12683 08:2DA4: B7 0A        	lda	[<L474+obj_0],Y
 12684 08:2DA6: 85 03        	sta	<R0+2
 12685 08:2DA8: A0 04 00     	ldy	#$4
 12686 08:2DAB: B7 0A        	lda	[<L474+obj_0],Y
 12687 08:2DAD: A0 05 00     	ldy	#$5
 12688 08:2DB0: D7 01        	cmp	[<R0],Y
 12689 08:2DB2: F0 03        	beq	L480
 12690 08:2DB4: 82 22 00     	brl	L10216
 12691                        L480:
 12692                        	.line	3684
 12693                        ;#if FF_FS_REENTRANT
 12694                        ;		if (lock_fs(obj->fs)) {	/* Obtain the fi
                    lesystem object */
 12695                        ;			if (!(disk_status(obj->fs->pdrv)
                     & STA_NOINIT)) { /* Test if the phsical drive is kept initi
                    alized */
 12696                        ;				res = FR_OK;
 12697                        ;			} else {
 12698                        ;				unlock_fs(obj->fs, FR_OK
                    );
 12699                        ;			}
 12700                        ;		} else {
 12701                        ;			res = FR_TIMEOUT;
 12702                        ;		}
 12703                        ;#else
 12704                        ;		if (!(disk_status(obj->fs->pdrv) & STA_N
                    OINIT)) { /* Test if the phsical drive is kept initialized *
                    /
 12705                        	.line	3696
 12706 08:2DB7: A7 0A        	lda	[<L474+obj_0]
 12707 08:2DB9: 85 01        	sta	<R0
 12708 08:2DBB: A0 02 00     	ldy	#$2
 12709 08:2DBE: B7 0A        	lda	[<L474+obj_0],Y
 12710 08:2DC0: 85 03        	sta	<R0+2
 12711 08:2DC2: A0 01 00     	ldy	#$1
 12712 08:2DC5: B7 01        	lda	[<R0],Y
 12713 08:2DC7: 48           	pha
 12714 08:2DC8: 22 xx xx xx  	jsl	~~disk_status
 12715 08:2DCC: E2 20        	sep	#$20
 12716                        	longa	off
 12717 08:2DCE: 29 01        	and	#<$1
 12718 08:2DD0: C2 20        	rep	#$20
 12719                        	longa	on
 12720 08:2DD2: F0 03        	beq	L481
 12721 08:2DD4: 82 02 00     	brl	L10217
 12722                        L481:
 12723                        	.line	3696
  Thu Dec  3 2020 22:25                                                Page 254


 12724                        ;			res = FR_OK;
 12725                        	.line	3697
 12726 08:2DD7: 64 05        	stz	<L475+res_1
 12727                        ;		}
 12728                        	.line	3698
 12729                        ;#endif
 12730                        ;	}
 12731                        L10217:
 12732                        	.line	3700
 12733                        ;	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corre
                    sponding filesystem object */
 12734                        L10216:
 12735                        	.line	3701
 12736 08:2DD9: A5 05        	lda	<L475+res_1
 12737 08:2DDB: F0 03        	beq	L483
 12738 08:2DDD: 82 0A 00     	brl	L482
 12739                        L483:
 12740 08:2DE0: A0 02 00     	ldy	#$2
 12741 08:2DE3: B7 0A        	lda	[<L474+obj_0],Y
 12742 08:2DE5: AA           	tax
 12743 08:2DE6: A7 0A        	lda	[<L474+obj_0]
 12744 08:2DE8: 80 07        	bra	L484
 12745                        L482:
 12746 08:2DEA: A9 00 00     	lda	#$0
 12747 08:2DED: AA           	tax
 12748 08:2DEE: A9 00 00     	lda	#$0
 12749                        L484:
 12750 08:2DF1: 85 01        	sta	<R0
 12751 08:2DF3: 86 03        	stx	<R0+2
 12752 08:2DF5: A5 01        	lda	<R0
 12753 08:2DF7: 87 0E        	sta	[<L474+rfs_0]
 12754 08:2DF9: A5 03        	lda	<R0+2
 12755 08:2DFB: A0 02 00     	ldy	#$2
 12756 08:2DFE: 97 0E        	sta	[<L474+rfs_0],Y
 12757                        ;	return res;
 12758                        	.line	3702
 12759 08:2E00: A5 05        	lda	<L475+res_1
 12760                        L485:
 12761 08:2E02: A8           	tay
 12762 08:2E03: A5 08        	lda	<L474+2
 12763 08:2E05: 85 10        	sta	<L474+2+8
 12764 08:2E07: A5 07        	lda	<L474+1
 12765 08:2E09: 85 0F        	sta	<L474+1+8
 12766 08:2E0B: 2B           	pld
 12767 08:2E0C: 3B           	tsc
 12768 08:2E0D: 18           	clc
 12769 08:2E0E: 69 0E 00     	adc	#L474+8
 12770 08:2E11: 1B           	tcs
 12771 08:2E12: 98           	tya
 12772 08:2E13: 6B           	rtl
 12773                        ;}
 12774                        	.line	3703
 12775                        	.endblock	3703
 12776             00000006   L474	equ	6
 12777             00000005   L475	equ	5
 12778 08:2E14:              	ends
 12779                        	efunc
 12780                        	.endfunc	3703,5,6
  Thu Dec  3 2020 22:25                                                Page 255


 12781                        	.line	3703
 12782                        ;
 12783                        ;
 12784                        ;
 12785                        ;
 12786                        ;/*-----------------------------------------------
                    ----------------------------
 12787                        ;
 12788                        ;   Public Functions (FatFs API)
 12789                        ;
 12790                        ;-------------------------------------------------
                    ---------------------------*/
 12791                        ;
 12792                        ;
 12793                        ;
 12794                        ;/*-----------------------------------------------
                    ------------------------*/
 12795                        ;/* Mount/Unmount a Logical Drive                 
                                            */
 12796                        ;/*-----------------------------------------------
                    ------------------------*/
 12797                        ;
 12798                        ;FRESULT f_mount (
 12799                        ;	FATFS* fs,			/* Pointer to th
                    e filesystem object (NULL:unmount)*/
 12800                        ;	const TCHAR* path,	/* Logical drive number 
                    to be mounted/unmounted */
 12801                        ;	BYTE opt			/* Mode option 0
                    :Do not mount (delayed mount), 1:Mount immediately */
 12802                        ;)
 12803                        ;{
 12804                        	.line	3720
 12805                        	.line	3725
 12806                        	FFDOS
 12807                        	xdef	~~f_mount
 12808                        	func
 12809                        	.function	3725
 12810                        ~~f_mount:
 12811                        	longa	on
 12812                        	longi	on
 12813 08:2E14: 3B           	tsc
 12814 08:2E15: 38           	sec
 12815 08:2E16: E9 14 00     	sbc	#L486
 12816 08:2E19: 1B           	tcs
 12817 08:2E1A: 0B           	phd
 12818 08:2E1B: 5B           	tcd
 12819             00000004   fs_0	set	4
 12820             00000008   path_0	set	8
 12821             0000000C   opt_0	set	12
 12822                        	.block	3725
 12823                        ;	FATFS *cfs;
 12824                        ;	int vol;
 12825                        ;	FRESULT res;
 12826                        ;	const TCHAR *rp = path;
 12827                        ;
 12828                        ;
 12829                        ;	/* Get logical drive number */
 12830                        ;	vol = get_ldnumber(&rp);
  Thu Dec  3 2020 22:25                                                Page 256


 12831             00000000   cfs_1	set	0
 12832             00000004   vol_1	set	4
 12833             00000006   res_1	set	6
 12834             00000008   rp_1	set	8
 12835                        	.sym	cfs,0,138,1,32,80
 12836                        	.sym	vol,4,5,1,16
 12837                        	.sym	res,6,5,1,16
 12838                        	.sym	rp,8,142,1,32
 12839                        	.sym	fs,4,138,6,32,80
 12840                        	.sym	path,8,142,6,32
 12841                        	.sym	opt,12,14,6,8
 12842 08:2E1C: A5 1C        	lda	<L486+path_0
 12843 08:2E1E: 85 11        	sta	<L487+rp_1
 12844 08:2E20: A5 1E        	lda	<L486+path_0+2
 12845 08:2E22: 85 13        	sta	<L487+rp_1+2
 12846                        	.line	3733
 12847 08:2E24: F4 00 00     	pea	#0
 12848 08:2E27: 18           	clc
 12849 08:2E28: 7B           	tdc
 12850 08:2E29: 69 11 00     	adc	#<L487+rp_1
 12851 08:2E2C: 48           	pha
 12852 08:2E2D: 22 7B 20 08  	jsl	~~get_ldnumber
 12853 08:2E31: 85 0D        	sta	<L487+vol_1
 12854                        ;	if (vol < 0) return FR_INVALID_DRIVE;
 12855                        	.line	3734
 12856 08:2E33: A5 0D        	lda	<L487+vol_1
 12857 08:2E35: 30 03        	bmi	L489
 12858 08:2E37: 82 15 00     	brl	L10218
 12859                        L489:
 12860                        	.line	3734
 12861 08:2E3A: A9 0B 00     	lda	#$b
 12862                        L490:
 12863 08:2E3D: A8           	tay
 12864 08:2E3E: A5 16        	lda	<L486+2
 12865 08:2E40: 85 20        	sta	<L486+2+10
 12866 08:2E42: A5 15        	lda	<L486+1
 12867 08:2E44: 85 1F        	sta	<L486+1+10
 12868 08:2E46: 2B           	pld
 12869 08:2E47: 3B           	tsc
 12870 08:2E48: 18           	clc
 12871 08:2E49: 69 1E 00     	adc	#L486+10
 12872 08:2E4C: 1B           	tcs
 12873 08:2E4D: 98           	tya
 12874 08:2E4E: 6B           	rtl
 12875                        ;	cfs = FatFs[vol];				
                    	/* Pointer to fs object */
 12876                        L10218:
 12877                        	.line	3735
 12878 08:2E4F: A5 0D        	lda	<L487+vol_1
 12879 08:2E51: 0A           	asl	A
 12880 08:2E52: 0A           	asl	A
 12881 08:2E53: 85 01        	sta	<R0
 12882 08:2E55: 18           	clc
 12883 08:2E56: A9 xx xx     	lda	#<~~FatFs
 12884 08:2E59: 65 01        	adc	<R0
 12885 08:2E5B: 85 05        	sta	<R1
 12886 08:2E5D: B2 05        	lda	(<R1)
 12887 08:2E5F: 85 09        	sta	<L487+cfs_1
  Thu Dec  3 2020 22:25                                                Page 257


 12888 08:2E61: A0 02 00     	ldy	#$2
 12889 08:2E64: B1 05        	lda	(<R1),Y
 12890 08:2E66: 85 0B        	sta	<L487+cfs_1+2
 12891                        ;
 12892                        ;	if (cfs) {
 12893                        	.line	3737
 12894 08:2E68: A5 09        	lda	<L487+cfs_1
 12895 08:2E6A: 05 0B        	ora	<L487+cfs_1+2
 12896 08:2E6C: D0 03        	bne	L491
 12897 08:2E6E: 82 08 00     	brl	L10219
 12898                        L491:
 12899                        	.line	3737
 12900                        ;#if FF_FS_LOCK != 0
 12901                        ;		clear_lock(cfs);
 12902                        ;#endif
 12903                        ;#if FF_FS_REENTRANT				
                    		/* Discard sync object of the current volume */
 12904                        ;		if (!ff_del_syncobj(cfs->sobj)) return F
                    R_INT_ERR;
 12905                        ;#endif
 12906                        ;		cfs->fs_type = 0;			
                    	/* Clear old fs object */
 12907                        	.line	3744
 12908 08:2E71: E2 20        	sep	#$20
 12909                        	longa	off
 12910 08:2E73: A9 00        	lda	#$0
 12911 08:2E75: 87 09        	sta	[<L487+cfs_1]
 12912 08:2E77: C2 20        	rep	#$20
 12913                        	longa	on
 12914                        ;	}
 12915                        	.line	3745
 12916                        ;
 12917                        ;	if (fs) {
 12918                        L10219:
 12919                        	.line	3747
 12920 08:2E79: A5 18        	lda	<L486+fs_0
 12921 08:2E7B: 05 1A        	ora	<L486+fs_0+2
 12922 08:2E7D: D0 03        	bne	L492
 12923 08:2E7F: 82 08 00     	brl	L10220
 12924                        L492:
 12925                        	.line	3747
 12926                        ;		fs->fs_type = 0;			
                    	/* Clear new fs object */
 12927                        	.line	3748
 12928 08:2E82: E2 20        	sep	#$20
 12929                        	longa	off
 12930 08:2E84: A9 00        	lda	#$0
 12931 08:2E86: 87 18        	sta	[<L486+fs_0]
 12932 08:2E88: C2 20        	rep	#$20
 12933                        	longa	on
 12934                        ;#if FF_FS_REENTRANT				
                    		/* Create sync object for the new volume */
 12935                        ;		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj
                    )) return FR_INT_ERR;
 12936                        ;#endif
 12937                        ;	}
 12938                        	.line	3752
 12939                        ;	FatFs[vol] = fs;				
  Thu Dec  3 2020 22:25                                                Page 258


                    	/* Register new fs object */
 12940                        L10220:
 12941                        	.line	3753
 12942 08:2E8A: A5 0D        	lda	<L487+vol_1
 12943 08:2E8C: 0A           	asl	A
 12944 08:2E8D: 0A           	asl	A
 12945 08:2E8E: 85 01        	sta	<R0
 12946 08:2E90: 18           	clc
 12947 08:2E91: A9 xx xx     	lda	#<~~FatFs
 12948 08:2E94: 65 01        	adc	<R0
 12949 08:2E96: 85 05        	sta	<R1
 12950 08:2E98: A5 18        	lda	<L486+fs_0
 12951 08:2E9A: 92 05        	sta	(<R1)
 12952 08:2E9C: A5 1A        	lda	<L486+fs_0+2
 12953 08:2E9E: A0 02 00     	ldy	#$2
 12954 08:2EA1: 91 05        	sta	(<R1),Y
 12955                        ;
 12956                        ;	if (opt == 0) return FR_OK;			
                    /* Do not mount now, it will be mounted later */
 12957                        	.line	3755
 12958 08:2EA3: A5 20        	lda	<L486+opt_0
 12959 08:2EA5: 29 FF 00     	and	#$ff
 12960 08:2EA8: F0 03        	beq	L493
 12961 08:2EAA: 82 06 00     	brl	L10221
 12962                        L493:
 12963                        	.line	3755
 12964 08:2EAD: A9 00 00     	lda	#$0
 12965 08:2EB0: 82 8A FF     	brl	L490
 12966                        ;
 12967                        ;	res = mount_volume(&path, &fs, 0);	/* Force
                     mounted the volume */
 12968                        L10221:
 12969                        	.line	3757
 12970 08:2EB3: F4 00 00     	pea	#<$0
 12971 08:2EB6: F4 00 00     	pea	#0
 12972 08:2EB9: 18           	clc
 12973 08:2EBA: 7B           	tdc
 12974 08:2EBB: 69 18 00     	adc	#<L486+fs_0
 12975 08:2EBE: 48           	pha
 12976 08:2EBF: F4 00 00     	pea	#0
 12977 08:2EC2: 18           	clc
 12978 08:2EC3: 7B           	tdc
 12979 08:2EC4: 69 1C 00     	adc	#<L486+path_0
 12980 08:2EC7: 48           	pha
 12981 08:2EC8: 22 E7 25 08  	jsl	~~mount_volume
 12982 08:2ECC: 85 0F        	sta	<L487+res_1
 12983                        ;	LEAVE_FF(fs, res);
 12984                        	.line	3758
 12985 08:2ECE: A5 0F        	lda	<L487+res_1
 12986 08:2ED0: 82 6A FF     	brl	L490
 12987                        ;}
 12988                        	.line	3759
 12989                        	.endblock	3759
 12990             00000014   L486	equ	20
 12991             00000009   L487	equ	9
 12992 08:2ED3:              	ends
 12993                        	efunc
 12994                        	.endfunc	3759,9,20
  Thu Dec  3 2020 22:25                                                Page 259


 12995                        	.line	3759
 12996                        ;
 12997                        ;
 12998                        ;
 12999                        ;
 13000                        ;/*-----------------------------------------------
                    ------------------------*/
 13001                        ;/* Open or Create a File                         
                                            */
 13002                        ;/*-----------------------------------------------
                    ------------------------*/
 13003                        ;
 13004                        ;FRESULT f_open (
 13005                        ;	FIL* fp,			/* Pointer to th
                    e blank file object */
 13006                        ;	const TCHAR* path,	/* Pointer to the file n
                    ame */
 13007                        ;	BYTE mode			/* Access mode a
                    nd file open mode flags */
 13008                        ;)
 13009                        ;{
 13010                        	.line	3768
 13011                        	.line	3773
 13012                        	FFDOS
 13013                        	xdef	~~f_open
 13014                        	func
 13015                        	.function	3773
 13016                        ~~f_open:
 13017                        	longa	on
 13018                        	longi	on
 13019 08:2ED3: 3B           	tsc
 13020 08:2ED4: 38           	sec
 13021 08:2ED5: E9 4E 00     	sbc	#L494
 13022 08:2ED8: 1B           	tcs
 13023 08:2ED9: 0B           	phd
 13024 08:2EDA: 5B           	tcd
 13025             00000004   fp_0	set	4
 13026             00000008   path_0	set	8
 13027             0000000C   mode_0	set	12
 13028                        	.block	3773
 13029                        ;	FRESULT res;
 13030                        ;	DIR dj;
 13031                        ;	FATFS *fs;
 13032                        ;#if !FF_FS_READONLY
 13033                        ;	DWORD cl, bcs, clst;
 13034                        ;	LBA_t sc;
 13035                        ;	FSIZE_t ofs;
 13036                        ;#endif
 13037                        ;	DEF_NAMBUF
 13038                        ;
 13039                        ;	k_debug_string( "f_open...\r\n");
 13040             00000000   res_1	set	0
 13041             00000002   dj_1	set	2
 13042             0000002E   fs_1	set	46
 13043             00000032   cl_1	set	50
 13044             00000036   bcs_1	set	54
 13045             0000003A   clst_1	set	58
 13046             0000003E   sc_1	set	62
  Thu Dec  3 2020 22:25                                                Page 260


 13047             00000042   ofs_1	set	66
 13048                        	.sym	res,0,5,1,16
 13049                        	.sym	dj,2,10,1,352,83
 13050                        	.sym	fs,46,138,1,32,80
 13051                        	.sym	cl,50,18,1,32
 13052                        	.sym	bcs,54,18,1,32
 13053                        	.sym	clst,58,18,1,32
 13054                        	.sym	sc,62,18,1,32
 13055                        	.sym	ofs,66,18,1,32
 13056                        	.sym	fp,4,138,6,32,82
 13057                        	.sym	path,8,142,6,32
 13058                        	.sym	mode,12,14,6,8
 13059                        	.line	3784
 13060 08:2EDB: F4 xx xx     	pea	#^L473
 13061 08:2EDE: F4 xx xx     	pea	#<L473
 13062 08:2EE1: 22 xx xx xx  	jsl	~~k_debug_string
 13063                        ;
 13064                        ;
 13065                        ;	if (!fp) return FR_INVALID_OBJECT;
 13066                        	.line	3787
 13067 08:2EE5: A5 52        	lda	<L494+fp_0
 13068 08:2EE7: 05 54        	ora	<L494+fp_0+2
 13069 08:2EE9: F0 03        	beq	L497
 13070 08:2EEB: 82 15 00     	brl	L10222
 13071                        L497:
 13072                        	.line	3787
 13073 08:2EEE: A9 09 00     	lda	#$9
 13074                        L498:
 13075 08:2EF1: A8           	tay
 13076 08:2EF2: A5 50        	lda	<L494+2
 13077 08:2EF4: 85 5A        	sta	<L494+2+10
 13078 08:2EF6: A5 4F        	lda	<L494+1
 13079 08:2EF8: 85 59        	sta	<L494+1+10
 13080 08:2EFA: 2B           	pld
 13081 08:2EFB: 3B           	tsc
 13082 08:2EFC: 18           	clc
 13083 08:2EFD: 69 58 00     	adc	#L494+10
 13084 08:2F00: 1B           	tcs
 13085 08:2F01: 98           	tya
 13086 08:2F02: 6B           	rtl
 13087                        ;
 13088                        ;	/* Get logical drive number */
 13089                        ;	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_
                    WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | 
                    FA_OPEN_APPEND;
 13090                        L10222:
 13091                        	.line	3790
 13092 08:2F03: E2 20        	sep	#$20
 13093                        	longa	off
 13094 08:2F05: A9 C0        	lda	#$c0
 13095 08:2F07: 14 5A        	trb	<L494+mode_0
 13096 08:2F09: C2 20        	rep	#$20
 13097                        	longa	on
 13098                        ;	res = mount_volume(&path, &fs, mode);
 13099                        	.line	3791
 13100 08:2F0B: D4 5A        	pei	<L494+mode_0
 13101 08:2F0D: F4 00 00     	pea	#0
 13102 08:2F10: 18           	clc
  Thu Dec  3 2020 22:25                                                Page 261


 13103 08:2F11: 7B           	tdc
 13104 08:2F12: 69 37 00     	adc	#<L495+fs_1
 13105 08:2F15: 48           	pha
 13106 08:2F16: F4 00 00     	pea	#0
 13107 08:2F19: 18           	clc
 13108 08:2F1A: 7B           	tdc
 13109 08:2F1B: 69 56 00     	adc	#<L494+path_0
 13110 08:2F1E: 48           	pha
 13111 08:2F1F: 22 E7 25 08  	jsl	~~mount_volume
 13112 08:2F23: 85 09        	sta	<L495+res_1
 13113                        ;	if (res == FR_OK) {
 13114                        	.line	3792
 13115 08:2F25: A5 09        	lda	<L495+res_1
 13116 08:2F27: F0 03        	beq	L499
 13117 08:2F29: 82 30 04     	brl	L10223
 13118                        L499:
 13119                        	.line	3792
 13120                        ;		dj.obj.fs = fs;
 13121                        	.line	3793
 13122 08:2F2C: A5 37        	lda	<L495+fs_1
 13123 08:2F2E: 85 0B        	sta	<L495+dj_1
 13124 08:2F30: A5 39        	lda	<L495+fs_1+2
 13125 08:2F32: 85 0D        	sta	<L495+dj_1+2
 13126                        ;		INIT_NAMBUF(fs);
 13127                        	.line	3794
 13128                        ;		res = follow_path(&dj, path);	/* Follo
                    w the file path */
 13129                        	.line	3795
 13130 08:2F34: D4 58        	pei	<L494+path_0+2
 13131 08:2F36: D4 56        	pei	<L494+path_0
 13132 08:2F38: F4 00 00     	pea	#0
 13133 08:2F3B: 18           	clc
 13134 08:2F3C: 7B           	tdc
 13135 08:2F3D: 69 0B 00     	adc	#<L495+dj_1
 13136 08:2F40: 48           	pha
 13137 08:2F41: 22 FC 1E 08  	jsl	~~follow_path
 13138 08:2F45: 85 09        	sta	<L495+res_1
 13139                        ;#if !FF_FS_READONLY	/* Read/Write configurat
                    ion */
 13140                        ;		if (res == FR_OK) {
 13141                        	.line	3797
 13142 08:2F47: A5 09        	lda	<L495+res_1
 13143 08:2F49: F0 03        	beq	L500
 13144 08:2F4B: 82 12 00     	brl	L10224
 13145                        L500:
 13146                        	.line	3797
 13147                        ;			if (dj.fn[NSFLAG] & NS_NONAME) {
                    	/* Origin directory itself? */
 13148                        	.line	3798
 13149 08:2F4E: E2 20        	sep	#$20
 13150                        	longa	off
 13151 08:2F50: A5 36        	lda	<L495+dj_1+43
 13152 08:2F52: 29 80        	and	#<$80
 13153 08:2F54: C2 20        	rep	#$20
 13154                        	longa	on
 13155 08:2F56: D0 03        	bne	L501
 13156 08:2F58: 82 05 00     	brl	L10225
 13157                        L501:
  Thu Dec  3 2020 22:25                                                Page 262


 13158                        	.line	3798
 13159                        ;				res = FR_INVALID_NAME;
 13160                        	.line	3799
 13161 08:2F5B: A9 06 00     	lda	#$6
 13162 08:2F5E: 85 09        	sta	<L495+res_1
 13163                        ;			}
 13164                        	.line	3800
 13165                        ;#if FF_FS_LOCK != 0
 13166                        ;			else {
 13167                        ;				res = chk_lock(&dj, (mod
                    e & ~FA_READ) ? 1 : 0);		/* Check if the file can
                     be used */
 13168                        ;			}
 13169                        ;#endif
 13170                        ;		}
 13171                        L10225:
 13172                        	.line	3806
 13173                        ;
 13174                        ;		k_debug_integer( "f_open mode:", mode);
 13175                        L10224:
 13176                        	.line	3808
 13177 08:2F60: A5 5A        	lda	<L494+mode_0
 13178 08:2F62: 29 FF 00     	and	#$ff
 13179 08:2F65: 48           	pha
 13180 08:2F66: F4 xx xx     	pea	#^L473+12
 13181 08:2F69: F4 xx xx     	pea	#<L473+12
 13182 08:2F6C: 22 xx xx xx  	jsl	~~k_debug_integer
 13183                        ;
 13184                        ;		/* Create or Open a file */
 13185                        ;		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_A
                    LWAYS | FA_CREATE_NEW)) {
 13186                        	.line	3811
 13187 08:2F70: E2 20        	sep	#$20
 13188                        	longa	off
 13189 08:2F72: A5 5A        	lda	<L494+mode_0
 13190 08:2F74: 29 1C        	and	#<$1c
 13191 08:2F76: C2 20        	rep	#$20
 13192                        	longa	on
 13193 08:2F78: D0 03        	bne	L502
 13194 08:2F7A: 82 3D 01     	brl	L10226
 13195                        L502:
 13196                        	.line	3811
 13197                        ;			if (res != FR_OK) {		
                    			/* No file, create new */
 13198                        	.line	3812
 13199 08:2F7D: A5 09        	lda	<L495+res_1
 13200 08:2F7F: D0 03        	bne	L503
 13201 08:2F81: 82 24 00     	brl	L10227
 13202                        L503:
 13203                        	.line	3812
 13204                        ;				if (res == FR_NO_FILE) {
                    		/* There is no file to open, create a new entry 
                    */
 13205                        	.line	3813
 13206 08:2F84: A5 09        	lda	<L495+res_1
 13207 08:2F86: C9 04 00     	cmp	#<$4
 13208 08:2F89: F0 03        	beq	L504
 13209 08:2F8B: 82 0F 00     	brl	L10228
  Thu Dec  3 2020 22:25                                                Page 263


 13210                        L504:
 13211                        	.line	3813
 13212                        ;#if FF_FS_LOCK != 0
 13213                        ;					res = enq_lock()
                     ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 13214                        ;#else
 13215                        ;					res = dir_regist
                    er(&dj);
 13216                        	.line	3817
 13217 08:2F8E: F4 00 00     	pea	#0
 13218 08:2F91: 18           	clc
 13219 08:2F92: 7B           	tdc
 13220 08:2F93: 69 0B 00     	adc	#<L495+dj_1
 13221 08:2F96: 48           	pha
 13222 08:2F97: 22 90 1A 08  	jsl	~~dir_register
 13223 08:2F9B: 85 09        	sta	<L495+res_1
 13224                        ;#endif
 13225                        ;				}
 13226                        	.line	3819
 13227                        ;				mode |= FA_CREATE_ALWAYS
                    ;		/* File is created */
 13228                        L10228:
 13229                        	.line	3820
 13230 08:2F9D: E2 20        	sep	#$20
 13231                        	longa	off
 13232 08:2F9F: A9 08        	lda	#$8
 13233 08:2FA1: 04 5A        	tsb	<L494+mode_0
 13234 08:2FA3: C2 20        	rep	#$20
 13235                        	longa	on
 13236                        ;			}
 13237                        	.line	3821
 13238                        ;			else {				
                    				/* Any object with the same name
                     is already existing */
 13239 08:2FA5: 82 27 00     	brl	L10229
 13240                        L10227:
 13241                        	.line	3822
 13242                        ;				if (dj.obj.attr & (AM_RD
                    O | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 13243                        	.line	3823
 13244 08:2FA8: E2 20        	sep	#$20
 13245                        	longa	off
 13246 08:2FAA: A5 11        	lda	<L495+dj_1+6
 13247 08:2FAC: 29 11        	and	#<$11
 13248 08:2FAE: C2 20        	rep	#$20
 13249                        	longa	on
 13250 08:2FB0: D0 03        	bne	L505
 13251 08:2FB2: 82 08 00     	brl	L10230
 13252                        L505:
 13253                        	.line	3823
 13254                        ;					res = FR_DENIED;
 13255                        	.line	3824
 13256 08:2FB5: A9 07 00     	lda	#$7
 13257 08:2FB8: 85 09        	sta	<L495+res_1
 13258                        ;				} else {
 13259                        	.line	3825
 13260 08:2FBA: 82 12 00     	brl	L10231
 13261                        L10230:
  Thu Dec  3 2020 22:25                                                Page 264


 13262                        	.line	3825
 13263                        ;					if (mode & FA_CR
                    EATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 13264                        	.line	3826
 13265 08:2FBD: E2 20        	sep	#$20
 13266                        	longa	off
 13267 08:2FBF: A5 5A        	lda	<L494+mode_0
 13268 08:2FC1: 29 04        	and	#<$4
 13269 08:2FC3: C2 20        	rep	#$20
 13270                        	longa	on
 13271 08:2FC5: D0 03        	bne	L506
 13272 08:2FC7: 82 05 00     	brl	L10232
 13273                        L506:
 13274                        	.line	3826
 13275 08:2FCA: A9 08 00     	lda	#$8
 13276 08:2FCD: 85 09        	sta	<L495+res_1
 13277                        ;				}
 13278                        L10232:
 13279                        	.line	3827
 13280                        L10231:
 13281                        ;			}
 13282                        	.line	3828
 13283                        L10229:
 13284                        ;			if (res == FR_OK && (mode & FA_C
                    REATE_ALWAYS)) {	/* Truncate the file if overwrite mode *
                    /
 13285                        	.line	3829
 13286 08:2FCF: A5 09        	lda	<L495+res_1
 13287 08:2FD1: F0 03        	beq	L507
 13288 08:2FD3: 82 E1 00     	brl	L10233
 13289                        L507:
 13290 08:2FD6: E2 20        	sep	#$20
 13291                        	longa	off
 13292 08:2FD8: A5 5A        	lda	<L494+mode_0
 13293 08:2FDA: 29 08        	and	#<$8
 13294 08:2FDC: C2 20        	rep	#$20
 13295                        	longa	on
 13296 08:2FDE: D0 03        	bne	L508
 13297 08:2FE0: 82 D4 00     	brl	L10233
 13298                        L508:
 13299                        	.line	3829
 13300                        ;#if FF_FS_EXFAT
 13301                        ;				if (fs->fs_type == FS_EX
                    FAT) {
 13302                        ;					/* Get current a
                    llocation info */
 13303                        ;					fp->obj.fs = fs;
 13304                        ;					init_alloc_info(
                    fs, &fp->obj);
 13305                        ;					/* Set directory
                     entry block initial state */
 13306                        ;					mem_set(fs->dirb
                    uf + 2, 0, 30);		/* Clear 85 entry except for Num
                    Sec */
 13307                        ;					mem_set(fs->dirb
                    uf + 38, 0, 26);	/* Clear C0 entry except for NumName and
                     NameHash */
 13308                        ;					fs->dirbuf[XDIR_
  Thu Dec  3 2020 22:25                                                Page 265


                    Attr] = AM_ARC;
 13309                        ;					st_dword(fs->dir
                    buf + XDIR_CrtTime, GET_FATTIME());
 13310                        ;					fs->dirbuf[XDIR_
                    GenFlags] = 1;
 13311                        ;					res = store_xdir
                    (&dj);
 13312                        ;					if (res == FR_OK
                     && fp->obj.sclust != 0) {	/* Remove the cluster chain if e
                    xist */
 13313                        ;						res = re
                    move_chain(&fp->obj, fp->obj.sclust, 0);
 13314                        ;						fs->last
                    _clst = fp->obj.sclust - 1;		/* Reuse the cluster hol
                    e */
 13315                        ;					}
 13316                        ;				} else
 13317                        ;#endif
 13318                        ;				{
 13319                        	.line	3848
 13320                        ;					/* Set directory
                     entry initial state */
 13321                        ;					cl = ld_clust(fs
                    , dj.dir);			/* Get current cluster chain */
 13322                        	.line	3850
 13323 08:2FE3: D4 29        	pei	<L495+dj_1+30
 13324 08:2FE5: D4 27        	pei	<L495+dj_1+28
 13325 08:2FE7: D4 39        	pei	<L495+fs_1+2
 13326 08:2FE9: D4 37        	pei	<L495+fs_1
 13327 08:2FEB: 22 73 17 08  	jsl	~~ld_clust
 13328 08:2FEF: 85 3B        	sta	<L495+cl_1
 13329 08:2FF1: 86 3D        	stx	<L495+cl_1+2
 13330                        ;					st_dword(dj.dir 
                    + DIR_CrtTime, GET_FATTIME());	/* Set created time */
 13331                        	.line	3851
 13332 08:2FF3: F4 21 4E     	pea	#^$4e210000
 13333 08:2FF6: F4 00 00     	pea	#<$4e210000
 13334 08:2FF9: 18           	clc
 13335 08:2FFA: A9 0E 00     	lda	#$e
 13336 08:2FFD: 65 27        	adc	<L495+dj_1+28
 13337 08:2FFF: 85 01        	sta	<R0
 13338 08:3001: A9 00 00     	lda	#$0
 13339 08:3004: 65 29        	adc	<L495+dj_1+30
 13340 08:3006: 85 03        	sta	<R0+2
 13341 08:3008: D4 03        	pei	<R0+2
 13342 08:300A: D4 01        	pei	<R0
 13343 08:300C: 22 16 01 08  	jsl	~~st_dword
 13344                        ;					dj.dir[DIR_Attr]
                     = AM_ARC;			/* Reset attribute */
 13345                        	.line	3852
 13346 08:3010: E2 20        	sep	#$20
 13347                        	longa	off
 13348 08:3012: A9 20        	lda	#$20
 13349 08:3014: A0 0B 00     	ldy	#$b
 13350 08:3017: 97 27        	sta	[<L495+dj_1+28],Y
 13351 08:3019: C2 20        	rep	#$20
 13352                        	longa	on
 13353                        ;					st_clust(fs, dj.
  Thu Dec  3 2020 22:25                                                Page 266


                    dir, 0);			/* Reset file allocation info */
 13354                        	.line	3853
 13355 08:301B: F4 00 00     	pea	#^$0
 13356 08:301E: F4 00 00     	pea	#<$0
 13357 08:3021: D4 29        	pei	<L495+dj_1+30
 13358 08:3023: D4 27        	pei	<L495+dj_1+28
 13359 08:3025: D4 39        	pei	<L495+fs_1+2
 13360 08:3027: D4 37        	pei	<L495+fs_1
 13361 08:3029: 22 03 18 08  	jsl	~~st_clust
 13362                        ;					st_dword(dj.dir 
                    + DIR_FileSize, 0);
 13363                        	.line	3854
 13364 08:302D: F4 00 00     	pea	#^$0
 13365 08:3030: F4 00 00     	pea	#<$0
 13366 08:3033: 18           	clc
 13367 08:3034: A9 1C 00     	lda	#$1c
 13368 08:3037: 65 27        	adc	<L495+dj_1+28
 13369 08:3039: 85 01        	sta	<R0
 13370 08:303B: A9 00 00     	lda	#$0
 13371 08:303E: 65 29        	adc	<L495+dj_1+30
 13372 08:3040: 85 03        	sta	<R0+2
 13373 08:3042: D4 03        	pei	<R0+2
 13374 08:3044: D4 01        	pei	<R0
 13375 08:3046: 22 16 01 08  	jsl	~~st_dword
 13376                        ;					fs->wflag = 1;
 13377                        	.line	3855
 13378 08:304A: E2 20        	sep	#$20
 13379                        	longa	off
 13380 08:304C: A9 01        	lda	#$1
 13381 08:304E: A0 03 00     	ldy	#$3
 13382 08:3051: 97 37        	sta	[<L495+fs_1],Y
 13383 08:3053: C2 20        	rep	#$20
 13384                        	longa	on
 13385                        ;					if (cl != 0) {	
                    					/* Remove the cluster ch
                    ain if exist */
 13386                        	.line	3856
 13387 08:3055: A5 3B        	lda	<L495+cl_1
 13388 08:3057: 05 3D        	ora	<L495+cl_1+2
 13389 08:3059: D0 03        	bne	L509
 13390 08:305B: 82 59 00     	brl	L10234
 13391                        L509:
 13392                        	.line	3856
 13393                        ;						sc = fs-
                    >winsect;
 13394                        	.line	3857
 13395 08:305E: A0 2B 00     	ldy	#$2b
 13396 08:3061: B7 37        	lda	[<L495+fs_1],Y
 13397 08:3063: 85 47        	sta	<L495+sc_1
 13398 08:3065: A0 2D 00     	ldy	#$2d
 13399 08:3068: B7 37        	lda	[<L495+fs_1],Y
 13400 08:306A: 85 49        	sta	<L495+sc_1+2
 13401                        ;						res = re
                    move_chain(&dj.obj, cl, 0);
 13402                        	.line	3858
 13403 08:306C: F4 00 00     	pea	#^$0
 13404 08:306F: F4 00 00     	pea	#<$0
 13405 08:3072: D4 3D        	pei	<L495+cl_1+2
  Thu Dec  3 2020 22:25                                                Page 267


 13406 08:3074: D4 3B        	pei	<L495+cl_1
 13407 08:3076: F4 00 00     	pea	#0
 13408 08:3079: 18           	clc
 13409 08:307A: 7B           	tdc
 13410 08:307B: 69 0B 00     	adc	#<L495+dj_1
 13411 08:307E: 48           	pha
 13412 08:307F: 22 43 0C 08  	jsl	~~remove_chain
 13413 08:3083: 85 09        	sta	<L495+res_1
 13414                        ;						if (res 
                    == FR_OK) {
 13415                        	.line	3859
 13416 08:3085: A5 09        	lda	<L495+res_1
 13417 08:3087: F0 03        	beq	L510
 13418 08:3089: 82 2B 00     	brl	L10235
 13419                        L510:
 13420                        	.line	3859
 13421                        ;							
                    res = move_window(fs, sc);
 13422                        	.line	3860
 13423 08:308C: D4 49        	pei	<L495+sc_1+2
 13424 08:308E: D4 47        	pei	<L495+sc_1
 13425 08:3090: D4 39        	pei	<L495+fs_1+2
 13426 08:3092: D4 37        	pei	<L495+fs_1
 13427 08:3094: 22 FA 03 08  	jsl	~~move_window
 13428 08:3098: 85 09        	sta	<L495+res_1
 13429                        ;							
                    fs->last_clst = cl - 1;		/* Reuse the cluster hol
                    e */
 13430                        	.line	3861
 13431 08:309A: 18           	clc
 13432 08:309B: A9 FF FF     	lda	#$ffff
 13433 08:309E: 65 3B        	adc	<L495+cl_1
 13434 08:30A0: 85 01        	sta	<R0
 13435 08:30A2: A9 FF FF     	lda	#$ffff
 13436 08:30A5: 65 3D        	adc	<L495+cl_1+2
 13437 08:30A7: 85 03        	sta	<R0+2
 13438 08:30A9: A5 01        	lda	<R0
 13439 08:30AB: A0 0B 00     	ldy	#$b
 13440 08:30AE: 97 37        	sta	[<L495+fs_1],Y
 13441 08:30B0: A5 03        	lda	<R0+2
 13442 08:30B2: A0 0D 00     	ldy	#$d
 13443 08:30B5: 97 37        	sta	[<L495+fs_1],Y
 13444                        ;						}
 13445                        	.line	3862
 13446                        ;					}
 13447                        L10235:
 13448                        	.line	3863
 13449                        ;				}
 13450                        L10234:
 13451                        	.line	3864
 13452                        ;			}
 13453                        	.line	3865
 13454                        ;		}
 13455                        L10233:
 13456                        	.line	3866
 13457                        ;		else {	/* Open an existing file */
 13458 08:30B7: 82 3B 00     	brl	L10236
 13459                        L10226:
  Thu Dec  3 2020 22:25                                                Page 268


 13460                        	.line	3867
 13461                        ;			if (res == FR_OK) {		
                    			/* Is the object exsiting? */
 13462                        	.line	3868
 13463 08:30BA: A5 09        	lda	<L495+res_1
 13464 08:30BC: F0 03        	beq	L511
 13465 08:30BE: 82 34 00     	brl	L10237
 13466                        L511:
 13467                        	.line	3868
 13468                        ;				if (dj.obj.attr & AM_DIR
                    ) {		/* File open against a directory */
 13469                        	.line	3869
 13470 08:30C1: E2 20        	sep	#$20
 13471                        	longa	off
 13472 08:30C3: A5 11        	lda	<L495+dj_1+6
 13473 08:30C5: 29 10        	and	#<$10
 13474 08:30C7: C2 20        	rep	#$20
 13475                        	longa	on
 13476 08:30C9: D0 03        	bne	L512
 13477 08:30CB: 82 08 00     	brl	L10238
 13478                        L512:
 13479                        	.line	3869
 13480                        ;					res = FR_NO_FILE
                    ;
 13481                        	.line	3870
 13482 08:30CE: A9 04 00     	lda	#$4
 13483 08:30D1: 85 09        	sta	<L495+res_1
 13484                        ;				} else {
 13485                        	.line	3871
 13486 08:30D3: 82 1F 00     	brl	L10239
 13487                        L10238:
 13488                        	.line	3871
 13489                        ;					if ((mode & FA_W
                    RITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open agains
                    t R/O file */
 13490                        	.line	3872
 13491 08:30D6: E2 20        	sep	#$20
 13492                        	longa	off
 13493 08:30D8: A5 5A        	lda	<L494+mode_0
 13494 08:30DA: 29 02        	and	#<$2
 13495 08:30DC: C2 20        	rep	#$20
 13496                        	longa	on
 13497 08:30DE: D0 03        	bne	L513
 13498 08:30E0: 82 12 00     	brl	L10240
 13499                        L513:
 13500 08:30E3: E2 20        	sep	#$20
 13501                        	longa	off
 13502 08:30E5: A5 11        	lda	<L495+dj_1+6
 13503 08:30E7: 29 01        	and	#<$1
 13504 08:30E9: C2 20        	rep	#$20
 13505                        	longa	on
 13506 08:30EB: D0 03        	bne	L514
 13507 08:30ED: 82 05 00     	brl	L10240
 13508                        L514:
 13509                        	.line	3872
 13510                        ;						res = FR
                    _DENIED;
 13511                        	.line	3873
  Thu Dec  3 2020 22:25                                                Page 269


 13512 08:30F0: A9 07 00     	lda	#$7
 13513 08:30F3: 85 09        	sta	<L495+res_1
 13514                        ;					}
 13515                        	.line	3874
 13516                        ;				}
 13517                        L10240:
 13518                        	.line	3875
 13519                        L10239:
 13520                        ;			}
 13521                        	.line	3876
 13522                        ;		}
 13523                        L10237:
 13524                        	.line	3877
 13525                        L10236:
 13526                        ;		if (res == FR_OK) {
 13527                        	.line	3878
 13528 08:30F5: A5 09        	lda	<L495+res_1
 13529 08:30F7: F0 03        	beq	L515
 13530 08:30F9: 82 37 00     	brl	L10241
 13531                        L515:
 13532                        	.line	3878
 13533                        ;			if (mode & FA_CREATE_ALWAYS) mod
                    e |= FA_MODIFIED;	/* Set file change flag if created or ov
                    erwritten */
 13534                        	.line	3879
 13535 08:30FC: E2 20        	sep	#$20
 13536                        	longa	off
 13537 08:30FE: A5 5A        	lda	<L494+mode_0
 13538 08:3100: 29 08        	and	#<$8
 13539 08:3102: C2 20        	rep	#$20
 13540                        	longa	on
 13541 08:3104: D0 03        	bne	L516
 13542 08:3106: 82 08 00     	brl	L10242
 13543                        L516:
 13544                        	.line	3879
 13545 08:3109: E2 20        	sep	#$20
 13546                        	longa	off
 13547 08:310B: A9 40        	lda	#$40
 13548 08:310D: 04 5A        	tsb	<L494+mode_0
 13549 08:310F: C2 20        	rep	#$20
 13550                        	longa	on
 13551                        ;			fp->dir_sect = fs->winsect;	
                    		/* Pointer to the directory entry */
 13552                        L10242:
 13553                        	.line	3880
 13554 08:3111: A0 2B 00     	ldy	#$2b
 13555 08:3114: B7 37        	lda	[<L495+fs_1],Y
 13556 08:3116: A0 1E 00     	ldy	#$1e
 13557 08:3119: 97 52        	sta	[<L494+fp_0],Y
 13558 08:311B: A0 2D 00     	ldy	#$2d
 13559 08:311E: B7 37        	lda	[<L495+fs_1],Y
 13560 08:3120: A0 20 00     	ldy	#$20
 13561 08:3123: 97 52        	sta	[<L494+fp_0],Y
 13562                        ;			fp->dir_ptr = dj.dir;
 13563                        	.line	3881
 13564 08:3125: A5 27        	lda	<L495+dj_1+28
 13565 08:3127: A0 22 00     	ldy	#$22
 13566 08:312A: 97 52        	sta	[<L494+fp_0],Y
  Thu Dec  3 2020 22:25                                                Page 270


 13567 08:312C: A5 29        	lda	<L495+dj_1+30
 13568 08:312E: A0 24 00     	ldy	#$24
 13569 08:3131: 97 52        	sta	[<L494+fp_0],Y
 13570                        ;#if FF_FS_LOCK != 0
 13571                        ;			fp->obj.lockid = inc_lock(&dj, (
                    mode & ~FA_READ) ? 1 : 0);	/* Lock the file for this sessio
                    n */
 13572                        ;			if (fp->obj.lockid == 0) res = F
                    R_INT_ERR;
 13573                        ;#endif
 13574                        ;		}
 13575                        	.line	3886
 13576                        ;#else		/* R/O configuration */
 13577                        ;		if (res == FR_OK) {
 13578                        ;			if (dj.fn[NSFLAG] & NS_NONAME) {
                    	/* Is it origin directory itself? */
 13579                        ;				res = FR_INVALID_NAME;
 13580                        ;			} else {
 13581                        ;				if (dj.obj.attr & AM_DIR
                    ) {		/* Is it a directory? */
 13582                        ;					res = FR_NO_FILE
                    ;
 13583                        ;				}
 13584                        ;			}
 13585                        ;		}
 13586                        ;#endif
 13587                        ;
 13588                        ;		if (res == FR_OK) {
 13589                        L10241:
 13590                        	.line	3899
 13591 08:3133: A5 09        	lda	<L495+res_1
 13592 08:3135: F0 03        	beq	L517
 13593 08:3137: 82 22 02     	brl	L10243
 13594                        L517:
 13595                        	.line	3899
 13596                        ;#if FF_FS_EXFAT
 13597                        ;			if (fs->fs_type == FS_EXFAT) {
 13598                        ;				fp->obj.c_scl = dj.obj.s
                    clust;							
                    /* Get containing directory info */
 13599                        ;				fp->obj.c_size = ((DWORD
                    )dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 13600                        ;				fp->obj.c_ofs = dj.blk_o
                    fs;
 13601                        ;				init_alloc_info(fs, &fp-
                    >obj);
 13602                        ;			} else
 13603                        ;#endif
 13604                        ;			{
 13605                        	.line	3908
 13606                        ;				fp->obj.sclust = ld_clus
                    t(fs, dj.dir);					/* Get o
                    bject allocation info */
 13607                        	.line	3909
 13608 08:313A: D4 29        	pei	<L495+dj_1+30
 13609 08:313C: D4 27        	pei	<L495+dj_1+28
 13610 08:313E: D4 39        	pei	<L495+fs_1+2
 13611 08:3140: D4 37        	pei	<L495+fs_1
  Thu Dec  3 2020 22:25                                                Page 271


 13612 08:3142: 22 73 17 08  	jsl	~~ld_clust
 13613 08:3146: 85 01        	sta	<R0
 13614 08:3148: 86 03        	stx	<R0+2
 13615 08:314A: A5 01        	lda	<R0
 13616 08:314C: A0 08 00     	ldy	#$8
 13617 08:314F: 97 52        	sta	[<L494+fp_0],Y
 13618 08:3151: A5 03        	lda	<R0+2
 13619 08:3153: A0 0A 00     	ldy	#$a
 13620 08:3156: 97 52        	sta	[<L494+fp_0],Y
 13621                        ;				fp->obj.objsize = ld_dwo
                    rd(dj.dir + DIR_FileSize);
 13622                        	.line	3910
 13623 08:3158: 18           	clc
 13624 08:3159: A9 1C 00     	lda	#$1c
 13625 08:315C: 65 27        	adc	<L495+dj_1+28
 13626 08:315E: 85 01        	sta	<R0
 13627 08:3160: A9 00 00     	lda	#$0
 13628 08:3163: 65 29        	adc	<L495+dj_1+30
 13629 08:3165: 85 03        	sta	<R0+2
 13630 08:3167: D4 03        	pei	<R0+2
 13631 08:3169: D4 01        	pei	<R0
 13632 08:316B: 22 3B 00 08  	jsl	~~ld_dword
 13633 08:316F: 85 05        	sta	<R1
 13634 08:3171: 86 07        	stx	<R1+2
 13635 08:3173: A5 05        	lda	<R1
 13636 08:3175: A0 0C 00     	ldy	#$c
 13637 08:3178: 97 52        	sta	[<L494+fp_0],Y
 13638 08:317A: A5 07        	lda	<R1+2
 13639 08:317C: A0 0E 00     	ldy	#$e
 13640 08:317F: 97 52        	sta	[<L494+fp_0],Y
 13641                        ;			}
 13642                        	.line	3911
 13643                        ;#if FF_USE_FASTSEEK
 13644                        ;			fp->cltbl = 0;			
                    /* Disable fast seek mode */
 13645                        ;#endif
 13646                        ;			fp->obj.fs = fs;	 	
                    /* Validate the file object */
 13647                        	.line	3915
 13648 08:3181: A5 37        	lda	<L495+fs_1
 13649 08:3183: 87 52        	sta	[<L494+fp_0]
 13650 08:3185: A5 39        	lda	<L495+fs_1+2
 13651 08:3187: A0 02 00     	ldy	#$2
 13652 08:318A: 97 52        	sta	[<L494+fp_0],Y
 13653                        ;			fp->obj.id = fs->id;
 13654                        	.line	3916
 13655 08:318C: A0 05 00     	ldy	#$5
 13656 08:318F: B7 37        	lda	[<L495+fs_1],Y
 13657 08:3191: A0 04 00     	ldy	#$4
 13658 08:3194: 97 52        	sta	[<L494+fp_0],Y
 13659                        ;			fp->flag = mode;		
                    /* Set file access mode */
 13660                        	.line	3917
 13661 08:3196: E2 20        	sep	#$20
 13662                        	longa	off
 13663 08:3198: A5 5A        	lda	<L494+mode_0
 13664 08:319A: A0 10 00     	ldy	#$10
 13665 08:319D: 97 52        	sta	[<L494+fp_0],Y
  Thu Dec  3 2020 22:25                                                Page 272


 13666 08:319F: C2 20        	rep	#$20
 13667                        	longa	on
 13668                        ;			fp->err = 0;			
                    /* Clear error flag */
 13669                        	.line	3918
 13670 08:31A1: E2 20        	sep	#$20
 13671                        	longa	off
 13672 08:31A3: A9 00        	lda	#$0
 13673 08:31A5: A0 11 00     	ldy	#$11
 13674 08:31A8: 97 52        	sta	[<L494+fp_0],Y
 13675 08:31AA: C2 20        	rep	#$20
 13676                        	longa	on
 13677                        ;			fp->sect = 0;			
                    /* Invalidate current data sector */
 13678                        	.line	3919
 13679 08:31AC: A9 00 00     	lda	#$0
 13680 08:31AF: A0 1A 00     	ldy	#$1a
 13681 08:31B2: 97 52        	sta	[<L494+fp_0],Y
 13682 08:31B4: A9 00 00     	lda	#$0
 13683 08:31B7: A0 1C 00     	ldy	#$1c
 13684 08:31BA: 97 52        	sta	[<L494+fp_0],Y
 13685                        ;			fp->fptr = 0;			
                    /* Set file pointer top of the file */
 13686                        	.line	3920
 13687 08:31BC: A9 00 00     	lda	#$0
 13688 08:31BF: A0 12 00     	ldy	#$12
 13689 08:31C2: 97 52        	sta	[<L494+fp_0],Y
 13690 08:31C4: A9 00 00     	lda	#$0
 13691 08:31C7: A0 14 00     	ldy	#$14
 13692 08:31CA: 97 52        	sta	[<L494+fp_0],Y
 13693                        ;#if !FF_FS_READONLY
 13694                        ;#if !FF_FS_TINY
 13695                        ;			mem_set(fp->buf, 0, sizeof fp->b
                    uf);	/* Clear sector buffer */
 13696                        	.line	3923
 13697 08:31CC: F4 00 02     	pea	#<$200
 13698 08:31CF: F4 00 00     	pea	#<$0
 13699 08:31D2: 18           	clc
 13700 08:31D3: A9 26 00     	lda	#$26
 13701 08:31D6: 65 52        	adc	<L494+fp_0
 13702 08:31D8: 85 01        	sta	<R0
 13703 08:31DA: A9 00 00     	lda	#$0
 13704 08:31DD: 65 54        	adc	<L494+fp_0+2
 13705 08:31DF: 85 03        	sta	<R0+2
 13706 08:31E1: D4 03        	pei	<R0+2
 13707 08:31E3: D4 01        	pei	<R0
 13708 08:31E5: 22 DF 01 08  	jsl	~~mem_set
 13709                        ;#endif
 13710                        ;			if ((mode & FA_SEEKEND) && fp->o
                    bj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND
                     is specified */
 13711                        	.line	3925
 13712 08:31E9: E2 20        	sep	#$20
 13713                        	longa	off
 13714 08:31EB: A5 5A        	lda	<L494+mode_0
 13715 08:31ED: 29 20        	and	#<$20
 13716 08:31EF: C2 20        	rep	#$20
 13717                        	longa	on
  Thu Dec  3 2020 22:25                                                Page 273


 13718 08:31F1: D0 03        	bne	L518
 13719 08:31F3: 82 66 01     	brl	L10244
 13720                        L518:
 13721 08:31F6: A9 00 00     	lda	#$0
 13722 08:31F9: A0 0C 00     	ldy	#$c
 13723 08:31FC: D7 52        	cmp	[<L494+fp_0],Y
 13724 08:31FE: A9 00 00     	lda	#$0
 13725 08:3201: A0 0E 00     	ldy	#$e
 13726 08:3204: F7 52        	sbc	[<L494+fp_0],Y
 13727 08:3206: 90 03        	bcc	L519
 13728 08:3208: 82 51 01     	brl	L10244
 13729                        L519:
 13730                        	.line	3925
 13731                        ;				fp->fptr = fp->obj.objsi
                    ze;			/* Offset to seek */
 13732                        	.line	3926
 13733 08:320B: A0 0C 00     	ldy	#$c
 13734 08:320E: B7 52        	lda	[<L494+fp_0],Y
 13735 08:3210: A0 12 00     	ldy	#$12
 13736 08:3213: 97 52        	sta	[<L494+fp_0],Y
 13737 08:3215: A0 0E 00     	ldy	#$e
 13738 08:3218: B7 52        	lda	[<L494+fp_0],Y
 13739 08:321A: A0 14 00     	ldy	#$14
 13740 08:321D: 97 52        	sta	[<L494+fp_0],Y
 13741                        ;				bcs = (DWORD)fs->csize *
                     SS(fs);	/* Cluster size in byte */
 13742                        	.line	3927
 13743 08:321F: A0 00 00     	ldy	#$0
 13744 08:3222: 5A           	phy
 13745 08:3223: A0 09 00     	ldy	#$9
 13746 08:3226: B7 37        	lda	[<L495+fs_1],Y
 13747 08:3228: 7A           	ply
 13748 08:3229: 2A           	rol	A
 13749 08:322A: 6A           	ror	A
 13750 08:322B: 10 01        	bpl	L520
 13751 08:322D: 88           	dey
 13752                        L520:
 13753 08:322E: 85 01        	sta	<R0
 13754 08:3230: 84 03        	sty	<R0+2
 13755 08:3232: D4 03        	pei	<R0+2
 13756 08:3234: D4 01        	pei	<R0
 13757 08:3236: A9 09 00     	lda	#$9
 13758                        	xref	~~~lasl
 13759 08:3239: 22 xx xx xx  	jsl	~~~lasl
 13760 08:323D: 85 3F        	sta	<L495+bcs_1
 13761 08:323F: 86 41        	stx	<L495+bcs_1+2
 13762                        ;				clst = fp->obj.sclust;	
                    			/* Follow the cluster chain */
 13763                        	.line	3928
 13764 08:3241: A0 08 00     	ldy	#$8
 13765 08:3244: B7 52        	lda	[<L494+fp_0],Y
 13766 08:3246: 85 43        	sta	<L495+clst_1
 13767 08:3248: A0 0A 00     	ldy	#$a
 13768 08:324B: B7 52        	lda	[<L494+fp_0],Y
 13769 08:324D: 85 45        	sta	<L495+clst_1+2
 13770                        ;				for (ofs = fp->obj.objsi
                    ze; res == FR_OK && ofs > bcs; ofs -= bcs) {
 13771                        	.line	3929
  Thu Dec  3 2020 22:25                                                Page 274


 13772 08:324F: A0 0C 00     	ldy	#$c
 13773 08:3252: B7 52        	lda	[<L494+fp_0],Y
 13774 08:3254: 85 4B        	sta	<L495+ofs_1
 13775 08:3256: A0 0E 00     	ldy	#$e
 13776 08:3259: B7 52        	lda	[<L494+fp_0],Y
 13777 08:325B: 85 4D        	sta	<L495+ofs_1+2
 13778 08:325D: 82 47 00     	brl	L10248
 13779                        L10247:
 13780                        	.line	3929
 13781                        ;					clst = get_fat(&
                    fp->obj, clst);
 13782                        	.line	3930
 13783 08:3260: D4 45        	pei	<L495+clst_1+2
 13784 08:3262: D4 43        	pei	<L495+clst_1
 13785 08:3264: D4 54        	pei	<L494+fp_0+2
 13786 08:3266: D4 52        	pei	<L494+fp_0
 13787 08:3268: 22 8D 06 08  	jsl	~~get_fat
 13788 08:326C: 85 43        	sta	<L495+clst_1
 13789 08:326E: 86 45        	stx	<L495+clst_1+2
 13790                        ;					if (clst <= 1) r
                    es = FR_INT_ERR;
 13791                        	.line	3931
 13792 08:3270: A9 01 00     	lda	#$1
 13793 08:3273: C5 43        	cmp	<L495+clst_1
 13794 08:3275: A9 00 00     	lda	#$0
 13795 08:3278: E5 45        	sbc	<L495+clst_1+2
 13796 08:327A: B0 03        	bcs	L521
 13797 08:327C: 82 05 00     	brl	L10249
 13798                        L521:
 13799                        	.line	3931
 13800 08:327F: A9 02 00     	lda	#$2
 13801 08:3282: 85 09        	sta	<L495+res_1
 13802                        ;					if (clst == 0xFF
                    FFFFFF) res = FR_DISK_ERR;
 13803                        L10249:
 13804                        	.line	3932
 13805 08:3284: A5 43        	lda	<L495+clst_1
 13806 08:3286: C9 FF FF     	cmp	#<$ffffffff
 13807 08:3289: D0 05        	bne	L522
 13808 08:328B: A5 45        	lda	<L495+clst_1+2
 13809 08:328D: C9 FF FF     	cmp	#^$ffffffff
 13810                        L522:
 13811 08:3290: F0 03        	beq	L523
 13812 08:3292: 82 05 00     	brl	L10250
 13813                        L523:
 13814                        	.line	3932
 13815 08:3295: A9 01 00     	lda	#$1
 13816 08:3298: 85 09        	sta	<L495+res_1
 13817                        ;				}
 13818                        L10250:
 13819                        	.line	3933
 13820                        L10245:
 13821 08:329A: 38           	sec
 13822 08:329B: A5 4B        	lda	<L495+ofs_1
 13823 08:329D: E5 3F        	sbc	<L495+bcs_1
 13824 08:329F: 85 4B        	sta	<L495+ofs_1
 13825 08:32A1: A5 4D        	lda	<L495+ofs_1+2
 13826 08:32A3: E5 41        	sbc	<L495+bcs_1+2
  Thu Dec  3 2020 22:25                                                Page 275


 13827 08:32A5: 85 4D        	sta	<L495+ofs_1+2
 13828                        L10248:
 13829 08:32A7: A5 09        	lda	<L495+res_1
 13830 08:32A9: F0 03        	beq	L525
 13831 08:32AB: 82 0D 00     	brl	L524
 13832                        L525:
 13833 08:32AE: A5 3F        	lda	<L495+bcs_1
 13834 08:32B0: C5 4B        	cmp	<L495+ofs_1
 13835 08:32B2: A5 41        	lda	<L495+bcs_1+2
 13836 08:32B4: E5 4D        	sbc	<L495+ofs_1+2
 13837 08:32B6: B0 03        	bcs	L526
 13838 08:32B8: 82 A5 FF     	brl	L10247
 13839                        L526:
 13840                        L524:
 13841                        L10246:
 13842                        ;				fp->clust = clst;
 13843                        	.line	3934
 13844 08:32BB: A5 43        	lda	<L495+clst_1
 13845 08:32BD: A0 16 00     	ldy	#$16
 13846 08:32C0: 97 52        	sta	[<L494+fp_0],Y
 13847 08:32C2: A5 45        	lda	<L495+clst_1+2
 13848 08:32C4: A0 18 00     	ldy	#$18
 13849 08:32C7: 97 52        	sta	[<L494+fp_0],Y
 13850                        ;				if (res == FR_OK && ofs 
                    % SS(fs)) {	/* Fill sector buffer if not on the sector bound
                    ary */
 13851                        	.line	3935
 13852 08:32C9: A5 09        	lda	<L495+res_1
 13853 08:32CB: F0 03        	beq	L527
 13854 08:32CD: 82 8C 00     	brl	L10251
 13855                        L527:
 13856 08:32D0: A5 4B        	lda	<L495+ofs_1
 13857 08:32D2: 29 FF 01     	and	#<$1ff
 13858 08:32D5: D0 03        	bne	L528
 13859 08:32D7: 82 82 00     	brl	L10251
 13860                        L528:
 13861                        	.line	3935
 13862                        ;					sc = clst2sect(f
                    s, clst);
 13863                        	.line	3936
 13864 08:32DA: D4 45        	pei	<L495+clst_1+2
 13865 08:32DC: D4 43        	pei	<L495+clst_1
 13866 08:32DE: D4 39        	pei	<L495+fs_1+2
 13867 08:32E0: D4 37        	pei	<L495+fs_1
 13868 08:32E2: 22 FE 05 08  	jsl	~~clst2sect
 13869 08:32E6: 85 47        	sta	<L495+sc_1
 13870 08:32E8: 86 49        	stx	<L495+sc_1+2
 13871                        ;					if (sc == 0) {
 13872                        	.line	3937
 13873 08:32EA: A5 47        	lda	<L495+sc_1
 13874 08:32EC: 05 49        	ora	<L495+sc_1+2
 13875 08:32EE: F0 03        	beq	L529
 13876 08:32F0: 82 08 00     	brl	L10252
 13877                        L529:
 13878                        	.line	3937
 13879                        ;						res = FR
                    _INT_ERR;
 13880                        	.line	3938
  Thu Dec  3 2020 22:25                                                Page 276


 13881 08:32F3: A9 02 00     	lda	#$2
 13882 08:32F6: 85 09        	sta	<L495+res_1
 13883                        ;					} else {
 13884                        	.line	3939
 13885 08:32F8: 82 61 00     	brl	L10253
 13886                        L10252:
 13887                        	.line	3939
 13888                        ;						fp->sect
                     = sc + (DWORD)(ofs / SS(fs));
 13889                        	.line	3940
 13890 08:32FB: D4 4D        	pei	<L495+ofs_1+2
 13891 08:32FD: D4 4B        	pei	<L495+ofs_1
 13892 08:32FF: A9 09 00     	lda	#$9
 13893                        	xref	~~~llsr
 13894 08:3302: 22 xx xx xx  	jsl	~~~llsr
 13895 08:3306: 85 01        	sta	<R0
 13896 08:3308: 86 03        	stx	<R0+2
 13897 08:330A: 18           	clc
 13898 08:330B: A5 01        	lda	<R0
 13899 08:330D: 65 47        	adc	<L495+sc_1
 13900 08:330F: 85 05        	sta	<R1
 13901 08:3311: A5 03        	lda	<R0+2
 13902 08:3313: 65 49        	adc	<L495+sc_1+2
 13903 08:3315: 85 07        	sta	<R1+2
 13904 08:3317: A5 05        	lda	<R1
 13905 08:3319: A0 1A 00     	ldy	#$1a
 13906 08:331C: 97 52        	sta	[<L494+fp_0],Y
 13907 08:331E: A5 07        	lda	<R1+2
 13908 08:3320: A0 1C 00     	ldy	#$1c
 13909 08:3323: 97 52        	sta	[<L494+fp_0],Y
 13910                        ;#if !FF_FS_TINY
 13911                        ;						if (disk
                    _read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DI
                    SK_ERR;
 13912                        	.line	3942
 13913 08:3325: F4 01 00     	pea	#<$1
 13914 08:3328: A0 1C 00     	ldy	#$1c
 13915 08:332B: B7 52        	lda	[<L494+fp_0],Y
 13916 08:332D: 48           	pha
 13917 08:332E: A0 1A 00     	ldy	#$1a
 13918 08:3331: B7 52        	lda	[<L494+fp_0],Y
 13919 08:3333: 48           	pha
 13920 08:3334: 18           	clc
 13921 08:3335: A9 26 00     	lda	#$26
 13922 08:3338: 65 52        	adc	<L494+fp_0
 13923 08:333A: 85 01        	sta	<R0
 13924 08:333C: A9 00 00     	lda	#$0
 13925 08:333F: 65 54        	adc	<L494+fp_0+2
 13926 08:3341: 85 03        	sta	<R0+2
 13927 08:3343: D4 03        	pei	<R0+2
 13928 08:3345: D4 01        	pei	<R0
 13929 08:3347: A0 01 00     	ldy	#$1
 13930 08:334A: B7 37        	lda	[<L495+fs_1],Y
 13931 08:334C: 48           	pha
 13932 08:334D: 22 xx xx xx  	jsl	~~disk_read
 13933 08:3351: AA           	tax
 13934 08:3352: D0 03        	bne	L530
 13935 08:3354: 82 05 00     	brl	L10254
  Thu Dec  3 2020 22:25                                                Page 277


 13936                        L530:
 13937                        	.line	3942
 13938 08:3357: A9 01 00     	lda	#$1
 13939 08:335A: 85 09        	sta	<L495+res_1
 13940                        ;#endif
 13941                        ;					}
 13942                        L10254:
 13943                        	.line	3944
 13944                        L10253:
 13945                        ;				}
 13946                        	.line	3945
 13947                        ;			}
 13948                        L10251:
 13949                        	.line	3946
 13950                        ;#endif
 13951                        ;		}
 13952                        L10244:
 13953                        	.line	3948
 13954                        ;
 13955                        ;		FREE_NAMBUF();
 13956                        L10243:
 13957                        	.line	3950
 13958                        ;	}
 13959                        	.line	3951
 13960                        ;
 13961                        ;	if (res != FR_OK) fp->obj.fs = 0;	/* Inval
                    idate file object on error */
 13962                        L10223:
 13963                        	.line	3953
 13964 08:335C: A5 09        	lda	<L495+res_1
 13965 08:335E: D0 03        	bne	L531
 13966 08:3360: 82 0D 00     	brl	L10255
 13967                        L531:
 13968                        	.line	3953
 13969 08:3363: A9 00 00     	lda	#$0
 13970 08:3366: 87 52        	sta	[<L494+fp_0]
 13971 08:3368: A9 00 00     	lda	#$0
 13972 08:336B: A0 02 00     	ldy	#$2
 13973 08:336E: 97 52        	sta	[<L494+fp_0],Y
 13974                        ;
 13975                        ;	LEAVE_FF(fs, res);
 13976                        L10255:
 13977                        	.line	3955
 13978 08:3370: A5 09        	lda	<L495+res_1
 13979 08:3372: 82 7C FB     	brl	L498
 13980                        ;}
 13981                        	.line	3956
 13982                        	.endblock	3956
 13983             0000004E   L494	equ	78
 13984             00000009   L495	equ	9
 13985 08:3375:              	ends
 13986                        	efunc
 13987                        	.endfunc	3956,9,78
 13988                        	.line	3956
 13989                        	data
 13990                        L473:
 13991 00:023E: 66 5F 6F 70  	db	$66,$5F,$6F,$70,$65,$6E,$2E,$2E,$2E,$0D,
                    $0A,$00,$66,$5F,$6F
  Thu Dec  3 2020 22:25                                                Page 278


       00:0242: 65 6E 2E 2E 
       00:0246: 2E 0D 0A 00 
       00:024A: 66 5F 6F 
 13992 00:024D: 70 65 6E 20  	db	$70,$65,$6E,$20,$6D,$6F,$64,$65,$3A,$00
       00:0251: 6D 6F 64 65 
       00:0255: 3A 00 
 13993 00:0257:              	ends
 13994                        ;
 13995                        ;
 13996                        ;
 13997                        ;
 13998                        ;/*-----------------------------------------------
                    ------------------------*/
 13999                        ;/* Read File                                     
                                            */
 14000                        ;/*-----------------------------------------------
                    ------------------------*/
 14001                        ;
 14002                        ;FRESULT f_read (
 14003                        ;	FIL* fp, 	/* Pointer to the file object */
 14004                        ;	void* buff,	/* Pointer to data buffer */
 14005                        ;	UINT btr,	/* Number of bytes to read */
 14006                        ;	UINT* br	/* Pointer to number of bytes re
                    ad */
 14007                        ;)
 14008                        ;{
 14009                        	.line	3965
 14010                        	.line	3971
 14011                        	FFDOS
 14012                        	xdef	~~f_read
 14013                        	func
 14014                        	.function	3971
 14015                        ~~f_read:
 14016                        	longa	on
 14017                        	longi	on
 14018 08:3375: 3B           	tsc
 14019 08:3376: 38           	sec
 14020 08:3377: E9 2C 00     	sbc	#L533
 14021 08:337A: 1B           	tcs
 14022 08:337B: 0B           	phd
 14023 08:337C: 5B           	tcd
 14024             00000004   fp_0	set	4
 14025             00000008   buff_0	set	8
 14026             0000000C   btr_0	set	12
 14027             0000000E   br_0	set	14
 14028                        	.block	3971
 14029                        ;	FRESULT res;
 14030                        ;	FATFS *fs;
 14031                        ;	DWORD clst;
 14032                        ;	LBA_t sect;
 14033                        ;	FSIZE_t remain;
 14034                        ;	UINT rcnt, cc, csect;
 14035                        ;	BYTE *rbuff = (BYTE*)buff;
 14036                        ;
 14037                        ;
 14038                        ;	*br = 0;	/* Clear read byte counter */
 14039             00000000   res_1	set	0
 14040             00000002   fs_1	set	2
  Thu Dec  3 2020 22:25                                                Page 279


 14041             00000006   clst_1	set	6
 14042             0000000A   sect_1	set	10
 14043             0000000E   remain_1	set	14
 14044             00000012   rcnt_1	set	18
 14045             00000014   cc_1	set	20
 14046             00000016   csect_1	set	22
 14047             00000018   rbuff_1	set	24
 14048                        	.sym	res,0,5,1,16
 14049                        	.sym	fs,2,138,1,32,80
 14050                        	.sym	clst,6,18,1,32
 14051                        	.sym	sect,10,18,1,32
 14052                        	.sym	remain,14,18,1,32
 14053                        	.sym	rcnt,18,16,1,16
 14054                        	.sym	cc,20,16,1,16
 14055                        	.sym	csect,22,16,1,16
 14056                        	.sym	rbuff,24,142,1,32
 14057                        	.sym	fp,4,138,6,32,82
 14058                        	.sym	buff,8,129,6,32
 14059                        	.sym	btr,12,16,6,16
 14060                        	.sym	br,14,144,6,32
 14061 08:337D: A5 34        	lda	<L533+buff_0
 14062 08:337F: 85 29        	sta	<L534+rbuff_1
 14063 08:3381: A5 36        	lda	<L533+buff_0+2
 14064 08:3383: 85 2B        	sta	<L534+rbuff_1+2
 14065                        	.line	3981
 14066 08:3385: A9 00 00     	lda	#$0
 14067 08:3388: 87 3A        	sta	[<L533+br_0]
 14068                        ;	res = validate(&fp->obj, &fs);			
                    	/* Check validity of the file object */
 14069                        	.line	3982
 14070 08:338A: F4 00 00     	pea	#0
 14071 08:338D: 18           	clc
 14072 08:338E: 7B           	tdc
 14073 08:338F: 69 13 00     	adc	#<L534+fs_1
 14074 08:3392: 48           	pha
 14075 08:3393: D4 32        	pei	<L533+fp_0+2
 14076 08:3395: D4 30        	pei	<L533+fp_0
 14077 08:3397: 22 66 2D 08  	jsl	~~validate
 14078 08:339B: 85 11        	sta	<L534+res_1
 14079                        ;	if (res != FR_OK || (res = (FRESULT)fp->err) != 
                    FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 14080                        	.line	3983
 14081 08:339D: A5 11        	lda	<L534+res_1
 14082 08:339F: F0 03        	beq	L537
 14083 08:33A1: 82 11 00     	brl	L536
 14084                        L537:
 14085 08:33A4: A0 11 00     	ldy	#$11
 14086 08:33A7: B7 30        	lda	[<L533+fp_0],Y
 14087 08:33A9: 29 FF 00     	and	#$ff
 14088 08:33AC: 85 11        	sta	<L534+res_1
 14089 08:33AE: A5 11        	lda	<L534+res_1
 14090 08:33B0: D0 03        	bne	L538
 14091 08:33B2: 82 14 00     	brl	L10256
 14092                        L538:
 14093                        L536:
 14094                        	.line	3983
 14095 08:33B5: A5 11        	lda	<L534+res_1
 14096                        L539:
  Thu Dec  3 2020 22:25                                                Page 280


 14097 08:33B7: A8           	tay
 14098 08:33B8: A5 2E        	lda	<L533+2
 14099 08:33BA: 85 3C        	sta	<L533+2+14
 14100 08:33BC: A5 2D        	lda	<L533+1
 14101 08:33BE: 85 3B        	sta	<L533+1+14
 14102 08:33C0: 2B           	pld
 14103 08:33C1: 3B           	tsc
 14104 08:33C2: 18           	clc
 14105 08:33C3: 69 3A 00     	adc	#L533+14
 14106 08:33C6: 1B           	tcs
 14107 08:33C7: 98           	tya
 14108 08:33C8: 6B           	rtl
 14109                        ;	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIE
                    D); /* Check access mode */
 14110                        L10256:
 14111                        	.line	3984
 14112 08:33C9: E2 20        	sep	#$20
 14113                        	longa	off
 14114 08:33CB: A0 10 00     	ldy	#$10
 14115 08:33CE: B7 30        	lda	[<L533+fp_0],Y
 14116 08:33D0: 29 01        	and	#<$1
 14117 08:33D2: C2 20        	rep	#$20
 14118                        	longa	on
 14119 08:33D4: F0 03        	beq	L540
 14120 08:33D6: 82 06 00     	brl	L10257
 14121                        L540:
 14122                        	.line	3984
 14123 08:33D9: A9 07 00     	lda	#$7
 14124 08:33DC: 82 D8 FF     	brl	L539
 14125                        ;	remain = fp->obj.objsize - fp->fptr;
 14126                        L10257:
 14127                        	.line	3985
 14128 08:33DF: 38           	sec
 14129 08:33E0: A0 0C 00     	ldy	#$c
 14130 08:33E3: B7 30        	lda	[<L533+fp_0],Y
 14131 08:33E5: A0 12 00     	ldy	#$12
 14132 08:33E8: F7 30        	sbc	[<L533+fp_0],Y
 14133 08:33EA: 85 1F        	sta	<L534+remain_1
 14134 08:33EC: A0 0E 00     	ldy	#$e
 14135 08:33EF: B7 30        	lda	[<L533+fp_0],Y
 14136 08:33F1: A0 14 00     	ldy	#$14
 14137 08:33F4: F7 30        	sbc	[<L533+fp_0],Y
 14138 08:33F6: 85 21        	sta	<L534+remain_1+2
 14139                        ;	if (btr > remain) btr = (UINT)remain;		
                    /* Truncate btr by remaining bytes */
 14140                        	.line	3986
 14141 08:33F8: A5 38        	lda	<L533+btr_0
 14142 08:33FA: 85 01        	sta	<R0
 14143 08:33FC: 64 03        	stz	<R0+2
 14144 08:33FE: A5 1F        	lda	<L534+remain_1
 14145 08:3400: C5 01        	cmp	<R0
 14146 08:3402: A5 21        	lda	<L534+remain_1+2
 14147 08:3404: E5 03        	sbc	<R0+2
 14148 08:3406: 90 03        	bcc	L541
 14149 08:3408: 82 04 00     	brl	L10258
 14150                        L541:
 14151                        	.line	3986
 14152 08:340B: A5 1F        	lda	<L534+remain_1
  Thu Dec  3 2020 22:25                                                Page 281


 14153 08:340D: 85 38        	sta	<L533+btr_0
 14154                        ;
 14155                        ;	for ( ;  btr;					
                    			/* Repeat until btr bytes read */
 14156                        L10258:
 14157                        	.line	3988
 14158 08:340F: 82 75 03     	brl	L10262
 14159                        ;		btr -= rcnt, *br += rcnt, rbuff += rcnt,
                     fp->fptr += rcnt) {
 14160                        L10261:
 14161                        	.line	3989
 14162                        ;		if (fp->fptr % SS(fs) == 0) {		
                    	/* On the sector boundary? */
 14163                        	.line	3990
 14164 08:3412: A0 12 00     	ldy	#$12
 14165 08:3415: B7 30        	lda	[<L533+fp_0],Y
 14166 08:3417: 29 FF 01     	and	#<$1ff
 14167 08:341A: F0 03        	beq	L542
 14168 08:341C: 82 CA 02     	brl	L10263
 14169                        L542:
 14170                        	.line	3990
 14171                        ;			csect = (UINT)(fp->fptr / SS(fs)
                     & (fs->csize - 1));	/* Sector offset in the cluster 
                    */
 14172                        	.line	3991
 14173 08:341F: A0 14 00     	ldy	#$14
 14174 08:3422: B7 30        	lda	[<L533+fp_0],Y
 14175 08:3424: 48           	pha
 14176 08:3425: A0 12 00     	ldy	#$12
 14177 08:3428: B7 30        	lda	[<L533+fp_0],Y
 14178 08:342A: 48           	pha
 14179 08:342B: A9 09 00     	lda	#$9
 14180                        	xref	~~~llsr
 14181 08:342E: 22 xx xx xx  	jsl	~~~llsr
 14182 08:3432: 85 01        	sta	<R0
 14183 08:3434: 86 03        	stx	<R0+2
 14184 08:3436: 18           	clc
 14185 08:3437: A9 FF FF     	lda	#$ffff
 14186 08:343A: A0 09 00     	ldy	#$9
 14187 08:343D: 77 13        	adc	[<L534+fs_1],Y
 14188 08:343F: 85 05        	sta	<R1
 14189 08:3441: A0 00 00     	ldy	#$0
 14190 08:3444: A5 05        	lda	<R1
 14191 08:3446: 10 01        	bpl	L543
 14192 08:3448: 88           	dey
 14193                        L543:
 14194 08:3449: 85 05        	sta	<R1
 14195 08:344B: 84 07        	sty	<R1+2
 14196 08:344D: A5 05        	lda	<R1
 14197 08:344F: 25 01        	and	<R0
 14198 08:3451: 85 09        	sta	<R2
 14199 08:3453: A5 07        	lda	<R1+2
 14200 08:3455: 25 03        	and	<R0+2
 14201 08:3457: 85 0B        	sta	<R2+2
 14202 08:3459: A5 09        	lda	<R2
 14203 08:345B: 85 27        	sta	<L534+csect_1
 14204                        ;			if (csect == 0) {		
                    			/* On the cluster boundary? */
  Thu Dec  3 2020 22:25                                                Page 282


 14205                        	.line	3992
 14206 08:345D: A5 27        	lda	<L534+csect_1
 14207 08:345F: F0 03        	beq	L544
 14208 08:3461: 82 88 00     	brl	L10264
 14209                        L544:
 14210                        	.line	3992
 14211                        ;				if (fp->fptr == 0) {	
                    		/* On the top of the file? */
 14212                        	.line	3993
 14213 08:3464: A0 12 00     	ldy	#$12
 14214 08:3467: B7 30        	lda	[<L533+fp_0],Y
 14215 08:3469: A0 14 00     	ldy	#$14
 14216 08:346C: 17 30        	ora	[<L533+fp_0],Y
 14217 08:346E: F0 03        	beq	L545
 14218 08:3470: 82 11 00     	brl	L10265
 14219                        L545:
 14220                        	.line	3993
 14221                        ;					clst = fp->obj.s
                    clust;		/* Follow cluster chain from the origin 
                    */
 14222                        	.line	3994
 14223 08:3473: A0 08 00     	ldy	#$8
 14224 08:3476: B7 30        	lda	[<L533+fp_0],Y
 14225 08:3478: 85 17        	sta	<L534+clst_1
 14226 08:347A: A0 0A 00     	ldy	#$a
 14227 08:347D: B7 30        	lda	[<L533+fp_0],Y
 14228 08:347F: 85 19        	sta	<L534+clst_1+2
 14229                        ;				} else {		
                    				/* Middle or end of the file */
 14230                        	.line	3995
 14231 08:3481: 82 18 00     	brl	L10266
 14232                        L10265:
 14233                        	.line	3995
 14234                        ;#if FF_USE_FASTSEEK
 14235                        ;					if (fp->cltbl) {
 14236                        ;						clst = c
                    lmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 14237                        ;					} else
 14238                        ;#endif
 14239                        ;					{
 14240                        	.line	4001
 14241                        ;						clst = g
                    et_fat(&fp->obj, fp->clust);	/* Follow cluster chain 
                    on the FAT */
 14242                        	.line	4002
 14243 08:3484: A0 18 00     	ldy	#$18
 14244 08:3487: B7 30        	lda	[<L533+fp_0],Y
 14245 08:3489: 48           	pha
 14246 08:348A: A0 16 00     	ldy	#$16
 14247 08:348D: B7 30        	lda	[<L533+fp_0],Y
 14248 08:348F: 48           	pha
 14249 08:3490: D4 32        	pei	<L533+fp_0+2
 14250 08:3492: D4 30        	pei	<L533+fp_0
 14251 08:3494: 22 8D 06 08  	jsl	~~get_fat
 14252 08:3498: 85 17        	sta	<L534+clst_1
 14253 08:349A: 86 19        	stx	<L534+clst_1+2
 14254                        ;					}
 14255                        	.line	4003
  Thu Dec  3 2020 22:25                                                Page 283


 14256                        ;				}
 14257                        	.line	4004
 14258                        L10266:
 14259                        ;				if (clst < 2) ABORT(fs, 
                    FR_INT_ERR);
 14260                        	.line	4005
 14261 08:349C: A5 17        	lda	<L534+clst_1
 14262 08:349E: C9 02 00     	cmp	#<$2
 14263 08:34A1: A5 19        	lda	<L534+clst_1+2
 14264 08:34A3: E9 00 00     	sbc	#^$2
 14265 08:34A6: 90 03        	bcc	L546
 14266 08:34A8: 82 11 00     	brl	L10267
 14267                        L546:
 14268                        	.line	4005
 14269                        	.line	4005
 14270 08:34AB: E2 20        	sep	#$20
 14271                        	longa	off
 14272 08:34AD: A9 02        	lda	#$2
 14273 08:34AF: A0 11 00     	ldy	#$11
 14274 08:34B2: 97 30        	sta	[<L533+fp_0],Y
 14275 08:34B4: C2 20        	rep	#$20
 14276                        	longa	on
 14277                        	.line	4005
 14278 08:34B6: A9 02 00     	lda	#$2
 14279 08:34B9: 82 FB FE     	brl	L539
 14280                        	.line	4005
 14281                        L10267:
 14282                        	.line	4005
 14283                        ;				if (clst == 0xFFFFFFFF) 
                    ABORT(fs, FR_DISK_ERR);
 14284                        	.line	4006
 14285 08:34BC: A5 17        	lda	<L534+clst_1
 14286 08:34BE: C9 FF FF     	cmp	#<$ffffffff
 14287 08:34C1: D0 05        	bne	L547
 14288 08:34C3: A5 19        	lda	<L534+clst_1+2
 14289 08:34C5: C9 FF FF     	cmp	#^$ffffffff
 14290                        L547:
 14291 08:34C8: F0 03        	beq	L548
 14292 08:34CA: 82 11 00     	brl	L10268
 14293                        L548:
 14294                        	.line	4006
 14295                        	.line	4006
 14296 08:34CD: E2 20        	sep	#$20
 14297                        	longa	off
 14298 08:34CF: A9 01        	lda	#$1
 14299 08:34D1: A0 11 00     	ldy	#$11
 14300 08:34D4: 97 30        	sta	[<L533+fp_0],Y
 14301 08:34D6: C2 20        	rep	#$20
 14302                        	longa	on
 14303                        	.line	4006
 14304 08:34D8: A9 01 00     	lda	#$1
 14305 08:34DB: 82 D9 FE     	brl	L539
 14306                        	.line	4006
 14307                        L10268:
 14308                        	.line	4006
 14309                        ;				fp->clust = clst;	
                    			/* Update current cluster */
 14310                        	.line	4007
  Thu Dec  3 2020 22:25                                                Page 284


 14311 08:34DE: A5 17        	lda	<L534+clst_1
 14312 08:34E0: A0 16 00     	ldy	#$16
 14313 08:34E3: 97 30        	sta	[<L533+fp_0],Y
 14314 08:34E5: A5 19        	lda	<L534+clst_1+2
 14315 08:34E7: A0 18 00     	ldy	#$18
 14316 08:34EA: 97 30        	sta	[<L533+fp_0],Y
 14317                        ;			}
 14318                        	.line	4008
 14319                        ;			sect = clst2sect(fs, fp->clust);
                    	/* Get current sector */
 14320                        L10264:
 14321                        	.line	4009
 14322 08:34EC: A0 18 00     	ldy	#$18
 14323 08:34EF: B7 30        	lda	[<L533+fp_0],Y
 14324 08:34F1: 48           	pha
 14325 08:34F2: A0 16 00     	ldy	#$16
 14326 08:34F5: B7 30        	lda	[<L533+fp_0],Y
 14327 08:34F7: 48           	pha
 14328 08:34F8: D4 15        	pei	<L534+fs_1+2
 14329 08:34FA: D4 13        	pei	<L534+fs_1
 14330 08:34FC: 22 FE 05 08  	jsl	~~clst2sect
 14331 08:3500: 85 1B        	sta	<L534+sect_1
 14332 08:3502: 86 1D        	stx	<L534+sect_1+2
 14333                        ;			if (sect == 0) ABORT(fs, FR_INT_
                    ERR);
 14334                        	.line	4010
 14335 08:3504: A5 1B        	lda	<L534+sect_1
 14336 08:3506: 05 1D        	ora	<L534+sect_1+2
 14337 08:3508: F0 03        	beq	L549
 14338 08:350A: 82 11 00     	brl	L10269
 14339                        L549:
 14340                        	.line	4010
 14341                        	.line	4010
 14342 08:350D: E2 20        	sep	#$20
 14343                        	longa	off
 14344 08:350F: A9 02        	lda	#$2
 14345 08:3511: A0 11 00     	ldy	#$11
 14346 08:3514: 97 30        	sta	[<L533+fp_0],Y
 14347 08:3516: C2 20        	rep	#$20
 14348                        	longa	on
 14349                        	.line	4010
 14350 08:3518: A9 02 00     	lda	#$2
 14351 08:351B: 82 99 FE     	brl	L539
 14352                        	.line	4010
 14353                        L10269:
 14354                        	.line	4010
 14355                        ;			sect += csect;
 14356                        	.line	4011
 14357 08:351E: A5 27        	lda	<L534+csect_1
 14358 08:3520: 85 01        	sta	<R0
 14359 08:3522: 64 03        	stz	<R0+2
 14360 08:3524: 18           	clc
 14361 08:3525: A5 01        	lda	<R0
 14362 08:3527: 65 1B        	adc	<L534+sect_1
 14363 08:3529: 85 1B        	sta	<L534+sect_1
 14364 08:352B: A5 03        	lda	<R0+2
 14365 08:352D: 65 1D        	adc	<L534+sect_1+2
 14366 08:352F: 85 1D        	sta	<L534+sect_1+2
  Thu Dec  3 2020 22:25                                                Page 285


 14367                        ;			cc = btr / SS(fs);		
                    			/* When remaining bytes >= sector size, 
                    */
 14368                        	.line	4012
 14369 08:3531: A5 38        	lda	<L533+btr_0
 14370 08:3533: A2 09 00     	ldx	#<$9
 14371                        	xref	~~~lsr
 14372 08:3536: 22 xx xx xx  	jsl	~~~lsr
 14373 08:353A: 85 25        	sta	<L534+cc_1
 14374                        ;			if (cc > 0) {			
                    			/* Read maximum contiguous sectors direc
                    tly */
 14375                        	.line	4013
 14376 08:353C: A9 00 00     	lda	#$0
 14377 08:353F: C5 25        	cmp	<L534+cc_1
 14378 08:3541: 90 03        	bcc	L550
 14379 08:3543: 82 D9 00     	brl	L10270
 14380                        L550:
 14381                        	.line	4013
 14382                        ;				if (csect + cc > fs->csi
                    ze) {	/* Clip at cluster boundary */
 14383                        	.line	4014
 14384 08:3546: 18           	clc
 14385 08:3547: A5 27        	lda	<L534+csect_1
 14386 08:3549: 65 25        	adc	<L534+cc_1
 14387 08:354B: 85 01        	sta	<R0
 14388 08:354D: A0 09 00     	ldy	#$9
 14389 08:3550: B7 13        	lda	[<L534+fs_1],Y
 14390 08:3552: C5 01        	cmp	<R0
 14391 08:3554: 90 03        	bcc	L551
 14392 08:3556: 82 0A 00     	brl	L10271
 14393                        L551:
 14394                        	.line	4014
 14395                        ;					cc = fs->csize -
                     csect;
 14396                        	.line	4015
 14397 08:3559: 38           	sec
 14398 08:355A: A0 09 00     	ldy	#$9
 14399 08:355D: B7 13        	lda	[<L534+fs_1],Y
 14400 08:355F: E5 27        	sbc	<L534+csect_1
 14401 08:3561: 85 25        	sta	<L534+cc_1
 14402                        ;				}
 14403                        	.line	4016
 14404                        ;				if (disk_read(fs->pdrv, 
                    rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 14405                        L10271:
 14406                        	.line	4017
 14407 08:3563: D4 25        	pei	<L534+cc_1
 14408 08:3565: D4 1D        	pei	<L534+sect_1+2
 14409 08:3567: D4 1B        	pei	<L534+sect_1
 14410 08:3569: D4 2B        	pei	<L534+rbuff_1+2
 14411 08:356B: D4 29        	pei	<L534+rbuff_1
 14412 08:356D: A0 01 00     	ldy	#$1
 14413 08:3570: B7 13        	lda	[<L534+fs_1],Y
 14414 08:3572: 48           	pha
 14415 08:3573: 22 xx xx xx  	jsl	~~disk_read
 14416 08:3577: AA           	tax
 14417 08:3578: D0 03        	bne	L552
  Thu Dec  3 2020 22:25                                                Page 286


 14418 08:357A: 82 11 00     	brl	L10272
 14419                        L552:
 14420                        	.line	4017
 14421                        	.line	4017
 14422 08:357D: E2 20        	sep	#$20
 14423                        	longa	off
 14424 08:357F: A9 01        	lda	#$1
 14425 08:3581: A0 11 00     	ldy	#$11
 14426 08:3584: 97 30        	sta	[<L533+fp_0],Y
 14427 08:3586: C2 20        	rep	#$20
 14428                        	longa	on
 14429                        	.line	4017
 14430 08:3588: A9 01 00     	lda	#$1
 14431 08:358B: 82 29 FE     	brl	L539
 14432                        	.line	4017
 14433                        L10272:
 14434                        	.line	4017
 14435                        ;#if !FF_FS_READONLY && FF_FS_MINIMIZE <= 2	
                    	/* Replace one of the read sectors with cached data if i
                    t contains a dirty sector */
 14436                        ;#if FF_FS_TINY
 14437                        ;				if (fs->wflag && fs->win
                    sect - sect < cc) {
 14438                        ;					mem_cpy(rbuff + 
                    ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
 14439                        ;				}
 14440                        ;#else
 14441                        ;				if ((fp->flag & FA_DIRTY
                    ) && fp->sect - sect < cc) {
 14442                        	.line	4024
 14443 08:358E: E2 20        	sep	#$20
 14444                        	longa	off
 14445 08:3590: A0 10 00     	ldy	#$10
 14446 08:3593: B7 30        	lda	[<L533+fp_0],Y
 14447 08:3595: 29 80        	and	#<$80
 14448 08:3597: C2 20        	rep	#$20
 14449                        	longa	on
 14450 08:3599: D0 03        	bne	L553
 14451 08:359B: 82 73 00     	brl	L10273
 14452                        L553:
 14453 08:359E: A5 25        	lda	<L534+cc_1
 14454 08:35A0: 85 01        	sta	<R0
 14455 08:35A2: 64 03        	stz	<R0+2
 14456 08:35A4: 38           	sec
 14457 08:35A5: A0 1A 00     	ldy	#$1a
 14458 08:35A8: B7 30        	lda	[<L533+fp_0],Y
 14459 08:35AA: E5 1B        	sbc	<L534+sect_1
 14460 08:35AC: 85 05        	sta	<R1
 14461 08:35AE: A0 1C 00     	ldy	#$1c
 14462 08:35B1: B7 30        	lda	[<L533+fp_0],Y
 14463 08:35B3: E5 1D        	sbc	<L534+sect_1+2
 14464 08:35B5: 85 07        	sta	<R1+2
 14465 08:35B7: A5 05        	lda	<R1
 14466 08:35B9: C5 01        	cmp	<R0
 14467 08:35BB: A5 07        	lda	<R1+2
 14468 08:35BD: E5 03        	sbc	<R0+2
 14469 08:35BF: 90 03        	bcc	L554
 14470 08:35C1: 82 4D 00     	brl	L10273
  Thu Dec  3 2020 22:25                                                Page 287


 14471                        L554:
 14472                        	.line	4024
 14473                        ;					mem_cpy(rbuff + 
                    ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 14474                        	.line	4025
 14475 08:35C4: F4 00 02     	pea	#<$200
 14476 08:35C7: 18           	clc
 14477 08:35C8: A9 26 00     	lda	#$26
 14478 08:35CB: 65 30        	adc	<L533+fp_0
 14479 08:35CD: 85 01        	sta	<R0
 14480 08:35CF: A9 00 00     	lda	#$0
 14481 08:35D2: 65 32        	adc	<L533+fp_0+2
 14482 08:35D4: 85 03        	sta	<R0+2
 14483 08:35D6: D4 03        	pei	<R0+2
 14484 08:35D8: D4 01        	pei	<R0
 14485 08:35DA: 38           	sec
 14486 08:35DB: A0 1A 00     	ldy	#$1a
 14487 08:35DE: B7 30        	lda	[<L533+fp_0],Y
 14488 08:35E0: E5 1B        	sbc	<L534+sect_1
 14489 08:35E2: 85 09        	sta	<R2
 14490 08:35E4: A0 1C 00     	ldy	#$1c
 14491 08:35E7: B7 30        	lda	[<L533+fp_0],Y
 14492 08:35E9: E5 1D        	sbc	<L534+sect_1+2
 14493 08:35EB: 85 0B        	sta	<R2+2
 14494 08:35ED: D4 0B        	pei	<R2+2
 14495 08:35EF: D4 09        	pei	<R2
 14496 08:35F1: A9 09 00     	lda	#$9
 14497                        	xref	~~~lasl
 14498 08:35F4: 22 xx xx xx  	jsl	~~~lasl
 14499 08:35F8: 85 05        	sta	<R1
 14500 08:35FA: 86 07        	stx	<R1+2
 14501 08:35FC: 18           	clc
 14502 08:35FD: A5 29        	lda	<L534+rbuff_1
 14503 08:35FF: 65 05        	adc	<R1
 14504 08:3601: 85 0D        	sta	<R3
 14505 08:3603: A5 2B        	lda	<L534+rbuff_1+2
 14506 08:3605: 65 07        	adc	<R1+2
 14507 08:3607: 85 0F        	sta	<R3+2
 14508 08:3609: D4 0F        	pei	<R3+2
 14509 08:360B: D4 0D        	pei	<R3
 14510 08:360D: 22 93 01 08  	jsl	~~mem_cpy
 14511                        ;				}
 14512                        	.line	4026
 14513                        ;#endif
 14514                        ;#endif
 14515                        ;				rcnt = SS(fs) * cc;	
                    			/* Number of bytes transferred */
 14516                        L10273:
 14517                        	.line	4029
 14518 08:3611: A5 25        	lda	<L534+cc_1
 14519 08:3613: A2 09 00     	ldx	#<$9
 14520                        	xref	~~~asl
 14521 08:3616: 22 xx xx xx  	jsl	~~~asl
 14522 08:361A: 85 23        	sta	<L534+rcnt_1
 14523                        ;				continue;
 14524                        	.line	4030
 14525 08:361C: 82 1F 01     	brl	L10259
 14526                        ;			}
  Thu Dec  3 2020 22:25                                                Page 288


 14527                        	.line	4031
 14528                        ;#if !FF_FS_TINY
 14529                        ;			if (fp->sect != sect) {		
                    	/* Load data sector if not in cache */
 14530                        L10270:
 14531                        	.line	4033
 14532 08:361F: A0 1A 00     	ldy	#$1a
 14533 08:3622: B7 30        	lda	[<L533+fp_0],Y
 14534 08:3624: C5 1B        	cmp	<L534+sect_1
 14535 08:3626: D0 07        	bne	L555
 14536 08:3628: A0 1C 00     	ldy	#$1c
 14537 08:362B: B7 30        	lda	[<L533+fp_0],Y
 14538 08:362D: C5 1D        	cmp	<L534+sect_1+2
 14539                        L555:
 14540 08:362F: D0 03        	bne	L556
 14541 08:3631: 82 A7 00     	brl	L10274
 14542                        L556:
 14543                        	.line	4033
 14544                        ;#if !FF_FS_READONLY
 14545                        ;				if (fp->flag & FA_DIRTY)
                     {		/* Write-back dirty sector cache */
 14546                        	.line	4035
 14547 08:3634: E2 20        	sep	#$20
 14548                        	longa	off
 14549 08:3636: A0 10 00     	ldy	#$10
 14550 08:3639: B7 30        	lda	[<L533+fp_0],Y
 14551 08:363B: 29 80        	and	#<$80
 14552 08:363D: C2 20        	rep	#$20
 14553                        	longa	on
 14554 08:363F: D0 03        	bne	L557
 14555 08:3641: 82 5C 00     	brl	L10275
 14556                        L557:
 14557                        	.line	4035
 14558                        ;					if (disk_write(f
                    s->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_
                    ERR);
 14559                        	.line	4036
 14560 08:3644: F4 01 00     	pea	#<$1
 14561 08:3647: A0 1C 00     	ldy	#$1c
 14562 08:364A: B7 30        	lda	[<L533+fp_0],Y
 14563 08:364C: 48           	pha
 14564 08:364D: A0 1A 00     	ldy	#$1a
 14565 08:3650: B7 30        	lda	[<L533+fp_0],Y
 14566 08:3652: 48           	pha
 14567 08:3653: 18           	clc
 14568 08:3654: A9 26 00     	lda	#$26
 14569 08:3657: 65 30        	adc	<L533+fp_0
 14570 08:3659: 85 01        	sta	<R0
 14571 08:365B: A9 00 00     	lda	#$0
 14572 08:365E: 65 32        	adc	<L533+fp_0+2
 14573 08:3660: 85 03        	sta	<R0+2
 14574 08:3662: D4 03        	pei	<R0+2
 14575 08:3664: D4 01        	pei	<R0
 14576 08:3666: A0 01 00     	ldy	#$1
 14577 08:3669: B7 13        	lda	[<L534+fs_1],Y
 14578 08:366B: 48           	pha
 14579 08:366C: 22 xx xx xx  	jsl	~~disk_write
 14580 08:3670: AA           	tax
  Thu Dec  3 2020 22:25                                                Page 289


 14581 08:3671: D0 03        	bne	L558
 14582 08:3673: 82 11 00     	brl	L10276
 14583                        L558:
 14584                        	.line	4036
 14585                        	.line	4036
 14586 08:3676: E2 20        	sep	#$20
 14587                        	longa	off
 14588 08:3678: A9 01        	lda	#$1
 14589 08:367A: A0 11 00     	ldy	#$11
 14590 08:367D: 97 30        	sta	[<L533+fp_0],Y
 14591 08:367F: C2 20        	rep	#$20
 14592                        	longa	on
 14593                        	.line	4036
 14594 08:3681: A9 01 00     	lda	#$1
 14595 08:3684: 82 30 FD     	brl	L539
 14596                        	.line	4036
 14597                        L10276:
 14598                        	.line	4036
 14599                        ;					fp->flag &= (BYT
                    E)~FA_DIRTY;
 14600                        	.line	4037
 14601 08:3687: 18           	clc
 14602 08:3688: A9 10 00     	lda	#$10
 14603 08:368B: 65 30        	adc	<L533+fp_0
 14604 08:368D: 85 01        	sta	<R0
 14605 08:368F: A9 00 00     	lda	#$0
 14606 08:3692: 65 32        	adc	<L533+fp_0+2
 14607 08:3694: 85 03        	sta	<R0+2
 14608 08:3696: E2 20        	sep	#$20
 14609                        	longa	off
 14610 08:3698: A7 01        	lda	[<R0]
 14611 08:369A: 29 7F        	and	#<$7f
 14612 08:369C: 87 01        	sta	[<R0]
 14613 08:369E: C2 20        	rep	#$20
 14614                        	longa	on
 14615                        ;				}
 14616                        	.line	4038
 14617                        ;#endif
 14618                        ;				if (disk_read(fs->pdrv, 
                    fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	
                    /* Fill sector cache */
 14619                        L10275:
 14620                        	.line	4040
 14621 08:36A0: F4 01 00     	pea	#<$1
 14622 08:36A3: D4 1D        	pei	<L534+sect_1+2
 14623 08:36A5: D4 1B        	pei	<L534+sect_1
 14624 08:36A7: 18           	clc
 14625 08:36A8: A9 26 00     	lda	#$26
 14626 08:36AB: 65 30        	adc	<L533+fp_0
 14627 08:36AD: 85 01        	sta	<R0
 14628 08:36AF: A9 00 00     	lda	#$0
 14629 08:36B2: 65 32        	adc	<L533+fp_0+2
 14630 08:36B4: 85 03        	sta	<R0+2
 14631 08:36B6: D4 03        	pei	<R0+2
 14632 08:36B8: D4 01        	pei	<R0
 14633 08:36BA: A0 01 00     	ldy	#$1
 14634 08:36BD: B7 13        	lda	[<L534+fs_1],Y
 14635 08:36BF: 48           	pha
  Thu Dec  3 2020 22:25                                                Page 290


 14636 08:36C0: 22 xx xx xx  	jsl	~~disk_read
 14637 08:36C4: AA           	tax
 14638 08:36C5: D0 03        	bne	L559
 14639 08:36C7: 82 11 00     	brl	L10277
 14640                        L559:
 14641                        	.line	4040
 14642                        	.line	4040
 14643 08:36CA: E2 20        	sep	#$20
 14644                        	longa	off
 14645 08:36CC: A9 01        	lda	#$1
 14646 08:36CE: A0 11 00     	ldy	#$11
 14647 08:36D1: 97 30        	sta	[<L533+fp_0],Y
 14648 08:36D3: C2 20        	rep	#$20
 14649                        	longa	on
 14650                        	.line	4040
 14651 08:36D5: A9 01 00     	lda	#$1
 14652 08:36D8: 82 DC FC     	brl	L539
 14653                        	.line	4040
 14654                        L10277:
 14655                        	.line	4040
 14656                        ;			}
 14657                        	.line	4041
 14658                        ;#endif
 14659                        ;			fp->sect = sect;
 14660                        L10274:
 14661                        	.line	4043
 14662 08:36DB: A5 1B        	lda	<L534+sect_1
 14663 08:36DD: A0 1A 00     	ldy	#$1a
 14664 08:36E0: 97 30        	sta	[<L533+fp_0],Y
 14665 08:36E2: A5 1D        	lda	<L534+sect_1+2
 14666 08:36E4: A0 1C 00     	ldy	#$1c
 14667 08:36E7: 97 30        	sta	[<L533+fp_0],Y
 14668                        ;		}
 14669                        	.line	4044
 14670                        ;		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);
                    	/* Number of bytes remains in the sector */
 14671                        L10263:
 14672                        	.line	4045
 14673 08:36E9: A0 12 00     	ldy	#$12
 14674 08:36EC: B7 30        	lda	[<L533+fp_0],Y
 14675 08:36EE: 29 FF 01     	and	#<$1ff
 14676 08:36F1: 85 01        	sta	<R0
 14677 08:36F3: 38           	sec
 14678 08:36F4: A9 00 02     	lda	#$200
 14679 08:36F7: E5 01        	sbc	<R0
 14680 08:36F9: 85 23        	sta	<L534+rcnt_1
 14681                        ;		if (rcnt > btr) rcnt = btr;		
                    			/* Clip it by btr if needed */
 14682                        	.line	4046
 14683 08:36FB: A5 38        	lda	<L533+btr_0
 14684 08:36FD: C5 23        	cmp	<L534+rcnt_1
 14685 08:36FF: 90 03        	bcc	L560
 14686 08:3701: 82 04 00     	brl	L10278
 14687                        L560:
 14688                        	.line	4046
 14689 08:3704: A5 38        	lda	<L533+btr_0
 14690 08:3706: 85 23        	sta	<L534+rcnt_1
 14691                        ;#if FF_FS_TINY
  Thu Dec  3 2020 22:25                                                Page 291


 14692                        ;		if (move_window(fs, fp->sect) != FR_OK) 
                    ABORT(fs, FR_DISK_ERR);	/* Move sector window */
 14693                        ;		mem_cpy(rbuff, fs->win + fp->fptr % SS(f
                    s), rcnt);	/* Extract partial sector */
 14694                        ;#else
 14695                        ;		mem_cpy(rbuff, fp->buf + fp->fptr % SS(f
                    s), rcnt);	/* Extract partial sector */
 14696                        L10278:
 14697                        	.line	4051
 14698 08:3708: D4 23        	pei	<L534+rcnt_1
 14699 08:370A: A0 12 00     	ldy	#$12
 14700 08:370D: B7 30        	lda	[<L533+fp_0],Y
 14701 08:370F: 29 FF 01     	and	#<$1ff
 14702 08:3712: 85 01        	sta	<R0
 14703 08:3714: 64 03        	stz	<R0+2
 14704 08:3716: 18           	clc
 14705 08:3717: A9 26 00     	lda	#$26
 14706 08:371A: 65 01        	adc	<R0
 14707 08:371C: 85 05        	sta	<R1
 14708 08:371E: A9 00 00     	lda	#$0
 14709 08:3721: 65 03        	adc	<R0+2
 14710 08:3723: 85 07        	sta	<R1+2
 14711 08:3725: 18           	clc
 14712 08:3726: A5 30        	lda	<L533+fp_0
 14713 08:3728: 65 05        	adc	<R1
 14714 08:372A: 85 01        	sta	<R0
 14715 08:372C: A5 32        	lda	<L533+fp_0+2
 14716 08:372E: 65 07        	adc	<R1+2
 14717 08:3730: 85 03        	sta	<R0+2
 14718 08:3732: D4 03        	pei	<R0+2
 14719 08:3734: D4 01        	pei	<R0
 14720 08:3736: D4 2B        	pei	<L534+rbuff_1+2
 14721 08:3738: D4 29        	pei	<L534+rbuff_1
 14722 08:373A: 22 93 01 08  	jsl	~~mem_cpy
 14723                        ;#endif
 14724                        ;	}
 14725                        	.line	4053
 14726                        L10259:
 14727 08:373E: 38           	sec
 14728 08:373F: A5 38        	lda	<L533+btr_0
 14729 08:3741: E5 23        	sbc	<L534+rcnt_1
 14730 08:3743: 85 38        	sta	<L533+btr_0
 14731 08:3745: 18           	clc
 14732 08:3746: A7 3A        	lda	[<L533+br_0]
 14733 08:3748: 65 23        	adc	<L534+rcnt_1
 14734 08:374A: 87 3A        	sta	[<L533+br_0]
 14735 08:374C: A5 23        	lda	<L534+rcnt_1
 14736 08:374E: 85 01        	sta	<R0
 14737 08:3750: 64 03        	stz	<R0+2
 14738 08:3752: 18           	clc
 14739 08:3753: A5 29        	lda	<L534+rbuff_1
 14740 08:3755: 65 01        	adc	<R0
 14741 08:3757: 85 29        	sta	<L534+rbuff_1
 14742 08:3759: A5 2B        	lda	<L534+rbuff_1+2
 14743 08:375B: 65 03        	adc	<R0+2
 14744 08:375D: 85 2B        	sta	<L534+rbuff_1+2
 14745 08:375F: 18           	clc
 14746 08:3760: A9 12 00     	lda	#$12
  Thu Dec  3 2020 22:25                                                Page 292


 14747 08:3763: 65 30        	adc	<L533+fp_0
 14748 08:3765: 85 01        	sta	<R0
 14749 08:3767: A9 00 00     	lda	#$0
 14750 08:376A: 65 32        	adc	<L533+fp_0+2
 14751 08:376C: 85 03        	sta	<R0+2
 14752 08:376E: A5 23        	lda	<L534+rcnt_1
 14753 08:3770: 85 05        	sta	<R1
 14754 08:3772: 64 07        	stz	<R1+2
 14755 08:3774: 18           	clc
 14756 08:3775: A5 05        	lda	<R1
 14757 08:3777: 67 01        	adc	[<R0]
 14758 08:3779: 87 01        	sta	[<R0]
 14759 08:377B: A5 07        	lda	<R1+2
 14760 08:377D: A0 02 00     	ldy	#$2
 14761 08:3780: 77 01        	adc	[<R0],Y
 14762 08:3782: A0 02 00     	ldy	#$2
 14763 08:3785: 97 01        	sta	[<R0],Y
 14764                        L10262:
 14765 08:3787: A5 38        	lda	<L533+btr_0
 14766 08:3789: F0 03        	beq	L561
 14767 08:378B: 82 84 FC     	brl	L10261
 14768                        L561:
 14769                        L10260:
 14770                        ;
 14771                        ;	LEAVE_FF(fs, FR_OK);
 14772                        	.line	4055
 14773 08:378E: A9 00 00     	lda	#$0
 14774 08:3791: 82 23 FC     	brl	L539
 14775                        ;}
 14776                        	.line	4056
 14777                        	.endblock	4056
 14778             0000002C   L533	equ	44
 14779             00000011   L534	equ	17
 14780 08:3794:              	ends
 14781                        	efunc
 14782                        	.endfunc	4056,17,44
 14783                        	.line	4056
 14784                        ;
 14785                        ;
 14786                        ;
 14787                        ;
 14788                        ;#if !FF_FS_READONLY
 14789                        ;/*-----------------------------------------------
                    ------------------------*/
 14790                        ;/* Write File                                    
                                            */
 14791                        ;/*-----------------------------------------------
                    ------------------------*/
 14792                        ;
 14793                        ;FRESULT f_write (
 14794                        ;	FIL* fp,			/* Pointer to th
                    e file object */
 14795                        ;	const void* buff,	/* Pointer to the data t
                    o be written */
 14796                        ;	UINT btw,			/* Number of byt
                    es to write */
 14797                        ;	UINT* bw			/* Pointer to nu
                    mber of bytes written */
  Thu Dec  3 2020 22:25                                                Page 293


 14798                        ;)
 14799                        ;{
 14800                        	.line	4066
 14801                        	.line	4072
 14802                        	FFDOS
 14803                        	xdef	~~f_write
 14804                        	func
 14805                        	.function	4072
 14806                        ~~f_write:
 14807                        	longa	on
 14808                        	longi	on
 14809 08:3794: 3B           	tsc
 14810 08:3795: 38           	sec
 14811 08:3796: E9 24 00     	sbc	#L562
 14812 08:3799: 1B           	tcs
 14813 08:379A: 0B           	phd
 14814 08:379B: 5B           	tcd
 14815             00000004   fp_0	set	4
 14816             00000008   buff_0	set	8
 14817             0000000C   btw_0	set	12
 14818             0000000E   bw_0	set	14
 14819                        	.block	4072
 14820                        ;	FRESULT res;
 14821                        ;	FATFS *fs;
 14822                        ;	DWORD clst;
 14823                        ;	LBA_t sect;
 14824                        ;	UINT wcnt, cc, csect;
 14825                        ;	const BYTE *wbuff = (const BYTE*)buff;
 14826                        ;
 14827                        ;
 14828                        ;	*bw = 0;	/* Clear write byte counter */
 14829             00000000   res_1	set	0
 14830             00000002   fs_1	set	2
 14831             00000006   clst_1	set	6
 14832             0000000A   sect_1	set	10
 14833             0000000E   wcnt_1	set	14
 14834             00000010   cc_1	set	16
 14835             00000012   csect_1	set	18
 14836             00000014   wbuff_1	set	20
 14837                        	.sym	res,0,5,1,16
 14838                        	.sym	fs,2,138,1,32,80
 14839                        	.sym	clst,6,18,1,32
 14840                        	.sym	sect,10,18,1,32
 14841                        	.sym	wcnt,14,16,1,16
 14842                        	.sym	cc,16,16,1,16
 14843                        	.sym	csect,18,16,1,16
 14844                        	.sym	wbuff,20,142,1,32
 14845                        	.sym	fp,4,138,6,32,82
 14846                        	.sym	buff,8,129,6,32
 14847                        	.sym	btw,12,16,6,16
 14848                        	.sym	bw,14,144,6,32
 14849 08:379C: A5 2C        	lda	<L562+buff_0
 14850 08:379E: 85 21        	sta	<L563+wbuff_1
 14851 08:37A0: A5 2E        	lda	<L562+buff_0+2
 14852 08:37A2: 85 23        	sta	<L563+wbuff_1+2
 14853                        	.line	4081
 14854 08:37A4: A9 00 00     	lda	#$0
 14855 08:37A7: 87 32        	sta	[<L562+bw_0]
  Thu Dec  3 2020 22:25                                                Page 294


 14856                        ;	res = validate(&fp->obj, &fs);			
                    /* Check validity of the file object */
 14857                        	.line	4082
 14858 08:37A9: F4 00 00     	pea	#0
 14859 08:37AC: 18           	clc
 14860 08:37AD: 7B           	tdc
 14861 08:37AE: 69 0F 00     	adc	#<L563+fs_1
 14862 08:37B1: 48           	pha
 14863 08:37B2: D4 2A        	pei	<L562+fp_0+2
 14864 08:37B4: D4 28        	pei	<L562+fp_0
 14865 08:37B6: 22 66 2D 08  	jsl	~~validate
 14866 08:37BA: 85 0D        	sta	<L563+res_1
 14867                        ;	if (res != FR_OK || (res = (FRESULT)fp->err) != 
                    FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 14868                        	.line	4083
 14869 08:37BC: A5 0D        	lda	<L563+res_1
 14870 08:37BE: F0 03        	beq	L566
 14871 08:37C0: 82 11 00     	brl	L565
 14872                        L566:
 14873 08:37C3: A0 11 00     	ldy	#$11
 14874 08:37C6: B7 28        	lda	[<L562+fp_0],Y
 14875 08:37C8: 29 FF 00     	and	#$ff
 14876 08:37CB: 85 0D        	sta	<L563+res_1
 14877 08:37CD: A5 0D        	lda	<L563+res_1
 14878 08:37CF: D0 03        	bne	L567
 14879 08:37D1: 82 14 00     	brl	L10279
 14880                        L567:
 14881                        L565:
 14882                        	.line	4083
 14883 08:37D4: A5 0D        	lda	<L563+res_1
 14884                        L568:
 14885 08:37D6: A8           	tay
 14886 08:37D7: A5 26        	lda	<L562+2
 14887 08:37D9: 85 34        	sta	<L562+2+14
 14888 08:37DB: A5 25        	lda	<L562+1
 14889 08:37DD: 85 33        	sta	<L562+1+14
 14890 08:37DF: 2B           	pld
 14891 08:37E0: 3B           	tsc
 14892 08:37E1: 18           	clc
 14893 08:37E2: 69 32 00     	adc	#L562+14
 14894 08:37E5: 1B           	tcs
 14895 08:37E6: 98           	tya
 14896 08:37E7: 6B           	rtl
 14897                        ;	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENI
                    ED);	/* Check access mode */
 14898                        L10279:
 14899                        	.line	4084
 14900 08:37E8: E2 20        	sep	#$20
 14901                        	longa	off
 14902 08:37EA: A0 10 00     	ldy	#$10
 14903 08:37ED: B7 28        	lda	[<L562+fp_0],Y
 14904 08:37EF: 29 02        	and	#<$2
 14905 08:37F1: C2 20        	rep	#$20
 14906                        	longa	on
 14907 08:37F3: F0 03        	beq	L569
 14908 08:37F5: 82 06 00     	brl	L10280
 14909                        L569:
 14910                        	.line	4084
  Thu Dec  3 2020 22:25                                                Page 295


 14911 08:37F8: A9 07 00     	lda	#$7
 14912 08:37FB: 82 D8 FF     	brl	L568
 14913                        ;
 14914                        ;	/* Check fptr wrap-around (file size cannot reac
                    h 4 GiB at FAT volume) */
 14915                        ;	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) &&
                     (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 14916                        L10280:
 14917                        	.line	4087
 14918 08:37FE: 82 0D 00     	brl	L570
 14919 08:3801: E2 20        	sep	#$20
 14920                        	longa	off
 14921 08:3803: A7 0F        	lda	[<L563+fs_1]
 14922 08:3805: C9 04        	cmp	#<$4
 14923 08:3807: C2 20        	rep	#$20
 14924                        	longa	on
 14925 08:3809: D0 03        	bne	L571
 14926 08:380B: 82 45 00     	brl	L10281
 14927                        L571:
 14928                        L570:
 14929 08:380E: A5 30        	lda	<L562+btw_0
 14930 08:3810: 85 01        	sta	<R0
 14931 08:3812: 64 03        	stz	<R0+2
 14932 08:3814: 18           	clc
 14933 08:3815: A5 01        	lda	<R0
 14934 08:3817: A0 12 00     	ldy	#$12
 14935 08:381A: 77 28        	adc	[<L562+fp_0],Y
 14936 08:381C: 85 05        	sta	<R1
 14937 08:381E: A5 03        	lda	<R0+2
 14938 08:3820: A0 14 00     	ldy	#$14
 14939 08:3823: 77 28        	adc	[<L562+fp_0],Y
 14940 08:3825: 85 07        	sta	<R1+2
 14941 08:3827: A5 05        	lda	<R1
 14942 08:3829: A0 12 00     	ldy	#$12
 14943 08:382C: D7 28        	cmp	[<L562+fp_0],Y
 14944 08:382E: A5 07        	lda	<R1+2
 14945 08:3830: A0 14 00     	ldy	#$14
 14946 08:3833: F7 28        	sbc	[<L562+fp_0],Y
 14947 08:3835: 90 03        	bcc	L572
 14948 08:3837: 82 19 00     	brl	L10281
 14949                        L572:
 14950                        	.line	4087
 14951                        ;		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fpt
                    r);
 14952                        	.line	4088
 14953 08:383A: 38           	sec
 14954 08:383B: A9 FF FF     	lda	#$ffff
 14955 08:383E: A0 12 00     	ldy	#$12
 14956 08:3841: F7 28        	sbc	[<L562+fp_0],Y
 14957 08:3843: 85 01        	sta	<R0
 14958 08:3845: A9 FF FF     	lda	#$ffff
 14959 08:3848: A0 14 00     	ldy	#$14
 14960 08:384B: F7 28        	sbc	[<L562+fp_0],Y
 14961 08:384D: 85 03        	sta	<R0+2
 14962 08:384F: A5 01        	lda	<R0
 14963 08:3851: 85 30        	sta	<L562+btw_0
 14964                        ;	}
 14965                        	.line	4089
  Thu Dec  3 2020 22:25                                                Page 296


 14966                        ;
 14967                        ;	for ( ;  btw;					
                    		/* Repeat until all data written */
 14968                        L10281:
 14969                        	.line	4091
 14970 08:3853: 82 20 04     	brl	L10285
 14971                        ;		btw -= wcnt, *bw += wcnt, wbuff += wcnt,
                     fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.obj
                    size) ? fp->fptr : fp->obj.objsize) {
 14972                        L10284:
 14973                        	.line	4092
 14974                        ;		if (fp->fptr % SS(fs) == 0) {		
                    /* On the sector boundary? */
 14975                        	.line	4093
 14976 08:3856: A0 12 00     	ldy	#$12
 14977 08:3859: B7 28        	lda	[<L562+fp_0],Y
 14978 08:385B: 29 FF 01     	and	#<$1ff
 14979 08:385E: F0 03        	beq	L573
 14980 08:3860: 82 19 03     	brl	L10286
 14981                        L573:
 14982                        	.line	4093
 14983                        ;			csect = (UINT)(fp->fptr / SS(fs)
                    ) & (fs->csize - 1);	/* Sector offset in the cluster 
                    */
 14984                        	.line	4094
 14985 08:3863: A0 14 00     	ldy	#$14
 14986 08:3866: B7 28        	lda	[<L562+fp_0],Y
 14987 08:3868: 48           	pha
 14988 08:3869: A0 12 00     	ldy	#$12
 14989 08:386C: B7 28        	lda	[<L562+fp_0],Y
 14990 08:386E: 48           	pha
 14991 08:386F: A9 09 00     	lda	#$9
 14992                        	xref	~~~llsr
 14993 08:3872: 22 xx xx xx  	jsl	~~~llsr
 14994 08:3876: 85 01        	sta	<R0
 14995 08:3878: 86 03        	stx	<R0+2
 14996 08:387A: 18           	clc
 14997 08:387B: A9 FF FF     	lda	#$ffff
 14998 08:387E: A0 09 00     	ldy	#$9
 14999 08:3881: 77 0F        	adc	[<L563+fs_1],Y
 15000 08:3883: 85 05        	sta	<R1
 15001 08:3885: A5 05        	lda	<R1
 15002 08:3887: 25 01        	and	<R0
 15003 08:3889: 85 1F        	sta	<L563+csect_1
 15004                        ;			if (csect == 0) {		
                    		/* On the cluster boundary? */
 15005                        	.line	4095
 15006 08:388B: A5 1F        	lda	<L563+csect_1
 15007 08:388D: F0 03        	beq	L574
 15008 08:388F: 82 CB 00     	brl	L10287
 15009                        L574:
 15010                        	.line	4095
 15011                        ;				if (fp->fptr == 0) {	
                    	/* On the top of the file? */
 15012                        	.line	4096
 15013 08:3892: A0 12 00     	ldy	#$12
 15014 08:3895: B7 28        	lda	[<L562+fp_0],Y
 15015 08:3897: A0 14 00     	ldy	#$14
  Thu Dec  3 2020 22:25                                                Page 297


 15016 08:389A: 17 28        	ora	[<L562+fp_0],Y
 15017 08:389C: F0 03        	beq	L575
 15018 08:389E: 82 2C 00     	brl	L10288
 15019                        L575:
 15020                        	.line	4096
 15021                        ;					clst = fp->obj.s
                    clust;	/* Follow from the origin */
 15022                        	.line	4097
 15023 08:38A1: A0 08 00     	ldy	#$8
 15024 08:38A4: B7 28        	lda	[<L562+fp_0],Y
 15025 08:38A6: 85 13        	sta	<L563+clst_1
 15026 08:38A8: A0 0A 00     	ldy	#$a
 15027 08:38AB: B7 28        	lda	[<L562+fp_0],Y
 15028 08:38AD: 85 15        	sta	<L563+clst_1+2
 15029                        ;					if (clst == 0) {
                    		/* If no cluster is allocated, */
 15030                        	.line	4098
 15031 08:38AF: A5 13        	lda	<L563+clst_1
 15032 08:38B1: 05 15        	ora	<L563+clst_1+2
 15033 08:38B3: F0 03        	beq	L576
 15034 08:38B5: 82 12 00     	brl	L10289
 15035                        L576:
 15036                        	.line	4098
 15037                        ;						clst = c
                    reate_chain(&fp->obj, 0);	/* create a new cluster chain */
 15038                        	.line	4099
 15039 08:38B8: F4 00 00     	pea	#^$0
 15040 08:38BB: F4 00 00     	pea	#<$0
 15041 08:38BE: D4 2A        	pei	<L562+fp_0+2
 15042 08:38C0: D4 28        	pei	<L562+fp_0
 15043 08:38C2: 22 CC 0D 08  	jsl	~~create_chain
 15044 08:38C6: 85 13        	sta	<L563+clst_1
 15045 08:38C8: 86 15        	stx	<L563+clst_1+2
 15046                        ;					}
 15047                        	.line	4100
 15048                        ;				} else {		
                    			/* On the middle or end of the file */
 15049                        L10289:
 15050                        	.line	4101
 15051 08:38CA: 82 18 00     	brl	L10290
 15052                        L10288:
 15053                        	.line	4101
 15054                        ;#if FF_USE_FASTSEEK
 15055                        ;					if (fp->cltbl) {
 15056                        ;						clst = c
                    lmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 15057                        ;					} else
 15058                        ;#endif
 15059                        ;					{
 15060                        	.line	4107
 15061                        ;						clst = c
                    reate_chain(&fp->obj, fp->clust);	/* Follow or stretch clu
                    ster chain on the FAT */
 15062                        	.line	4108
 15063 08:38CD: A0 18 00     	ldy	#$18
 15064 08:38D0: B7 28        	lda	[<L562+fp_0],Y
 15065 08:38D2: 48           	pha
 15066 08:38D3: A0 16 00     	ldy	#$16
  Thu Dec  3 2020 22:25                                                Page 298


 15067 08:38D6: B7 28        	lda	[<L562+fp_0],Y
 15068 08:38D8: 48           	pha
 15069 08:38D9: D4 2A        	pei	<L562+fp_0+2
 15070 08:38DB: D4 28        	pei	<L562+fp_0
 15071 08:38DD: 22 CC 0D 08  	jsl	~~create_chain
 15072 08:38E1: 85 13        	sta	<L563+clst_1
 15073 08:38E3: 86 15        	stx	<L563+clst_1+2
 15074                        ;					}
 15075                        	.line	4109
 15076                        ;				}
 15077                        	.line	4110
 15078                        L10290:
 15079                        ;				if (clst == 0) break;	
                    	/* Could not allocate a new cluster (disk full) */
 15080                        	.line	4111
 15081 08:38E5: A5 13        	lda	<L563+clst_1
 15082 08:38E7: 05 15        	ora	<L563+clst_1+2
 15083 08:38E9: D0 03        	bne	L577
 15084 08:38EB: 82 8F 03     	brl	L10283
 15085                        L577:
 15086                        ;				if (clst == 1) ABORT(fs,
                     FR_INT_ERR);
 15087                        	.line	4112
 15088 08:38EE: A5 13        	lda	<L563+clst_1
 15089 08:38F0: C9 01 00     	cmp	#<$1
 15090 08:38F3: D0 05        	bne	L578
 15091 08:38F5: A5 15        	lda	<L563+clst_1+2
 15092 08:38F7: C9 00 00     	cmp	#^$1
 15093                        L578:
 15094 08:38FA: F0 03        	beq	L579
 15095 08:38FC: 82 11 00     	brl	L10291
 15096                        L579:
 15097                        	.line	4112
 15098                        	.line	4112
 15099 08:38FF: E2 20        	sep	#$20
 15100                        	longa	off
 15101 08:3901: A9 02        	lda	#$2
 15102 08:3903: A0 11 00     	ldy	#$11
 15103 08:3906: 97 28        	sta	[<L562+fp_0],Y
 15104 08:3908: C2 20        	rep	#$20
 15105                        	longa	on
 15106                        	.line	4112
 15107 08:390A: A9 02 00     	lda	#$2
 15108 08:390D: 82 C6 FE     	brl	L568
 15109                        	.line	4112
 15110                        L10291:
 15111                        	.line	4112
 15112                        ;				if (clst == 0xFFFFFFFF) 
                    ABORT(fs, FR_DISK_ERR);
 15113                        	.line	4113
 15114 08:3910: A5 13        	lda	<L563+clst_1
 15115 08:3912: C9 FF FF     	cmp	#<$ffffffff
 15116 08:3915: D0 05        	bne	L580
 15117 08:3917: A5 15        	lda	<L563+clst_1+2
 15118 08:3919: C9 FF FF     	cmp	#^$ffffffff
 15119                        L580:
 15120 08:391C: F0 03        	beq	L581
 15121 08:391E: 82 11 00     	brl	L10292
  Thu Dec  3 2020 22:25                                                Page 299


 15122                        L581:
 15123                        	.line	4113
 15124                        	.line	4113
 15125 08:3921: E2 20        	sep	#$20
 15126                        	longa	off
 15127 08:3923: A9 01        	lda	#$1
 15128 08:3925: A0 11 00     	ldy	#$11
 15129 08:3928: 97 28        	sta	[<L562+fp_0],Y
 15130 08:392A: C2 20        	rep	#$20
 15131                        	longa	on
 15132                        	.line	4113
 15133 08:392C: A9 01 00     	lda	#$1
 15134 08:392F: 82 A4 FE     	brl	L568
 15135                        	.line	4113
 15136                        L10292:
 15137                        	.line	4113
 15138                        ;				fp->clust = clst;	
                    		/* Update current cluster */
 15139                        	.line	4114
 15140 08:3932: A5 13        	lda	<L563+clst_1
 15141 08:3934: A0 16 00     	ldy	#$16
 15142 08:3937: 97 28        	sta	[<L562+fp_0],Y
 15143 08:3939: A5 15        	lda	<L563+clst_1+2
 15144 08:393B: A0 18 00     	ldy	#$18
 15145 08:393E: 97 28        	sta	[<L562+fp_0],Y
 15146                        ;				if (fp->obj.sclust == 0)
                     fp->obj.sclust = clst;	/* Set start cluster if the firs
                    t write */
 15147                        	.line	4115
 15148 08:3940: A0 08 00     	ldy	#$8
 15149 08:3943: B7 28        	lda	[<L562+fp_0],Y
 15150 08:3945: A0 0A 00     	ldy	#$a
 15151 08:3948: 17 28        	ora	[<L562+fp_0],Y
 15152 08:394A: F0 03        	beq	L582
 15153 08:394C: 82 0E 00     	brl	L10293
 15154                        L582:
 15155                        	.line	4115
 15156 08:394F: A5 13        	lda	<L563+clst_1
 15157 08:3951: A0 08 00     	ldy	#$8
 15158 08:3954: 97 28        	sta	[<L562+fp_0],Y
 15159 08:3956: A5 15        	lda	<L563+clst_1+2
 15160 08:3958: A0 0A 00     	ldy	#$a
 15161 08:395B: 97 28        	sta	[<L562+fp_0],Y
 15162                        ;			}
 15163                        L10293:
 15164                        	.line	4116
 15165                        ;#if FF_FS_TINY
 15166                        ;			if (fs->winsect == fp->sect && s
                    ync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write
                    -back sector cache */
 15167                        ;#else
 15168                        ;			if (fp->flag & FA_DIRTY) {	
                    	/* Write-back sector cache */
 15169                        L10287:
 15170                        	.line	4120
 15171 08:395D: E2 20        	sep	#$20
 15172                        	longa	off
 15173 08:395F: A0 10 00     	ldy	#$10
  Thu Dec  3 2020 22:25                                                Page 300


 15174 08:3962: B7 28        	lda	[<L562+fp_0],Y
 15175 08:3964: 29 80        	and	#<$80
 15176 08:3966: C2 20        	rep	#$20
 15177                        	longa	on
 15178 08:3968: D0 03        	bne	L583
 15179 08:396A: 82 5C 00     	brl	L10294
 15180                        L583:
 15181                        	.line	4120
 15182                        ;				if (disk_write(fs->pdrv,
                     fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 15183                        	.line	4121
 15184 08:396D: F4 01 00     	pea	#<$1
 15185 08:3970: A0 1C 00     	ldy	#$1c
 15186 08:3973: B7 28        	lda	[<L562+fp_0],Y
 15187 08:3975: 48           	pha
 15188 08:3976: A0 1A 00     	ldy	#$1a
 15189 08:3979: B7 28        	lda	[<L562+fp_0],Y
 15190 08:397B: 48           	pha
 15191 08:397C: 18           	clc
 15192 08:397D: A9 26 00     	lda	#$26
 15193 08:3980: 65 28        	adc	<L562+fp_0
 15194 08:3982: 85 01        	sta	<R0
 15195 08:3984: A9 00 00     	lda	#$0
 15196 08:3987: 65 2A        	adc	<L562+fp_0+2
 15197 08:3989: 85 03        	sta	<R0+2
 15198 08:398B: D4 03        	pei	<R0+2
 15199 08:398D: D4 01        	pei	<R0
 15200 08:398F: A0 01 00     	ldy	#$1
 15201 08:3992: B7 0F        	lda	[<L563+fs_1],Y
 15202 08:3994: 48           	pha
 15203 08:3995: 22 xx xx xx  	jsl	~~disk_write
 15204 08:3999: AA           	tax
 15205 08:399A: D0 03        	bne	L584
 15206 08:399C: 82 11 00     	brl	L10295
 15207                        L584:
 15208                        	.line	4121
 15209                        	.line	4121
 15210 08:399F: E2 20        	sep	#$20
 15211                        	longa	off
 15212 08:39A1: A9 01        	lda	#$1
 15213 08:39A3: A0 11 00     	ldy	#$11
 15214 08:39A6: 97 28        	sta	[<L562+fp_0],Y
 15215 08:39A8: C2 20        	rep	#$20
 15216                        	longa	on
 15217                        	.line	4121
 15218 08:39AA: A9 01 00     	lda	#$1
 15219 08:39AD: 82 26 FE     	brl	L568
 15220                        	.line	4121
 15221                        L10295:
 15222                        	.line	4121
 15223                        ;				fp->flag &= (BYTE)~FA_DI
                    RTY;
 15224                        	.line	4122
 15225 08:39B0: 18           	clc
 15226 08:39B1: A9 10 00     	lda	#$10
 15227 08:39B4: 65 28        	adc	<L562+fp_0
 15228 08:39B6: 85 01        	sta	<R0
 15229 08:39B8: A9 00 00     	lda	#$0
  Thu Dec  3 2020 22:25                                                Page 301


 15230 08:39BB: 65 2A        	adc	<L562+fp_0+2
 15231 08:39BD: 85 03        	sta	<R0+2
 15232 08:39BF: E2 20        	sep	#$20
 15233                        	longa	off
 15234 08:39C1: A7 01        	lda	[<R0]
 15235 08:39C3: 29 7F        	and	#<$7f
 15236 08:39C5: 87 01        	sta	[<R0]
 15237 08:39C7: C2 20        	rep	#$20
 15238                        	longa	on
 15239                        ;			}
 15240                        	.line	4123
 15241                        ;#endif
 15242                        ;			sect = clst2sect(fs, fp->clust);
                    	/* Get current sector */
 15243                        L10294:
 15244                        	.line	4125
 15245 08:39C9: A0 18 00     	ldy	#$18
 15246 08:39CC: B7 28        	lda	[<L562+fp_0],Y
 15247 08:39CE: 48           	pha
 15248 08:39CF: A0 16 00     	ldy	#$16
 15249 08:39D2: B7 28        	lda	[<L562+fp_0],Y
 15250 08:39D4: 48           	pha
 15251 08:39D5: D4 11        	pei	<L563+fs_1+2
 15252 08:39D7: D4 0F        	pei	<L563+fs_1
 15253 08:39D9: 22 FE 05 08  	jsl	~~clst2sect
 15254 08:39DD: 85 17        	sta	<L563+sect_1
 15255 08:39DF: 86 19        	stx	<L563+sect_1+2
 15256                        ;			if (sect == 0) ABORT(fs, FR_INT_
                    ERR);
 15257                        	.line	4126
 15258 08:39E1: A5 17        	lda	<L563+sect_1
 15259 08:39E3: 05 19        	ora	<L563+sect_1+2
 15260 08:39E5: F0 03        	beq	L585
 15261 08:39E7: 82 11 00     	brl	L10296
 15262                        L585:
 15263                        	.line	4126
 15264                        	.line	4126
 15265 08:39EA: E2 20        	sep	#$20
 15266                        	longa	off
 15267 08:39EC: A9 02        	lda	#$2
 15268 08:39EE: A0 11 00     	ldy	#$11
 15269 08:39F1: 97 28        	sta	[<L562+fp_0],Y
 15270 08:39F3: C2 20        	rep	#$20
 15271                        	longa	on
 15272                        	.line	4126
 15273 08:39F5: A9 02 00     	lda	#$2
 15274 08:39F8: 82 DB FD     	brl	L568
 15275                        	.line	4126
 15276                        L10296:
 15277                        	.line	4126
 15278                        ;			sect += csect;
 15279                        	.line	4127
 15280 08:39FB: A5 1F        	lda	<L563+csect_1
 15281 08:39FD: 85 01        	sta	<R0
 15282 08:39FF: 64 03        	stz	<R0+2
 15283 08:3A01: 18           	clc
 15284 08:3A02: A5 01        	lda	<R0
 15285 08:3A04: 65 17        	adc	<L563+sect_1
  Thu Dec  3 2020 22:25                                                Page 302


 15286 08:3A06: 85 17        	sta	<L563+sect_1
 15287 08:3A08: A5 03        	lda	<R0+2
 15288 08:3A0A: 65 19        	adc	<L563+sect_1+2
 15289 08:3A0C: 85 19        	sta	<L563+sect_1+2
 15290                        ;			cc = btw / SS(fs);		
                    		/* When remaining bytes >= sector size, */
 15291                        	.line	4128
 15292 08:3A0E: A5 30        	lda	<L562+btw_0
 15293 08:3A10: A2 09 00     	ldx	#<$9
 15294                        	xref	~~~lsr
 15295 08:3A13: 22 xx xx xx  	jsl	~~~lsr
 15296 08:3A17: 85 1D        	sta	<L563+cc_1
 15297                        ;			if (cc > 0) {			
                    		/* Write maximum contiguous sectors directly */
 15298                        	.line	4129
 15299 08:3A19: A9 00 00     	lda	#$0
 15300 08:3A1C: C5 1D        	cmp	<L563+cc_1
 15301 08:3A1E: 90 03        	bcc	L586
 15302 08:3A20: 82 E2 00     	brl	L10297
 15303                        L586:
 15304                        	.line	4129
 15305                        ;				if (csect + cc > fs->csi
                    ze) {	/* Clip at cluster boundary */
 15306                        	.line	4130
 15307 08:3A23: 18           	clc
 15308 08:3A24: A5 1F        	lda	<L563+csect_1
 15309 08:3A26: 65 1D        	adc	<L563+cc_1
 15310 08:3A28: 85 01        	sta	<R0
 15311 08:3A2A: A0 09 00     	ldy	#$9
 15312 08:3A2D: B7 0F        	lda	[<L563+fs_1],Y
 15313 08:3A2F: C5 01        	cmp	<R0
 15314 08:3A31: 90 03        	bcc	L587
 15315 08:3A33: 82 0A 00     	brl	L10298
 15316                        L587:
 15317                        	.line	4130
 15318                        ;					cc = fs->csize -
                     csect;
 15319                        	.line	4131
 15320 08:3A36: 38           	sec
 15321 08:3A37: A0 09 00     	ldy	#$9
 15322 08:3A3A: B7 0F        	lda	[<L563+fs_1],Y
 15323 08:3A3C: E5 1F        	sbc	<L563+csect_1
 15324 08:3A3E: 85 1D        	sta	<L563+cc_1
 15325                        ;				}
 15326                        	.line	4132
 15327                        ;				if (disk_write(fs->pdrv,
                     wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 15328                        L10298:
 15329                        	.line	4133
 15330 08:3A40: D4 1D        	pei	<L563+cc_1
 15331 08:3A42: D4 19        	pei	<L563+sect_1+2
 15332 08:3A44: D4 17        	pei	<L563+sect_1
 15333 08:3A46: D4 23        	pei	<L563+wbuff_1+2
 15334 08:3A48: D4 21        	pei	<L563+wbuff_1
 15335 08:3A4A: A0 01 00     	ldy	#$1
 15336 08:3A4D: B7 0F        	lda	[<L563+fs_1],Y
 15337 08:3A4F: 48           	pha
 15338 08:3A50: 22 xx xx xx  	jsl	~~disk_write
  Thu Dec  3 2020 22:25                                                Page 303


 15339 08:3A54: AA           	tax
 15340 08:3A55: D0 03        	bne	L588
 15341 08:3A57: 82 11 00     	brl	L10299
 15342                        L588:
 15343                        	.line	4133
 15344                        	.line	4133
 15345 08:3A5A: E2 20        	sep	#$20
 15346                        	longa	off
 15347 08:3A5C: A9 01        	lda	#$1
 15348 08:3A5E: A0 11 00     	ldy	#$11
 15349 08:3A61: 97 28        	sta	[<L562+fp_0],Y
 15350 08:3A63: C2 20        	rep	#$20
 15351                        	longa	on
 15352                        	.line	4133
 15353 08:3A65: A9 01 00     	lda	#$1
 15354 08:3A68: 82 6B FD     	brl	L568
 15355                        	.line	4133
 15356                        L10299:
 15357                        	.line	4133
 15358                        ;#if FF_FS_MINIMIZE <= 2
 15359                        ;#if FF_FS_TINY
 15360                        ;				if (fs->winsect - sect <
                     cc) {	/* Refill sector cache if it gets invalidated by
                     the direct write */
 15361                        ;					mem_cpy(fs->win,
                     wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
 15362                        ;					fs->wflag = 0;
 15363                        ;				}
 15364                        ;#else
 15365                        ;				if (fp->sect - sect < cc
                    ) { /* Refill sector cache if it gets invalidated by the dir
                    ect write */
 15366                        	.line	4141
 15367 08:3A6B: A5 1D        	lda	<L563+cc_1
 15368 08:3A6D: 85 01        	sta	<R0
 15369 08:3A6F: 64 03        	stz	<R0+2
 15370 08:3A71: 38           	sec
 15371 08:3A72: A0 1A 00     	ldy	#$1a
 15372 08:3A75: B7 28        	lda	[<L562+fp_0],Y
 15373 08:3A77: E5 17        	sbc	<L563+sect_1
 15374 08:3A79: 85 05        	sta	<R1
 15375 08:3A7B: A0 1C 00     	ldy	#$1c
 15376 08:3A7E: B7 28        	lda	[<L562+fp_0],Y
 15377 08:3A80: E5 19        	sbc	<L563+sect_1+2
 15378 08:3A82: 85 07        	sta	<R1+2
 15379 08:3A84: A5 05        	lda	<R1
 15380 08:3A86: C5 01        	cmp	<R0
 15381 08:3A88: A5 07        	lda	<R1+2
 15382 08:3A8A: E5 03        	sbc	<R0+2
 15383 08:3A8C: 90 03        	bcc	L589
 15384 08:3A8E: 82 66 00     	brl	L10300
 15385                        L589:
 15386                        	.line	4141
 15387                        ;					mem_cpy(fp->buf,
                     wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 15388                        	.line	4142
 15389 08:3A91: F4 00 02     	pea	#<$200
 15390 08:3A94: 38           	sec
  Thu Dec  3 2020 22:25                                                Page 304


 15391 08:3A95: A0 1A 00     	ldy	#$1a
 15392 08:3A98: B7 28        	lda	[<L562+fp_0],Y
 15393 08:3A9A: E5 17        	sbc	<L563+sect_1
 15394 08:3A9C: 85 05        	sta	<R1
 15395 08:3A9E: A0 1C 00     	ldy	#$1c
 15396 08:3AA1: B7 28        	lda	[<L562+fp_0],Y
 15397 08:3AA3: E5 19        	sbc	<L563+sect_1+2
 15398 08:3AA5: 85 07        	sta	<R1+2
 15399 08:3AA7: D4 07        	pei	<R1+2
 15400 08:3AA9: D4 05        	pei	<R1
 15401 08:3AAB: A9 09 00     	lda	#$9
 15402                        	xref	~~~lasl
 15403 08:3AAE: 22 xx xx xx  	jsl	~~~lasl
 15404 08:3AB2: 85 01        	sta	<R0
 15405 08:3AB4: 86 03        	stx	<R0+2
 15406 08:3AB6: 18           	clc
 15407 08:3AB7: A5 21        	lda	<L563+wbuff_1
 15408 08:3AB9: 65 01        	adc	<R0
 15409 08:3ABB: 85 09        	sta	<R2
 15410 08:3ABD: A5 23        	lda	<L563+wbuff_1+2
 15411 08:3ABF: 65 03        	adc	<R0+2
 15412 08:3AC1: 85 0B        	sta	<R2+2
 15413 08:3AC3: D4 0B        	pei	<R2+2
 15414 08:3AC5: D4 09        	pei	<R2
 15415 08:3AC7: 18           	clc
 15416 08:3AC8: A9 26 00     	lda	#$26
 15417 08:3ACB: 65 28        	adc	<L562+fp_0
 15418 08:3ACD: 85 01        	sta	<R0
 15419 08:3ACF: A9 00 00     	lda	#$0
 15420 08:3AD2: 65 2A        	adc	<L562+fp_0+2
 15421 08:3AD4: 85 03        	sta	<R0+2
 15422 08:3AD6: D4 03        	pei	<R0+2
 15423 08:3AD8: D4 01        	pei	<R0
 15424 08:3ADA: 22 93 01 08  	jsl	~~mem_cpy
 15425                        ;					fp->flag &= (BYT
                    E)~FA_DIRTY;
 15426                        	.line	4143
 15427 08:3ADE: 18           	clc
 15428 08:3ADF: A9 10 00     	lda	#$10
 15429 08:3AE2: 65 28        	adc	<L562+fp_0
 15430 08:3AE4: 85 01        	sta	<R0
 15431 08:3AE6: A9 00 00     	lda	#$0
 15432 08:3AE9: 65 2A        	adc	<L562+fp_0+2
 15433 08:3AEB: 85 03        	sta	<R0+2
 15434 08:3AED: E2 20        	sep	#$20
 15435                        	longa	off
 15436 08:3AEF: A7 01        	lda	[<R0]
 15437 08:3AF1: 29 7F        	and	#<$7f
 15438 08:3AF3: 87 01        	sta	[<R0]
 15439 08:3AF5: C2 20        	rep	#$20
 15440                        	longa	on
 15441                        ;				}
 15442                        	.line	4144
 15443                        ;#endif
 15444                        ;#endif
 15445                        ;				wcnt = SS(fs) * cc;	
                    	/* Number of bytes transferred */
 15446                        L10300:
  Thu Dec  3 2020 22:25                                                Page 305


 15447                        	.line	4147
 15448 08:3AF7: A5 1D        	lda	<L563+cc_1
 15449 08:3AF9: A2 09 00     	ldx	#<$9
 15450                        	xref	~~~asl
 15451 08:3AFC: 22 xx xx xx  	jsl	~~~asl
 15452 08:3B00: 85 1B        	sta	<L563+wcnt_1
 15453                        ;				continue;
 15454                        	.line	4148
 15455 08:3B02: 82 E5 00     	brl	L10282
 15456                        ;			}
 15457                        	.line	4149
 15458                        ;#if FF_FS_TINY
 15459                        ;			if (fp->fptr >= fp->obj.objsize)
                     {	/* Avoid silly cache filling on the growing edge */
 15460                        ;				if (sync_window(fs) != F
                    R_OK) ABORT(fs, FR_DISK_ERR);
 15461                        ;				fs->winsect = sect;
 15462                        ;			}
 15463                        ;#else
 15464                        ;			if (fp->sect != sect && 	
                    	/* Fill sector cache with file data */
 15465                        L10297:
 15466                        	.line	4156
 15467                        ;				fp->fptr < fp->obj.objsi
                    ze &&
 15468                        ;				disk_read(fs->pdrv, fp->
                    buf, sect, 1) != RES_OK) {
 15469 08:3B05: A0 1A 00     	ldy	#$1a
 15470 08:3B08: B7 28        	lda	[<L562+fp_0],Y
 15471 08:3B0A: C5 17        	cmp	<L563+sect_1
 15472 08:3B0C: D0 07        	bne	L590
 15473 08:3B0E: A0 1C 00     	ldy	#$1c
 15474 08:3B11: B7 28        	lda	[<L562+fp_0],Y
 15475 08:3B13: C5 19        	cmp	<L563+sect_1+2
 15476                        L590:
 15477 08:3B15: D0 03        	bne	L591
 15478 08:3B17: 82 54 00     	brl	L10301
 15479                        L591:
 15480 08:3B1A: A0 12 00     	ldy	#$12
 15481 08:3B1D: B7 28        	lda	[<L562+fp_0],Y
 15482 08:3B1F: A0 0C 00     	ldy	#$c
 15483 08:3B22: D7 28        	cmp	[<L562+fp_0],Y
 15484 08:3B24: A0 14 00     	ldy	#$14
 15485 08:3B27: B7 28        	lda	[<L562+fp_0],Y
 15486 08:3B29: A0 0E 00     	ldy	#$e
 15487 08:3B2C: F7 28        	sbc	[<L562+fp_0],Y
 15488 08:3B2E: 90 03        	bcc	L592
 15489 08:3B30: 82 3B 00     	brl	L10301
 15490                        L592:
 15491 08:3B33: F4 01 00     	pea	#<$1
 15492 08:3B36: D4 19        	pei	<L563+sect_1+2
 15493 08:3B38: D4 17        	pei	<L563+sect_1
 15494 08:3B3A: 18           	clc
 15495 08:3B3B: A9 26 00     	lda	#$26
 15496 08:3B3E: 65 28        	adc	<L562+fp_0
 15497 08:3B40: 85 01        	sta	<R0
 15498 08:3B42: A9 00 00     	lda	#$0
 15499 08:3B45: 65 2A        	adc	<L562+fp_0+2
  Thu Dec  3 2020 22:25                                                Page 306


 15500 08:3B47: 85 03        	sta	<R0+2
 15501 08:3B49: D4 03        	pei	<R0+2
 15502 08:3B4B: D4 01        	pei	<R0
 15503 08:3B4D: A0 01 00     	ldy	#$1
 15504 08:3B50: B7 0F        	lda	[<L563+fs_1],Y
 15505 08:3B52: 48           	pha
 15506 08:3B53: 22 xx xx xx  	jsl	~~disk_read
 15507 08:3B57: AA           	tax
 15508 08:3B58: D0 03        	bne	L593
 15509 08:3B5A: 82 11 00     	brl	L10301
 15510                        L593:
 15511                        	.line	4158
 15512                        ;					ABORT(fs, FR_DIS
                    K_ERR);
 15513                        	.line	4159
 15514                        	.line	4159
 15515 08:3B5D: E2 20        	sep	#$20
 15516                        	longa	off
 15517 08:3B5F: A9 01        	lda	#$1
 15518 08:3B61: A0 11 00     	ldy	#$11
 15519 08:3B64: 97 28        	sta	[<L562+fp_0],Y
 15520 08:3B66: C2 20        	rep	#$20
 15521                        	longa	on
 15522                        	.line	4159
 15523 08:3B68: A9 01 00     	lda	#$1
 15524 08:3B6B: 82 68 FC     	brl	L568
 15525                        	.line	4159
 15526                        	.line	4159
 15527                        ;			}
 15528                        	.line	4160
 15529                        ;#endif
 15530                        ;			fp->sect = sect;
 15531                        L10301:
 15532                        	.line	4162
 15533 08:3B6E: A5 17        	lda	<L563+sect_1
 15534 08:3B70: A0 1A 00     	ldy	#$1a
 15535 08:3B73: 97 28        	sta	[<L562+fp_0],Y
 15536 08:3B75: A5 19        	lda	<L563+sect_1+2
 15537 08:3B77: A0 1C 00     	ldy	#$1c
 15538 08:3B7A: 97 28        	sta	[<L562+fp_0],Y
 15539                        ;		}
 15540                        	.line	4163
 15541                        ;		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);
                    	/* Number of bytes remains in the sector */
 15542                        L10286:
 15543                        	.line	4164
 15544 08:3B7C: A0 12 00     	ldy	#$12
 15545 08:3B7F: B7 28        	lda	[<L562+fp_0],Y
 15546 08:3B81: 29 FF 01     	and	#<$1ff
 15547 08:3B84: 85 01        	sta	<R0
 15548 08:3B86: 38           	sec
 15549 08:3B87: A9 00 02     	lda	#$200
 15550 08:3B8A: E5 01        	sbc	<R0
 15551 08:3B8C: 85 1B        	sta	<L563+wcnt_1
 15552                        ;		if (wcnt > btw) wcnt = btw;		
                    			/* Clip it by btw if needed */
 15553                        	.line	4165
 15554 08:3B8E: A5 30        	lda	<L562+btw_0
  Thu Dec  3 2020 22:25                                                Page 307


 15555 08:3B90: C5 1B        	cmp	<L563+wcnt_1
 15556 08:3B92: 90 03        	bcc	L594
 15557 08:3B94: 82 04 00     	brl	L10302
 15558                        L594:
 15559                        	.line	4165
 15560 08:3B97: A5 30        	lda	<L562+btw_0
 15561 08:3B99: 85 1B        	sta	<L563+wcnt_1
 15562                        ;#if FF_FS_TINY
 15563                        ;		if (move_window(fs, fp->sect) != FR_OK) 
                    ABORT(fs, FR_DISK_ERR);	/* Move sector window */
 15564                        ;		mem_cpy(fs->win + fp->fptr % SS(fs), wbu
                    ff, wcnt);	/* Fit data to the sector */
 15565                        ;		fs->wflag = 1;
 15566                        ;#else
 15567                        ;		mem_cpy(fp->buf + fp->fptr % SS(fs), wbu
                    ff, wcnt);	/* Fit data to the sector */
 15568                        L10302:
 15569                        	.line	4171
 15570 08:3B9B: D4 1B        	pei	<L563+wcnt_1
 15571 08:3B9D: D4 23        	pei	<L563+wbuff_1+2
 15572 08:3B9F: D4 21        	pei	<L563+wbuff_1
 15573 08:3BA1: A0 12 00     	ldy	#$12
 15574 08:3BA4: B7 28        	lda	[<L562+fp_0],Y
 15575 08:3BA6: 29 FF 01     	and	#<$1ff
 15576 08:3BA9: 85 01        	sta	<R0
 15577 08:3BAB: 64 03        	stz	<R0+2
 15578 08:3BAD: 18           	clc
 15579 08:3BAE: A9 26 00     	lda	#$26
 15580 08:3BB1: 65 01        	adc	<R0
 15581 08:3BB3: 85 05        	sta	<R1
 15582 08:3BB5: A9 00 00     	lda	#$0
 15583 08:3BB8: 65 03        	adc	<R0+2
 15584 08:3BBA: 85 07        	sta	<R1+2
 15585 08:3BBC: 18           	clc
 15586 08:3BBD: A5 28        	lda	<L562+fp_0
 15587 08:3BBF: 65 05        	adc	<R1
 15588 08:3BC1: 85 01        	sta	<R0
 15589 08:3BC3: A5 2A        	lda	<L562+fp_0+2
 15590 08:3BC5: 65 07        	adc	<R1+2
 15591 08:3BC7: 85 03        	sta	<R0+2
 15592 08:3BC9: D4 03        	pei	<R0+2
 15593 08:3BCB: D4 01        	pei	<R0
 15594 08:3BCD: 22 93 01 08  	jsl	~~mem_cpy
 15595                        ;		fp->flag |= FA_DIRTY;
 15596                        	.line	4172
 15597 08:3BD1: 18           	clc
 15598 08:3BD2: A9 10 00     	lda	#$10
 15599 08:3BD5: 65 28        	adc	<L562+fp_0
 15600 08:3BD7: 85 01        	sta	<R0
 15601 08:3BD9: A9 00 00     	lda	#$0
 15602 08:3BDC: 65 2A        	adc	<L562+fp_0+2
 15603 08:3BDE: 85 03        	sta	<R0+2
 15604 08:3BE0: E2 20        	sep	#$20
 15605                        	longa	off
 15606 08:3BE2: A7 01        	lda	[<R0]
 15607 08:3BE4: 09 80        	ora	#<$80
 15608 08:3BE6: 87 01        	sta	[<R0]
 15609 08:3BE8: C2 20        	rep	#$20
  Thu Dec  3 2020 22:25                                                Page 308


 15610                        	longa	on
 15611                        ;#endif
 15612                        ;	}
 15613                        	.line	4174
 15614                        L10282:
 15615 08:3BEA: 38           	sec
 15616 08:3BEB: A5 30        	lda	<L562+btw_0
 15617 08:3BED: E5 1B        	sbc	<L563+wcnt_1
 15618 08:3BEF: 85 30        	sta	<L562+btw_0
 15619 08:3BF1: 18           	clc
 15620 08:3BF2: A7 32        	lda	[<L562+bw_0]
 15621 08:3BF4: 65 1B        	adc	<L563+wcnt_1
 15622 08:3BF6: 87 32        	sta	[<L562+bw_0]
 15623 08:3BF8: A5 1B        	lda	<L563+wcnt_1
 15624 08:3BFA: 85 01        	sta	<R0
 15625 08:3BFC: 64 03        	stz	<R0+2
 15626 08:3BFE: 18           	clc
 15627 08:3BFF: A5 21        	lda	<L563+wbuff_1
 15628 08:3C01: 65 01        	adc	<R0
 15629 08:3C03: 85 21        	sta	<L563+wbuff_1
 15630 08:3C05: A5 23        	lda	<L563+wbuff_1+2
 15631 08:3C07: 65 03        	adc	<R0+2
 15632 08:3C09: 85 23        	sta	<L563+wbuff_1+2
 15633 08:3C0B: 18           	clc
 15634 08:3C0C: A9 12 00     	lda	#$12
 15635 08:3C0F: 65 28        	adc	<L562+fp_0
 15636 08:3C11: 85 01        	sta	<R0
 15637 08:3C13: A9 00 00     	lda	#$0
 15638 08:3C16: 65 2A        	adc	<L562+fp_0+2
 15639 08:3C18: 85 03        	sta	<R0+2
 15640 08:3C1A: A5 1B        	lda	<L563+wcnt_1
 15641 08:3C1C: 85 05        	sta	<R1
 15642 08:3C1E: 64 07        	stz	<R1+2
 15643 08:3C20: 18           	clc
 15644 08:3C21: A5 05        	lda	<R1
 15645 08:3C23: 67 01        	adc	[<R0]
 15646 08:3C25: 87 01        	sta	[<R0]
 15647 08:3C27: A5 07        	lda	<R1+2
 15648 08:3C29: A0 02 00     	ldy	#$2
 15649 08:3C2C: 77 01        	adc	[<R0],Y
 15650 08:3C2E: A0 02 00     	ldy	#$2
 15651 08:3C31: 97 01        	sta	[<R0],Y
 15652 08:3C33: A0 0C 00     	ldy	#$c
 15653 08:3C36: B7 28        	lda	[<L562+fp_0],Y
 15654 08:3C38: A0 12 00     	ldy	#$12
 15655 08:3C3B: D7 28        	cmp	[<L562+fp_0],Y
 15656 08:3C3D: A0 0E 00     	ldy	#$e
 15657 08:3C40: B7 28        	lda	[<L562+fp_0],Y
 15658 08:3C42: A0 14 00     	ldy	#$14
 15659 08:3C45: F7 28        	sbc	[<L562+fp_0],Y
 15660 08:3C47: 90 03        	bcc	L596
 15661 08:3C49: 82 0D 00     	brl	L595
 15662                        L596:
 15663 08:3C4C: A0 14 00     	ldy	#$14
 15664 08:3C4F: B7 28        	lda	[<L562+fp_0],Y
 15665 08:3C51: AA           	tax
 15666 08:3C52: A0 12 00     	ldy	#$12
 15667 08:3C55: B7 28        	lda	[<L562+fp_0],Y
  Thu Dec  3 2020 22:25                                                Page 309


 15668 08:3C57: 80 0B        	bra	L597
 15669                        L595:
 15670 08:3C59: A0 0E 00     	ldy	#$e
 15671 08:3C5C: B7 28        	lda	[<L562+fp_0],Y
 15672 08:3C5E: AA           	tax
 15673 08:3C5F: A0 0C 00     	ldy	#$c
 15674 08:3C62: B7 28        	lda	[<L562+fp_0],Y
 15675                        L597:
 15676 08:3C64: 85 01        	sta	<R0
 15677 08:3C66: 86 03        	stx	<R0+2
 15678 08:3C68: A5 01        	lda	<R0
 15679 08:3C6A: A0 0C 00     	ldy	#$c
 15680 08:3C6D: 97 28        	sta	[<L562+fp_0],Y
 15681 08:3C6F: A5 03        	lda	<R0+2
 15682 08:3C71: A0 0E 00     	ldy	#$e
 15683 08:3C74: 97 28        	sta	[<L562+fp_0],Y
 15684                        L10285:
 15685 08:3C76: A5 30        	lda	<L562+btw_0
 15686 08:3C78: F0 03        	beq	L598
 15687 08:3C7A: 82 D9 FB     	brl	L10284
 15688                        L598:
 15689                        L10283:
 15690                        ;
 15691                        ;	fp->flag |= FA_MODIFIED;			
                    	/* Set file change flag */
 15692                        	.line	4176
 15693 08:3C7D: 18           	clc
 15694 08:3C7E: A9 10 00     	lda	#$10
 15695 08:3C81: 65 28        	adc	<L562+fp_0
 15696 08:3C83: 85 01        	sta	<R0
 15697 08:3C85: A9 00 00     	lda	#$0
 15698 08:3C88: 65 2A        	adc	<L562+fp_0+2
 15699 08:3C8A: 85 03        	sta	<R0+2
 15700 08:3C8C: E2 20        	sep	#$20
 15701                        	longa	off
 15702 08:3C8E: A7 01        	lda	[<R0]
 15703 08:3C90: 09 40        	ora	#<$40
 15704 08:3C92: 87 01        	sta	[<R0]
 15705 08:3C94: C2 20        	rep	#$20
 15706                        	longa	on
 15707                        ;
 15708                        ;	LEAVE_FF(fs, FR_OK);
 15709                        	.line	4178
 15710 08:3C96: A9 00 00     	lda	#$0
 15711 08:3C99: 82 3A FB     	brl	L568
 15712                        ;}
 15713                        	.line	4179
 15714                        	.endblock	4179
 15715             00000024   L562	equ	36
 15716             0000000D   L563	equ	13
 15717 08:3C9C:              	ends
 15718                        	efunc
 15719                        	.endfunc	4179,13,36
 15720                        	.line	4179
 15721                        ;
 15722                        ;
 15723                        ;
 15724                        ;
  Thu Dec  3 2020 22:25                                                Page 310


 15725                        ;/*-----------------------------------------------
                    ------------------------*/
 15726                        ;/* Synchronize the File                          
                                            */
 15727                        ;/*-----------------------------------------------
                    ------------------------*/
 15728                        ;
 15729                        ;FRESULT f_sync (
 15730                        ;	FIL* fp		/* Pointer to the file object */
 15731                        ;)
 15732                        ;{
 15733                        	.line	4188
 15734                        	.line	4191
 15735                        	FFDOS
 15736                        	xdef	~~f_sync
 15737                        	func
 15738                        	.function	4191
 15739                        ~~f_sync:
 15740                        	longa	on
 15741                        	longi	on
 15742 08:3C9C: 3B           	tsc
 15743 08:3C9D: 38           	sec
 15744 08:3C9E: E9 12 00     	sbc	#L599
 15745 08:3CA1: 1B           	tcs
 15746 08:3CA2: 0B           	phd
 15747 08:3CA3: 5B           	tcd
 15748             00000004   fp_0	set	4
 15749                        	.block	4191
 15750                        ;	FRESULT res;
 15751                        ;	FATFS *fs;
 15752                        ;	DWORD tm;
 15753                        ;	BYTE *dir;
 15754                        ;
 15755                        ;
 15756                        ;	res = validate(&fp->obj, &fs);	/* Check validit
                    y of the file object */
 15757             00000000   res_1	set	0
 15758             00000002   fs_1	set	2
 15759             00000006   tm_1	set	6
 15760             0000000A   dir_1	set	10
 15761                        	.sym	res,0,5,1,16
 15762                        	.sym	fs,2,138,1,32,80
 15763                        	.sym	tm,6,18,1,32
 15764                        	.sym	dir,10,142,1,32
 15765                        	.sym	fp,4,138,6,32,82
 15766                        	.line	4198
 15767 08:3CA4: F4 00 00     	pea	#0
 15768 08:3CA7: 18           	clc
 15769 08:3CA8: 7B           	tdc
 15770 08:3CA9: 69 07 00     	adc	#<L600+fs_1
 15771 08:3CAC: 48           	pha
 15772 08:3CAD: D4 18        	pei	<L599+fp_0+2
 15773 08:3CAF: D4 16        	pei	<L599+fp_0
 15774 08:3CB1: 22 66 2D 08  	jsl	~~validate
 15775 08:3CB5: 85 05        	sta	<L600+res_1
 15776                        ;	if (res == FR_OK) {
 15777                        	.line	4199
 15778 08:3CB7: A5 05        	lda	<L600+res_1
  Thu Dec  3 2020 22:25                                                Page 311


 15779 08:3CB9: F0 03        	beq	L602
 15780 08:3CBB: 82 71 01     	brl	L10303
 15781                        L602:
 15782                        	.line	4199
 15783                        ;		if (fp->flag & FA_MODIFIED) {	/* Is th
                    ere any change to the file? */
 15784                        	.line	4200
 15785 08:3CBE: E2 20        	sep	#$20
 15786                        	longa	off
 15787 08:3CC0: A0 10 00     	ldy	#$10
 15788 08:3CC3: B7 16        	lda	[<L599+fp_0],Y
 15789 08:3CC5: 29 40        	and	#<$40
 15790 08:3CC7: C2 20        	rep	#$20
 15791                        	longa	on
 15792 08:3CC9: D0 03        	bne	L603
 15793 08:3CCB: 82 61 01     	brl	L10304
 15794                        L603:
 15795                        	.line	4200
 15796                        ;#if !FF_FS_TINY
 15797                        ;			if (fp->flag & FA_DIRTY) {	
                    /* Write-back cached data if needed */
 15798                        	.line	4202
 15799 08:3CCE: E2 20        	sep	#$20
 15800                        	longa	off
 15801 08:3CD0: A0 10 00     	ldy	#$10
 15802 08:3CD3: B7 16        	lda	[<L599+fp_0],Y
 15803 08:3CD5: 29 80        	and	#<$80
 15804 08:3CD7: C2 20        	rep	#$20
 15805                        	longa	on
 15806 08:3CD9: D0 03        	bne	L604
 15807 08:3CDB: 82 60 00     	brl	L10305
 15808                        L604:
 15809                        	.line	4202
 15810                        ;				if (disk_write(fs->pdrv,
                     fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 15811                        	.line	4203
 15812 08:3CDE: F4 01 00     	pea	#<$1
 15813 08:3CE1: A0 1C 00     	ldy	#$1c
 15814 08:3CE4: B7 16        	lda	[<L599+fp_0],Y
 15815 08:3CE6: 48           	pha
 15816 08:3CE7: A0 1A 00     	ldy	#$1a
 15817 08:3CEA: B7 16        	lda	[<L599+fp_0],Y
 15818 08:3CEC: 48           	pha
 15819 08:3CED: 18           	clc
 15820 08:3CEE: A9 26 00     	lda	#$26
 15821 08:3CF1: 65 16        	adc	<L599+fp_0
 15822 08:3CF3: 85 01        	sta	<R0
 15823 08:3CF5: A9 00 00     	lda	#$0
 15824 08:3CF8: 65 18        	adc	<L599+fp_0+2
 15825 08:3CFA: 85 03        	sta	<R0+2
 15826 08:3CFC: D4 03        	pei	<R0+2
 15827 08:3CFE: D4 01        	pei	<R0
 15828 08:3D00: A0 01 00     	ldy	#$1
 15829 08:3D03: B7 07        	lda	[<L600+fs_1],Y
 15830 08:3D05: 48           	pha
 15831 08:3D06: 22 xx xx xx  	jsl	~~disk_write
 15832 08:3D0A: AA           	tax
 15833 08:3D0B: D0 03        	bne	L605
  Thu Dec  3 2020 22:25                                                Page 312


 15834 08:3D0D: 82 15 00     	brl	L10306
 15835                        L605:
 15836                        	.line	4203
 15837 08:3D10: A9 01 00     	lda	#$1
 15838                        L606:
 15839 08:3D13: A8           	tay
 15840 08:3D14: A5 14        	lda	<L599+2
 15841 08:3D16: 85 18        	sta	<L599+2+4
 15842 08:3D18: A5 13        	lda	<L599+1
 15843 08:3D1A: 85 17        	sta	<L599+1+4
 15844 08:3D1C: 2B           	pld
 15845 08:3D1D: 3B           	tsc
 15846 08:3D1E: 18           	clc
 15847 08:3D1F: 69 16 00     	adc	#L599+4
 15848 08:3D22: 1B           	tcs
 15849 08:3D23: 98           	tya
 15850 08:3D24: 6B           	rtl
 15851                        ;				fp->flag &= (BYTE)~FA_DI
                    RTY;
 15852                        L10306:
 15853                        	.line	4204
 15854 08:3D25: 18           	clc
 15855 08:3D26: A9 10 00     	lda	#$10
 15856 08:3D29: 65 16        	adc	<L599+fp_0
 15857 08:3D2B: 85 01        	sta	<R0
 15858 08:3D2D: A9 00 00     	lda	#$0
 15859 08:3D30: 65 18        	adc	<L599+fp_0+2
 15860 08:3D32: 85 03        	sta	<R0+2
 15861 08:3D34: E2 20        	sep	#$20
 15862                        	longa	off
 15863 08:3D36: A7 01        	lda	[<R0]
 15864 08:3D38: 29 7F        	and	#<$7f
 15865 08:3D3A: 87 01        	sta	[<R0]
 15866 08:3D3C: C2 20        	rep	#$20
 15867                        	longa	on
 15868                        ;			}
 15869                        	.line	4205
 15870                        ;#endif
 15871                        ;			/* Update the directory entry */
 15872                        ;			tm = GET_FATTIME();		
                    		/* Modified time */
 15873                        L10305:
 15874                        	.line	4208
 15875 08:3D3E: A9 00 00     	lda	#$0
 15876 08:3D41: 85 0B        	sta	<L600+tm_1
 15877 08:3D43: A9 21 4E     	lda	#$4e21
 15878 08:3D46: 85 0D        	sta	<L600+tm_1+2
 15879                        ;#if FF_FS_EXFAT
 15880                        ;			if (fs->fs_type == FS_EXFAT) {
 15881                        ;				res = fill_first_frag(&f
                    p->obj);	/* Fill first fragment on the FAT if needed */
 15882                        ;				if (res == FR_OK) {
 15883                        ;					res = fill_last_
                    frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fra
                    gment on the FAT if needed */
 15884                        ;				}
 15885                        ;				if (res == FR_OK) {
 15886                        ;					DIR dj;
  Thu Dec  3 2020 22:25                                                Page 313


 15887                        ;					DEF_NAMBUF
 15888                        ;
 15889                        ;					INIT_NAMBUF(fs);
 15890                        ;					res = load_obj_x
                    dir(&dj, &fp->obj);	/* Load directory entry block */
 15891                        ;					if (res == FR_OK
                    ) {
 15892                        ;						fs->dirb
                    uf[XDIR_Attr] |= AM_ARC;				/* Set a
                    rchive attribute to indicate that the file has been changed 
                    */
 15893                        ;						fs->dirb
                    uf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file a
                    llocation information */
 15894                        ;						st_dword
                    (fs->dirbuf + XDIR_FstClus, fp->obj.sclust);		
                    /* Update start cluster */
 15895                        ;						st_qword
                    (fs->dirbuf + XDIR_FileSize, fp->obj.objsize);		
                    /* Update file size */
 15896                        ;						st_qword
                    (fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);	/* (FatF
                    s does not support Valid File Size feature) */
 15897                        ;						st_dword
                    (fs->dirbuf + XDIR_ModTime, tm);		/* Update modifi
                    ed time */
 15898                        ;						fs->dirb
                    uf[XDIR_ModTime10] = 0;
 15899                        ;						st_dword
                    (fs->dirbuf + XDIR_AccTime, 0);
 15900                        ;						res = st
                    ore_xdir(&dj);	/* Restore it to the directory */
 15901                        ;						if (res 
                    == FR_OK) {
 15902                        ;							
                    res = sync_fs(fs);
 15903                        ;							
                    fp->flag &= (BYTE)~FA_MODIFIED;
 15904                        ;						}
 15905                        ;					}
 15906                        ;					FREE_NAMBUF();
 15907                        ;				}
 15908                        ;			} else
 15909                        ;#endif
 15910                        ;			{
 15911                        	.line	4240
 15912                        ;				res = move_window(fs, fp
                    ->dir_sect);
 15913                        	.line	4241
 15914 08:3D48: A0 20 00     	ldy	#$20
 15915 08:3D4B: B7 16        	lda	[<L599+fp_0],Y
 15916 08:3D4D: 48           	pha
 15917 08:3D4E: A0 1E 00     	ldy	#$1e
 15918 08:3D51: B7 16        	lda	[<L599+fp_0],Y
 15919 08:3D53: 48           	pha
 15920 08:3D54: D4 09        	pei	<L600+fs_1+2
 15921 08:3D56: D4 07        	pei	<L600+fs_1
 15922 08:3D58: 22 FA 03 08  	jsl	~~move_window
  Thu Dec  3 2020 22:25                                                Page 314


 15923 08:3D5C: 85 05        	sta	<L600+res_1
 15924                        ;				if (res == FR_OK) {
 15925                        	.line	4242
 15926 08:3D5E: A5 05        	lda	<L600+res_1
 15927 08:3D60: F0 03        	beq	L607
 15928 08:3D62: 82 CA 00     	brl	L10307
 15929                        L607:
 15930                        	.line	4242
 15931                        ;					dir = fp->dir_pt
                    r;
 15932                        	.line	4243
 15933 08:3D65: A0 22 00     	ldy	#$22
 15934 08:3D68: B7 16        	lda	[<L599+fp_0],Y
 15935 08:3D6A: 85 0F        	sta	<L600+dir_1
 15936 08:3D6C: A0 24 00     	ldy	#$24
 15937 08:3D6F: B7 16        	lda	[<L599+fp_0],Y
 15938 08:3D71: 85 11        	sta	<L600+dir_1+2
 15939                        ;					dir[DIR_Attr] |=
                     AM_ARC;						/* Set a
                    rchive attribute to indicate that the file has been changed 
                    */
 15940                        	.line	4244
 15941 08:3D73: 18           	clc
 15942 08:3D74: A9 0B 00     	lda	#$b
 15943 08:3D77: 65 0F        	adc	<L600+dir_1
 15944 08:3D79: 85 01        	sta	<R0
 15945 08:3D7B: A9 00 00     	lda	#$0
 15946 08:3D7E: 65 11        	adc	<L600+dir_1+2
 15947 08:3D80: 85 03        	sta	<R0+2
 15948 08:3D82: E2 20        	sep	#$20
 15949                        	longa	off
 15950 08:3D84: A7 01        	lda	[<R0]
 15951 08:3D86: 09 20        	ora	#<$20
 15952 08:3D88: 87 01        	sta	[<R0]
 15953 08:3D8A: C2 20        	rep	#$20
 15954                        	longa	on
 15955                        ;					st_clust(fp->obj
                    .fs, dir, fp->obj.sclust);		/* Update file allocatio
                    n information  */
 15956                        	.line	4245
 15957 08:3D8C: A0 0A 00     	ldy	#$a
 15958 08:3D8F: B7 16        	lda	[<L599+fp_0],Y
 15959 08:3D91: 48           	pha
 15960 08:3D92: A0 08 00     	ldy	#$8
 15961 08:3D95: B7 16        	lda	[<L599+fp_0],Y
 15962 08:3D97: 48           	pha
 15963 08:3D98: D4 11        	pei	<L600+dir_1+2
 15964 08:3D9A: D4 0F        	pei	<L600+dir_1
 15965 08:3D9C: A0 02 00     	ldy	#$2
 15966 08:3D9F: B7 16        	lda	[<L599+fp_0],Y
 15967 08:3DA1: 48           	pha
 15968 08:3DA2: A7 16        	lda	[<L599+fp_0]
 15969 08:3DA4: 48           	pha
 15970 08:3DA5: 22 03 18 08  	jsl	~~st_clust
 15971                        ;					st_dword(dir + D
                    IR_FileSize, (DWORD)fp->obj.objsize);	/* Update file s
                    ize */
 15972                        	.line	4246
  Thu Dec  3 2020 22:25                                                Page 315


 15973 08:3DA9: A0 0E 00     	ldy	#$e
 15974 08:3DAC: B7 16        	lda	[<L599+fp_0],Y
 15975 08:3DAE: 48           	pha
 15976 08:3DAF: A0 0C 00     	ldy	#$c
 15977 08:3DB2: B7 16        	lda	[<L599+fp_0],Y
 15978 08:3DB4: 48           	pha
 15979 08:3DB5: 18           	clc
 15980 08:3DB6: A9 1C 00     	lda	#$1c
 15981 08:3DB9: 65 0F        	adc	<L600+dir_1
 15982 08:3DBB: 85 01        	sta	<R0
 15983 08:3DBD: A9 00 00     	lda	#$0
 15984 08:3DC0: 65 11        	adc	<L600+dir_1+2
 15985 08:3DC2: 85 03        	sta	<R0+2
 15986 08:3DC4: D4 03        	pei	<R0+2
 15987 08:3DC6: D4 01        	pei	<R0
 15988 08:3DC8: 22 16 01 08  	jsl	~~st_dword
 15989                        ;					st_dword(dir + D
                    IR_ModTime, tm);				/* Update modifi
                    ed time */
 15990                        	.line	4247
 15991 08:3DCC: D4 0D        	pei	<L600+tm_1+2
 15992 08:3DCE: D4 0B        	pei	<L600+tm_1
 15993 08:3DD0: 18           	clc
 15994 08:3DD1: A9 16 00     	lda	#$16
 15995 08:3DD4: 65 0F        	adc	<L600+dir_1
 15996 08:3DD6: 85 01        	sta	<R0
 15997 08:3DD8: A9 00 00     	lda	#$0
 15998 08:3DDB: 65 11        	adc	<L600+dir_1+2
 15999 08:3DDD: 85 03        	sta	<R0+2
 16000 08:3DDF: D4 03        	pei	<R0+2
 16001 08:3DE1: D4 01        	pei	<R0
 16002 08:3DE3: 22 16 01 08  	jsl	~~st_dword
 16003                        ;					st_word(dir + DI
                    R_LstAccDate, 0);
 16004                        	.line	4248
 16005 08:3DE7: F4 00 00     	pea	#<$0
 16006 08:3DEA: 18           	clc
 16007 08:3DEB: A9 12 00     	lda	#$12
 16008 08:3DEE: 65 0F        	adc	<L600+dir_1
 16009 08:3DF0: 85 01        	sta	<R0
 16010 08:3DF2: A9 00 00     	lda	#$0
 16011 08:3DF5: 65 11        	adc	<L600+dir_1+2
 16012 08:3DF7: 85 03        	sta	<R0+2
 16013 08:3DF9: D4 03        	pei	<R0+2
 16014 08:3DFB: D4 01        	pei	<R0
 16015 08:3DFD: 22 D7 00 08  	jsl	~~st_word
 16016                        ;					fs->wflag = 1;
 16017                        	.line	4249
 16018 08:3E01: E2 20        	sep	#$20
 16019                        	longa	off
 16020 08:3E03: A9 01        	lda	#$1
 16021 08:3E05: A0 03 00     	ldy	#$3
 16022 08:3E08: 97 07        	sta	[<L600+fs_1],Y
 16023 08:3E0A: C2 20        	rep	#$20
 16024                        	longa	on
 16025                        ;					res = sync_fs(fs
                    );					/* Restore it to the dir
                    ectory */
  Thu Dec  3 2020 22:25                                                Page 316


 16026                        	.line	4250
 16027 08:3E0C: D4 09        	pei	<L600+fs_1+2
 16028 08:3E0E: D4 07        	pei	<L600+fs_1
 16029 08:3E10: 22 85 04 08  	jsl	~~sync_fs
 16030 08:3E14: 85 05        	sta	<L600+res_1
 16031                        ;					fp->flag &= (BYT
                    E)~FA_MODIFIED;
 16032                        	.line	4251
 16033 08:3E16: 18           	clc
 16034 08:3E17: A9 10 00     	lda	#$10
 16035 08:3E1A: 65 16        	adc	<L599+fp_0
 16036 08:3E1C: 85 01        	sta	<R0
 16037 08:3E1E: A9 00 00     	lda	#$0
 16038 08:3E21: 65 18        	adc	<L599+fp_0+2
 16039 08:3E23: 85 03        	sta	<R0+2
 16040 08:3E25: E2 20        	sep	#$20
 16041                        	longa	off
 16042 08:3E27: A7 01        	lda	[<R0]
 16043 08:3E29: 29 BF        	and	#<$bf
 16044 08:3E2B: 87 01        	sta	[<R0]
 16045 08:3E2D: C2 20        	rep	#$20
 16046                        	longa	on
 16047                        ;				}
 16048                        	.line	4252
 16049                        ;			}
 16050                        L10307:
 16051                        	.line	4253
 16052                        ;		}
 16053                        	.line	4254
 16054                        ;	}
 16055                        L10304:
 16056                        	.line	4255
 16057                        ;
 16058                        ;	LEAVE_FF(fs, res);
 16059                        L10303:
 16060                        	.line	4257
 16061 08:3E2F: A5 05        	lda	<L600+res_1
 16062 08:3E31: 82 DF FE     	brl	L606
 16063                        ;}
 16064                        	.line	4258
 16065                        	.endblock	4258
 16066             00000012   L599	equ	18
 16067             00000005   L600	equ	5
 16068 08:3E34:              	ends
 16069                        	efunc
 16070                        	.endfunc	4258,5,18
 16071                        	.line	4258
 16072                        ;
 16073                        ;#endif /* !FF_FS_READONLY */
 16074                        ;
 16075                        ;
 16076                        ;
 16077                        ;
 16078                        ;/*-----------------------------------------------
                    ------------------------*/
 16079                        ;/* Close File                                    
                                            */
 16080                        ;/*-----------------------------------------------
  Thu Dec  3 2020 22:25                                                Page 317


                    ------------------------*/
 16081                        ;
 16082                        ;FRESULT f_close (
 16083                        ;	FIL* fp		/* Pointer to the file object to
                     be closed */
 16084                        ;)
 16085                        ;{
 16086                        	.line	4269
 16087                        	.line	4272
 16088                        	FFDOS
 16089                        	xdef	~~f_close
 16090                        	func
 16091                        	.function	4272
 16092                        ~~f_close:
 16093                        	longa	on
 16094                        	longi	on
 16095 08:3E34: 3B           	tsc
 16096 08:3E35: 38           	sec
 16097 08:3E36: E9 06 00     	sbc	#L608
 16098 08:3E39: 1B           	tcs
 16099 08:3E3A: 0B           	phd
 16100 08:3E3B: 5B           	tcd
 16101             00000004   fp_0	set	4
 16102                        	.block	4272
 16103                        ;	FRESULT res;
 16104                        ;	FATFS *fs;
 16105                        ;
 16106                        ;#if !FF_FS_READONLY
 16107                        ;	res = f_sync(fp);				
                    	/* Flush cached data */
 16108             00000000   res_1	set	0
 16109             00000002   fs_1	set	2
 16110                        	.sym	res,0,5,1,16
 16111                        	.sym	fs,2,138,1,32,80
 16112                        	.sym	fp,4,138,6,32,82
 16113                        	.line	4277
 16114 08:3E3C: D4 0C        	pei	<L608+fp_0+2
 16115 08:3E3E: D4 0A        	pei	<L608+fp_0
 16116 08:3E40: 22 9C 3C 08  	jsl	~~f_sync
 16117 08:3E44: 85 01        	sta	<L609+res_1
 16118                        ;	if (res == FR_OK)
 16119                        	.line	4278
 16120                        ;#endif
 16121                        ;	{
 16122 08:3E46: A5 01        	lda	<L609+res_1
 16123 08:3E48: F0 03        	beq	L611
 16124 08:3E4A: 82 27 00     	brl	L10308
 16125                        L611:
 16126                        	.line	4280
 16127                        ;		res = validate(&fp->obj, &fs);	/* Lock 
                    volume */
 16128                        	.line	4281
 16129 08:3E4D: F4 00 00     	pea	#0
 16130 08:3E50: 18           	clc
 16131 08:3E51: 7B           	tdc
 16132 08:3E52: 69 03 00     	adc	#<L609+fs_1
 16133 08:3E55: 48           	pha
 16134 08:3E56: D4 0C        	pei	<L608+fp_0+2
  Thu Dec  3 2020 22:25                                                Page 318


 16135 08:3E58: D4 0A        	pei	<L608+fp_0
 16136 08:3E5A: 22 66 2D 08  	jsl	~~validate
 16137 08:3E5E: 85 01        	sta	<L609+res_1
 16138                        ;		if (res == FR_OK) {
 16139                        	.line	4282
 16140 08:3E60: A5 01        	lda	<L609+res_1
 16141 08:3E62: F0 03        	beq	L612
 16142 08:3E64: 82 0D 00     	brl	L10309
 16143                        L612:
 16144                        	.line	4282
 16145                        ;#if FF_FS_LOCK != 0
 16146                        ;			res = dec_lock(fp->obj.lockid);	
                    	/* Decrement file open counter */
 16147                        ;			if (res == FR_OK) fp->obj.fs = 0
                    ;	/* Invalidate file object */
 16148                        ;#else
 16149                        ;			fp->obj.fs = 0;	/* Invalidate fi
                    le object */
 16150                        	.line	4287
 16151 08:3E67: A9 00 00     	lda	#$0
 16152 08:3E6A: 87 0A        	sta	[<L608+fp_0]
 16153 08:3E6C: A9 00 00     	lda	#$0
 16154 08:3E6F: A0 02 00     	ldy	#$2
 16155 08:3E72: 97 0A        	sta	[<L608+fp_0],Y
 16156                        ;#endif
 16157                        ;#if FF_FS_REENTRANT
 16158                        ;			unlock_fs(fs, FR_OK);		
                    /* Unlock volume */
 16159                        ;#endif
 16160                        ;		}
 16161                        	.line	4292
 16162                        ;	}
 16163                        L10309:
 16164                        	.line	4293
 16165                        ;	return res;
 16166                        L10308:
 16167                        	.line	4294
 16168 08:3E74: A5 01        	lda	<L609+res_1
 16169                        L613:
 16170 08:3E76: A8           	tay
 16171 08:3E77: A5 08        	lda	<L608+2
 16172 08:3E79: 85 0C        	sta	<L608+2+4
 16173 08:3E7B: A5 07        	lda	<L608+1
 16174 08:3E7D: 85 0B        	sta	<L608+1+4
 16175 08:3E7F: 2B           	pld
 16176 08:3E80: 3B           	tsc
 16177 08:3E81: 18           	clc
 16178 08:3E82: 69 0A 00     	adc	#L608+4
 16179 08:3E85: 1B           	tcs
 16180 08:3E86: 98           	tya
 16181 08:3E87: 6B           	rtl
 16182                        ;}
 16183                        	.line	4295
 16184                        	.endblock	4295
 16185             00000006   L608	equ	6
 16186             00000001   L609	equ	1
 16187 08:3E88:              	ends
 16188                        	efunc
  Thu Dec  3 2020 22:25                                                Page 319


 16189                        	.endfunc	4295,1,6
 16190                        	.line	4295
 16191                        ;
 16192                        ;
 16193                        ;
 16194                        ;
 16195                        ;#if FF_FS_RPATH >= 1
 16196                        ;/*-----------------------------------------------
                    ------------------------*/
 16197                        ;/* Change Current Directory or Current Drive, Get
                     Current Directory      */
 16198                        ;/*-----------------------------------------------
                    ------------------------*/
 16199                        ;
 16200                        ;FRESULT f_chdrive (
 16201                        ;	const TCHAR* path		/* Drive number 
                    to set */
 16202                        ;)
 16203                        ;{
 16204                        ;	int vol;
 16205                        ;
 16206                        ;
 16207                        ;	/* Get logical drive number */
 16208                        ;	vol = get_ldnumber(&path);
 16209                        ;	if (vol < 0) return FR_INVALID_DRIVE;
 16210                        ;	CurrVol = (BYTE)vol;	/* Set it as current vol
                    ume */
 16211                        ;
 16212                        ;	return FR_OK;
 16213                        ;}
 16214                        ;
 16215                        ;
 16216                        ;
 16217                        ;FRESULT f_chdir (
 16218                        ;	const TCHAR* path	/* Pointer to the direct
                    ory path */
 16219                        ;)
 16220                        ;{
 16221                        ;#if FF_STR_VOLUME_ID == 2
 16222                        ;	UINT i;
 16223                        ;#endif
 16224                        ;	FRESULT res;
 16225                        ;	DIR dj;
 16226                        ;	FATFS *fs;
 16227                        ;	DEF_NAMBUF
 16228                        ;
 16229                        ;	k_debug_string( "f_chdir...\r\n");
 16230                        ;
 16231                        ;	/* Get logical drive */
 16232                        ;	res = mount_volume(&path, &fs, 0);
 16233                        ;	if (res == FR_OK) {
 16234                        ;		dj.obj.fs = fs;
 16235                        ;		INIT_NAMBUF(fs);
 16236                        ;		res = follow_path(&dj, path);		
                    /* Follow the path */
 16237                        ;		if (res == FR_OK) {			
                    		/* Follow completed */
 16238                        ;			if (dj.fn[NSFLAG] & NS_NONAME) {
  Thu Dec  3 2020 22:25                                                Page 320


                    	/* Is it the start directory itself? */
 16239                        ;				fs->cdir = dj.obj.sclust
                    ;
 16240                        ;#if FF_FS_EXFAT
 16241                        ;				if (fs->fs_type == FS_EX
                    FAT) {
 16242                        ;					fs->cdc_scl = dj
                    .obj.c_scl;
 16243                        ;					fs->cdc_size = d
                    j.obj.c_size;
 16244                        ;					fs->cdc_ofs = dj
                    .obj.c_ofs;
 16245                        ;				}
 16246                        ;#endif
 16247                        ;			} else {
 16248                        ;				if (dj.obj.attr & AM_DIR
                    ) {	/* It is a sub-directory */
 16249                        ;#if FF_FS_EXFAT
 16250                        ;					if (fs->fs_type 
                    == FS_EXFAT) {
 16251                        ;						fs->cdir
                     = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Sub-d
                    irectory cluster */
 16252                        ;						fs->cdc_
                    scl = dj.obj.sclust;					
                    	/* Save containing directory information */
 16253                        ;						fs->cdc_
                    size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 16254                        ;						fs->cdc_
                    ofs = dj.blk_ofs;
 16255                        ;					} else
 16256                        ;#endif
 16257                        ;					{
 16258                        ;						fs->cdir
                     = ld_clust(fs, dj.dir);					
                    /* Sub-directory cluster */
 16259                        ;					}
 16260                        ;				} else {
 16261                        ;					res = FR_NO_PATH
                    ;		/* Reached but a file */
 16262                        ;				}
 16263                        ;			}
 16264                        ;		}
 16265                        ;		FREE_NAMBUF();
 16266                        ;		if (res == FR_NO_FILE) res = FR_NO_PATH;
 16267                        ;#if FF_STR_VOLUME_ID == 2	/* Also current 
                    drive is changed at Unix style volume ID */
 16268                        ;		if (res == FR_OK) {
 16269                        ;			for (i = FF_VOLUMES - 1; i && fs
                     != FatFs[i]; i--) ;	/* Set current drive */
 16270                        ;			CurrVol = (BYTE)i;
 16271                        ;		}
 16272                        ;#endif
 16273                        ;	}
 16274                        ;
 16275                        ;	LEAVE_FF(fs, res);
 16276                        ;}
 16277                        ;
  Thu Dec  3 2020 22:25                                                Page 321


 16278                        ;
 16279                        ;#if FF_FS_RPATH >= 2
 16280                        ;FRESULT f_getcwd (
 16281                        ;	TCHAR* buff,	/* Pointer to the directory path
                     */
 16282                        ;	UINT len		/* Size of buff in unit 
                    of TCHAR */
 16283                        ;)
 16284                        ;{
 16285                        ;	FRESULT res;
 16286                        ;	DIR dj;
 16287                        ;	FATFS *fs;
 16288                        ;	UINT i, n;
 16289                        ;	DWORD ccl;
 16290                        ;	TCHAR *tp = buff;
 16291                        ;#if FF_VOLUMES >= 2
 16292                        ;	UINT vl;
 16293                        ;#if FF_STR_VOLUME_ID
 16294                        ;	const char *vp;
 16295                        ;#endif
 16296                        ;#endif
 16297                        ;	FILINFO fno;
 16298                        ;	DEF_NAMBUF
 16299                        ;
 16300                        ;
 16301                        ;	/* Get logical drive */
 16302                        ;	buff[0] = 0;	/* Set null string to get curren
                    t volume */
 16303                        ;	res = mount_volume((const TCHAR**)&buff, &fs, 0)
                    ;	/* Get current volume */
 16304                        ;	if (res == FR_OK) {
 16305                        ;		dj.obj.fs = fs;
 16306                        ;		INIT_NAMBUF(fs);
 16307                        ;
 16308                        ;		/* Follow parent directories and create 
                    the path */
 16309                        ;		i = len;			/* Botto
                    m of buffer (directory stack base) */
 16310                        ;		if (!FF_FS_EXFAT || fs->fs_type != FS_EX
                    FAT) {	/* (Cannot do getcwd on exFAT and returns root p
                    ath) */
 16311                        ;			dj.obj.sclust = fs->cdir;	
                    			/* Start to follow upper directory from 
                    current directory */
 16312                        ;			while ((ccl = dj.obj.sclust) != 
                    0) {	/* Repeat while current directory is a sub-direc
                    tory */
 16313                        ;				res = dir_sdi(&dj, 1 * S
                    ZDIRE);	/* Get parent directory */
 16314                        ;				if (res != FR_OK) break;
 16315                        ;				res = move_window(fs, dj
                    .sect);
 16316                        ;				if (res != FR_OK) break;
 16317                        ;				dj.obj.sclust = ld_clust
                    (fs, dj.dir);	/* Goto parent directory */
 16318                        ;				res = dir_sdi(&dj, 0);
 16319                        ;				if (res != FR_OK) break;
 16320                        ;				do {			
  Thu Dec  3 2020 22:25                                                Page 322


                    				/* Find the entry links to the c
                    hild directory */
 16321                        ;					res = DIR_READ_F
                    ILE(&dj);
 16322                        ;					if (res != FR_OK
                    ) break;
 16323                        ;					if (ccl == ld_cl
                    ust(fs, dj.dir)) break;	/* Found the entry */
 16324                        ;					res = dir_next(&
                    dj, 0);
 16325                        ;				} while (res == FR_OK);
 16326                        ;				if (res == FR_NO_FILE) r
                    es = FR_INT_ERR;/* It cannot be 'not found'. */
 16327                        ;				if (res != FR_OK) break;
 16328                        ;				get_fileinfo(&dj, &fno);
                    		/* Get the directory name and push it to the buf
                    fer */
 16329                        ;				for (n = 0; fno.fname[n]
                    ; n++) ;	/* Name length */
 16330                        ;				if (i < n + 1) {	
                    /* Insufficient space to store the path name? */
 16331                        ;					res = FR_NOT_ENO
                    UGH_CORE; break;
 16332                        ;				}
 16333                        ;				while (n) buff[--i] = fn
                    o.fname[--n];	/* Stack the name */
 16334                        ;				buff[--i] = '/';
 16335                        ;			}
 16336                        ;		}
 16337                        ;		if (res == FR_OK) {
 16338                        ;			if (i == len) buff[--i] = '/';	
                    /* Is it the root-directory? */
 16339                        ;#if FF_VOLUMES >= 2			/* Put d
                    rive prefix */
 16340                        ;			vl = 0;
 16341                        ;#if FF_STR_VOLUME_ID >= 1	/* String volume
                     ID */
 16342                        ;			for (n = 0, vp = (const char*)Vo
                    lumeStr[CurrVol]; vp[n]; n++) ;
 16343                        ;			if (i >= n + 2) {
 16344                        ;				if (FF_STR_VOLUME_ID == 
                    2) *tp++ = (TCHAR)'/';
 16345                        ;				for (vl = 0; vl < n; *tp
                    ++ = (TCHAR)vp[vl], vl++) ;
 16346                        ;				if (FF_STR_VOLUME_ID == 
                    1) *tp++ = (TCHAR)':';
 16347                        ;				vl++;
 16348                        ;			}
 16349                        ;#else						
                    /* Numeric volume ID */
 16350                        ;			if (i >= 3) {
 16351                        ;				*tp++ = (TCHAR)'0' + Cur
                    rVol;
 16352                        ;				*tp++ = (TCHAR)':';
 16353                        ;				vl = 2;
 16354                        ;			}
 16355                        ;#endif
 16356                        ;			if (vl == 0) res = FR_NOT_ENOUGH
  Thu Dec  3 2020 22:25                                                Page 323


                    _CORE;
 16357                        ;#endif
 16358                        ;			/* Add current directory path */
 16359                        ;			if (res == FR_OK) {
 16360                        ;				do *tp++ = buff[i++]; wh
                    ile (i < len);	/* Copy stacked path string */
 16361                        ;			}
 16362                        ;		}
 16363                        ;		FREE_NAMBUF();
 16364                        ;	}
 16365                        ;
 16366                        ;	*tp = 0;
 16367                        ;	LEAVE_FF(fs, res);
 16368                        ;}
 16369                        ;
 16370                        ;#endif /* FF_FS_RPATH >= 2 */
 16371                        ;#endif /* FF_FS_RPATH >= 1 */
 16372                        ;
 16373                        ;
 16374                        ;
 16375                        ;#if FF_FS_MINIMIZE <= 2
 16376                        ;/*-----------------------------------------------
                    ------------------------*/
 16377                        ;/* Seek File Read/Write Pointer                  
                                            */
 16378                        ;/*-----------------------------------------------
                    ------------------------*/
 16379                        ;
 16380                        ;FRESULT f_lseek (
 16381                        ;	FIL* fp,		/* Pointer to the file o
                    bject */
 16382                        ;	FSIZE_t ofs		/* File pointer from top
                     of file */
 16383                        ;)
 16384                        ;{
 16385                        	.line	4485
 16386                        	.line	4489
 16387                        	FFDOS
 16388                        	xdef	~~f_lseek
 16389                        	func
 16390                        	.function	4489
 16391                        ~~f_lseek:
 16392                        	longa	on
 16393                        	longi	on
 16394 08:3E88: 3B           	tsc
 16395 08:3E89: 38           	sec
 16396 08:3E8A: E9 22 00     	sbc	#L614
 16397 08:3E8D: 1B           	tcs
 16398 08:3E8E: 0B           	phd
 16399 08:3E8F: 5B           	tcd
 16400             00000004   fp_0	set	4
 16401             00000008   ofs_0	set	8
 16402                        	.block	4489
 16403                        ;	FRESULT res;
 16404                        ;	FATFS *fs;
 16405                        ;	DWORD clst, bcs;
 16406                        ;	LBA_t nsect;
 16407                        ;	FSIZE_t ifptr;
  Thu Dec  3 2020 22:25                                                Page 324


 16408                        ;#if FF_USE_FASTSEEK
 16409                        ;	DWORD cl, pcl, ncl, tcl, tlen, ulen, *tbl;
 16410                        ;	LBA_t dsc;
 16411                        ;#endif
 16412                        ;
 16413                        ;	res = validate(&fp->obj, &fs);		/* Check
                     validity of the file object */
 16414             00000000   res_1	set	0
 16415             00000002   fs_1	set	2
 16416             00000006   clst_1	set	6
 16417             0000000A   bcs_1	set	10
 16418             0000000E   nsect_1	set	14
 16419             00000012   ifptr_1	set	18
 16420                        	.sym	res,0,5,1,16
 16421                        	.sym	fs,2,138,1,32,80
 16422                        	.sym	clst,6,18,1,32
 16423                        	.sym	bcs,10,18,1,32
 16424                        	.sym	nsect,14,18,1,32
 16425                        	.sym	ifptr,18,18,1,32
 16426                        	.sym	fp,4,138,6,32,82
 16427                        	.sym	ofs,8,18,6,32
 16428                        	.line	4500
 16429 08:3E90: F4 00 00     	pea	#0
 16430 08:3E93: 18           	clc
 16431 08:3E94: 7B           	tdc
 16432 08:3E95: 69 0F 00     	adc	#<L615+fs_1
 16433 08:3E98: 48           	pha
 16434 08:3E99: D4 28        	pei	<L614+fp_0+2
 16435 08:3E9B: D4 26        	pei	<L614+fp_0
 16436 08:3E9D: 22 66 2D 08  	jsl	~~validate
 16437 08:3EA1: 85 0D        	sta	<L615+res_1
 16438                        ;	if (res == FR_OK) res = (FRESULT)fp->err;
 16439                        	.line	4501
 16440 08:3EA3: A5 0D        	lda	<L615+res_1
 16441 08:3EA5: F0 03        	beq	L617
 16442 08:3EA7: 82 0A 00     	brl	L10310
 16443                        L617:
 16444                        	.line	4501
 16445 08:3EAA: A0 11 00     	ldy	#$11
 16446 08:3EAD: B7 26        	lda	[<L614+fp_0],Y
 16447 08:3EAF: 29 FF 00     	and	#$ff
 16448 08:3EB2: 85 0D        	sta	<L615+res_1
 16449                        ;#if FF_FS_EXFAT && !FF_FS_READONLY
 16450                        ;	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
 16451                        ;		res = fill_last_frag(&fp->obj, fp->clust
                    , 0xFFFFFFFF);	/* Fill last fragment on the FAT if need
                    ed */
 16452                        ;	}
 16453                        ;#endif
 16454                        ;	if (res != FR_OK) LEAVE_FF(fs, res);
 16455                        L10310:
 16456                        	.line	4507
 16457 08:3EB4: A5 0D        	lda	<L615+res_1
 16458 08:3EB6: D0 03        	bne	L618
 16459 08:3EB8: 82 14 00     	brl	L10311
 16460                        L618:
 16461                        	.line	4507
 16462 08:3EBB: A5 0D        	lda	<L615+res_1
  Thu Dec  3 2020 22:25                                                Page 325


 16463                        L619:
 16464 08:3EBD: A8           	tay
 16465 08:3EBE: A5 24        	lda	<L614+2
 16466 08:3EC0: 85 2C        	sta	<L614+2+8
 16467 08:3EC2: A5 23        	lda	<L614+1
 16468 08:3EC4: 85 2B        	sta	<L614+1+8
 16469 08:3EC6: 2B           	pld
 16470 08:3EC7: 3B           	tsc
 16471 08:3EC8: 18           	clc
 16472 08:3EC9: 69 2A 00     	adc	#L614+8
 16473 08:3ECC: 1B           	tcs
 16474 08:3ECD: 98           	tya
 16475 08:3ECE: 6B           	rtl
 16476                        ;
 16477                        ;#if FF_USE_FASTSEEK
 16478                        ;	if (fp->cltbl) {	/* Fast seek */
 16479                        ;		if (ofs == CREATE_LINKMAP) {	/* Creat
                    e CLMT */
 16480                        ;			tbl = fp->cltbl;
 16481                        ;			tlen = *tbl++; ulen = 2;	
                    /* Given table size and required table size */
 16482                        ;			cl = fp->obj.sclust;		
                    /* Origin of the chain */
 16483                        ;			if (cl != 0) {
 16484                        ;				do {
 16485                        ;					/* Get a fragmen
                    t */
 16486                        ;					tcl = cl; ncl = 
                    0; ulen += 2;	/* Top, length and used items */
 16487                        ;					do {
 16488                        ;						pcl = cl
                    ; ncl++;
 16489                        ;						cl = get
                    _fat(&fp->obj, cl);
 16490                        ;						if (cl <
                    = 1) ABORT(fs, FR_INT_ERR);
 16491                        ;						if (cl =
                    = 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 16492                        ;					} while (cl == p
                    cl + 1);
 16493                        ;					if (ulen <= tlen
                    ) {		/* Store the length and top of the fragment */
 16494                        ;						*tbl++ =
                     ncl; *tbl++ = tcl;
 16495                        ;					}
 16496                        ;				} while (cl < fs->n_fate
                    nt);	/* Repeat until end of chain */
 16497                        ;			}
 16498                        ;			*fp->cltbl = ulen;	/* Numbe
                    r of items used */
 16499                        ;			if (ulen <= tlen) {
 16500                        ;				*tbl = 0;		
                    /* Terminate table */
 16501                        ;			} else {
 16502                        ;				res = FR_NOT_ENOUGH_CORE
                    ;	/* Given table size is smaller than required */
 16503                        ;			}
 16504                        ;		} else {				
  Thu Dec  3 2020 22:25                                                Page 326


                    		/* Fast seek */
 16505                        ;			if (ofs > fp->obj.objsize) ofs =
                     fp->obj.objsize;	/* Clip offset at the file size */
 16506                        ;			fp->fptr = ofs;			
                    	/* Set file pointer */
 16507                        ;			if (ofs > 0) {
 16508                        ;				fp->clust = clmt_clust(f
                    p, ofs - 1);
 16509                        ;				dsc = clst2sect(fs, fp->
                    clust);
 16510                        ;				if (dsc == 0) ABORT(fs, 
                    FR_INT_ERR);
 16511                        ;				dsc += (DWORD)((ofs - 1)
                     / SS(fs)) & (fs->csize - 1);
 16512                        ;				if (fp->fptr % SS(fs) &&
                     dsc != fp->sect) {	/* Refill sector cache if needed */
 16513                        ;#if !FF_FS_TINY
 16514                        ;#if !FF_FS_READONLY
 16515                        ;					if (fp->flag & F
                    A_DIRTY) {		/* Write-back dirty sector cache */
 16516                        ;						if (disk
                    _write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, 
                    FR_DISK_ERR);
 16517                        ;						fp->flag
                     &= (BYTE)~FA_DIRTY;
 16518                        ;					}
 16519                        ;#endif
 16520                        ;					if (disk_read(fs
                    ->pdrv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	
                    /* Load current sector */
 16521                        ;#endif
 16522                        ;					fp->sect = dsc;
 16523                        ;				}
 16524                        ;			}
 16525                        ;		}
 16526                        ;	} else
 16527                        ;#endif
 16528                        ;
 16529                        ;	/* Normal Seek */
 16530                        ;	{
 16531                        L10311:
 16532                        	.line	4562
 16533                        ;#if FF_FS_EXFAT
 16534                        ;		if (fs->fs_type != FS_EXFAT && ofs >= 0x
                    100000000) ofs = 0xFFFFFFFF;	/* Clip at 4 GiB - 1 if 
                    at FATxx */
 16535                        ;#endif
 16536                        ;		if (ofs > fp->obj.objsize && (FF_FS_READ
                    ONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, cl
                    ip offset with the file size */
 16537                        	.line	4566
 16538 08:3ECF: A0 0C 00     	ldy	#$c
 16539 08:3ED2: B7 26        	lda	[<L614+fp_0],Y
 16540 08:3ED4: C5 2A        	cmp	<L614+ofs_0
 16541 08:3ED6: A0 0E 00     	ldy	#$e
 16542 08:3ED9: B7 26        	lda	[<L614+fp_0],Y
 16543 08:3EDB: E5 2C        	sbc	<L614+ofs_0+2
 16544 08:3EDD: 90 03        	bcc	L620
  Thu Dec  3 2020 22:25                                                Page 327


 16545 08:3EDF: 82 1E 00     	brl	L10312
 16546                        L620:
 16547 08:3EE2: E2 20        	sep	#$20
 16548                        	longa	off
 16549 08:3EE4: A0 10 00     	ldy	#$10
 16550 08:3EE7: B7 26        	lda	[<L614+fp_0],Y
 16551 08:3EE9: 29 02        	and	#<$2
 16552 08:3EEB: C2 20        	rep	#$20
 16553                        	longa	on
 16554 08:3EED: F0 03        	beq	L622
 16555 08:3EEF: 82 0E 00     	brl	L10312
 16556                        L622:
 16557                        L621:
 16558                        	.line	4566
 16559                        ;			ofs = fp->obj.objsize;
 16560                        	.line	4567
 16561 08:3EF2: A0 0C 00     	ldy	#$c
 16562 08:3EF5: B7 26        	lda	[<L614+fp_0],Y
 16563 08:3EF7: 85 2A        	sta	<L614+ofs_0
 16564 08:3EF9: A0 0E 00     	ldy	#$e
 16565 08:3EFC: B7 26        	lda	[<L614+fp_0],Y
 16566 08:3EFE: 85 2C        	sta	<L614+ofs_0+2
 16567                        ;		}
 16568                        	.line	4568
 16569                        ;		ifptr = fp->fptr;
 16570                        L10312:
 16571                        	.line	4569
 16572 08:3F00: A0 12 00     	ldy	#$12
 16573 08:3F03: B7 26        	lda	[<L614+fp_0],Y
 16574 08:3F05: 85 1F        	sta	<L615+ifptr_1
 16575 08:3F07: A0 14 00     	ldy	#$14
 16576 08:3F0A: B7 26        	lda	[<L614+fp_0],Y
 16577 08:3F0C: 85 21        	sta	<L615+ifptr_1+2
 16578                        ;		fp->fptr = nsect = 0;
 16579                        	.line	4570
 16580 08:3F0E: 64 1B        	stz	<L615+nsect_1
 16581 08:3F10: 64 1D        	stz	<L615+nsect_1+2
 16582 08:3F12: A9 00 00     	lda	#$0
 16583 08:3F15: A0 12 00     	ldy	#$12
 16584 08:3F18: 97 26        	sta	[<L614+fp_0],Y
 16585 08:3F1A: A9 00 00     	lda	#$0
 16586 08:3F1D: A0 14 00     	ldy	#$14
 16587 08:3F20: 97 26        	sta	[<L614+fp_0],Y
 16588                        ;		if (ofs > 0) {
 16589                        	.line	4571
 16590 08:3F22: A9 00 00     	lda	#$0
 16591 08:3F25: C5 2A        	cmp	<L614+ofs_0
 16592 08:3F27: A9 00 00     	lda	#$0
 16593 08:3F2A: E5 2C        	sbc	<L614+ofs_0+2
 16594 08:3F2C: 90 03        	bcc	L623
 16595 08:3F2E: 82 18 03     	brl	L10313
 16596                        L623:
 16597                        	.line	4571
 16598                        ;			bcs = (DWORD)fs->csize * SS(fs);
                    	/* Cluster size (byte) */
 16599                        	.line	4572
 16600 08:3F31: A0 00 00     	ldy	#$0
 16601 08:3F34: 5A           	phy
  Thu Dec  3 2020 22:25                                                Page 328


 16602 08:3F35: A0 09 00     	ldy	#$9
 16603 08:3F38: B7 0F        	lda	[<L615+fs_1],Y
 16604 08:3F3A: 7A           	ply
 16605 08:3F3B: 2A           	rol	A
 16606 08:3F3C: 6A           	ror	A
 16607 08:3F3D: 10 01        	bpl	L624
 16608 08:3F3F: 88           	dey
 16609                        L624:
 16610 08:3F40: 85 01        	sta	<R0
 16611 08:3F42: 84 03        	sty	<R0+2
 16612 08:3F44: D4 03        	pei	<R0+2
 16613 08:3F46: D4 01        	pei	<R0
 16614 08:3F48: A9 09 00     	lda	#$9
 16615                        	xref	~~~lasl
 16616 08:3F4B: 22 xx xx xx  	jsl	~~~lasl
 16617 08:3F4F: 85 17        	sta	<L615+bcs_1
 16618 08:3F51: 86 19        	stx	<L615+bcs_1+2
 16619                        ;			if (ifptr > 0 &&
 16620                        	.line	4573
 16621                        ;				(ofs - 1) / bcs >= (ifpt
                    r - 1) / bcs) {	/* When seek to same or following cluste
                    r, */
 16622 08:3F53: A9 00 00     	lda	#$0
 16623 08:3F56: C5 1F        	cmp	<L615+ifptr_1
 16624 08:3F58: A9 00 00     	lda	#$0
 16625 08:3F5B: E5 21        	sbc	<L615+ifptr_1+2
 16626 08:3F5D: 90 03        	bcc	L625
 16627 08:3F5F: 82 B5 00     	brl	L10314
 16628                        L625:
 16629 08:3F62: 18           	clc
 16630 08:3F63: A9 FF FF     	lda	#$ffff
 16631 08:3F66: 65 1F        	adc	<L615+ifptr_1
 16632 08:3F68: 85 01        	sta	<R0
 16633 08:3F6A: A9 FF FF     	lda	#$ffff
 16634 08:3F6D: 65 21        	adc	<L615+ifptr_1+2
 16635 08:3F6F: 85 03        	sta	<R0+2
 16636 08:3F71: D4 19        	pei	<L615+bcs_1+2
 16637 08:3F73: D4 17        	pei	<L615+bcs_1
 16638 08:3F75: D4 03        	pei	<R0+2
 16639 08:3F77: D4 01        	pei	<R0
 16640                        	xref	~~~ludv
 16641 08:3F79: 22 xx xx xx  	jsl	~~~ludv
 16642 08:3F7D: 85 01        	sta	<R0
 16643 08:3F7F: 86 03        	stx	<R0+2
 16644 08:3F81: 18           	clc
 16645 08:3F82: A9 FF FF     	lda	#$ffff
 16646 08:3F85: 65 2A        	adc	<L614+ofs_0
 16647 08:3F87: 85 05        	sta	<R1
 16648 08:3F89: A9 FF FF     	lda	#$ffff
 16649 08:3F8C: 65 2C        	adc	<L614+ofs_0+2
 16650 08:3F8E: 85 07        	sta	<R1+2
 16651 08:3F90: D4 19        	pei	<L615+bcs_1+2
 16652 08:3F92: D4 17        	pei	<L615+bcs_1
 16653 08:3F94: D4 07        	pei	<R1+2
 16654 08:3F96: D4 05        	pei	<R1
 16655                        	xref	~~~ludv
 16656 08:3F98: 22 xx xx xx  	jsl	~~~ludv
 16657 08:3F9C: 85 05        	sta	<R1
  Thu Dec  3 2020 22:25                                                Page 329


 16658 08:3F9E: 86 07        	stx	<R1+2
 16659 08:3FA0: A5 05        	lda	<R1
 16660 08:3FA2: C5 01        	cmp	<R0
 16661 08:3FA4: A5 07        	lda	<R1+2
 16662 08:3FA6: E5 03        	sbc	<R0+2
 16663 08:3FA8: B0 03        	bcs	L626
 16664 08:3FAA: 82 6A 00     	brl	L10314
 16665                        L626:
 16666                        	.line	4574
 16667                        ;				fp->fptr = (ifptr - 1) &
                     ~(FSIZE_t)(bcs - 1);	/* start from the current cluste
                    r */
 16668                        	.line	4575
 16669 08:3FAD: 18           	clc
 16670 08:3FAE: A9 FF FF     	lda	#$ffff
 16671 08:3FB1: 65 1F        	adc	<L615+ifptr_1
 16672 08:3FB3: 85 01        	sta	<R0
 16673 08:3FB5: A9 FF FF     	lda	#$ffff
 16674 08:3FB8: 65 21        	adc	<L615+ifptr_1+2
 16675 08:3FBA: 85 03        	sta	<R0+2
 16676 08:3FBC: 18           	clc
 16677 08:3FBD: A9 FF FF     	lda	#$ffff
 16678 08:3FC0: 65 17        	adc	<L615+bcs_1
 16679 08:3FC2: 85 05        	sta	<R1
 16680 08:3FC4: A9 FF FF     	lda	#$ffff
 16681 08:3FC7: 65 19        	adc	<L615+bcs_1+2
 16682 08:3FC9: 85 07        	sta	<R1+2
 16683 08:3FCB: A5 05        	lda	<R1
 16684 08:3FCD: 49 FF FF     	eor	#<$ffffffff
 16685 08:3FD0: 85 09        	sta	<R2
 16686 08:3FD2: A5 07        	lda	<R1+2
 16687 08:3FD4: 49 FF FF     	eor	#^$ffffffff
 16688 08:3FD7: 85 0B        	sta	<R2+2
 16689 08:3FD9: A5 09        	lda	<R2
 16690 08:3FDB: 25 01        	and	<R0
 16691 08:3FDD: 85 05        	sta	<R1
 16692 08:3FDF: A5 0B        	lda	<R2+2
 16693 08:3FE1: 25 03        	and	<R0+2
 16694 08:3FE3: 85 07        	sta	<R1+2
 16695 08:3FE5: A5 05        	lda	<R1
 16696 08:3FE7: A0 12 00     	ldy	#$12
 16697 08:3FEA: 97 26        	sta	[<L614+fp_0],Y
 16698 08:3FEC: A5 07        	lda	<R1+2
 16699 08:3FEE: A0 14 00     	ldy	#$14
 16700 08:3FF1: 97 26        	sta	[<L614+fp_0],Y
 16701                        ;				ofs -= fp->fptr;
 16702                        	.line	4576
 16703 08:3FF3: 38           	sec
 16704 08:3FF4: A5 2A        	lda	<L614+ofs_0
 16705 08:3FF6: A0 12 00     	ldy	#$12
 16706 08:3FF9: F7 26        	sbc	[<L614+fp_0],Y
 16707 08:3FFB: 85 2A        	sta	<L614+ofs_0
 16708 08:3FFD: A5 2C        	lda	<L614+ofs_0+2
 16709 08:3FFF: A0 14 00     	ldy	#$14
 16710 08:4002: F7 26        	sbc	[<L614+fp_0],Y
 16711 08:4004: 85 2C        	sta	<L614+ofs_0+2
 16712                        ;				clst = fp->clust;
 16713                        	.line	4577
  Thu Dec  3 2020 22:25                                                Page 330


 16714 08:4006: A0 16 00     	ldy	#$16
 16715 08:4009: B7 26        	lda	[<L614+fp_0],Y
 16716 08:400B: 85 13        	sta	<L615+clst_1
 16717 08:400D: A0 18 00     	ldy	#$18
 16718 08:4010: B7 26        	lda	[<L614+fp_0],Y
 16719 08:4012: 85 15        	sta	<L615+clst_1+2
 16720                        ;			} else {			
                    						/* When seek to 
                    back cluster, */
 16721                        	.line	4578
 16722 08:4014: 82 89 00     	brl	L10315
 16723                        L10314:
 16724                        	.line	4578
 16725                        ;				clst = fp->obj.sclust;	
                    				/* start from the first cluster 
                    */
 16726                        	.line	4579
 16727 08:4017: A0 08 00     	ldy	#$8
 16728 08:401A: B7 26        	lda	[<L614+fp_0],Y
 16729 08:401C: 85 13        	sta	<L615+clst_1
 16730 08:401E: A0 0A 00     	ldy	#$a
 16731 08:4021: B7 26        	lda	[<L614+fp_0],Y
 16732 08:4023: 85 15        	sta	<L615+clst_1+2
 16733                        ;#if !FF_FS_READONLY
 16734                        ;				if (clst == 0) {	
                    					/* If no cluster chain, 
                    create a new chain */
 16735                        	.line	4581
 16736 08:4025: A5 13        	lda	<L615+clst_1
 16737 08:4027: 05 15        	ora	<L615+clst_1+2
 16738 08:4029: F0 03        	beq	L627
 16739 08:402B: 82 64 00     	brl	L10316
 16740                        L627:
 16741                        	.line	4581
 16742                        ;					clst = create_ch
                    ain(&fp->obj, 0);
 16743                        	.line	4582
 16744 08:402E: F4 00 00     	pea	#^$0
 16745 08:4031: F4 00 00     	pea	#<$0
 16746 08:4034: D4 28        	pei	<L614+fp_0+2
 16747 08:4036: D4 26        	pei	<L614+fp_0
 16748 08:4038: 22 CC 0D 08  	jsl	~~create_chain
 16749 08:403C: 85 13        	sta	<L615+clst_1
 16750 08:403E: 86 15        	stx	<L615+clst_1+2
 16751                        ;					if (clst == 1) A
                    BORT(fs, FR_INT_ERR);
 16752                        	.line	4583
 16753 08:4040: A5 13        	lda	<L615+clst_1
 16754 08:4042: C9 01 00     	cmp	#<$1
 16755 08:4045: D0 05        	bne	L628
 16756 08:4047: A5 15        	lda	<L615+clst_1+2
 16757 08:4049: C9 00 00     	cmp	#^$1
 16758                        L628:
 16759 08:404C: F0 03        	beq	L629
 16760 08:404E: 82 11 00     	brl	L10317
 16761                        L629:
 16762                        	.line	4583
 16763                        	.line	4583
  Thu Dec  3 2020 22:25                                                Page 331


 16764 08:4051: E2 20        	sep	#$20
 16765                        	longa	off
 16766 08:4053: A9 02        	lda	#$2
 16767 08:4055: A0 11 00     	ldy	#$11
 16768 08:4058: 97 26        	sta	[<L614+fp_0],Y
 16769 08:405A: C2 20        	rep	#$20
 16770                        	longa	on
 16771                        	.line	4583
 16772 08:405C: A9 02 00     	lda	#$2
 16773 08:405F: 82 5B FE     	brl	L619
 16774                        	.line	4583
 16775                        L10317:
 16776                        	.line	4583
 16777                        ;					if (clst == 0xFF
                    FFFFFF) ABORT(fs, FR_DISK_ERR);
 16778                        	.line	4584
 16779 08:4062: A5 13        	lda	<L615+clst_1
 16780 08:4064: C9 FF FF     	cmp	#<$ffffffff
 16781 08:4067: D0 05        	bne	L630
 16782 08:4069: A5 15        	lda	<L615+clst_1+2
 16783 08:406B: C9 FF FF     	cmp	#^$ffffffff
 16784                        L630:
 16785 08:406E: F0 03        	beq	L631
 16786 08:4070: 82 11 00     	brl	L10318
 16787                        L631:
 16788                        	.line	4584
 16789                        	.line	4584
 16790 08:4073: E2 20        	sep	#$20
 16791                        	longa	off
 16792 08:4075: A9 01        	lda	#$1
 16793 08:4077: A0 11 00     	ldy	#$11
 16794 08:407A: 97 26        	sta	[<L614+fp_0],Y
 16795 08:407C: C2 20        	rep	#$20
 16796                        	longa	on
 16797                        	.line	4584
 16798 08:407E: A9 01 00     	lda	#$1
 16799 08:4081: 82 39 FE     	brl	L619
 16800                        	.line	4584
 16801                        L10318:
 16802                        	.line	4584
 16803                        ;					fp->obj.sclust =
                     clst;
 16804                        	.line	4585
 16805 08:4084: A5 13        	lda	<L615+clst_1
 16806 08:4086: A0 08 00     	ldy	#$8
 16807 08:4089: 97 26        	sta	[<L614+fp_0],Y
 16808 08:408B: A5 15        	lda	<L615+clst_1+2
 16809 08:408D: A0 0A 00     	ldy	#$a
 16810 08:4090: 97 26        	sta	[<L614+fp_0],Y
 16811                        ;				}
 16812                        	.line	4586
 16813                        ;#endif
 16814                        ;				fp->clust = clst;
 16815                        L10316:
 16816                        	.line	4588
 16817 08:4092: A5 13        	lda	<L615+clst_1
 16818 08:4094: A0 16 00     	ldy	#$16
 16819 08:4097: 97 26        	sta	[<L614+fp_0],Y
  Thu Dec  3 2020 22:25                                                Page 332


 16820 08:4099: A5 15        	lda	<L615+clst_1+2
 16821 08:409B: A0 18 00     	ldy	#$18
 16822 08:409E: 97 26        	sta	[<L614+fp_0],Y
 16823                        ;			}
 16824                        	.line	4589
 16825                        L10315:
 16826                        ;			if (clst != 0) {
 16827                        	.line	4590
 16828 08:40A0: A5 13        	lda	<L615+clst_1
 16829 08:40A2: 05 15        	ora	<L615+clst_1+2
 16830 08:40A4: D0 03        	bne	L632
 16831 08:40A6: 82 A0 01     	brl	L10319
 16832                        L632:
 16833                        	.line	4590
 16834                        ;				while (ofs > bcs) {	
                    					/* Cluster following loo
                    p */
 16835                        	.line	4591
 16836                        L10320:
 16837 08:40A9: A5 17        	lda	<L615+bcs_1
 16838 08:40AB: C5 2A        	cmp	<L614+ofs_0
 16839 08:40AD: A5 19        	lda	<L615+bcs_1+2
 16840 08:40AF: E5 2C        	sbc	<L614+ofs_0+2
 16841 08:40B1: 90 03        	bcc	L633
 16842 08:40B3: 82 21 01     	brl	L10321
 16843                        L633:
 16844                        	.line	4591
 16845                        ;					ofs -= bcs; fp->
                    fptr += bcs;
 16846                        	.line	4592
 16847 08:40B6: 38           	sec
 16848 08:40B7: A5 2A        	lda	<L614+ofs_0
 16849 08:40B9: E5 17        	sbc	<L615+bcs_1
 16850 08:40BB: 85 2A        	sta	<L614+ofs_0
 16851 08:40BD: A5 2C        	lda	<L614+ofs_0+2
 16852 08:40BF: E5 19        	sbc	<L615+bcs_1+2
 16853 08:40C1: 85 2C        	sta	<L614+ofs_0+2
 16854                        	.line	4592
 16855 08:40C3: 18           	clc
 16856 08:40C4: A9 12 00     	lda	#$12
 16857 08:40C7: 65 26        	adc	<L614+fp_0
 16858 08:40C9: 85 01        	sta	<R0
 16859 08:40CB: A9 00 00     	lda	#$0
 16860 08:40CE: 65 28        	adc	<L614+fp_0+2
 16861 08:40D0: 85 03        	sta	<R0+2
 16862 08:40D2: 18           	clc
 16863 08:40D3: A7 01        	lda	[<R0]
 16864 08:40D5: 65 17        	adc	<L615+bcs_1
 16865 08:40D7: 87 01        	sta	[<R0]
 16866 08:40D9: A0 02 00     	ldy	#$2
 16867 08:40DC: B7 01        	lda	[<R0],Y
 16868 08:40DE: 65 19        	adc	<L615+bcs_1+2
 16869 08:40E0: A0 02 00     	ldy	#$2
 16870 08:40E3: 97 01        	sta	[<R0],Y
 16871                        ;#if !FF_FS_READONLY
 16872                        ;					if (fp->flag & F
                    A_WRITE) {			/* Check if in write mode or not
                     */
  Thu Dec  3 2020 22:25                                                Page 333


 16873                        	.line	4594
 16874 08:40E5: E2 20        	sep	#$20
 16875                        	longa	off
 16876 08:40E7: A0 10 00     	ldy	#$10
 16877 08:40EA: B7 26        	lda	[<L614+fp_0],Y
 16878 08:40EC: 29 02        	and	#<$2
 16879 08:40EE: C2 20        	rep	#$20
 16880                        	longa	on
 16881 08:40F0: D0 03        	bne	L634
 16882 08:40F2: 82 6C 00     	brl	L10322
 16883                        L634:
 16884                        	.line	4594
 16885                        ;						if (FF_F
                    S_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain 
                    object needs correct objsize to generate FAT value */
 16886                        	.line	4595
 16887 08:40F5: 82 46 00     	brl	L10323
 16888 08:40F8: A0 0C 00     	ldy	#$c
 16889 08:40FB: B7 26        	lda	[<L614+fp_0],Y
 16890 08:40FD: A0 12 00     	ldy	#$12
 16891 08:4100: D7 26        	cmp	[<L614+fp_0],Y
 16892 08:4102: A0 0E 00     	ldy	#$e
 16893 08:4105: B7 26        	lda	[<L614+fp_0],Y
 16894 08:4107: A0 14 00     	ldy	#$14
 16895 08:410A: F7 26        	sbc	[<L614+fp_0],Y
 16896 08:410C: 90 03        	bcc	L635
 16897 08:410E: 82 2D 00     	brl	L10323
 16898                        L635:
 16899                        	.line	4595
 16900                        ;							
                    fp->obj.objsize = fp->fptr;
 16901                        	.line	4596
 16902 08:4111: A0 12 00     	ldy	#$12
 16903 08:4114: B7 26        	lda	[<L614+fp_0],Y
 16904 08:4116: A0 0C 00     	ldy	#$c
 16905 08:4119: 97 26        	sta	[<L614+fp_0],Y
 16906 08:411B: A0 14 00     	ldy	#$14
 16907 08:411E: B7 26        	lda	[<L614+fp_0],Y
 16908 08:4120: A0 0E 00     	ldy	#$e
 16909 08:4123: 97 26        	sta	[<L614+fp_0],Y
 16910                        ;							
                    fp->flag |= FA_MODIFIED;
 16911                        	.line	4597
 16912 08:4125: 18           	clc
 16913 08:4126: A9 10 00     	lda	#$10
 16914 08:4129: 65 26        	adc	<L614+fp_0
 16915 08:412B: 85 01        	sta	<R0
 16916 08:412D: A9 00 00     	lda	#$0
 16917 08:4130: 65 28        	adc	<L614+fp_0+2
 16918 08:4132: 85 03        	sta	<R0+2
 16919 08:4134: E2 20        	sep	#$20
 16920                        	longa	off
 16921 08:4136: A7 01        	lda	[<R0]
 16922 08:4138: 09 40        	ora	#<$40
 16923 08:413A: 87 01        	sta	[<R0]
 16924 08:413C: C2 20        	rep	#$20
 16925                        	longa	on
 16926                        ;						}
  Thu Dec  3 2020 22:25                                                Page 334


 16927                        	.line	4598
 16928                        ;						clst = c
                    reate_chain(&fp->obj, clst);	/* Follow chain with for
                    ceed stretch */
 16929                        L10323:
 16930                        	.line	4599
 16931 08:413E: D4 15        	pei	<L615+clst_1+2
 16932 08:4140: D4 13        	pei	<L615+clst_1
 16933 08:4142: D4 28        	pei	<L614+fp_0+2
 16934 08:4144: D4 26        	pei	<L614+fp_0
 16935 08:4146: 22 CC 0D 08  	jsl	~~create_chain
 16936 08:414A: 85 13        	sta	<L615+clst_1
 16937 08:414C: 86 15        	stx	<L615+clst_1+2
 16938                        ;						if (clst
                     == 0) {				/* Clip file size in cas
                    e of disk full */
 16939                        	.line	4600
 16940 08:414E: A5 13        	lda	<L615+clst_1
 16941 08:4150: 05 15        	ora	<L615+clst_1+2
 16942 08:4152: F0 03        	beq	L636
 16943 08:4154: 82 07 00     	brl	L10324
 16944                        L636:
 16945                        	.line	4600
 16946                        ;							
                    ofs = 0; break;
 16947                        	.line	4601
 16948 08:4157: 64 2A        	stz	<L614+ofs_0
 16949 08:4159: 64 2C        	stz	<L614+ofs_0+2
 16950                        	.line	4601
 16951 08:415B: 82 79 00     	brl	L10321
 16952                        ;						}
 16953                        	.line	4602
 16954                        ;					} else
 16955                        L10324:
 16956                        	.line	4603
 16957 08:415E: 82 10 00     	brl	L10325
 16958                        L10322:
 16959                        ;#endif
 16960                        ;					{
 16961                        	.line	4605
 16962                        ;						clst = g
                    et_fat(&fp->obj, clst);	/* Follow cluster chain if not i
                    n write mode */
 16963                        	.line	4606
 16964 08:4161: D4 15        	pei	<L615+clst_1+2
 16965 08:4163: D4 13        	pei	<L615+clst_1
 16966 08:4165: D4 28        	pei	<L614+fp_0+2
 16967 08:4167: D4 26        	pei	<L614+fp_0
 16968 08:4169: 22 8D 06 08  	jsl	~~get_fat
 16969 08:416D: 85 13        	sta	<L615+clst_1
 16970 08:416F: 86 15        	stx	<L615+clst_1+2
 16971                        ;					}
 16972                        	.line	4607
 16973                        L10325:
 16974                        ;					if (clst == 0xFF
                    FFFFFF) ABORT(fs, FR_DISK_ERR);
 16975                        	.line	4608
 16976 08:4171: A5 13        	lda	<L615+clst_1
  Thu Dec  3 2020 22:25                                                Page 335


 16977 08:4173: C9 FF FF     	cmp	#<$ffffffff
 16978 08:4176: D0 05        	bne	L637
 16979 08:4178: A5 15        	lda	<L615+clst_1+2
 16980 08:417A: C9 FF FF     	cmp	#^$ffffffff
 16981                        L637:
 16982 08:417D: F0 03        	beq	L638
 16983 08:417F: 82 11 00     	brl	L10326
 16984                        L638:
 16985                        	.line	4608
 16986                        	.line	4608
 16987 08:4182: E2 20        	sep	#$20
 16988                        	longa	off
 16989 08:4184: A9 01        	lda	#$1
 16990 08:4186: A0 11 00     	ldy	#$11
 16991 08:4189: 97 26        	sta	[<L614+fp_0],Y
 16992 08:418B: C2 20        	rep	#$20
 16993                        	longa	on
 16994                        	.line	4608
 16995 08:418D: A9 01 00     	lda	#$1
 16996 08:4190: 82 2A FD     	brl	L619
 16997                        	.line	4608
 16998                        L10326:
 16999                        	.line	4608
 17000                        ;					if (clst <= 1 ||
                     clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 17001                        	.line	4609
 17002 08:4193: A9 01 00     	lda	#$1
 17003 08:4196: C5 13        	cmp	<L615+clst_1
 17004 08:4198: A9 00 00     	lda	#$0
 17005 08:419B: E5 15        	sbc	<L615+clst_1+2
 17006 08:419D: 90 03        	bcc	L640
 17007 08:419F: 82 13 00     	brl	L639
 17008                        L640:
 17009 08:41A2: A5 13        	lda	<L615+clst_1
 17010 08:41A4: A0 13 00     	ldy	#$13
 17011 08:41A7: D7 0F        	cmp	[<L615+fs_1],Y
 17012 08:41A9: A5 15        	lda	<L615+clst_1+2
 17013 08:41AB: A0 15 00     	ldy	#$15
 17014 08:41AE: F7 0F        	sbc	[<L615+fs_1],Y
 17015 08:41B0: B0 03        	bcs	L641
 17016 08:41B2: 82 11 00     	brl	L10327
 17017                        L641:
 17018                        L639:
 17019                        	.line	4609
 17020                        	.line	4609
 17021 08:41B5: E2 20        	sep	#$20
 17022                        	longa	off
 17023 08:41B7: A9 02        	lda	#$2
 17024 08:41B9: A0 11 00     	ldy	#$11
 17025 08:41BC: 97 26        	sta	[<L614+fp_0],Y
 17026 08:41BE: C2 20        	rep	#$20
 17027                        	longa	on
 17028                        	.line	4609
 17029 08:41C0: A9 02 00     	lda	#$2
 17030 08:41C3: 82 F7 FC     	brl	L619
 17031                        	.line	4609
 17032                        L10327:
 17033                        	.line	4609
  Thu Dec  3 2020 22:25                                                Page 336


 17034                        ;					fp->clust = clst
                    ;
 17035                        	.line	4610
 17036 08:41C6: A5 13        	lda	<L615+clst_1
 17037 08:41C8: A0 16 00     	ldy	#$16
 17038 08:41CB: 97 26        	sta	[<L614+fp_0],Y
 17039 08:41CD: A5 15        	lda	<L615+clst_1+2
 17040 08:41CF: A0 18 00     	ldy	#$18
 17041 08:41D2: 97 26        	sta	[<L614+fp_0],Y
 17042                        ;				}
 17043                        	.line	4611
 17044 08:41D4: 82 D2 FE     	brl	L10320
 17045                        L10321:
 17046                        ;				fp->fptr += ofs;
 17047                        	.line	4612
 17048 08:41D7: 18           	clc
 17049 08:41D8: A9 12 00     	lda	#$12
 17050 08:41DB: 65 26        	adc	<L614+fp_0
 17051 08:41DD: 85 01        	sta	<R0
 17052 08:41DF: A9 00 00     	lda	#$0
 17053 08:41E2: 65 28        	adc	<L614+fp_0+2
 17054 08:41E4: 85 03        	sta	<R0+2
 17055 08:41E6: 18           	clc
 17056 08:41E7: A7 01        	lda	[<R0]
 17057 08:41E9: 65 2A        	adc	<L614+ofs_0
 17058 08:41EB: 87 01        	sta	[<R0]
 17059 08:41ED: A0 02 00     	ldy	#$2
 17060 08:41F0: B7 01        	lda	[<R0],Y
 17061 08:41F2: 65 2C        	adc	<L614+ofs_0+2
 17062 08:41F4: A0 02 00     	ldy	#$2
 17063 08:41F7: 97 01        	sta	[<R0],Y
 17064                        ;				if (ofs % SS(fs)) {
 17065                        	.line	4613
 17066 08:41F9: A5 2A        	lda	<L614+ofs_0
 17067 08:41FB: 29 FF 01     	and	#<$1ff
 17068 08:41FE: D0 03        	bne	L642
 17069 08:4200: 82 46 00     	brl	L10328
 17070                        L642:
 17071                        	.line	4613
 17072                        ;					nsect = clst2sec
                    t(fs, clst);	/* Current sector */
 17073                        	.line	4614
 17074 08:4203: D4 15        	pei	<L615+clst_1+2
 17075 08:4205: D4 13        	pei	<L615+clst_1
 17076 08:4207: D4 11        	pei	<L615+fs_1+2
 17077 08:4209: D4 0F        	pei	<L615+fs_1
 17078 08:420B: 22 FE 05 08  	jsl	~~clst2sect
 17079 08:420F: 85 1B        	sta	<L615+nsect_1
 17080 08:4211: 86 1D        	stx	<L615+nsect_1+2
 17081                        ;					if (nsect == 0) 
                    ABORT(fs, FR_INT_ERR);
 17082                        	.line	4615
 17083 08:4213: A5 1B        	lda	<L615+nsect_1
 17084 08:4215: 05 1D        	ora	<L615+nsect_1+2
 17085 08:4217: F0 03        	beq	L643
 17086 08:4219: 82 11 00     	brl	L10329
 17087                        L643:
 17088                        	.line	4615
  Thu Dec  3 2020 22:25                                                Page 337


 17089                        	.line	4615
 17090 08:421C: E2 20        	sep	#$20
 17091                        	longa	off
 17092 08:421E: A9 02        	lda	#$2
 17093 08:4220: A0 11 00     	ldy	#$11
 17094 08:4223: 97 26        	sta	[<L614+fp_0],Y
 17095 08:4225: C2 20        	rep	#$20
 17096                        	longa	on
 17097                        	.line	4615
 17098 08:4227: A9 02 00     	lda	#$2
 17099 08:422A: 82 90 FC     	brl	L619
 17100                        	.line	4615
 17101                        L10329:
 17102                        	.line	4615
 17103                        ;					nsect += (DWORD)
                    (ofs / SS(fs));
 17104                        	.line	4616
 17105 08:422D: D4 2C        	pei	<L614+ofs_0+2
 17106 08:422F: D4 2A        	pei	<L614+ofs_0
 17107 08:4231: A9 09 00     	lda	#$9
 17108                        	xref	~~~llsr
 17109 08:4234: 22 xx xx xx  	jsl	~~~llsr
 17110 08:4238: 85 01        	sta	<R0
 17111 08:423A: 86 03        	stx	<R0+2
 17112 08:423C: 18           	clc
 17113 08:423D: A5 01        	lda	<R0
 17114 08:423F: 65 1B        	adc	<L615+nsect_1
 17115 08:4241: 85 1B        	sta	<L615+nsect_1
 17116 08:4243: A5 03        	lda	<R0+2
 17117 08:4245: 65 1D        	adc	<L615+nsect_1+2
 17118 08:4247: 85 1D        	sta	<L615+nsect_1+2
 17119                        ;				}
 17120                        	.line	4617
 17121                        ;			}
 17122                        L10328:
 17123                        	.line	4618
 17124                        ;		}
 17125                        L10319:
 17126                        	.line	4619
 17127                        ;		if (!FF_FS_READONLY && fp->fptr > fp->ob
                    j.objsize) {	/* Set file change flag if the file size
                     is extended */
 17128                        L10313:
 17129                        	.line	4620
 17130 08:4249: A0 0C 00     	ldy	#$c
 17131 08:424C: B7 26        	lda	[<L614+fp_0],Y
 17132 08:424E: A0 12 00     	ldy	#$12
 17133 08:4251: D7 26        	cmp	[<L614+fp_0],Y
 17134 08:4253: A0 0E 00     	ldy	#$e
 17135 08:4256: B7 26        	lda	[<L614+fp_0],Y
 17136 08:4258: A0 14 00     	ldy	#$14
 17137 08:425B: F7 26        	sbc	[<L614+fp_0],Y
 17138 08:425D: 90 03        	bcc	L644
 17139 08:425F: 82 2D 00     	brl	L10330
 17140                        L644:
 17141                        	.line	4620
 17142                        ;			fp->obj.objsize = fp->fptr;
 17143                        	.line	4621
  Thu Dec  3 2020 22:25                                                Page 338


 17144 08:4262: A0 12 00     	ldy	#$12
 17145 08:4265: B7 26        	lda	[<L614+fp_0],Y
 17146 08:4267: A0 0C 00     	ldy	#$c
 17147 08:426A: 97 26        	sta	[<L614+fp_0],Y
 17148 08:426C: A0 14 00     	ldy	#$14
 17149 08:426F: B7 26        	lda	[<L614+fp_0],Y
 17150 08:4271: A0 0E 00     	ldy	#$e
 17151 08:4274: 97 26        	sta	[<L614+fp_0],Y
 17152                        ;			fp->flag |= FA_MODIFIED;
 17153                        	.line	4622
 17154 08:4276: 18           	clc
 17155 08:4277: A9 10 00     	lda	#$10
 17156 08:427A: 65 26        	adc	<L614+fp_0
 17157 08:427C: 85 01        	sta	<R0
 17158 08:427E: A9 00 00     	lda	#$0
 17159 08:4281: 65 28        	adc	<L614+fp_0+2
 17160 08:4283: 85 03        	sta	<R0+2
 17161 08:4285: E2 20        	sep	#$20
 17162                        	longa	off
 17163 08:4287: A7 01        	lda	[<R0]
 17164 08:4289: 09 40        	ora	#<$40
 17165 08:428B: 87 01        	sta	[<R0]
 17166 08:428D: C2 20        	rep	#$20
 17167                        	longa	on
 17168                        ;		}
 17169                        	.line	4623
 17170                        ;		if (fp->fptr % SS(fs) && nsect != fp->se
                    ct) {	/* Fill sector cache if needed */
 17171                        L10330:
 17172                        	.line	4624
 17173 08:428F: A0 12 00     	ldy	#$12
 17174 08:4292: B7 26        	lda	[<L614+fp_0],Y
 17175 08:4294: 29 FF 01     	and	#<$1ff
 17176 08:4297: D0 03        	bne	L645
 17177 08:4299: 82 CA 00     	brl	L10331
 17178                        L645:
 17179 08:429C: A5 1B        	lda	<L615+nsect_1
 17180 08:429E: A0 1A 00     	ldy	#$1a
 17181 08:42A1: D7 26        	cmp	[<L614+fp_0],Y
 17182 08:42A3: D0 07        	bne	L646
 17183 08:42A5: A5 1D        	lda	<L615+nsect_1+2
 17184 08:42A7: A0 1C 00     	ldy	#$1c
 17185 08:42AA: D7 26        	cmp	[<L614+fp_0],Y
 17186                        L646:
 17187 08:42AC: D0 03        	bne	L647
 17188 08:42AE: 82 B5 00     	brl	L10331
 17189                        L647:
 17190                        	.line	4624
 17191                        ;#if !FF_FS_TINY
 17192                        ;#if !FF_FS_READONLY
 17193                        ;			if (fp->flag & FA_DIRTY) {	
                    		/* Write-back dirty sector cache */
 17194                        	.line	4627
 17195 08:42B1: E2 20        	sep	#$20
 17196                        	longa	off
 17197 08:42B3: A0 10 00     	ldy	#$10
 17198 08:42B6: B7 26        	lda	[<L614+fp_0],Y
 17199 08:42B8: 29 80        	and	#<$80
  Thu Dec  3 2020 22:25                                                Page 339


 17200 08:42BA: C2 20        	rep	#$20
 17201                        	longa	on
 17202 08:42BC: D0 03        	bne	L648
 17203 08:42BE: 82 5C 00     	brl	L10332
 17204                        L648:
 17205                        	.line	4627
 17206                        ;				if (disk_write(fs->pdrv,
                     fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 17207                        	.line	4628
 17208 08:42C1: F4 01 00     	pea	#<$1
 17209 08:42C4: A0 1C 00     	ldy	#$1c
 17210 08:42C7: B7 26        	lda	[<L614+fp_0],Y
 17211 08:42C9: 48           	pha
 17212 08:42CA: A0 1A 00     	ldy	#$1a
 17213 08:42CD: B7 26        	lda	[<L614+fp_0],Y
 17214 08:42CF: 48           	pha
 17215 08:42D0: 18           	clc
 17216 08:42D1: A9 26 00     	lda	#$26
 17217 08:42D4: 65 26        	adc	<L614+fp_0
 17218 08:42D6: 85 01        	sta	<R0
 17219 08:42D8: A9 00 00     	lda	#$0
 17220 08:42DB: 65 28        	adc	<L614+fp_0+2
 17221 08:42DD: 85 03        	sta	<R0+2
 17222 08:42DF: D4 03        	pei	<R0+2
 17223 08:42E1: D4 01        	pei	<R0
 17224 08:42E3: A0 01 00     	ldy	#$1
 17225 08:42E6: B7 0F        	lda	[<L615+fs_1],Y
 17226 08:42E8: 48           	pha
 17227 08:42E9: 22 xx xx xx  	jsl	~~disk_write
 17228 08:42ED: AA           	tax
 17229 08:42EE: D0 03        	bne	L649
 17230 08:42F0: 82 11 00     	brl	L10333
 17231                        L649:
 17232                        	.line	4628
 17233                        	.line	4628
 17234 08:42F3: E2 20        	sep	#$20
 17235                        	longa	off
 17236 08:42F5: A9 01        	lda	#$1
 17237 08:42F7: A0 11 00     	ldy	#$11
 17238 08:42FA: 97 26        	sta	[<L614+fp_0],Y
 17239 08:42FC: C2 20        	rep	#$20
 17240                        	longa	on
 17241                        	.line	4628
 17242 08:42FE: A9 01 00     	lda	#$1
 17243 08:4301: 82 B9 FB     	brl	L619
 17244                        	.line	4628
 17245                        L10333:
 17246                        	.line	4628
 17247                        ;				fp->flag &= (BYTE)~FA_DI
                    RTY;
 17248                        	.line	4629
 17249 08:4304: 18           	clc
 17250 08:4305: A9 10 00     	lda	#$10
 17251 08:4308: 65 26        	adc	<L614+fp_0
 17252 08:430A: 85 01        	sta	<R0
 17253 08:430C: A9 00 00     	lda	#$0
 17254 08:430F: 65 28        	adc	<L614+fp_0+2
 17255 08:4311: 85 03        	sta	<R0+2
  Thu Dec  3 2020 22:25                                                Page 340


 17256 08:4313: E2 20        	sep	#$20
 17257                        	longa	off
 17258 08:4315: A7 01        	lda	[<R0]
 17259 08:4317: 29 7F        	and	#<$7f
 17260 08:4319: 87 01        	sta	[<R0]
 17261 08:431B: C2 20        	rep	#$20
 17262                        	longa	on
 17263                        ;			}
 17264                        	.line	4630
 17265                        ;#endif
 17266                        ;			if (disk_read(fs->pdrv, fp->buf,
                     nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill 
                    sector cache */
 17267                        L10332:
 17268                        	.line	4632
 17269 08:431D: F4 01 00     	pea	#<$1
 17270 08:4320: D4 1D        	pei	<L615+nsect_1+2
 17271 08:4322: D4 1B        	pei	<L615+nsect_1
 17272 08:4324: 18           	clc
 17273 08:4325: A9 26 00     	lda	#$26
 17274 08:4328: 65 26        	adc	<L614+fp_0
 17275 08:432A: 85 01        	sta	<R0
 17276 08:432C: A9 00 00     	lda	#$0
 17277 08:432F: 65 28        	adc	<L614+fp_0+2
 17278 08:4331: 85 03        	sta	<R0+2
 17279 08:4333: D4 03        	pei	<R0+2
 17280 08:4335: D4 01        	pei	<R0
 17281 08:4337: A0 01 00     	ldy	#$1
 17282 08:433A: B7 0F        	lda	[<L615+fs_1],Y
 17283 08:433C: 48           	pha
 17284 08:433D: 22 xx xx xx  	jsl	~~disk_read
 17285 08:4341: AA           	tax
 17286 08:4342: D0 03        	bne	L650
 17287 08:4344: 82 11 00     	brl	L10334
 17288                        L650:
 17289                        	.line	4632
 17290                        	.line	4632
 17291 08:4347: E2 20        	sep	#$20
 17292                        	longa	off
 17293 08:4349: A9 01        	lda	#$1
 17294 08:434B: A0 11 00     	ldy	#$11
 17295 08:434E: 97 26        	sta	[<L614+fp_0],Y
 17296 08:4350: C2 20        	rep	#$20
 17297                        	longa	on
 17298                        	.line	4632
 17299 08:4352: A9 01 00     	lda	#$1
 17300 08:4355: 82 65 FB     	brl	L619
 17301                        	.line	4632
 17302                        L10334:
 17303                        	.line	4632
 17304                        ;#endif
 17305                        ;			fp->sect = nsect;
 17306                        	.line	4634
 17307 08:4358: A5 1B        	lda	<L615+nsect_1
 17308 08:435A: A0 1A 00     	ldy	#$1a
 17309 08:435D: 97 26        	sta	[<L614+fp_0],Y
 17310 08:435F: A5 1D        	lda	<L615+nsect_1+2
 17311 08:4361: A0 1C 00     	ldy	#$1c
  Thu Dec  3 2020 22:25                                                Page 341


 17312 08:4364: 97 26        	sta	[<L614+fp_0],Y
 17313                        ;		}
 17314                        	.line	4635
 17315                        ;	}
 17316                        L10331:
 17317                        	.line	4636
 17318                        ;
 17319                        ;	LEAVE_FF(fs, res);
 17320                        	.line	4638
 17321 08:4366: A5 0D        	lda	<L615+res_1
 17322 08:4368: 82 52 FB     	brl	L619
 17323                        ;}
 17324                        	.line	4639
 17325                        	.endblock	4639
 17326             00000022   L614	equ	34
 17327             0000000D   L615	equ	13
 17328 08:436B:              	ends
 17329                        	efunc
 17330                        	.endfunc	4639,13,34
 17331                        	.line	4639
 17332                        ;
 17333                        ;
 17334                        ;
 17335                        ;#if FF_FS_MINIMIZE <= 1
 17336                        ;/*-----------------------------------------------
                    ------------------------*/
 17337                        ;/* Create a Directory Object                     
                                            */
 17338                        ;/*-----------------------------------------------
                    ------------------------*/
 17339                        ;
 17340                        ;FRESULT f_opendir (
 17341                        ;	DIR* dp,			/* Pointer to di
                    rectory object to create */
 17342                        ;	const TCHAR* path	/* Pointer to the direct
                    ory path */
 17343                        ;)
 17344                        ;{
 17345                        	.line	4648
 17346                        	.line	4652
 17347                        	FFDOS
 17348                        	xdef	~~f_opendir
 17349                        	func
 17350                        	.function	4652
 17351                        ~~f_opendir:
 17352                        	longa	on
 17353                        	longi	on
 17354 08:436B: 3B           	tsc
 17355 08:436C: 38           	sec
 17356 08:436D: E9 0A 00     	sbc	#L651
 17357 08:4370: 1B           	tcs
 17358 08:4371: 0B           	phd
 17359 08:4372: 5B           	tcd
 17360             00000004   dp_0	set	4
 17361             00000008   path_0	set	8
 17362                        	.block	4652
 17363                        ;	FRESULT res;
 17364                        ;	FATFS *fs;
  Thu Dec  3 2020 22:25                                                Page 342


 17365                        ;	DEF_NAMBUF
 17366                        ;
 17367                        ;
 17368                        ;	if (!dp) return FR_INVALID_OBJECT;
 17369             00000000   res_1	set	0
 17370             00000002   fs_1	set	2
 17371                        	.sym	res,0,5,1,16
 17372                        	.sym	fs,2,138,1,32,80
 17373                        	.sym	dp,4,138,6,32,83
 17374                        	.sym	path,8,142,6,32
 17375                        	.line	4658
 17376 08:4373: A5 0E        	lda	<L651+dp_0
 17377 08:4375: 05 10        	ora	<L651+dp_0+2
 17378 08:4377: F0 03        	beq	L654
 17379 08:4379: 82 15 00     	brl	L10335
 17380                        L654:
 17381                        	.line	4658
 17382 08:437C: A9 09 00     	lda	#$9
 17383                        L655:
 17384 08:437F: A8           	tay
 17385 08:4380: A5 0C        	lda	<L651+2
 17386 08:4382: 85 14        	sta	<L651+2+8
 17387 08:4384: A5 0B        	lda	<L651+1
 17388 08:4386: 85 13        	sta	<L651+1+8
 17389 08:4388: 2B           	pld
 17390 08:4389: 3B           	tsc
 17391 08:438A: 18           	clc
 17392 08:438B: 69 12 00     	adc	#L651+8
 17393 08:438E: 1B           	tcs
 17394 08:438F: 98           	tya
 17395 08:4390: 6B           	rtl
 17396                        ;
 17397                        ;	/* Get logical drive */
 17398                        ;	res = mount_volume(&path, &fs, 0);
 17399                        L10335:
 17400                        	.line	4661
 17401 08:4391: F4 00 00     	pea	#<$0
 17402 08:4394: F4 00 00     	pea	#0
 17403 08:4397: 18           	clc
 17404 08:4398: 7B           	tdc
 17405 08:4399: 69 07 00     	adc	#<L652+fs_1
 17406 08:439C: 48           	pha
 17407 08:439D: F4 00 00     	pea	#0
 17408 08:43A0: 18           	clc
 17409 08:43A1: 7B           	tdc
 17410 08:43A2: 69 12 00     	adc	#<L651+path_0
 17411 08:43A5: 48           	pha
 17412 08:43A6: 22 E7 25 08  	jsl	~~mount_volume
 17413 08:43AA: 85 05        	sta	<L652+res_1
 17414                        ;	if (res == FR_OK) {
 17415                        	.line	4662
 17416 08:43AC: A5 05        	lda	<L652+res_1
 17417 08:43AE: F0 03        	beq	L656
 17418 08:43B0: 82 9E 00     	brl	L10336
 17419                        L656:
 17420                        	.line	4662
 17421                        ;		dp->obj.fs = fs;
 17422                        	.line	4663
  Thu Dec  3 2020 22:25                                                Page 343


 17423 08:43B3: A5 07        	lda	<L652+fs_1
 17424 08:43B5: 87 0E        	sta	[<L651+dp_0]
 17425 08:43B7: A5 09        	lda	<L652+fs_1+2
 17426 08:43B9: A0 02 00     	ldy	#$2
 17427 08:43BC: 97 0E        	sta	[<L651+dp_0],Y
 17428                        ;		INIT_NAMBUF(fs);
 17429                        	.line	4664
 17430                        ;		res = follow_path(dp, path);		
                    	/* Follow the path to the directory */
 17431                        	.line	4665
 17432 08:43BE: D4 14        	pei	<L651+path_0+2
 17433 08:43C0: D4 12        	pei	<L651+path_0
 17434 08:43C2: D4 10        	pei	<L651+dp_0+2
 17435 08:43C4: D4 0E        	pei	<L651+dp_0
 17436 08:43C6: 22 FC 1E 08  	jsl	~~follow_path
 17437 08:43CA: 85 05        	sta	<L652+res_1
 17438                        ;		if (res == FR_OK) {			
                    			/* Follow completed */
 17439                        	.line	4666
 17440 08:43CC: A5 05        	lda	<L652+res_1
 17441 08:43CE: F0 03        	beq	L657
 17442 08:43D0: 82 6F 00     	brl	L10337
 17443                        L657:
 17444                        	.line	4666
 17445                        ;			if (!(dp->fn[NSFLAG] & NS_NONAME
                    )) {	/* It is not the origin directory itself */
 17446                        	.line	4667
 17447 08:43D3: E2 20        	sep	#$20
 17448                        	longa	off
 17449 08:43D5: A0 2B 00     	ldy	#$2b
 17450 08:43D8: B7 0E        	lda	[<L651+dp_0],Y
 17451 08:43DA: 29 80        	and	#<$80
 17452 08:43DC: C2 20        	rep	#$20
 17453                        	longa	on
 17454 08:43DE: F0 03        	beq	L658
 17455 08:43E0: 82 3E 00     	brl	L10338
 17456                        L658:
 17457                        	.line	4667
 17458                        ;				if (dp->obj.attr & AM_DI
                    R) {		/* This object is a sub-directory */
 17459                        	.line	4668
 17460 08:43E3: E2 20        	sep	#$20
 17461                        	longa	off
 17462 08:43E5: A0 06 00     	ldy	#$6
 17463 08:43E8: B7 0E        	lda	[<L651+dp_0],Y
 17464 08:43EA: 29 10        	and	#<$10
 17465 08:43EC: C2 20        	rep	#$20
 17466                        	longa	on
 17467 08:43EE: D0 03        	bne	L659
 17468 08:43F0: 82 29 00     	brl	L10339
 17469                        L659:
 17470                        	.line	4668
 17471                        ;#if FF_FS_EXFAT
 17472                        ;					if (fs->fs_type 
                    == FS_EXFAT) {
 17473                        ;						dp->obj.
                    c_scl = dp->obj.sclust;					
                    		/* Get containing directory inforamation */
  Thu Dec  3 2020 22:25                                                Page 344


 17474                        ;						dp->obj.
                    c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.sta
                    t;
 17475                        ;						dp->obj.
                    c_ofs = dp->blk_ofs;
 17476                        ;						init_all
                    oc_info(fs, &dp->obj);	/* Get object allocation info */
 17477                        ;					} else
 17478                        ;#endif
 17479                        ;					{
 17480                        	.line	4677
 17481                        ;						dp->obj.
                    sclust = ld_clust(fs, dp->dir);	/* Get object allocation
                     info */
 17482                        	.line	4678
 17483 08:43F3: A0 1E 00     	ldy	#$1e
 17484 08:43F6: B7 0E        	lda	[<L651+dp_0],Y
 17485 08:43F8: 48           	pha
 17486 08:43F9: A0 1C 00     	ldy	#$1c
 17487 08:43FC: B7 0E        	lda	[<L651+dp_0],Y
 17488 08:43FE: 48           	pha
 17489 08:43FF: D4 09        	pei	<L652+fs_1+2
 17490 08:4401: D4 07        	pei	<L652+fs_1
 17491 08:4403: 22 73 17 08  	jsl	~~ld_clust
 17492 08:4407: 85 01        	sta	<R0
 17493 08:4409: 86 03        	stx	<R0+2
 17494 08:440B: A5 01        	lda	<R0
 17495 08:440D: A0 08 00     	ldy	#$8
 17496 08:4410: 97 0E        	sta	[<L651+dp_0],Y
 17497 08:4412: A5 03        	lda	<R0+2
 17498 08:4414: A0 0A 00     	ldy	#$a
 17499 08:4417: 97 0E        	sta	[<L651+dp_0],Y
 17500                        ;					}
 17501                        	.line	4679
 17502                        ;				} else {		
                    				/* This object is a file */
 17503                        	.line	4680
 17504 08:4419: 82 05 00     	brl	L10340
 17505                        L10339:
 17506                        	.line	4680
 17507                        ;					res = FR_NO_PATH
                    ;
 17508                        	.line	4681
 17509 08:441C: A9 05 00     	lda	#$5
 17510 08:441F: 85 05        	sta	<L652+res_1
 17511                        ;				}
 17512                        	.line	4682
 17513                        L10340:
 17514                        ;			}
 17515                        	.line	4683
 17516                        ;			if (res == FR_OK) {
 17517                        L10338:
 17518                        	.line	4684
 17519 08:4421: A5 05        	lda	<L652+res_1
 17520 08:4423: F0 03        	beq	L660
 17521 08:4425: 82 1A 00     	brl	L10341
 17522                        L660:
 17523                        	.line	4684
  Thu Dec  3 2020 22:25                                                Page 345


 17524                        ;				dp->obj.id = fs->id;
 17525                        	.line	4685
 17526 08:4428: A0 05 00     	ldy	#$5
 17527 08:442B: B7 07        	lda	[<L652+fs_1],Y
 17528 08:442D: A0 04 00     	ldy	#$4
 17529 08:4430: 97 0E        	sta	[<L651+dp_0],Y
 17530                        ;				res = dir_sdi(dp, 0);	
                    		/* Rewind directory */
 17531                        	.line	4686
 17532 08:4432: F4 00 00     	pea	#^$0
 17533 08:4435: F4 00 00     	pea	#<$0
 17534 08:4438: D4 10        	pei	<L651+dp_0+2
 17535 08:443A: D4 0E        	pei	<L651+dp_0
 17536 08:443C: 22 BD 11 08  	jsl	~~dir_sdi
 17537 08:4440: 85 05        	sta	<L652+res_1
 17538                        ;#if FF_FS_LOCK != 0
 17539                        ;				if (res == FR_OK) {
 17540                        ;					if (dp->obj.sclu
                    st != 0) {
 17541                        ;						dp->obj.
                    lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 17542                        ;						if (!dp-
                    >obj.lockid) res = FR_TOO_MANY_OPEN_FILES;
 17543                        ;					} else {
 17544                        ;						dp->obj.
                    lockid = 0;	/* Root directory need not to be locked */
 17545                        ;					}
 17546                        ;				}
 17547                        ;#endif
 17548                        ;			}
 17549                        	.line	4697
 17550                        ;		}
 17551                        L10341:
 17552                        	.line	4698
 17553                        ;		FREE_NAMBUF();
 17554                        L10337:
 17555                        	.line	4699
 17556                        ;		if (res == FR_NO_FILE) res = FR_NO_PATH;
 17557                        	.line	4700
 17558 08:4442: A5 05        	lda	<L652+res_1
 17559 08:4444: C9 04 00     	cmp	#<$4
 17560 08:4447: F0 03        	beq	L661
 17561 08:4449: 82 05 00     	brl	L10342
 17562                        L661:
 17563                        	.line	4700
 17564 08:444C: A9 05 00     	lda	#$5
 17565 08:444F: 85 05        	sta	<L652+res_1
 17566                        ;	}
 17567                        L10342:
 17568                        	.line	4701
 17569                        ;	if (res != FR_OK) dp->obj.fs = 0;		
                    /* Invalidate the directory object if function faild */
 17570                        L10336:
 17571                        	.line	4702
 17572 08:4451: A5 05        	lda	<L652+res_1
 17573 08:4453: D0 03        	bne	L662
 17574 08:4455: 82 0D 00     	brl	L10343
 17575                        L662:
  Thu Dec  3 2020 22:25                                                Page 346


 17576                        	.line	4702
 17577 08:4458: A9 00 00     	lda	#$0
 17578 08:445B: 87 0E        	sta	[<L651+dp_0]
 17579 08:445D: A9 00 00     	lda	#$0
 17580 08:4460: A0 02 00     	ldy	#$2
 17581 08:4463: 97 0E        	sta	[<L651+dp_0],Y
 17582                        ;
 17583                        ;	LEAVE_FF(fs, res);
 17584                        L10343:
 17585                        	.line	4704
 17586 08:4465: A5 05        	lda	<L652+res_1
 17587 08:4467: 82 15 FF     	brl	L655
 17588                        ;}
 17589                        	.line	4705
 17590                        	.endblock	4705
 17591             0000000A   L651	equ	10
 17592             00000005   L652	equ	5
 17593 08:446A:              	ends
 17594                        	efunc
 17595                        	.endfunc	4705,5,10
 17596                        	.line	4705
 17597                        ;
 17598                        ;
 17599                        ;
 17600                        ;
 17601                        ;/*-----------------------------------------------
                    ------------------------*/
 17602                        ;/* Close Directory                               
                                            */
 17603                        ;/*-----------------------------------------------
                    ------------------------*/
 17604                        ;
 17605                        ;FRESULT f_closedir (
 17606                        ;	DIR *dp		/* Pointer to the directory obje
                    ct to be closed */
 17607                        ;)
 17608                        ;{
 17609                        	.line	4714
 17610                        	.line	4717
 17611                        	FFDOS
 17612                        	xdef	~~f_closedir
 17613                        	func
 17614                        	.function	4717
 17615                        ~~f_closedir:
 17616                        	longa	on
 17617                        	longi	on
 17618 08:446A: 3B           	tsc
 17619 08:446B: 38           	sec
 17620 08:446C: E9 06 00     	sbc	#L663
 17621 08:446F: 1B           	tcs
 17622 08:4470: 0B           	phd
 17623 08:4471: 5B           	tcd
 17624             00000004   dp_0	set	4
 17625                        	.block	4717
 17626                        ;	FRESULT res;
 17627                        ;	FATFS *fs;
 17628                        ;
 17629                        ;
  Thu Dec  3 2020 22:25                                                Page 347


 17630                        ;	res = validate(&dp->obj, &fs);	/* Check validit
                    y of the file object */
 17631             00000000   res_1	set	0
 17632             00000002   fs_1	set	2
 17633                        	.sym	res,0,5,1,16
 17634                        	.sym	fs,2,138,1,32,80
 17635                        	.sym	dp,4,138,6,32,83
 17636                        	.line	4722
 17637 08:4472: F4 00 00     	pea	#0
 17638 08:4475: 18           	clc
 17639 08:4476: 7B           	tdc
 17640 08:4477: 69 03 00     	adc	#<L664+fs_1
 17641 08:447A: 48           	pha
 17642 08:447B: D4 0C        	pei	<L663+dp_0+2
 17643 08:447D: D4 0A        	pei	<L663+dp_0
 17644 08:447F: 22 66 2D 08  	jsl	~~validate
 17645 08:4483: 85 01        	sta	<L664+res_1
 17646                        ;	if (res == FR_OK) {
 17647                        	.line	4723
 17648 08:4485: A5 01        	lda	<L664+res_1
 17649 08:4487: F0 03        	beq	L666
 17650 08:4489: 82 0D 00     	brl	L10344
 17651                        L666:
 17652                        	.line	4723
 17653                        ;#if FF_FS_LOCK != 0
 17654                        ;		if (dp->obj.lockid) res = dec_lock(dp->o
                    bj.lockid);	/* Decrement sub-directory open counter */
 17655                        ;		if (res == FR_OK) dp->obj.fs = 0;	
                    /* Invalidate directory object */
 17656                        ;#else
 17657                        ;		dp->obj.fs = 0;	/* Invalidate directory 
                    object */
 17658                        	.line	4728
 17659 08:448C: A9 00 00     	lda	#$0
 17660 08:448F: 87 0A        	sta	[<L663+dp_0]
 17661 08:4491: A9 00 00     	lda	#$0
 17662 08:4494: A0 02 00     	ldy	#$2
 17663 08:4497: 97 0A        	sta	[<L663+dp_0],Y
 17664                        ;#endif
 17665                        ;#if FF_FS_REENTRANT
 17666                        ;		unlock_fs(fs, FR_OK);		/* Unloc
                    k volume */
 17667                        ;#endif
 17668                        ;	}
 17669                        	.line	4733
 17670                        ;	return res;
 17671                        L10344:
 17672                        	.line	4734
 17673 08:4499: A5 01        	lda	<L664+res_1
 17674                        L667:
 17675 08:449B: A8           	tay
 17676 08:449C: A5 08        	lda	<L663+2
 17677 08:449E: 85 0C        	sta	<L663+2+4
 17678 08:44A0: A5 07        	lda	<L663+1
 17679 08:44A2: 85 0B        	sta	<L663+1+4
 17680 08:44A4: 2B           	pld
 17681 08:44A5: 3B           	tsc
 17682 08:44A6: 18           	clc
  Thu Dec  3 2020 22:25                                                Page 348


 17683 08:44A7: 69 0A 00     	adc	#L663+4
 17684 08:44AA: 1B           	tcs
 17685 08:44AB: 98           	tya
 17686 08:44AC: 6B           	rtl
 17687                        ;}
 17688                        	.line	4735
 17689                        	.endblock	4735
 17690             00000006   L663	equ	6
 17691             00000001   L664	equ	1
 17692 08:44AD:              	ends
 17693                        	efunc
 17694                        	.endfunc	4735,1,6
 17695                        	.line	4735
 17696                        ;
 17697                        ;
 17698                        ;
 17699                        ;
 17700                        ;/*-----------------------------------------------
                    ------------------------*/
 17701                        ;/* Read Directory Entries in Sequence            
                                            */
 17702                        ;/*-----------------------------------------------
                    ------------------------*/
 17703                        ;
 17704                        ;FRESULT f_readdir (
 17705                        ;	DIR* dp,			/* Pointer to th
                    e open directory object */
 17706                        ;	FILINFO* fno		/* Pointer to file infor
                    mation to return */
 17707                        ;)
 17708                        ;{
 17709                        	.line	4744
 17710                        	.line	4748
 17711                        	FFDOS
 17712                        	xdef	~~f_readdir
 17713                        	func
 17714                        	.function	4748
 17715                        ~~f_readdir:
 17716                        	longa	on
 17717                        	longi	on
 17718 08:44AD: 3B           	tsc
 17719 08:44AE: 38           	sec
 17720 08:44AF: E9 06 00     	sbc	#L668
 17721 08:44B2: 1B           	tcs
 17722 08:44B3: 0B           	phd
 17723 08:44B4: 5B           	tcd
 17724             00000004   dp_0	set	4
 17725             00000008   fno_0	set	8
 17726                        	.block	4748
 17727                        ;	FRESULT res;
 17728                        ;	FATFS *fs;
 17729                        ;	DEF_NAMBUF
 17730                        ;
 17731                        ;
 17732                        ;	res = validate(&dp->obj, &fs);	/* Check validit
                    y of the directory object */
 17733             00000000   res_1	set	0
 17734             00000002   fs_1	set	2
  Thu Dec  3 2020 22:25                                                Page 349


 17735                        	.sym	res,0,5,1,16
 17736                        	.sym	fs,2,138,1,32,80
 17737                        	.sym	dp,4,138,6,32,83
 17738                        	.sym	fno,8,138,6,32,84
 17739                        	.line	4754
 17740 08:44B5: F4 00 00     	pea	#0
 17741 08:44B8: 18           	clc
 17742 08:44B9: 7B           	tdc
 17743 08:44BA: 69 03 00     	adc	#<L669+fs_1
 17744 08:44BD: 48           	pha
 17745 08:44BE: D4 0C        	pei	<L668+dp_0+2
 17746 08:44C0: D4 0A        	pei	<L668+dp_0
 17747 08:44C2: 22 66 2D 08  	jsl	~~validate
 17748 08:44C6: 85 01        	sta	<L669+res_1
 17749                        ;	if (res == FR_OK) {
 17750                        	.line	4755
 17751 08:44C8: A5 01        	lda	<L669+res_1
 17752 08:44CA: F0 03        	beq	L671
 17753 08:44CC: 82 61 00     	brl	L10345
 17754                        L671:
 17755                        	.line	4755
 17756                        ;		if (!fno) {
 17757                        	.line	4756
 17758 08:44CF: A5 0E        	lda	<L668+fno_0
 17759 08:44D1: 05 10        	ora	<L668+fno_0+2
 17760 08:44D3: F0 03        	beq	L672
 17761 08:44D5: 82 13 00     	brl	L10346
 17762                        L672:
 17763                        	.line	4756
 17764                        ;			res = dir_sdi(dp, 0);		
                    	/* Rewind the directory object */
 17765                        	.line	4757
 17766 08:44D8: F4 00 00     	pea	#^$0
 17767 08:44DB: F4 00 00     	pea	#<$0
 17768 08:44DE: D4 0C        	pei	<L668+dp_0+2
 17769 08:44E0: D4 0A        	pei	<L668+dp_0
 17770 08:44E2: 22 BD 11 08  	jsl	~~dir_sdi
 17771 08:44E6: 85 01        	sta	<L669+res_1
 17772                        ;		} else {
 17773                        	.line	4758
 17774 08:44E8: 82 45 00     	brl	L10347
 17775                        L10346:
 17776                        	.line	4758
 17777                        ;			INIT_NAMBUF(fs);
 17778                        	.line	4759
 17779                        ;			res = DIR_READ_FILE(dp);	
                    	/* Read an item */
 17780                        	.line	4760
 17781 08:44EB: F4 00 00     	pea	#<$0
 17782 08:44EE: D4 0C        	pei	<L668+dp_0+2
 17783 08:44F0: D4 0A        	pei	<L668+dp_0
 17784 08:44F2: 22 69 18 08  	jsl	~~dir_read
 17785 08:44F6: 85 01        	sta	<L669+res_1
 17786                        ;			if (res == FR_NO_FILE) res = FR_
                    OK;	/* Ignore end of directory */
 17787                        	.line	4761
 17788 08:44F8: A5 01        	lda	<L669+res_1
 17789 08:44FA: C9 04 00     	cmp	#<$4
  Thu Dec  3 2020 22:25                                                Page 350


 17790 08:44FD: F0 03        	beq	L673
 17791 08:44FF: 82 02 00     	brl	L10348
 17792                        L673:
 17793                        	.line	4761
 17794 08:4502: 64 01        	stz	<L669+res_1
 17795                        ;			if (res == FR_OK) {		
                    		/* A valid entry is found */
 17796                        L10348:
 17797                        	.line	4762
 17798 08:4504: A5 01        	lda	<L669+res_1
 17799 08:4506: F0 03        	beq	L674
 17800 08:4508: 82 25 00     	brl	L10349
 17801                        L674:
 17802                        	.line	4762
 17803                        ;				get_fileinfo(dp, fno);	
                    	/* Get the object information */
 17804                        	.line	4763
 17805 08:450B: D4 10        	pei	<L668+fno_0+2
 17806 08:450D: D4 0E        	pei	<L668+fno_0
 17807 08:450F: D4 0C        	pei	<L668+dp_0+2
 17808 08:4511: D4 0A        	pei	<L668+dp_0
 17809 08:4513: 22 94 1B 08  	jsl	~~get_fileinfo
 17810                        ;				res = dir_next(dp, 0);	
                    	/* Increment index for next */
 17811                        	.line	4764
 17812 08:4517: F4 00 00     	pea	#<$0
 17813 08:451A: D4 0C        	pei	<L668+dp_0+2
 17814 08:451C: D4 0A        	pei	<L668+dp_0
 17815 08:451E: 22 FC 13 08  	jsl	~~dir_next
 17816 08:4522: 85 01        	sta	<L669+res_1
 17817                        ;				if (res == FR_NO_FILE) r
                    es = FR_OK;	/* Ignore end of directory now */
 17818                        	.line	4765
 17819 08:4524: A5 01        	lda	<L669+res_1
 17820 08:4526: C9 04 00     	cmp	#<$4
 17821 08:4529: F0 03        	beq	L675
 17822 08:452B: 82 02 00     	brl	L10350
 17823                        L675:
 17824                        	.line	4765
 17825 08:452E: 64 01        	stz	<L669+res_1
 17826                        ;			}
 17827                        L10350:
 17828                        	.line	4766
 17829                        ;			FREE_NAMBUF();
 17830                        L10349:
 17831                        	.line	4767
 17832                        ;		}
 17833                        	.line	4768
 17834                        L10347:
 17835                        ;	}
 17836                        	.line	4769
 17837                        ;	LEAVE_FF(fs, res);
 17838                        L10345:
 17839                        	.line	4770
 17840 08:4530: A5 01        	lda	<L669+res_1
 17841                        L676:
 17842 08:4532: A8           	tay
 17843 08:4533: A5 08        	lda	<L668+2
  Thu Dec  3 2020 22:25                                                Page 351


 17844 08:4535: 85 10        	sta	<L668+2+8
 17845 08:4537: A5 07        	lda	<L668+1
 17846 08:4539: 85 0F        	sta	<L668+1+8
 17847 08:453B: 2B           	pld
 17848 08:453C: 3B           	tsc
 17849 08:453D: 18           	clc
 17850 08:453E: 69 0E 00     	adc	#L668+8
 17851 08:4541: 1B           	tcs
 17852 08:4542: 98           	tya
 17853 08:4543: 6B           	rtl
 17854                        ;}
 17855                        	.line	4771
 17856                        	.endblock	4771
 17857             00000006   L668	equ	6
 17858             00000001   L669	equ	1
 17859 08:4544:              	ends
 17860                        	efunc
 17861                        	.endfunc	4771,1,6
 17862                        	.line	4771
 17863                        ;
 17864                        ;
 17865                        ;
 17866                        ;#if FF_USE_FIND
 17867                        ;/*-----------------------------------------------
                    ------------------------*/
 17868                        ;/* Find Next File                                
                                            */
 17869                        ;/*-----------------------------------------------
                    ------------------------*/
 17870                        ;
 17871                        ;FRESULT f_findnext (
 17872                        ;	DIR* dp,		/* Pointer to the open d
                    irectory object */
 17873                        ;	FILINFO* fno	/* Pointer to the file informati
                    on structure */
 17874                        ;)
 17875                        ;{
 17876                        ;	FRESULT res;
 17877                        ;
 17878                        ;
 17879                        ;	for (;;) {
 17880                        ;		res = f_readdir(dp, fno);		
                    /* Get a directory item */
 17881                        ;		if (res != FR_OK || !fno || !fno->fname[
                    0]) break;	/* Terminate if any error or end of directory */
 17882                        ;		if (pattern_matching(dp->pat, fno->fname
                    , 0, 0)) break;		/* Test for the file name */
 17883                        ;#if FF_USE_LFN && FF_USE_FIND == 2
 17884                        ;		if (pattern_matching(dp->pat, fno->altna
                    me, 0, 0)) break;	/* Test for alternative name if exist */
 17885                        ;#endif
 17886                        ;	}
 17887                        ;	return res;
 17888                        ;}
 17889                        ;
 17890                        ;
 17891                        ;
 17892                        ;/*-----------------------------------------------
  Thu Dec  3 2020 22:25                                                Page 352


                    ------------------------*/
 17893                        ;/* Find First File                               
                                            */
 17894                        ;/*-----------------------------------------------
                    ------------------------*/
 17895                        ;
 17896                        ;FRESULT f_findfirst (
 17897                        ;	DIR* dp,				/* Point
                    er to the blank directory object */
 17898                        ;	FILINFO* fno,			/* Pointer to th
                    e file information structure */
 17899                        ;	const TCHAR* path,		/* Pointer to th
                    e directory to open */
 17900                        ;	const TCHAR* pattern	/* Pointer to the matchi
                    ng pattern */
 17901                        ;)
 17902                        ;{
 17903                        ;	FRESULT res;
 17904                        ;
 17905                        ;
 17906                        ;	dp->pat = pattern;		/* Save pointer 
                    to pattern string */
 17907                        ;	res = f_opendir(dp, path);		/* Open 
                    the target directory */
 17908                        ;	if (res == FR_OK) {
 17909                        ;		res = f_findnext(dp, fno);	/* Find 
                    the first item */
 17910                        ;	}
 17911                        ;	return res;
 17912                        ;}
 17913                        ;
 17914                        ;#endif	/* FF_USE_FIND */
 17915                        ;
 17916                        ;
 17917                        ;
 17918                        ;#if FF_FS_MINIMIZE == 0
 17919                        ;/*-----------------------------------------------
                    ------------------------*/
 17920                        ;/* Get File Status                               
                                            */
 17921                        ;/*-----------------------------------------------
                    ------------------------*/
 17922                        ;
 17923                        ;FRESULT f_stat (
 17924                        ;	const TCHAR* path,	/* Pointer to the file p
                    ath */
 17925                        ;	FILINFO* fno		/* Pointer to file infor
                    mation to return */
 17926                        ;)
 17927                        ;{
 17928                        	.line	4832
 17929                        	.line	4836
 17930                        	FFDOS
 17931                        	xdef	~~f_stat
 17932                        	func
 17933                        	.function	4836
 17934                        ~~f_stat:
 17935                        	longa	on
  Thu Dec  3 2020 22:25                                                Page 353


 17936                        	longi	on
 17937 08:4544: 3B           	tsc
 17938 08:4545: 38           	sec
 17939 08:4546: E9 2E 00     	sbc	#L677
 17940 08:4549: 1B           	tcs
 17941 08:454A: 0B           	phd
 17942 08:454B: 5B           	tcd
 17943             00000004   path_0	set	4
 17944             00000008   fno_0	set	8
 17945                        	.block	4836
 17946                        ;	FRESULT res;
 17947                        ;	DIR dj;
 17948                        ;	DEF_NAMBUF
 17949                        ;
 17950                        ;
 17951                        ;	/* Get logical drive */
 17952                        ;	res = mount_volume(&path, &dj.obj.fs, 0);
 17953             00000000   res_1	set	0
 17954             00000002   dj_1	set	2
 17955                        	.sym	res,0,5,1,16
 17956                        	.sym	dj,2,10,1,352,83
 17957                        	.sym	path,4,142,6,32
 17958                        	.sym	fno,8,138,6,32,84
 17959                        	.line	4843
 17960 08:454C: F4 00 00     	pea	#<$0
 17961 08:454F: F4 00 00     	pea	#0
 17962 08:4552: 18           	clc
 17963 08:4553: 7B           	tdc
 17964 08:4554: 69 03 00     	adc	#<L678+dj_1
 17965 08:4557: 48           	pha
 17966 08:4558: F4 00 00     	pea	#0
 17967 08:455B: 18           	clc
 17968 08:455C: 7B           	tdc
 17969 08:455D: 69 32 00     	adc	#<L677+path_0
 17970 08:4560: 48           	pha
 17971 08:4561: 22 E7 25 08  	jsl	~~mount_volume
 17972 08:4565: 85 01        	sta	<L678+res_1
 17973                        ;	if (res == FR_OK) {
 17974                        	.line	4844
 17975 08:4567: A5 01        	lda	<L678+res_1
 17976 08:4569: F0 03        	beq	L680
 17977 08:456B: 82 49 00     	brl	L10351
 17978                        L680:
 17979                        	.line	4844
 17980                        ;		INIT_NAMBUF(dj.obj.fs);
 17981                        	.line	4845
 17982                        ;		res = follow_path(&dj, path);	/* Follo
                    w the file path */
 17983                        	.line	4846
 17984 08:456E: D4 34        	pei	<L677+path_0+2
 17985 08:4570: D4 32        	pei	<L677+path_0
 17986 08:4572: F4 00 00     	pea	#0
 17987 08:4575: 18           	clc
 17988 08:4576: 7B           	tdc
 17989 08:4577: 69 03 00     	adc	#<L678+dj_1
 17990 08:457A: 48           	pha
 17991 08:457B: 22 FC 1E 08  	jsl	~~follow_path
 17992 08:457F: 85 01        	sta	<L678+res_1
  Thu Dec  3 2020 22:25                                                Page 354


 17993                        ;		if (res == FR_OK) {			
                    	/* Follow completed */
 17994                        	.line	4847
 17995 08:4581: A5 01        	lda	<L678+res_1
 17996 08:4583: F0 03        	beq	L681
 17997 08:4585: 82 2F 00     	brl	L10352
 17998                        L681:
 17999                        	.line	4847
 18000                        ;			if (dj.fn[NSFLAG] & NS_NONAME) {
                    	/* It is origin directory */
 18001                        	.line	4848
 18002 08:4588: E2 20        	sep	#$20
 18003                        	longa	off
 18004 08:458A: A5 2E        	lda	<L678+dj_1+43
 18005 08:458C: 29 80        	and	#<$80
 18006 08:458E: C2 20        	rep	#$20
 18007                        	longa	on
 18008 08:4590: D0 03        	bne	L682
 18009 08:4592: 82 08 00     	brl	L10353
 18010                        L682:
 18011                        	.line	4848
 18012                        ;				res = FR_INVALID_NAME;
 18013                        	.line	4849
 18014 08:4595: A9 06 00     	lda	#$6
 18015 08:4598: 85 01        	sta	<L678+res_1
 18016                        ;			} else {			
                    				/* Found an object */
 18017                        	.line	4850
 18018 08:459A: 82 1A 00     	brl	L10354
 18019                        L10353:
 18020                        	.line	4850
 18021                        ;				if (fno) get_fileinfo(&d
                    j, fno);
 18022                        	.line	4851
 18023 08:459D: A5 36        	lda	<L677+fno_0
 18024 08:459F: 05 38        	ora	<L677+fno_0+2
 18025 08:45A1: D0 03        	bne	L683
 18026 08:45A3: 82 11 00     	brl	L10355
 18027                        L683:
 18028                        	.line	4851
 18029 08:45A6: D4 38        	pei	<L677+fno_0+2
 18030 08:45A8: D4 36        	pei	<L677+fno_0
 18031 08:45AA: F4 00 00     	pea	#0
 18032 08:45AD: 18           	clc
 18033 08:45AE: 7B           	tdc
 18034 08:45AF: 69 03 00     	adc	#<L678+dj_1
 18035 08:45B2: 48           	pha
 18036 08:45B3: 22 94 1B 08  	jsl	~~get_fileinfo
 18037                        ;			}
 18038                        L10355:
 18039                        	.line	4852
 18040                        L10354:
 18041                        ;		}
 18042                        	.line	4853
 18043                        ;		FREE_NAMBUF();
 18044                        L10352:
 18045                        	.line	4854
 18046                        ;	}
  Thu Dec  3 2020 22:25                                                Page 355


 18047                        	.line	4855
 18048                        ;
 18049                        ;	LEAVE_FF(dj.obj.fs, res);
 18050                        L10351:
 18051                        	.line	4857
 18052 08:45B7: A5 01        	lda	<L678+res_1
 18053                        L684:
 18054 08:45B9: A8           	tay
 18055 08:45BA: A5 30        	lda	<L677+2
 18056 08:45BC: 85 38        	sta	<L677+2+8
 18057 08:45BE: A5 2F        	lda	<L677+1
 18058 08:45C0: 85 37        	sta	<L677+1+8
 18059 08:45C2: 2B           	pld
 18060 08:45C3: 3B           	tsc
 18061 08:45C4: 18           	clc
 18062 08:45C5: 69 36 00     	adc	#L677+8
 18063 08:45C8: 1B           	tcs
 18064 08:45C9: 98           	tya
 18065 08:45CA: 6B           	rtl
 18066                        ;}
 18067                        	.line	4858
 18068                        	.endblock	4858
 18069             0000002E   L677	equ	46
 18070             00000001   L678	equ	1
 18071 08:45CB:              	ends
 18072                        	efunc
 18073                        	.endfunc	4858,1,46
 18074                        	.line	4858
 18075                        ;
 18076                        ;
 18077                        ;
 18078                        ;#if !FF_FS_READONLY
 18079                        ;/*-----------------------------------------------
                    ------------------------*/
 18080                        ;/* Get Number of Free Clusters                   
                                            */
 18081                        ;/*-----------------------------------------------
                    ------------------------*/
 18082                        ;
 18083                        ;FRESULT f_getfree (
 18084                        ;	const TCHAR* path,	/* Logical drive number 
                    */
 18085                        ;	DWORD* nclst,		/* Pointer to a variable
                     to return number of free clusters */
 18086                        ;	FATFS** fatfs		/* Pointer to return poi
                    nter to corresponding filesystem object */
 18087                        ;)
 18088                        ;{
 18089                        	.line	4867
 18090                        	.line	4872
 18091                        	FFDOS
 18092                        	xdef	~~f_getfree
 18093                        	func
 18094                        	.function	4872
 18095                        ~~f_getfree:
 18096                        	longa	on
 18097                        	longi	on
 18098 08:45CB: 3B           	tsc
  Thu Dec  3 2020 22:25                                                Page 356


 18099 08:45CC: 38           	sec
 18100 08:45CD: E9 38 00     	sbc	#L685
 18101 08:45D0: 1B           	tcs
 18102 08:45D1: 0B           	phd
 18103 08:45D2: 5B           	tcd
 18104             00000004   path_0	set	4
 18105             00000008   nclst_0	set	8
 18106             0000000C   fatfs_0	set	12
 18107                        	.block	4872
 18108                        ;	FRESULT res;
 18109                        ;	FATFS *fs;
 18110                        ;	DWORD nfree, clst, stat;
 18111                        ;	LBA_t sect;
 18112                        ;	UINT i;
 18113                        ;	FFOBJID obj;
 18114                        ;
 18115                        ;
 18116                        ;	/* Get logical drive */
 18117                        ;	res = mount_volume(&path, &fs, 0);
 18118             00000000   res_1	set	0
 18119             00000002   fs_1	set	2
 18120             00000006   nfree_1	set	6
 18121             0000000A   clst_1	set	10
 18122             0000000E   stat_1	set	14
 18123             00000012   sect_1	set	18
 18124             00000016   i_1	set	22
 18125             00000018   obj_1	set	24
 18126                        	.sym	res,0,5,1,16
 18127                        	.sym	fs,2,138,1,32,80
 18128                        	.sym	nfree,6,18,1,32
 18129                        	.sym	clst,10,18,1,32
 18130                        	.sym	stat,14,18,1,32
 18131                        	.sym	sect,18,18,1,32
 18132                        	.sym	i,22,16,1,16
 18133                        	.sym	obj,24,10,1,128,81
 18134                        	.sym	path,4,142,6,32
 18135                        	.sym	nclst,8,146,6,32
 18136                        	.sym	fatfs,12,1162,6,32,80
 18137                        	.line	4882
 18138 08:45D3: F4 00 00     	pea	#<$0
 18139 08:45D6: F4 00 00     	pea	#0
 18140 08:45D9: 18           	clc
 18141 08:45DA: 7B           	tdc
 18142 08:45DB: 69 13 00     	adc	#<L686+fs_1
 18143 08:45DE: 48           	pha
 18144 08:45DF: F4 00 00     	pea	#0
 18145 08:45E2: 18           	clc
 18146 08:45E3: 7B           	tdc
 18147 08:45E4: 69 3C 00     	adc	#<L685+path_0
 18148 08:45E7: 48           	pha
 18149 08:45E8: 22 E7 25 08  	jsl	~~mount_volume
 18150 08:45EC: 85 11        	sta	<L686+res_1
 18151                        ;	if (res == FR_OK) {
 18152                        	.line	4883
 18153 08:45EE: A5 11        	lda	<L686+res_1
 18154 08:45F0: F0 03        	beq	L688
 18155 08:45F2: 82 06 02     	brl	L10356
 18156                        L688:
  Thu Dec  3 2020 22:25                                                Page 357


 18157                        	.line	4883
 18158                        ;		*fatfs = fs;				
                    /* Return ptr to the fs object */
 18159                        	.line	4884
 18160 08:45F5: A5 13        	lda	<L686+fs_1
 18161 08:45F7: 87 44        	sta	[<L685+fatfs_0]
 18162 08:45F9: A5 15        	lda	<L686+fs_1+2
 18163 08:45FB: A0 02 00     	ldy	#$2
 18164 08:45FE: 97 44        	sta	[<L685+fatfs_0],Y
 18165                        ;		/* If free_clst is valid, return it with
                    out full FAT scan */
 18166                        ;		if (fs->free_clst <= fs->n_fatent - 2) {
 18167                        	.line	4886
 18168 08:4600: 18           	clc
 18169 08:4601: A9 FE FF     	lda	#$fffe
 18170 08:4604: A0 13 00     	ldy	#$13
 18171 08:4607: 77 13        	adc	[<L686+fs_1],Y
 18172 08:4609: 85 01        	sta	<R0
 18173 08:460B: A9 FF FF     	lda	#$ffff
 18174 08:460E: A0 15 00     	ldy	#$15
 18175 08:4611: 77 13        	adc	[<L686+fs_1],Y
 18176 08:4613: 85 03        	sta	<R0+2
 18177 08:4615: A5 01        	lda	<R0
 18178 08:4617: A0 0F 00     	ldy	#$f
 18179 08:461A: D7 13        	cmp	[<L686+fs_1],Y
 18180 08:461C: A5 03        	lda	<R0+2
 18181 08:461E: A0 11 00     	ldy	#$11
 18182 08:4621: F7 13        	sbc	[<L686+fs_1],Y
 18183 08:4623: B0 03        	bcs	L689
 18184 08:4625: 82 14 00     	brl	L10357
 18185                        L689:
 18186                        	.line	4886
 18187                        ;			*nclst = fs->free_clst;
 18188                        	.line	4887
 18189 08:4628: A0 0F 00     	ldy	#$f
 18190 08:462B: B7 13        	lda	[<L686+fs_1],Y
 18191 08:462D: 87 40        	sta	[<L685+nclst_0]
 18192 08:462F: A0 11 00     	ldy	#$11
 18193 08:4632: B7 13        	lda	[<L686+fs_1],Y
 18194 08:4634: A0 02 00     	ldy	#$2
 18195 08:4637: 97 40        	sta	[<L685+nclst_0],Y
 18196                        ;		} else {
 18197                        	.line	4888
 18198 08:4639: 82 BF 01     	brl	L10358
 18199                        L10357:
 18200                        	.line	4888
 18201                        ;			/* Scan FAT to obtain number of 
                    free clusters */
 18202                        ;			nfree = 0;
 18203                        	.line	4890
 18204 08:463C: 64 17        	stz	<L686+nfree_1
 18205 08:463E: 64 19        	stz	<L686+nfree_1+2
 18206                        ;			if (fs->fs_type == FS_FAT12) {	
                    /* FAT12: Scan bit field FAT entries */
 18207                        	.line	4891
 18208 08:4640: E2 20        	sep	#$20
 18209                        	longa	off
 18210 08:4642: A7 13        	lda	[<L686+fs_1]
  Thu Dec  3 2020 22:25                                                Page 358


 18211 08:4644: C9 01        	cmp	#<$1
 18212 08:4646: C2 20        	rep	#$20
 18213                        	longa	on
 18214 08:4648: F0 03        	beq	L690
 18215 08:464A: 82 84 00     	brl	L10359
 18216                        L690:
 18217                        	.line	4891
 18218                        ;				clst = 2; obj.fs = fs;
 18219                        	.line	4892
 18220 08:464D: A9 02 00     	lda	#$2
 18221 08:4650: 85 1B        	sta	<L686+clst_1
 18222 08:4652: A9 00 00     	lda	#$0
 18223 08:4655: 85 1D        	sta	<L686+clst_1+2
 18224                        	.line	4892
 18225 08:4657: A5 13        	lda	<L686+fs_1
 18226 08:4659: 85 29        	sta	<L686+obj_1
 18227 08:465B: A5 15        	lda	<L686+fs_1+2
 18228 08:465D: 85 2B        	sta	<L686+obj_1+2
 18229                        ;				do {
 18230                        	.line	4893
 18231                        L10362:
 18232                        	.line	4893
 18233                        ;					stat = get_fat(&
                    obj, clst);
 18234                        	.line	4894
 18235 08:465F: D4 1D        	pei	<L686+clst_1+2
 18236 08:4661: D4 1B        	pei	<L686+clst_1
 18237 08:4663: F4 00 00     	pea	#0
 18238 08:4666: 18           	clc
 18239 08:4667: 7B           	tdc
 18240 08:4668: 69 29 00     	adc	#<L686+obj_1
 18241 08:466B: 48           	pha
 18242 08:466C: 22 8D 06 08  	jsl	~~get_fat
 18243 08:4670: 85 1F        	sta	<L686+stat_1
 18244 08:4672: 86 21        	stx	<L686+stat_1+2
 18245                        ;					if (stat == 0xFF
                    FFFFFF) { res = FR_DISK_ERR; break; }
 18246                        	.line	4895
 18247 08:4674: A5 1F        	lda	<L686+stat_1
 18248 08:4676: C9 FF FF     	cmp	#<$ffffffff
 18249 08:4679: D0 05        	bne	L691
 18250 08:467B: A5 21        	lda	<L686+stat_1+2
 18251 08:467D: C9 FF FF     	cmp	#^$ffffffff
 18252                        L691:
 18253 08:4680: F0 03        	beq	L692
 18254 08:4682: 82 08 00     	brl	L10363
 18255                        L692:
 18256                        	.line	4895
 18257                        	.line	4895
 18258 08:4685: A9 01 00     	lda	#$1
 18259 08:4688: 85 11        	sta	<L686+res_1
 18260                        	.line	4895
 18261 08:468A: 82 41 00     	brl	L10361
 18262                        	.line	4895
 18263                        ;					if (stat == 1) {
                     res = FR_INT_ERR; break; }
 18264                        L10363:
 18265                        	.line	4896
  Thu Dec  3 2020 22:25                                                Page 359


 18266 08:468D: A5 1F        	lda	<L686+stat_1
 18267 08:468F: C9 01 00     	cmp	#<$1
 18268 08:4692: D0 05        	bne	L693
 18269 08:4694: A5 21        	lda	<L686+stat_1+2
 18270 08:4696: C9 00 00     	cmp	#^$1
 18271                        L693:
 18272 08:4699: F0 03        	beq	L694
 18273 08:469B: 82 08 00     	brl	L10364
 18274                        L694:
 18275                        	.line	4896
 18276                        	.line	4896
 18277 08:469E: A9 02 00     	lda	#$2
 18278 08:46A1: 85 11        	sta	<L686+res_1
 18279                        	.line	4896
 18280 08:46A3: 82 28 00     	brl	L10361
 18281                        	.line	4896
 18282                        ;					if (stat == 0) n
                    free++;
 18283                        L10364:
 18284                        	.line	4897
 18285 08:46A6: A5 1F        	lda	<L686+stat_1
 18286 08:46A8: 05 21        	ora	<L686+stat_1+2
 18287 08:46AA: F0 03        	beq	L695
 18288 08:46AC: 82 06 00     	brl	L10365
 18289                        L695:
 18290                        	.line	4897
 18291 08:46AF: E6 17        	inc	<L686+nfree_1
 18292 08:46B1: D0 02        	bne	L696
 18293 08:46B3: E6 19        	inc	<L686+nfree_1+2
 18294                        L696:
 18295                        ;				} while (++clst < fs->n_
                    fatent);
 18296                        L10365:
 18297                        	.line	4898
 18298                        L10360:
 18299 08:46B5: E6 1B        	inc	<L686+clst_1
 18300 08:46B7: D0 02        	bne	L697
 18301 08:46B9: E6 1D        	inc	<L686+clst_1+2
 18302                        L697:
 18303 08:46BB: A5 1B        	lda	<L686+clst_1
 18304 08:46BD: A0 13 00     	ldy	#$13
 18305 08:46C0: D7 13        	cmp	[<L686+fs_1],Y
 18306 08:46C2: A5 1D        	lda	<L686+clst_1+2
 18307 08:46C4: A0 15 00     	ldy	#$15
 18308 08:46C7: F7 13        	sbc	[<L686+fs_1],Y
 18309 08:46C9: B0 03        	bcs	L698
 18310 08:46CB: 82 91 FF     	brl	L10362
 18311                        L698:
 18312                        L10361:
 18313                        ;			} else {
 18314                        	.line	4899
 18315 08:46CE: 82 F8 00     	brl	L10366
 18316                        L10359:
 18317                        	.line	4899
 18318                        ;#if FF_FS_EXFAT
 18319                        ;				if (fs->fs_type == FS_EX
                    FAT) {	/* exFAT: Scan allocation bitmap */
 18320                        ;					BYTE bm;
  Thu Dec  3 2020 22:25                                                Page 360


 18321                        ;					UINT b;
 18322                        ;
 18323                        ;					clst = fs->n_fat
                    ent - 2;	/* Number of clusters */
 18324                        ;					sect = fs->bitba
                    se;			/* Bitmap sector */
 18325                        ;					i = 0;		
                    				/* Offset in the sector */
 18326                        ;					do {	/* Count
                    s numbuer of bits with zero in the bitmap */
 18327                        ;						if (i ==
                     0) {
 18328                        ;							
                    res = move_window(fs, sect++);
 18329                        ;							
                    if (res != FR_OK) break;
 18330                        ;						}
 18331                        ;						for (b =
                     8, bm = fs->win[i]; b && clst; b--, clst--) {
 18332                        ;							
                    if (!(bm & 1)) nfree++;
 18333                        ;							
                    bm >>= 1;
 18334                        ;						}
 18335                        ;						i = (i +
                     1) % SS(fs);
 18336                        ;					} while (clst);
 18337                        ;				} else
 18338                        ;#endif
 18339                        ;				{	/* FAT16/32: Sca
                    n WORD/DWORD FAT entries */
 18340                        	.line	4921
 18341                        ;					clst = fs->n_fat
                    ent;	/* Number of entries */
 18342                        	.line	4922
 18343 08:46D1: A0 13 00     	ldy	#$13
 18344 08:46D4: B7 13        	lda	[<L686+fs_1],Y
 18345 08:46D6: 85 1B        	sta	<L686+clst_1
 18346 08:46D8: A0 15 00     	ldy	#$15
 18347 08:46DB: B7 13        	lda	[<L686+fs_1],Y
 18348 08:46DD: 85 1D        	sta	<L686+clst_1+2
 18349                        ;					sect = fs->fatba
                    se;		/* Top of the FAT */
 18350                        	.line	4923
 18351 08:46DF: A0 1F 00     	ldy	#$1f
 18352 08:46E2: B7 13        	lda	[<L686+fs_1],Y
 18353 08:46E4: 85 23        	sta	<L686+sect_1
 18354 08:46E6: A0 21 00     	ldy	#$21
 18355 08:46E9: B7 13        	lda	[<L686+fs_1],Y
 18356 08:46EB: 85 25        	sta	<L686+sect_1+2
 18357                        ;					i = 0;		
                    			/* Offset in the sector */
 18358                        	.line	4924
 18359 08:46ED: 64 27        	stz	<L686+i_1
 18360                        ;					do {	/* Count
                    s numbuer of entries with zero in the FAT */
 18361                        	.line	4925
 18362                        L10369:
  Thu Dec  3 2020 22:25                                                Page 361


 18363                        	.line	4925
 18364                        ;						if (i ==
                     0) {
 18365                        	.line	4926
 18366 08:46EF: A5 27        	lda	<L686+i_1
 18367 08:46F1: F0 03        	beq	L699
 18368 08:46F3: 82 23 00     	brl	L10370
 18369                        L699:
 18370                        	.line	4926
 18371                        ;							
                    res = move_window(fs, sect++);
 18372                        	.line	4927
 18373 08:46F6: A5 23        	lda	<L686+sect_1
 18374 08:46F8: 85 01        	sta	<R0
 18375 08:46FA: A5 25        	lda	<L686+sect_1+2
 18376 08:46FC: 85 03        	sta	<R0+2
 18377 08:46FE: E6 23        	inc	<L686+sect_1
 18378 08:4700: D0 02        	bne	L700
 18379 08:4702: E6 25        	inc	<L686+sect_1+2
 18380                        L700:
 18381 08:4704: D4 03        	pei	<R0+2
 18382 08:4706: D4 01        	pei	<R0
 18383 08:4708: D4 15        	pei	<L686+fs_1+2
 18384 08:470A: D4 13        	pei	<L686+fs_1
 18385 08:470C: 22 FA 03 08  	jsl	~~move_window
 18386 08:4710: 85 11        	sta	<L686+res_1
 18387                        ;							
                    if (res != FR_OK) break;
 18388                        	.line	4928
 18389 08:4712: A5 11        	lda	<L686+res_1
 18390 08:4714: F0 03        	beq	L701
 18391 08:4716: 82 B0 00     	brl	L10368
 18392                        L701:
 18393                        ;						}
 18394                        	.line	4929
 18395                        ;						if (fs->
                    fs_type == FS_FAT16) {
 18396                        L10370:
 18397                        	.line	4930
 18398 08:4719: E2 20        	sep	#$20
 18399                        	longa	off
 18400 08:471B: A7 13        	lda	[<L686+fs_1]
 18401 08:471D: C9 02        	cmp	#<$2
 18402 08:471F: C2 20        	rep	#$20
 18403                        	longa	on
 18404 08:4721: F0 03        	beq	L702
 18405 08:4723: 82 3D 00     	brl	L10371
 18406                        L702:
 18407                        	.line	4930
 18408                        ;							
                    if (ld_word(fs->win + i) == 0) nfree++;
 18409                        	.line	4931
 18410 08:4726: A5 27        	lda	<L686+i_1
 18411 08:4728: 85 01        	sta	<R0
 18412 08:472A: 64 03        	stz	<R0+2
 18413 08:472C: 18           	clc
 18414 08:472D: A9 2F 00     	lda	#$2f
 18415 08:4730: 65 01        	adc	<R0
  Thu Dec  3 2020 22:25                                                Page 362


 18416 08:4732: 85 05        	sta	<R1
 18417 08:4734: A9 00 00     	lda	#$0
 18418 08:4737: 65 03        	adc	<R0+2
 18419 08:4739: 85 07        	sta	<R1+2
 18420 08:473B: 18           	clc
 18421 08:473C: A5 13        	lda	<L686+fs_1
 18422 08:473E: 65 05        	adc	<R1
 18423 08:4740: 85 01        	sta	<R0
 18424 08:4742: A5 15        	lda	<L686+fs_1+2
 18425 08:4744: 65 07        	adc	<R1+2
 18426 08:4746: 85 03        	sta	<R0+2
 18427 08:4748: D4 03        	pei	<R0+2
 18428 08:474A: D4 01        	pei	<R0
 18429 08:474C: 22 00 00 08  	jsl	~~ld_word
 18430 08:4750: AA           	tax
 18431 08:4751: F0 03        	beq	L703
 18432 08:4753: 82 06 00     	brl	L10372
 18433                        L703:
 18434                        	.line	4931
 18435 08:4756: E6 17        	inc	<L686+nfree_1
 18436 08:4758: D0 02        	bne	L704
 18437 08:475A: E6 19        	inc	<L686+nfree_1+2
 18438                        L704:
 18439                        ;							
                    i += 2;
 18440                        L10372:
 18441                        	.line	4932
 18442 08:475C: E6 27        	inc	<L686+i_1
 18443 08:475E: E6 27        	inc	<L686+i_1
 18444                        ;						} else {
 18445                        	.line	4933
 18446 08:4760: 82 50 00     	brl	L10373
 18447                        L10371:
 18448                        	.line	4933
 18449                        ;							
                    if ((ld_dword(fs->win + i) & 0x0FFFFFFF) == 0) nfree++;
 18450                        	.line	4934
 18451 08:4763: A5 27        	lda	<L686+i_1
 18452 08:4765: 85 01        	sta	<R0
 18453 08:4767: 64 03        	stz	<R0+2
 18454 08:4769: 18           	clc
 18455 08:476A: A9 2F 00     	lda	#$2f
 18456 08:476D: 65 01        	adc	<R0
 18457 08:476F: 85 05        	sta	<R1
 18458 08:4771: A9 00 00     	lda	#$0
 18459 08:4774: 65 03        	adc	<R0+2
 18460 08:4776: 85 07        	sta	<R1+2
 18461 08:4778: 18           	clc
 18462 08:4779: A5 13        	lda	<L686+fs_1
 18463 08:477B: 65 05        	adc	<R1
 18464 08:477D: 85 01        	sta	<R0
 18465 08:477F: A5 15        	lda	<L686+fs_1+2
 18466 08:4781: 65 07        	adc	<R1+2
 18467 08:4783: 85 03        	sta	<R0+2
 18468 08:4785: D4 03        	pei	<R0+2
 18469 08:4787: D4 01        	pei	<R0
 18470 08:4789: 22 3B 00 08  	jsl	~~ld_dword
 18471 08:478D: 85 09        	sta	<R2
  Thu Dec  3 2020 22:25                                                Page 363


 18472 08:478F: 86 0B        	stx	<R2+2
 18473 08:4791: A5 09        	lda	<R2
 18474 08:4793: 85 0D        	sta	<R3
 18475 08:4795: A5 0B        	lda	<R2+2
 18476 08:4797: 29 FF 0F     	and	#^$fffffff
 18477 08:479A: 85 0F        	sta	<R3+2
 18478 08:479C: A5 0D        	lda	<R3
 18479 08:479E: 05 0F        	ora	<R3+2
 18480 08:47A0: F0 03        	beq	L705
 18481 08:47A2: 82 06 00     	brl	L10374
 18482                        L705:
 18483                        	.line	4934
 18484 08:47A5: E6 17        	inc	<L686+nfree_1
 18485 08:47A7: D0 02        	bne	L706
 18486 08:47A9: E6 19        	inc	<L686+nfree_1+2
 18487                        L706:
 18488                        ;							
                    i += 4;
 18489                        L10374:
 18490                        	.line	4935
 18491 08:47AB: 18           	clc
 18492 08:47AC: A9 04 00     	lda	#$4
 18493 08:47AF: 65 27        	adc	<L686+i_1
 18494 08:47B1: 85 27        	sta	<L686+i_1
 18495                        ;						}
 18496                        	.line	4936
 18497                        L10373:
 18498                        ;						i %= SS(
                    fs);
 18499                        	.line	4937
 18500 08:47B3: A9 00 FE     	lda	#$fe00
 18501 08:47B6: 14 27        	trb	<L686+i_1
 18502                        ;					} while (--clst)
                    ;
 18503                        	.line	4938
 18504                        L10367:
 18505 08:47B8: A5 1B        	lda	<L686+clst_1
 18506 08:47BA: D0 02        	bne	L707
 18507 08:47BC: C6 1D        	dec	<L686+clst_1+2
 18508                        L707:
 18509 08:47BE: C6 1B        	dec	<L686+clst_1
 18510 08:47C0: A5 1B        	lda	<L686+clst_1
 18511 08:47C2: 05 1D        	ora	<L686+clst_1+2
 18512 08:47C4: F0 03        	beq	L708
 18513 08:47C6: 82 26 FF     	brl	L10369
 18514                        L708:
 18515                        L10368:
 18516                        ;				}
 18517                        	.line	4939
 18518                        ;			}
 18519                        	.line	4940
 18520                        L10366:
 18521                        ;			*nclst = nfree;			
                    /* Return the free clusters */
 18522                        	.line	4941
 18523 08:47C9: A5 17        	lda	<L686+nfree_1
 18524 08:47CB: 87 40        	sta	[<L685+nclst_0]
 18525 08:47CD: A5 19        	lda	<L686+nfree_1+2
  Thu Dec  3 2020 22:25                                                Page 364


 18526 08:47CF: A0 02 00     	ldy	#$2
 18527 08:47D2: 97 40        	sta	[<L685+nclst_0],Y
 18528                        ;			fs->free_clst = nfree;	/* Now f
                    ree_clst is valid */
 18529                        	.line	4942
 18530 08:47D4: A5 17        	lda	<L686+nfree_1
 18531 08:47D6: A0 0F 00     	ldy	#$f
 18532 08:47D9: 97 13        	sta	[<L686+fs_1],Y
 18533 08:47DB: A5 19        	lda	<L686+nfree_1+2
 18534 08:47DD: A0 11 00     	ldy	#$11
 18535 08:47E0: 97 13        	sta	[<L686+fs_1],Y
 18536                        ;			fs->fsi_flag |= 1;		
                    /* FAT32: FSInfo is to be updated */
 18537                        	.line	4943
 18538 08:47E2: 18           	clc
 18539 08:47E3: A9 04 00     	lda	#$4
 18540 08:47E6: 65 13        	adc	<L686+fs_1
 18541 08:47E8: 85 01        	sta	<R0
 18542 08:47EA: A9 00 00     	lda	#$0
 18543 08:47ED: 65 15        	adc	<L686+fs_1+2
 18544 08:47EF: 85 03        	sta	<R0+2
 18545 08:47F1: E2 20        	sep	#$20
 18546                        	longa	off
 18547 08:47F3: A7 01        	lda	[<R0]
 18548 08:47F5: 09 01        	ora	#<$1
 18549 08:47F7: 87 01        	sta	[<R0]
 18550 08:47F9: C2 20        	rep	#$20
 18551                        	longa	on
 18552                        ;		}
 18553                        	.line	4944
 18554                        L10358:
 18555                        ;	}
 18556                        	.line	4945
 18557                        ;
 18558                        ;	LEAVE_FF(fs, res);
 18559                        L10356:
 18560                        	.line	4947
 18561 08:47FB: A5 11        	lda	<L686+res_1
 18562                        L709:
 18563 08:47FD: A8           	tay
 18564 08:47FE: A5 3A        	lda	<L685+2
 18565 08:4800: 85 46        	sta	<L685+2+12
 18566 08:4802: A5 39        	lda	<L685+1
 18567 08:4804: 85 45        	sta	<L685+1+12
 18568 08:4806: 2B           	pld
 18569 08:4807: 3B           	tsc
 18570 08:4808: 18           	clc
 18571 08:4809: 69 44 00     	adc	#L685+12
 18572 08:480C: 1B           	tcs
 18573 08:480D: 98           	tya
 18574 08:480E: 6B           	rtl
 18575                        ;}
 18576                        	.line	4948
 18577                        	.endblock	4948
 18578             00000038   L685	equ	56
 18579             00000011   L686	equ	17
 18580 08:480F:              	ends
 18581                        	efunc
  Thu Dec  3 2020 22:25                                                Page 365


 18582                        	.endfunc	4948,17,56
 18583                        	.line	4948
 18584                        ;
 18585                        ;
 18586                        ;
 18587                        ;
 18588                        ;/*-----------------------------------------------
                    ------------------------*/
 18589                        ;/* Truncate File                                 
                                            */
 18590                        ;/*-----------------------------------------------
                    ------------------------*/
 18591                        ;
 18592                        ;FRESULT f_truncate (
 18593                        ;	FIL* fp		/* Pointer to the file object */
 18594                        ;)
 18595                        ;{
 18596                        	.line	4957
 18597                        	.line	4960
 18598                        	FFDOS
 18599                        	xdef	~~f_truncate
 18600                        	func
 18601                        	.function	4960
 18602                        ~~f_truncate:
 18603                        	longa	on
 18604                        	longi	on
 18605 08:480F: 3B           	tsc
 18606 08:4810: 38           	sec
 18607 08:4811: E9 0E 00     	sbc	#L710
 18608 08:4814: 1B           	tcs
 18609 08:4815: 0B           	phd
 18610 08:4816: 5B           	tcd
 18611             00000004   fp_0	set	4
 18612                        	.block	4960
 18613                        ;	FRESULT res;
 18614                        ;	FATFS *fs;
 18615                        ;	DWORD ncl;
 18616                        ;
 18617                        ;
 18618                        ;	res = validate(&fp->obj, &fs);	/* Check validit
                    y of the file object */
 18619             00000000   res_1	set	0
 18620             00000002   fs_1	set	2
 18621             00000006   ncl_1	set	6
 18622                        	.sym	res,0,5,1,16
 18623                        	.sym	fs,2,138,1,32,80
 18624                        	.sym	ncl,6,18,1,32
 18625                        	.sym	fp,4,138,6,32,82
 18626                        	.line	4966
 18627 08:4817: F4 00 00     	pea	#0
 18628 08:481A: 18           	clc
 18629 08:481B: 7B           	tdc
 18630 08:481C: 69 07 00     	adc	#<L711+fs_1
 18631 08:481F: 48           	pha
 18632 08:4820: D4 14        	pei	<L710+fp_0+2
 18633 08:4822: D4 12        	pei	<L710+fp_0
 18634 08:4824: 22 66 2D 08  	jsl	~~validate
 18635 08:4828: 85 05        	sta	<L711+res_1
  Thu Dec  3 2020 22:25                                                Page 366


 18636                        ;	if (res != FR_OK || (res = (FRESULT)fp->err) != 
                    FR_OK) LEAVE_FF(fs, res);
 18637                        	.line	4967
 18638 08:482A: A5 05        	lda	<L711+res_1
 18639 08:482C: F0 03        	beq	L714
 18640 08:482E: 82 11 00     	brl	L713
 18641                        L714:
 18642 08:4831: A0 11 00     	ldy	#$11
 18643 08:4834: B7 12        	lda	[<L710+fp_0],Y
 18644 08:4836: 29 FF 00     	and	#$ff
 18645 08:4839: 85 05        	sta	<L711+res_1
 18646 08:483B: A5 05        	lda	<L711+res_1
 18647 08:483D: D0 03        	bne	L715
 18648 08:483F: 82 14 00     	brl	L10375
 18649                        L715:
 18650                        L713:
 18651                        	.line	4967
 18652 08:4842: A5 05        	lda	<L711+res_1
 18653                        L716:
 18654 08:4844: A8           	tay
 18655 08:4845: A5 10        	lda	<L710+2
 18656 08:4847: 85 14        	sta	<L710+2+4
 18657 08:4849: A5 0F        	lda	<L710+1
 18658 08:484B: 85 13        	sta	<L710+1+4
 18659 08:484D: 2B           	pld
 18660 08:484E: 3B           	tsc
 18661 08:484F: 18           	clc
 18662 08:4850: 69 12 00     	adc	#L710+4
 18663 08:4853: 1B           	tcs
 18664 08:4854: 98           	tya
 18665 08:4855: 6B           	rtl
 18666                        ;	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENI
                    ED);	/* Check access mode */
 18667                        L10375:
 18668                        	.line	4968
 18669 08:4856: E2 20        	sep	#$20
 18670                        	longa	off
 18671 08:4858: A0 10 00     	ldy	#$10
 18672 08:485B: B7 12        	lda	[<L710+fp_0],Y
 18673 08:485D: 29 02        	and	#<$2
 18674 08:485F: C2 20        	rep	#$20
 18675                        	longa	on
 18676 08:4861: F0 03        	beq	L717
 18677 08:4863: 82 06 00     	brl	L10376
 18678                        L717:
 18679                        	.line	4968
 18680 08:4866: A9 07 00     	lda	#$7
 18681 08:4869: 82 D8 FF     	brl	L716
 18682                        ;
 18683                        ;	if (fp->fptr < fp->obj.objsize) {	/* Proce
                    ss when fptr is not on the eof */
 18684                        L10376:
 18685                        	.line	4970
 18686 08:486C: A0 12 00     	ldy	#$12
 18687 08:486F: B7 12        	lda	[<L710+fp_0],Y
 18688 08:4871: A0 0C 00     	ldy	#$c
 18689 08:4874: D7 12        	cmp	[<L710+fp_0],Y
 18690 08:4876: A0 14 00     	ldy	#$14
  Thu Dec  3 2020 22:25                                                Page 367


 18691 08:4879: B7 12        	lda	[<L710+fp_0],Y
 18692 08:487B: A0 0E 00     	ldy	#$e
 18693 08:487E: F7 12        	sbc	[<L710+fp_0],Y
 18694 08:4880: 90 03        	bcc	L718
 18695 08:4882: 82 66 01     	brl	L10377
 18696                        L718:
 18697                        	.line	4970
 18698                        ;		if (fp->fptr == 0) {	/* When set file
                     size to zero, remove entire cluster chain */
 18699                        	.line	4971
 18700 08:4885: A0 12 00     	ldy	#$12
 18701 08:4888: B7 12        	lda	[<L710+fp_0],Y
 18702 08:488A: A0 14 00     	ldy	#$14
 18703 08:488D: 17 12        	ora	[<L710+fp_0],Y
 18704 08:488F: F0 03        	beq	L719
 18705 08:4891: 82 2F 00     	brl	L10378
 18706                        L719:
 18707                        	.line	4971
 18708                        ;			res = remove_chain(&fp->obj, fp-
                    >obj.sclust, 0);
 18709                        	.line	4972
 18710 08:4894: F4 00 00     	pea	#^$0
 18711 08:4897: F4 00 00     	pea	#<$0
 18712 08:489A: A0 0A 00     	ldy	#$a
 18713 08:489D: B7 12        	lda	[<L710+fp_0],Y
 18714 08:489F: 48           	pha
 18715 08:48A0: A0 08 00     	ldy	#$8
 18716 08:48A3: B7 12        	lda	[<L710+fp_0],Y
 18717 08:48A5: 48           	pha
 18718 08:48A6: D4 14        	pei	<L710+fp_0+2
 18719 08:48A8: D4 12        	pei	<L710+fp_0
 18720 08:48AA: 22 43 0C 08  	jsl	~~remove_chain
 18721 08:48AE: 85 05        	sta	<L711+res_1
 18722                        ;			fp->obj.sclust = 0;
 18723                        	.line	4973
 18724 08:48B0: A9 00 00     	lda	#$0
 18725 08:48B3: A0 08 00     	ldy	#$8
 18726 08:48B6: 97 12        	sta	[<L710+fp_0],Y
 18727 08:48B8: A9 00 00     	lda	#$0
 18728 08:48BB: A0 0A 00     	ldy	#$a
 18729 08:48BE: 97 12        	sta	[<L710+fp_0],Y
 18730                        ;		} else {				
                    /* When truncate a part of the file, remove remaining cluste
                    rs */
 18731                        	.line	4974
 18732 08:48C0: 82 7A 00     	brl	L10379
 18733                        L10378:
 18734                        	.line	4974
 18735                        ;			ncl = get_fat(&fp->obj, fp->clus
                    t);
 18736                        	.line	4975
 18737 08:48C3: A0 18 00     	ldy	#$18
 18738 08:48C6: B7 12        	lda	[<L710+fp_0],Y
 18739 08:48C8: 48           	pha
 18740 08:48C9: A0 16 00     	ldy	#$16
 18741 08:48CC: B7 12        	lda	[<L710+fp_0],Y
 18742 08:48CE: 48           	pha
 18743 08:48CF: D4 14        	pei	<L710+fp_0+2
  Thu Dec  3 2020 22:25                                                Page 368


 18744 08:48D1: D4 12        	pei	<L710+fp_0
 18745 08:48D3: 22 8D 06 08  	jsl	~~get_fat
 18746 08:48D7: 85 0B        	sta	<L711+ncl_1
 18747 08:48D9: 86 0D        	stx	<L711+ncl_1+2
 18748                        ;			res = FR_OK;
 18749                        	.line	4976
 18750 08:48DB: 64 05        	stz	<L711+res_1
 18751                        ;			if (ncl == 0xFFFFFFFF) res = FR_
                    DISK_ERR;
 18752                        	.line	4977
 18753 08:48DD: A5 0B        	lda	<L711+ncl_1
 18754 08:48DF: C9 FF FF     	cmp	#<$ffffffff
 18755 08:48E2: D0 05        	bne	L720
 18756 08:48E4: A5 0D        	lda	<L711+ncl_1+2
 18757 08:48E6: C9 FF FF     	cmp	#^$ffffffff
 18758                        L720:
 18759 08:48E9: F0 03        	beq	L721
 18760 08:48EB: 82 05 00     	brl	L10380
 18761                        L721:
 18762                        	.line	4977
 18763 08:48EE: A9 01 00     	lda	#$1
 18764 08:48F1: 85 05        	sta	<L711+res_1
 18765                        ;			if (ncl == 1) res = FR_INT_ERR;
 18766                        L10380:
 18767                        	.line	4978
 18768 08:48F3: A5 0B        	lda	<L711+ncl_1
 18769 08:48F5: C9 01 00     	cmp	#<$1
 18770 08:48F8: D0 05        	bne	L722
 18771 08:48FA: A5 0D        	lda	<L711+ncl_1+2
 18772 08:48FC: C9 00 00     	cmp	#^$1
 18773                        L722:
 18774 08:48FF: F0 03        	beq	L723
 18775 08:4901: 82 05 00     	brl	L10381
 18776                        L723:
 18777                        	.line	4978
 18778 08:4904: A9 02 00     	lda	#$2
 18779 08:4907: 85 05        	sta	<L711+res_1
 18780                        ;			if (res == FR_OK && ncl < fs->n_
                    fatent) {
 18781                        L10381:
 18782                        	.line	4979
 18783 08:4909: A5 05        	lda	<L711+res_1
 18784 08:490B: F0 03        	beq	L724
 18785 08:490D: 82 2D 00     	brl	L10382
 18786                        L724:
 18787 08:4910: A5 0B        	lda	<L711+ncl_1
 18788 08:4912: A0 13 00     	ldy	#$13
 18789 08:4915: D7 07        	cmp	[<L711+fs_1],Y
 18790 08:4917: A5 0D        	lda	<L711+ncl_1+2
 18791 08:4919: A0 15 00     	ldy	#$15
 18792 08:491C: F7 07        	sbc	[<L711+fs_1],Y
 18793 08:491E: 90 03        	bcc	L725
 18794 08:4920: 82 1A 00     	brl	L10382
 18795                        L725:
 18796                        	.line	4979
 18797                        ;				res = remove_chain(&fp->
                    obj, ncl, fp->clust);
 18798                        	.line	4980
  Thu Dec  3 2020 22:25                                                Page 369


 18799 08:4923: A0 18 00     	ldy	#$18
 18800 08:4926: B7 12        	lda	[<L710+fp_0],Y
 18801 08:4928: 48           	pha
 18802 08:4929: A0 16 00     	ldy	#$16
 18803 08:492C: B7 12        	lda	[<L710+fp_0],Y
 18804 08:492E: 48           	pha
 18805 08:492F: D4 0D        	pei	<L711+ncl_1+2
 18806 08:4931: D4 0B        	pei	<L711+ncl_1
 18807 08:4933: D4 14        	pei	<L710+fp_0+2
 18808 08:4935: D4 12        	pei	<L710+fp_0
 18809 08:4937: 22 43 0C 08  	jsl	~~remove_chain
 18810 08:493B: 85 05        	sta	<L711+res_1
 18811                        ;			}
 18812                        	.line	4981
 18813                        ;		}
 18814                        L10382:
 18815                        	.line	4982
 18816                        L10379:
 18817                        ;		fp->obj.objsize = fp->fptr;	/* Set f
                    ile size to current read/write point */
 18818                        	.line	4983
 18819 08:493D: A0 12 00     	ldy	#$12
 18820 08:4940: B7 12        	lda	[<L710+fp_0],Y
 18821 08:4942: A0 0C 00     	ldy	#$c
 18822 08:4945: 97 12        	sta	[<L710+fp_0],Y
 18823 08:4947: A0 14 00     	ldy	#$14
 18824 08:494A: B7 12        	lda	[<L710+fp_0],Y
 18825 08:494C: A0 0E 00     	ldy	#$e
 18826 08:494F: 97 12        	sta	[<L710+fp_0],Y
 18827                        ;		fp->flag |= FA_MODIFIED;
 18828                        	.line	4984
 18829 08:4951: 18           	clc
 18830 08:4952: A9 10 00     	lda	#$10
 18831 08:4955: 65 12        	adc	<L710+fp_0
 18832 08:4957: 85 01        	sta	<R0
 18833 08:4959: A9 00 00     	lda	#$0
 18834 08:495C: 65 14        	adc	<L710+fp_0+2
 18835 08:495E: 85 03        	sta	<R0+2
 18836 08:4960: E2 20        	sep	#$20
 18837                        	longa	off
 18838 08:4962: A7 01        	lda	[<R0]
 18839 08:4964: 09 40        	ora	#<$40
 18840 08:4966: 87 01        	sta	[<R0]
 18841 08:4968: C2 20        	rep	#$20
 18842                        	longa	on
 18843                        ;#if !FF_FS_TINY
 18844                        ;		if (res == FR_OK && (fp->flag & FA_DIRTY
                    )) {
 18845                        	.line	4986
 18846 08:496A: A5 05        	lda	<L711+res_1
 18847 08:496C: F0 03        	beq	L726
 18848 08:496E: 82 63 00     	brl	L10383
 18849                        L726:
 18850 08:4971: E2 20        	sep	#$20
 18851                        	longa	off
 18852 08:4973: A0 10 00     	ldy	#$10
 18853 08:4976: B7 12        	lda	[<L710+fp_0],Y
 18854 08:4978: 29 80        	and	#<$80
  Thu Dec  3 2020 22:25                                                Page 370


 18855 08:497A: C2 20        	rep	#$20
 18856                        	longa	on
 18857 08:497C: D0 03        	bne	L727
 18858 08:497E: 82 53 00     	brl	L10383
 18859                        L727:
 18860                        	.line	4986
 18861                        ;			if (disk_write(fs->pdrv, fp->buf
                    , fp->sect, 1) != RES_OK) {
 18862                        	.line	4987
 18863 08:4981: F4 01 00     	pea	#<$1
 18864 08:4984: A0 1C 00     	ldy	#$1c
 18865 08:4987: B7 12        	lda	[<L710+fp_0],Y
 18866 08:4989: 48           	pha
 18867 08:498A: A0 1A 00     	ldy	#$1a
 18868 08:498D: B7 12        	lda	[<L710+fp_0],Y
 18869 08:498F: 48           	pha
 18870 08:4990: 18           	clc
 18871 08:4991: A9 26 00     	lda	#$26
 18872 08:4994: 65 12        	adc	<L710+fp_0
 18873 08:4996: 85 01        	sta	<R0
 18874 08:4998: A9 00 00     	lda	#$0
 18875 08:499B: 65 14        	adc	<L710+fp_0+2
 18876 08:499D: 85 03        	sta	<R0+2
 18877 08:499F: D4 03        	pei	<R0+2
 18878 08:49A1: D4 01        	pei	<R0
 18879 08:49A3: A0 01 00     	ldy	#$1
 18880 08:49A6: B7 07        	lda	[<L711+fs_1],Y
 18881 08:49A8: 48           	pha
 18882 08:49A9: 22 xx xx xx  	jsl	~~disk_write
 18883 08:49AD: AA           	tax
 18884 08:49AE: D0 03        	bne	L728
 18885 08:49B0: 82 08 00     	brl	L10384
 18886                        L728:
 18887                        	.line	4987
 18888                        ;				res = FR_DISK_ERR;
 18889                        	.line	4988
 18890 08:49B3: A9 01 00     	lda	#$1
 18891 08:49B6: 85 05        	sta	<L711+res_1
 18892                        ;			} else {
 18893                        	.line	4989
 18894 08:49B8: 82 19 00     	brl	L10385
 18895                        L10384:
 18896                        	.line	4989
 18897                        ;				fp->flag &= (BYTE)~FA_DI
                    RTY;
 18898                        	.line	4990
 18899 08:49BB: 18           	clc
 18900 08:49BC: A9 10 00     	lda	#$10
 18901 08:49BF: 65 12        	adc	<L710+fp_0
 18902 08:49C1: 85 01        	sta	<R0
 18903 08:49C3: A9 00 00     	lda	#$0
 18904 08:49C6: 65 14        	adc	<L710+fp_0+2
 18905 08:49C8: 85 03        	sta	<R0+2
 18906 08:49CA: E2 20        	sep	#$20
 18907                        	longa	off
 18908 08:49CC: A7 01        	lda	[<R0]
 18909 08:49CE: 29 7F        	and	#<$7f
 18910 08:49D0: 87 01        	sta	[<R0]
  Thu Dec  3 2020 22:25                                                Page 371


 18911 08:49D2: C2 20        	rep	#$20
 18912                        	longa	on
 18913                        ;			}
 18914                        	.line	4991
 18915                        L10385:
 18916                        ;		}
 18917                        	.line	4992
 18918                        ;#endif
 18919                        ;		if (res != FR_OK) ABORT(fs, res);
 18920                        L10383:
 18921                        	.line	4994
 18922 08:49D4: A5 05        	lda	<L711+res_1
 18923 08:49D6: D0 03        	bne	L729
 18924 08:49D8: 82 10 00     	brl	L10386
 18925                        L729:
 18926                        	.line	4994
 18927                        	.line	4994
 18928 08:49DB: E2 20        	sep	#$20
 18929                        	longa	off
 18930 08:49DD: A5 05        	lda	<L711+res_1
 18931 08:49DF: A0 11 00     	ldy	#$11
 18932 08:49E2: 97 12        	sta	[<L710+fp_0],Y
 18933 08:49E4: C2 20        	rep	#$20
 18934                        	longa	on
 18935                        	.line	4994
 18936 08:49E6: A5 05        	lda	<L711+res_1
 18937 08:49E8: 82 59 FE     	brl	L716
 18938                        	.line	4994
 18939                        L10386:
 18940                        	.line	4994
 18941                        ;	}
 18942                        	.line	4995
 18943                        ;
 18944                        ;	LEAVE_FF(fs, res);
 18945                        L10377:
 18946                        	.line	4997
 18947 08:49EB: A5 05        	lda	<L711+res_1
 18948 08:49ED: 82 54 FE     	brl	L716
 18949                        ;}
 18950                        	.line	4998
 18951                        	.endblock	4998
 18952             0000000E   L710	equ	14
 18953             00000005   L711	equ	5
 18954 08:49F0:              	ends
 18955                        	efunc
 18956                        	.endfunc	4998,5,14
 18957                        	.line	4998
 18958                        ;
 18959                        ;
 18960                        ;
 18961                        ;
 18962                        ;/*-----------------------------------------------
                    ------------------------*/
 18963                        ;/* Delete a File/Directory                       
                                            */
 18964                        ;/*-----------------------------------------------
                    ------------------------*/
 18965                        ;
  Thu Dec  3 2020 22:25                                                Page 372


 18966                        ;FRESULT f_unlink (
 18967                        ;	const TCHAR* path		/* Pointer to th
                    e file or directory path */
 18968                        ;)
 18969                        ;{
 18970                        	.line	5007
 18971                        	.line	5010
 18972                        	FFDOS
 18973                        	xdef	~~f_unlink
 18974                        	func
 18975                        	.function	5010
 18976                        ~~f_unlink:
 18977                        	longa	on
 18978                        	longi	on
 18979 08:49F0: 3B           	tsc
 18980 08:49F1: 38           	sec
 18981 08:49F2: E9 62 00     	sbc	#L730
 18982 08:49F5: 1B           	tcs
 18983 08:49F6: 0B           	phd
 18984 08:49F7: 5B           	tcd
 18985             00000004   path_0	set	4
 18986                        	.block	5010
 18987                        ;	FRESULT res;
 18988                        ;	DIR dj, sdj;
 18989                        ;	DWORD dclst = 0;
 18990                        ;	FATFS *fs;
 18991                        ;#if FF_FS_EXFAT
 18992                        ;	FFOBJID obj;
 18993                        ;#endif
 18994                        ;	DEF_NAMBUF
 18995                        ;
 18996                        ;
 18997                        ;	/* Get logical drive */
 18998                        ;	res = mount_volume(&path, &fs, FA_WRITE);
 18999             00000000   res_1	set	0
 19000             00000002   dj_1	set	2
 19001             0000002E   sdj_1	set	46
 19002             0000005A   dclst_1	set	90
 19003             0000005E   fs_1	set	94
 19004                        	.sym	res,0,5,1,16
 19005                        	.sym	dj,2,10,1,352,83
 19006                        	.sym	sdj,46,10,1,352,83
 19007                        	.sym	dclst,90,18,1,32
 19008                        	.sym	fs,94,138,1,32,80
 19009                        	.sym	path,4,142,6,32
 19010 08:49F8: 64 5B        	stz	<L731+dclst_1
 19011 08:49FA: 64 5D        	stz	<L731+dclst_1+2
 19012                        	.line	5022
 19013 08:49FC: F4 02 00     	pea	#<$2
 19014 08:49FF: F4 00 00     	pea	#0
 19015 08:4A02: 18           	clc
 19016 08:4A03: 7B           	tdc
 19017 08:4A04: 69 5F 00     	adc	#<L731+fs_1
 19018 08:4A07: 48           	pha
 19019 08:4A08: F4 00 00     	pea	#0
 19020 08:4A0B: 18           	clc
 19021 08:4A0C: 7B           	tdc
 19022 08:4A0D: 69 66 00     	adc	#<L730+path_0
  Thu Dec  3 2020 22:25                                                Page 373


 19023 08:4A10: 48           	pha
 19024 08:4A11: 22 E7 25 08  	jsl	~~mount_volume
 19025 08:4A15: 85 01        	sta	<L731+res_1
 19026                        ;	if (res == FR_OK) {
 19027                        	.line	5023
 19028 08:4A17: A5 01        	lda	<L731+res_1
 19029 08:4A19: F0 03        	beq	L733
 19030 08:4A1B: 82 2F 01     	brl	L10387
 19031                        L733:
 19032                        	.line	5023
 19033                        ;		dj.obj.fs = fs;
 19034                        	.line	5024
 19035 08:4A1E: A5 5F        	lda	<L731+fs_1
 19036 08:4A20: 85 03        	sta	<L731+dj_1
 19037 08:4A22: A5 61        	lda	<L731+fs_1+2
 19038 08:4A24: 85 05        	sta	<L731+dj_1+2
 19039                        ;		INIT_NAMBUF(fs);
 19040                        	.line	5025
 19041                        ;		res = follow_path(&dj, path);		
                    /* Follow the file path */
 19042                        	.line	5026
 19043 08:4A26: D4 68        	pei	<L730+path_0+2
 19044 08:4A28: D4 66        	pei	<L730+path_0
 19045 08:4A2A: F4 00 00     	pea	#0
 19046 08:4A2D: 18           	clc
 19047 08:4A2E: 7B           	tdc
 19048 08:4A2F: 69 03 00     	adc	#<L731+dj_1
 19049 08:4A32: 48           	pha
 19050 08:4A33: 22 FC 1E 08  	jsl	~~follow_path
 19051 08:4A37: 85 01        	sta	<L731+res_1
 19052                        ;		if (FF_FS_RPATH && res == FR_OK && (dj.f
                    n[NSFLAG] & NS_DOT)) {
 19053                        	.line	5027
 19054 08:4A39: 82 19 00     	brl	L10388
 19055 08:4A3C: A5 01        	lda	<L731+res_1
 19056 08:4A3E: F0 03        	beq	L734
 19057 08:4A40: 82 12 00     	brl	L10388
 19058                        L734:
 19059 08:4A43: E2 20        	sep	#$20
 19060                        	longa	off
 19061 08:4A45: A5 2E        	lda	<L731+dj_1+43
 19062 08:4A47: 29 20        	and	#<$20
 19063 08:4A49: C2 20        	rep	#$20
 19064                        	longa	on
 19065 08:4A4B: D0 03        	bne	L735
 19066 08:4A4D: 82 05 00     	brl	L10388
 19067                        L735:
 19068                        	.line	5027
 19069                        ;			res = FR_INVALID_NAME;		
                    	/* Cannot remove dot entry */
 19070                        	.line	5028
 19071 08:4A50: A9 06 00     	lda	#$6
 19072 08:4A53: 85 01        	sta	<L731+res_1
 19073                        ;		}
 19074                        	.line	5029
 19075                        ;#if FF_FS_LOCK != 0
 19076                        ;		if (res == FR_OK) res = chk_lock(&dj, 2)
                    ;	/* Check if it is an open object */
  Thu Dec  3 2020 22:25                                                Page 374


 19077                        ;#endif
 19078                        ;		if (res == FR_OK) {			
                    		/* The object is accessible */
 19079                        L10388:
 19080                        	.line	5033
 19081 08:4A55: A5 01        	lda	<L731+res_1
 19082 08:4A57: F0 03        	beq	L736
 19083 08:4A59: 82 F1 00     	brl	L10389
 19084                        L736:
 19085                        	.line	5033
 19086                        ;			if (dj.fn[NSFLAG] & NS_NONAME) {
 19087                        	.line	5034
 19088 08:4A5C: E2 20        	sep	#$20
 19089                        	longa	off
 19090 08:4A5E: A5 2E        	lda	<L731+dj_1+43
 19091 08:4A60: 29 80        	and	#<$80
 19092 08:4A62: C2 20        	rep	#$20
 19093                        	longa	on
 19094 08:4A64: D0 03        	bne	L737
 19095 08:4A66: 82 08 00     	brl	L10390
 19096                        L737:
 19097                        	.line	5034
 19098                        ;				res = FR_INVALID_NAME;	
                    	/* Cannot remove the origin directory */
 19099                        	.line	5035
 19100 08:4A69: A9 06 00     	lda	#$6
 19101 08:4A6C: 85 01        	sta	<L731+res_1
 19102                        ;			} else {
 19103                        	.line	5036
 19104 08:4A6E: 82 12 00     	brl	L10391
 19105                        L10390:
 19106                        	.line	5036
 19107                        ;				if (dj.obj.attr & AM_RDO
                    ) {
 19108                        	.line	5037
 19109 08:4A71: E2 20        	sep	#$20
 19110                        	longa	off
 19111 08:4A73: A5 09        	lda	<L731+dj_1+6
 19112 08:4A75: 29 01        	and	#<$1
 19113 08:4A77: C2 20        	rep	#$20
 19114                        	longa	on
 19115 08:4A79: D0 03        	bne	L738
 19116 08:4A7B: 82 05 00     	brl	L10392
 19117                        L738:
 19118                        	.line	5037
 19119                        ;					res = FR_DENIED;
                    		/* Cannot remove R/O object */
 19120                        	.line	5038
 19121 08:4A7E: A9 07 00     	lda	#$7
 19122 08:4A81: 85 01        	sta	<L731+res_1
 19123                        ;				}
 19124                        	.line	5039
 19125                        ;			}
 19126                        L10392:
 19127                        	.line	5040
 19128                        L10391:
 19129                        ;			if (res == FR_OK) {
 19130                        	.line	5041
  Thu Dec  3 2020 22:25                                                Page 375


 19131 08:4A83: A5 01        	lda	<L731+res_1
 19132 08:4A85: F0 03        	beq	L739
 19133 08:4A87: 82 73 00     	brl	L10393
 19134                        L739:
 19135                        	.line	5041
 19136                        ;#if FF_FS_EXFAT
 19137                        ;				obj.fs = fs;
 19138                        ;				if (fs->fs_type == FS_EX
                    FAT) {
 19139                        ;					init_alloc_info(
                    fs, &obj);
 19140                        ;					dclst = obj.sclu
                    st;
 19141                        ;				} else
 19142                        ;#endif
 19143                        ;				{
 19144                        	.line	5049
 19145                        ;					dclst = ld_clust
                    (fs, dj.dir);
 19146                        	.line	5050
 19147 08:4A8A: D4 21        	pei	<L731+dj_1+30
 19148 08:4A8C: D4 1F        	pei	<L731+dj_1+28
 19149 08:4A8E: D4 61        	pei	<L731+fs_1+2
 19150 08:4A90: D4 5F        	pei	<L731+fs_1
 19151 08:4A92: 22 73 17 08  	jsl	~~ld_clust
 19152 08:4A96: 85 5B        	sta	<L731+dclst_1
 19153 08:4A98: 86 5D        	stx	<L731+dclst_1+2
 19154                        ;				}
 19155                        	.line	5051
 19156                        ;				if (dj.obj.attr & AM_DIR
                    ) {			/* Is it a sub-directory? */
 19157                        	.line	5052
 19158 08:4A9A: E2 20        	sep	#$20
 19159                        	longa	off
 19160 08:4A9C: A5 09        	lda	<L731+dj_1+6
 19161 08:4A9E: 29 10        	and	#<$10
 19162 08:4AA0: C2 20        	rep	#$20
 19163                        	longa	on
 19164 08:4AA2: D0 03        	bne	L740
 19165 08:4AA4: 82 56 00     	brl	L10394
 19166                        L740:
 19167                        	.line	5052
 19168                        ;#if FF_FS_RPATH != 0
 19169                        ;					if (dclst == fs-
                    >cdir) {		 	/* Is it the current directory? 
                    */
 19170                        ;						res = FR
                    _DENIED;
 19171                        ;					} else
 19172                        ;#endif
 19173                        ;					{
 19174                        	.line	5058
 19175                        ;						sdj.obj.
                    fs = fs;				/* Open the sub-director
                    y */
 19176                        	.line	5059
 19177 08:4AA7: A5 5F        	lda	<L731+fs_1
 19178 08:4AA9: 85 2F        	sta	<L731+sdj_1
  Thu Dec  3 2020 22:25                                                Page 376


 19179 08:4AAB: A5 61        	lda	<L731+fs_1+2
 19180 08:4AAD: 85 31        	sta	<L731+sdj_1+2
 19181                        ;						sdj.obj.
                    sclust = dclst;
 19182                        	.line	5060
 19183 08:4AAF: A5 5B        	lda	<L731+dclst_1
 19184 08:4AB1: 85 37        	sta	<L731+sdj_1+8
 19185 08:4AB3: A5 5D        	lda	<L731+dclst_1+2
 19186 08:4AB5: 85 39        	sta	<L731+sdj_1+10
 19187                        ;#if FF_FS_EXFAT
 19188                        ;						if (fs->
                    fs_type == FS_EXFAT) {
 19189                        ;							
                    sdj.obj.objsize = obj.objsize;
 19190                        ;							
                    sdj.obj.stat = obj.stat;
 19191                        ;						}
 19192                        ;#endif
 19193                        ;						res = di
                    r_sdi(&sdj, 0);
 19194                        	.line	5067
 19195 08:4AB7: F4 00 00     	pea	#^$0
 19196 08:4ABA: F4 00 00     	pea	#<$0
 19197 08:4ABD: F4 00 00     	pea	#0
 19198 08:4AC0: 18           	clc
 19199 08:4AC1: 7B           	tdc
 19200 08:4AC2: 69 2F 00     	adc	#<L731+sdj_1
 19201 08:4AC5: 48           	pha
 19202 08:4AC6: 22 BD 11 08  	jsl	~~dir_sdi
 19203 08:4ACA: 85 01        	sta	<L731+res_1
 19204                        ;						if (res 
                    == FR_OK) {
 19205                        	.line	5068
 19206 08:4ACC: A5 01        	lda	<L731+res_1
 19207 08:4ACE: F0 03        	beq	L741
 19208 08:4AD0: 82 2A 00     	brl	L10395
 19209                        L741:
 19210                        	.line	5068
 19211                        ;							
                    res = DIR_READ_FILE(&sdj);			/* Test if the d
                    irectory is empty */
 19212                        	.line	5069
 19213 08:4AD3: F4 00 00     	pea	#<$0
 19214 08:4AD6: F4 00 00     	pea	#0
 19215 08:4AD9: 18           	clc
 19216 08:4ADA: 7B           	tdc
 19217 08:4ADB: 69 2F 00     	adc	#<L731+sdj_1
 19218 08:4ADE: 48           	pha
 19219 08:4ADF: 22 69 18 08  	jsl	~~dir_read
 19220 08:4AE3: 85 01        	sta	<L731+res_1
 19221                        ;							
                    if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 19222                        	.line	5070
 19223 08:4AE5: A5 01        	lda	<L731+res_1
 19224 08:4AE7: F0 03        	beq	L742
 19225 08:4AE9: 82 05 00     	brl	L10396
 19226                        L742:
 19227                        	.line	5070
  Thu Dec  3 2020 22:25                                                Page 377


 19228 08:4AEC: A9 07 00     	lda	#$7
 19229 08:4AEF: 85 01        	sta	<L731+res_1
 19230                        ;							
                    if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 19231                        L10396:
 19232                        	.line	5071
 19233 08:4AF1: A5 01        	lda	<L731+res_1
 19234 08:4AF3: C9 04 00     	cmp	#<$4
 19235 08:4AF6: F0 03        	beq	L743
 19236 08:4AF8: 82 02 00     	brl	L10397
 19237                        L743:
 19238                        	.line	5071
 19239 08:4AFB: 64 01        	stz	<L731+res_1
 19240                        ;						}
 19241                        L10397:
 19242                        	.line	5072
 19243                        ;					}
 19244                        L10395:
 19245                        	.line	5073
 19246                        ;				}
 19247                        	.line	5074
 19248                        ;			}
 19249                        L10394:
 19250                        	.line	5075
 19251                        ;			if (res == FR_OK) {
 19252                        L10393:
 19253                        	.line	5076
 19254 08:4AFD: A5 01        	lda	<L731+res_1
 19255 08:4AFF: F0 03        	beq	L744
 19256 08:4B01: 82 49 00     	brl	L10398
 19257                        L744:
 19258                        	.line	5076
 19259                        ;				res = dir_remove(&dj);	
                    		/* Remove the directory entry */
 19260                        	.line	5077
 19261 08:4B04: F4 00 00     	pea	#0
 19262 08:4B07: 18           	clc
 19263 08:4B08: 7B           	tdc
 19264 08:4B09: 69 03 00     	adc	#<L731+dj_1
 19265 08:4B0C: 48           	pha
 19266 08:4B0D: 22 2F 1B 08  	jsl	~~dir_remove
 19267 08:4B11: 85 01        	sta	<L731+res_1
 19268                        ;				if (res == FR_OK && dcls
                    t != 0) {	/* Remove the cluster chain if exist */
 19269                        	.line	5078
 19270 08:4B13: A5 01        	lda	<L731+res_1
 19271 08:4B15: F0 03        	beq	L745
 19272 08:4B17: 82 22 00     	brl	L10399
 19273                        L745:
 19274 08:4B1A: A5 5B        	lda	<L731+dclst_1
 19275 08:4B1C: 05 5D        	ora	<L731+dclst_1+2
 19276 08:4B1E: D0 03        	bne	L746
 19277 08:4B20: 82 19 00     	brl	L10399
 19278                        L746:
 19279                        	.line	5078
 19280                        ;#if FF_FS_EXFAT
 19281                        ;					res = remove_cha
                    in(&obj, dclst, 0);
  Thu Dec  3 2020 22:25                                                Page 378


 19282                        ;#else
 19283                        ;					res = remove_cha
                    in(&dj.obj, dclst, 0);
 19284                        	.line	5082
 19285 08:4B23: F4 00 00     	pea	#^$0
 19286 08:4B26: F4 00 00     	pea	#<$0
 19287 08:4B29: D4 5D        	pei	<L731+dclst_1+2
 19288 08:4B2B: D4 5B        	pei	<L731+dclst_1
 19289 08:4B2D: F4 00 00     	pea	#0
 19290 08:4B30: 18           	clc
 19291 08:4B31: 7B           	tdc
 19292 08:4B32: 69 03 00     	adc	#<L731+dj_1
 19293 08:4B35: 48           	pha
 19294 08:4B36: 22 43 0C 08  	jsl	~~remove_chain
 19295 08:4B3A: 85 01        	sta	<L731+res_1
 19296                        ;#endif
 19297                        ;				}
 19298                        	.line	5084
 19299                        ;				if (res == FR_OK) res = 
                    sync_fs(fs);
 19300                        L10399:
 19301                        	.line	5085
 19302 08:4B3C: A5 01        	lda	<L731+res_1
 19303 08:4B3E: F0 03        	beq	L747
 19304 08:4B40: 82 0A 00     	brl	L10400
 19305                        L747:
 19306                        	.line	5085
 19307 08:4B43: D4 61        	pei	<L731+fs_1+2
 19308 08:4B45: D4 5F        	pei	<L731+fs_1
 19309 08:4B47: 22 85 04 08  	jsl	~~sync_fs
 19310 08:4B4B: 85 01        	sta	<L731+res_1
 19311                        ;			}
 19312                        L10400:
 19313                        	.line	5086
 19314                        ;		}
 19315                        L10398:
 19316                        	.line	5087
 19317                        ;		FREE_NAMBUF();
 19318                        L10389:
 19319                        	.line	5088
 19320                        ;	}
 19321                        	.line	5089
 19322                        ;
 19323                        ;	LEAVE_FF(fs, res);
 19324                        L10387:
 19325                        	.line	5091
 19326 08:4B4D: A5 01        	lda	<L731+res_1
 19327                        L748:
 19328 08:4B4F: A8           	tay
 19329 08:4B50: A5 64        	lda	<L730+2
 19330 08:4B52: 85 68        	sta	<L730+2+4
 19331 08:4B54: A5 63        	lda	<L730+1
 19332 08:4B56: 85 67        	sta	<L730+1+4
 19333 08:4B58: 2B           	pld
 19334 08:4B59: 3B           	tsc
 19335 08:4B5A: 18           	clc
 19336 08:4B5B: 69 66 00     	adc	#L730+4
 19337 08:4B5E: 1B           	tcs
  Thu Dec  3 2020 22:25                                                Page 379


 19338 08:4B5F: 98           	tya
 19339 08:4B60: 6B           	rtl
 19340                        ;}
 19341                        	.line	5092
 19342                        	.endblock	5092
 19343             00000062   L730	equ	98
 19344             00000001   L731	equ	1
 19345 08:4B61:              	ends
 19346                        	efunc
 19347                        	.endfunc	5092,1,98
 19348                        	.line	5092
 19349                        ;
 19350                        ;
 19351                        ;
 19352                        ;
 19353                        ;/*-----------------------------------------------
                    ------------------------*/
 19354                        ;/* Create a Directory                            
                                            */
 19355                        ;/*-----------------------------------------------
                    ------------------------*/
 19356                        ;
 19357                        ;FRESULT f_mkdir (
 19358                        ;	const TCHAR* path		/* Pointer to th
                    e directory path */
 19359                        ;)
 19360                        ;{
 19361                        	.line	5101
 19362                        	.line	5104
 19363                        	FFDOS
 19364                        	xdef	~~f_mkdir
 19365                        	func
 19366                        	.function	5104
 19367                        ~~f_mkdir:
 19368                        	longa	on
 19369                        	longi	on
 19370 08:4B61: 3B           	tsc
 19371 08:4B62: 38           	sec
 19372 08:4B63: E9 56 00     	sbc	#L749
 19373 08:4B66: 1B           	tcs
 19374 08:4B67: 0B           	phd
 19375 08:4B68: 5B           	tcd
 19376             00000004   path_0	set	4
 19377                        	.block	5104
 19378                        ;	FRESULT res;
 19379                        ;	DIR dj;
 19380                        ;	FFOBJID sobj;
 19381                        ;	FATFS *fs;
 19382                        ;	DWORD dcl, pcl, tm;
 19383                        ;	DEF_NAMBUF
 19384                        ;
 19385                        ;
 19386                        ;	res = mount_volume(&path, &fs, FA_WRITE);	
                    /* Get logical drive */
 19387             00000000   res_1	set	0
 19388             00000002   dj_1	set	2
 19389             0000002E   sobj_1	set	46
 19390             0000003E   fs_1	set	62
  Thu Dec  3 2020 22:25                                                Page 380


 19391             00000042   dcl_1	set	66
 19392             00000046   pcl_1	set	70
 19393             0000004A   tm_1	set	74
 19394                        	.sym	res,0,5,1,16
 19395                        	.sym	dj,2,10,1,352,83
 19396                        	.sym	sobj,46,10,1,128,81
 19397                        	.sym	fs,62,138,1,32,80
 19398                        	.sym	dcl,66,18,1,32
 19399                        	.sym	pcl,70,18,1,32
 19400                        	.sym	tm,74,18,1,32
 19401                        	.sym	path,4,142,6,32
 19402                        	.line	5113
 19403 08:4B69: F4 02 00     	pea	#<$2
 19404 08:4B6C: F4 00 00     	pea	#0
 19405 08:4B6F: 18           	clc
 19406 08:4B70: 7B           	tdc
 19407 08:4B71: 69 47 00     	adc	#<L750+fs_1
 19408 08:4B74: 48           	pha
 19409 08:4B75: F4 00 00     	pea	#0
 19410 08:4B78: 18           	clc
 19411 08:4B79: 7B           	tdc
 19412 08:4B7A: 69 5A 00     	adc	#<L749+path_0
 19413 08:4B7D: 48           	pha
 19414 08:4B7E: 22 E7 25 08  	jsl	~~mount_volume
 19415 08:4B82: 85 09        	sta	<L750+res_1
 19416                        ;	if (res == FR_OK) {
 19417                        	.line	5114
 19418 08:4B84: A5 09        	lda	<L750+res_1
 19419 08:4B86: F0 03        	beq	L752
 19420 08:4B88: 82 3A 02     	brl	L10401
 19421                        L752:
 19422                        	.line	5114
 19423                        ;		dj.obj.fs = fs;
 19424                        	.line	5115
 19425 08:4B8B: A5 47        	lda	<L750+fs_1
 19426 08:4B8D: 85 0B        	sta	<L750+dj_1
 19427 08:4B8F: A5 49        	lda	<L750+fs_1+2
 19428 08:4B91: 85 0D        	sta	<L750+dj_1+2
 19429                        ;		INIT_NAMBUF(fs);
 19430                        	.line	5116
 19431                        ;		res = follow_path(&dj, path);		
                    	/* Follow the file path */
 19432                        	.line	5117
 19433 08:4B93: D4 5C        	pei	<L749+path_0+2
 19434 08:4B95: D4 5A        	pei	<L749+path_0
 19435 08:4B97: F4 00 00     	pea	#0
 19436 08:4B9A: 18           	clc
 19437 08:4B9B: 7B           	tdc
 19438 08:4B9C: 69 0B 00     	adc	#<L750+dj_1
 19439 08:4B9F: 48           	pha
 19440 08:4BA0: 22 FC 1E 08  	jsl	~~follow_path
 19441 08:4BA4: 85 09        	sta	<L750+res_1
 19442                        ;		if (res == FR_OK) res = FR_EXIST;	
                    	/* Name collision? */
 19443                        	.line	5118
 19444 08:4BA6: A5 09        	lda	<L750+res_1
 19445 08:4BA8: F0 03        	beq	L753
 19446 08:4BAA: 82 05 00     	brl	L10402
  Thu Dec  3 2020 22:25                                                Page 381


 19447                        L753:
 19448                        	.line	5118
 19449 08:4BAD: A9 08 00     	lda	#$8
 19450 08:4BB0: 85 09        	sta	<L750+res_1
 19451                        ;		if (FF_FS_RPATH && res == FR_NO_FILE && 
                    (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
 19452                        L10402:
 19453                        	.line	5119
 19454 08:4BB2: 82 1C 00     	brl	L10403
 19455 08:4BB5: A5 09        	lda	<L750+res_1
 19456 08:4BB7: C9 04 00     	cmp	#<$4
 19457 08:4BBA: F0 03        	beq	L754
 19458 08:4BBC: 82 12 00     	brl	L10403
 19459                        L754:
 19460 08:4BBF: E2 20        	sep	#$20
 19461                        	longa	off
 19462 08:4BC1: A5 36        	lda	<L750+dj_1+43
 19463 08:4BC3: 29 20        	and	#<$20
 19464 08:4BC5: C2 20        	rep	#$20
 19465                        	longa	on
 19466 08:4BC7: D0 03        	bne	L755
 19467 08:4BC9: 82 05 00     	brl	L10403
 19468                        L755:
 19469                        	.line	5119
 19470                        ;			res = FR_INVALID_NAME;
 19471                        	.line	5120
 19472 08:4BCC: A9 06 00     	lda	#$6
 19473 08:4BCF: 85 09        	sta	<L750+res_1
 19474                        ;		}
 19475                        	.line	5121
 19476                        ;		if (res == FR_NO_FILE) {		
                    		/* It is clear to create a new directory */
 19477                        L10403:
 19478                        	.line	5122
 19479 08:4BD1: A5 09        	lda	<L750+res_1
 19480 08:4BD3: C9 04 00     	cmp	#<$4
 19481 08:4BD6: F0 03        	beq	L756
 19482 08:4BD8: 82 EA 01     	brl	L10404
 19483                        L756:
 19484                        	.line	5122
 19485                        ;			sobj.fs = fs;			
                    			/* New object id to create a new chain *
                    /
 19486                        	.line	5123
 19487 08:4BDB: A5 47        	lda	<L750+fs_1
 19488 08:4BDD: 85 37        	sta	<L750+sobj_1
 19489 08:4BDF: A5 49        	lda	<L750+fs_1+2
 19490 08:4BE1: 85 39        	sta	<L750+sobj_1+2
 19491                        ;			dcl = create_chain(&sobj, 0);	
                    	/* Allocate a cluster for the new directory */
 19492                        	.line	5124
 19493 08:4BE3: F4 00 00     	pea	#^$0
 19494 08:4BE6: F4 00 00     	pea	#<$0
 19495 08:4BE9: F4 00 00     	pea	#0
 19496 08:4BEC: 18           	clc
 19497 08:4BED: 7B           	tdc
 19498 08:4BEE: 69 37 00     	adc	#<L750+sobj_1
 19499 08:4BF1: 48           	pha
  Thu Dec  3 2020 22:25                                                Page 382


 19500 08:4BF2: 22 CC 0D 08  	jsl	~~create_chain
 19501 08:4BF6: 85 4B        	sta	<L750+dcl_1
 19502 08:4BF8: 86 4D        	stx	<L750+dcl_1+2
 19503                        ;			res = FR_OK;
 19504                        	.line	5125
 19505 08:4BFA: 64 09        	stz	<L750+res_1
 19506                        ;			if (dcl == 0) res = FR_DENIED;	
                    	/* No space to allocate a new cluster? */
 19507                        	.line	5126
 19508 08:4BFC: A5 4B        	lda	<L750+dcl_1
 19509 08:4BFE: 05 4D        	ora	<L750+dcl_1+2
 19510 08:4C00: F0 03        	beq	L757
 19511 08:4C02: 82 05 00     	brl	L10405
 19512                        L757:
 19513                        	.line	5126
 19514 08:4C05: A9 07 00     	lda	#$7
 19515 08:4C08: 85 09        	sta	<L750+res_1
 19516                        ;			if (dcl == 1) res = FR_INT_ERR;	
                    	/* Any insanity? */
 19517                        L10405:
 19518                        	.line	5127
 19519 08:4C0A: A5 4B        	lda	<L750+dcl_1
 19520 08:4C0C: C9 01 00     	cmp	#<$1
 19521 08:4C0F: D0 05        	bne	L758
 19522 08:4C11: A5 4D        	lda	<L750+dcl_1+2
 19523 08:4C13: C9 00 00     	cmp	#^$1
 19524                        L758:
 19525 08:4C16: F0 03        	beq	L759
 19526 08:4C18: 82 05 00     	brl	L10406
 19527                        L759:
 19528                        	.line	5127
 19529 08:4C1B: A9 02 00     	lda	#$2
 19530 08:4C1E: 85 09        	sta	<L750+res_1
 19531                        ;			if (dcl == 0xFFFFFFFF) res = FR_
                    DISK_ERR;	/* Disk error? */
 19532                        L10406:
 19533                        	.line	5128
 19534 08:4C20: A5 4B        	lda	<L750+dcl_1
 19535 08:4C22: C9 FF FF     	cmp	#<$ffffffff
 19536 08:4C25: D0 05        	bne	L760
 19537 08:4C27: A5 4D        	lda	<L750+dcl_1+2
 19538 08:4C29: C9 FF FF     	cmp	#^$ffffffff
 19539                        L760:
 19540 08:4C2C: F0 03        	beq	L761
 19541 08:4C2E: 82 05 00     	brl	L10407
 19542                        L761:
 19543                        	.line	5128
 19544 08:4C31: A9 01 00     	lda	#$1
 19545 08:4C34: 85 09        	sta	<L750+res_1
 19546                        ;			tm = GET_FATTIME();
 19547                        L10407:
 19548                        	.line	5129
 19549 08:4C36: A9 00 00     	lda	#$0
 19550 08:4C39: 85 53        	sta	<L750+tm_1
 19551 08:4C3B: A9 21 4E     	lda	#$4e21
 19552 08:4C3E: 85 55        	sta	<L750+tm_1+2
 19553                        ;			if (res == FR_OK) {
 19554                        	.line	5130
  Thu Dec  3 2020 22:25                                                Page 383


 19555 08:4C40: A5 09        	lda	<L750+res_1
 19556 08:4C42: F0 03        	beq	L762
 19557 08:4C44: 82 0B 01     	brl	L10408
 19558                        L762:
 19559                        	.line	5130
 19560                        ;				res = dir_clear(fs, dcl)
                    ;		/* Clean up the new table */
 19561                        	.line	5131
 19562 08:4C47: D4 4D        	pei	<L750+dcl_1+2
 19563 08:4C49: D4 4B        	pei	<L750+dcl_1
 19564 08:4C4B: D4 49        	pei	<L750+fs_1+2
 19565 08:4C4D: D4 47        	pei	<L750+fs_1
 19566 08:4C4F: 22 E7 10 08  	jsl	~~dir_clear
 19567 08:4C53: 85 09        	sta	<L750+res_1
 19568                        ;				if (res == FR_OK) {
 19569                        	.line	5132
 19570 08:4C55: A5 09        	lda	<L750+res_1
 19571 08:4C57: F0 03        	beq	L763
 19572 08:4C59: 82 F6 00     	brl	L10409
 19573                        L763:
 19574                        	.line	5132
 19575                        ;					if (!FF_FS_EXFAT
                     || fs->fs_type != FS_EXFAT) {	/* Create dot entries (F
                    AT only) */
 19576                        	.line	5133
 19577 08:4C5C: 82 0D 00     	brl	L764
 19578 08:4C5F: E2 20        	sep	#$20
 19579                        	longa	off
 19580 08:4C61: A7 47        	lda	[<L750+fs_1]
 19581 08:4C63: C9 04        	cmp	#<$4
 19582 08:4C65: C2 20        	rep	#$20
 19583                        	longa	on
 19584 08:4C67: D0 03        	bne	L765
 19585 08:4C69: 82 D7 00     	brl	L10410
 19586                        L765:
 19587                        L764:
 19588                        	.line	5133
 19589                        ;						mem_set(
                    fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
 19590                        	.line	5134
 19591 08:4C6C: F4 0B 00     	pea	#<$b
 19592 08:4C6F: F4 20 00     	pea	#<$20
 19593 08:4C72: 18           	clc
 19594 08:4C73: A9 2F 00     	lda	#$2f
 19595 08:4C76: 65 47        	adc	<L750+fs_1
 19596 08:4C78: 85 01        	sta	<R0
 19597 08:4C7A: A9 00 00     	lda	#$0
 19598 08:4C7D: 65 49        	adc	<L750+fs_1+2
 19599 08:4C7F: 85 03        	sta	<R0+2
 19600 08:4C81: D4 03        	pei	<R0+2
 19601 08:4C83: D4 01        	pei	<R0
 19602 08:4C85: 22 DF 01 08  	jsl	~~mem_set
 19603                        ;						fs->win[
                    DIR_Name] = '.';
 19604                        	.line	5135
 19605 08:4C89: E2 20        	sep	#$20
 19606                        	longa	off
 19607 08:4C8B: A9 2E        	lda	#$2e
  Thu Dec  3 2020 22:25                                                Page 384


 19608 08:4C8D: A0 2F 00     	ldy	#$2f
 19609 08:4C90: 97 47        	sta	[<L750+fs_1],Y
 19610 08:4C92: C2 20        	rep	#$20
 19611                        	longa	on
 19612                        ;						fs->win[
                    DIR_Attr] = AM_DIR;
 19613                        	.line	5136
 19614 08:4C94: E2 20        	sep	#$20
 19615                        	longa	off
 19616 08:4C96: A9 10        	lda	#$10
 19617 08:4C98: A0 3A 00     	ldy	#$3a
 19618 08:4C9B: 97 47        	sta	[<L750+fs_1],Y
 19619 08:4C9D: C2 20        	rep	#$20
 19620                        	longa	on
 19621                        ;						st_dword
                    (fs->win + DIR_ModTime, tm);
 19622                        	.line	5137
 19623 08:4C9F: D4 55        	pei	<L750+tm_1+2
 19624 08:4CA1: D4 53        	pei	<L750+tm_1
 19625 08:4CA3: 18           	clc
 19626 08:4CA4: A9 45 00     	lda	#$45
 19627 08:4CA7: 65 47        	adc	<L750+fs_1
 19628 08:4CA9: 85 01        	sta	<R0
 19629 08:4CAB: A9 00 00     	lda	#$0
 19630 08:4CAE: 65 49        	adc	<L750+fs_1+2
 19631 08:4CB0: 85 03        	sta	<R0+2
 19632 08:4CB2: D4 03        	pei	<R0+2
 19633 08:4CB4: D4 01        	pei	<R0
 19634 08:4CB6: 22 16 01 08  	jsl	~~st_dword
 19635                        ;						st_clust
                    (fs, fs->win, dcl);
 19636                        	.line	5138
 19637 08:4CBA: D4 4D        	pei	<L750+dcl_1+2
 19638 08:4CBC: D4 4B        	pei	<L750+dcl_1
 19639 08:4CBE: 18           	clc
 19640 08:4CBF: A9 2F 00     	lda	#$2f
 19641 08:4CC2: 65 47        	adc	<L750+fs_1
 19642 08:4CC4: 85 01        	sta	<R0
 19643 08:4CC6: A9 00 00     	lda	#$0
 19644 08:4CC9: 65 49        	adc	<L750+fs_1+2
 19645 08:4CCB: 85 03        	sta	<R0+2
 19646 08:4CCD: D4 03        	pei	<R0+2
 19647 08:4CCF: D4 01        	pei	<R0
 19648 08:4CD1: D4 49        	pei	<L750+fs_1+2
 19649 08:4CD3: D4 47        	pei	<L750+fs_1
 19650 08:4CD5: 22 03 18 08  	jsl	~~st_clust
 19651                        ;						mem_cpy(
                    fs->win + SZDIRE, fs->win, SZDIRE); /* Create ".." entry */
 19652                        	.line	5139
 19653 08:4CD9: F4 20 00     	pea	#<$20
 19654 08:4CDC: 18           	clc
 19655 08:4CDD: A9 2F 00     	lda	#$2f
 19656 08:4CE0: 65 47        	adc	<L750+fs_1
 19657 08:4CE2: 85 01        	sta	<R0
 19658 08:4CE4: A9 00 00     	lda	#$0
 19659 08:4CE7: 65 49        	adc	<L750+fs_1+2
 19660 08:4CE9: 85 03        	sta	<R0+2
 19661 08:4CEB: D4 03        	pei	<R0+2
  Thu Dec  3 2020 22:25                                                Page 385


 19662 08:4CED: D4 01        	pei	<R0
 19663 08:4CEF: 18           	clc
 19664 08:4CF0: A9 4F 00     	lda	#$4f
 19665 08:4CF3: 65 47        	adc	<L750+fs_1
 19666 08:4CF5: 85 05        	sta	<R1
 19667 08:4CF7: A9 00 00     	lda	#$0
 19668 08:4CFA: 65 49        	adc	<L750+fs_1+2
 19669 08:4CFC: 85 07        	sta	<R1+2
 19670 08:4CFE: D4 07        	pei	<R1+2
 19671 08:4D00: D4 05        	pei	<R1
 19672 08:4D02: 22 93 01 08  	jsl	~~mem_cpy
 19673                        ;						fs->win[
                    SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 19674                        	.line	5140
 19675 08:4D06: E2 20        	sep	#$20
 19676                        	longa	off
 19677 08:4D08: A9 2E        	lda	#$2e
 19678 08:4D0A: A0 50 00     	ldy	#$50
 19679 08:4D0D: 97 47        	sta	[<L750+fs_1],Y
 19680 08:4D0F: C2 20        	rep	#$20
 19681                        	longa	on
 19682                        	.line	5140
 19683 08:4D11: A5 13        	lda	<L750+dj_1+8
 19684 08:4D13: 85 4F        	sta	<L750+pcl_1
 19685 08:4D15: A5 15        	lda	<L750+dj_1+10
 19686 08:4D17: 85 51        	sta	<L750+pcl_1+2
 19687                        ;						st_clust
                    (fs, fs->win + SZDIRE, pcl);
 19688                        	.line	5141
 19689 08:4D19: D4 51        	pei	<L750+pcl_1+2
 19690 08:4D1B: D4 4F        	pei	<L750+pcl_1
 19691 08:4D1D: 18           	clc
 19692 08:4D1E: A9 4F 00     	lda	#$4f
 19693 08:4D21: 65 47        	adc	<L750+fs_1
 19694 08:4D23: 85 01        	sta	<R0
 19695 08:4D25: A9 00 00     	lda	#$0
 19696 08:4D28: 65 49        	adc	<L750+fs_1+2
 19697 08:4D2A: 85 03        	sta	<R0+2
 19698 08:4D2C: D4 03        	pei	<R0+2
 19699 08:4D2E: D4 01        	pei	<R0
 19700 08:4D30: D4 49        	pei	<L750+fs_1+2
 19701 08:4D32: D4 47        	pei	<L750+fs_1
 19702 08:4D34: 22 03 18 08  	jsl	~~st_clust
 19703                        ;						fs->wfla
                    g = 1;
 19704                        	.line	5142
 19705 08:4D38: E2 20        	sep	#$20
 19706                        	longa	off
 19707 08:4D3A: A9 01        	lda	#$1
 19708 08:4D3C: A0 03 00     	ldy	#$3
 19709 08:4D3F: 97 47        	sta	[<L750+fs_1],Y
 19710 08:4D41: C2 20        	rep	#$20
 19711                        	longa	on
 19712                        ;					}
 19713                        	.line	5143
 19714                        ;					res = dir_regist
                    er(&dj);	/* Register the object to the parent directoy */
 19715                        L10410:
  Thu Dec  3 2020 22:25                                                Page 386


 19716                        	.line	5144
 19717 08:4D43: F4 00 00     	pea	#0
 19718 08:4D46: 18           	clc
 19719 08:4D47: 7B           	tdc
 19720 08:4D48: 69 0B 00     	adc	#<L750+dj_1
 19721 08:4D4B: 48           	pha
 19722 08:4D4C: 22 90 1A 08  	jsl	~~dir_register
 19723 08:4D50: 85 09        	sta	<L750+res_1
 19724                        ;				}
 19725                        	.line	5145
 19726                        ;			}
 19727                        L10409:
 19728                        	.line	5146
 19729                        ;			if (res == FR_OK) {
 19730                        L10408:
 19731                        	.line	5147
 19732 08:4D52: A5 09        	lda	<L750+res_1
 19733 08:4D54: F0 03        	beq	L766
 19734 08:4D56: 82 55 00     	brl	L10411
 19735                        L766:
 19736                        	.line	5147
 19737                        ;#if FF_FS_EXFAT
 19738                        ;				if (fs->fs_type == FS_EX
                    FAT) {	/* Initialize directory entry block */
 19739                        ;					st_dword(fs->dir
                    buf + XDIR_ModTime, tm);	/* Created time */
 19740                        ;					st_dword(fs->dir
                    buf + XDIR_FstClus, dcl);	/* Table start cluster */
 19741                        ;					st_dword(fs->dir
                    buf + XDIR_FileSize, (DWORD)fs->csize * SS(fs));	/* Direc
                    tory size needs to be valid */
 19742                        ;					st_dword(fs->dir
                    buf + XDIR_ValidFileSize, (DWORD)fs->csize * SS(fs));
 19743                        ;					fs->dirbuf[XDIR_
                    GenFlags] = 3;				/* Initialize th
                    e object flag */
 19744                        ;					fs->dirbuf[XDIR_
                    Attr] = AM_DIR;				/* Attribute */
 19745                        ;					res = store_xdir
                    (&dj);
 19746                        ;				} else
 19747                        ;#endif
 19748                        ;				{
 19749                        	.line	5159
 19750                        ;					st_dword(dj.dir 
                    + DIR_ModTime, tm);	/* Created time */
 19751                        	.line	5160
 19752 08:4D59: D4 55        	pei	<L750+tm_1+2
 19753 08:4D5B: D4 53        	pei	<L750+tm_1
 19754 08:4D5D: 18           	clc
 19755 08:4D5E: A9 16 00     	lda	#$16
 19756 08:4D61: 65 27        	adc	<L750+dj_1+28
 19757 08:4D63: 85 01        	sta	<R0
 19758 08:4D65: A9 00 00     	lda	#$0
 19759 08:4D68: 65 29        	adc	<L750+dj_1+30
 19760 08:4D6A: 85 03        	sta	<R0+2
 19761 08:4D6C: D4 03        	pei	<R0+2
 19762 08:4D6E: D4 01        	pei	<R0
  Thu Dec  3 2020 22:25                                                Page 387


 19763 08:4D70: 22 16 01 08  	jsl	~~st_dword
 19764                        ;					st_clust(fs, dj.
                    dir, dcl);			/* Table start cluster */
 19765                        	.line	5161
 19766 08:4D74: D4 4D        	pei	<L750+dcl_1+2
 19767 08:4D76: D4 4B        	pei	<L750+dcl_1
 19768 08:4D78: D4 29        	pei	<L750+dj_1+30
 19769 08:4D7A: D4 27        	pei	<L750+dj_1+28
 19770 08:4D7C: D4 49        	pei	<L750+fs_1+2
 19771 08:4D7E: D4 47        	pei	<L750+fs_1
 19772 08:4D80: 22 03 18 08  	jsl	~~st_clust
 19773                        ;					dj.dir[DIR_Attr]
                     = AM_DIR;			/* Attribute */
 19774                        	.line	5162
 19775 08:4D84: E2 20        	sep	#$20
 19776                        	longa	off
 19777 08:4D86: A9 10        	lda	#$10
 19778 08:4D88: A0 0B 00     	ldy	#$b
 19779 08:4D8B: 97 27        	sta	[<L750+dj_1+28],Y
 19780 08:4D8D: C2 20        	rep	#$20
 19781                        	longa	on
 19782                        ;					fs->wflag = 1;
 19783                        	.line	5163
 19784 08:4D8F: E2 20        	sep	#$20
 19785                        	longa	off
 19786 08:4D91: A9 01        	lda	#$1
 19787 08:4D93: A0 03 00     	ldy	#$3
 19788 08:4D96: 97 47        	sta	[<L750+fs_1],Y
 19789 08:4D98: C2 20        	rep	#$20
 19790                        	longa	on
 19791                        ;				}
 19792                        	.line	5164
 19793                        ;				if (res == FR_OK) {
 19794                        	.line	5165
 19795 08:4D9A: A5 09        	lda	<L750+res_1
 19796 08:4D9C: F0 03        	beq	L767
 19797 08:4D9E: 82 0A 00     	brl	L10412
 19798                        L767:
 19799                        	.line	5165
 19800                        ;					res = sync_fs(fs
                    );
 19801                        	.line	5166
 19802 08:4DA1: D4 49        	pei	<L750+fs_1+2
 19803 08:4DA3: D4 47        	pei	<L750+fs_1
 19804 08:4DA5: 22 85 04 08  	jsl	~~sync_fs
 19805 08:4DA9: 85 09        	sta	<L750+res_1
 19806                        ;				}
 19807                        	.line	5167
 19808                        ;			} else {
 19809                        L10412:
 19810                        	.line	5168
 19811 08:4DAB: 82 17 00     	brl	L10413
 19812                        L10411:
 19813                        	.line	5168
 19814                        ;				remove_chain(&sobj, dcl,
                     0);		/* Could not register, remove the alloca
                    ted cluster */
 19815                        	.line	5169
  Thu Dec  3 2020 22:25                                                Page 388


 19816 08:4DAE: F4 00 00     	pea	#^$0
 19817 08:4DB1: F4 00 00     	pea	#<$0
 19818 08:4DB4: D4 4D        	pei	<L750+dcl_1+2
 19819 08:4DB6: D4 4B        	pei	<L750+dcl_1
 19820 08:4DB8: F4 00 00     	pea	#0
 19821 08:4DBB: 18           	clc
 19822 08:4DBC: 7B           	tdc
 19823 08:4DBD: 69 37 00     	adc	#<L750+sobj_1
 19824 08:4DC0: 48           	pha
 19825 08:4DC1: 22 43 0C 08  	jsl	~~remove_chain
 19826                        ;			}
 19827                        	.line	5170
 19828                        L10413:
 19829                        ;		}
 19830                        	.line	5171
 19831                        ;		FREE_NAMBUF();
 19832                        L10404:
 19833                        	.line	5172
 19834                        ;	}
 19835                        	.line	5173
 19836                        ;
 19837                        ;	LEAVE_FF(fs, res);
 19838                        L10401:
 19839                        	.line	5175
 19840 08:4DC5: A5 09        	lda	<L750+res_1
 19841                        L768:
 19842 08:4DC7: A8           	tay
 19843 08:4DC8: A5 58        	lda	<L749+2
 19844 08:4DCA: 85 5C        	sta	<L749+2+4
 19845 08:4DCC: A5 57        	lda	<L749+1
 19846 08:4DCE: 85 5B        	sta	<L749+1+4
 19847 08:4DD0: 2B           	pld
 19848 08:4DD1: 3B           	tsc
 19849 08:4DD2: 18           	clc
 19850 08:4DD3: 69 5A 00     	adc	#L749+4
 19851 08:4DD6: 1B           	tcs
 19852 08:4DD7: 98           	tya
 19853 08:4DD8: 6B           	rtl
 19854                        ;}
 19855                        	.line	5176
 19856                        	.endblock	5176
 19857             00000056   L749	equ	86
 19858             00000009   L750	equ	9
 19859 08:4DD9:              	ends
 19860                        	efunc
 19861                        	.endfunc	5176,9,86
 19862                        	.line	5176
 19863                        ;
 19864                        ;
 19865                        ;
 19866                        ;
 19867                        ;/*-----------------------------------------------
                    ------------------------*/
 19868                        ;/* Rename a File/Directory                       
                                            */
 19869                        ;/*-----------------------------------------------
                    ------------------------*/
 19870                        ;
  Thu Dec  3 2020 22:25                                                Page 389


 19871                        ;FRESULT f_rename (
 19872                        ;	const TCHAR* path_old,	/* Pointer to the object
                     name to be renamed */
 19873                        ;	const TCHAR* path_new	/* Pointer to the new na
                    me */
 19874                        ;)
 19875                        ;{
 19876                        	.line	5185
 19877                        	.line	5189
 19878                        	FFDOS
 19879                        	xdef	~~f_rename
 19880                        	func
 19881                        	.function	5189
 19882                        ~~f_rename:
 19883                        	longa	on
 19884                        	longi	on
 19885 08:4DD9: 3B           	tsc
 19886 08:4DDA: 38           	sec
 19887 08:4DDB: E9 8A 00     	sbc	#L769
 19888 08:4DDE: 1B           	tcs
 19889 08:4DDF: 0B           	phd
 19890 08:4DE0: 5B           	tcd
 19891             00000004   path_old_0	set	4
 19892             00000008   path_new_0	set	8
 19893                        	.block	5189
 19894                        ;	FRESULT res;
 19895                        ;	DIR djo, djn;
 19896                        ;	FATFS *fs;
 19897                        ;	BYTE buf[FF_FS_EXFAT ? SZDIRE * 2 : SZDIRE], *di
                    r;
 19898                        ;	LBA_t sect;
 19899                        ;	DEF_NAMBUF
 19900                        ;
 19901                        ;
 19902                        ;	get_ldnumber(&path_new);			
                    			/* Snip the drive number of new name off
                     */
 19903             00000000   res_1	set	0
 19904             00000002   djo_1	set	2
 19905             0000002E   djn_1	set	46
 19906             0000005A   fs_1	set	90
 19907             0000005E   buf_1	set	94
 19908             0000007E   dir_1	set	126
 19909             00000082   sect_1	set	130
 19910                        	.sym	res,0,5,1,16
 19911                        	.sym	djo,2,10,1,352,83
 19912                        	.sym	djn,46,10,1,352,83
 19913                        	.sym	fs,90,138,1,32,80
 19914                        	.sym	buf,94,110,1,0,32
 19915                        	.sym	dir,126,142,1,32
 19916                        	.sym	sect,130,18,1,32
 19917                        	.sym	path_old,4,142,6,32
 19918                        	.sym	path_new,8,142,6,32
 19919                        	.line	5198
 19920 08:4DE1: F4 00 00     	pea	#0
 19921 08:4DE4: 18           	clc
 19922 08:4DE5: 7B           	tdc
 19923 08:4DE6: 69 92 00     	adc	#<L769+path_new_0
  Thu Dec  3 2020 22:25                                                Page 390


 19924 08:4DE9: 48           	pha
 19925 08:4DEA: 22 7B 20 08  	jsl	~~get_ldnumber
 19926                        ;	res = mount_volume(&path_old, &fs, FA_WRITE);	
                    /* Get logical drive of the old object */
 19927                        	.line	5199
 19928 08:4DEE: F4 02 00     	pea	#<$2
 19929 08:4DF1: F4 00 00     	pea	#0
 19930 08:4DF4: 18           	clc
 19931 08:4DF5: 7B           	tdc
 19932 08:4DF6: 69 5F 00     	adc	#<L770+fs_1
 19933 08:4DF9: 48           	pha
 19934 08:4DFA: F4 00 00     	pea	#0
 19935 08:4DFD: 18           	clc
 19936 08:4DFE: 7B           	tdc
 19937 08:4DFF: 69 8E 00     	adc	#<L769+path_old_0
 19938 08:4E02: 48           	pha
 19939 08:4E03: 22 E7 25 08  	jsl	~~mount_volume
 19940 08:4E07: 85 05        	sta	<L770+res_1
 19941                        ;	if (res == FR_OK) {
 19942                        	.line	5200
 19943 08:4E09: A5 05        	lda	<L770+res_1
 19944 08:4E0B: F0 03        	beq	L772
 19945 08:4E0D: 82 F8 01     	brl	L10414
 19946                        L772:
 19947                        	.line	5200
 19948                        ;		djo.obj.fs = fs;
 19949                        	.line	5201
 19950 08:4E10: A5 5F        	lda	<L770+fs_1
 19951 08:4E12: 85 07        	sta	<L770+djo_1
 19952 08:4E14: A5 61        	lda	<L770+fs_1+2
 19953 08:4E16: 85 09        	sta	<L770+djo_1+2
 19954                        ;		INIT_NAMBUF(fs);
 19955                        	.line	5202
 19956                        ;		res = follow_path(&djo, path_old);	
                    	/* Check old object */
 19957                        	.line	5203
 19958 08:4E18: D4 90        	pei	<L769+path_old_0+2
 19959 08:4E1A: D4 8E        	pei	<L769+path_old_0
 19960 08:4E1C: F4 00 00     	pea	#0
 19961 08:4E1F: 18           	clc
 19962 08:4E20: 7B           	tdc
 19963 08:4E21: 69 07 00     	adc	#<L770+djo_1
 19964 08:4E24: 48           	pha
 19965 08:4E25: 22 FC 1E 08  	jsl	~~follow_path
 19966 08:4E29: 85 05        	sta	<L770+res_1
 19967                        ;		if (res == FR_OK && (djo.fn[NSFLAG] & (N
                    S_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validit
                    y of name */
 19968                        	.line	5204
 19969 08:4E2B: A5 05        	lda	<L770+res_1
 19970 08:4E2D: F0 03        	beq	L773
 19971 08:4E2F: 82 12 00     	brl	L10415
 19972                        L773:
 19973 08:4E32: E2 20        	sep	#$20
 19974                        	longa	off
 19975 08:4E34: A5 32        	lda	<L770+djo_1+43
 19976 08:4E36: 29 A0        	and	#<$a0
 19977 08:4E38: C2 20        	rep	#$20
  Thu Dec  3 2020 22:25                                                Page 391


 19978                        	longa	on
 19979 08:4E3A: D0 03        	bne	L774
 19980 08:4E3C: 82 05 00     	brl	L10415
 19981                        L774:
 19982                        	.line	5204
 19983 08:4E3F: A9 06 00     	lda	#$6
 19984 08:4E42: 85 05        	sta	<L770+res_1
 19985                        ;#if FF_FS_LOCK != 0
 19986                        ;		if (res == FR_OK) {
 19987                        ;			res = chk_lock(&djo, 2);
 19988                        ;		}
 19989                        ;#endif
 19990                        ;		if (res == FR_OK) {			
                    			/* Object to be renamed is found */
 19991                        L10415:
 19992                        	.line	5210
 19993 08:4E44: A5 05        	lda	<L770+res_1
 19994 08:4E46: F0 03        	beq	L775
 19995 08:4E48: 82 BD 01     	brl	L10416
 19996                        L775:
 19997                        	.line	5210
 19998                        ;#if FF_FS_EXFAT
 19999                        ;			if (fs->fs_type == FS_EXFAT) {	
                    /* At exFAT volume */
 20000                        ;				BYTE nf, nn;
 20001                        ;				WORD nh;
 20002                        ;
 20003                        ;				mem_cpy(buf, fs->dirbuf,
                     SZDIRE * 2);	/* Save 85+C0 entry of old object */
 20004                        ;				mem_cpy(&djn, &djo, size
                    of djo);
 20005                        ;				res = follow_path(&djn, 
                    path_new);		/* Make sure if new object name is not i
                    n use */
 20006                        ;				if (res == FR_OK) {	
                    					/* Is new name already i
                    n use by any other object? */
 20007                        ;					res = (djn.obj.s
                    clust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FIL
                    E : FR_EXIST;
 20008                        ;				}
 20009                        ;				if (res == FR_NO_FILE) {
                     				/* It is a valid path and no nam
                    e collision */
 20010                        ;					res = dir_regist
                    er(&djn);			/* Register the new entry */
 20011                        ;					if (res == FR_OK
                    ) {
 20012                        ;						nf = fs-
                    >dirbuf[XDIR_NumSec]; nn = fs->dirbuf[XDIR_NumName];
 20013                        ;						nh = ld_
                    word(fs->dirbuf + XDIR_NameHash);
 20014                        ;						mem_cpy(
                    fs->dirbuf, buf, SZDIRE * 2);	/* Restore 85+C0 entry *
                    /
 20015                        ;						fs->dirb
                    uf[XDIR_NumSec] = nf; fs->dirbuf[XDIR_NumName] = nn;
 20016                        ;						st_word(
  Thu Dec  3 2020 22:25                                                Page 392


                    fs->dirbuf + XDIR_NameHash, nh);
 20017                        ;						if (!(fs
                    ->dirbuf[XDIR_Attr] & AM_DIR)) fs->dirbuf[XDIR_Attr] |= AM_A
                    RC;	/* Set archive attribute if it is a file */
 20018                        ;/* Start of critical section where an interruptio
                    n can cause a cross-link */
 20019                        ;						res = st
                    ore_xdir(&djn);
 20020                        ;					}
 20021                        ;				}
 20022                        ;			} else
 20023                        ;#endif
 20024                        ;			{	/* At FAT/FAT32 volume *
                    /
 20025                        	.line	5237
 20026                        ;				mem_cpy(buf, djo.dir, SZ
                    DIRE);			/* Save directory entry of the o
                    bject */
 20027                        	.line	5238
 20028 08:4E4B: F4 20 00     	pea	#<$20
 20029 08:4E4E: D4 25        	pei	<L770+djo_1+30
 20030 08:4E50: D4 23        	pei	<L770+djo_1+28
 20031 08:4E52: F4 00 00     	pea	#0
 20032 08:4E55: 18           	clc
 20033 08:4E56: 7B           	tdc
 20034 08:4E57: 69 63 00     	adc	#<L770+buf_1
 20035 08:4E5A: 48           	pha
 20036 08:4E5B: 22 93 01 08  	jsl	~~mem_cpy
 20037                        ;				mem_cpy(&djn, &djo, size
                    of (DIR));		/* Duplicate the directory object */
 20038                        	.line	5239
 20039 08:4E5F: F4 2C 00     	pea	#<$2c
 20040 08:4E62: F4 00 00     	pea	#0
 20041 08:4E65: 18           	clc
 20042 08:4E66: 7B           	tdc
 20043 08:4E67: 69 07 00     	adc	#<L770+djo_1
 20044 08:4E6A: 48           	pha
 20045 08:4E6B: F4 00 00     	pea	#0
 20046 08:4E6E: 18           	clc
 20047 08:4E6F: 7B           	tdc
 20048 08:4E70: 69 33 00     	adc	#<L770+djn_1
 20049 08:4E73: 48           	pha
 20050 08:4E74: 22 93 01 08  	jsl	~~mem_cpy
 20051                        ;				res = follow_path(&djn, 
                    path_new);		/* Make sure if new object name is not i
                    n use */
 20052                        	.line	5240
 20053 08:4E78: D4 94        	pei	<L769+path_new_0+2
 20054 08:4E7A: D4 92        	pei	<L769+path_new_0
 20055 08:4E7C: F4 00 00     	pea	#0
 20056 08:4E7F: 18           	clc
 20057 08:4E80: 7B           	tdc
 20058 08:4E81: 69 33 00     	adc	#<L770+djn_1
 20059 08:4E84: 48           	pha
 20060 08:4E85: 22 FC 1E 08  	jsl	~~follow_path
 20061 08:4E89: 85 05        	sta	<L770+res_1
 20062                        ;				if (res == FR_OK) {	
                    					/* Is new name already i
  Thu Dec  3 2020 22:25                                                Page 393


                    n use by any other object? */
 20063                        	.line	5241
 20064 08:4E8B: A5 05        	lda	<L770+res_1
 20065 08:4E8D: F0 03        	beq	L776
 20066 08:4E8F: 82 28 00     	brl	L10417
 20067                        L776:
 20068                        	.line	5241
 20069                        ;					res = (djn.obj.s
                    clust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FIL
                    E : FR_EXIST;
 20070                        	.line	5242
 20071 08:4E92: A5 3B        	lda	<L770+djn_1+8
 20072 08:4E94: C5 0F        	cmp	<L770+djo_1+8
 20073 08:4E96: D0 04        	bne	L778
 20074 08:4E98: A5 3D        	lda	<L770+djn_1+10
 20075 08:4E9A: C5 11        	cmp	<L770+djo_1+10
 20076                        L778:
 20077 08:4E9C: F0 03        	beq	L779
 20078 08:4E9E: 82 14 00     	brl	L777
 20079                        L779:
 20080 08:4EA1: A5 43        	lda	<L770+djn_1+16
 20081 08:4EA3: C5 17        	cmp	<L770+djo_1+16
 20082 08:4EA5: D0 04        	bne	L780
 20083 08:4EA7: A5 45        	lda	<L770+djn_1+18
 20084 08:4EA9: C5 19        	cmp	<L770+djo_1+18
 20085                        L780:
 20086 08:4EAB: F0 03        	beq	L781
 20087 08:4EAD: 82 05 00     	brl	L777
 20088                        L781:
 20089 08:4EB0: A9 04 00     	lda	#$4
 20090 08:4EB3: 80 03        	bra	L782
 20091                        L777:
 20092 08:4EB5: A9 08 00     	lda	#$8
 20093                        L782:
 20094 08:4EB8: 85 05        	sta	<L770+res_1
 20095                        ;				}
 20096                        	.line	5243
 20097                        ;				if (res == FR_NO_FILE) {
                     				/* It is a valid path and no nam
                    e collision */
 20098                        L10417:
 20099                        	.line	5244
 20100 08:4EBA: A5 05        	lda	<L770+res_1
 20101 08:4EBC: C9 04 00     	cmp	#<$4
 20102 08:4EBF: F0 03        	beq	L783
 20103 08:4EC1: 82 1D 01     	brl	L10418
 20104                        L783:
 20105                        	.line	5244
 20106                        ;					res = dir_regist
                    er(&djn);			/* Register the new entry */
 20107                        	.line	5245
 20108 08:4EC4: F4 00 00     	pea	#0
 20109 08:4EC7: 18           	clc
 20110 08:4EC8: 7B           	tdc
 20111 08:4EC9: 69 33 00     	adc	#<L770+djn_1
 20112 08:4ECC: 48           	pha
 20113 08:4ECD: 22 90 1A 08  	jsl	~~dir_register
 20114 08:4ED1: 85 05        	sta	<L770+res_1
  Thu Dec  3 2020 22:25                                                Page 394


 20115                        ;					if (res == FR_OK
                    ) {
 20116                        	.line	5246
 20117 08:4ED3: A5 05        	lda	<L770+res_1
 20118 08:4ED5: F0 03        	beq	L784
 20119 08:4ED7: 82 07 01     	brl	L10419
 20120                        L784:
 20121                        	.line	5246
 20122                        ;						dir = dj
                    n.dir;					/* Copy director
                    y entry of the object except name */
 20123                        	.line	5247
 20124 08:4EDA: A5 4F        	lda	<L770+djn_1+28
 20125 08:4EDC: 85 83        	sta	<L770+dir_1
 20126 08:4EDE: A5 51        	lda	<L770+djn_1+30
 20127 08:4EE0: 85 85        	sta	<L770+dir_1+2
 20128                        ;						mem_cpy(
                    dir + 13, buf + 13, SZDIRE - 13);
 20129                        	.line	5248
 20130 08:4EE2: F4 13 00     	pea	#<$13
 20131 08:4EE5: F4 00 00     	pea	#0
 20132 08:4EE8: 18           	clc
 20133 08:4EE9: 7B           	tdc
 20134 08:4EEA: 69 70 00     	adc	#<L770+buf_1+13
 20135 08:4EED: 48           	pha
 20136 08:4EEE: 18           	clc
 20137 08:4EEF: A9 0D 00     	lda	#$d
 20138 08:4EF2: 65 83        	adc	<L770+dir_1
 20139 08:4EF4: 85 01        	sta	<R0
 20140 08:4EF6: A9 00 00     	lda	#$0
 20141 08:4EF9: 65 85        	adc	<L770+dir_1+2
 20142 08:4EFB: 85 03        	sta	<R0+2
 20143 08:4EFD: D4 03        	pei	<R0+2
 20144 08:4EFF: D4 01        	pei	<R0
 20145 08:4F01: 22 93 01 08  	jsl	~~mem_cpy
 20146                        ;						dir[DIR_
                    Attr] = buf[DIR_Attr];
 20147                        	.line	5249
 20148 08:4F05: E2 20        	sep	#$20
 20149                        	longa	off
 20150 08:4F07: A5 6E        	lda	<L770+buf_1+11
 20151 08:4F09: A0 0B 00     	ldy	#$b
 20152 08:4F0C: 97 83        	sta	[<L770+dir_1],Y
 20153 08:4F0E: C2 20        	rep	#$20
 20154                        	longa	on
 20155                        ;						if (!(di
                    r[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set a
                    rchive attribute if it is a file */
 20156                        	.line	5250
 20157 08:4F10: E2 20        	sep	#$20
 20158                        	longa	off
 20159 08:4F12: A0 0B 00     	ldy	#$b
 20160 08:4F15: B7 83        	lda	[<L770+dir_1],Y
 20161 08:4F17: 29 10        	and	#<$10
 20162 08:4F19: C2 20        	rep	#$20
 20163                        	longa	on
 20164 08:4F1B: F0 03        	beq	L785
 20165 08:4F1D: 82 19 00     	brl	L10420
  Thu Dec  3 2020 22:25                                                Page 395


 20166                        L785:
 20167                        	.line	5250
 20168 08:4F20: 18           	clc
 20169 08:4F21: A9 0B 00     	lda	#$b
 20170 08:4F24: 65 83        	adc	<L770+dir_1
 20171 08:4F26: 85 01        	sta	<R0
 20172 08:4F28: A9 00 00     	lda	#$0
 20173 08:4F2B: 65 85        	adc	<L770+dir_1+2
 20174 08:4F2D: 85 03        	sta	<R0+2
 20175 08:4F2F: E2 20        	sep	#$20
 20176                        	longa	off
 20177 08:4F31: A7 01        	lda	[<R0]
 20178 08:4F33: 09 20        	ora	#<$20
 20179 08:4F35: 87 01        	sta	[<R0]
 20180 08:4F37: C2 20        	rep	#$20
 20181                        	longa	on
 20182                        ;						fs->wfla
                    g = 1;
 20183                        L10420:
 20184                        	.line	5251
 20185 08:4F39: E2 20        	sep	#$20
 20186                        	longa	off
 20187 08:4F3B: A9 01        	lda	#$1
 20188 08:4F3D: A0 03 00     	ldy	#$3
 20189 08:4F40: 97 5F        	sta	[<L770+fs_1],Y
 20190 08:4F42: C2 20        	rep	#$20
 20191                        	longa	on
 20192                        ;						if ((dir
                    [DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	
                    /* Update .. entry in the sub-directory if needed */
 20193                        	.line	5252
 20194 08:4F44: E2 20        	sep	#$20
 20195                        	longa	off
 20196 08:4F46: A0 0B 00     	ldy	#$b
 20197 08:4F49: B7 83        	lda	[<L770+dir_1],Y
 20198 08:4F4B: 29 10        	and	#<$10
 20199 08:4F4D: C2 20        	rep	#$20
 20200                        	longa	on
 20201 08:4F4F: D0 03        	bne	L786
 20202 08:4F51: 82 8D 00     	brl	L10421
 20203                        L786:
 20204 08:4F54: A5 0F        	lda	<L770+djo_1+8
 20205 08:4F56: C5 3B        	cmp	<L770+djn_1+8
 20206 08:4F58: D0 04        	bne	L787
 20207 08:4F5A: A5 11        	lda	<L770+djo_1+10
 20208 08:4F5C: C5 3D        	cmp	<L770+djn_1+10
 20209                        L787:
 20210 08:4F5E: D0 03        	bne	L788
 20211 08:4F60: 82 7E 00     	brl	L10421
 20212                        L788:
 20213                        	.line	5252
 20214                        ;							
                    sect = clst2sect(fs, ld_clust(fs, dir));
 20215                        	.line	5253
 20216 08:4F63: D4 85        	pei	<L770+dir_1+2
 20217 08:4F65: D4 83        	pei	<L770+dir_1
 20218 08:4F67: D4 61        	pei	<L770+fs_1+2
 20219 08:4F69: D4 5F        	pei	<L770+fs_1
  Thu Dec  3 2020 22:25                                                Page 396


 20220 08:4F6B: 22 73 17 08  	jsl	~~ld_clust
 20221 08:4F6F: 85 01        	sta	<R0
 20222 08:4F71: 86 03        	stx	<R0+2
 20223 08:4F73: DA           	phx
 20224 08:4F74: 48           	pha
 20225 08:4F75: D4 61        	pei	<L770+fs_1+2
 20226 08:4F77: D4 5F        	pei	<L770+fs_1
 20227 08:4F79: 22 FE 05 08  	jsl	~~clst2sect
 20228 08:4F7D: 85 87        	sta	<L770+sect_1
 20229 08:4F7F: 86 89        	stx	<L770+sect_1+2
 20230                        ;							
                    if (sect == 0) {
 20231                        	.line	5254
 20232 08:4F81: A5 87        	lda	<L770+sect_1
 20233 08:4F83: 05 89        	ora	<L770+sect_1+2
 20234 08:4F85: F0 03        	beq	L789
 20235 08:4F87: 82 08 00     	brl	L10422
 20236                        L789:
 20237                        	.line	5254
 20238                        ;							
                    	res = FR_INT_ERR;
 20239                        	.line	5255
 20240 08:4F8A: A9 02 00     	lda	#$2
 20241 08:4F8D: 85 05        	sta	<L770+res_1
 20242                        ;							
                    } else {
 20243                        	.line	5256
 20244 08:4F8F: 82 4F 00     	brl	L10423
 20245                        L10422:
 20246                        	.line	5256
 20247                        ;/* Start of critical section where an interruptio
                    n can cause a cross-link */
 20248                        ;							
                    	res = move_window(fs, sect);
 20249                        	.line	5258
 20250 08:4F92: D4 89        	pei	<L770+sect_1+2
 20251 08:4F94: D4 87        	pei	<L770+sect_1
 20252 08:4F96: D4 61        	pei	<L770+fs_1+2
 20253 08:4F98: D4 5F        	pei	<L770+fs_1
 20254 08:4F9A: 22 FA 03 08  	jsl	~~move_window
 20255 08:4F9E: 85 05        	sta	<L770+res_1
 20256                        ;							
                    	dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
 20257                        	.line	5259
 20258 08:4FA0: 18           	clc
 20259 08:4FA1: A9 4F 00     	lda	#$4f
 20260 08:4FA4: 65 5F        	adc	<L770+fs_1
 20261 08:4FA6: 85 83        	sta	<L770+dir_1
 20262 08:4FA8: A9 00 00     	lda	#$0
 20263 08:4FAB: 65 61        	adc	<L770+fs_1+2
 20264 08:4FAD: 85 85        	sta	<L770+dir_1+2
 20265                        ;							
                    	if (res == FR_OK && dir[1] == '.') {
 20266                        	.line	5260
 20267 08:4FAF: A5 05        	lda	<L770+res_1
 20268 08:4FB1: F0 03        	beq	L790
 20269 08:4FB3: 82 2B 00     	brl	L10424
 20270                        L790:
  Thu Dec  3 2020 22:25                                                Page 397


 20271 08:4FB6: E2 20        	sep	#$20
 20272                        	longa	off
 20273 08:4FB8: A0 01 00     	ldy	#$1
 20274 08:4FBB: B7 83        	lda	[<L770+dir_1],Y
 20275 08:4FBD: C9 2E        	cmp	#<$2e
 20276 08:4FBF: C2 20        	rep	#$20
 20277                        	longa	on
 20278 08:4FC1: F0 03        	beq	L791
 20279 08:4FC3: 82 1B 00     	brl	L10424
 20280                        L791:
 20281                        	.line	5260
 20282                        ;							
                    		st_clust(fs, dir, djn.obj.sclust);
 20283                        	.line	5261
 20284 08:4FC6: D4 3D        	pei	<L770+djn_1+10
 20285 08:4FC8: D4 3B        	pei	<L770+djn_1+8
 20286 08:4FCA: D4 85        	pei	<L770+dir_1+2
 20287 08:4FCC: D4 83        	pei	<L770+dir_1
 20288 08:4FCE: D4 61        	pei	<L770+fs_1+2
 20289 08:4FD0: D4 5F        	pei	<L770+fs_1
 20290 08:4FD2: 22 03 18 08  	jsl	~~st_clust
 20291                        ;							
                    		fs->wflag = 1;
 20292                        	.line	5262
 20293 08:4FD6: E2 20        	sep	#$20
 20294                        	longa	off
 20295 08:4FD8: A9 01        	lda	#$1
 20296 08:4FDA: A0 03 00     	ldy	#$3
 20297 08:4FDD: 97 5F        	sta	[<L770+fs_1],Y
 20298 08:4FDF: C2 20        	rep	#$20
 20299                        	longa	on
 20300                        ;							
                    	}
 20301                        	.line	5263
 20302                        ;							
                    }
 20303                        L10424:
 20304                        	.line	5264
 20305                        L10423:
 20306                        ;						}
 20307                        	.line	5265
 20308                        ;					}
 20309                        L10421:
 20310                        	.line	5266
 20311                        ;				}
 20312                        L10419:
 20313                        	.line	5267
 20314                        ;			}
 20315                        L10418:
 20316                        	.line	5268
 20317                        ;			if (res == FR_OK) {
 20318                        	.line	5269
 20319 08:4FE1: A5 05        	lda	<L770+res_1
 20320 08:4FE3: F0 03        	beq	L792
 20321 08:4FE5: 82 20 00     	brl	L10425
 20322                        L792:
 20323                        	.line	5269
 20324                        ;				res = dir_remove(&djo);	
  Thu Dec  3 2020 22:25                                                Page 398


                    	/* Remove old entry */
 20325                        	.line	5270
 20326 08:4FE8: F4 00 00     	pea	#0
 20327 08:4FEB: 18           	clc
 20328 08:4FEC: 7B           	tdc
 20329 08:4FED: 69 07 00     	adc	#<L770+djo_1
 20330 08:4FF0: 48           	pha
 20331 08:4FF1: 22 2F 1B 08  	jsl	~~dir_remove
 20332 08:4FF5: 85 05        	sta	<L770+res_1
 20333                        ;				if (res == FR_OK) {
 20334                        	.line	5271
 20335 08:4FF7: A5 05        	lda	<L770+res_1
 20336 08:4FF9: F0 03        	beq	L793
 20337 08:4FFB: 82 0A 00     	brl	L10426
 20338                        L793:
 20339                        	.line	5271
 20340                        ;					res = sync_fs(fs
                    );
 20341                        	.line	5272
 20342 08:4FFE: D4 61        	pei	<L770+fs_1+2
 20343 08:5000: D4 5F        	pei	<L770+fs_1
 20344 08:5002: 22 85 04 08  	jsl	~~sync_fs
 20345 08:5006: 85 05        	sta	<L770+res_1
 20346                        ;				}
 20347                        	.line	5273
 20348                        ;			}
 20349                        L10426:
 20350                        	.line	5274
 20351                        ;/* End of the critical section */
 20352                        ;		}
 20353                        L10425:
 20354                        	.line	5276
 20355                        ;		FREE_NAMBUF();
 20356                        L10416:
 20357                        	.line	5277
 20358                        ;	}
 20359                        	.line	5278
 20360                        ;
 20361                        ;	LEAVE_FF(fs, res);
 20362                        L10414:
 20363                        	.line	5280
 20364 08:5008: A5 05        	lda	<L770+res_1
 20365                        L794:
 20366 08:500A: A8           	tay
 20367 08:500B: A5 8C        	lda	<L769+2
 20368 08:500D: 85 94        	sta	<L769+2+8
 20369 08:500F: A5 8B        	lda	<L769+1
 20370 08:5011: 85 93        	sta	<L769+1+8
 20371 08:5013: 2B           	pld
 20372 08:5014: 3B           	tsc
 20373 08:5015: 18           	clc
 20374 08:5016: 69 92 00     	adc	#L769+8
 20375 08:5019: 1B           	tcs
 20376 08:501A: 98           	tya
 20377 08:501B: 6B           	rtl
 20378                        ;}
 20379                        	.line	5281
 20380                        	.endblock	5281
  Thu Dec  3 2020 22:25                                                Page 399


 20381             0000008A   L769	equ	138
 20382             00000005   L770	equ	5
 20383 08:501C:              	ends
 20384                        	efunc
 20385                        	.endfunc	5281,5,138
 20386                        	.line	5281
 20387                        ;
 20388                        ;#endif /* !FF_FS_READONLY */
 20389                        ;#endif /* FF_FS_MINIMIZE == 0 */
 20390                        ;#endif /* FF_FS_MINIMIZE <= 1 */
 20391                        ;#endif /* FF_FS_MINIMIZE <= 2 */
 20392                        ;
 20393                        ;
 20394                        ;
 20395                        ;#if FF_USE_CHMOD && !FF_FS_READONLY
 20396                        ;/*-----------------------------------------------
                    ------------------------*/
 20397                        ;/* Change Attribute                              
                                            */
 20398                        ;/*-----------------------------------------------
                    ------------------------*/
 20399                        ;
 20400                        ;FRESULT f_chmod (
 20401                        ;	const TCHAR* path,	/* Pointer to the file p
                    ath */
 20402                        ;	BYTE attr,			/* Attribute bit
                    s */
 20403                        ;	BYTE mask			/* Attribute mas
                    k to change */
 20404                        ;)
 20405                        ;{
 20406                        ;	FRESULT res;
 20407                        ;	DIR dj;
 20408                        ;	FATFS *fs;
 20409                        ;	DEF_NAMBUF
 20410                        ;
 20411                        ;
 20412                        ;	res = mount_volume(&path, &fs, FA_WRITE);	
                    /* Get logical drive */
 20413                        ;	if (res == FR_OK) {
 20414                        ;		dj.obj.fs = fs;
 20415                        ;		INIT_NAMBUF(fs);
 20416                        ;		res = follow_path(&dj, path);	/* Follo
                    w the file path */
 20417                        ;		if (res == FR_OK && (dj.fn[NSFLAG] & (NS
                    _DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object 
                    validity */
 20418                        ;		if (res == FR_OK) {
 20419                        ;			mask &= AM_RDO|AM_HID|AM_SYS|AM_
                    ARC;	/* Valid attribute mask */
 20420                        ;#if FF_FS_EXFAT
 20421                        ;			if (fs->fs_type == FS_EXFAT) {
 20422                        ;				fs->dirbuf[XDIR_Attr] = 
                    (attr & mask) | (fs->dirbuf[XDIR_Attr] & (BYTE)~mask);	
                    /* Apply attribute change */
 20423                        ;				res = store_xdir(&dj);
 20424                        ;			} else
 20425                        ;#endif
  Thu Dec  3 2020 22:25                                                Page 400


 20426                        ;			{
 20427                        ;				dj.dir[DIR_Attr] = (attr
                     & mask) | (dj.dir[DIR_Attr] & (BYTE)~mask);	/* Apply
                     attribute change */
 20428                        ;				fs->wflag = 1;
 20429                        ;			}
 20430                        ;			if (res == FR_OK) {
 20431                        ;				res = sync_fs(fs);
 20432                        ;			}
 20433                        ;		}
 20434                        ;		FREE_NAMBUF();
 20435                        ;	}
 20436                        ;
 20437                        ;	LEAVE_FF(fs, res);
 20438                        ;}
 20439                        ;
 20440                        ;
 20441                        ;
 20442                        ;
 20443                        ;/*-----------------------------------------------
                    ------------------------*/
 20444                        ;/* Change Timestamp                              
                                            */
 20445                        ;/*-----------------------------------------------
                    ------------------------*/
 20446                        ;
 20447                        ;FRESULT f_utime (
 20448                        ;	const TCHAR* path,	/* Pointer to the file/d
                    irectory name */
 20449                        ;	const FILINFO* fno	/* Pointer to the timest
                    amp to be set */
 20450                        ;)
 20451                        ;{
 20452                        ;	FRESULT res;
 20453                        ;	DIR dj;
 20454                        ;	FATFS *fs;
 20455                        ;	DEF_NAMBUF
 20456                        ;
 20457                        ;
 20458                        ;	res = mount_volume(&path, &fs, FA_WRITE);	
                    /* Get logical drive */
 20459                        ;	if (res == FR_OK) {
 20460                        ;		dj.obj.fs = fs;
 20461                        ;		INIT_NAMBUF(fs);
 20462                        ;		res = follow_path(&dj, path);	/* Follo
                    w the file path */
 20463                        ;		if (res == FR_OK && (dj.fn[NSFLAG] & (NS
                    _DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object 
                    validity */
 20464                        ;		if (res == FR_OK) {
 20465                        ;#if FF_FS_EXFAT
 20466                        ;			if (fs->fs_type == FS_EXFAT) {
 20467                        ;				st_dword(fs->dirbuf + XD
                    IR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
 20468                        ;				res = store_xdir(&dj);
 20469                        ;			} else
 20470                        ;#endif
 20471                        ;			{
  Thu Dec  3 2020 22:25                                                Page 401


 20472                        ;				st_dword(dj.dir + DIR_Mo
                    dTime, (DWORD)fno->fdate << 16 | fno->ftime);
 20473                        ;				fs->wflag = 1;
 20474                        ;			}
 20475                        ;			if (res == FR_OK) {
 20476                        ;				res = sync_fs(fs);
 20477                        ;			}
 20478                        ;		}
 20479                        ;		FREE_NAMBUF();
 20480                        ;	}
 20481                        ;
 20482                        ;	LEAVE_FF(fs, res);
 20483                        ;}
 20484                        ;
 20485                        ;#endif	/* FF_USE_CHMOD && !FF_FS_READONLY */
 20486                        ;
 20487                        ;
 20488                        ;
 20489                        ;#if FF_USE_LABEL
 20490                        ;/*-----------------------------------------------
                    ------------------------*/
 20491                        ;/* Get Volume Label                              
                                            */
 20492                        ;/*-----------------------------------------------
                    ------------------------*/
 20493                        ;
 20494                        ;FRESULT f_getlabel (
 20495                        ;	const TCHAR* path,	/* Logical drive number 
                    */
 20496                        ;	TCHAR* label,		/* Buffer to store the v
                    olume label */
 20497                        ;	DWORD* vsn			/* Variable to s
                    tore the volume serial number */
 20498                        ;)
 20499                        ;{
 20500                        ;	FRESULT res;
 20501                        ;	DIR dj;
 20502                        ;	FATFS *fs;
 20503                        ;	UINT si, di;
 20504                        ;	WCHAR wc;
 20505                        ;
 20506                        ;	/* Get logical drive */
 20507                        ;	res = mount_volume(&path, &fs, 0);
 20508                        ;
 20509                        ;	/* Get volume label */
 20510                        ;	if (res == FR_OK && label) {
 20511                        ;		dj.obj.fs = fs; dj.obj.sclust = 0;	
                    /* Open root directory */
 20512                        ;		res = dir_sdi(&dj, 0);
 20513                        ;		if (res == FR_OK) {
 20514                        ;		 	res = DIR_READ_LABEL(&dj);	
                    	/* Find a volume label entry */
 20515                        ;		 	if (res == FR_OK) {
 20516                        ;#if FF_FS_EXFAT
 20517                        ;				if (fs->fs_type == FS_EX
                    FAT) {
 20518                        ;					WCHAR hs;
 20519                        ;
  Thu Dec  3 2020 22:25                                                Page 402


 20520                        ;					for (si = di = h
                    s = 0; si < dj.dir[XDIR_NumLabel]; si++) {	/* Extract volum
                    e label from 83 entry */
 20521                        ;						wc = ld_
                    word(dj.dir + XDIR_Label + si * 2);
 20522                        ;						if (hs =
                    = 0 && IsSurrogate(wc)) {	/* Is the code a surrogate? */
 20523                        ;							
                    hs = wc; continue;
 20524                        ;						}
 20525                        ;						wc = put
                    _utf((DWORD)hs << 16 | wc, &label[di], 4);
 20526                        ;						if (wc =
                    = 0) { di = 0; break; }
 20527                        ;						di += wc
                    ;
 20528                        ;						hs = 0;
 20529                        ;					}
 20530                        ;					if (hs != 0) di 
                    = 0;	/* Broken surrogate pair? */
 20531                        ;					label[di] = 0;
 20532                        ;				} else
 20533                        ;#endif
 20534                        ;				{
 20535                        ;					si = di = 0;	
                    	/* Extract volume label from AM_VOL entry */
 20536                        ;					while (si < 11) 
                    {
 20537                        ;						wc = dj.
                    dir[si++];
 20538                        ;#if FF_USE_LFN && FF_LFN_UNICODE >= 1 	/* Unico
                    de output */
 20539                        ;						if (dbc_
                    1st((BYTE)wc) && si < 11) wc = wc << 8 | dj.dir[si++];	
                    /* Is it a DBC? */
 20540                        ;						wc = ff_
                    oem2uni(wc, CODEPAGE);					
                    /* Convert it into Unicode */
 20541                        ;						if (wc !
                    = 0) wc = put_utf(wc, &label[di], 4);	/* Put it in Uni
                    code */
 20542                        ;						if (wc =
                    = 0) { di = 0; break; }
 20543                        ;						di += wc
                    ;
 20544                        ;#else						
                    			/* ANSI/OEM output */
 20545                        ;						label[di
                    ++] = (TCHAR)wc;
 20546                        ;#endif
 20547                        ;					}
 20548                        ;					do {		
                    		/* Truncate trailing spaces */
 20549                        ;						label[di
                    ] = 0;
 20550                        ;						if (di =
                    = 0) break;
 20551                        ;					} while (label[-
  Thu Dec  3 2020 22:25                                                Page 403


                    -di] == ' ');
 20552                        ;				}
 20553                        ;			}
 20554                        ;		}
 20555                        ;		if (res == FR_NO_FILE) {	/* No la
                    bel entry and return nul string */
 20556                        ;			label[0] = 0;
 20557                        ;			res = FR_OK;
 20558                        ;		}
 20559                        ;	}
 20560                        ;
 20561                        ;	/* Get volume serial number */
 20562                        ;	if (res == FR_OK && vsn) {
 20563                        ;		res = move_window(fs, fs->volbase);
 20564                        ;		if (res == FR_OK) {
 20565                        ;			switch (fs->fs_type) {
 20566                        ;			case FS_EXFAT:
 20567                        ;				di = BPB_VolIDEx; break;
 20568                        ;
 20569                        ;			case FS_FAT32:
 20570                        ;				di = BS_VolID32; break;
 20571                        ;
 20572                        ;			default:
 20573                        ;				di = BS_VolID;
 20574                        ;			}
 20575                        ;			*vsn = ld_dword(fs->win + di);
 20576                        ;		}
 20577                        ;	}
 20578                        ;
 20579                        ;	LEAVE_FF(fs, res);
 20580                        ;}
 20581                        ;
 20582                        ;
 20583                        ;
 20584                        ;#if !FF_FS_READONLY
 20585                        ;/*-----------------------------------------------
                    ------------------------*/
 20586                        ;/* Set Volume Label                              
                                            */
 20587                        ;/*-----------------------------------------------
                    ------------------------*/
 20588                        ;
 20589                        ;FRESULT f_setlabel (
 20590                        ;	const TCHAR* label	/* Volume label to set w
                    ith heading logical drive number */
 20591                        ;)
 20592                        ;{
 20593                        ;	FRESULT res;
 20594                        ;	DIR dj;
 20595                        ;	FATFS *fs;
 20596                        ;	BYTE dirvn[22];
 20597                        ;	UINT di;
 20598                        ;	WCHAR wc;
 20599                        ;	static const char badchr[] = "+.,;=[]/\\\"*:<>\?
                    |\x7F";	/* [0..] for FAT, [7..] for exFAT */
 20600                        ;#if FF_USE_LFN
 20601                        ;	DWORD dc;
 20602                        ;#endif
  Thu Dec  3 2020 22:25                                                Page 404


 20603                        ;
 20604                        ;	/* Get logical drive */
 20605                        ;	res = mount_volume(&label, &fs, FA_WRITE);
 20606                        ;	if (res != FR_OK) LEAVE_FF(fs, res);
 20607                        ;
 20608                        ;#if FF_FS_EXFAT
 20609                        ;	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT 
                    volume */
 20610                        ;		mem_set(dirvn, 0, 22);
 20611                        ;		di = 0;
 20612                        ;		while ((UINT)*label >= ' ') {	/* Creat
                    e volume label */
 20613                        ;			dc = tchar2uni(&label);	/* Get a
                     Unicode character */
 20614                        ;			if (dc >= 0x10000) {
 20615                        ;				if (dc == 0xFFFFFFFF || 
                    di >= 10) {	/* Wrong surrogate or buffer overflow */
 20616                        ;					dc = 0;
 20617                        ;				} else {
 20618                        ;					st_word(dirvn + 
                    di * 2, (WCHAR)(dc >> 16)); di++;
 20619                        ;				}
 20620                        ;			}
 20621                        ;			if (dc == 0 || chk_chr(badchr + 
                    7, (int)dc) || di >= 11) {	/* Check validity of the volume 
                    label */
 20622                        ;				LEAVE_FF(fs, FR_INVALID_
                    NAME);
 20623                        ;			}
 20624                        ;			st_word(dirvn + di * 2, (WCHAR)d
                    c); di++;
 20625                        ;		}
 20626                        ;	} else
 20627                        ;#endif
 20628                        ;	{	/* On the FAT/FAT32 volume */
 20629                        ;		mem_set(dirvn, ' ', 11);
 20630                        ;		di = 0;
 20631                        ;		while ((UINT)*label >= ' ') {	/* Creat
                    e volume label */
 20632                        ;#if FF_USE_LFN
 20633                        ;			dc = tchar2uni(&label);
 20634                        ;			wc = (dc < 0x10000) ? ff_uni2oem
                    (ff_wtoupper(dc), CODEPAGE) : 0;
 20635                        ;#else						
                    			/* ANSI/OEM input */
 20636                        ;			wc = (BYTE)*label++;
 20637                        ;			if (dbc_1st((BYTE)wc)) wc = dbc_
                    2nd((BYTE)*label) ? wc << 8 | (BYTE)*label++ : 0;
 20638                        ;			if (IsLower(wc)) wc -= 0x20;	
                    	/* To upper ASCII characters */
 20639                        ;#if FF_CODE_PAGE == 0
 20640                        ;			if (ExCvt && wc >= 0x80) wc = Ex
                    Cvt[wc - 0x80];	/* To upper extended characters (SBCS cf
                    g) */
 20641                        ;#elif FF_CODE_PAGE < 900
 20642                        ;			if (wc >= 0x80) wc = ExCvt[wc - 
                    0x80];	/* To upper extended characters (SBCS cfg) */
 20643                        ;#endif
  Thu Dec  3 2020 22:25                                                Page 405


 20644                        ;#endif
 20645                        ;			if (wc == 0 || chk_chr(badchr + 
                    0, (int)wc) || di >= (UINT)((wc >= 0x100) ? 10 : 11)) {	
                    /* Reject invalid characters for volume label */
 20646                        ;				LEAVE_FF(fs, FR_INVALID_
                    NAME);
 20647                        ;			}
 20648                        ;			if (wc >= 0x100) dirvn[di++] = (
                    BYTE)(wc >> 8);
 20649                        ;			dirvn[di++] = (BYTE)wc;
 20650                        ;		}
 20651                        ;		if (dirvn[0] == DDEM) LEAVE_FF(fs, FR_IN
                    VALID_NAME);	/* Reject illegal name (heading DDEM) */
 20652                        ;		while (di && dirvn[di - 1] == ' ') di--;
                    				/* Snip trailing spaces */
 20653                        ;	}
 20654                        ;
 20655                        ;	/* Set volume label */
 20656                        ;	dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open 
                    root directory */
 20657                        ;	res = dir_sdi(&dj, 0);
 20658                        ;	if (res == FR_OK) {
 20659                        ;		res = DIR_READ_LABEL(&dj);	/* Get v
                    olume label entry */
 20660                        ;		if (res == FR_OK) {
 20661                        ;			if (FF_FS_EXFAT && fs->fs_type =
                    = FS_EXFAT) {
 20662                        ;				dj.dir[XDIR_NumLabel] = 
                    (BYTE)di;	/* Change the volume label */
 20663                        ;				mem_cpy(dj.dir + XDIR_La
                    bel, dirvn, 22);
 20664                        ;			} else {
 20665                        ;				if (di != 0) {
 20666                        ;					mem_cpy(dj.dir, 
                    dirvn, 11);	/* Change the volume label */
 20667                        ;				} else {
 20668                        ;					dj.dir[DIR_Name]
                     = DDEM;	/* Remove the volume label */
 20669                        ;				}
 20670                        ;			}
 20671                        ;			fs->wflag = 1;
 20672                        ;			res = sync_fs(fs);
 20673                        ;		} else {			/* No vo
                    lume label entry or an error */
 20674                        ;			if (res == FR_NO_FILE) {
 20675                        ;				res = FR_OK;
 20676                        ;				if (di != 0) {	/* Creat
                    e a volume label entry */
 20677                        ;					res = dir_alloc(
                    &dj, 1);	/* Allocate an entry */
 20678                        ;					if (res == FR_OK
                    ) {
 20679                        ;						mem_set(
                    dj.dir, 0, SZDIRE);	/* Clean the entry */
 20680                        ;						if (FF_F
                    S_EXFAT && fs->fs_type == FS_EXFAT) {
 20681                        ;							
                    dj.dir[XDIR_Type] = ET_VLABEL;	/* Create volume label e
  Thu Dec  3 2020 22:25                                                Page 406


                    ntry */
 20682                        ;							
                    dj.dir[XDIR_NumLabel] = (BYTE)di;
 20683                        ;							
                    mem_cpy(dj.dir + XDIR_Label, dirvn, 22);
 20684                        ;						} else {
 20685                        ;							
                    dj.dir[DIR_Attr] = AM_VOL;		/* Create volume label e
                    ntry */
 20686                        ;							
                    mem_cpy(dj.dir, dirvn, 11);
 20687                        ;						}
 20688                        ;						fs->wfla
                    g = 1;
 20689                        ;						res = sy
                    nc_fs(fs);
 20690                        ;					}
 20691                        ;				}
 20692                        ;			}
 20693                        ;		}
 20694                        ;	}
 20695                        ;
 20696                        ;	LEAVE_FF(fs, res);
 20697                        ;}
 20698                        ;
 20699                        ;#endif /* !FF_FS_READONLY */
 20700                        ;#endif /* FF_USE_LABEL */
 20701                        ;
 20702                        ;
 20703                        ;
 20704                        ;#if FF_USE_EXPAND && !FF_FS_READONLY
 20705                        ;/*-----------------------------------------------
                    ------------------------*/
 20706                        ;/* Allocate a Contiguous Blocks to the File      
                                            */
 20707                        ;/*-----------------------------------------------
                    ------------------------*/
 20708                        ;
 20709                        ;FRESULT f_expand (
 20710                        ;	FIL* fp,		/* Pointer to the file o
                    bject */
 20711                        ;	FSIZE_t fsz,	/* File size to be expanded to *
                    /
 20712                        ;	BYTE opt		/* Operation mode 0:Find
                     and prepare or 1:Find and allocate */
 20713                        ;)
 20714                        ;{
 20715                        ;	FRESULT res;
 20716                        ;	FATFS *fs;
 20717                        ;	DWORD n, clst, stcl, scl, ncl, tcl, lclst;
 20718                        ;
 20719                        ;
 20720                        ;	res = validate(&fp->obj, &fs);		/* Check
                     validity of the file object */
 20721                        ;	if (res != FR_OK || (res = (FRESULT)fp->err) != 
                    FR_OK) LEAVE_FF(fs, res);
 20722                        ;	if (fsz == 0 || fp->obj.objsize != 0 || !(fp->fl
                    ag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);
  Thu Dec  3 2020 22:25                                                Page 407


 20723                        ;#if FF_FS_EXFAT
 20724                        ;	if (fs->fs_type != FS_EXFAT && fsz >= 0x10000000
                    0) LEAVE_FF(fs, FR_DENIED);	/* Check if in size limit */
 20725                        ;#endif
 20726                        ;	n = (DWORD)fs->csize * SS(fs);	/* Cluster size 
                    */
 20727                        ;	tcl = (DWORD)(fsz / n) + ((fsz & (n - 1)) ? 1 : 
                    0);	/* Number of clusters required */
 20728                        ;	stcl = fs->last_clst; lclst = 0;
 20729                        ;	if (stcl < 2 || stcl >= fs->n_fatent) stcl = 2;
 20730                        ;
 20731                        ;#if FF_FS_EXFAT
 20732                        ;	if (fs->fs_type == FS_EXFAT) {
 20733                        ;		scl = find_bitmap(fs, stcl, tcl);	
                    		/* Find a contiguous cluster block */
 20734                        ;		if (scl == 0) res = FR_DENIED;		
                    		/* No contiguous cluster block was found */
 20735                        ;		if (scl == 0xFFFFFFFF) res = FR_DISK_ERR
                    ;
 20736                        ;		if (res == FR_OK) {	/* A contiguous 
                    free area is found */
 20737                        ;			if (opt) {		/* Alloc
                    ate it now */
 20738                        ;				res = change_bitmap(fs, 
                    scl, tcl, 1);	/* Mark the cluster block 'in use' */
 20739                        ;				lclst = scl + tcl - 1;
 20740                        ;			} else {		/* Set i
                    t as suggested point for next allocation */
 20741                        ;				lclst = scl - 1;
 20742                        ;			}
 20743                        ;		}
 20744                        ;	} else
 20745                        ;#endif
 20746                        ;	{
 20747                        ;		scl = clst = stcl; ncl = 0;
 20748                        ;		for (;;) {	/* Find a contiguous clu
                    ster block */
 20749                        ;			n = get_fat(&fp->obj, clst);
 20750                        ;			if (++clst >= fs->n_fatent) clst
                     = 2;
 20751                        ;			if (n == 1) { res = FR_INT_ERR; 
                    break; }
 20752                        ;			if (n == 0xFFFFFFFF) { res = FR_
                    DISK_ERR; break; }
 20753                        ;			if (n == 0) {	/* Is it a free 
                    cluster? */
 20754                        ;				if (++ncl == tcl) break;
                    	/* Break if a contiguous cluster block is found */
 20755                        ;			} else {
 20756                        ;				scl = clst; ncl = 0;	
                    	/* Not a free cluster */
 20757                        ;			}
 20758                        ;			if (clst == stcl) { res = FR_DEN
                    IED; break; }	/* No contiguous cluster? */
 20759                        ;		}
 20760                        ;		if (res == FR_OK) {	/* A contiguous 
                    free area is found */
 20761                        ;			if (opt) {		/* Alloc
  Thu Dec  3 2020 22:25                                                Page 408


                    ate it now */
 20762                        ;				for (clst = scl, n = tcl
                    ; n; clst++, n--) {	/* Create a cluster chain on the FAT */
 20763                        ;					res = put_fat(fs
                    , clst, (n == 1) ? 0xFFFFFFFF : clst + 1);
 20764                        ;					if (res != FR_OK
                    ) break;
 20765                        ;					lclst = clst;
 20766                        ;				}
 20767                        ;			} else {		/* Set i
                    t as suggested point for next allocation */
 20768                        ;				lclst = scl - 1;
 20769                        ;			}
 20770                        ;		}
 20771                        ;	}
 20772                        ;
 20773                        ;	if (res == FR_OK) {
 20774                        ;		fs->last_clst = lclst;		/* Set s
                    uggested start cluster to start next */
 20775                        ;		if (opt) {	/* Is it allocated now? 
                    */
 20776                        ;			fp->obj.sclust = scl;		
                    /* Update object allocation information */
 20777                        ;			fp->obj.objsize = fsz;
 20778                        ;			if (FF_FS_EXFAT) fp->obj.stat = 
                    2;	/* Set status 'contiguous chain' */
 20779                        ;			fp->flag |= FA_MODIFIED;
 20780                        ;			if (fs->free_clst <= fs->n_faten
                    t - 2) {	/* Update FSINFO */
 20781                        ;				fs->free_clst -= tcl;
 20782                        ;				fs->fsi_flag |= 1;
 20783                        ;			}
 20784                        ;		}
 20785                        ;	}
 20786                        ;
 20787                        ;	LEAVE_FF(fs, res);
 20788                        ;}
 20789                        ;
 20790                        ;#endif /* FF_USE_EXPAND && !FF_FS_READONLY */
 20791                        ;
 20792                        ;
 20793                        ;
 20794                        ;#if FF_USE_FORWARD
 20795                        ;/*-----------------------------------------------
                    ------------------------*/
 20796                        ;/* Forward Data to the Stream Directly           
                                            */
 20797                        ;/*-----------------------------------------------
                    ------------------------*/
 20798                        ;
 20799                        ;FRESULT f_forward (
 20800                        ;	FIL* fp, 					
                    	/* Pointer to the file object */
 20801                        ;	UINT (*func)(const BYTE*,UINT),	/* Pointer to th
                    e streaming function */
 20802                        ;	UINT btf,					
                    	/* Number of bytes to forward */
 20803                        ;	UINT* bf					
  Thu Dec  3 2020 22:25                                                Page 409


                    	/* Pointer to number of bytes forwarded */
 20804                        ;)
 20805                        ;{
 20806                        ;	FRESULT res;
 20807                        ;	FATFS *fs;
 20808                        ;	DWORD clst;
 20809                        ;	LBA_t sect;
 20810                        ;	FSIZE_t remain;
 20811                        ;	UINT rcnt, csect;
 20812                        ;	BYTE *dbuf;
 20813                        ;
 20814                        ;
 20815                        ;	*bf = 0;	/* Clear transfer byte counter *
                    /
 20816                        ;	res = validate(&fp->obj, &fs);		/* Check
                     validity of the file object */
 20817                        ;	if (res != FR_OK || (res = (FRESULT)fp->err) != 
                    FR_OK) LEAVE_FF(fs, res);
 20818                        ;	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIE
                    D);	/* Check access mode */
 20819                        ;
 20820                        ;	remain = fp->obj.objsize - fp->fptr;
 20821                        ;	if (btf > remain) btf = (UINT)remain;		
                    	/* Truncate btf by remaining bytes */
 20822                        ;
 20823                        ;	for ( ;  btf && (*func)(0, 0);			
                    		/* Repeat until all data transferred or stream g
                    oes busy */
 20824                        ;		fp->fptr += rcnt, *bf += rcnt, btf -= rc
                    nt) {
 20825                        ;		csect = (UINT)(fp->fptr / SS(fs) & (fs->
                    csize - 1));	/* Sector offset in the cluster */
 20826                        ;		if (fp->fptr % SS(fs) == 0) {		
                    		/* On the sector boundary? */
 20827                        ;			if (csect == 0) {		
                    				/* On the cluster boundary? */
 20828                        ;				clst = (fp->fptr == 0) ?
                    			/* On the top of the file? */
 20829                        ;					fp->obj.sclust :
                     get_fat(&fp->obj, fp->clust);
 20830                        ;				if (clst <= 1) ABORT(fs,
                     FR_INT_ERR);
 20831                        ;				if (clst == 0xFFFFFFFF) 
                    ABORT(fs, FR_DISK_ERR);
 20832                        ;				fp->clust = clst;	
                    				/* Update current cluster */
 20833                        ;			}
 20834                        ;		}
 20835                        ;		sect = clst2sect(fs, fp->clust);	
                    		/* Get current data sector */
 20836                        ;		if (sect == 0) ABORT(fs, FR_INT_ERR);
 20837                        ;		sect += csect;
 20838                        ;#if FF_FS_TINY
 20839                        ;		if (move_window(fs, sect) != FR_OK) ABOR
                    T(fs, FR_DISK_ERR);	/* Move sector window to the file data *
                    /
 20840                        ;		dbuf = fs->win;
 20841                        ;#else
  Thu Dec  3 2020 22:25                                                Page 410


 20842                        ;		if (fp->sect != sect) {		/* Fill 
                    sector cache with file data */
 20843                        ;#if !FF_FS_READONLY
 20844                        ;			if (fp->flag & FA_DIRTY) {	
                    	/* Write-back dirty sector cache */
 20845                        ;				if (disk_write(fs->pdrv,
                     fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 20846                        ;				fp->flag &= (BYTE)~FA_DI
                    RTY;
 20847                        ;			}
 20848                        ;#endif
 20849                        ;			if (disk_read(fs->pdrv, fp->buf,
                     sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 20850                        ;		}
 20851                        ;		dbuf = fp->buf;
 20852                        ;#endif
 20853                        ;		fp->sect = sect;
 20854                        ;		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);
                    	/* Number of bytes remains in the sector */
 20855                        ;		if (rcnt > btf) rcnt = btf;		
                    			/* Clip it by btr if needed */
 20856                        ;		rcnt = (*func)(dbuf + ((UINT)fp->fptr % 
                    SS(fs)), rcnt);	/* Forward the file data */
 20857                        ;		if (rcnt == 0) ABORT(fs, FR_INT_ERR);
 20858                        ;	}
 20859                        ;
 20860                        ;	LEAVE_FF(fs, FR_OK);
 20861                        ;}
 20862                        ;#endif /* FF_USE_FORWARD */
 20863                        ;
 20864                        ;
 20865                        ;
 20866                        ;#if !FF_FS_READONLY && FF_USE_MKFS
 20867                        ;/*-----------------------------------------------
                    ------------------------*/
 20868                        ;/* Create an FAT/exFAT volume                    
                                            */
 20869                        ;/*-----------------------------------------------
                    ------------------------*/
 20870                        ;
 20871                        ;#define N_SEC_TRACK 63			/* Secto
                    rs per track for determination of drive CHS */
 20872                        ;#define	GPT_ALIGN	0x100000	/* Align
                    ment of partitions in GPT [byte] (>=128KB) */
 20873                        ;#define GPT_ITEMS	128			
                    /* Number of GPT table size (>=128, sector aligned) */
 20874                        ;
 20875                        ;
 20876                        ;/* Create partitions on the physical drive */
 20877                        ;
 20878                        ;static FRESULT create_partition (
 20879                        ;	BYTE drv,			/* Physical driv
                    e number */
 20880                        ;	const LBA_t plst[],	/* Partition list */
 20881                        ;	UINT sys,			/* System ID (fo
                    r only MBR, temp setting) and bit8:GPT */
 20882                        ;	BYTE* buf			/* Working buffe
                    r for a sector */
  Thu Dec  3 2020 22:25                                                Page 411


 20883                        ;)
 20884                        ;{
 20885                        ;	UINT i, cy;
 20886                        ;	LBA_t sz_drv;
 20887                        ;	DWORD sz_drv32, s_lba32, n_lba32;
 20888                        ;	BYTE *pte, hd, n_hd, sc, n_sc;
 20889                        ;
 20890                        ;	/* Get drive size */
 20891                        ;	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) !
                    = RES_OK) return FR_DISK_ERR;
 20892                        ;
 20893                        ;#if FF_LBA64
 20894                        ;	if (sz_drv >= FF_MIN_GPT) {	/* Create partit
                    ions in GPT */
 20895                        ;		WORD ss;
 20896                        ;		UINT sz_pt, pi, si, ofs;
 20897                        ;		DWORD bcc, rnd, align;
 20898                        ;		QWORD s_lba64, n_lba64, sz_pool, s_bpt;
 20899                        ;		static const BYTE gpt_mbr[16] = {0x00, 0
                    x00, 0x02, 0x00, 0xEE, 0xFE, 0xFF, 0x00, 0x01, 0x00, 0x00, 0
                    x00, 0xFF, 0xFF, 0xFF, 0xFF};
 20900                        ;
 20901                        ;#if FF_MAX_SS != FF_MIN_SS
 20902                        ;		if (disk_ioctl(drv, GET_SECTOR_SIZE, &ss
                    ) != RES_OK) return FR_DISK_ERR;	/* Get sector size */
 20903                        ;		if (ss > FF_MAX_SS || ss < FF_MIN_SS || 
                    (ss & (ss - 1))) return FR_DISK_ERR;
 20904                        ;#else
 20905                        ;		ss = FF_MAX_SS;
 20906                        ;#endif
 20907                        ;		rnd = GET_FATTIME();			
                    /* Random seed */
 20908                        ;		align = GPT_ALIGN / ss;			
                    /* Partition alignment [sector] */
 20909                        ;		sz_pt = GPT_ITEMS * SZ_GPTE / ss;	
                    /* Size of PT [sector] */
 20910                        ;		s_bpt = sz_drv - sz_pt - 1;		
                    /* Backup PT start sector */
 20911                        ;		s_lba64 = 2 + sz_pt;			
                    /* First allocatable sector */
 20912                        ;		sz_pool = s_bpt - s_lba64;		
                    /* Size of allocatable area */
 20913                        ;		bcc = 0xFFFFFFFF; n_lba64 = 1;
 20914                        ;		pi = si = 0;	/* partition table index
                    , size table index */
 20915                        ;		do {
 20916                        ;			if (pi * SZ_GPTE % ss == 0) mem_
                    set(buf, 0, ss);	/* Clean the buffer if needed */
 20917                        ;			if (n_lba64 != 0) {	/* Is th
                    e size table not termintated? */
 20918                        ;				s_lba64 = (s_lba64 + ali
                    gn - 1) & ((QWORD)0 - align);	/* Align partition start
                     */
 20919                        ;				n_lba64 = plst[si++];	
                    /* Get a partition size */
 20920                        ;				if (n_lba64 <= 100) {	
                    /* Is the size in percentage? */
 20921                        ;					n_lba64 = sz_poo
  Thu Dec  3 2020 22:25                                                Page 412


                    l * n_lba64 / 100;
 20922                        ;					n_lba64 = (n_lba
                    64 + align - 1) & ((QWORD)0 - align);	/* Align partiti
                    on end (only if in percentage) */
 20923                        ;				}
 20924                        ;				if (s_lba64 + n_lba64 > 
                    s_bpt) {	/* Clip at end of the pool */
 20925                        ;					n_lba64 = (s_lba
                    64 < s_bpt) ? s_bpt - s_lba64 : 0;
 20926                        ;				}
 20927                        ;			}
 20928                        ;			if (n_lba64 != 0) {		
                    /* Add a partition? */
 20929                        ;				ofs = pi * SZ_GPTE % ss;
 20930                        ;				mem_cpy(buf + ofs + GPTE
                    _PtGuid, GUID_MS_Basic, 16);	/* Partition GUID (Micro
                    soft Basic Data) */
 20931                        ;				rnd = make_rand(rnd, buf
                     + ofs + GPTE_UpGuid, 16);		/* Unique partition GUID
                     */
 20932                        ;				st_qword(buf + ofs + GPT
                    E_FstLba, s_lba64);				/* Partition sta
                    rt LBA */
 20933                        ;				st_qword(buf + ofs + GPT
                    E_LstLba, s_lba64 + n_lba64 - 1);	/* Partition end LBA */
 20934                        ;				s_lba64 += n_lba64;	
                    	/* Next partition LBA */
 20935                        ;			}
 20936                        ;			if ((pi + 1) * SZ_GPTE % ss == 0
                    ) {		/* Write the buffer if it is filled up */
 20937                        ;				for (i = 0; i < ss; bcc 
                    = crc32(bcc, buf[i++])) ;	/* Calculate table check sum */
 20938                        ;				if (disk_write(drv, buf,
                     2 + pi * SZ_GPTE / ss, 1) != RES_OK) return FR_DISK_ERR;	
                    	/* Primary table */
 20939                        ;				if (disk_write(drv, buf,
                     s_bpt + pi * SZ_GPTE / ss, 1) != RES_OK) return FR_DISK_ERR
                    ;	/* Secondary table */
 20940                        ;			}
 20941                        ;		} while (++pi < GPT_ITEMS);
 20942                        ;
 20943                        ;		/* Create primary GPT header */
 20944                        ;		mem_set(buf, 0, ss);
 20945                        ;		mem_cpy(buf + GPTH_Sign, "EFI PART" "\0\
                    0\1\0" "\x5C\0\0", 16);	/* Signature, version (1.0) and 
                    size (92) */
 20946                        ;		st_dword(buf + GPTH_PtBcc, ~bcc);	
                    			/* Table check sum */
 20947                        ;		st_qword(buf + GPTH_CurLba, 1);		
                    			/* LBA of this header */
 20948                        ;		st_qword(buf + GPTH_BakLba, sz_drv - 1);
                    		/* LBA of another header */
 20949                        ;		st_qword(buf + GPTH_FstLba, 2 + sz_pt);	
                    		/* LBA of first allocatable sector */
 20950                        ;		st_qword(buf + GPTH_LstLba, s_bpt - 1);	
                    		/* LBA of last allocatable sector */
 20951                        ;		st_dword(buf + GPTH_PteSize, SZ_GPTE);	
                    		/* Size of a table entry */
  Thu Dec  3 2020 22:25                                                Page 413


 20952                        ;		st_dword(buf + GPTH_PtNum, GPT_ITEMS);	
                    		/* Number of table entries */
 20953                        ;		st_dword(buf + GPTH_PtOfs, 2);		
                    			/* LBA of this table */
 20954                        ;		rnd = make_rand(rnd, buf + GPTH_DskGuid,
                     16);	/* Disk GUID */
 20955                        ;		for (i = 0, bcc= 0xFFFFFFFF; i < 92; bcc
                     = crc32(bcc, buf[i++])) ;	/* Calculate header check sum */
 20956                        ;		st_dword(buf + GPTH_Bcc, ~bcc);		
                    			/* Header check sum */
 20957                        ;		if (disk_write(drv, buf, 1, 1) != RES_OK
                    ) return FR_DISK_ERR;
 20958                        ;
 20959                        ;		/* Create secondary GPT header */
 20960                        ;		st_qword(buf + GPTH_CurLba, sz_drv - 1);
                    		/* LBA of this header */
 20961                        ;		st_qword(buf + GPTH_BakLba, 1);		
                    			/* LBA of another header */
 20962                        ;		st_qword(buf + GPTH_PtOfs, s_bpt);	
                    			/* LBA of this table */
 20963                        ;		st_dword(buf + GPTH_Bcc, 0);
 20964                        ;		for (i = 0, bcc= 0xFFFFFFFF; i < 92; bcc
                     = crc32(bcc, buf[i++])) ;	/* Calculate header check sum */
 20965                        ;		st_dword(buf + GPTH_Bcc, ~bcc);		
                    			/* Header check sum */
 20966                        ;		if (disk_write(drv, buf, sz_drv - 1, 1) 
                    != RES_OK) return FR_DISK_ERR;
 20967                        ;
 20968                        ;		/* Create protective MBR */
 20969                        ;		mem_set(buf, 0, ss);
 20970                        ;		mem_cpy(buf + MBR_Table, gpt_mbr, 16);	
                    		/* Create a GPT partition */
 20971                        ;		st_word(buf + BS_55AA, 0xAA55);
 20972                        ;		if (disk_write(drv, buf, 0, 1) != RES_OK
                    ) return FR_DISK_ERR;
 20973                        ;
 20974                        ;	} else
 20975                        ;#endif
 20976                        ;	{					/* Creat
                    e partitions in MBR */
 20977                        ;		sz_drv32 = (DWORD)sz_drv;
 20978                        ;		n_sc = N_SEC_TRACK;		/* Deter
                    mine drive CHS without any consideration of the drive geomet
                    ry */
 20979                        ;		for (n_hd = 8; n_hd != 0 && sz_drv32 / n
                    _hd / n_sc > 1024; n_hd *= 2) ;
 20980                        ;		if (n_hd == 0) n_hd = 255;	/* Numbe
                    r of heads needs to be <256 */
 20981                        ;
 20982                        ;		mem_set(buf, 0, FF_MAX_SS);	/* Clear
                     MBR */
 20983                        ;		pte = buf + MBR_Table;	/* Partition tab
                    le in the MBR */
 20984                        ;		for (i = 0, s_lba32 = n_sc; i < 4 && s_l
                    ba32 != 0 && s_lba32 < sz_drv32; i++, s_lba32 += n_lba32) {
 20985                        ;			n_lba32 = (DWORD)plst[i];	
                    /* Get partition size */
 20986                        ;			if (n_lba32 <= 100) n_lba32 = (n
  Thu Dec  3 2020 22:25                                                Page 414


                    _lba32 == 100) ? sz_drv32 : sz_drv32 / 100 * n_lba32;	
                    /* Size in percentage? */
 20987                        ;			if (s_lba32 + n_lba32 > sz_drv32
                     || s_lba32 + n_lba32 < s_lba32) n_lba32 = sz_drv32 - s_lba3
                    2;	/* Clip at drive size */
 20988                        ;			if (n_lba32 == 0) break;	
                    /* End of table or no sector to allocate? */
 20989                        ;
 20990                        ;			st_dword(pte + PTE_StLba, s_lba3
                    2);		/* Start LBA */
 20991                        ;			st_dword(pte + PTE_SizLba, n_lba
                    32);	/* Number of sectors */
 20992                        ;			pte[PTE_System] = (BYTE)sys;	
                    		/* System type */
 20993                        ;
 20994                        ;			cy = (UINT)(s_lba32 / n_sc / n_h
                    d);		/* Start cylinder */
 20995                        ;			hd = (BYTE)(s_lba32 / n_sc % n_h
                    d);		/* Start head */
 20996                        ;			sc = (BYTE)(s_lba32 % n_sc + 1);
                    		/* Start sector */
 20997                        ;			pte[PTE_StHead] = hd;
 20998                        ;			pte[PTE_StSec] = (BYTE)((cy >> 2
                     & 0xC0) | sc);
 20999                        ;			pte[PTE_StCyl] = (BYTE)cy;
 21000                        ;
 21001                        ;			cy = (UINT)((s_lba32 + n_lba32 -
                     1) / n_sc / n_hd);	/* End cylinder */
 21002                        ;			hd = (BYTE)((s_lba32 + n_lba32 -
                     1) / n_sc % n_hd);	/* End head */
 21003                        ;			sc = (BYTE)((s_lba32 + n_lba32 -
                     1) % n_sc + 1);	/* End sector */
 21004                        ;			pte[PTE_EdHead] = hd;
 21005                        ;			pte[PTE_EdSec] = (BYTE)((cy >> 2
                     & 0xC0) | sc);
 21006                        ;			pte[PTE_EdCyl] = (BYTE)cy;
 21007                        ;
 21008                        ;			pte += SZ_PTE;		/* Next 
                    entry */
 21009                        ;		}
 21010                        ;
 21011                        ;		st_word(buf + BS_55AA, 0xAA55);		
                    /* MBR signature */
 21012                        ;		if (disk_write(drv, buf, 0, 1) != RES_OK
                    ) return FR_DISK_ERR;	/* Write it to the MBR */
 21013                        ;	}
 21014                        ;
 21015                        ;	return FR_OK;
 21016                        ;}
 21017                        ;
 21018                        ;
 21019                        ;
 21020                        ;FRESULT f_mkfs (
 21021                        ;	const TCHAR* path,		/* Logical drive
                     number */
 21022                        ;	const MKFS_PARM* opt,	/* Format options */
 21023                        ;	void* work,				/* Point
                    er to working buffer (null: use heap memory) */
  Thu Dec  3 2020 22:25                                                Page 415


 21024                        ;	UINT len				/* Size 
                    of working buffer [byte] */
 21025                        ;)
 21026                        ;{
 21027                        ;	static const WORD cst[] = {1, 4, 16, 64, 256, 51
                    2, 0};	/* Cluster size boundary for FAT volume (4Ks uni
                    t) */
 21028                        ;	static const WORD cst32[] = {1, 2, 4, 8, 16, 32,
                     0};	/* Cluster size boundary for FAT32 volume (128Ks
                     unit) */
 21029                        ;	static const MKFS_PARM defopt = {FM_ANY, 0, 0, 0
                    , 0};	/* Default parameter */
 21030                        ;	BYTE fsopt, fsty, sys, *buf, *pte, pdrv, ipart;
 21031                        ;	WORD ss;	/* Sector size */
 21032                        ;	DWORD sz_buf, sz_blk, n_clst, pau, nsect, n;
 21033                        ;	LBA_t sz_vol, b_vol, b_fat, b_data;		
                    /* Size of volume, Base LBA of volume, fat, data */
 21034                        ;	LBA_t sect, lba[2];
 21035                        ;	DWORD sz_rsv, sz_fat, sz_dir, sz_au;	/* Size 
                    of reserved, fat, dir, data, cluster */
 21036                        ;	UINT n_fat, n_root, i;				
                    	/* Index, Number of FATs and Number of roor dir entries 
                    */
 21037                        ;	int vol;
 21038                        ;	DSTATUS ds;
 21039                        ;	FRESULT fr;
 21040                        ;
 21041                        ;
 21042                        ;	/* Check mounted drive and clear work area */
 21043                        ;	vol = get_ldnumber(&path);			
                    		/* Get target logical drive */
 21044                        ;	if (vol < 0) return FR_INVALID_DRIVE;
 21045                        ;	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	
                    /* Clear the fs object if mounted */
 21046                        ;	pdrv = LD2PD(vol);			/* Physi
                    cal drive */
 21047                        ;	ipart = LD2PT(vol);			/* Parti
                    tion (0:create as new, 1..:get from partition table) */
 21048                        ;	if (!opt) opt = &defopt;	/* Use default p
                    arameter if it is not given */
 21049                        ;
 21050                        ;	/* Get physical drive status (sz_drv, sz_blk, ss
                    ) */
 21051                        ;	ds = disk_initialize(pdrv);
 21052                        ;	if (ds & STA_NOINIT) return FR_NOT_READY;
 21053                        ;	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
 21054                        ;	sz_blk = opt->align;
 21055                        ;	if (sz_blk == 0 && disk_ioctl(pdrv, GET_BLOCK_SI
                    ZE, &sz_blk) != RES_OK) sz_blk = 1;
 21056                        ; 	if (sz_blk == 0 || sz_blk > 0x8000 || (s
                    z_blk & (sz_blk - 1))) sz_blk = 1;
 21057                        ;#if FF_MAX_SS != FF_MIN_SS
 21058                        ;	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RE
                    S_OK) return FR_DISK_ERR;
 21059                        ;	if (ss > FF_MAX_SS || ss < FF_MIN_SS || (ss & (s
                    s - 1))) return FR_DISK_ERR;
 21060                        ;#else
 21061                        ;	ss = FF_MAX_SS;
  Thu Dec  3 2020 22:25                                                Page 416


 21062                        ;#endif
 21063                        ;	/* Options for FAT sub-type and FAT parameters *
                    /
 21064                        ;	fsopt = opt->fmt & (FM_ANY | FM_SFD);
 21065                        ;	n_fat = (opt->n_fat >= 1 && opt->n_fat <= 2) ? o
                    pt->n_fat : 1;
 21066                        ;	n_root = (opt->n_root >= 1 && opt->n_root <= 327
                    68 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 51
                    2;
 21067                        ;	sz_au = (opt->au_size <= 0x1000000 && (opt->au_s
                    ize & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
 21068                        ;	sz_au /= ss;	/* Byte --> Sector */
 21069                        ;
 21070                        ;	/* Get working buffer */
 21071                        ;	sz_buf = len / ss;		/* Size of worki
                    ng buffer [sector] */
 21072                        ;	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
 21073                        ;	buf = (BYTE*)work;		/* Working buffe
                    r */
 21074                        ;#if FF_USE_LFN == 3
 21075                        ;	if (!buf) buf = ff_memalloc(sz_buf * ss);	
                    /* Use heap memory for working buffer */
 21076                        ;#endif
 21077                        ;	if (!buf) return FR_NOT_ENOUGH_CORE;
 21078                        ;
 21079                        ;	/* Determine where the volume to be located (b_v
                    ol, sz_vol) */
 21080                        ;	b_vol = sz_vol = 0;
 21081                        ;	if (FF_MULTI_PARTITION && ipart != 0) {	/* Is th
                    e volume associated with any specific partition? */
 21082                        ;		/* Get partition location from the exist
                    ing partition table */
 21083                        ;		if (disk_read(pdrv, buf, 0, 1) != RES_OK
                    ) LEAVE_MKFS(FR_DISK_ERR);	/* Load MBR */
 21084                        ;		if (ld_word(buf + BS_55AA) != 0xAA55) LE
                    AVE_MKFS(FR_MKFS_ABORTED);	/* Check if MBR is valid */
 21085                        ;#if FF_LBA64
 21086                        ;		if (buf[MBR_Table + PTE_System] == 0xEE)
                     {	/* GPT protective MBR? */
 21087                        ;			DWORD n_ent, ofs;
 21088                        ;			QWORD pt_lba;
 21089                        ;
 21090                        ;			/* Get the partition location fr
                    om GPT */
 21091                        ;			if (disk_read(pdrv, buf, 1, 1) !
                    = RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Load GPT header secto
                    r (next to MBR) */
 21092                        ;			if (!test_gpt_header(buf)) LEAVE
                    _MKFS(FR_MKFS_ABORTED);	/* Check if GPT header is valid 
                    */
 21093                        ;			n_ent = ld_dword(buf + GPTH_PtNu
                    m);		/* Number of entries */
 21094                        ;			pt_lba = ld_qword(buf + GPTH_PtO
                    fs);	/* Table start sector */
 21095                        ;			ofs = i = 0;
 21096                        ;			while (n_ent) {		/* Find 
                    MS Basic partition with order of ipart */
 21097                        ;				if (ofs == 0 && disk_rea
  Thu Dec  3 2020 22:25                                                Page 417


                    d(pdrv, buf, pt_lba++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR)
                    ;	/* Get PT sector */
 21098                        ;				if (!mem_cmp(buf + ofs +
                     GPTE_PtGuid, GUID_MS_Basic, 16) && ++i == ipart) {	/* MS ba
                    sic data partition? */
 21099                        ;					b_vol = ld_qword
                    (buf + ofs + GPTE_FstLba);
 21100                        ;					sz_vol = ld_qwor
                    d(buf + ofs + GPTE_LstLba) - b_vol + 1;
 21101                        ;					break;
 21102                        ;				}
 21103                        ;				n_ent--; ofs = (ofs + SZ
                    _GPTE) % ss;	/* Next entry */
 21104                        ;			}
 21105                        ;			if (n_ent == 0) LEAVE_MKFS(FR_MK
                    FS_ABORTED);	/* Partition not found */
 21106                        ;			fsopt |= 0x80;	/* Partitioning 
                    is in GPT */
 21107                        ;		} else
 21108                        ;#endif
 21109                        ;		{	/* Get the partition location fr
                    om MBR partition table */
 21110                        ;			pte = buf + (MBR_Table + (ipart 
                    - 1) * SZ_PTE);
 21111                        ;			if (ipart > 4 || pte[PTE_System]
                     == 0) LEAVE_MKFS(FR_MKFS_ABORTED);	/* No partition? */
 21112                        ;			b_vol = ld_dword(pte + PTE_StLba
                    );		/* Get volume start sector */
 21113                        ;			sz_vol = ld_dword(pte + PTE_SizL
                    ba);	/* Get volume size */
 21114                        ;		}
 21115                        ;	} else {	/* The volume is associated with
                     a physical drive */
 21116                        ;		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &
                    sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 21117                        ;		if (!(fsopt & FM_SFD)) {	/* To be
                     partitioned? */
 21118                        ;			/* Create a single-partition on 
                    the drive in this function */
 21119                        ;#if FF_LBA64
 21120                        ;			if (sz_vol >= FF_MIN_GPT) {	
                    /* Which partition type to create, MBR or GPT? */
 21121                        ;				fsopt |= 0x80;		
                    /* Partitioning is in GPT */
 21122                        ;				b_vol = GPT_ALIGN / ss; 
                    sz_vol -= b_vol + GPT_ITEMS * SZ_GPTE / ss + 1;	/* Estim
                    ated partition offset and size */
 21123                        ;			} else
 21124                        ;#endif
 21125                        ;			{	/* Partitioning is in MB
                    R */
 21126                        ;				if (sz_vol > N_SEC_TRACK
                    ) {
 21127                        ;					b_vol = N_SEC_TR
                    ACK; sz_vol -= b_vol;	/* Estimated partition offset an
                    d size */
 21128                        ;				}
 21129                        ;			}
  Thu Dec  3 2020 22:25                                                Page 418


 21130                        ;		}
 21131                        ;	}
 21132                        ;	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	
                    /* Check if volume size is >=128s */
 21133                        ;
 21134                        ;	/* Now start to create a FAT volume at b_vol and
                     sz_vol */
 21135                        ;
 21136                        ;	do {	/* Pre-determine the FAT type */
 21137                        ;		if (FF_FS_EXFAT && (fsopt & FM_EXFAT)) {
                    	/* exFAT possible? */
 21138                        ;			if ((fsopt & FM_ANY) == FM_EXFAT
                     || sz_vol >= 0x4000000 || sz_au > 128) {	/* exFAT only, v
                    ol >= 64MS or sz_au > 128S ? */
 21139                        ;				fsty = FS_EXFAT; break;
 21140                        ;			}
 21141                        ;		}
 21142                        ;#if FF_LBA64
 21143                        ;		if (sz_vol >= 0x100000000) LEAVE_MKFS(FR
                    _MKFS_ABORTED);	/* Too large volume for FAT/FAT32 */
 21144                        ;#endif
 21145                        ;		if (sz_au > 128) sz_au = 128;	/* Inval
                    id AU for FAT/FAT32? */
 21146                        ;		if (fsopt & FM_FAT32) {	/* FAT32 possibl
                    e? */
 21147                        ;			if (!(fsopt & FM_FAT)) {	
                    /* no-FAT? */
 21148                        ;				fsty = FS_FAT32; break;
 21149                        ;			}
 21150                        ;		}
 21151                        ;		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INV
                    ALID_PARAMETER);	/* no-FAT? */
 21152                        ;		fsty = FS_FAT16;
 21153                        ;	} while (0);
 21154                        ;
 21155                        ;#if FF_FS_EXFAT
 21156                        ;	if (fsty == FS_EXFAT) {	/* Create an exFAT volum
                    e */
 21157                        ;		DWORD szb_bit, szb_case, sum, nb, cl, tb
                    l[3];
 21158                        ;		WCHAR ch, si;
 21159                        ;		UINT j, st;
 21160                        ;		BYTE b;
 21161                        ;
 21162                        ;		if (sz_vol < 0x1000) LEAVE_MKFS(FR_MKFS_
                    ABORTED);	/* Too small volume for exFAT? */
 21163                        ;#if FF_USE_TRIM
 21164                        ;		lba[0] = b_vol; lba[1] = b_vol + sz_vol 
                    - 1;	/* Inform storage device that the volume area ma
                    y be erased */
 21165                        ;		disk_ioctl(pdrv, CTRL_TRIM, lba);
 21166                        ;#endif
 21167                        ;		/* Determine FAT location, data location
                     and number of clusters */
 21168                        ;		if (sz_au == 0) {	/* AU auto-selec
                    tion */
 21169                        ;			sz_au = 8;
 21170                        ;			if (sz_vol >= 0x80000) sz_au = 6
  Thu Dec  3 2020 22:25                                                Page 419


                    4;		/* >= 512Ks */
 21171                        ;			if (sz_vol >= 0x4000000) sz_au =
                     256;	/* >= 64Ms */
 21172                        ;		}
 21173                        ;		b_fat = b_vol + 32;			
                    							/* FAT s
                    tart at offset 32 */
 21174                        ;		sz_fat = (DWORD)((sz_vol / sz_au + 2) * 
                    4 + ss - 1) / ss;	/* Number of FAT sectors */
 21175                        ;		b_data = (b_fat + sz_fat + sz_blk - 1) &
                     ~((LBA_t)sz_blk - 1);	/* Align data area to the erase 
                    block boundary */
 21176                        ;		if (b_data - b_vol >= sz_vol / 2) LEAVE_
                    MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
 21177                        ;		n_clst = (DWORD)(sz_vol - (b_data - b_vo
                    l)) / sz_au;	/* Number of clusters */
 21178                        ;		if (n_clst <16) LEAVE_MKFS(FR_MKFS_ABORT
                    ED);			/* Too few clusters? */
 21179                        ;		if (n_clst > MAX_EXFAT) LEAVE_MKFS(FR_MK
                    FS_ABORTED);	/* Too many clusters? */
 21180                        ;
 21181                        ;		szb_bit = (n_clst + 7) / 8;		
                    					/* Size of allocation bi
                    tmap */
 21182                        ;		tbl[0] = (szb_bit + sz_au * ss - 1) / (s
                    z_au * ss);	/* Number of allocation bitmap clusters */
 21183                        ;
 21184                        ;		/* Create a compressed up-case table */
 21185                        ;		sect = b_data + sz_au * tbl[0];	/* Table
                     start sector */
 21186                        ;		sum = 0;				
                    		/* Table checksum to be stored in the 82 entry *
                    /
 21187                        ;		st = 0; si = 0; i = 0; j = 0; szb_case =
                     0;
 21188                        ;		do {
 21189                        ;			switch (st) {
 21190                        ;			case 0:
 21191                        ;				ch = (WCHAR)ff_wtoupper(
                    si);	/* Get an up-case char */
 21192                        ;				if (ch != si) {
 21193                        ;					si++; break;	
                    	/* Store the up-case char if exist */
 21194                        ;				}
 21195                        ;				for (j = 1; (WCHAR)(si +
                     j) && (WCHAR)(si + j) == ff_wtoupper((WCHAR)(si + j)); j++)
                     ;	/* Get run length of no-case block */
 21196                        ;				if (j >= 128) {
 21197                        ;					ch = 0xFFFF; st 
                    = 2; break;	/* Compress the no-case block if run is >= 128 *
                    /
 21198                        ;				}
 21199                        ;				st = 1;			
                    /* Do not compress short run */
 21200                        ;				/* go to next case */
 21201                        ;			case 1:
 21202                        ;				ch = si++;		
                    /* Fill the short run */
  Thu Dec  3 2020 22:25                                                Page 420


 21203                        ;				if (--j == 0) st = 0;
 21204                        ;				break;
 21205                        ;
 21206                        ;			default:
 21207                        ;				ch = (WCHAR)j; si += (WC
                    HAR)j;	/* Number of chars to skip */
 21208                        ;				st = 0;
 21209                        ;			}
 21210                        ;			sum = xsum32(buf[i + 0] = (BYTE)
                    ch, sum);		/* Put it into the write buffer */
 21211                        ;			sum = xsum32(buf[i + 1] = (BYTE)
                    (ch >> 8), sum);
 21212                        ;			i += 2; szb_case += 2;
 21213                        ;			if (si == 0 || i == sz_buf * ss)
                     {		/* Write buffered data when buffer full or end o
                    f process */
 21214                        ;				n = (i + ss - 1) / ss;
 21215                        ;				if (disk_write(pdrv, buf
                    , sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 21216                        ;				sect += n; i = 0;
 21217                        ;			}
 21218                        ;		} while (si);
 21219                        ;		tbl[1] = (szb_case + sz_au * ss - 1) / (
                    sz_au * ss);	/* Number of up-case table clusters */
 21220                        ;		tbl[2] = 1;				
                    						/* Number of roo
                    t dir clusters */
 21221                        ;
 21222                        ;		/* Initialize the allocation bitmap */
 21223                        ;		sect = b_data; nsect = (szb_bit + ss - 1
                    ) / ss;	/* Start of bitmap and number of sectors */
 21224                        ;		nb = tbl[0] + tbl[1] + tbl[2];		
                    			/* Number of clusters in-use by system *
                    /
 21225                        ;		do {
 21226                        ;			mem_set(buf, 0, sz_buf * ss);
 21227                        ;			for (i = 0; nb >= 8 && i < sz_bu
                    f * ss; buf[i++] = 0xFF, nb -= 8) ;
 21228                        ;			for (b = 1; nb != 0 && i < sz_bu
                    f * ss; buf[i] |= b, b <<= 1, nb--) ;
 21229                        ;			n = (nsect > sz_buf) ? sz_buf : 
                    nsect;		/* Write the buffered data */
 21230                        ;			if (disk_write(pdrv, buf, sect, 
                    n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 21231                        ;			sect += n; nsect -= n;
 21232                        ;		} while (nsect);
 21233                        ;
 21234                        ;		/* Initialize the FAT */
 21235                        ;		sect = b_fat; nsect = sz_fat;	/* Start
                     of FAT and number of FAT sectors */
 21236                        ;		j = nb = cl = 0;
 21237                        ;		do {
 21238                        ;			mem_set(buf, 0, sz_buf * ss); i 
                    = 0;	/* Clear work area and reset write index */
 21239                        ;			if (cl == 0) {	/* Set FAT [0] a
                    nd FAT[1] */
 21240                        ;				st_dword(buf + i, 0xFFFF
                    FFF8); i += 4; cl++;
  Thu Dec  3 2020 22:25                                                Page 421


 21241                        ;				st_dword(buf + i, 0xFFFF
                    FFFF); i += 4; cl++;
 21242                        ;			}
 21243                        ;			do {			/* Creat
                    e chains of bitmap, up-case and root dir */
 21244                        ;				while (nb != 0 && i < sz
                    _buf * ss) {	/* Create a chain */
 21245                        ;					st_dword(buf + i
                    , (nb > 1) ? cl + 1 : 0xFFFFFFFF);
 21246                        ;					i += 4; cl++; nb
                    --;
 21247                        ;				}
 21248                        ;				if (nb == 0 && j < 3) nb
                     = tbl[j++];	/* Next chain */
 21249                        ;			} while (nb != 0 && i < sz_buf *
                     ss);
 21250                        ;			n = (nsect > sz_buf) ? sz_buf : 
                    nsect;	/* Write the buffered data */
 21251                        ;			if (disk_write(pdrv, buf, sect, 
                    n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 21252                        ;			sect += n; nsect -= n;
 21253                        ;		} while (nsect);
 21254                        ;
 21255                        ;		/* Initialize the root directory */
 21256                        ;		mem_set(buf, 0, sz_buf * ss);
 21257                        ;		buf[SZDIRE * 0 + 0] = ET_VLABEL;	
                    				/* Volume label entry (no label)
                     */
 21258                        ;		buf[SZDIRE * 1 + 0] = ET_BITMAP;	
                    				/* Bitmap entry */
 21259                        ;		st_dword(buf + SZDIRE * 1 + 20, 2);	
                    				/*  cluster */
 21260                        ;		st_dword(buf + SZDIRE * 1 + 24, szb_bit)
                    ;			/*  size */
 21261                        ;		buf[SZDIRE * 2 + 0] = ET_UPCASE;	
                    				/* Up-case table entry */
 21262                        ;		st_dword(buf + SZDIRE * 2 + 4, sum);	
                    			/*  sum */
 21263                        ;		st_dword(buf + SZDIRE * 2 + 20, 2 + tbl[
                    0]);		/*  cluster */
 21264                        ;		st_dword(buf + SZDIRE * 2 + 24, szb_case
                    );			/*  size */
 21265                        ;		sect = b_data + sz_au * (tbl[0] + tbl[1]
                    ); nsect = sz_au;	/* Start of the root directory and numbe
                    r of sectors */
 21266                        ;		do {	/* Fill root directory sectors *
                    /
 21267                        ;			n = (nsect > sz_buf) ? sz_buf : 
                    nsect;
 21268                        ;			if (disk_write(pdrv, buf, sect, 
                    n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 21269                        ;			mem_set(buf, 0, ss);
 21270                        ;			sect += n; nsect -= n;
 21271                        ;		} while (nsect);
 21272                        ;
 21273                        ;		/* Create two set of the exFAT VBR block
                    s */
 21274                        ;		sect = b_vol;
  Thu Dec  3 2020 22:25                                                Page 422


 21275                        ;		for (n = 0; n < 2; n++) {
 21276                        ;			/* Main record (+0) */
 21277                        ;			mem_set(buf, 0, ss);
 21278                        ;			mem_cpy(buf + BS_JmpBoot, "\xEB\
                    x76\x90" "EXFAT   ", 11);	/* Boot jump code (x86), OEM nam
                    e */
 21279                        ;			st_qword(buf + BPB_VolOfsEx, b_v
                    ol);					/* Volume offset
                     in the physical drive [sector] */
 21280                        ;			st_qword(buf + BPB_TotSecEx, sz_
                    vol);					/* Volume size [
                    sector] */
 21281                        ;			st_dword(buf + BPB_FatOfsEx, (DW
                    ORD)(b_fat - b_vol));	/* FAT offset [sector] */
 21282                        ;			st_dword(buf + BPB_FatSzEx, sz_f
                    at);					/* FAT size [sec
                    tor] */
 21283                        ;			st_dword(buf + BPB_DataOfsEx, (D
                    WORD)(b_data - b_vol));	/* Data offset [sector] */
 21284                        ;			st_dword(buf + BPB_NumClusEx, n_
                    clst);					/* Number of clu
                    sters */
 21285                        ;			st_dword(buf + BPB_RootClusEx, 2
                     + tbl[0] + tbl[1]);	/* Root dir cluster # */
 21286                        ;			st_dword(buf + BPB_VolIDEx, GET_
                    FATTIME());				/* VSN */
 21287                        ;			st_word(buf + BPB_FSVerEx, 0x100
                    );						/* Filesystem ve
                    rsion (1.00) */
 21288                        ;			for (buf[BPB_BytsPerSecEx] = 0, 
                    i = ss; i >>= 1; buf[BPB_BytsPerSecEx]++) ;	/* Log2 of secto
                    r size [byte] */
 21289                        ;			for (buf[BPB_SecPerClusEx] = 0, 
                    i = sz_au; i >>= 1; buf[BPB_SecPerClusEx]++) ;	/* Log2 
                    of cluster size [sector] */
 21290                        ;			buf[BPB_NumFATsEx] = 1;		
                    			/* Number of FATs */
 21291                        ;			buf[BPB_DrvNumEx] = 0x80;	
                    			/* Drive number (for int13) */
 21292                        ;			st_word(buf + BS_BootCodeEx, 0xF
                    EEB);	/* Boot code (x86) */
 21293                        ;			st_word(buf + BS_55AA, 0xAA55);	
                    		/* Signature (placed here regardless of sector s
                    ize) */
 21294                        ;			for (i = sum = 0; i < ss; i++) {
                    		/* VBR checksum */
 21295                        ;				if (i != BPB_VolFlagEx &
                    & i != BPB_VolFlagEx + 1 && i != BPB_PercInUseEx) sum = xsum
                    32(buf[i], sum);
 21296                        ;			}
 21297                        ;			if (disk_write(pdrv, buf, sect++
                    , 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 21298                        ;			/* Extended bootstrap record (+1
                    ..+8) */
 21299                        ;			mem_set(buf, 0, ss);
 21300                        ;			st_word(buf + ss - 2, 0xAA55);	
                    /* Signature (placed at end of sector) */
 21301                        ;			for (j = 1; j < 9; j++) {
  Thu Dec  3 2020 22:25                                                Page 423


 21302                        ;				for (i = 0; i < ss; sum 
                    = xsum32(buf[i++], sum)) ;	/* VBR checksum */
 21303                        ;				if (disk_write(pdrv, buf
                    , sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 21304                        ;			}
 21305                        ;			/* OEM/Reserved record (+9..+10)
                     */
 21306                        ;			mem_set(buf, 0, ss);
 21307                        ;			for ( ; j < 11; j++) {
 21308                        ;				for (i = 0; i < ss; sum 
                    = xsum32(buf[i++], sum)) ;	/* VBR checksum */
 21309                        ;				if (disk_write(pdrv, buf
                    , sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 21310                        ;			}
 21311                        ;			/* Sum record (+11) */
 21312                        ;			for (i = 0; i < ss; i += 4) st_d
                    word(buf + i, sum);		/* Fill with checksum value */
 21313                        ;			if (disk_write(pdrv, buf, sect++
                    , 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 21314                        ;		}
 21315                        ;
 21316                        ;	} else
 21317                        ;#endif	/* FF_FS_EXFAT */
 21318                        ;	{	/* Create an FAT/FAT32 volume */
 21319                        ;		do {
 21320                        ;			pau = sz_au;
 21321                        ;			/* Pre-determine number of clust
                    ers and FAT sub-type */
 21322                        ;			if (fsty == FS_FAT32) {	/* FAT32
                     volume */
 21323                        ;				if (pau == 0) {	/* AU au
                    to-selection */
 21324                        ;					n = (DWORD)sz_vo
                    l / 0x20000;	/* Volume size in unit of 128KS */
 21325                        ;					for (i = 0, pau 
                    = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get f
                    rom table */
 21326                        ;				}
 21327                        ;				n_clst = (DWORD)sz_vol /
                     pau;	/* Number of clusters */
 21328                        ;				sz_fat = (n_clst * 4 + 8
                     + ss - 1) / ss;	/* FAT size [sector] */
 21329                        ;				sz_rsv = 32;	/* Numbe
                    r of reserved sectors */
 21330                        ;				sz_dir = 0;		
                    /* No static directory */
 21331                        ;				if (n_clst <= MAX_FAT16 
                    || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 21332                        ;			} else {			
                    	/* FAT volume */
 21333                        ;				if (pau == 0) {	/* au au
                    to-selection */
 21334                        ;					n = (DWORD)sz_vo
                    l / 0x1000;	/* Volume size in unit of 4KS */
 21335                        ;					for (i = 0, pau 
                    = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get f
                    rom table */
 21336                        ;				}
  Thu Dec  3 2020 22:25                                                Page 424


 21337                        ;				n_clst = (DWORD)sz_vol /
                     pau;
 21338                        ;				if (n_clst > MAX_FAT12) 
                    {
 21339                        ;					n = n_clst * 2 +
                     4;		/* FAT size [byte] */
 21340                        ;				} else {
 21341                        ;					fsty = FS_FAT12;
 21342                        ;					n = (n_clst * 3 
                    + 1) / 2 + 3;	/* FAT size [byte] */
 21343                        ;				}
 21344                        ;				sz_fat = (n + ss - 1) / 
                    ss;		/* FAT size [sector] */
 21345                        ;				sz_rsv = 1;		
                    				/* Number of reserved sectors */
 21346                        ;				sz_dir = (DWORD)n_root *
                     SZDIRE / ss;	/* Root dir size [sector] */
 21347                        ;			}
 21348                        ;			b_fat = b_vol + sz_rsv;		
                    				/* FAT base */
 21349                        ;			b_data = b_fat + sz_fat * n_fat 
                    + sz_dir;	/* Data base */
 21350                        ;
 21351                        ;			/* Align data area to erase bloc
                    k boundary (for flash memory media) */
 21352                        ;			n = (DWORD)(((b_data + sz_blk - 
                    1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next neare
                    st from current data base */
 21353                        ;			if (fsty == FS_FAT32) {		
                    /* FAT32: Move FAT */
 21354                        ;				sz_rsv += n; b_fat += n;
 21355                        ;			} else {			
                    		/* FAT: Expand FAT */
 21356                        ;				if (n % n_fat) {	
                    /* Adjust fractional error if needed */
 21357                        ;					n--; sz_rsv++; b
                    _fat++;
 21358                        ;				}
 21359                        ;				sz_fat += n / n_fat;
 21360                        ;			}
 21361                        ;
 21362                        ;			/* Determine number of clusters 
                    and final check of validity of the FAT sub-type */
 21363                        ;			if (sz_vol < b_data + pau * 16 -
                     b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small vol
                    ume? */
 21364                        ;			n_clst = ((DWORD)sz_vol - sz_rsv
                     - sz_fat * n_fat - sz_dir) / pau;
 21365                        ;			if (fsty == FS_FAT32) {
 21366                        ;				if (n_clst <= MAX_FAT16)
                     {	/* Too few clusters for FAT32? */
 21367                        ;					if (sz_au == 0 &
                    & (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size a
                    nd retry */
 21368                        ;					LEAVE_MKFS(FR_MK
                    FS_ABORTED);
 21369                        ;				}
 21370                        ;			}
  Thu Dec  3 2020 22:25                                                Page 425


 21371                        ;			if (fsty == FS_FAT16) {
 21372                        ;				if (n_clst > MAX_FAT16) 
                    {	/* Too many clusters for FAT16 */
 21373                        ;					if (sz_au == 0 &
                    & (pau * 2) <= 64) {
 21374                        ;						sz_au = 
                    pau * 2; continue;		/* Adjust cluster size and retry
                     */
 21375                        ;					}
 21376                        ;					if ((fsopt & FM_
                    FAT32)) {
 21377                        ;						fsty = F
                    S_FAT32; continue;	/* Switch type to FAT32 and retry */
 21378                        ;					}
 21379                        ;					if (sz_au == 0 &
                    & (sz_au = pau * 2) <= 128) continue;	/* Adjust cluste
                    r size and retry */
 21380                        ;					LEAVE_MKFS(FR_MK
                    FS_ABORTED);
 21381                        ;				}
 21382                        ;				if  (n_clst <= MAX_FAT12
                    ) {	/* Too few clusters for FAT16 */
 21383                        ;					if (sz_au == 0 &
                    & (sz_au = pau * 2) <= 128) continue;	/* Adjust cluste
                    r size and retry */
 21384                        ;					LEAVE_MKFS(FR_MK
                    FS_ABORTED);
 21385                        ;				}
 21386                        ;			}
 21387                        ;			if (fsty == FS_FAT12 && n_clst >
                     MAX_FAT12) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clus
                    ters for FAT12 */
 21388                        ;
 21389                        ;			/* Ok, it is the valid cluster c
                    onfiguration */
 21390                        ;			break;
 21391                        ;		} while (1);
 21392                        ;
 21393                        ;#if FF_USE_TRIM
 21394                        ;		lba[0] = b_vol; lba[1] = b_vol + sz_vol 
                    - 1;	/* Inform storage device that the volume area ma
                    y be erased */
 21395                        ;		disk_ioctl(pdrv, CTRL_TRIM, lba);
 21396                        ;#endif
 21397                        ;		/* Create FAT VBR */
 21398                        ;		mem_set(buf, 0, ss);
 21399                        ;		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90"
                     "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 21400                        ;		st_word(buf + BPB_BytsPerSec, ss);	
                    			/* Sector size [byte] */
 21401                        ;		buf[BPB_SecPerClus] = (BYTE)pau;	
                    			/* Cluster size [sector] */
 21402                        ;		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_r
                    sv);	/* Size of reserved area */
 21403                        ;		buf[BPB_NumFATs] = (BYTE)n_fat;		
                    			/* Number of FATs */
 21404                        ;		st_word(buf + BPB_RootEntCnt, (WORD)((fs
                    ty == FS_FAT32) ? 0 : n_root));	/* Number of root direct
  Thu Dec  3 2020 22:25                                                Page 426


                    ory entries */
 21405                        ;		if (sz_vol < 0x10000) {
 21406                        ;			st_word(buf + BPB_TotSec16, (WOR
                    D)sz_vol);	/* Volume size in 16-bit LBA */
 21407                        ;		} else {
 21408                        ;			st_dword(buf + BPB_TotSec32, (DW
                    ORD)sz_vol);	/* Volume size in 32-bit LBA */
 21409                        ;		}
 21410                        ;		buf[BPB_Media] = 0xF8;			
                    				/* Media descriptor byte */
 21411                        ;		st_word(buf + BPB_SecPerTrk, 63);	
                    			/* Number of sectors per track (for int1
                    3) */
 21412                        ;		st_word(buf + BPB_NumHeads, 255);	
                    			/* Number of heads (for int13) */
 21413                        ;		st_dword(buf + BPB_HiddSec, (DWORD)b_vol
                    );		/* Volume offset in the physical drive [sector] 
                    */
 21414                        ;		if (fsty == FS_FAT32) {
 21415                        ;			st_dword(buf + BS_VolID32, GET_F
                    ATTIME());	/* VSN */
 21416                        ;			st_dword(buf + BPB_FATSz32, sz_f
                    at);		/* FAT size [sector] */
 21417                        ;			st_dword(buf + BPB_RootClus32, 2
                    );			/* Root directory cluster # (2) */
 21418                        ;			st_word(buf + BPB_FSInfo32, 1);	
                    			/* Offset of FSINFO sector (VBR + 1) */
 21419                        ;			st_word(buf + BPB_BkBootSec32, 6
                    );			/* Offset of backup VBR (VBR + 6) */
 21420                        ;			buf[BS_DrvNum32] = 0x80;	
                    				/* Drive number (for int13) */
 21421                        ;			buf[BS_BootSig32] = 0x29;	
                    				/* Extended boot signature */
 21422                        ;			mem_cpy(buf + BS_VolLab32, "NO N
                    AME    " "FAT32   ", 19);	/* Volume label, FAT signature *
                    /
 21423                        ;		} else {
 21424                        ;			st_dword(buf + BS_VolID, GET_FAT
                    TIME());	/* VSN */
 21425                        ;			st_word(buf + BPB_FATSz16, (WORD
                    )sz_fat);	/* FAT size [sector] */
 21426                        ;			buf[BS_DrvNum] = 0x80;		
                    				/* Drive number (for int13) */
 21427                        ;			buf[BS_BootSig] = 0x29;		
                    				/* Extended boot signature */
 21428                        ;			mem_cpy(buf + BS_VolLab, "NO NAM
                    E    " "FAT     ", 19);	/* Volume label, FAT signature *
                    /
 21429                        ;		}
 21430                        ;		st_word(buf + BS_55AA, 0xAA55);		
                    			/* Signature (offset is fixed here regar
                    dless of sector size) */
 21431                        ;		if (disk_write(pdrv, buf, b_vol, 1) != R
                    ES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR s
                    ector */
 21432                        ;
 21433                        ;		/* Create FSINFO record if needed */
 21434                        ;		if (fsty == FS_FAT32) {
  Thu Dec  3 2020 22:25                                                Page 427


 21435                        ;			disk_write(pdrv, buf, b_vol + 6,
                     1);		/* Write backup VBR (VBR + 6) */
 21436                        ;			mem_set(buf, 0, ss);
 21437                        ;			st_dword(buf + FSI_LeadSig, 0x41
                    615252);
 21438                        ;			st_dword(buf + FSI_StrucSig, 0x6
                    1417272);
 21439                        ;			st_dword(buf + FSI_Free_Count, n
                    _clst - 1);	/* Number of free clusters */
 21440                        ;			st_dword(buf + FSI_Nxt_Free, 2);
                    			/* Last allocated cluster# */
 21441                        ;			st_word(buf + BS_55AA, 0xAA55);
 21442                        ;			disk_write(pdrv, buf, b_vol + 7,
                     1);		/* Write backup FSINFO (VBR + 7) */
 21443                        ;			disk_write(pdrv, buf, b_vol + 1,
                     1);		/* Write original FSINFO (VBR + 1) */
 21444                        ;		}
 21445                        ;
 21446                        ;		/* Initialize FAT area */
 21447                        ;		mem_set(buf, 0, sz_buf * ss);
 21448                        ;		sect = b_fat;		/* FAT start sec
                    tor */
 21449                        ;		for (i = 0; i < n_fat; i++) {		
                    	/* Initialize FATs each */
 21450                        ;			if (fsty == FS_FAT32) {
 21451                        ;				st_dword(buf + 0, 0xFFFF
                    FFF8);	/* FAT[0] */
 21452                        ;				st_dword(buf + 4, 0xFFFF
                    FFFF);	/* FAT[1] */
 21453                        ;				st_dword(buf + 8, 0x0FFF
                    FFFF);	/* FAT[2] (root directory) */
 21454                        ;			} else {
 21455                        ;				st_dword(buf + 0, (fsty 
                    == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* FAT[0] and FA
                    T[1] */
 21456                        ;			}
 21457                        ;			nsect = sz_fat;		/* Numbe
                    r of FAT sectors */
 21458                        ;			do {	/* Fill FAT sectors */
 21459                        ;				n = (nsect > sz_buf) ? s
                    z_buf : nsect;
 21460                        ;				if (disk_write(pdrv, buf
                    , sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 21461                        ;				mem_set(buf, 0, ss);	
                    /* Rest of FAT all are cleared */
 21462                        ;				sect += n; nsect -= n;
 21463                        ;			} while (nsect);
 21464                        ;		}
 21465                        ;
 21466                        ;		/* Initialize root directory (fill with 
                    zero) */
 21467                        ;		nsect = (fsty == FS_FAT32) ? pau : sz_di
                    r;	/* Number of root directory sectors */
 21468                        ;		do {
 21469                        ;			n = (nsect > sz_buf) ? sz_buf : 
                    nsect;
 21470                        ;			if (disk_write(pdrv, buf, sect, 
                    (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
  Thu Dec  3 2020 22:25                                                Page 428


 21471                        ;			sect += n; nsect -= n;
 21472                        ;		} while (nsect);
 21473                        ;	}
 21474                        ;
 21475                        ;	/* A FAT volume has been created here */
 21476                        ;
 21477                        ;	/* Determine system ID in the MBR partition tabl
                    e */
 21478                        ;	if (FF_FS_EXFAT && fsty == FS_EXFAT) {
 21479                        ;		sys = 0x07;			/* exFAT
                     */
 21480                        ;	} else {
 21481                        ;		if (fsty == FS_FAT32) {
 21482                        ;			sys = 0x0C;		/* FAT32
                    X */
 21483                        ;		} else {
 21484                        ;			if (sz_vol >= 0x10000) {
 21485                        ;				sys = 0x06;	/* FAT12
                    /16 (large) */
 21486                        ;			} else {
 21487                        ;				sys = (fsty == FS_FAT16)
                     ? 0x04 : 0x01;	/* FAT16 : FAT12 */
 21488                        ;			}
 21489                        ;		}
 21490                        ;	}
 21491                        ;
 21492                        ;	/* Update partition information */
 21493                        ;	if (FF_MULTI_PARTITION && ipart != 0) {	/* Volum
                    e is in the existing partition */
 21494                        ;		if (!FF_LBA64 || !(fsopt & 0x80)) {
 21495                        ;			/* Update system ID in the parti
                    tion table */
 21496                        ;			if (disk_read(pdrv, buf, 0, 1) !
                    = RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Read the MBR */
 21497                        ;			buf[MBR_Table + (ipart - 1) * SZ
                    _PTE + PTE_System] = sys;			/* Set system ID
                     */
 21498                        ;			if (disk_write(pdrv, buf, 0, 1) 
                    != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it back to the 
                    MBR */
 21499                        ;		}
 21500                        ;	} else {					
                    			/* Volume as a new single partition */
 21501                        ;		if (!(fsopt & FM_SFD)) {	/* Creat
                    e partition table if not in SFD */
 21502                        ;			lba[0] = sz_vol, lba[1] = 0;
 21503                        ;			fr = create_partition(pdrv, lba,
                     sys, buf);
 21504                        ;			if (fr != FR_OK) LEAVE_MKFS(fr);
 21505                        ;		}
 21506                        ;	}
 21507                        ;
 21508                        ;	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LE
                    AVE_MKFS(FR_DISK_ERR);
 21509                        ;
 21510                        ;	LEAVE_MKFS(FR_OK);
 21511                        ;}
 21512                        ;
  Thu Dec  3 2020 22:25                                                Page 429


 21513                        ;
 21514                        ;
 21515                        ;
 21516                        ;#if FF_MULTI_PARTITION
 21517                        ;/*-----------------------------------------------
                    ------------------------*/
 21518                        ;/* Create Partition Table on the Physical Drive  
                                            */
 21519                        ;/*-----------------------------------------------
                    ------------------------*/
 21520                        ;
 21521                        ;FRESULT f_fdisk (
 21522                        ;	BYTE pdrv,			/* Physical driv
                    e number */
 21523                        ;	const LBA_t ptbl[],	/* Pointer to the size t
                    able for each partitions */
 21524                        ;	void* work			/* Pointer to th
                    e working buffer (null: use heap memory) */
 21525                        ;)
 21526                        ;{
 21527                        ;	BYTE *buf = (BYTE*)work;
 21528                        ;	DSTATUS stat;
 21529                        ;
 21530                        ;
 21531                        ;	stat = disk_initialize(pdrv);
 21532                        ;	if (stat & STA_NOINIT) return FR_NOT_READY;
 21533                        ;	if (stat & STA_PROTECT) return FR_WRITE_PROTECTE
                    D;
 21534                        ;#if FF_USE_LFN == 3
 21535                        ;	if (!buf) buf = ff_memalloc(FF_MAX_SS);	/* Use h
                    eap memory for working buffer */
 21536                        ;#endif
 21537                        ;	if (!buf) return FR_NOT_ENOUGH_CORE;
 21538                        ;
 21539                        ;	LEAVE_MKFS(create_partition(pdrv, ptbl, 0x07, bu
                    f));
 21540                        ;}
 21541                        ;
 21542                        ;#endif /* FF_MULTI_PARTITION */
 21543                        ;#endif /* !FF_FS_READONLY && FF_USE_MKFS */
 21544                        ;
 21545                        ;
 21546                        ;
 21547                        ;
 21548                        ;#if FF_USE_STRFUNC
 21549                        ;#if FF_USE_LFN && FF_LFN_UNICODE && (FF_STRF_ENCO
                    DE < 0 || FF_STRF_ENCODE > 3)
 21550                        ;#error Wrong FF_STRF_ENCODE setting
 21551                        ;#endif
 21552                        ;/*-----------------------------------------------
                    ------------------------*/
 21553                        ;/* Get a String from the File                    
                                            */
 21554                        ;/*-----------------------------------------------
                    ------------------------*/
 21555                        ;
 21556                        ;TCHAR* f_gets (
 21557                        ;	TCHAR* buff,	/* Pointer to the buffer to stor
  Thu Dec  3 2020 22:25                                                Page 430


                    e read string */
 21558                        ;	int len,		/* Size of string buffer
                     (items) */
 21559                        ;	FIL* fp			/* Pointer to the file o
                    bject */
 21560                        ;)
 21561                        ;{
 21562                        	.line	6451
 21563                        	.line	6456
 21564                        	FFDOS
 21565                        	xdef	~~f_gets
 21566                        	func
 21567                        	.function	6456
 21568                        ~~f_gets:
 21569                        	longa	on
 21570                        	longi	on
 21571 08:501C: 3B           	tsc
 21572 08:501D: 38           	sec
 21573 08:501E: E9 14 00     	sbc	#L795
 21574 08:5021: 1B           	tcs
 21575 08:5022: 0B           	phd
 21576 08:5023: 5B           	tcd
 21577             00000004   buff_0	set	4
 21578             00000008   len_0	set	8
 21579             0000000A   fp_0	set	10
 21580                        	.block	6456
 21581                        ;	int nc = 0;
 21582                        ;	TCHAR *p = buff;
 21583                        ;	BYTE s[4];
 21584                        ;	UINT rc;
 21585                        ;	DWORD dc;
 21586                        ;#if FF_USE_LFN && FF_LFN_UNICODE && FF_STRF_ENCOD
                    E <= 2
 21587                        ;	WCHAR wc;
 21588                        ;#endif
 21589                        ;#if FF_USE_LFN && FF_LFN_UNICODE && FF_STRF_ENCOD
                    E == 3
 21590                        ;	UINT ct;
 21591                        ;#endif
 21592                        ;
 21593                        ;#if FF_USE_LFN && FF_LFN_UNICODE			
                    /* With code conversion (Unicode API) */
 21594                        ;	/* Make a room for the character and terminator 
                     */
 21595                        ;	if (FF_LFN_UNICODE == 1) len -= (FF_STRF_ENCODE 
                    == 0) ? 1 : 2;
 21596                        ;	if (FF_LFN_UNICODE == 2) len -= (FF_STRF_ENCODE 
                    == 0) ? 3 : 4;
 21597                        ;	if (FF_LFN_UNICODE == 3) len -= 1;
 21598                        ;	while (nc < len) {
 21599                        ;#if FF_STRF_ENCODE == 0				
                    /* Read a character in ANSI/OEM */
 21600                        ;		f_read(fp, s, 1, &rc);		/* Get a
                     code unit */
 21601                        ;		if (rc != 1) break;			
                    /* EOF? */
 21602                        ;		wc = s[0];
 21603                        ;		if (dbc_1st((BYTE)wc)) {	/* DBC 1
  Thu Dec  3 2020 22:25                                                Page 431


                    st byte? */
 21604                        ;			f_read(fp, s, 1, &rc);	/* Get D
                    BC 2nd byte */
 21605                        ;			if (rc != 1 || !dbc_2nd(s[0])) c
                    ontinue;	/* Wrong code? */
 21606                        ;			wc = wc << 8 | s[0];
 21607                        ;		}
 21608                        ;		dc = ff_oem2uni(wc, CODEPAGE);	/* OEM -
                    -> */
 21609                        ;		if (dc == 0) continue;
 21610                        ;#elif FF_STRF_ENCODE == 1 || FF_STRF_ENCODE == 2 
                    	/* Read a character in UTF-16LE/BE */
 21611                        ;		f_read(fp, s, 2, &rc);		/* Get a
                     code unit */
 21612                        ;		if (rc != 2) break;			
                    /* EOF? */
 21613                        ;		dc = (FF_STRF_ENCODE == 1) ? ld_word(s) 
                    : s[0] << 8 | s[1];
 21614                        ;		if (IsSurrogateL(dc)) continue;	/* Broke
                    n surrogate pair? */
 21615                        ;		if (IsSurrogateH(dc)) {		/* High 
                    surrogate? */
 21616                        ;			f_read(fp, s, 2, &rc);	/* Get l
                    ow surrogate */
 21617                        ;			if (rc != 2) break;		
                    /* EOF? */
 21618                        ;			wc = (FF_STRF_ENCODE == 1) ? ld_
                    word(s) : s[0] << 8 | s[1];
 21619                        ;			if (!IsSurrogateL(wc)) continue;
                    	/* Broken surrogate pair? */
 21620                        ;			dc = ((dc & 0x3FF) + 0x40) << 10
                     | (wc & 0x3FF);	/* Merge surrogate pair */
 21621                        ;		}
 21622                        ;#else	/* Read a character in UTF-8 */
 21623                        ;		f_read(fp, s, 1, &rc);		/* Get a
                     code unit */
 21624                        ;		if (rc != 1) break;			
                    /* EOF? */
 21625                        ;		dc = s[0];
 21626                        ;		if (dc >= 0x80) {			
                    /* Multi-byte sequence? */
 21627                        ;			ct = 0;
 21628                        ;			if ((dc & 0xE0) == 0xC0) { dc &=
                     0x1F; ct = 1; }	/* 2-byte sequence? */
 21629                        ;			if ((dc & 0xF0) == 0xE0) { dc &=
                     0x0F; ct = 2; }	/* 3-byte sequence? */
 21630                        ;			if ((dc & 0xF8) == 0xF0) { dc &=
                     0x07; ct = 3; }	/* 4-byte sequence? */
 21631                        ;			if (ct == 0) continue;
 21632                        ;			f_read(fp, s, ct, &rc);		
                    /* Get trailing bytes */
 21633                        ;			if (rc != ct) break;
 21634                        ;			rc = 0;
 21635                        ;			do {	/* Merge the byte sequen
                    ce */
 21636                        ;				if ((s[rc] & 0xC0) != 0x
                    80) break;
 21637                        ;				dc = dc << 6 | (s[rc] & 
  Thu Dec  3 2020 22:25                                                Page 432


                    0x3F);
 21638                        ;			} while (++rc < ct);
 21639                        ;			if (rc != ct || dc < 0x80 || IsS
                    urrogate(dc) || dc >= 0x110000) continue;	/* Wrong encodin
                    g? */
 21640                        ;		}
 21641                        ;#endif
 21642                        ;		/* A code point is avaialble in dc to be
                     output */
 21643                        ;
 21644                        ;		if (FF_USE_STRFUNC == 2 && dc == '\r') c
                    ontinue;	/* Strip \r off if needed */
 21645                        ;#if FF_LFN_UNICODE == 1	|| FF_LFN_UNICODE == 3	
                    /* Output it in UTF-16/32 encoding */
 21646                        ;		if (FF_LFN_UNICODE == 1 && dc >= 0x10000
                    ) {	/* Out of BMP at UTF-16? */
 21647                        ;			*p++ = (TCHAR)(0xD800 | ((dc >> 
                    10) - 0x40)); nc++;	/* Make and output high surrogate */
 21648                        ;			dc = 0xDC00 | (dc & 0x3FF);	
                    	/* Make low surrogate */
 21649                        ;		}
 21650                        ;		*p++ = (TCHAR)dc; nc++;
 21651                        ;		if (dc == '\n') break;	/* End of line? 
                    */
 21652                        ;#elif FF_LFN_UNICODE == 2		/* Outpu
                    t it in UTF-8 encoding */
 21653                        ;		if (dc < 0x80) {	/* Single byte? 
                    */
 21654                        ;			*p++ = (TCHAR)dc;
 21655                        ;			nc++;
 21656                        ;			if (dc == '\n') break;	/* End o
                    f line? */
 21657                        ;		} else {
 21658                        ;			if (dc < 0x800) {		
                    /* 2-byte sequence? */
 21659                        ;				*p++ = (TCHAR)(0xC0 | (d
                    c >> 6 & 0x1F));
 21660                        ;				*p++ = (TCHAR)(0x80 | (d
                    c >> 0 & 0x3F));
 21661                        ;				nc += 2;
 21662                        ;			} else {
 21663                        ;				if (dc < 0x10000) {	
                    /* 3-byte sequence? */
 21664                        ;					*p++ = (TCHAR)(0
                    xE0 | (dc >> 12 & 0x0F));
 21665                        ;					*p++ = (TCHAR)(0
                    x80 | (dc >> 6 & 0x3F));
 21666                        ;					*p++ = (TCHAR)(0
                    x80 | (dc >> 0 & 0x3F));
 21667                        ;					nc += 3;
 21668                        ;				} else {		
                    	/* 4-byte sequence? */
 21669                        ;					*p++ = (TCHAR)(0
                    xF0 | (dc >> 18 & 0x07));
 21670                        ;					*p++ = (TCHAR)(0
                    x80 | (dc >> 12 & 0x3F));
 21671                        ;					*p++ = (TCHAR)(0
                    x80 | (dc >> 6 & 0x3F));
  Thu Dec  3 2020 22:25                                                Page 433


 21672                        ;					*p++ = (TCHAR)(0
                    x80 | (dc >> 0 & 0x3F));
 21673                        ;					nc += 4;
 21674                        ;				}
 21675                        ;			}
 21676                        ;		}
 21677                        ;#endif
 21678                        ;	}
 21679                        ;
 21680                        ;#else			/* Byte-by-byte read wit
                    hout any conversion (ANSI/OEM API) */
 21681                        ;	len -= 1;	/* Make a room for the terminato
                    r */
 21682             00000000   nc_1	set	0
 21683             00000002   p_1	set	2
 21684             00000006   s_1	set	6
 21685             0000000A   rc_1	set	10
 21686             0000000C   dc_1	set	12
 21687                        	.sym	nc,0,5,1,16
 21688                        	.sym	p,2,142,1,32
 21689                        	.sym	s,6,110,1,0,4
 21690                        	.sym	rc,10,16,1,16
 21691                        	.sym	dc,12,18,1,32
 21692                        	.sym	buff,4,142,6,32
 21693                        	.sym	len,8,5,6,16
 21694                        	.sym	fp,10,138,6,32,82
 21695 08:5024: 64 05        	stz	<L796+nc_1
 21696 08:5026: A5 18        	lda	<L795+buff_0
 21697 08:5028: 85 07        	sta	<L796+p_1
 21698 08:502A: A5 1A        	lda	<L795+buff_0+2
 21699 08:502C: 85 09        	sta	<L796+p_1+2
 21700                        	.line	6557
 21701 08:502E: C6 1C        	dec	<L795+len_0
 21702                        ;	while (nc < len) {
 21703                        	.line	6558
 21704                        L10427:
 21705 08:5030: 38           	sec
 21706 08:5031: A5 05        	lda	<L796+nc_1
 21707 08:5033: E5 1C        	sbc	<L795+len_0
 21708 08:5035: 70 03        	bvs	L798
 21709 08:5037: 49 00 80     	eor	#$8000
 21710                        L798:
 21711 08:503A: 10 03        	bpl	L799
 21712 08:503C: 82 68 00     	brl	L10428
 21713                        L799:
 21714                        	.line	6558
 21715                        ;		f_read(fp, s, 1, &rc);	/* Get a byte */
 21716                        	.line	6559
 21717 08:503F: F4 00 00     	pea	#0
 21718 08:5042: 18           	clc
 21719 08:5043: 7B           	tdc
 21720 08:5044: 69 0F 00     	adc	#<L796+rc_1
 21721 08:5047: 48           	pha
 21722 08:5048: F4 01 00     	pea	#<$1
 21723 08:504B: F4 00 00     	pea	#0
 21724 08:504E: 18           	clc
 21725 08:504F: 7B           	tdc
 21726 08:5050: 69 0B 00     	adc	#<L796+s_1
  Thu Dec  3 2020 22:25                                                Page 434


 21727 08:5053: 48           	pha
 21728 08:5054: D4 20        	pei	<L795+fp_0+2
 21729 08:5056: D4 1E        	pei	<L795+fp_0
 21730 08:5058: 22 75 33 08  	jsl	~~f_read
 21731                        ;		if (rc != 1) break;		/* EOF? 
                    */
 21732                        	.line	6560
 21733 08:505C: A5 0F        	lda	<L796+rc_1
 21734 08:505E: C9 01 00     	cmp	#<$1
 21735 08:5061: F0 03        	beq	L800
 21736 08:5063: 82 41 00     	brl	L10428
 21737                        L800:
 21738                        ;		dc = s[0];
 21739                        	.line	6561
 21740 08:5066: A5 0B        	lda	<L796+s_1
 21741 08:5068: 29 FF 00     	and	#$ff
 21742 08:506B: 85 11        	sta	<L796+dc_1
 21743 08:506D: 64 13        	stz	<L796+dc_1+2
 21744                        ;		if (FF_USE_STRFUNC == 2 && dc == '\r') c
                    ontinue;
 21745                        	.line	6562
 21746 08:506F: 82 11 00     	brl	L801
 21747 08:5072: A5 11        	lda	<L796+dc_1
 21748 08:5074: C9 0D 00     	cmp	#<$d
 21749 08:5077: D0 05        	bne	L802
 21750 08:5079: A5 13        	lda	<L796+dc_1+2
 21751 08:507B: C9 00 00     	cmp	#^$d
 21752                        L802:
 21753 08:507E: D0 03        	bne	L803
 21754 08:5080: 82 AD FF     	brl	L10427
 21755                        L803:
 21756                        L801:
 21757                        ;		*p++ = (TCHAR)dc; nc++;
 21758                        	.line	6563
 21759 08:5083: E2 20        	sep	#$20
 21760                        	longa	off
 21761 08:5085: A5 11        	lda	<L796+dc_1
 21762 08:5087: 87 07        	sta	[<L796+p_1]
 21763 08:5089: C2 20        	rep	#$20
 21764                        	longa	on
 21765 08:508B: E6 07        	inc	<L796+p_1
 21766 08:508D: D0 02        	bne	L804
 21767 08:508F: E6 09        	inc	<L796+p_1+2
 21768                        L804:
 21769                        	.line	6563
 21770 08:5091: E6 05        	inc	<L796+nc_1
 21771                        ;		if (dc == '\n') break;
 21772                        	.line	6564
 21773 08:5093: A5 11        	lda	<L796+dc_1
 21774 08:5095: C9 0A 00     	cmp	#<$a
 21775 08:5098: D0 05        	bne	L805
 21776 08:509A: A5 13        	lda	<L796+dc_1+2
 21777 08:509C: C9 00 00     	cmp	#^$a
 21778                        L805:
 21779 08:509F: D0 03        	bne	L806
 21780 08:50A1: 82 03 00     	brl	L10428
 21781                        L806:
 21782                        ;	}
  Thu Dec  3 2020 22:25                                                Page 435


 21783                        	.line	6565
 21784 08:50A4: 82 89 FF     	brl	L10427
 21785                        L10428:
 21786                        ;#endif
 21787                        ;
 21788                        ;	*p = 0;		/* Terminate the string */
 21789                        	.line	6568
 21790 08:50A7: E2 20        	sep	#$20
 21791                        	longa	off
 21792 08:50A9: A9 00        	lda	#$0
 21793 08:50AB: 87 07        	sta	[<L796+p_1]
 21794 08:50AD: C2 20        	rep	#$20
 21795                        	longa	on
 21796                        ;	return nc ? buff : 0;	/* When no data read due
                     to EOF or error, return with error. */
 21797                        	.line	6569
 21798 08:50AF: A5 05        	lda	<L796+nc_1
 21799 08:50B1: D0 03        	bne	L808
 21800 08:50B3: 82 06 00     	brl	L807
 21801                        L808:
 21802 08:50B6: A6 1A        	ldx	<L795+buff_0+2
 21803 08:50B8: A5 18        	lda	<L795+buff_0
 21804 08:50BA: 80 07        	bra	L809
 21805                        L807:
 21806 08:50BC: A9 00 00     	lda	#$0
 21807 08:50BF: AA           	tax
 21808 08:50C0: A9 00 00     	lda	#$0
 21809                        L809:
 21810 08:50C3: 85 01        	sta	<R0
 21811 08:50C5: 86 03        	stx	<R0+2
 21812 08:50C7: A6 03        	ldx	<R0+2
 21813 08:50C9: A5 01        	lda	<R0
 21814                        L810:
 21815 08:50CB: A8           	tay
 21816 08:50CC: A5 16        	lda	<L795+2
 21817 08:50CE: 85 20        	sta	<L795+2+10
 21818 08:50D0: A5 15        	lda	<L795+1
 21819 08:50D2: 85 1F        	sta	<L795+1+10
 21820 08:50D4: 2B           	pld
 21821 08:50D5: 3B           	tsc
 21822 08:50D6: 18           	clc
 21823 08:50D7: 69 1E 00     	adc	#L795+10
 21824 08:50DA: 1B           	tcs
 21825 08:50DB: 98           	tya
 21826 08:50DC: 6B           	rtl
 21827                        ;}
 21828                        	.line	6570
 21829                        	.endblock	6570
 21830             00000014   L795	equ	20
 21831             00000005   L796	equ	5
 21832 08:50DD:              	ends
 21833                        	efunc
 21834                        	.endfunc	6570,5,20
 21835                        	.line	6570
 21836                        ;
 21837                        ;
 21838                        ;
 21839                        ;
  Thu Dec  3 2020 22:25                                                Page 436


 21840                        ;#if !FF_FS_READONLY
 21841                        ;#include <stdarg.h>
 21842                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdarg.h",0
 21843                        	.line	51
 21844                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ff.c",6576
 21845                        ;/*-----------------------------------------------
                    ------------------------*/
 21846                        ;/* Put a Character to the File (sub-functions)   
                                            */
 21847                        ;/*-----------------------------------------------
                    ------------------------*/
 21848                        ;
 21849                        ;/* Putchar output buffer and work area */
 21850                        ;
 21851                        ;typedef struct {
 21852                        ;	FIL *fp;		/* Ptr to the writing fi
                    le */
 21853                        ;	int idx, nchr;	/* Write index of buf[] (-1:erro
                    r), number of encoding units written */
 21854                        ;#if FF_USE_LFN && FF_LFN_UNICODE == 1
 21855                        ;	WCHAR hs;
 21856                        ;#elif FF_USE_LFN && FF_LFN_UNICODE == 2
 21857                        ;	BYTE bs[4];
 21858                        ;	UINT wi, ct;
 21859                        ;#endif
 21860                        ;	BYTE buf[64];	/* Write buffer */
 21861                        ;} putbuff;
 21862                        	.stag	fake86_,576,86
 21863                        	.member	fp,0,138,8,32,82
 21864                        	.member	idx,32,5,8,16
 21865                        	.member	nchr,48,5,8,16
 21866                        	.member	buf,64,110,8,0,64
 21867                        	.eos
 21868                        ;
 21869                        ;
 21870                        ;/* Buffered write with code conversion */
 21871                        ;
 21872                        ;static void putc_bfd (putbuff* pb, TCHAR c)
 21873                        ;{
 21874                        	.line	6598
 21875                        	.line	6599
 21876                        	FFDOS
 21877                        	func
 21878                        	.function	6599
 21879                        ~~putc_bfd:
 21880                        	longa	on
 21881                        	longi	on
 21882 08:50DD: 3B           	tsc
 21883 08:50DE: 38           	sec
 21884 08:50DF: E9 0A 00     	sbc	#L811
 21885 08:50E2: 1B           	tcs
 21886 08:50E3: 0B           	phd
 21887 08:50E4: 5B           	tcd
 21888             00000004   pb_0	set	4
 21889             00000008   c_0	set	8
 21890                        	.block	6599
  Thu Dec  3 2020 22:25                                                Page 437


 21891                        ;	UINT n;
 21892                        ;	int i, nc;
 21893                        ;#if FF_USE_LFN && FF_LFN_UNICODE
 21894                        ;	WCHAR hs, wc;
 21895                        ;#if FF_LFN_UNICODE == 2
 21896                        ;	DWORD dc;
 21897                        ;	TCHAR *tp;
 21898                        ;#endif
 21899                        ;#endif
 21900                        ;
 21901                        ;	if (FF_USE_STRFUNC == 2 && c == '\n') {	 /* LF -
                    > CRLF conversion */
 21902             00000000   n_1	set	0
 21903             00000002   i_1	set	2
 21904             00000004   nc_1	set	4
 21905                        	.sym	n,0,16,1,16
 21906                        	.sym	i,2,5,1,16
 21907                        	.sym	nc,4,5,1,16
 21908                        	.sym	pb,4,138,6,32,86
 21909                        	.sym	c,8,14,6,8
 21910                        	.line	6610
 21911 08:50E5: 82 18 00     	brl	L10429
 21912 08:50E8: E2 20        	sep	#$20
 21913                        	longa	off
 21914 08:50EA: A5 12        	lda	<L811+c_0
 21915 08:50EC: C9 0A        	cmp	#<$a
 21916 08:50EE: C2 20        	rep	#$20
 21917                        	longa	on
 21918 08:50F0: F0 03        	beq	L814
 21919 08:50F2: 82 0B 00     	brl	L10429
 21920                        L814:
 21921                        	.line	6610
 21922                        ;		putc_bfd(pb, '\r');
 21923                        	.line	6611
 21924 08:50F5: F4 0D 00     	pea	#<$d
 21925 08:50F8: D4 10        	pei	<L811+pb_0+2
 21926 08:50FA: D4 0E        	pei	<L811+pb_0
 21927 08:50FC: 22 DD 50 08  	jsl	~~putc_bfd
 21928                        ;	}
 21929                        	.line	6612
 21930                        ;
 21931                        ;	i = pb->idx;			/* Write index o
                    f pb->buf[] */
 21932                        L10429:
 21933                        	.line	6614
 21934 08:5100: A0 04 00     	ldy	#$4
 21935 08:5103: B7 0E        	lda	[<L811+pb_0],Y
 21936 08:5105: 85 07        	sta	<L812+i_1
 21937                        ;	if (i < 0) return;
 21938                        	.line	6615
 21939 08:5107: A5 07        	lda	<L812+i_1
 21940 08:5109: 30 03        	bmi	L815
 21941 08:510B: 82 10 00     	brl	L10430
 21942                        L815:
 21943                        	.line	6615
 21944                        L816:
 21945 08:510E: A5 0C        	lda	<L811+2
 21946 08:5110: 85 12        	sta	<L811+2+6
  Thu Dec  3 2020 22:25                                                Page 438


 21947 08:5112: A5 0B        	lda	<L811+1
 21948 08:5114: 85 11        	sta	<L811+1+6
 21949 08:5116: 2B           	pld
 21950 08:5117: 3B           	tsc
 21951 08:5118: 18           	clc
 21952 08:5119: 69 10 00     	adc	#L811+6
 21953 08:511C: 1B           	tcs
 21954 08:511D: 6B           	rtl
 21955                        ;	nc = pb->nchr;			/* Write unit co
                    unter */
 21956                        L10430:
 21957                        	.line	6616
 21958 08:511E: A0 06 00     	ldy	#$6
 21959 08:5121: B7 0E        	lda	[<L811+pb_0],Y
 21960 08:5123: 85 09        	sta	<L812+nc_1
 21961                        ;
 21962                        ;#if FF_USE_LFN && FF_LFN_UNICODE
 21963                        ;#if FF_LFN_UNICODE == 1		/* UTF-16 input 
                    */
 21964                        ;	if (IsSurrogateH(c)) {	/* High surrogate? */
 21965                        ;		pb->hs = c; return;	/* Save it for n
                    ext */
 21966                        ;	}
 21967                        ;	hs = pb->hs; pb->hs = 0;
 21968                        ;	if (hs != 0) {			/* There is a le
                    ading high surrogate */
 21969                        ;		if (!IsSurrogateL(c)) hs = 0;	/* Disca
                    rd high surrogate if not a surrogate pair */
 21970                        ;	} else {
 21971                        ;		if (IsSurrogateL(c)) return;	/* Disca
                    rd stray low surrogate */
 21972                        ;	}
 21973                        ;	wc = c;
 21974                        ;#elif FF_LFN_UNICODE == 2	/* UTF-8 input *
                    /
 21975                        ;	for (;;) {
 21976                        ;		if (pb->ct == 0) {	/* Out of multi-
                    byte sequence? */
 21977                        ;			pb->bs[pb->wi = 0] = (BYTE)c;	
                    /* Save 1st byte */
 21978                        ;			if ((BYTE)c < 0x80) break;	
                    				/* Single byte? */
 21979                        ;			if (((BYTE)c & 0xE0) == 0xC0) pb
                    ->ct = 1;	/* 2-byte sequence? */
 21980                        ;			if (((BYTE)c & 0xF0) == 0xE0) pb
                    ->ct = 2;	/* 3-byte sequence? */
 21981                        ;			if (((BYTE)c & 0xF1) == 0xF0) pb
                    ->ct = 3;	/* 4-byte sequence? */
 21982                        ;			return;
 21983                        ;		} else {				
                    /* In the multi-byte sequence */
 21984                        ;			if (((BYTE)c & 0xC0) != 0x80) {	
                    /* Broken sequence? */
 21985                        ;				pb->ct = 0; continue;
 21986                        ;			}
 21987                        ;			pb->bs[++pb->wi] = (BYTE)c;	
                    /* Save the trailing byte */
 21988                        ;			if (--pb->ct == 0) break;	
  Thu Dec  3 2020 22:25                                                Page 439


                    /* End of multi-byte sequence? */
 21989                        ;			return;
 21990                        ;		}
 21991                        ;	}
 21992                        ;	tp = (TCHAR*)pb->bs;
 21993                        ;	dc = tchar2uni(&tp);	/* UTF-8 ==> UTF-16 */
 21994                        ;	if (dc == 0xFFFFFFFF) return;	/* Wrong code? *
                    /
 21995                        ;	wc = (WCHAR)dc;
 21996                        ;	hs = (WCHAR)(dc >> 16);
 21997                        ;#elif FF_LFN_UNICODE == 3	/* UTF-32 input 
                    */
 21998                        ;	if (IsSurrogate(c) || c >= 0x110000) return;	
                    /* Discard invalid code */
 21999                        ;	if (c >= 0x10000) {		/* Out of BMP? *
                    /
 22000                        ;		hs = (WCHAR)(0xD800 | ((c >> 10) - 0x40)
                    ); 	/* Make high surrogate */
 22001                        ;		wc = 0xDC00 | (c & 0x3FF);		
                    			/* Make low surrogate */
 22002                        ;	} else {
 22003                        ;		hs = 0;
 22004                        ;		wc = (WCHAR)c;
 22005                        ;	}
 22006                        ;#endif
 22007                        ;	/* A code point in UTF-16 is available in hs and
                     wc */
 22008                        ;
 22009                        ;#if FF_STRF_ENCODE == 1		/* Write a code 
                    point in UTF-16LE */
 22010                        ;	if (hs != 0) {	/* Surrogate pair? */
 22011                        ;		st_word(&pb->buf[i], hs);
 22012                        ;		i += 2;
 22013                        ;		nc++;
 22014                        ;	}
 22015                        ;	st_word(&pb->buf[i], wc);
 22016                        ;	i += 2;
 22017                        ;#elif FF_STRF_ENCODE == 2	/* Write a code 
                    point in UTF-16BE */
 22018                        ;	if (hs != 0) {	/* Surrogate pair? */
 22019                        ;		pb->buf[i++] = (BYTE)(hs >> 8);
 22020                        ;		pb->buf[i++] = (BYTE)hs;
 22021                        ;		nc++;
 22022                        ;	}
 22023                        ;	pb->buf[i++] = (BYTE)(wc >> 8);
 22024                        ;	pb->buf[i++] = (BYTE)wc;
 22025                        ;#elif FF_STRF_ENCODE == 3	/* Write a code 
                    point in UTF-8 */
 22026                        ;	if (hs != 0) {	/* 4-byte sequence? */
 22027                        ;		nc += 3;
 22028                        ;		hs = (hs & 0x3FF) + 0x40;
 22029                        ;		pb->buf[i++] = (BYTE)(0xF0 | hs >> 8);
 22030                        ;		pb->buf[i++] = (BYTE)(0x80 | (hs >> 2 & 
                    0x3F));
 22031                        ;		pb->buf[i++] = (BYTE)(0x80 | (hs & 3) <<
                     4 | (wc >> 6 & 0x0F));
 22032                        ;		pb->buf[i++] = (BYTE)(0x80 | (wc & 0x3F)
                    );
  Thu Dec  3 2020 22:25                                                Page 440


 22033                        ;	} else {
 22034                        ;		if (wc < 0x80) {	/* Single byte? 
                    */
 22035                        ;			pb->buf[i++] = (BYTE)wc;
 22036                        ;		} else {
 22037                        ;			if (wc < 0x800) {	/* 2-byt
                    e sequence? */
 22038                        ;				nc += 1;
 22039                        ;				pb->buf[i++] = (BYTE)(0x
                    C0 | wc >> 6);
 22040                        ;			} else {			
                    /* 3-byte sequence */
 22041                        ;				nc += 2;
 22042                        ;				pb->buf[i++] = (BYTE)(0x
                    E0 | wc >> 12);
 22043                        ;				pb->buf[i++] = (BYTE)(0x
                    80 | (wc >> 6 & 0x3F));
 22044                        ;			}
 22045                        ;			pb->buf[i++] = (BYTE)(0x80 | (wc
                     & 0x3F));
 22046                        ;		}
 22047                        ;	}
 22048                        ;#else						
                    /* Write a code point in ANSI/OEM */
 22049                        ;	if (hs != 0) return;
 22050                        ;	wc = ff_uni2oem(wc, CODEPAGE);	/* UTF-16 ==> AN
                    SI/OEM */
 22051                        ;	if (wc == 0) return;
 22052                        ;	if (wc >= 0x100) {
 22053                        ;		pb->buf[i++] = (BYTE)(wc >> 8); nc++;
 22054                        ;	}
 22055                        ;	pb->buf[i++] = (BYTE)wc;
 22056                        ;#endif
 22057                        ;
 22058                        ;#else						
                    			/* ANSI/OEM input (without re-encoding) 
                    */
 22059                        ;	pb->buf[i++] = (BYTE)c;
 22060                        	.line	6715
 22061 08:5125: 18           	clc
 22062 08:5126: A9 08 00     	lda	#$8
 22063 08:5129: 65 07        	adc	<L812+i_1
 22064 08:512B: 85 01        	sta	<R0
 22065 08:512D: E2 20        	sep	#$20
 22066                        	longa	off
 22067 08:512F: A5 12        	lda	<L811+c_0
 22068 08:5131: A4 01        	ldy	<R0
 22069 08:5133: 97 0E        	sta	[<L811+pb_0],Y
 22070 08:5135: C2 20        	rep	#$20
 22071                        	longa	on
 22072 08:5137: E6 07        	inc	<L812+i_1
 22073                        ;#endif
 22074                        ;
 22075                        ;	if (i >= (int)(sizeof pb->buf) - 4) {	/* Write
                     buffered characters to the file */
 22076                        	.line	6718
 22077 08:5139: 38           	sec
 22078 08:513A: A5 07        	lda	<L812+i_1
  Thu Dec  3 2020 22:25                                                Page 441


 22079 08:513C: E9 3C 00     	sbc	#<$3c
 22080 08:513F: 70 03        	bvs	L817
 22081 08:5141: 49 00 80     	eor	#$8000
 22082                        L817:
 22083 08:5144: 30 03        	bmi	L818
 22084 08:5146: 82 3E 00     	brl	L10431
 22085                        L818:
 22086                        	.line	6718
 22087                        ;		f_write(pb->fp, pb->buf, (UINT)i, &n);
 22088                        	.line	6719
 22089 08:5149: F4 00 00     	pea	#0
 22090 08:514C: 18           	clc
 22091 08:514D: 7B           	tdc
 22092 08:514E: 69 05 00     	adc	#<L812+n_1
 22093 08:5151: 48           	pha
 22094 08:5152: D4 07        	pei	<L812+i_1
 22095 08:5154: 18           	clc
 22096 08:5155: A9 08 00     	lda	#$8
 22097 08:5158: 65 0E        	adc	<L811+pb_0
 22098 08:515A: 85 01        	sta	<R0
 22099 08:515C: A9 00 00     	lda	#$0
 22100 08:515F: 65 10        	adc	<L811+pb_0+2
 22101 08:5161: 85 03        	sta	<R0+2
 22102 08:5163: D4 03        	pei	<R0+2
 22103 08:5165: D4 01        	pei	<R0
 22104 08:5167: A0 02 00     	ldy	#$2
 22105 08:516A: B7 0E        	lda	[<L811+pb_0],Y
 22106 08:516C: 48           	pha
 22107 08:516D: A7 0E        	lda	[<L811+pb_0]
 22108 08:516F: 48           	pha
 22109 08:5170: 22 94 37 08  	jsl	~~f_write
 22110                        ;		i = (n == (UINT)i) ? 0 : -1;
 22111                        	.line	6720
 22112 08:5174: A5 05        	lda	<L812+n_1
 22113 08:5176: C5 07        	cmp	<L812+i_1
 22114 08:5178: F0 03        	beq	L820
 22115 08:517A: 82 05 00     	brl	L819
 22116                        L820:
 22117 08:517D: A9 00 00     	lda	#$0
 22118 08:5180: 80 03        	bra	L821
 22119                        L819:
 22120 08:5182: A9 FF FF     	lda	#$ffff
 22121                        L821:
 22122 08:5185: 85 07        	sta	<L812+i_1
 22123                        ;	}
 22124                        	.line	6721
 22125                        ;	pb->idx = i;
 22126                        L10431:
 22127                        	.line	6722
 22128 08:5187: A5 07        	lda	<L812+i_1
 22129 08:5189: A0 04 00     	ldy	#$4
 22130 08:518C: 97 0E        	sta	[<L811+pb_0],Y
 22131                        ;	pb->nchr = nc + 1;
 22132                        	.line	6723
 22133 08:518E: A5 09        	lda	<L812+nc_1
 22134 08:5190: 1A           	ina
 22135 08:5191: A0 06 00     	ldy	#$6
 22136 08:5194: 97 0E        	sta	[<L811+pb_0],Y
  Thu Dec  3 2020 22:25                                                Page 442


 22137                        ;}
 22138                        	.line	6724
 22139 08:5196: 82 75 FF     	brl	L816
 22140                        	.endblock	6724
 22141             0000000A   L811	equ	10
 22142             00000005   L812	equ	5
 22143 08:5199:              	ends
 22144                        	efunc
 22145                        	.endfunc	6724,5,10
 22146                        	.line	6724
 22147                        ;
 22148                        ;
 22149                        ;/* Flush remaining characters in the buffer */
 22150                        ;
 22151                        ;static int putc_flush (putbuff* pb)
 22152                        ;{
 22153                        	.line	6729
 22154                        	.line	6730
 22155                        	FFDOS
 22156                        	func
 22157                        	.function	6730
 22158                        ~~putc_flush:
 22159                        	longa	on
 22160                        	longi	on
 22161 08:5199: 3B           	tsc
 22162 08:519A: 38           	sec
 22163 08:519B: E9 06 00     	sbc	#L822
 22164 08:519E: 1B           	tcs
 22165 08:519F: 0B           	phd
 22166 08:51A0: 5B           	tcd
 22167             00000004   pb_0	set	4
 22168                        	.block	6730
 22169                        ;	UINT nw;
 22170                        ;
 22171                        ;	if (   pb->idx >= 0	/* Flush buffered charac
                    ters to the file */
 22172             00000000   nw_1	set	0
 22173                        	.sym	nw,0,16,1,16
 22174                        	.sym	pb,4,138,6,32,86
 22175                        	.line	6733
 22176                        ;		&& f_write(pb->fp, pb->buf, (UINT)pb->id
                    x, &nw) == FR_OK
 22177                        ;		&& (UINT)pb->idx == nw) return pb->nchr;
 22178 08:51A1: A0 04 00     	ldy	#$4
 22179 08:51A4: B7 0A        	lda	[<L822+pb_0],Y
 22180 08:51A6: 10 03        	bpl	L825
 22181 08:51A8: 82 58 00     	brl	L10432
 22182                        L825:
 22183 08:51AB: F4 00 00     	pea	#0
 22184 08:51AE: 18           	clc
 22185 08:51AF: 7B           	tdc
 22186 08:51B0: 69 05 00     	adc	#<L823+nw_1
 22187 08:51B3: 48           	pha
 22188 08:51B4: A0 04 00     	ldy	#$4
 22189 08:51B7: B7 0A        	lda	[<L822+pb_0],Y
 22190 08:51B9: 48           	pha
 22191 08:51BA: 18           	clc
 22192 08:51BB: A9 08 00     	lda	#$8
  Thu Dec  3 2020 22:25                                                Page 443


 22193 08:51BE: 65 0A        	adc	<L822+pb_0
 22194 08:51C0: 85 01        	sta	<R0
 22195 08:51C2: A9 00 00     	lda	#$0
 22196 08:51C5: 65 0C        	adc	<L822+pb_0+2
 22197 08:51C7: 85 03        	sta	<R0+2
 22198 08:51C9: D4 03        	pei	<R0+2
 22199 08:51CB: D4 01        	pei	<R0
 22200 08:51CD: A0 02 00     	ldy	#$2
 22201 08:51D0: B7 0A        	lda	[<L822+pb_0],Y
 22202 08:51D2: 48           	pha
 22203 08:51D3: A7 0A        	lda	[<L822+pb_0]
 22204 08:51D5: 48           	pha
 22205 08:51D6: 22 94 37 08  	jsl	~~f_write
 22206 08:51DA: AA           	tax
 22207 08:51DB: F0 03        	beq	L826
 22208 08:51DD: 82 23 00     	brl	L10432
 22209                        L826:
 22210 08:51E0: A0 04 00     	ldy	#$4
 22211 08:51E3: B7 0A        	lda	[<L822+pb_0],Y
 22212 08:51E5: C5 05        	cmp	<L823+nw_1
 22213 08:51E7: F0 03        	beq	L827
 22214 08:51E9: 82 17 00     	brl	L10432
 22215                        L827:
 22216                        	.line	6735
 22217 08:51EC: A0 06 00     	ldy	#$6
 22218 08:51EF: B7 0A        	lda	[<L822+pb_0],Y
 22219                        L828:
 22220 08:51F1: A8           	tay
 22221 08:51F2: A5 08        	lda	<L822+2
 22222 08:51F4: 85 0C        	sta	<L822+2+4
 22223 08:51F6: A5 07        	lda	<L822+1
 22224 08:51F8: 85 0B        	sta	<L822+1+4
 22225 08:51FA: 2B           	pld
 22226 08:51FB: 3B           	tsc
 22227 08:51FC: 18           	clc
 22228 08:51FD: 69 0A 00     	adc	#L822+4
 22229 08:5200: 1B           	tcs
 22230 08:5201: 98           	tya
 22231 08:5202: 6B           	rtl
 22232                        ;	return EOF;
 22233                        L10432:
 22234                        	.line	6736
 22235 08:5203: A9 FF FF     	lda	#$ffff
 22236 08:5206: 82 E8 FF     	brl	L828
 22237                        ;}
 22238                        	.line	6737
 22239                        	.endblock	6737
 22240             00000006   L822	equ	6
 22241             00000005   L823	equ	5
 22242 08:5209:              	ends
 22243                        	efunc
 22244                        	.endfunc	6737,5,6
 22245                        	.line	6737
 22246                        ;
 22247                        ;
 22248                        ;/* Initialize write buffer */
 22249                        ;
 22250                        ;static void putc_init (putbuff* pb, FIL* fp)
  Thu Dec  3 2020 22:25                                                Page 444


 22251                        ;{
 22252                        	.line	6742
 22253                        	.line	6743
 22254                        	FFDOS
 22255                        	func
 22256                        	.function	6743
 22257                        ~~putc_init:
 22258                        	longa	on
 22259                        	longi	on
 22260 08:5209: 3B           	tsc
 22261 08:520A: 38           	sec
 22262 08:520B: E9 00 00     	sbc	#L829
 22263 08:520E: 1B           	tcs
 22264 08:520F: 0B           	phd
 22265 08:5210: 5B           	tcd
 22266             00000004   pb_0	set	4
 22267             00000008   fp_0	set	8
 22268                        	.block	6743
 22269                        ;	mem_set(pb, 0, sizeof (putbuff));
 22270                        	.sym	pb,4,138,6,32,86
 22271                        	.sym	fp,8,138,6,32,82
 22272                        	.line	6744
 22273 08:5211: F4 48 00     	pea	#<$48
 22274 08:5214: F4 00 00     	pea	#<$0
 22275 08:5217: D4 06        	pei	<L829+pb_0+2
 22276 08:5219: D4 04        	pei	<L829+pb_0
 22277 08:521B: 22 DF 01 08  	jsl	~~mem_set
 22278                        ;	pb->fp = fp;
 22279                        	.line	6745
 22280 08:521F: A5 08        	lda	<L829+fp_0
 22281 08:5221: 87 04        	sta	[<L829+pb_0]
 22282 08:5223: A5 0A        	lda	<L829+fp_0+2
 22283 08:5225: A0 02 00     	ldy	#$2
 22284 08:5228: 97 04        	sta	[<L829+pb_0],Y
 22285                        ;}
 22286                        	.line	6746
 22287                        L832:
 22288 08:522A: A5 02        	lda	<L829+2
 22289 08:522C: 85 0A        	sta	<L829+2+8
 22290 08:522E: A5 01        	lda	<L829+1
 22291 08:5230: 85 09        	sta	<L829+1+8
 22292 08:5232: 2B           	pld
 22293 08:5233: 3B           	tsc
 22294 08:5234: 18           	clc
 22295 08:5235: 69 08 00     	adc	#L829+8
 22296 08:5238: 1B           	tcs
 22297 08:5239: 6B           	rtl
 22298                        	.endblock	6746
 22299             00000000   L829	equ	0
 22300             00000001   L830	equ	1
 22301 08:523A:              	ends
 22302                        	efunc
 22303                        	.endfunc	6746,1,0
 22304                        	.line	6746
 22305                        ;
 22306                        ;
 22307                        ;
 22308                        ;int f_putc (
  Thu Dec  3 2020 22:25                                                Page 445


 22309                        ;	TCHAR c,	/* A character to be output */
 22310                        ;	FIL* fp		/* Pointer to the file object */
 22311                        ;)
 22312                        ;{
 22313                        	.line	6750
 22314                        	.line	6754
 22315                        	FFDOS
 22316                        	xdef	~~f_putc
 22317                        	func
 22318                        	.function	6754
 22319                        ~~f_putc:
 22320                        	longa	on
 22321                        	longi	on
 22322 08:523A: 3B           	tsc
 22323 08:523B: 38           	sec
 22324 08:523C: E9 48 00     	sbc	#L833
 22325 08:523F: 1B           	tcs
 22326 08:5240: 0B           	phd
 22327 08:5241: 5B           	tcd
 22328             00000004   c_0	set	4
 22329             00000006   fp_0	set	6
 22330                        	.block	6754
 22331                        ;	putbuff pb;
 22332                        ;
 22333                        ;
 22334                        ;	putc_init(&pb, fp);
 22335             00000000   pb_1	set	0
 22336                        	.sym	pb,0,10,1,576,86
 22337                        	.sym	c,4,14,6,8
 22338                        	.sym	fp,6,138,6,32,82
 22339                        	.line	6758
 22340 08:5242: D4 50        	pei	<L833+fp_0+2
 22341 08:5244: D4 4E        	pei	<L833+fp_0
 22342 08:5246: F4 00 00     	pea	#0
 22343 08:5249: 18           	clc
 22344 08:524A: 7B           	tdc
 22345 08:524B: 69 01 00     	adc	#<L834+pb_1
 22346 08:524E: 48           	pha
 22347 08:524F: 22 09 52 08  	jsl	~~putc_init
 22348                        ;	putc_bfd(&pb, c);	/* Put the character */
 22349                        	.line	6759
 22350 08:5253: D4 4C        	pei	<L833+c_0
 22351 08:5255: F4 00 00     	pea	#0
 22352 08:5258: 18           	clc
 22353 08:5259: 7B           	tdc
 22354 08:525A: 69 01 00     	adc	#<L834+pb_1
 22355 08:525D: 48           	pha
 22356 08:525E: 22 DD 50 08  	jsl	~~putc_bfd
 22357                        ;	return putc_flush(&pb);
 22358                        	.line	6760
 22359 08:5262: F4 00 00     	pea	#0
 22360 08:5265: 18           	clc
 22361 08:5266: 7B           	tdc
 22362 08:5267: 69 01 00     	adc	#<L834+pb_1
 22363 08:526A: 48           	pha
 22364 08:526B: 22 99 51 08  	jsl	~~putc_flush
 22365                        L836:
 22366 08:526F: A8           	tay
  Thu Dec  3 2020 22:25                                                Page 446


 22367 08:5270: A5 4A        	lda	<L833+2
 22368 08:5272: 85 50        	sta	<L833+2+6
 22369 08:5274: A5 49        	lda	<L833+1
 22370 08:5276: 85 4F        	sta	<L833+1+6
 22371 08:5278: 2B           	pld
 22372 08:5279: 3B           	tsc
 22373 08:527A: 18           	clc
 22374 08:527B: 69 4E 00     	adc	#L833+6
 22375 08:527E: 1B           	tcs
 22376 08:527F: 98           	tya
 22377 08:5280: 6B           	rtl
 22378                        ;}
 22379                        	.line	6761
 22380                        	.endblock	6761
 22381             00000048   L833	equ	72
 22382             00000001   L834	equ	1
 22383 08:5281:              	ends
 22384                        	efunc
 22385                        	.endfunc	6761,1,72
 22386                        	.line	6761
 22387                        ;
 22388                        ;
 22389                        ;
 22390                        ;
 22391                        ;/*-----------------------------------------------
                    ------------------------*/
 22392                        ;/* Put a String to the File                      
                                            */
 22393                        ;/*-----------------------------------------------
                    ------------------------*/
 22394                        ;
 22395                        ;int f_puts (
 22396                        ;	const TCHAR* str,	/* Pointer to the string
                     to be output */
 22397                        ;	FIL* fp				/* Pointer to th
                    e file object */
 22398                        ;)
 22399                        ;{
 22400                        	.line	6770
 22401                        	.line	6774
 22402                        	FFDOS
 22403                        	xdef	~~f_puts
 22404                        	func
 22405                        	.function	6774
 22406                        ~~f_puts:
 22407                        	longa	on
 22408                        	longi	on
 22409 08:5281: 3B           	tsc
 22410 08:5282: 38           	sec
 22411 08:5283: E9 4C 00     	sbc	#L837
 22412 08:5286: 1B           	tcs
 22413 08:5287: 0B           	phd
 22414 08:5288: 5B           	tcd
 22415             00000004   str_0	set	4
 22416             00000008   fp_0	set	8
 22417                        	.block	6774
 22418                        ;	putbuff pb;
 22419                        ;
  Thu Dec  3 2020 22:25                                                Page 447


 22420                        ;
 22421                        ;	putc_init(&pb, fp);
 22422             00000000   pb_1	set	0
 22423                        	.sym	pb,0,10,1,576,86
 22424                        	.sym	str,4,142,6,32
 22425                        	.sym	fp,8,138,6,32,82
 22426                        	.line	6778
 22427 08:5289: D4 56        	pei	<L837+fp_0+2
 22428 08:528B: D4 54        	pei	<L837+fp_0
 22429 08:528D: F4 00 00     	pea	#0
 22430 08:5290: 18           	clc
 22431 08:5291: 7B           	tdc
 22432 08:5292: 69 05 00     	adc	#<L838+pb_1
 22433 08:5295: 48           	pha
 22434 08:5296: 22 09 52 08  	jsl	~~putc_init
 22435                        ;	while (*str) putc_bfd(&pb, *str++);		
                    /* Put the string */
 22436                        	.line	6779
 22437                        L10433:
 22438 08:529A: A7 50        	lda	[<L837+str_0]
 22439 08:529C: 29 FF 00     	and	#$ff
 22440 08:529F: D0 03        	bne	L840
 22441 08:52A1: 82 21 00     	brl	L10434
 22442                        L840:
 22443                        	.line	6779
 22444 08:52A4: A5 50        	lda	<L837+str_0
 22445 08:52A6: 85 01        	sta	<R0
 22446 08:52A8: A5 52        	lda	<L837+str_0+2
 22447 08:52AA: 85 03        	sta	<R0+2
 22448 08:52AC: E6 50        	inc	<L837+str_0
 22449 08:52AE: D0 02        	bne	L841
 22450 08:52B0: E6 52        	inc	<L837+str_0+2
 22451                        L841:
 22452 08:52B2: A7 01        	lda	[<R0]
 22453 08:52B4: 48           	pha
 22454 08:52B5: F4 00 00     	pea	#0
 22455 08:52B8: 18           	clc
 22456 08:52B9: 7B           	tdc
 22457 08:52BA: 69 05 00     	adc	#<L838+pb_1
 22458 08:52BD: 48           	pha
 22459 08:52BE: 22 DD 50 08  	jsl	~~putc_bfd
 22460 08:52C2: 82 D5 FF     	brl	L10433
 22461                        L10434:
 22462                        ;	return putc_flush(&pb);
 22463                        	.line	6780
 22464 08:52C5: F4 00 00     	pea	#0
 22465 08:52C8: 18           	clc
 22466 08:52C9: 7B           	tdc
 22467 08:52CA: 69 05 00     	adc	#<L838+pb_1
 22468 08:52CD: 48           	pha
 22469 08:52CE: 22 99 51 08  	jsl	~~putc_flush
 22470                        L842:
 22471 08:52D2: A8           	tay
 22472 08:52D3: A5 4E        	lda	<L837+2
 22473 08:52D5: 85 56        	sta	<L837+2+8
 22474 08:52D7: A5 4D        	lda	<L837+1
 22475 08:52D9: 85 55        	sta	<L837+1+8
 22476 08:52DB: 2B           	pld
  Thu Dec  3 2020 22:25                                                Page 448


 22477 08:52DC: 3B           	tsc
 22478 08:52DD: 18           	clc
 22479 08:52DE: 69 54 00     	adc	#L837+8
 22480 08:52E1: 1B           	tcs
 22481 08:52E2: 98           	tya
 22482 08:52E3: 6B           	rtl
 22483                        ;}
 22484                        	.line	6781
 22485                        	.endblock	6781
 22486             0000004C   L837	equ	76
 22487             00000005   L838	equ	5
 22488 08:52E4:              	ends
 22489                        	efunc
 22490                        	.endfunc	6781,5,76
 22491                        	.line	6781
 22492                        ;
 22493                        ;
 22494                        ;
 22495                        ;
 22496                        ;/*-----------------------------------------------
                    ------------------------*/
 22497                        ;/* Put a Formatted String to the File            
                                            */
 22498                        ;/*-----------------------------------------------
                    ------------------------*/
 22499                        ;
 22500                        ;int f_printf (
 22501                        ;	FIL* fp,			/* Pointer to th
                    e file object */
 22502                        ;	const TCHAR* fmt,	/* Pointer to the format
                     string */
 22503                        ;	...					/* Optio
                    nal arguments... */
 22504                        ;)
 22505                        ;{
 22506                        	.line	6790
 22507                        	.line	6795
 22508                        	FFDOS
 22509                        	xdef	~~f_printf
 22510                        	func
 22511                        	.function	6795
 22512                        ~~f_printf:
 22513                        	longa	on
 22514                        	longi	on
 22515 08:52E4: 3B           	tsc
 22516 08:52E5: 38           	sec
 22517 08:52E6: E9 8A 00     	sbc	#L843
 22518 08:52E9: 1B           	tcs
 22519 08:52EA: 0B           	phd
 22520 08:52EB: 5B           	tcd
 22521             00000006   fp_0	set	6
 22522             0000000A   fmt_0	set	10
 22523                        	.block	6795
 22524                        ;	va_list arp;
 22525                        ;	putbuff pb;
 22526                        ;	BYTE f, r;
 22527                        ;	UINT i, j, w;
 22528                        ;	DWORD v;
  Thu Dec  3 2020 22:25                                                Page 449


 22529                        ;	TCHAR c, d, str[32], *p;
 22530                        ;
 22531                        ;
 22532                        ;	putc_init(&pb, fp);
 22533             00000000   arp_1	set	0
 22534             00000004   pb_1	set	4
 22535             0000004C   f_1	set	76
 22536             0000004D   r_1	set	77
 22537             0000004E   i_1	set	78
 22538             00000050   j_1	set	80
 22539             00000052   w_1	set	82
 22540             00000054   v_1	set	84
 22541             00000058   c_1	set	88
 22542             00000059   d_1	set	89
 22543             0000005A   str_1	set	90
 22544             0000007A   p_1	set	122
 22545                        	.sym	arp,0,142,1,32
 22546                        	.sym	pb,4,10,1,576,86
 22547                        	.sym	f,76,14,1,8
 22548                        	.sym	r,77,14,1,8
 22549                        	.sym	i,78,16,1,16
 22550                        	.sym	j,80,16,1,16
 22551                        	.sym	w,82,16,1,16
 22552                        	.sym	v,84,18,1,32
 22553                        	.sym	c,88,14,1,8
 22554                        	.sym	d,89,14,1,8
 22555                        	.sym	str,90,110,1,0,32
 22556                        	.sym	p,122,142,1,32
 22557                        	.sym	fp,6,138,6,32,82
 22558                        	.sym	fmt,10,142,6,32
 22559                        	.line	6804
 22560 08:52EC: D4 92        	pei	<L843+fp_0+2
 22561 08:52EE: D4 90        	pei	<L843+fp_0
 22562 08:52F0: F4 00 00     	pea	#0
 22563 08:52F3: 18           	clc
 22564 08:52F4: 7B           	tdc
 22565 08:52F5: 69 11 00     	adc	#<L844+pb_1
 22566 08:52F8: 48           	pha
 22567 08:52F9: 22 09 52 08  	jsl	~~putc_init
 22568                        ;
 22569                        ;	va_start(arp, fmt);
 22570                        	.line	6806
 22571 08:52FD: 18           	clc
 22572 08:52FE: 7B           	tdc
 22573 08:52FF: 69 98 00     	adc	#<L843+fmt_0+4
 22574 08:5302: 85 0D        	sta	<L844+arp_1
 22575 08:5304: A9 00 00     	lda	#$0
 22576 08:5307: 85 0F        	sta	<L844+arp_1+2
 22577                        ;
 22578                        ;	for (;;) {
 22579                        	.line	6808
 22580                        L10437:
 22581                        	.line	6808
 22582                        ;		c = *fmt++;
 22583                        	.line	6809
 22584 08:5309: E2 20        	sep	#$20
 22585                        	longa	off
 22586 08:530B: A7 94        	lda	[<L843+fmt_0]
  Thu Dec  3 2020 22:25                                                Page 450


 22587 08:530D: 85 65        	sta	<L844+c_1
 22588 08:530F: C2 20        	rep	#$20
 22589                        	longa	on
 22590 08:5311: E6 94        	inc	<L843+fmt_0
 22591 08:5313: D0 02        	bne	L846
 22592 08:5315: E6 96        	inc	<L843+fmt_0+2
 22593                        L846:
 22594                        ;		if (c == 0) break;			
                    /* End of string */
 22595                        	.line	6810
 22596 08:5317: A5 65        	lda	<L844+c_1
 22597 08:5319: 29 FF 00     	and	#$ff
 22598 08:531C: D0 03        	bne	L847
 22599 08:531E: 82 E6 04     	brl	L10436
 22600                        L847:
 22601                        ;		if (c != '%') {				
                    /* Non escape character */
 22602                        	.line	6811
 22603 08:5321: E2 20        	sep	#$20
 22604                        	longa	off
 22605 08:5323: A5 65        	lda	<L844+c_1
 22606 08:5325: C9 25        	cmp	#<$25
 22607 08:5327: C2 20        	rep	#$20
 22608                        	longa	on
 22609 08:5329: D0 03        	bne	L848
 22610 08:532B: 82 12 00     	brl	L10438
 22611                        L848:
 22612                        	.line	6811
 22613                        ;			putc_bfd(&pb, c);
 22614                        	.line	6812
 22615 08:532E: D4 65        	pei	<L844+c_1
 22616 08:5330: F4 00 00     	pea	#0
 22617 08:5333: 18           	clc
 22618 08:5334: 7B           	tdc
 22619 08:5335: 69 11 00     	adc	#<L844+pb_1
 22620 08:5338: 48           	pha
 22621 08:5339: 22 DD 50 08  	jsl	~~putc_bfd
 22622                        ;			continue;
 22623                        	.line	6813
 22624 08:533D: 82 C4 04     	brl	L10435
 22625                        ;		}
 22626                        	.line	6814
 22627                        ;		w = f = 0;
 22628                        L10438:
 22629                        	.line	6815
 22630 08:5340: E2 20        	sep	#$20
 22631                        	longa	off
 22632 08:5342: 64 59        	stz	<L844+f_1
 22633 08:5344: C2 20        	rep	#$20
 22634                        	longa	on
 22635 08:5346: A9 00 00     	lda	#$0
 22636 08:5349: 29 FF 00     	and	#$ff
 22637 08:534C: 85 5F        	sta	<L844+w_1
 22638                        ;		c = *fmt++;
 22639                        	.line	6816
 22640 08:534E: E2 20        	sep	#$20
 22641                        	longa	off
 22642 08:5350: A7 94        	lda	[<L843+fmt_0]
  Thu Dec  3 2020 22:25                                                Page 451


 22643 08:5352: 85 65        	sta	<L844+c_1
 22644 08:5354: C2 20        	rep	#$20
 22645                        	longa	on
 22646 08:5356: E6 94        	inc	<L843+fmt_0
 22647 08:5358: D0 02        	bne	L849
 22648 08:535A: E6 96        	inc	<L843+fmt_0+2
 22649                        L849:
 22650                        ;		if (c == '0') {				
                    /* Flag: '0' padding */
 22651                        	.line	6817
 22652 08:535C: E2 20        	sep	#$20
 22653                        	longa	off
 22654 08:535E: A5 65        	lda	<L844+c_1
 22655 08:5360: C9 30        	cmp	#<$30
 22656 08:5362: C2 20        	rep	#$20
 22657                        	longa	on
 22658 08:5364: F0 03        	beq	L850
 22659 08:5366: 82 19 00     	brl	L10439
 22660                        L850:
 22661                        	.line	6817
 22662                        ;			f = 1; c = *fmt++;
 22663                        	.line	6818
 22664 08:5369: E2 20        	sep	#$20
 22665                        	longa	off
 22666 08:536B: A9 01        	lda	#$1
 22667 08:536D: 85 59        	sta	<L844+f_1
 22668 08:536F: C2 20        	rep	#$20
 22669                        	longa	on
 22670                        	.line	6818
 22671 08:5371: E2 20        	sep	#$20
 22672                        	longa	off
 22673 08:5373: A7 94        	lda	[<L843+fmt_0]
 22674 08:5375: 85 65        	sta	<L844+c_1
 22675 08:5377: C2 20        	rep	#$20
 22676                        	longa	on
 22677 08:5379: E6 94        	inc	<L843+fmt_0
 22678 08:537B: D0 02        	bne	L851
 22679 08:537D: E6 96        	inc	<L843+fmt_0+2
 22680                        L851:
 22681                        ;		} else {
 22682                        	.line	6819
 22683 08:537F: 82 23 00     	brl	L10440
 22684                        L10439:
 22685                        	.line	6819
 22686                        ;			if (c == '-') {			
                    /* Flag: left justified */
 22687                        	.line	6820
 22688 08:5382: E2 20        	sep	#$20
 22689                        	longa	off
 22690 08:5384: A5 65        	lda	<L844+c_1
 22691 08:5386: C9 2D        	cmp	#<$2d
 22692 08:5388: C2 20        	rep	#$20
 22693                        	longa	on
 22694 08:538A: F0 03        	beq	L852
 22695 08:538C: 82 16 00     	brl	L10441
 22696                        L852:
 22697                        	.line	6820
 22698                        ;				f = 2; c = *fmt++;
  Thu Dec  3 2020 22:25                                                Page 452


 22699                        	.line	6821
 22700 08:538F: E2 20        	sep	#$20
 22701                        	longa	off
 22702 08:5391: A9 02        	lda	#$2
 22703 08:5393: 85 59        	sta	<L844+f_1
 22704 08:5395: C2 20        	rep	#$20
 22705                        	longa	on
 22706                        	.line	6821
 22707 08:5397: E2 20        	sep	#$20
 22708                        	longa	off
 22709 08:5399: A7 94        	lda	[<L843+fmt_0]
 22710 08:539B: 85 65        	sta	<L844+c_1
 22711 08:539D: C2 20        	rep	#$20
 22712                        	longa	on
 22713 08:539F: E6 94        	inc	<L843+fmt_0
 22714 08:53A1: D0 02        	bne	L853
 22715 08:53A3: E6 96        	inc	<L843+fmt_0+2
 22716                        L853:
 22717                        ;			}
 22718                        	.line	6822
 22719                        ;		}
 22720                        L10441:
 22721                        	.line	6823
 22722                        L10440:
 22723                        ;		if (c == '*') {				
                    /* Minimum width by argument */
 22724                        	.line	6824
 22725 08:53A5: E2 20        	sep	#$20
 22726                        	longa	off
 22727 08:53A7: A5 65        	lda	<L844+c_1
 22728 08:53A9: C9 2A        	cmp	#<$2a
 22729 08:53AB: C2 20        	rep	#$20
 22730                        	longa	on
 22731 08:53AD: F0 03        	beq	L854
 22732 08:53AF: 82 30 00     	brl	L10442
 22733                        L854:
 22734                        	.line	6824
 22735                        ;			w = va_arg(arp, int);
 22736                        	.line	6825
 22737 08:53B2: 18           	clc
 22738 08:53B3: A9 02 00     	lda	#$2
 22739 08:53B6: 65 0D        	adc	<L844+arp_1
 22740 08:53B8: 85 0D        	sta	<L844+arp_1
 22741 08:53BA: 90 02        	bcc	L855
 22742 08:53BC: E6 0F        	inc	<L844+arp_1+2
 22743                        L855:
 22744 08:53BE: 18           	clc
 22745 08:53BF: A9 FE FF     	lda	#$fffe
 22746 08:53C2: 65 0D        	adc	<L844+arp_1
 22747 08:53C4: 85 01        	sta	<R0
 22748 08:53C6: A9 FF FF     	lda	#$ffff
 22749 08:53C9: 65 0F        	adc	<L844+arp_1+2
 22750 08:53CB: 85 03        	sta	<R0+2
 22751 08:53CD: A7 01        	lda	[<R0]
 22752 08:53CF: 85 5F        	sta	<L844+w_1
 22753                        ;			c = *fmt++;
 22754                        	.line	6826
 22755 08:53D1: E2 20        	sep	#$20
  Thu Dec  3 2020 22:25                                                Page 453


 22756                        	longa	off
 22757 08:53D3: A7 94        	lda	[<L843+fmt_0]
 22758 08:53D5: 85 65        	sta	<L844+c_1
 22759 08:53D7: C2 20        	rep	#$20
 22760                        	longa	on
 22761 08:53D9: E6 94        	inc	<L843+fmt_0
 22762 08:53DB: D0 02        	bne	L856
 22763 08:53DD: E6 96        	inc	<L843+fmt_0+2
 22764                        L856:
 22765                        ;		} else {
 22766                        	.line	6827
 22767 08:53DF: 82 4A 00     	brl	L10443
 22768                        L10442:
 22769                        	.line	6827
 22770                        ;			while (IsDigit(c)) {	/* Minim
                    um width */
 22771                        	.line	6828
 22772                        L10444:
 22773 08:53E2: E2 20        	sep	#$20
 22774                        	longa	off
 22775 08:53E4: A5 65        	lda	<L844+c_1
 22776 08:53E6: C9 30        	cmp	#<$30
 22777 08:53E8: C2 20        	rep	#$20
 22778                        	longa	on
 22779 08:53EA: B0 03        	bcs	L857
 22780 08:53EC: 82 3D 00     	brl	L10445
 22781                        L857:
 22782 08:53EF: E2 20        	sep	#$20
 22783                        	longa	off
 22784 08:53F1: A9 39        	lda	#$39
 22785 08:53F3: C5 65        	cmp	<L844+c_1
 22786 08:53F5: C2 20        	rep	#$20
 22787                        	longa	on
 22788 08:53F7: B0 03        	bcs	L858
 22789 08:53F9: 82 30 00     	brl	L10445
 22790                        L858:
 22791                        	.line	6828
 22792                        ;				w = w * 10 + c - '0';
 22793                        	.line	6829
 22794 08:53FC: A5 65        	lda	<L844+c_1
 22795 08:53FE: 29 FF 00     	and	#$ff
 22796 08:5401: 85 01        	sta	<R0
 22797 08:5403: A5 5F        	lda	<L844+w_1
 22798 08:5405: 0A           	asl	A
 22799 08:5406: 0A           	asl	A
 22800 08:5407: 65 5F        	adc	<L844+w_1
 22801 08:5409: 0A           	asl	A
 22802 08:540A: 85 05        	sta	<R1
 22803 08:540C: 18           	clc
 22804 08:540D: A5 05        	lda	<R1
 22805 08:540F: 65 01        	adc	<R0
 22806 08:5411: 85 09        	sta	<R2
 22807 08:5413: 18           	clc
 22808 08:5414: A9 D0 FF     	lda	#$ffd0
 22809 08:5417: 65 09        	adc	<R2
 22810 08:5419: 85 5F        	sta	<L844+w_1
 22811                        ;				c = *fmt++;
 22812                        	.line	6830
  Thu Dec  3 2020 22:25                                                Page 454


 22813 08:541B: E2 20        	sep	#$20
 22814                        	longa	off
 22815 08:541D: A7 94        	lda	[<L843+fmt_0]
 22816 08:541F: 85 65        	sta	<L844+c_1
 22817 08:5421: C2 20        	rep	#$20
 22818                        	longa	on
 22819 08:5423: E6 94        	inc	<L843+fmt_0
 22820 08:5425: D0 02        	bne	L859
 22821 08:5427: E6 96        	inc	<L843+fmt_0+2
 22822                        L859:
 22823                        ;			}
 22824                        	.line	6831
 22825 08:5429: 82 B6 FF     	brl	L10444
 22826                        L10445:
 22827                        ;		}
 22828                        	.line	6832
 22829                        L10443:
 22830                        ;		if (c == 'l' || c == 'L') {	/* Type 
                    prefix: Size is long int */
 22831                        	.line	6833
 22832 08:542C: E2 20        	sep	#$20
 22833                        	longa	off
 22834 08:542E: A5 65        	lda	<L844+c_1
 22835 08:5430: C9 6C        	cmp	#<$6c
 22836 08:5432: C2 20        	rep	#$20
 22837                        	longa	on
 22838 08:5434: D0 03        	bne	L861
 22839 08:5436: 82 0D 00     	brl	L860
 22840                        L861:
 22841 08:5439: E2 20        	sep	#$20
 22842                        	longa	off
 22843 08:543B: A5 65        	lda	<L844+c_1
 22844 08:543D: C9 4C        	cmp	#<$4c
 22845 08:543F: C2 20        	rep	#$20
 22846                        	longa	on
 22847 08:5441: F0 03        	beq	L862
 22848 08:5443: 82 16 00     	brl	L10446
 22849                        L862:
 22850                        L860:
 22851                        	.line	6833
 22852                        ;			f |= 4; c = *fmt++;
 22853                        	.line	6834
 22854 08:5446: E2 20        	sep	#$20
 22855                        	longa	off
 22856 08:5448: A9 04        	lda	#$4
 22857 08:544A: 04 59        	tsb	<L844+f_1
 22858 08:544C: C2 20        	rep	#$20
 22859                        	longa	on
 22860                        	.line	6834
 22861 08:544E: E2 20        	sep	#$20
 22862                        	longa	off
 22863 08:5450: A7 94        	lda	[<L843+fmt_0]
 22864 08:5452: 85 65        	sta	<L844+c_1
 22865 08:5454: C2 20        	rep	#$20
 22866                        	longa	on
 22867 08:5456: E6 94        	inc	<L843+fmt_0
 22868 08:5458: D0 02        	bne	L863
 22869 08:545A: E6 96        	inc	<L843+fmt_0+2
  Thu Dec  3 2020 22:25                                                Page 455


 22870                        L863:
 22871                        ;		}
 22872                        	.line	6835
 22873                        ;		if (c == 0) break;
 22874                        L10446:
 22875                        	.line	6836
 22876 08:545C: A5 65        	lda	<L844+c_1
 22877 08:545E: 29 FF 00     	and	#$ff
 22878 08:5461: D0 03        	bne	L864
 22879 08:5463: 82 A1 03     	brl	L10436
 22880                        L864:
 22881                        ;		d = c;
 22882                        	.line	6837
 22883 08:5466: E2 20        	sep	#$20
 22884                        	longa	off
 22885 08:5468: A5 65        	lda	<L844+c_1
 22886 08:546A: 85 66        	sta	<L844+d_1
 22887 08:546C: C2 20        	rep	#$20
 22888                        	longa	on
 22889                        ;		if (IsLower(d)) d -= 0x20;
 22890                        	.line	6838
 22891 08:546E: E2 20        	sep	#$20
 22892                        	longa	off
 22893 08:5470: A5 66        	lda	<L844+d_1
 22894 08:5472: C9 61        	cmp	#<$61
 22895 08:5474: C2 20        	rep	#$20
 22896                        	longa	on
 22897 08:5476: B0 03        	bcs	L865
 22898 08:5478: 82 24 00     	brl	L10447
 22899                        L865:
 22900 08:547B: E2 20        	sep	#$20
 22901                        	longa	off
 22902 08:547D: A9 7A        	lda	#$7a
 22903 08:547F: C5 66        	cmp	<L844+d_1
 22904 08:5481: C2 20        	rep	#$20
 22905                        	longa	on
 22906 08:5483: B0 03        	bcs	L866
 22907 08:5485: 82 17 00     	brl	L10447
 22908                        L866:
 22909                        	.line	6838
 22910 08:5488: A5 66        	lda	<L844+d_1
 22911 08:548A: 29 FF 00     	and	#$ff
 22912 08:548D: 85 01        	sta	<R0
 22913 08:548F: 18           	clc
 22914 08:5490: A9 E0 FF     	lda	#$ffe0
 22915 08:5493: 65 01        	adc	<R0
 22916 08:5495: 85 05        	sta	<R1
 22917 08:5497: E2 20        	sep	#$20
 22918                        	longa	off
 22919 08:5499: A5 05        	lda	<R1
 22920 08:549B: 85 66        	sta	<L844+d_1
 22921 08:549D: C2 20        	rep	#$20
 22922                        	longa	on
 22923                        ;		switch (d) {				
                    /* Atgument type is... */
 22924                        L10447:
 22925                        	.line	6839
 22926 08:549F: A5 66        	lda	<L844+d_1
  Thu Dec  3 2020 22:25                                                Page 456


 22927 08:54A1: 29 FF 00     	and	#$ff
 22928 08:54A4: 82 24 01     	brl	L10448
 22929                        	.line	6839
 22930                        ;		case 'S' :				
                    	/* String */
 22931                        	.line	6840
 22932                        L10450:
 22933                        ;			p = va_arg(arp, TCHAR*);
 22934                        	.line	6841
 22935 08:54A7: 18           	clc
 22936 08:54A8: A9 04 00     	lda	#$4
 22937 08:54AB: 65 0D        	adc	<L844+arp_1
 22938 08:54AD: 85 0D        	sta	<L844+arp_1
 22939 08:54AF: 90 02        	bcc	L867
 22940 08:54B1: E6 0F        	inc	<L844+arp_1+2
 22941                        L867:
 22942 08:54B3: 18           	clc
 22943 08:54B4: A9 FC FF     	lda	#$fffc
 22944 08:54B7: 65 0D        	adc	<L844+arp_1
 22945 08:54B9: 85 01        	sta	<R0
 22946 08:54BB: A9 FF FF     	lda	#$ffff
 22947 08:54BE: 65 0F        	adc	<L844+arp_1+2
 22948 08:54C0: 85 03        	sta	<R0+2
 22949 08:54C2: A7 01        	lda	[<R0]
 22950 08:54C4: 85 87        	sta	<L844+p_1
 22951 08:54C6: A0 02 00     	ldy	#$2
 22952 08:54C9: B7 01        	lda	[<R0],Y
 22953 08:54CB: 85 89        	sta	<L844+p_1+2
 22954                        ;			for (j = 0; p[j]; j++) ;
 22955                        	.line	6842
 22956 08:54CD: 64 5D        	stz	<L844+j_1
 22957 08:54CF: 82 02 00     	brl	L10454
 22958                        L10453:
 22959                        	.line	6842
 22960                        L10451:
 22961 08:54D2: E6 5D        	inc	<L844+j_1
 22962                        L10454:
 22963 08:54D4: A4 5D        	ldy	<L844+j_1
 22964 08:54D6: B7 87        	lda	[<L844+p_1],Y
 22965 08:54D8: 29 FF 00     	and	#$ff
 22966 08:54DB: F0 03        	beq	L868
 22967 08:54DD: 82 F2 FF     	brl	L10453
 22968                        L868:
 22969                        L10452:
 22970                        ;			if (!(f & 2)) {			
                    			/* Right padded */
 22971                        	.line	6843
 22972 08:54E0: E2 20        	sep	#$20
 22973                        	longa	off
 22974 08:54E2: A5 59        	lda	<L844+f_1
 22975 08:54E4: 29 02        	and	#<$2
 22976 08:54E6: C2 20        	rep	#$20
 22977                        	longa	on
 22978 08:54E8: F0 03        	beq	L869
 22979 08:54EA: 82 22 00     	brl	L10455
 22980                        L869:
 22981                        	.line	6843
 22982                        ;				while (j++ < w) putc_bfd
  Thu Dec  3 2020 22:25                                                Page 457


                    (&pb, ' ') ;
 22983                        	.line	6844
 22984                        L10456:
 22985 08:54ED: A5 5D        	lda	<L844+j_1
 22986 08:54EF: 85 01        	sta	<R0
 22987 08:54F1: E6 5D        	inc	<L844+j_1
 22988 08:54F3: A5 01        	lda	<R0
 22989 08:54F5: C5 5F        	cmp	<L844+w_1
 22990 08:54F7: 90 03        	bcc	L870
 22991 08:54F9: 82 13 00     	brl	L10457
 22992                        L870:
 22993                        	.line	6844
 22994 08:54FC: F4 20 00     	pea	#<$20
 22995 08:54FF: F4 00 00     	pea	#0
 22996 08:5502: 18           	clc
 22997 08:5503: 7B           	tdc
 22998 08:5504: 69 11 00     	adc	#<L844+pb_1
 22999 08:5507: 48           	pha
 23000 08:5508: 22 DD 50 08  	jsl	~~putc_bfd
 23001 08:550C: 82 DE FF     	brl	L10456
 23002                        L10457:
 23003                        ;			}
 23004                        	.line	6845
 23005                        ;			while (*p) putc_bfd(&pb, *p++) ;
                    		/* String body */
 23006                        L10455:
 23007                        	.line	6846
 23008                        L10458:
 23009 08:550F: A7 87        	lda	[<L844+p_1]
 23010 08:5511: 29 FF 00     	and	#$ff
 23011 08:5514: D0 03        	bne	L871
 23012 08:5516: 82 21 00     	brl	L10459
 23013                        L871:
 23014                        	.line	6846
 23015 08:5519: A5 87        	lda	<L844+p_1
 23016 08:551B: 85 01        	sta	<R0
 23017 08:551D: A5 89        	lda	<L844+p_1+2
 23018 08:551F: 85 03        	sta	<R0+2
 23019 08:5521: E6 87        	inc	<L844+p_1
 23020 08:5523: D0 02        	bne	L872
 23021 08:5525: E6 89        	inc	<L844+p_1+2
 23022                        L872:
 23023 08:5527: A7 01        	lda	[<R0]
 23024 08:5529: 48           	pha
 23025 08:552A: F4 00 00     	pea	#0
 23026 08:552D: 18           	clc
 23027 08:552E: 7B           	tdc
 23028 08:552F: 69 11 00     	adc	#<L844+pb_1
 23029 08:5532: 48           	pha
 23030 08:5533: 22 DD 50 08  	jsl	~~putc_bfd
 23031 08:5537: 82 D5 FF     	brl	L10458
 23032                        L10459:
 23033                        ;			while (j++ < w) putc_bfd(&pb, ' 
                    ') ;	/* Left padded */
 23034                        	.line	6847
 23035                        L10460:
 23036 08:553A: A5 5D        	lda	<L844+j_1
 23037 08:553C: 85 01        	sta	<R0
  Thu Dec  3 2020 22:25                                                Page 458


 23038 08:553E: E6 5D        	inc	<L844+j_1
 23039 08:5540: A5 01        	lda	<R0
 23040 08:5542: C5 5F        	cmp	<L844+w_1
 23041 08:5544: 90 03        	bcc	L873
 23042 08:5546: 82 13 00     	brl	L10461
 23043                        L873:
 23044                        	.line	6847
 23045 08:5549: F4 20 00     	pea	#<$20
 23046 08:554C: F4 00 00     	pea	#0
 23047 08:554F: 18           	clc
 23048 08:5550: 7B           	tdc
 23049 08:5551: 69 11 00     	adc	#<L844+pb_1
 23050 08:5554: 48           	pha
 23051 08:5555: 22 DD 50 08  	jsl	~~putc_bfd
 23052 08:5559: 82 DE FF     	brl	L10460
 23053                        L10461:
 23054                        ;			continue;
 23055                        	.line	6848
 23056 08:555C: 82 A5 02     	brl	L10435
 23057                        ;
 23058                        ;		case 'C' :				
                    	/* Character */
 23059                        	.line	6850
 23060                        L10462:
 23061                        ;			putc_bfd(&pb, (TCHAR)va_arg(arp,
                     int)); continue;
 23062                        	.line	6851
 23063 08:555F: 18           	clc
 23064 08:5560: A9 02 00     	lda	#$2
 23065 08:5563: 65 0D        	adc	<L844+arp_1
 23066 08:5565: 85 0D        	sta	<L844+arp_1
 23067 08:5567: 90 02        	bcc	L874
 23068 08:5569: E6 0F        	inc	<L844+arp_1+2
 23069                        L874:
 23070 08:556B: 18           	clc
 23071 08:556C: A9 FE FF     	lda	#$fffe
 23072 08:556F: 65 0D        	adc	<L844+arp_1
 23073 08:5571: 85 01        	sta	<R0
 23074 08:5573: A9 FF FF     	lda	#$ffff
 23075 08:5576: 65 0F        	adc	<L844+arp_1+2
 23076 08:5578: 85 03        	sta	<R0+2
 23077 08:557A: A7 01        	lda	[<R0]
 23078 08:557C: 48           	pha
 23079 08:557D: F4 00 00     	pea	#0
 23080 08:5580: 18           	clc
 23081 08:5581: 7B           	tdc
 23082 08:5582: 69 11 00     	adc	#<L844+pb_1
 23083 08:5585: 48           	pha
 23084 08:5586: 22 DD 50 08  	jsl	~~putc_bfd
 23085                        	.line	6851
 23086 08:558A: 82 77 02     	brl	L10435
 23087                        ;
 23088                        ;		case 'B' :				
                    	/* Unsigned binary */
 23089                        	.line	6853
 23090                        L10463:
 23091                        ;			r = 2; break;
 23092                        	.line	6854
  Thu Dec  3 2020 22:25                                                Page 459


 23093 08:558D: E2 20        	sep	#$20
 23094                        	longa	off
 23095 08:558F: A9 02        	lda	#$2
 23096 08:5591: 85 5A        	sta	<L844+r_1
 23097 08:5593: C2 20        	rep	#$20
 23098                        	longa	on
 23099                        	.line	6854
 23100 08:5595: 82 57 00     	brl	L10449
 23101                        ;
 23102                        ;		case 'O' :				
                    	/* Unsigned octal */
 23103                        	.line	6856
 23104                        L10464:
 23105                        ;			r = 8; break;
 23106                        	.line	6857
 23107 08:5598: E2 20        	sep	#$20
 23108                        	longa	off
 23109 08:559A: A9 08        	lda	#$8
 23110 08:559C: 85 5A        	sta	<L844+r_1
 23111 08:559E: C2 20        	rep	#$20
 23112                        	longa	on
 23113                        	.line	6857
 23114 08:55A0: 82 4C 00     	brl	L10449
 23115                        ;
 23116                        ;		case 'D' :				
                    	/* Signed decimal */
 23117                        	.line	6859
 23118                        L10465:
 23119                        ;		case 'U' :				
                    	/* Unsigned decimal */
 23120                        	.line	6860
 23121                        L10466:
 23122                        ;			r = 10; break;
 23123                        	.line	6861
 23124 08:55A3: E2 20        	sep	#$20
 23125                        	longa	off
 23126 08:55A5: A9 0A        	lda	#$a
 23127 08:55A7: 85 5A        	sta	<L844+r_1
 23128 08:55A9: C2 20        	rep	#$20
 23129                        	longa	on
 23130                        	.line	6861
 23131 08:55AB: 82 41 00     	brl	L10449
 23132                        ;
 23133                        ;		case 'X' :				
                    	/* Unsigned hexdecimal */
 23134                        	.line	6863
 23135                        L10467:
 23136                        ;			r = 16; break;
 23137                        	.line	6864
 23138 08:55AE: E2 20        	sep	#$20
 23139                        	longa	off
 23140 08:55B0: A9 10        	lda	#$10
 23141 08:55B2: 85 5A        	sta	<L844+r_1
 23142 08:55B4: C2 20        	rep	#$20
 23143                        	longa	on
 23144                        	.line	6864
 23145 08:55B6: 82 36 00     	brl	L10449
 23146                        ;
  Thu Dec  3 2020 22:25                                                Page 460


 23147                        ;		default:				
                    	/* Unknown type (pass-through) */
 23148                        	.line	6866
 23149                        L10468:
 23150                        ;			putc_bfd(&pb, c); continue;
 23151                        	.line	6867
 23152 08:55B9: D4 65        	pei	<L844+c_1
 23153 08:55BB: F4 00 00     	pea	#0
 23154 08:55BE: 18           	clc
 23155 08:55BF: 7B           	tdc
 23156 08:55C0: 69 11 00     	adc	#<L844+pb_1
 23157 08:55C3: 48           	pha
 23158 08:55C4: 22 DD 50 08  	jsl	~~putc_bfd
 23159                        	.line	6867
 23160 08:55C8: 82 39 02     	brl	L10435
 23161                        ;		}
 23162                        	.line	6868
 23163                        L10448:
 23164                        	xref	~~~swt
 23165 08:55CB: 22 xx xx xx  	jsl	~~~swt
 23166 08:55CF: 07 00        	dw	7
 23167 08:55D1: 42 00        	dw	66
 23168 08:55D3: 8C 55        	dw	L10463-1
 23169 08:55D5: 43 00        	dw	67
 23170 08:55D7: 5E 55        	dw	L10462-1
 23171 08:55D9: 44 00        	dw	68
 23172 08:55DB: A2 55        	dw	L10465-1
 23173 08:55DD: 4F 00        	dw	79
 23174 08:55DF: 97 55        	dw	L10464-1
 23175 08:55E1: 53 00        	dw	83
 23176 08:55E3: A6 54        	dw	L10450-1
 23177 08:55E5: 55 00        	dw	85
 23178 08:55E7: A2 55        	dw	L10466-1
 23179 08:55E9: 58 00        	dw	88
 23180 08:55EB: AD 55        	dw	L10467-1
 23181 08:55ED: B8 55        	dw	L10468-1
 23182                        L10449:
 23183                        ;
 23184                        ;		/* Get an argument and put it in numeral
                     */
 23185                        ;		v = (f & 4) ? (DWORD)va_arg(arp, long) :
                     ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg
                    (arp, unsigned int));
 23186                        	.line	6871
 23187 08:55EF: E2 20        	sep	#$20
 23188                        	longa	off
 23189 08:55F1: A5 59        	lda	<L844+f_1
 23190 08:55F3: 29 04        	and	#<$4
 23191 08:55F5: C2 20        	rep	#$20
 23192                        	longa	on
 23193 08:55F7: D0 03        	bne	L876
 23194 08:55F9: 82 25 00     	brl	L875
 23195                        L876:
 23196 08:55FC: 18           	clc
 23197 08:55FD: A9 04 00     	lda	#$4
 23198 08:5600: 65 0D        	adc	<L844+arp_1
 23199 08:5602: 85 0D        	sta	<L844+arp_1
 23200 08:5604: 90 02        	bcc	L877
  Thu Dec  3 2020 22:25                                                Page 461


 23201 08:5606: E6 0F        	inc	<L844+arp_1+2
 23202                        L877:
 23203 08:5608: 18           	clc
 23204 08:5609: A9 FC FF     	lda	#$fffc
 23205 08:560C: 65 0D        	adc	<L844+arp_1
 23206 08:560E: 85 01        	sta	<R0
 23207 08:5610: A9 FF FF     	lda	#$ffff
 23208 08:5613: 65 0F        	adc	<L844+arp_1+2
 23209 08:5615: 85 03        	sta	<R0+2
 23210 08:5617: A0 02 00     	ldy	#$2
 23211 08:561A: B7 01        	lda	[<R0],Y
 23212 08:561C: AA           	tax
 23213 08:561D: A7 01        	lda	[<R0]
 23214 08:561F: 80 67        	bra	L878
 23215                        L875:
 23216 08:5621: E2 20        	sep	#$20
 23217                        	longa	off
 23218 08:5623: A5 66        	lda	<L844+d_1
 23219 08:5625: C9 44        	cmp	#<$44
 23220 08:5627: C2 20        	rep	#$20
 23221                        	longa	on
 23222 08:5629: F0 03        	beq	L880
 23223 08:562B: 82 2D 00     	brl	L879
 23224                        L880:
 23225 08:562E: 18           	clc
 23226 08:562F: A9 02 00     	lda	#$2
 23227 08:5632: 65 0D        	adc	<L844+arp_1
 23228 08:5634: 85 0D        	sta	<L844+arp_1
 23229 08:5636: 90 02        	bcc	L881
 23230 08:5638: E6 0F        	inc	<L844+arp_1+2
 23231                        L881:
 23232 08:563A: 18           	clc
 23233 08:563B: A9 FE FF     	lda	#$fffe
 23234 08:563E: 65 0D        	adc	<L844+arp_1
 23235 08:5640: 85 01        	sta	<R0
 23236 08:5642: A9 FF FF     	lda	#$ffff
 23237 08:5645: 65 0F        	adc	<L844+arp_1+2
 23238 08:5647: 85 03        	sta	<R0+2
 23239 08:5649: A0 00 00     	ldy	#$0
 23240 08:564C: A7 01        	lda	[<R0]
 23241 08:564E: 10 01        	bpl	L882
 23242 08:5650: 88           	dey
 23243                        L882:
 23244 08:5651: 85 01        	sta	<R0
 23245 08:5653: 84 03        	sty	<R0+2
 23246 08:5655: A6 03        	ldx	<R0+2
 23247 08:5657: A5 01        	lda	<R0
 23248 08:5659: 80 25        	bra	L883
 23249                        L879:
 23250 08:565B: 18           	clc
 23251 08:565C: A9 02 00     	lda	#$2
 23252 08:565F: 65 0D        	adc	<L844+arp_1
 23253 08:5661: 85 0D        	sta	<L844+arp_1
 23254 08:5663: 90 02        	bcc	L884
 23255 08:5665: E6 0F        	inc	<L844+arp_1+2
 23256                        L884:
 23257 08:5667: 18           	clc
 23258 08:5668: A9 FE FF     	lda	#$fffe
  Thu Dec  3 2020 22:25                                                Page 462


 23259 08:566B: 65 0D        	adc	<L844+arp_1
 23260 08:566D: 85 01        	sta	<R0
 23261 08:566F: A9 FF FF     	lda	#$ffff
 23262 08:5672: 65 0F        	adc	<L844+arp_1+2
 23263 08:5674: 85 03        	sta	<R0+2
 23264 08:5676: A7 01        	lda	[<R0]
 23265 08:5678: 85 01        	sta	<R0
 23266 08:567A: 64 03        	stz	<R0+2
 23267 08:567C: A6 03        	ldx	<R0+2
 23268 08:567E: A5 01        	lda	<R0
 23269                        L883:
 23270 08:5680: 85 01        	sta	<R0
 23271 08:5682: 86 03        	stx	<R0+2
 23272 08:5684: A6 03        	ldx	<R0+2
 23273 08:5686: A5 01        	lda	<R0
 23274                        L878:
 23275 08:5688: 85 01        	sta	<R0
 23276 08:568A: 86 03        	stx	<R0+2
 23277 08:568C: A5 01        	lda	<R0
 23278 08:568E: 85 61        	sta	<L844+v_1
 23279 08:5690: A5 03        	lda	<R0+2
 23280 08:5692: 85 63        	sta	<L844+v_1+2
 23281                        ;		if (d == 'D' && (v & 0x80000000)) {
 23282                        	.line	6872
 23283 08:5694: E2 20        	sep	#$20
 23284                        	longa	off
 23285 08:5696: A5 66        	lda	<L844+d_1
 23286 08:5698: C9 44        	cmp	#<$44
 23287 08:569A: C2 20        	rep	#$20
 23288                        	longa	on
 23289 08:569C: F0 03        	beq	L885
 23290 08:569E: 82 21 00     	brl	L10469
 23291                        L885:
 23292 08:56A1: A5 63        	lda	<L844+v_1+2
 23293 08:56A3: 29 00 80     	and	#^$80000000
 23294 08:56A6: D0 03        	bne	L886
 23295 08:56A8: 82 17 00     	brl	L10469
 23296                        L886:
 23297                        	.line	6872
 23298                        ;			v = 0 - v;
 23299                        	.line	6873
 23300 08:56AB: 38           	sec
 23301 08:56AC: A9 00 00     	lda	#$0
 23302 08:56AF: E5 61        	sbc	<L844+v_1
 23303 08:56B1: 85 61        	sta	<L844+v_1
 23304 08:56B3: A9 00 00     	lda	#$0
 23305 08:56B6: E5 63        	sbc	<L844+v_1+2
 23306 08:56B8: 85 63        	sta	<L844+v_1+2
 23307                        ;			f |= 8;
 23308                        	.line	6874
 23309 08:56BA: E2 20        	sep	#$20
 23310                        	longa	off
 23311 08:56BC: A9 08        	lda	#$8
 23312 08:56BE: 04 59        	tsb	<L844+f_1
 23313 08:56C0: C2 20        	rep	#$20
 23314                        	longa	on
 23315                        ;		}
 23316                        	.line	6875
  Thu Dec  3 2020 22:25                                                Page 463


 23317                        ;		i = 0;
 23318                        L10469:
 23319                        	.line	6876
 23320 08:56C2: 64 5B        	stz	<L844+i_1
 23321                        ;		do {
 23322                        	.line	6877
 23323                        L10472:
 23324                        	.line	6877
 23325                        ;			d = (TCHAR)(v % r); v /= r;
 23326                        	.line	6878
 23327 08:56C4: A5 5A        	lda	<L844+r_1
 23328 08:56C6: 29 FF 00     	and	#$ff
 23329 08:56C9: 85 01        	sta	<R0
 23330 08:56CB: 64 03        	stz	<R0+2
 23331 08:56CD: D4 03        	pei	<R0+2
 23332 08:56CF: D4 01        	pei	<R0
 23333 08:56D1: D4 63        	pei	<L844+v_1+2
 23334 08:56D3: D4 61        	pei	<L844+v_1
 23335                        	xref	~~~lumd
 23336 08:56D5: 22 xx xx xx  	jsl	~~~lumd
 23337 08:56D9: 85 01        	sta	<R0
 23338 08:56DB: 86 03        	stx	<R0+2
 23339 08:56DD: E2 20        	sep	#$20
 23340                        	longa	off
 23341 08:56DF: A5 01        	lda	<R0
 23342 08:56E1: 85 66        	sta	<L844+d_1
 23343 08:56E3: C2 20        	rep	#$20
 23344                        	longa	on
 23345                        	.line	6878
 23346 08:56E5: A5 5A        	lda	<L844+r_1
 23347 08:56E7: 29 FF 00     	and	#$ff
 23348 08:56EA: 85 01        	sta	<R0
 23349 08:56EC: 64 03        	stz	<R0+2
 23350 08:56EE: D4 03        	pei	<R0+2
 23351 08:56F0: D4 01        	pei	<R0
 23352 08:56F2: D4 63        	pei	<L844+v_1+2
 23353 08:56F4: D4 61        	pei	<L844+v_1
 23354                        	xref	~~~ludv
 23355 08:56F6: 22 xx xx xx  	jsl	~~~ludv
 23356 08:56FA: 85 61        	sta	<L844+v_1
 23357 08:56FC: 86 63        	stx	<L844+v_1+2
 23358                        ;			if (d > 9) d += (c == 'x') ? 0x2
                    7 : 0x07;
 23359                        	.line	6879
 23360 08:56FE: E2 20        	sep	#$20
 23361                        	longa	off
 23362 08:5700: A9 09        	lda	#$9
 23363 08:5702: C5 66        	cmp	<L844+d_1
 23364 08:5704: C2 20        	rep	#$20
 23365                        	longa	on
 23366 08:5706: 90 03        	bcc	L887
 23367 08:5708: 82 2D 00     	brl	L10473
 23368                        L887:
 23369                        	.line	6879
 23370 08:570B: A5 66        	lda	<L844+d_1
 23371 08:570D: 29 FF 00     	and	#$ff
 23372 08:5710: 85 01        	sta	<R0
 23373 08:5712: E2 20        	sep	#$20
  Thu Dec  3 2020 22:25                                                Page 464


 23374                        	longa	off
 23375 08:5714: A5 65        	lda	<L844+c_1
 23376 08:5716: C9 78        	cmp	#<$78
 23377 08:5718: C2 20        	rep	#$20
 23378                        	longa	on
 23379 08:571A: F0 03        	beq	L889
 23380 08:571C: 82 05 00     	brl	L888
 23381                        L889:
 23382 08:571F: A9 27 00     	lda	#$27
 23383 08:5722: 80 03        	bra	L890
 23384                        L888:
 23385 08:5724: A9 07 00     	lda	#$7
 23386                        L890:
 23387 08:5727: 85 05        	sta	<R1
 23388 08:5729: 18           	clc
 23389 08:572A: A5 05        	lda	<R1
 23390 08:572C: 65 01        	adc	<R0
 23391 08:572E: 85 09        	sta	<R2
 23392 08:5730: E2 20        	sep	#$20
 23393                        	longa	off
 23394 08:5732: A5 09        	lda	<R2
 23395 08:5734: 85 66        	sta	<L844+d_1
 23396 08:5736: C2 20        	rep	#$20
 23397                        	longa	on
 23398                        ;			str[i++] = d + '0';
 23399                        L10473:
 23400                        	.line	6880
 23401 08:5738: E2 20        	sep	#$20
 23402                        	longa	off
 23403 08:573A: 18           	clc
 23404 08:573B: A9 30        	lda	#$30
 23405 08:573D: 65 66        	adc	<L844+d_1
 23406 08:573F: C2 20        	rep	#$20
 23407                        	longa	on
 23408 08:5741: E2 20        	sep	#$20
 23409                        	longa	off
 23410 08:5743: A6 5B        	ldx	<L844+i_1
 23411 08:5745: 95 67        	sta	<L844+str_1,X
 23412 08:5747: C2 20        	rep	#$20
 23413                        	longa	on
 23414 08:5749: E6 5B        	inc	<L844+i_1
 23415                        ;		} while (v && i < sizeof str / sizeof *s
                    tr);
 23416                        	.line	6881
 23417                        L10470:
 23418 08:574B: A5 61        	lda	<L844+v_1
 23419 08:574D: 05 63        	ora	<L844+v_1+2
 23420 08:574F: D0 03        	bne	L892
 23421 08:5751: 82 0A 00     	brl	L891
 23422                        L892:
 23423 08:5754: A5 5B        	lda	<L844+i_1
 23424 08:5756: C9 20 00     	cmp	#<$20
 23425 08:5759: B0 03        	bcs	L893
 23426 08:575B: 82 66 FF     	brl	L10472
 23427                        L893:
 23428                        L891:
 23429                        L10471:
 23430                        ;		if (f & 8) str[i++] = '-';
  Thu Dec  3 2020 22:25                                                Page 465


 23431                        	.line	6882
 23432 08:575E: E2 20        	sep	#$20
 23433                        	longa	off
 23434 08:5760: A5 59        	lda	<L844+f_1
 23435 08:5762: 29 08        	and	#<$8
 23436 08:5764: C2 20        	rep	#$20
 23437                        	longa	on
 23438 08:5766: D0 03        	bne	L894
 23439 08:5768: 82 0C 00     	brl	L10474
 23440                        L894:
 23441                        	.line	6882
 23442 08:576B: E2 20        	sep	#$20
 23443                        	longa	off
 23444 08:576D: A9 2D        	lda	#$2d
 23445 08:576F: A6 5B        	ldx	<L844+i_1
 23446 08:5771: 95 67        	sta	<L844+str_1,X
 23447 08:5773: C2 20        	rep	#$20
 23448                        	longa	on
 23449 08:5775: E6 5B        	inc	<L844+i_1
 23450                        ;		j = i; d = (f & 1) ? '0' : ' ';
 23451                        L10474:
 23452                        	.line	6883
 23453 08:5777: A5 5B        	lda	<L844+i_1
 23454 08:5779: 85 5D        	sta	<L844+j_1
 23455                        	.line	6883
 23456 08:577B: E2 20        	sep	#$20
 23457                        	longa	off
 23458 08:577D: A5 59        	lda	<L844+f_1
 23459 08:577F: 29 01        	and	#<$1
 23460 08:5781: C2 20        	rep	#$20
 23461                        	longa	on
 23462 08:5783: D0 03        	bne	L896
 23463 08:5785: 82 05 00     	brl	L895
 23464                        L896:
 23465 08:5788: A9 30 00     	lda	#$30
 23466 08:578B: 80 03        	bra	L897
 23467                        L895:
 23468 08:578D: A9 20 00     	lda	#$20
 23469                        L897:
 23470 08:5790: 85 01        	sta	<R0
 23471 08:5792: E2 20        	sep	#$20
 23472                        	longa	off
 23473 08:5794: A5 01        	lda	<R0
 23474 08:5796: 85 66        	sta	<L844+d_1
 23475 08:5798: C2 20        	rep	#$20
 23476                        	longa	on
 23477                        ;		if (!(f & 2)) {
 23478                        	.line	6884
 23479 08:579A: E2 20        	sep	#$20
 23480                        	longa	off
 23481 08:579C: A5 59        	lda	<L844+f_1
 23482 08:579E: 29 02        	and	#<$2
 23483 08:57A0: C2 20        	rep	#$20
 23484                        	longa	on
 23485 08:57A2: F0 03        	beq	L898
 23486 08:57A4: 82 21 00     	brl	L10475
 23487                        L898:
 23488                        	.line	6884
  Thu Dec  3 2020 22:25                                                Page 466


 23489                        ;			while (j++ < w) putc_bfd(&pb, d)
                    ;	/* Right pad */
 23490                        	.line	6885
 23491                        L10476:
 23492 08:57A7: A5 5D        	lda	<L844+j_1
 23493 08:57A9: 85 01        	sta	<R0
 23494 08:57AB: E6 5D        	inc	<L844+j_1
 23495 08:57AD: A5 01        	lda	<R0
 23496 08:57AF: C5 5F        	cmp	<L844+w_1
 23497 08:57B1: 90 03        	bcc	L899
 23498 08:57B3: 82 12 00     	brl	L10477
 23499                        L899:
 23500                        	.line	6885
 23501 08:57B6: D4 66        	pei	<L844+d_1
 23502 08:57B8: F4 00 00     	pea	#0
 23503 08:57BB: 18           	clc
 23504 08:57BC: 7B           	tdc
 23505 08:57BD: 69 11 00     	adc	#<L844+pb_1
 23506 08:57C0: 48           	pha
 23507 08:57C1: 22 DD 50 08  	jsl	~~putc_bfd
 23508 08:57C5: 82 DF FF     	brl	L10476
 23509                        L10477:
 23510                        ;		}
 23511                        	.line	6886
 23512                        ;		do {
 23513                        L10475:
 23514                        	.line	6887
 23515                        L10480:
 23516                        	.line	6887
 23517                        ;			putc_bfd(&pb, str[--i]);	
                    		/* Number body */
 23518                        	.line	6888
 23519 08:57C8: C6 5B        	dec	<L844+i_1
 23520 08:57CA: A6 5B        	ldx	<L844+i_1
 23521 08:57CC: B5 67        	lda	<L844+str_1,X
 23522 08:57CE: 48           	pha
 23523 08:57CF: F4 00 00     	pea	#0
 23524 08:57D2: 18           	clc
 23525 08:57D3: 7B           	tdc
 23526 08:57D4: 69 11 00     	adc	#<L844+pb_1
 23527 08:57D7: 48           	pha
 23528 08:57D8: 22 DD 50 08  	jsl	~~putc_bfd
 23529                        ;		} while (i);
 23530                        	.line	6889
 23531                        L10478:
 23532 08:57DC: A5 5B        	lda	<L844+i_1
 23533 08:57DE: F0 03        	beq	L900
 23534 08:57E0: 82 E5 FF     	brl	L10480
 23535                        L900:
 23536                        L10479:
 23537                        ;		while (j++ < w) putc_bfd(&pb, d);	
                    	/* Left pad */
 23538                        	.line	6890
 23539                        L10481:
 23540 08:57E3: A5 5D        	lda	<L844+j_1
 23541 08:57E5: 85 01        	sta	<R0
 23542 08:57E7: E6 5D        	inc	<L844+j_1
 23543 08:57E9: A5 01        	lda	<R0
  Thu Dec  3 2020 22:25                                                Page 467


 23544 08:57EB: C5 5F        	cmp	<L844+w_1
 23545 08:57ED: 90 03        	bcc	L901
 23546 08:57EF: 82 12 00     	brl	L10482
 23547                        L901:
 23548                        	.line	6890
 23549 08:57F2: D4 66        	pei	<L844+d_1
 23550 08:57F4: F4 00 00     	pea	#0
 23551 08:57F7: 18           	clc
 23552 08:57F8: 7B           	tdc
 23553 08:57F9: 69 11 00     	adc	#<L844+pb_1
 23554 08:57FC: 48           	pha
 23555 08:57FD: 22 DD 50 08  	jsl	~~putc_bfd
 23556 08:5801: 82 DF FF     	brl	L10481
 23557                        L10482:
 23558                        ;	}
 23559                        	.line	6891
 23560                        L10435:
 23561 08:5804: 82 02 FB     	brl	L10437
 23562                        L10436:
 23563                        ;
 23564                        ;	va_end(arp);
 23565                        	.line	6893
 23566                        ;
 23567                        ;	return putc_flush(&pb);
 23568                        	.line	6895
 23569 08:5807: F4 00 00     	pea	#0
 23570 08:580A: 18           	clc
 23571 08:580B: 7B           	tdc
 23572 08:580C: 69 11 00     	adc	#<L844+pb_1
 23573 08:580F: 48           	pha
 23574 08:5810: 22 99 51 08  	jsl	~~putc_flush
 23575                        L902:
 23576 08:5814: A8           	tay
 23577 08:5815: DA           	phx
 23578 08:5816: A6 8E        	ldx	<L843+4
 23579 08:5818: A5 8C        	lda	<L843+2
 23580 08:581A: 95 8C        	sta	<L843+2,X
 23581 08:581C: A5 8B        	lda	<L843+1
 23582 08:581E: 95 8B        	sta	<L843+1,X
 23583 08:5820: 8A           	txa
 23584 08:5821: FA           	plx
 23585 08:5822: 2B           	pld
 23586 08:5823: 48           	pha
 23587 08:5824: 3B           	tsc
 23588 08:5825: 18           	clc
 23589 08:5826: 69 8C 00     	adc	#L843+2
 23590 08:5829: 63 01        	adc	<1,s
 23591 08:582B: 1B           	tcs
 23592 08:582C: 98           	tya
 23593 08:582D: 6B           	rtl
 23594                        ;}
 23595                        	.line	6896
 23596                        	.endblock	6896
 23597             0000008A   L843	equ	138
 23598             0000000D   L844	equ	13
 23599 08:582E:              	ends
 23600                        	efunc
 23601                        	.endfunc	6896,13,138
  Thu Dec  3 2020 22:25                                                Page 468


 23602                        	.line	6896
 23603                        ;
 23604                        ;#endif /* !FF_FS_READONLY */
 23605                        ;#endif /* FF_USE_STRFUNC */
 23606                        ;
 23607                        ;
 23608                        ;
 23609                        ;#if FF_CODE_PAGE == 0
 23610                        ;/*-----------------------------------------------
                    ------------------------*/
 23611                        ;/* Set Active Codepage for the Path Name         
                                            */
 23612                        ;/*-----------------------------------------------
                    ------------------------*/
 23613                        ;
 23614                        ;FRESULT f_setcp (
 23615                        ;	WORD cp		/* Value to be set as active cod
                    e page */
 23616                        ;)
 23617                        ;{
 23618                        ;	static const WORD       validcp[] = {  437,   72
                    0,   737,   771,   775,   850,   852,   857,   860,   861,  
                     862,   863,   864,   865,   866,   869,   932,   936,   949
                    ,   950, 0};
 23619                        ;	static const BYTE* const tables[] = {Ct437, Ct72
                    0, Ct737, Ct771, Ct775, Ct850, Ct852, Ct857, Ct860, Ct861, C
                    t862, Ct863, Ct864, Ct865, Ct866, Ct869, Dc932, Dc936, Dc949
                    , Dc950, 0};
 23620                        ;	UINT i;
 23621                        ;
 23622                        ;
 23623                        ;	for (i = 0; validcp[i] != 0 && validcp[i] != cp;
                     i++) ;	/* Find the code page */
 23624                        ;	if (validcp[i] != cp) return FR_INVALID_PARAMETE
                    R;	/* Not found? */
 23625                        ;
 23626                        ;	CodePage = cp;
 23627                        ;	if (cp >= 900) {	/* DBCS */
 23628                        ;		ExCvt = 0;
 23629                        ;		DbcTbl = tables[i];
 23630                        ;	} else {			/* SBCS */
 23631                        ;		ExCvt = tables[i];
 23632                        ;		DbcTbl = 0;
 23633                        ;	}
 23634                        ;	return FR_OK;
 23635                        ;}
 23636                        ;#endif	/* FF_CODE_PAGE == 0 */
 23637                        ;
 23638                        ;
 23639                        	.line	6931
 23640                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ff.c",6790
 23641                        	xref	~~k_debug_pointer
 23642                        	xref	~~k_debug_hex
 23643                        	xref	~~k_debug_integer
 23644                        	xref	~~k_debug_long
 23645                        	xref	~~k_debug_string
 23646                        	xref	~~disk_ioctl
  Thu Dec  3 2020 22:25                                                Page 469


 23647                        	xref	~~disk_write
 23648                        	xref	~~disk_read
 23649                        	xref	~~disk_status
 23650                        	xref	~~disk_initialize
 23651                        	udata
 23652                        ~~Fsid
 23653 00:0000:              	ds	2
 23654 00:0002:              	ends
 23655                        	udata
 23656                        ~~FatFs
 23657 00:0002:              	ds	4
 23658 00:0006:              	ends
 23659                        	.sym	~~putc_init,~~putc_init,65,3,0
 23660                        	.sym	~~putc_flush,~~putc_flush,69,3,0
 23661                        	.sym	~~putc_bfd,~~putc_bfd,65,3,0
 23662                        	.sym	putbuff,0,10,14,576,86
 23663                        	.sym	~~validate,~~validate,69,3,0
 23664                        	.sym	~~k_debug_pointer,~~k_debug_pointer,69,1
                    8,0
 23665                        	.sym	~~mount_volume,~~mount_volume,69,3,0
 23666                        	.sym	~~find_volume,~~find_volume,80,3,0
 23667                        	.sym	~~k_debug_hex,~~k_debug_hex,69,18,0
 23668                        	.sym	~~k_debug_integer,~~k_debug_integer,69,1
                    8,0
 23669                        	.sym	~~k_debug_long,~~k_debug_long,69,18,0
 23670                        	.sym	~~check_fs,~~check_fs,80,3,0
 23671                        	.sym	~~get_ldnumber,~~get_ldnumber,69,3,0
 23672                        	.sym	~~k_debug_string,~~k_debug_string,69,18,
                    0
 23673                        	.sym	~~follow_path,~~follow_path,69,3,0
 23674                        	.sym	~~create_name,~~create_name,69,3,0
 23675                        	.sym	~~get_fileinfo,~~get_fileinfo,65,3,0
 23676                        	.sym	~~dir_remove,~~dir_remove,69,3,0
 23677                        	.sym	~~dir_register,~~dir_register,69,3,0
 23678                        	.sym	~~dir_find,~~dir_find,69,3,0
 23679                        	.sym	~~dir_read,~~dir_read,69,3,0
 23680                        	.sym	~~st_clust,~~st_clust,65,3,0
 23681                        	.sym	~~ld_clust,~~ld_clust,82,3,0
 23682                        	.sym	~~dir_alloc,~~dir_alloc,69,3,0
 23683                        	.sym	~~dir_next,~~dir_next,69,3,0
 23684                        	.sym	~~dir_sdi,~~dir_sdi,69,3,0
 23685                        	.sym	~~dir_clear,~~dir_clear,69,3,0
 23686                        	.sym	~~create_chain,~~create_chain,82,3,0
 23687                        	.sym	~~remove_chain,~~remove_chain,69,3,0
 23688                        	.sym	~~put_fat,~~put_fat,69,3,0
 23689                        	.sym	~~get_fat,~~get_fat,82,3,0
 23690                        	.sym	~~clst2sect,~~clst2sect,82,3,0
 23691                        	.sym	~~sync_fs,~~sync_fs,69,3,0
 23692                        	.sym	~~move_window,~~move_window,69,3,0
 23693                        	.sym	~~sync_window,~~sync_window,69,3,0
 23694                        	.sym	~~dbc_2nd,~~dbc_2nd,69,3,0
 23695                        	.sym	~~dbc_1st,~~dbc_1st,69,3,0
 23696                        	.sym	~~chk_chr,~~chk_chr,69,3,0
 23697                        	.sym	~~mem_cmp,~~mem_cmp,69,3,0
 23698                        	.sym	~~mem_set,~~mem_set,65,3,0
 23699                        	.sym	~~mem_cpy,~~mem_cpy,65,3,0
 23700                        	.sym	~~st_dword,~~st_dword,65,3,0
 23701                        	.sym	~~st_word,~~st_word,65,3,0
  Thu Dec  3 2020 22:25                                                Page 470


 23702                        	.sym	~~ld_dword,~~ld_dword,82,3,0
 23703                        	.sym	~~ld_word,~~ld_word,69,3,0
 23704                        	.sym	~~ExCvt,~~ExCvt,110,3,0,128
 23705                        	.sym	~~Fsid,~~Fsid,5,3,16
 23706                        	.sym	~~FatFs,~~FatFs,1130,3,32,80,1
 23707                        	.sym	va_list,0,142,14,32
 23708                        	.sym	~~disk_ioctl,~~disk_ioctl,69,18,0
 23709                        	.sym	~~disk_write,~~disk_write,69,18,0
 23710                        	.sym	~~disk_read,~~disk_read,69,18,0
 23711                        	.sym	~~disk_status,~~disk_status,78,18,0
 23712                        	.sym	~~disk_initialize,~~disk_initialize,78,1
                    8,0
 23713                        	.sym	DRESULT,0,5,14,16
 23714                        	.sym	DSTATUS,0,14,14,8
 23715                        	.sym	~~f_gets,~~f_gets,1102,2,32
 23716                        	.sym	~~f_printf,~~f_printf,69,2,0
 23717                        	.sym	~~f_puts,~~f_puts,69,2,0
 23718                        	.sym	~~f_putc,~~f_putc,69,2,0
 23719                        	.sym	~~f_mount,~~f_mount,69,2,0
 23720                        	.sym	~~f_getfree,~~f_getfree,69,2,0
 23721                        	.sym	~~f_stat,~~f_stat,69,2,0
 23722                        	.sym	~~f_rename,~~f_rename,69,2,0
 23723                        	.sym	~~f_unlink,~~f_unlink,69,2,0
 23724                        	.sym	~~f_mkdir,~~f_mkdir,69,2,0
 23725                        	.sym	~~f_readdir,~~f_readdir,69,2,0
 23726                        	.sym	~~f_closedir,~~f_closedir,69,2,0
 23727                        	.sym	~~f_opendir,~~f_opendir,69,2,0
 23728                        	.sym	~~f_sync,~~f_sync,69,2,0
 23729                        	.sym	~~f_truncate,~~f_truncate,69,2,0
 23730                        	.sym	~~f_lseek,~~f_lseek,69,2,0
 23731                        	.sym	~~f_write,~~f_write,69,2,0
 23732                        	.sym	~~f_read,~~f_read,69,2,0
 23733                        	.sym	~~f_close,~~f_close,69,2,0
 23734                        	.sym	~~f_open,~~f_open,69,2,0
 23735                        	.sym	FRESULT,0,5,14,16
 23736                        	.sym	MKFS_PARM,0,10,14,80,85
 23737                        	.sym	FILINFO,0,10,14,176,84
 23738                        	.sym	DIR,0,10,14,352,83
 23739                        	.sym	FIL,0,10,14,4400,82
 23740                        	.sym	FFOBJID,0,10,14,128,81
 23741                        	.sym	FATFS,0,10,14,4472,80
 23742                        	.sym	LBA_t,0,18,14,32
 23743                        	.sym	FSIZE_t,0,18,14,32
 23744                        	.sym	TCHAR,0,14,14,8
 23745                        	.sym	PFXDOSDEVICE,0,138,14,32,79
 23746                        	.sym	FXDOSDEVICE,0,10,14,5648,79
 23747                        	.sym	DOSINITDEVICE,0,641,14,32
 23748                        	.sym	DOSSECTORWRITER,0,654,14,32
 23749                        	.sym	DOSSECTORREADER,0,654,14,32
 23750                        	.sym	PIDENTIFY_DEVICE_DATA,0,138,14,32,78
 23751                        	.sym	IDENTIFY_DEVICE_DATA,0,10,14,4096,78
 23752                        	.sym	PIDSECTOR,0,138,14,32,55
 23753                        	.sym	IDSECTOR,0,10,14,2048,55
 23754                        	.sym	PLFN,0,138,14,32,54
 23755                        	.sym	LFN,0,10,14,256,54
 23756                        	.sym	PFAT16ENTRYLONG,0,138,14,32,53
 23757                        	.sym	FAT16ENTRYLONG,0,10,14,288,53
 23758                        	.sym	PFAT16ENTRY,0,138,14,32,52
  Thu Dec  3 2020 22:25                                                Page 471


 23759                        	.sym	FAT16ENTRY,0,10,14,256,52
 23760                        	.sym	Fat16BootSector,0,10,14,4096,51
 23761                        	.sym	PPARTITIONTABLE,0,138,14,32,50
 23762                        	.sym	PARTITIONTABLE,0,10,14,128,50
 23763                        	.sym	PFATBOOTSECTOR,0,138,14,32,49
 23764                        	.sym	FATBOOTSECTOR,0,10,14,928,49
 23765                        	.sym	fat_BS_t,0,10,14,688,48
 23766                        	.sym	fat_extBS_16_t,0,10,14,192,47
 23767                        	.sym	PFAT32EXT,0,138,14,32,46
 23768                        	.sym	fat_extBS_32_t,0,10,14,416,46
 23769                        	.sym	P_FX_FAT_DIR_INFO,0,138,14,32,45
 23770                        	.sym	FX_FAT_DIR_INFO,0,10,14,256,45
 23771                        	.sym	PFILEINFO,0,138,14,32,44
 23772                        	.sym	FILEINFO,0,10,14,136,44
 23773                        	.sym	PDISKINFO,0,138,14,32,43
 23774                        	.sym	DISKINFO,0,10,14,416,43
 23775                        	.sym	PDIRENTRY,0,138,14,32,42
 23776                        	.sym	DIRENTRY,0,10,14,256,42
 23777                        	.sym	PFXCOMBUFFER,0,138,14,32,41
 23778                        	.sym	FXCOMBUFFER,0,10,14,2080,41
 23779                        	.sym	PSUBMENULIST,0,138,14,32,40
 23780                        	.sym	SUBMENULIST,0,10,14,40,40
 23781                        	.sym	HSUBMENU,0,7,14,32
 23782                        	.sym	PSUBMENU,0,138,14,32,39
 23783                        	.sym	SUBMENU,0,10,14,64,39
 23784                        	.sym	MenuAction,0,641,14,32
 23785                        	.sym	PMENUANCHOR,0,138,14,32,38
 23786                        	.sym	MENUANCHOR,0,10,14,144,38
 23787                        	.sym	PTEXTBOX,0,138,14,32,37
 23788                        	.sym	TEXTBOX,0,10,14,144,37
 23789                        	.sym	PLISTBOX,0,138,14,32,36
 23790                        	.sym	LISTBOX,0,10,14,240,36
 23791                        	.sym	PSCROLLBAR,0,138,14,32,35
 23792                        	.sym	SCROLLBAR,0,10,14,192,35
 23793                        	.sym	PBUTTON,0,138,14,32,34
 23794                        	.sym	BUTTON,0,10,14,80,34
 23795                        	.sym	PMENUDROPDOWNDATA,0,138,14,32,33
 23796                        	.sym	MENUDROPDOWNDATA,0,10,14,3568,33
 23797                        	.sym	PMENUTAG,0,138,14,32,32
 23798                        	.sym	MENUTAG,0,10,14,112,32
 23799                        	.sym	PMENU,0,138,14,32,31
 23800                        	.sym	MENU,0,10,14,248,31
 23801                        	.sym	HMENURESOURCE,0,129,14,32
 23802                        	.sym	HTEXTBOX,0,7,14,32
 23803                        	.sym	PTEXTBOXX,0,138,14,32,30
 23804                        	.sym	TEXTBOXX,0,10,14,112,30
 23805                        	.sym	FONTMETRIC,0,10,14,32,29
 23806                        	.sym	TITLE,0,142,14,32
 23807                        	.sym	PHANDLE,0,1153,14,32
 23808                        	.sym	HANDLE,0,129,14,32
 23809                        	.sym	PWINDOWEX,0,138,14,32,28
 23810                        	.sym	WINDOWEX,0,10,14,2704,28
 23811                        	.sym	PWINDOW,0,138,14,32,27
 23812                        	.sym	WINDOW,0,10,14,2808,27
 23813                        	.sym	PDRAGDATA,0,138,14,32,26
 23814                        	.sym	DRAGDATA,0,10,14,136,26
 23815                        	.sym	PNCCLICKABLE,0,138,14,32,25
 23816                        	.sym	NCCLICKABLE,0,10,14,88,25
  Thu Dec  3 2020 22:25                                                Page 472


 23817                        	.sym	HCLICKABLE,0,7,14,32
 23818                        	.sym	PCLICKABLE,0,138,14,32,24
 23819                        	.sym	CLICKABLE,0,10,14,88,24
 23820                        	.sym	PWNDCLASS,0,138,14,32,23
 23821                        	.sym	WNDCLASS,0,10,14,256,23
 23822                        	.sym	HBRUSH,0,129,14,32
 23823                        	.sym	HCURSOR,0,129,14,32
 23824                        	.sym	HICON,0,129,14,32
 23825                        	.sym	HINSTANCE,0,129,14,32
 23826                        	.sym	FXWndProc,0,654,14,32
 23827                        	.sym	PRECT,0,138,14,32,22
 23828                        	.sym	RECT,0,10,14,64,22
 23829                        	.sym	PPOINT,0,138,14,32,21
 23830                        	.sym	POINT,0,10,14,32,21
 23831                        	.sym	PFXPROPERTY,0,138,14,32,19
 23832                        	.sym	FXPROPERTY,0,10,14,384,19
 23833                        	.sym	SCANCODE,0,14,14,8
 23834                        	.sym	KEYCODE,0,14,14,8
 23835                        	.sym	PFXPROCESSMESSAGE,0,138,14,32,18
 23836                        	.sym	FXPROCESSMESSAGE,0,10,14,112,18
 23837                        	.sym	PFXPROCESS,0,138,14,32,17
 23838                        	.sym	FXPROCESS,0,10,14,800,17
 23839                        	.sym	PDESKTOP_CONTROL,0,138,14,32,16
 23840                        	.sym	DESKTOP_CONTROL,0,10,14,392,16
 23841                        	.sym	PCONSOLE_CONTROL,0,138,14,32,15
 23842                        	.sym	CONSOLE_CONTROL,0,10,14,448,15
 23843                        	.sym	FXProcessProc,0,641,14,32
 23844                        	.sym	PFXCMDMESSAGE,0,138,14,32,14
 23845                        	.sym	FXCMDMESSAGE,0,10,14,304,14
 23846                        	.sym	PFXOSMESSAGE,0,138,14,32,13
 23847                        	.sym	FXOSMESSAGE,0,10,14,304,13
 23848                        	.sym	PINT_REGS,0,138,14,32,12
 23849                        	.sym	INT_REGS,0,10,14,104,12
 23850                        	.sym	TASK_STACK,0,10,14,32,11
 23851                        	.sym	TASK,0,10,14,48,10
 23852                        	.sym	PIRQDATA,0,138,14,32,9
 23853                        	.sym	IRQDATA,0,10,14,48,9
 23854                        	.sym	HMENU,0,129,14,32
 23855                        	.sym	HWND,0,129,14,32
 23856                        	.sym	MSGDATA,0,14,14,8
 23857                        	.sym	MSGDEST,0,18,14,32
 23858                        	.sym	MSGSRC,0,18,14,32
 23859                        	.sym	MSGTYPE,0,16,14,16
 23860                        	.sym	PROCESS_RESOURCE_LIST,0,138,14,32,3
 23861                        	.sym	PROCESS_TLS_LIST,0,138,14,32,3
 23862                        	.sym	SEMAPHORE_LIST,0,138,14,32,3
 23863                        	.sym	FILE_BLOCK_LIST,0,138,14,32,3
 23864                        	.sym	FILE_PATH_LIST,0,138,14,32,3
 23865                        	.sym	PROCEDURE_LIST,0,138,14,32,3
 23866                        	.sym	FILE_HANDLE,0,138,14,32,8
 23867                        	.sym	FILE_BLOCK,0,10,14,552,8
 23868                        	.sym	SEMAPHORE,0,10,14,16,7
 23869                        	.sym	PPROCESS_SIGNAL,0,138,14,32,6
 23870                        	.sym	PROCESS_SIGNAL,0,10,14,16,6
 23871                        	.sym	KRESULT,0,18,14,32
 23872                        	.sym	PKERNEL_ERROR,0,138,14,32,5
 23873                        	.sym	KERNEL_ERROR,0,10,14,32,5
 23874                        	.sym	PROCESS_STATUS,0,16,14,16
  Thu Dec  3 2020 22:25                                                Page 473


 23875                        	.sym	FILE_PATH_NAME,0,142,14,32
 23876                        	.sym	PROCESS_RESOURCE,0,129,14,32
 23877                        	.sym	PROCESS_TLS,0,129,14,32
 23878                        	.sym	PROCESS_CTX,0,129,14,32
 23879                        	.sym	USERID,0,16,14,16
 23880                        	.sym	PROCESS_ID,0,18,14,32
 23881                        	.sym	PROCESS_BANK,0,14,14,8
 23882                        	.sym	PFXQUEUE,0,138,14,32,4
 23883                        	.sym	FXQUEUE,0,10,14,80,4
 23884                        	.sym	PFXNODELIST,0,138,14,32,3
 23885                        	.sym	FXNODELIST,0,10,14,96,3
 23886                        	.sym	NodeListDeallocator,0,641,14,32
 23887                        	.sym	PFXNODE,0,138,14,32,2
 23888                        	.sym	FXNODE,0,10,14,384,2
 23889                        	.sym	PBYTEBITS,0,138,14,32,1
 23890                        	.sym	BYTEBITS,0,10,14,8,1
 23891                        	.sym	HCOLOR,0,129,14,32
 23892                        	.sym	HFONT,0,129,14,32
 23893                        	.sym	HDC,0,129,14,32
 23894                        	.sym	HPOINTER,0,129,14,32
 23895                        	.sym	uint32_t,0,18,14,32
 23896                        	.sym	uint8_t,0,14,14,8
 23897                        	.sym	PFAR,0,142,14,32
 23898                        	.sym	LPBOOL,0,142,14,32
 23899                        	.sym	BOOL,0,14,14,8
 23900                        	.sym	DWORD,0,18,14,32
 23901                        	.sym	ULONG,0,18,14,32
 23902                        	.sym	LPLONG,0,135,14,32
 23903                        	.sym	LONG,0,7,14,32
 23904                        	.sym	PUINT,0,144,14,32
 23905                        	.sym	USHORT,0,16,14,16
 23906                        	.sym	UINT,0,16,14,16
 23907                        	.sym	INT,0,5,14,16
 23908                        	.sym	WORD,0,5,14,16
 23909                        	.sym	PBYTE,0,142,14,32
 23910                        	.sym	BYTE,0,14,14,8
 23911                        	.sym	UCHAR,0,14,14,8
 23912                        	.sym	LPWCSTR,0,142,14,32
 23913                        	.sym	LPCSTR,0,142,14,32
 23914                        	.sym	LPSTR,0,142,14,32
 23915                        	.sym	LPCHAR,0,142,14,32
 23916                        	.sym	CHAR,0,14,14,8
 23917                        	.sym	LPVOID,0,129,14,32
 23918                        	.sym	VOID,0,1,14,32
 23919                        	end


      Lines assembled: 23919
      Errors: 0
