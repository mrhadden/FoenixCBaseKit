  Thu Dec  3 2020 22:25                                                Page 1


                     ***************************************
                     **      WDC 65C816 Macro Assembler   **
                     **                                   **
                     **     Version 3.49.1- Feb  6 2006    **
                     ***************************************

     1                        ;:ts=8
     2             00000001   R0	equ	1
     3             00000005   R1	equ	5
     4             00000009   R2	equ	9
     5             0000000D   R3	equ	13
     6                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxirq.c",0
     7                        ;
     8                        ;//#include "fxos.h"
     9                        ;//#include "fxstartup.h"
    10                        ;//#include "fxeventmanager.h"
    11                        ;
    12                        ;#ifdef USE_FX256_FMX
    13                        ;#include "fxc256fmx.h"
    14                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256fmx.h",0
    15                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
    16                        	.stag	_fx_bytebits,8,1
    17                        	.member	b7,0,14,17,1
    18                        	.member	b6,1,14,17,1
    19                        	.member	b5,2,14,17,1
    20                        	.member	b4,3,14,17,1
    21                        	.member	b3,4,14,17,1
    22                        	.member	b2,5,14,17,1
    23                        	.member	b1,6,14,17,1
    24                        	.member	b0,7,14,17,1
    25                        	.eos
    26                        	.stag	_fx_node,384,2
    27                        	.member	type,0,14,8,8
    28                        	.member	Reserved0,8,14,8,8
    29                        	.member	data,16,129,8,32
    30                        	.member	last,48,138,8,32,2
    31                        	.member	next,80,138,8,32,2
    32                        	.member	name,112,110,8,0,32
    33                        	.member	Reserved1,368,16,8,16
    34                        	.eos
    35                        	.stag	_fx_nodelist,96,3
    36                        	.member	listhead,0,138,8,32,2
    37                        	.member	listData,32,129,8,32
    38                        	.member	deallocator,64,641,8,32
    39                        	.eos
    40                        	.stag	_fx_queue,80,4
    41                        	.member	count,0,5,8,16
    42                        	.member	front,16,138,8,32,2
    43                        	.member	rear,48,138,8,32,2
    44                        	.eos
    45                        	.stag	fake5_,32,5
    46                        	.member	subsystem,0,14,8,8
    47                        	.member	level,8,14,8,8
    48                        	.member	error,16,16,8,16
    49                        	.eos
  Thu Dec  3 2020 22:25                                                Page 2


    50                        	.stag	_fx_process_signal,16,6
    51                        	.member	cbSize,0,16,8,16
    52                        	.eos
    53                        	.stag	_fx_semaphore,16,7
    54                        	.member	reserved,0,5,8,16
    55                        	.eos
    56                        	.stag	_fx_fileBlock,552,8
    57                        	.member	openCount,0,16,8,16
    58                        	.member	lockCount,16,16,8,16
    59                        	.member	dirty,32,14,8,8
    60                        	.member	fileBuffer,40,110,8,0,64
    61                        	.eos
    62                        	.stag	_fx_irq_data,48,9
    63                        	.member	line,0,5,8,16
    64                        	.member	keycode,16,142,8,32
    65                        	.eos
    66                        	.stag	_task,48,10
    67                        	.member	SPL,0,14,8,8
    68                        	.member	SPH,8,14,8,8
    69                        	.member	pstack,16,142,8,32
    70                        	.eos
    71                        	.stag	_task_stack,32,11
    72                        	.member	SS,0,142,8,32
    73                        	.eos
    74                        	.stag	int_regs,104,12
    75                        	.member	PB,0,14,8,8
    76                        	.member	PH,8,14,8,8
    77                        	.member	PL,16,14,8,8
    78                        	.member	PP,24,14,8,8
    79                        	.member	DB,32,14,8,8
    80                        	.member	DH,40,14,8,8
    81                        	.member	DL,48,14,8,8
    82                        	.member	AH,56,14,8,8
    83                        	.member	AL,64,14,8,8
    84                        	.member	XH,72,14,8,8
    85                        	.member	XL,80,14,8,8
    86                        	.member	YH,88,14,8,8
    87                        	.member	YL,96,14,8,8
    88                        	.eos
    89                        	.stag	_fx_eventMessage,304,13
    90                        	.member	src,0,18,8,32
    91                        	.member	dest,32,18,8,32
    92                        	.member	type,64,16,8,16
    93                        	.member	hwnd,80,129,8,32
    94                        	.member	pheap,112,129,8,32
    95                        	.member	msgTime,144,18,8,32
    96                        	.member	data,176,110,8,0,16
    97                        	.eos
    98                        	.stag	_fx_cmdMessage,304,14
    99                        	.member	src,0,18,8,32
   100                        	.member	dest,32,18,8,32
   101                        	.member	type,64,16,8,16
   102                        	.member	hwnd,80,129,8,32
   103                        	.member	pheap,112,129,8,32
   104                        	.member	msgTime,144,18,8,32
   105                        	.member	cmdCId,176,16,8,16
   106                        	.member	cmdMId,192,16,8,16
   107                        	.member	parameter1,208,18,8,32
  Thu Dec  3 2020 22:25                                                Page 3


   108                        	.member	parameter2,240,18,8,32
   109                        	.member	parameter3,272,18,8,32
   110                        	.eos
   111                        	.stag	_fx_console_ctl,448,15
   112                        	.member	maxCols,0,5,8,16
   113                        	.member	maxRows,16,5,8,16
   114                        	.member	curX,32,5,8,16
   115                        	.member	curY,48,5,8,16
   116                        	.member	fgColor,64,5,8,16
   117                        	.member	bgColor,80,5,8,16
   118                        	.member	mode,96,14,8,8
   119                        	.member	kbBuffer,104,101,8,0,16
   120                        	.member	screenBuffer,360,142,8,32
   121                        	.member	desktopMode,392,14,8,8
   122                        	.member	lastMouseButton,400,5,8,16
   123                        	.member	lastMouseX,416,5,8,16
   124                        	.member	lastMouseY,432,5,8,16
   125                        	.eos
   126                        	.stag	_fx_desktop_ctl,392,16
   127                        	.member	desktopMode,0,14,8,8
   128                        	.member	cursorCtl,8,5,8,16
   129                        	.member	cursorState,24,5,8,16
   130                        	.member	backgroundColor,40,5,8,16
   131                        	.member	foregroundColor,56,5,8,16
   132                        	.member	menuMode,72,5,8,16
   133                        	.member	lastMouseButton,88,5,8,16
   134                        	.member	lastMouseX,104,5,8,16
   135                        	.member	lastMouseY,120,5,8,16
   136                        	.member	currentDiskName,136,142,8,32
   137                        	.member	diskNodes,168,129,8,32
   138                        	.member	titleNodes,200,129,8,32
   139                        	.member	menuNodes,232,129,8,32
   140                        	.member	iconNodes,264,129,8,32
   141                        	.member	windowNodes,296,129,8,32
   142                        	.member	fontNodes,328,129,8,32
   143                        	.member	wndProc,360,138,8,32,3
   144                        	.eos
   145                        	.stag	_fx_process,800,17
   146                        	.member	cbSize,0,5,8,16
   147                        	.member	procId,16,18,8,32
   148                        	.member	parentId,48,18,8,32
   149                        	.member	ctx,80,129,8,32
   150                        	.member	userId,112,16,8,16
   151                        	.member	status,128,16,8,16
   152                        	.member	foregroundActive,144,14,8,8
   153                        	.member	tls,152,1121,8,32,8
   154                        	.member	commandLine,408,142,8,32
   155                        	.member	semaphores,440,138,8,32,3
   156                        	.member	fileHandles,472,138,8,32,3
   157                        	.member	pathList,504,138,8,32,3
   158                        	.member	resources,536,138,8,32,3
   159                        	.member	timerAware,568,14,8,8
   160                        	.member	timerTicks,576,112,8,0,2
   161                        	.member	timerTickCount,608,112,8,0,2
   162                        	.member	kernelError,640,10,8,32,5
   163                        	.member	consoleCtl,672,138,8,32,15
   164                        	.member	desktopCtl,704,138,8,32,16
   165                        	.member	execProc,736,641,8,32
  Thu Dec  3 2020 22:25                                                Page 4


   166                        	.member	startupArgs,768,129,8,32
   167                        	.eos
   168                        	.stag	_fxProcessMessage,112,18
   169                        	.member	src,0,18,8,32
   170                        	.member	dest,32,18,8,32
   171                        	.member	type,64,16,8,16
   172                        	.member	processInfo,80,138,8,32,17
   173                        	.eos
   174                        	.stag	_fx_property,384,19
   175                        	.member	name,0,110,8,0,16
   176                        	.member	value,128,110,8,0,32
   177                        	.eos
   178                        	.utag	_24bitPointer,32,20
   179                        	.member	address,0,142,11,32
   180                        	.member	bytes,0,110,11,0,4
   181                        	.eos
   182                        	.stag	_PointStruct,32,21
   183                        	.member	x,0,5,8,16
   184                        	.member	y,16,5,8,16
   185                        	.eos
   186                        	.stag	_RectStruct,64,22
   187                        	.member	x,0,5,8,16
   188                        	.member	y,16,5,8,16
   189                        	.member	width,32,5,8,16
   190                        	.member	height,48,5,8,16
   191                        	.eos
   192                        	.stag	_k_WindowClass,256,23
   193                        	.member	cbSize,0,16,8,16
   194                        	.member	style,16,16,8,16
   195                        	.member	pWndProc,32,654,8,32
   196                        	.member	hInstance,64,129,8,32
   197                        	.member	hIcon,96,129,8,32
   198                        	.member	hCursor,128,129,8,32
   199                        	.member	hbrBackground,160,129,8,32
   200                        	.member	lpszMenuName,192,142,8,32
   201                        	.member	lpszClassName,224,142,8,32
   202                        	.eos
   203                        	.stag	_ClickableRect,88,24
   204                        	.member	area,0,10,8,64,22
   205                        	.member	z,64,5,8,16
   206                        	.member	enabled,80,14,8,8
   207                        	.eos
   208                        	.stag	_NCClickableRect,88,25
   209                        	.member	area,0,10,8,64,22
   210                        	.member	msgType,64,16,8,16
   211                        	.member	enabled,80,14,8,8
   212                        	.eos
   213                        	.stag	_DragData,136,26
   214                        	.member	area,0,10,8,64,22
   215                        	.member	xoffset,64,5,8,16
   216                        	.member	yoffset,80,5,8,16
   217                        	.member	msgType,96,16,8,16
   218                        	.member	isDrag,112,14,8,8
   219                        	.member	canDrag,120,14,8,8
   220                        	.member	canDrop,128,14,8,8
   221                        	.eos
   222                        	.stag	_k_WindowStruct,2808,27
   223                        	.member	cbSize,0,16,8,16
  Thu Dec  3 2020 22:25                                                Page 5


   224                        	.member	style,16,18,8,32
   225                        	.member	win_id,48,5,8,16
   226                        	.member	win_x,64,5,8,16
   227                        	.member	win_y,80,5,8,16
   228                        	.member	win_width,96,5,8,16
   229                        	.member	win_height,112,5,8,16
   230                        	.member	wndRect,128,10,8,64,22
   231                        	.member	clientRect,192,10,8,64,22
   232                        	.member	nonclientGadgets,256,106,8,0,25,16
   233                        	.member	clickable,1664,129,8,32
   234                        	.member	win_title,1696,110,8,0,32
   235                        	.member	Reserved0,1952,16,8,16
   236                        	.member	win_class,1968,110,8,0,16
   237                        	.member	win_class_name,2096,110,8,0,32
   238                        	.member	nBitmapLayer,2352,16,8,16
   239                        	.member	procid,2368,18,8,32
   240                        	.member	pWndClass,2400,138,8,32,23
   241                        	.member	pParentWindow,2432,129,8,32
   242                        	.member	hMenu,2464,129,8,32
   243                        	.member	pChildWindows,2496,138,8,32,3
   244                        	.member	pChildHitList,2528,138,8,32,3
   245                        	.member	isVisible,2560,14,8,8
   246                        	.member	windowData,2568,129,8,32
   247                        	.member	clientData,2600,1121,8,32,6
   248                        	.member	isClosed,2792,14,8,8
   249                        	.member	isClosing,2800,14,8,8
   250                        	.eos
   251                        	.stag	_k_WindowStructEx,2704,28
   252                        	.member	cbSize,0,16,8,16
   253                        	.member	style,16,18,8,32
   254                        	.member	win_id,48,5,8,16
   255                        	.member	win_x,64,5,8,16
   256                        	.member	win_y,80,5,8,16
   257                        	.member	win_width,96,5,8,16
   258                        	.member	win_height,112,5,8,16
   259                        	.member	wndRect,128,10,8,64,22
   260                        	.member	clientRect,192,10,8,64,22
   261                        	.member	nonclientGadgets,256,106,8,0,25,16
   262                        	.member	clickable,1664,129,8,32
   263                        	.member	win_title,1696,110,8,0,32
   264                        	.member	Reserved0,1952,16,8,16
   265                        	.member	win_class,1968,110,8,0,16
   266                        	.member	nBitmapLayer,2096,16,8,16
   267                        	.member	procid,2112,18,8,32
   268                        	.member	pWndClass,2144,138,8,32,23
   269                        	.member	pParentWindow,2176,129,8,32
   270                        	.member	hMenu,2208,129,8,32
   271                        	.member	pChildWindows,2240,138,8,32,3
   272                        	.member	pChildHitList,2272,138,8,32,3
   273                        	.member	isVisible,2304,14,8,8
   274                        	.member	windowData,2312,129,8,32
   275                        	.member	clientData,2344,1121,8,32,4
   276                        	.member	isClosed,2472,14,8,8
   277                        	.member	hWnd,2480,129,8,32
   278                        	.member	localRect,2512,10,8,64,22
   279                        	.member	globalRect,2576,10,8,64,22
   280                        	.member	clientOffsetRect,2640,10,8,64,22
   281                        	.eos
  Thu Dec  3 2020 22:25                                                Page 6


   282                        	.stag	_FontMetric,32,29
   283                        	.member	width,0,5,8,16
   284                        	.member	height,16,5,8,16
   285                        	.eos
   286                        	.stag	_ctl_Textbox,112,30
   287                        	.member	win_id,0,5,8,16
   288                        	.member	win_x,16,5,8,16
   289                        	.member	win_y,32,5,8,16
   290                        	.member	win_width,48,5,8,16
   291                        	.member	win_height,64,5,8,16
   292                        	.member	content,80,1166,8,32
   293                        	.eos
   294                        	.stag	_MenuStruct,248,31
   295                        	.member	cx,0,5,8,16
   296                        	.member	cy,16,5,8,16
   297                        	.member	width,32,5,8,16
   298                        	.member	height,48,5,8,16
   299                        	.member	fcolor,64,14,8,8
   300                        	.member	bcolor,72,14,8,8
   301                        	.member	chromeLeft,80,14,8,8
   302                        	.member	chromeRight1,88,14,8,8
   303                        	.member	chromeRight2,96,14,8,8
   304                        	.member	itemId,104,16,8,16
   305                        	.member	pCaption,120,142,8,32
   306                        	.member	subMenus,152,138,8,32,3
   307                        	.member	pBackground,184,129,8,32
   308                        	.member	hWndOwner,216,129,8,32
   309                        	.eos
   310                        	.stag	fake32_,112,32
   311                        	.member	menuId,0,16,8,16
   312                        	.member	caption,16,142,8,32
   313                        	.member	rect,48,10,8,64,22
   314                        	.eos
   315                        	.stag	fake33_,3568,33
   316                        	.member	pParent,0,138,8,32,27
   317                        	.member	rect,32,10,8,64,22
   318                        	.member	captions,96,1134,8,32,24
   319                        	.member	chrome,864,110,8,0,24
   320                        	.member	ids,1056,112,8,0,24
   321                        	.member	clickable,1440,106,8,0,24,24
   322                        	.member	selected,3552,16,8,16
   323                        	.eos
   324                        	.stag	_fx_button_t,80,34
   325                        	.member	pCaption,0,142,8,32
   326                        	.member	data,32,129,8,32
   327                        	.member	captionPixelWidth,64,16,8,16
   328                        	.eos
   329                        	.stag	_fx_scrollbar_t,192,35
   330                        	.member	min,0,16,8,16
   331                        	.member	max,16,16,8,16
   332                        	.member	increment,32,16,8,16
   333                        	.member	stopsize,48,16,8,16
   334                        	.member	location,64,5,8,16
   335                        	.member	state,80,5,8,16
   336                        	.member	rectThumb,96,10,8,64,22
   337                        	.member	data,160,129,8,32
   338                        	.eos
   339                        	.stag	_fx_listbox_t,240,36
  Thu Dec  3 2020 22:25                                                Page 7


   340                        	.member	pos,0,5,8,16
   341                        	.member	selected,16,16,8,16
   342                        	.member	offsetX,32,5,8,16
   343                        	.member	offsetY,48,5,8,16
   344                        	.member	inc,64,5,8,16
   345                        	.member	direction,80,5,8,16
   346                        	.member	top,96,5,8,16
   347                        	.member	bottom,112,5,8,16
   348                        	.member	indexTop,128,5,8,16
   349                        	.member	indexBottom,144,5,8,16
   350                        	.member	maxItems,160,16,8,16
   351                        	.member	fontSet,176,142,8,32
   352                        	.member	data,208,129,8,32
   353                        	.eos
   354                        	.stag	_fx_textbox_t,144,37
   355                        	.member	pos,0,5,8,16
   356                        	.member	selected,16,16,8,16
   357                        	.member	offsetX,32,5,8,16
   358                        	.member	offsetY,48,5,8,16
   359                        	.member	isShifted,64,14,8,8
   360                        	.member	cursorState,72,14,8,8
   361                        	.member	fontSet,80,142,8,32
   362                        	.member	data,112,129,8,32
   363                        	.eos
   364                        	.stag	_fx_menuAnchor_t,144,38
   365                        	.member	pCaption,0,142,8,32
   366                        	.member	renderLayoutX,32,16,8,16
   367                        	.member	renderLayoutY,48,16,8,16
   368                        	.member	captionPixelWidth,64,16,8,16
   369                        	.member	data,80,129,8,32
   370                        	.member	droppedWindow,112,138,8,32,27
   371                        	.eos
   372                        	.stag	_SubMenuStruct,64,39
   373                        	.member	caption,0,142,8,32
   374                        	.member	action,32,641,8,32
   375                        	.eos
   376                        	.stag	_SubMenuListStruct,40,40
   377                        	.member	cMenus,0,14,8,8
   378                        	.member	psubmenus,8,9354,8,32,39
   379                        	.eos
   380                        	.stag	_fx_ComBuffer,2080,41
   381                        	.member	cbSize,0,16,8,16
   382                        	.member	cbBuffer,16,16,8,16
   383                        	.member	buffer,32,110,8,0,256
   384                        	.eos
   385                        	.line	708
   386                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256fmx.h",5
   387                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fmx_vicky.h",0
   388                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   389                        	.line	708
   390                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fmx_vicky.h",11
   391                        	.line	72
   392                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256fmx.h",6
  Thu Dec  3 2020 22:25                                                Page 8


   393                        	.line	1325
   394                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxirq.c",7
   395                        ;#else
   396                        ;#include "fxc256.h"
   397                        ;#endif
   398                        ;
   399                        ;#include "fxtypes.h"
   400                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   401                        	.line	708
   402                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxirq.c",12
   403                        ;#include "fxkernel.h"
   404                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxkernel.h",0
   405                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   406                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   407                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stddef.h",0
   408                        	.line	88
   409                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",43
   410                        	.stag	fake42_,32,42
   411                        	.member	quot,0,5,8,16
   412                        	.member	rem,16,5,8,16
   413                        	.eos
   414                        	.stag	fake43_,64,43
   415                        	.member	quot,0,7,8,32
   416                        	.member	rem,32,7,8,32
   417                        	.eos
   418                        	.stag	int_sqrt,32,44
   419                        	.member	sqrt,0,16,8,16
   420                        	.member	frac,16,16,8,16
   421                        	.eos
   422                        	.line	205
   423                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",4
   424                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
   425                        	.line	134
   426                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",5
   427                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    ctype.h",0
   428                        	.line	103
   429                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",6
   430                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   431                        	.line	708
   432                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",8
   433                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstringtable.h",0
   434                        	.line	89
  Thu Dec  3 2020 22:25                                                Page 9


   435                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",9
   436                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256fmx.h",0
   437                        	.line	1325
   438                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",13
   439                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxkernel.h",0
   440                        	.line	270
   441                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",19
   442                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",0
   443                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
   444                        	.line	134
   445                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",5
   446                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   447                        	.line	205
   448                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",6
   449                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   450                        	.line	708
   451                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",7
   452                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256fmx.h",0
   453                        	.line	1325
   454                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",10
   455                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",0
   456                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   457                        	.line	205
   458                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",5
   459                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
   460                        	.line	134
   461                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",6
   462                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   463                        	.line	708
   464                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",7
   465                        	.stag	_fx_string,64,45
   466                        	.member	size,0,16,8,16
   467                        	.member	pos,16,5,8,16
   468                        	.member	buffer,32,142,8,32
   469                        	.eos
   470                        	.line	71
   471                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
  Thu Dec  3 2020 22:25                                                Page 10


                    space\FXOSv1\src\fxconsole.h",15
   472                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",0
   473                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   474                        	.line	25
   475                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",5
   476                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxexec.h",0
   477                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   478                        	.line	708
   479                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxexec.h",5
   480                        	.line	52
   481                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",6
   482                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",0
   483                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   484                        	.line	708
   485                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",5
   486                        	.line	61
   487                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",7
   488                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",0
   489                        	.line	171
   490                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",8
   491                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",0
   492                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   493                        	.line	708
   494                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",5
   495                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   496                        	.line	25
   497                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",6
   498                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",0
   499                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   500                        	.line	25
   501                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",5
   502                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc_cfg.h",0
   503                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos_build_parameters.h",0
   504                        	.line	32
   505                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
  Thu Dec  3 2020 22:25                                                Page 11


                    space\FXOSv1\src\umm_malloc_cfg.h",8
   506                        	.stag	UMM_HEAP_INFO_t,256,46
   507                        	.member	totalEntries,0,18,8,32
   508                        	.member	usedEntries,32,18,8,32
   509                        	.member	freeEntries,64,18,8,32
   510                        	.member	totalBlocks,96,18,8,32
   511                        	.member	usedBlocks,128,18,8,32
   512                        	.member	freeBlocks,160,18,8,32
   513                        	.member	maxFreeContiguousBlocks,192,18,8,32
   514                        	.member	blockSize,224,18,8,32
   515                        	.eos
   516                        	.line	199
   517                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",6
   518                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc.h",0
   519                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   520                        	.line	708
   521                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc.h",11
   522                        	.line	24
   523                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",7
   524                        	.stag	_fx_memory_map,2072,47
   525                        	.member	availableMemory,0,18,8,32
   526                        	.member	valid_segments,32,110,8,0,255
   527                        	.eos
   528                        	.line	39
   529                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",7
   530                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",0
   531                        	.line	743
   532                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",8
   533                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxgui.h",0
   534                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxfont.h",0
   535                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   536                        	.line	708
   537                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxfont.h",6
   538                        	.line	64
   539                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxgui.h",4
   540                        	.stag	_click_detected,64,48
   541                        	.member	window,0,138,8,32,27
   542                        	.member	handler,32,641,8,32
   543                        	.eos
   544                        	.stag	_current_palette_map,400,49
   545                        	.member	CUR_DESKTOP,0,5,8,16
   546                        	.member	CUR_BACKGROUND,16,5,8,16
   547                        	.member	CUR_FONT,32,5,8,16
   548                        	.member	CUR_SELECTED_FONT,48,5,8,16
   549                        	.member	CUR_HIGHLIGHT_COLOR,64,5,8,16
  Thu Dec  3 2020 22:25                                                Page 12


   550                        	.member	CUR_WINDOWFRAME,80,5,8,16
   551                        	.member	CUR_WINDOWBORDER,96,5,8,16
   552                        	.member	CUR_WINDOWSHADOW,112,5,8,16
   553                        	.member	CUR_MENU,128,5,8,16
   554                        	.member	CUR_GADGET,144,5,8,16
   555                        	.member	CUR_COLOR,160,101,8,0,15
   556                        	.eos
   557                        	.line	264
   558                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",9
   559                        	.stag	_childMessage_t,64,50
   560                        	.member	msgType,0,16,8,16
   561                        	.member	msgData,16,129,8,32
   562                        	.member	dataSize,48,16,8,16
   563                        	.eos
   564                        	.line	362
   565                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",9
   566                        	.stag	_fx_main_loopvars,16,51
   567                        	.member	dummy,0,5,8,16
   568                        	.eos
   569                        	.stag	_fxMouseMessageData,64,52
   570                        	.member	button1,0,14,8,8
   571                        	.member	button2,8,14,8,8
   572                        	.member	button3,16,14,8,8
   573                        	.member	button4,24,14,8,8
   574                        	.member	x,32,16,8,16
   575                        	.member	y,48,16,8,16
   576                        	.eos
   577                        	.stag	_fx_eventProcess,64,53
   578                        	.member	process,0,138,8,32,17
   579                        	.member	eventProc,32,641,8,32
   580                        	.eos
   581                        	.stag	_mouse_msg_state,184,54
   582                        	.member	lastEvent,0,18,8,32
   583                        	.member	buttonLeftDown,32,14,8,8
   584                        	.member	lastLeftDown,40,18,8,32
   585                        	.member	buttonRightDown,72,14,8,8
   586                        	.member	lastRightDown,80,18,8,32
   587                        	.member	buttonMiddleDown,112,14,8,8
   588                        	.member	lastMiddleDown,120,18,8,32
   589                        	.member	lastX,152,16,8,16
   590                        	.member	lastY,168,16,8,16
   591                        	.eos
   592                        	.line	743
   593                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",16
   594                        	.stag	_fx_spinner_ctx,48,55
   595                        	.member	index,0,5,8,16
   596                        	.member	spinner,16,142,8,32
   597                        	.eos
   598                        	.stag	_fx_console_ctx,1144,56
   599                        	.member	lineBufferIndex,0,5,8,16
   600                        	.member	lineBuffer,16,110,8,0,128
   601                        	.member	isShifted,1040,14,8,8
   602                        	.member	userData,1048,129,8,32
   603                        	.member	screenBuffer,1080,129,8,32
   604                        	.member	Reserved1,1112,129,8,32
  Thu Dec  3 2020 22:25                                                Page 13


   605                        	.eos
   606                        	.stag	_token,64,57
   607                        	.member	type,0,5,8,16
   608                        	.member	depth,16,16,8,16
   609                        	.member	text,32,142,8,32
   610                        	.eos
   611                        	.stag	_command_args,64,58
   612                        	.member	proc,0,656,8,32
   613                        	.member	tokens,32,138,8,32,2
   614                        	.eos
   615                        	.line	171
   616                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",20
   617                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",0
   618                        	.line	71
   619                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",21
   620                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",0
   621                        	.line	61
   622                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",22
   623                        	.line	25
   624                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxkernel.h",5
   625                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",0
   626                        	.line	61
   627                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxkernel.h",6
   628                        	.stag	_fx_zero_page,448,59
   629                        	.member	fxos_mouse_byte_0,0,14,8,8
   630                        	.member	fxos_mouse_byte_1,8,14,8,8
   631                        	.member	fxos_mouse_byte_2,16,14,8,8
   632                        	.member	fxos_mouse_byte_t,24,14,8,8
   633                        	.member	fxos_mouse_byte_x_l,32,14,8,8
   634                        	.member	fxos_mouse_byte_x_h,40,14,8,8
   635                        	.member	fxos_mouse_byte_y_l,48,14,8,8
   636                        	.member	fxos_mouse_byte_y_h,56,14,8,8
   637                        	.member	fxos_key_byte_0,64,14,8,8
   638                        	.member	fxos_key_byte_1,72,14,8,8
   639                        	.member	fxos_key_byte_2,80,14,8,8
   640                        	.member	fxos_mouse_ctl,88,14,8,8
   641                        	.member	fxos_mouse_index,96,14,8,8
   642                        	.member	fxos_mouse_status,104,14,8,8
   643                        	.member	VersionMajor,112,16,8,16
   644                        	.member	VersionMinor,128,16,8,16
   645                        	.member	VersionRelease,144,16,8,16
   646                        	.member	topMemory,160,18,8,32
   647                        	.member	bottomMemory,192,18,8,32
   648                        	.member	availableMemory,224,18,8,32
   649                        	.member	availableMemoryK,256,18,8,32
   650                        	.member	availableHeapMemory,288,18,8,32
   651                        	.member	availableHeapMemoryK,320,18,8,32
   652                        	.member	kernelFunctionCallId,352,16,8,16
   653                        	.member	kernelFunctionCallBank,368,14,8,8
   654                        	.member	kernelFunctionCallReserved,376,14,8,8
  Thu Dec  3 2020 22:25                                                Page 14


   655                        	.member	kernelFunctionCallParameter,384,129,8,32
   656                        	.member	kernelFunctionCallReturn,416,129,8,32
   657                        	.eos
   658                        	.stag	_fx_environment,96,60
   659                        	.member	variables,0,142,8,32
   660                        	.member	reserved1,32,5,8,16
   661                        	.member	reserved2,48,5,8,16
   662                        	.member	reserved3,64,5,8,16
   663                        	.member	reserved4,80,5,8,16
   664                        	.eos
   665                        	.stag	_debug_byte_bits,8,61
   666                        	.member	bit7,0,14,17,1
   667                        	.member	bit6,1,14,17,1
   668                        	.member	bit5,2,14,17,1
   669                        	.member	bit4,3,14,17,1
   670                        	.member	bit3,4,14,17,1
   671                        	.member	bit2,5,14,17,1
   672                        	.member	bit1,6,14,17,1
   673                        	.member	bit0,7,14,17,1
   674                        	.eos
   675                        	.stag	_fx_device_driver,1416,62
   676                        	.member	name,0,110,8,0,64
   677                        	.member	version,512,110,8,0,64
   678                        	.member	hmajor,1024,110,8,0,16
   679                        	.member	hminor,1152,110,8,0,16
   680                        	.member	type,1280,14,8,8
   681                        	.member	f_driver_load,1288,129,8,32
   682                        	.member	f_driver_read,1320,129,8,32
   683                        	.member	f_driver_write,1352,129,8,32
   684                        	.member	f_driver_unload,1384,129,8,32
   685                        	.eos
   686                        	.stag	_fx_block_device_driver,1448,63
   687                        	.member	name,0,110,8,0,64
   688                        	.member	version,512,110,8,0,64
   689                        	.member	hmajor,1024,110,8,0,16
   690                        	.member	hminor,1152,110,8,0,16
   691                        	.member	type,1280,14,8,8
   692                        	.member	f_driver_load,1288,129,8,32
   693                        	.member	f_driver_read,1320,129,8,32
   694                        	.member	f_driver_write,1352,129,8,32
   695                        	.member	f_driver_unload,1384,129,8,32
   696                        	.member	f_driver_command,1416,129,8,32
   697                        	.eos
   698                        	.line	270
   699                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxirq.c",13
   700                        ;#include "fxfloppy.h"
   701                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxfloppy.h",0
   702                        	.line	70
   703                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxirq.c",14
   704                        ;#include "flpydsk.h"
   705                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\flpydsk.h",0
   706                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   707                        	.line	708
  Thu Dec  3 2020 22:25                                                Page 15


   708                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\flpydsk.h",14
   709                        	.line	68
   710                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxirq.c",15
   711                        ;
   712                        ;static int  		 _irq_keyboardBuffer[21]
                     = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
   713                        	data
   714                        ~~_irq_keyboardBuffer:
   715 00:0000: 00 00 00 00  	dw	$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
       00:0004: 00 00 00 00 
       00:0008: 00 00 00 00 
       00:000C: 00 00 00 00 
       00:0010: 00 00 00 00 
   716 00:0014: 00 00 00 00  	dw	$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
       00:0018: 00 00 00 00 
       00:001C: 00 00 00 00 
       00:0020: 00 00 00 00 
       00:0024: 00 00 00 00 
   717 00:0028: 00 00        	dw	$0
   718 00:002A:              	ends
   719                        ;static char 		 _irq_keyboardBufferInde
                    x = 0;
   720                        	data
   721                        ~~_irq_keyboardBufferIndex:
   722 00:002A: 00           	db	$0
   723 00:002B:              	ends
   724                        ;static unsigned char _irq_currentKeyPress = 0;
   725                        	data
   726                        ~~_irq_currentKeyPress:
   727 00:002B: 00           	db	$0
   728 00:002C:              	ends
   729                        ;static int			 _irq_keyboardTi
                    meout = 0;
   730                        	data
   731                        ~~_irq_keyboardTimeout:
   732 00:002C: 00 00        	dw	$0
   733 00:002E:              	ends
   734                        ;static unsigned char _irq_statusReg 	  = 0x00
                    ;
   735                        	data
   736                        ~~_irq_statusReg:
   737 00:002E: 00           	db	$0
   738 00:002F:              	ends
   739                        ;
   740                        ;//static unsigned char  floppyBuffer[512];
   741                        ;extern UINT  floppybufferIndex;
   742                        ;extern UCHAR floppybuffer[512];
   743                        ;
   744                        ;
   745                        ;static LONG 		 _irq_ktick = 0;
   746                        	data
   747                        ~~_irq_ktick:
   748 00:002F: 00 00 00 00  	dl	$0
   749 00:0033:              	ends
   750                        ;static UCHAR		 _k_last_scancode = 0;
   751                        	data
  Thu Dec  3 2020 22:25                                                Page 16


   752                        ~~_k_last_scancode:
   753 00:0033: 00           	db	$0
   754 00:0034:              	ends
   755                        ;
   756                        ;//static int  scirq0 = 0;
   757                        ;//static char irqspinner[] = {'|','/','-','\\'};
   758                        ;
   759                        ;char boxtop[]    = {0xD6, 0xC4, 0xC4, 0xC4, 0xC4,
                     0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4,
                     0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4,
                     0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4,
                    0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 
                    0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 
                    0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 
                    0xC4, 0xC4, 0xC4, 0xC4, 0xB7, 0x00};
   760                        	data
   761                        	xdef	~~boxtop
   762                        ~~boxtop:
   763 00:0034: D6 C4 C4 C4  	db	$D6,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4
       00:0038: C4 C4 C4 C4 
       00:003C: C4 C4 
   764 00:003E: C4 C4 C4 C4  	db	$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4
       00:0042: C4 C4 C4 C4 
       00:0046: C4 C4 
   765 00:0048: C4 C4 C4 C4  	db	$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4
       00:004C: C4 C4 C4 C4 
       00:0050: C4 C4 
   766 00:0052: C4 C4 C4 C4  	db	$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4
       00:0056: C4 C4 C4 C4 
       00:005A: C4 C4 
   767 00:005C: C4 C4 C4 C4  	db	$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4
       00:0060: C4 C4 C4 C4 
       00:0064: C4 C4 
   768 00:0066: C4 C4 C4 C4  	db	$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4
       00:006A: C4 C4 C4 C4 
       00:006E: C4 C4 
   769 00:0070: C4 C4 C4 C4  	db	$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$B7
       00:0074: C4 C4 C4 C4 
       00:0078: C4 B7 
   770 00:007A: 00           	db	$0
   771 00:007B:              	ends
   772                        ;char boxbottom[] = {0xD3, 0xC4, 0xC4, 0xC4, 0xC4,
                     0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4,
                     0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4,
                     0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4,
                    0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 
                    0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 
                    0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 0xC4, 
                    0xC4, 0xC4, 0xC4, 0xC4, 0xBD, 0x00};
   773                        	data
   774                        	xdef	~~boxbottom
   775                        ~~boxbottom:
   776 00:007B: D3 C4 C4 C4  	db	$D3,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4
       00:007F: C4 C4 C4 C4 
       00:0083: C4 C4 
   777 00:0085: C4 C4 C4 C4  	db	$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4
       00:0089: C4 C4 C4 C4 
       00:008D: C4 C4 
  Thu Dec  3 2020 22:25                                                Page 17


   778 00:008F: C4 C4 C4 C4  	db	$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4
       00:0093: C4 C4 C4 C4 
       00:0097: C4 C4 
   779 00:0099: C4 C4 C4 C4  	db	$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4
       00:009D: C4 C4 C4 C4 
       00:00A1: C4 C4 
   780 00:00A3: C4 C4 C4 C4  	db	$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4
       00:00A7: C4 C4 C4 C4 
       00:00AB: C4 C4 
   781 00:00AD: C4 C4 C4 C4  	db	$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4
       00:00B1: C4 C4 C4 C4 
       00:00B5: C4 C4 
   782 00:00B7: C4 C4 C4 C4  	db	$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$C4,$BD
       00:00BB: C4 C4 C4 C4 
       00:00BF: C4 BD 
   783 00:00C1: 00           	db	$0
   784 00:00C2:              	ends
   785                        ;char boxside[]    = {0xBA, 0x00};
   786                        	data
   787                        	xdef	~~boxside
   788                        ~~boxside:
   789 00:00C2: BA 00        	db	$BA,$0
   790 00:00C4:              	ends
   791                        ;
   792                        ;//#define KEYBOARD_TIMEOUT (5)
   793                        ;#define KEYBOARD_TIMEOUT (50)
   794                        ;
   795                        ;#define KTICK_MAX		 (1)
   796                        ;
   797                        ;static BOOL _k_extendedKeyMode 	= FALSE;
   798                        	data
   799                        ~~_k_extendedKeyMode:
   800 00:00C4: 00           	db	$0
   801 00:00C5:              	ends
   802                        ;static BOOL _k_shiftKeyMode 	= FALSE;
   803                        	data
   804                        ~~_k_shiftKeyMode:
   805 00:00C5: 00           	db	$0
   806 00:00C6:              	ends
   807                        ;
   808                        ;extern BOOL irq_signaled;
   809                        ;
   810                        ;extern ULONG _k_exec_context;
   811                        ;extern ULONG _k_exec_error;
   812                        ;extern UCHAR _k_exec_message[64];
   813                        ;
   814                        ;//static ULONG _pseudo_timer = -1;
   815                        ;ULONG _pseudo_timer = -1;
   816                        	data
   817                        	xdef	~~_pseudo_timer
   818                        ~~_pseudo_timer:
   819 00:00C6: FF FF FF FF  	dl	$FFFFFFFF
   820 00:00CA:              	ends
   821                        ;ULONG _system_timer = 0;
   822                        	data
   823                        	xdef	~~_system_timer
   824                        ~~_system_timer:
   825 00:00CA: 00 00 00 00  	dl	$0
  Thu Dec  3 2020 22:25                                                Page 18


   826 00:00CE:              	ends
   827                        ;
   828                        ;void k_dispatch_reg0(PIRQDATA pIRQ);
   829                        ;void k_dispatch_reg1(PIRQDATA pIRQ);
   830                        ;void k_dispatch_reg2(PIRQDATA pIRQ);
   831                        ;
   832                        ;void BRKHandler(void)
   833                        ;{
   834                        	.line	60
   835                        	.line	61
   836                        	code
   837                        	xdef	~~BRKHandler
   838                        	func
   839                        	.function	61
   840                        ~~BRKHandler:
   841                        	longa	on
   842                        	longi	on
   843 00:0000: 3B           	tsc
   844 00:0001: 38           	sec
   845 00:0002: E9 49 00     	sbc	#L2
   846 00:0005: 1B           	tcs
   847 00:0006: 0B           	phd
   848 00:0007: 5B           	tcd
   849                        	.block	61
   850                        ;	CHAR _brk_Buffer[64];
   851                        ;	UCHAR flames = 0;
   852                        ;	int pos  = 1;
   853                        ;	int line = 20;
   854                        ;
   855                        ;	k_debug_string("BRK Exception...\r\n");
   856             00000000   _brk_Buffer_1	set	0
   857             00000040   flames_1	set	64
   858             00000041   pos_1	set	65
   859             00000043   line_1	set	67
   860                        	.sym	_brk_Buffer,0,110,1,0,64
   861                        	.sym	flames,64,14,1,8
   862                        	.sym	pos,65,5,1,16
   863                        	.sym	line,67,5,1,16
   864 00:0008: E2 20        	sep	#$20
   865                        	longa	off
   866 00:000A: 64 45        	stz	<L3+flames_1
   867 00:000C: C2 20        	rep	#$20
   868                        	longa	on
   869 00:000E: A9 01 00     	lda	#$1
   870 00:0011: 85 46        	sta	<L3+pos_1
   871 00:0013: A9 14 00     	lda	#$14
   872 00:0016: 85 48        	sta	<L3+line_1
   873                        	.line	67
   874 00:0018: F4 xx xx     	pea	#^L1
   875 00:001B: F4 xx xx     	pea	#<L1
   876 00:001E: 22 xx xx xx  	jsl	~~k_debug_string
   877                        ;
   878                        ;
   879                        ;
   880                        ;
   881                        ;	asm SEI;
   882                        	.line	72
   883                        	asmstart
  Thu Dec  3 2020 22:25                                                Page 19


   884 00:0022: 78           	SEI
   885                        	asmend
   886                        ;	//k_put_char(9,irqCOPPos - 1,irqspinner[scbrk++]
                    ,15,0);
   887                        ;	//if(scbrk>3) scbrk = 0;
   888                        ;	////asm sei;
   889                        ;	k_enable_text_mode();
   890                        	.line	76
   891 00:0023: 22 xx xx xx  	jsl	~~k_enable_text_mode
   892                        ;	k_enable_text_cursor(1);
   893                        	.line	77
   894 00:0027: F4 01 00     	pea	#<$1
   895 00:002A: 22 xx xx xx  	jsl	~~k_enable_text_cursor
   896                        ;	//k_disable_text_cursor();
   897                        ;	k_enable_border();
   898                        	.line	79
   899 00:002E: 22 xx xx xx  	jsl	~~k_enable_border
   900                        ;	k_clear_screen(0);
   901                        	.line	80
   902 00:0032: F4 00 00     	pea	#<$0
   903 00:0035: 22 xx xx xx  	jsl	~~k_clear_screen
   904                        ;	k_set_border_color(255,0,0);
   905                        	.line	81
   906 00:0039: F4 00 00     	pea	#<$0
   907 00:003C: F4 00 00     	pea	#<$0
   908 00:003F: F4 FF 00     	pea	#<$ff
   909 00:0042: 22 xx xx xx  	jsl	~~k_set_border_color
   910                        ;	pos = 1;
   911                        	.line	82
   912 00:0046: A9 01 00     	lda	#$1
   913 00:0049: 85 46        	sta	<L3+pos_1
   914                        ;	pos = k_put_string(pos,line,boxtop,15,0);
   915                        	.line	83
   916 00:004B: F4 00 00     	pea	#<$0
   917 00:004E: F4 0F 00     	pea	#<$f
   918 00:0051: A9 xx xx     	lda	#<~~boxtop
   919 00:0054: 85 01        	sta	<R0
   920                        	xref	_BEG_DATA
   921 00:0056: A9 xx xx     	lda	#_BEG_DATA>>16
   922 00:0059: 85 03        	sta	<R0+2
   923 00:005B: D4 03        	pei	<R0+2
   924 00:005D: D4 01        	pei	<R0
   925 00:005F: D4 48        	pei	<L3+line_1
   926 00:0061: D4 46        	pei	<L3+pos_1
   927 00:0063: 22 xx xx xx  	jsl	~~k_put_string
   928 00:0067: 85 46        	sta	<L3+pos_1
   929                        ;	line++;
   930                        	.line	84
   931 00:0069: E6 48        	inc	<L3+line_1
   932                        ;	pos = 1;
   933                        	.line	85
   934 00:006B: A9 01 00     	lda	#$1
   935 00:006E: 85 46        	sta	<L3+pos_1
   936                        ;	pos = k_put_string(pos,line,boxside,15,0);
   937                        	.line	86
   938 00:0070: F4 00 00     	pea	#<$0
   939 00:0073: F4 0F 00     	pea	#<$f
   940 00:0076: A9 xx xx     	lda	#<~~boxside
  Thu Dec  3 2020 22:25                                                Page 20


   941 00:0079: 85 01        	sta	<R0
   942                        	xref	_BEG_DATA
   943 00:007B: A9 xx xx     	lda	#_BEG_DATA>>16
   944 00:007E: 85 03        	sta	<R0+2
   945 00:0080: D4 03        	pei	<R0+2
   946 00:0082: D4 01        	pei	<R0
   947 00:0084: D4 48        	pei	<L3+line_1
   948 00:0086: D4 46        	pei	<L3+pos_1
   949 00:0088: 22 xx xx xx  	jsl	~~k_put_string
   950 00:008C: 85 46        	sta	<L3+pos_1
   951                        ;	pos = 70;
   952                        	.line	87
   953 00:008E: A9 46 00     	lda	#$46
   954 00:0091: 85 46        	sta	<L3+pos_1
   955                        ;	pos = k_put_string(pos,line,boxside,15,0);
   956                        	.line	88
   957 00:0093: F4 00 00     	pea	#<$0
   958 00:0096: F4 0F 00     	pea	#<$f
   959 00:0099: A9 xx xx     	lda	#<~~boxside
   960 00:009C: 85 01        	sta	<R0
   961                        	xref	_BEG_DATA
   962 00:009E: A9 xx xx     	lda	#_BEG_DATA>>16
   963 00:00A1: 85 03        	sta	<R0+2
   964 00:00A3: D4 03        	pei	<R0+2
   965 00:00A5: D4 01        	pei	<R0
   966 00:00A7: D4 48        	pei	<L3+line_1
   967 00:00A9: D4 46        	pei	<L3+pos_1
   968 00:00AB: 22 xx xx xx  	jsl	~~k_put_string
   969 00:00AF: 85 46        	sta	<L3+pos_1
   970                        ;	line++;
   971                        	.line	89
   972 00:00B1: E6 48        	inc	<L3+line_1
   973                        ;	pos = 1;
   974                        	.line	90
   975 00:00B3: A9 01 00     	lda	#$1
   976 00:00B6: 85 46        	sta	<L3+pos_1
   977                        ;	pos = k_put_string(pos,line,boxside,15,0);
   978                        	.line	91
   979 00:00B8: F4 00 00     	pea	#<$0
   980 00:00BB: F4 0F 00     	pea	#<$f
   981 00:00BE: A9 xx xx     	lda	#<~~boxside
   982 00:00C1: 85 01        	sta	<R0
   983                        	xref	_BEG_DATA
   984 00:00C3: A9 xx xx     	lda	#_BEG_DATA>>16
   985 00:00C6: 85 03        	sta	<R0+2
   986 00:00C8: D4 03        	pei	<R0+2
   987 00:00CA: D4 01        	pei	<R0
   988 00:00CC: D4 48        	pei	<L3+line_1
   989 00:00CE: D4 46        	pei	<L3+pos_1
   990 00:00D0: 22 xx xx xx  	jsl	~~k_put_string
   991 00:00D4: 85 46        	sta	<L3+pos_1
   992                        ;	pos = k_put_string(pos,line,CONST_EXCEPTION_TITL
                    E,15,0);
   993                        	.line	92
   994 00:00D6: F4 00 00     	pea	#<$0
   995 00:00D9: F4 0F 00     	pea	#<$f
   996 00:00DC: F4 xx xx     	pea	#^L1+19
   997 00:00DF: F4 xx xx     	pea	#<L1+19
  Thu Dec  3 2020 22:25                                                Page 21


   998 00:00E2: D4 48        	pei	<L3+line_1
   999 00:00E4: D4 46        	pei	<L3+pos_1
  1000 00:00E6: 22 xx xx xx  	jsl	~~k_put_string
  1001 00:00EA: 85 46        	sta	<L3+pos_1
  1002                        ;	//pos = k_put_string(pos,line,k_longtodec(_k_exe
                    c_context,_brk_Buffer),15,0);
  1003                        ;	pos = k_put_string(pos,line,k_longtodec(_k_exec_
                    context,_brk_Buffer),15,0);
  1004                        	.line	94
  1005 00:00EC: F4 00 00     	pea	#<$0
  1006 00:00EF: F4 0F 00     	pea	#<$f
  1007 00:00F2: F4 00 00     	pea	#0
  1008 00:00F5: 18           	clc
  1009 00:00F6: 7B           	tdc
  1010 00:00F7: 69 05 00     	adc	#<L3+_brk_Buffer_1
  1011 00:00FA: 48           	pha
  1012 00:00FB: AD xx xx     	lda	|~~_k_exec_context+2
  1013 00:00FE: 48           	pha
  1014 00:00FF: AD xx xx     	lda	|~~_k_exec_context
  1015 00:0102: 48           	pha
  1016 00:0103: 22 xx xx xx  	jsl	~~k_longtodec
  1017 00:0107: 85 01        	sta	<R0
  1018 00:0109: 86 03        	stx	<R0+2
  1019 00:010B: DA           	phx
  1020 00:010C: 48           	pha
  1021 00:010D: D4 48        	pei	<L3+line_1
  1022 00:010F: D4 46        	pei	<L3+pos_1
  1023 00:0111: 22 xx xx xx  	jsl	~~k_put_string
  1024 00:0115: 85 46        	sta	<L3+pos_1
  1025                        ;	//pos = k_put_string(pos,line,k_longtodec(_k_exe
                    c_context,_brk_Buffer),15,0);
  1026                        ;	//pos++;
  1027                        ;	//pos = k_put_string(pos,line,k_longtodec(   ,_b
                    rk_Buffer),15,0);
  1028                        ;
  1029                        ;	pos = k_put_string(pos,line,":",15,0);
  1030                        	.line	99
  1031 00:0117: F4 00 00     	pea	#<$0
  1032 00:011A: F4 0F 00     	pea	#<$f
  1033 00:011D: F4 xx xx     	pea	#^L1+34
  1034 00:0120: F4 xx xx     	pea	#<L1+34
  1035 00:0123: D4 48        	pei	<L3+line_1
  1036 00:0125: D4 46        	pei	<L3+pos_1
  1037 00:0127: 22 xx xx xx  	jsl	~~k_put_string
  1038 00:012B: 85 46        	sta	<L3+pos_1
  1039                        ;	pos = k_put_string(pos,line,k_longtodec(_k_exec_
                    error,_brk_Buffer),15,0);
  1040                        	.line	100
  1041 00:012D: F4 00 00     	pea	#<$0
  1042 00:0130: F4 0F 00     	pea	#<$f
  1043 00:0133: F4 00 00     	pea	#0
  1044 00:0136: 18           	clc
  1045 00:0137: 7B           	tdc
  1046 00:0138: 69 05 00     	adc	#<L3+_brk_Buffer_1
  1047 00:013B: 48           	pha
  1048 00:013C: AD xx xx     	lda	|~~_k_exec_error+2
  1049 00:013F: 48           	pha
  1050 00:0140: AD xx xx     	lda	|~~_k_exec_error
  Thu Dec  3 2020 22:25                                                Page 22


  1051 00:0143: 48           	pha
  1052 00:0144: 22 xx xx xx  	jsl	~~k_longtodec
  1053 00:0148: 85 01        	sta	<R0
  1054 00:014A: 86 03        	stx	<R0+2
  1055 00:014C: DA           	phx
  1056 00:014D: 48           	pha
  1057 00:014E: D4 48        	pei	<L3+line_1
  1058 00:0150: D4 46        	pei	<L3+pos_1
  1059 00:0152: 22 xx xx xx  	jsl	~~k_put_string
  1060 00:0156: 85 46        	sta	<L3+pos_1
  1061                        ;	pos = 70;
  1062                        	.line	101
  1063 00:0158: A9 46 00     	lda	#$46
  1064 00:015B: 85 46        	sta	<L3+pos_1
  1065                        ;	pos = k_put_string(pos,line,boxside,15,0);
  1066                        	.line	102
  1067 00:015D: F4 00 00     	pea	#<$0
  1068 00:0160: F4 0F 00     	pea	#<$f
  1069 00:0163: A9 xx xx     	lda	#<~~boxside
  1070 00:0166: 85 01        	sta	<R0
  1071                        	xref	_BEG_DATA
  1072 00:0168: A9 xx xx     	lda	#_BEG_DATA>>16
  1073 00:016B: 85 03        	sta	<R0+2
  1074 00:016D: D4 03        	pei	<R0+2
  1075 00:016F: D4 01        	pei	<R0
  1076 00:0171: D4 48        	pei	<L3+line_1
  1077 00:0173: D4 46        	pei	<L3+pos_1
  1078 00:0175: 22 xx xx xx  	jsl	~~k_put_string
  1079 00:0179: 85 46        	sta	<L3+pos_1
  1080                        ;	line++;
  1081                        	.line	103
  1082 00:017B: E6 48        	inc	<L3+line_1
  1083                        ;	pos = 1;
  1084                        	.line	104
  1085 00:017D: A9 01 00     	lda	#$1
  1086 00:0180: 85 46        	sta	<L3+pos_1
  1087                        ;	pos = k_put_string(pos,line,boxside,15,0);
  1088                        	.line	105
  1089 00:0182: F4 00 00     	pea	#<$0
  1090 00:0185: F4 0F 00     	pea	#<$f
  1091 00:0188: A9 xx xx     	lda	#<~~boxside
  1092 00:018B: 85 01        	sta	<R0
  1093                        	xref	_BEG_DATA
  1094 00:018D: A9 xx xx     	lda	#_BEG_DATA>>16
  1095 00:0190: 85 03        	sta	<R0+2
  1096 00:0192: D4 03        	pei	<R0+2
  1097 00:0194: D4 01        	pei	<R0
  1098 00:0196: D4 48        	pei	<L3+line_1
  1099 00:0198: D4 46        	pei	<L3+pos_1
  1100 00:019A: 22 xx xx xx  	jsl	~~k_put_string
  1101 00:019E: 85 46        	sta	<L3+pos_1
  1102                        ;	pos = k_put_string(pos,line,"",15,0);
  1103                        	.line	106
  1104 00:01A0: F4 00 00     	pea	#<$0
  1105 00:01A3: F4 0F 00     	pea	#<$f
  1106 00:01A6: F4 xx xx     	pea	#^L1+36
  1107 00:01A9: F4 xx xx     	pea	#<L1+36
  1108 00:01AC: D4 48        	pei	<L3+line_1
  Thu Dec  3 2020 22:25                                                Page 23


  1109 00:01AE: D4 46        	pei	<L3+pos_1
  1110 00:01B0: 22 xx xx xx  	jsl	~~k_put_string
  1111 00:01B4: 85 46        	sta	<L3+pos_1
  1112                        ;	pos = 70;
  1113                        	.line	107
  1114 00:01B6: A9 46 00     	lda	#$46
  1115 00:01B9: 85 46        	sta	<L3+pos_1
  1116                        ;	pos = k_put_string(pos,line,boxside,15,0);
  1117                        	.line	108
  1118 00:01BB: F4 00 00     	pea	#<$0
  1119 00:01BE: F4 0F 00     	pea	#<$f
  1120 00:01C1: A9 xx xx     	lda	#<~~boxside
  1121 00:01C4: 85 01        	sta	<R0
  1122                        	xref	_BEG_DATA
  1123 00:01C6: A9 xx xx     	lda	#_BEG_DATA>>16
  1124 00:01C9: 85 03        	sta	<R0+2
  1125 00:01CB: D4 03        	pei	<R0+2
  1126 00:01CD: D4 01        	pei	<R0
  1127 00:01CF: D4 48        	pei	<L3+line_1
  1128 00:01D1: D4 46        	pei	<L3+pos_1
  1129 00:01D3: 22 xx xx xx  	jsl	~~k_put_string
  1130 00:01D7: 85 46        	sta	<L3+pos_1
  1131                        ;	line++;
  1132                        	.line	109
  1133 00:01D9: E6 48        	inc	<L3+line_1
  1134                        ;	pos = 1;
  1135                        	.line	110
  1136 00:01DB: A9 01 00     	lda	#$1
  1137 00:01DE: 85 46        	sta	<L3+pos_1
  1138                        ;	pos = k_put_string(pos,line,boxside,15,0);
  1139                        	.line	111
  1140 00:01E0: F4 00 00     	pea	#<$0
  1141 00:01E3: F4 0F 00     	pea	#<$f
  1142 00:01E6: A9 xx xx     	lda	#<~~boxside
  1143 00:01E9: 85 01        	sta	<R0
  1144                        	xref	_BEG_DATA
  1145 00:01EB: A9 xx xx     	lda	#_BEG_DATA>>16
  1146 00:01EE: 85 03        	sta	<R0+2
  1147 00:01F0: D4 03        	pei	<R0+2
  1148 00:01F2: D4 01        	pei	<R0
  1149 00:01F4: D4 48        	pei	<L3+line_1
  1150 00:01F6: D4 46        	pei	<L3+pos_1
  1151 00:01F8: 22 xx xx xx  	jsl	~~k_put_string
  1152 00:01FC: 85 46        	sta	<L3+pos_1
  1153                        ;	pos = k_put_string(pos,line,_k_exec_message,15,0
                    );
  1154                        	.line	112
  1155 00:01FE: F4 00 00     	pea	#<$0
  1156 00:0201: F4 0F 00     	pea	#<$f
  1157 00:0204: A9 xx xx     	lda	#<~~_k_exec_message
  1158 00:0207: 85 01        	sta	<R0
  1159                        	xref	_BEG_DATA
  1160 00:0209: A9 xx xx     	lda	#_BEG_DATA>>16
  1161 00:020C: 85 03        	sta	<R0+2
  1162 00:020E: D4 03        	pei	<R0+2
  1163 00:0210: D4 01        	pei	<R0
  1164 00:0212: D4 48        	pei	<L3+line_1
  1165 00:0214: D4 46        	pei	<L3+pos_1
  Thu Dec  3 2020 22:25                                                Page 24


  1166 00:0216: 22 xx xx xx  	jsl	~~k_put_string
  1167 00:021A: 85 46        	sta	<L3+pos_1
  1168                        ;	pos = 70;
  1169                        	.line	113
  1170 00:021C: A9 46 00     	lda	#$46
  1171 00:021F: 85 46        	sta	<L3+pos_1
  1172                        ;	pos = k_put_string(pos,line,boxside,15,0);
  1173                        	.line	114
  1174 00:0221: F4 00 00     	pea	#<$0
  1175 00:0224: F4 0F 00     	pea	#<$f
  1176 00:0227: A9 xx xx     	lda	#<~~boxside
  1177 00:022A: 85 01        	sta	<R0
  1178                        	xref	_BEG_DATA
  1179 00:022C: A9 xx xx     	lda	#_BEG_DATA>>16
  1180 00:022F: 85 03        	sta	<R0+2
  1181 00:0231: D4 03        	pei	<R0+2
  1182 00:0233: D4 01        	pei	<R0
  1183 00:0235: D4 48        	pei	<L3+line_1
  1184 00:0237: D4 46        	pei	<L3+pos_1
  1185 00:0239: 22 xx xx xx  	jsl	~~k_put_string
  1186 00:023D: 85 46        	sta	<L3+pos_1
  1187                        ;	line++;
  1188                        	.line	115
  1189 00:023F: E6 48        	inc	<L3+line_1
  1190                        ;	pos = 1;
  1191                        	.line	116
  1192 00:0241: A9 01 00     	lda	#$1
  1193 00:0244: 85 46        	sta	<L3+pos_1
  1194                        ;	pos = k_put_string(pos,line,boxside,15,0);
  1195                        	.line	117
  1196 00:0246: F4 00 00     	pea	#<$0
  1197 00:0249: F4 0F 00     	pea	#<$f
  1198 00:024C: A9 xx xx     	lda	#<~~boxside
  1199 00:024F: 85 01        	sta	<R0
  1200                        	xref	_BEG_DATA
  1201 00:0251: A9 xx xx     	lda	#_BEG_DATA>>16
  1202 00:0254: 85 03        	sta	<R0+2
  1203 00:0256: D4 03        	pei	<R0+2
  1204 00:0258: D4 01        	pei	<R0
  1205 00:025A: D4 48        	pei	<L3+line_1
  1206 00:025C: D4 46        	pei	<L3+pos_1
  1207 00:025E: 22 xx xx xx  	jsl	~~k_put_string
  1208 00:0262: 85 46        	sta	<L3+pos_1
  1209                        ;	pos = 70;
  1210                        	.line	118
  1211 00:0264: A9 46 00     	lda	#$46
  1212 00:0267: 85 46        	sta	<L3+pos_1
  1213                        ;	pos = k_put_string(pos,line,boxside,15,0);
  1214                        	.line	119
  1215 00:0269: F4 00 00     	pea	#<$0
  1216 00:026C: F4 0F 00     	pea	#<$f
  1217 00:026F: A9 xx xx     	lda	#<~~boxside
  1218 00:0272: 85 01        	sta	<R0
  1219                        	xref	_BEG_DATA
  1220 00:0274: A9 xx xx     	lda	#_BEG_DATA>>16
  1221 00:0277: 85 03        	sta	<R0+2
  1222 00:0279: D4 03        	pei	<R0+2
  1223 00:027B: D4 01        	pei	<R0
  Thu Dec  3 2020 22:25                                                Page 25


  1224 00:027D: D4 48        	pei	<L3+line_1
  1225 00:027F: D4 46        	pei	<L3+pos_1
  1226 00:0281: 22 xx xx xx  	jsl	~~k_put_string
  1227 00:0285: 85 46        	sta	<L3+pos_1
  1228                        ;	line++;
  1229                        	.line	120
  1230 00:0287: E6 48        	inc	<L3+line_1
  1231                        ;	pos = 1;
  1232                        	.line	121
  1233 00:0289: A9 01 00     	lda	#$1
  1234 00:028C: 85 46        	sta	<L3+pos_1
  1235                        ;	pos = k_put_string(pos,line,boxbottom,15,0);
  1236                        	.line	122
  1237 00:028E: F4 00 00     	pea	#<$0
  1238 00:0291: F4 0F 00     	pea	#<$f
  1239 00:0294: A9 xx xx     	lda	#<~~boxbottom
  1240 00:0297: 85 01        	sta	<R0
  1241                        	xref	_BEG_DATA
  1242 00:0299: A9 xx xx     	lda	#_BEG_DATA>>16
  1243 00:029C: 85 03        	sta	<R0+2
  1244 00:029E: D4 03        	pei	<R0+2
  1245 00:02A0: D4 01        	pei	<R0
  1246 00:02A2: D4 48        	pei	<L3+line_1
  1247 00:02A4: D4 46        	pei	<L3+pos_1
  1248 00:02A6: 22 xx xx xx  	jsl	~~k_put_string
  1249 00:02AA: 85 46        	sta	<L3+pos_1
  1250                        ;
  1251                        ;
  1252                        ;	while(TRUE)
  1253                        	.line	125
  1254                        L10001:
  1255                        ;	{
  1256                        	.line	126
  1257                        ;		for(flames=255;flames>64;flames--)
  1258                        	.line	127
  1259 00:02AC: E2 20        	sep	#$20
  1260                        	longa	off
  1261 00:02AE: A9 FF        	lda	#$ff
  1262 00:02B0: 85 45        	sta	<L3+flames_1
  1263 00:02B2: C2 20        	rep	#$20
  1264                        	longa	on
  1265 00:02B4: 82 19 00     	brl	L10006
  1266                        L10005:
  1267                        ;		{
  1268                        	.line	128
  1269                        ;			k_set_border_color(flames,0,0);
  1270                        	.line	129
  1271 00:02B7: F4 00 00     	pea	#<$0
  1272 00:02BA: F4 00 00     	pea	#<$0
  1273 00:02BD: D4 45        	pei	<L3+flames_1
  1274 00:02BF: 22 xx xx xx  	jsl	~~k_set_border_color
  1275                        ;			k_delay(25);
  1276                        	.line	130
  1277 00:02C3: F4 19 00     	pea	#<$19
  1278 00:02C6: 22 xx xx xx  	jsl	~~k_delay
  1279                        ;		}
  1280                        	.line	131
  1281                        L10003:
  Thu Dec  3 2020 22:25                                                Page 26


  1282 00:02CA: E2 20        	sep	#$20
  1283                        	longa	off
  1284 00:02CC: C6 45        	dec	<L3+flames_1
  1285 00:02CE: C2 20        	rep	#$20
  1286                        	longa	on
  1287                        L10006:
  1288 00:02D0: E2 20        	sep	#$20
  1289                        	longa	off
  1290 00:02D2: A9 40        	lda	#$40
  1291 00:02D4: C5 45        	cmp	<L3+flames_1
  1292 00:02D6: C2 20        	rep	#$20
  1293                        	longa	on
  1294 00:02D8: B0 03        	bcs	L5
  1295 00:02DA: 82 DA FF     	brl	L10005
  1296                        L5:
  1297                        L10004:
  1298                        ;		for(flames=64;flames<255;flames++)
  1299                        	.line	132
  1300 00:02DD: E2 20        	sep	#$20
  1301                        	longa	off
  1302 00:02DF: A9 40        	lda	#$40
  1303 00:02E1: 85 45        	sta	<L3+flames_1
  1304 00:02E3: C2 20        	rep	#$20
  1305                        	longa	on
  1306 00:02E5: 82 19 00     	brl	L10010
  1307                        L10009:
  1308                        ;		{
  1309                        	.line	133
  1310                        ;			k_set_border_color(flames,0,0);
  1311                        	.line	134
  1312 00:02E8: F4 00 00     	pea	#<$0
  1313 00:02EB: F4 00 00     	pea	#<$0
  1314 00:02EE: D4 45        	pei	<L3+flames_1
  1315 00:02F0: 22 xx xx xx  	jsl	~~k_set_border_color
  1316                        ;			k_delay(25);
  1317                        	.line	135
  1318 00:02F4: F4 19 00     	pea	#<$19
  1319 00:02F7: 22 xx xx xx  	jsl	~~k_delay
  1320                        ;		}
  1321                        	.line	136
  1322                        L10007:
  1323 00:02FB: E2 20        	sep	#$20
  1324                        	longa	off
  1325 00:02FD: E6 45        	inc	<L3+flames_1
  1326 00:02FF: C2 20        	rep	#$20
  1327                        	longa	on
  1328                        L10010:
  1329 00:0301: E2 20        	sep	#$20
  1330                        	longa	off
  1331 00:0303: A5 45        	lda	<L3+flames_1
  1332 00:0305: C9 FF        	cmp	#<$ff
  1333 00:0307: C2 20        	rep	#$20
  1334                        	longa	on
  1335 00:0309: B0 03        	bcs	L6
  1336 00:030B: 82 DA FF     	brl	L10009
  1337                        L6:
  1338                        L10008:
  1339                        ;	}
  Thu Dec  3 2020 22:25                                                Page 27


  1340                        	.line	137
  1341 00:030E: 82 9B FF     	brl	L10001
  1342                        ;
  1343                        ;}
  1344                        	.line	139
  1345                        	.endblock	139
  1346             00000049   L2	equ	73
  1347             00000005   L3	equ	5
  1348                        	ends
  1349                        	efunc
  1350                        	.endfunc	139,5,73
  1351                        	.line	139
  1352                        	data
  1353                        L1:
  1354 00:00CE: 42 52 4B 20  	db	$42,$52,$4B,$20,$45,$78,$63,$65,$70,$74,
                    $69,$6F,$6E,$2E,$2E
       00:00D2: 45 78 63 65 
       00:00D6: 70 74 69 6F 
       00:00DA: 6E 2E 2E 
  1355 00:00DD: 2E 0D 0A 00  	db	$2E,$0D,$0A,$00,$46,$6F,$65,$6E,$69,$78,
                    $20,$41,$73,$68,$65
       00:00E1: 46 6F 65 6E 
       00:00E5: 69 78 20 41 
       00:00E9: 73 68 65 
  1356 00:00EC: 73 3A 20 00  	db	$73,$3A,$20,$00,$3A,$00,$00
       00:00F0: 3A 00 00 
  1357 00:00F3:              	ends
  1358                        ;
  1359                        ;void COPHandler(void)
  1360                        ;{
  1361                        	.line	141
  1362                        	.line	142
  1363                        	code
  1364                        	xdef	~~COPHandler
  1365                        	func
  1366                        	.function	142
  1367                        ~~COPHandler:
  1368                        	longa	on
  1369                        	longi	on
  1370 00:0311: 3B           	tsc
  1371 00:0312: 38           	sec
  1372 00:0313: E9 18 00     	sbc	#L8
  1373 00:0316: 1B           	tcs
  1374 00:0317: 0B           	phd
  1375 00:0318: 5B           	tcd
  1376                        	.block	142
  1377                        ;	KERNELTRAPCALL fktCall = NULL;
  1378                        ;	//k_put_char(9,irqCOPPos,irqspinner[sccop++],15,
                    0);
  1379                        ;	//if(sccop>3) sccop = 0;
  1380                        ;	////asm sei;
  1381                        ;	PFXZERPOPAGE zp = k_getZeroPage();
  1382                        ;
  1383                        ;	k_debug_integer("COPHandler:Id:",zp->kernelFunct
                    ionCallId);
  1384             00000000   fktCall_1	set	0
  1385             00000004   zp_1	set	4
  1386                        	.sym	fktCall,0,641,1,32
  Thu Dec  3 2020 22:25                                                Page 28


  1387                        	.sym	zp,4,138,1,32,59
  1388 00:0319: 64 11        	stz	<L9+fktCall_1
  1389 00:031B: 64 13        	stz	<L9+fktCall_1+2
  1390 00:031D: 22 xx xx xx  	jsl	~~k_getZeroPage
  1391 00:0321: 85 15        	sta	<L9+zp_1
  1392 00:0323: 86 17        	stx	<L9+zp_1+2
  1393                        	.line	149
  1394 00:0325: A0 2C 00     	ldy	#$2c
  1395 00:0328: B7 15        	lda	[<L9+zp_1],Y
  1396 00:032A: 48           	pha
  1397 00:032B: F4 xx xx     	pea	#^L7
  1398 00:032E: F4 xx xx     	pea	#<L7
  1399 00:0331: 22 xx xx xx  	jsl	~~k_debug_integer
  1400                        ;
  1401                        ;	fktCall = k_getKernelTrapTable()[zp->kernelFunct
                    ionCallId];
  1402                        	.line	151
  1403 00:0335: 22 xx xx xx  	jsl	~~k_getKernelTrapTable
  1404 00:0339: 85 01        	sta	<R0
  1405 00:033B: 86 03        	stx	<R0+2
  1406 00:033D: A0 2C 00     	ldy	#$2c
  1407 00:0340: B7 15        	lda	[<L9+zp_1],Y
  1408 00:0342: 85 09        	sta	<R2
  1409 00:0344: 64 0B        	stz	<R2+2
  1410 00:0346: D4 0B        	pei	<R2+2
  1411 00:0348: D4 09        	pei	<R2
  1412 00:034A: A9 02 00     	lda	#$2
  1413                        	xref	~~~lasl
  1414 00:034D: 22 xx xx xx  	jsl	~~~lasl
  1415 00:0351: 85 05        	sta	<R1
  1416 00:0353: 86 07        	stx	<R1+2
  1417 00:0355: 18           	clc
  1418 00:0356: A5 01        	lda	<R0
  1419 00:0358: 65 05        	adc	<R1
  1420 00:035A: 85 0D        	sta	<R3
  1421 00:035C: A5 03        	lda	<R0+2
  1422 00:035E: 65 07        	adc	<R1+2
  1423 00:0360: 85 0F        	sta	<R3+2
  1424 00:0362: A7 0D        	lda	[<R3]
  1425 00:0364: 85 11        	sta	<L9+fktCall_1
  1426 00:0366: A0 02 00     	ldy	#$2
  1427 00:0369: B7 0D        	lda	[<R3],Y
  1428 00:036B: 85 13        	sta	<L9+fktCall_1+2
  1429                        ;	if(fktCall)
  1430                        	.line	152
  1431                        ;	{
  1432 00:036D: A5 11        	lda	<L9+fktCall_1
  1433 00:036F: 05 13        	ora	<L9+fktCall_1+2
  1434 00:0371: D0 03        	bne	L11
  1435 00:0373: 82 27 00     	brl	L10011
  1436                        L11:
  1437                        	.line	153
  1438                        ;		k_debug_pointer("COPHandler:BEFORE fktCa
                    ll:",fktCall);
  1439                        	.line	154
  1440 00:0376: D4 13        	pei	<L9+fktCall_1+2
  1441 00:0378: D4 11        	pei	<L9+fktCall_1
  1442 00:037A: F4 xx xx     	pea	#^L7+15
  Thu Dec  3 2020 22:25                                                Page 29


  1443 00:037D: F4 xx xx     	pea	#<L7+15
  1444 00:0380: 22 xx xx xx  	jsl	~~k_debug_pointer
  1445                        ;
  1446                        ;		fktCall();
  1447                        	.line	156
  1448 00:0384: A6 13        	ldx	<L9+fktCall_1+2
  1449 00:0386: A5 11        	lda	<L9+fktCall_1
  1450                        	xref	~~~lcal
  1451 00:0388: 22 xx xx xx  	jsl	~~~lcal
  1452                        ;
  1453                        ;		k_debug_pointer("COPHandler:AFTER fktCal
                    l:",fktCall);
  1454                        	.line	158
  1455 00:038C: D4 13        	pei	<L9+fktCall_1+2
  1456 00:038E: D4 11        	pei	<L9+fktCall_1
  1457 00:0390: F4 xx xx     	pea	#^L7+42
  1458 00:0393: F4 xx xx     	pea	#<L7+42
  1459 00:0396: 22 xx xx xx  	jsl	~~k_debug_pointer
  1460                        ;	}
  1461                        	.line	159
  1462                        ;	else
  1463 00:039A: 82 02 00     	brl	L10012
  1464                        L10011:
  1465                        ;	{
  1466                        	.line	161
  1467                        ;		asm brk;
  1468                        	.line	162
  1469                        	asmstart
  1470 00:039D: 00 00        	brk
  1471                        	asmend
  1472                        ;	}
  1473                        	.line	163
  1474                        L10012:
  1475                        ;}
  1476                        	.line	164
  1477                        L12:
  1478 00:039F: 2B           	pld
  1479 00:03A0: 3B           	tsc
  1480 00:03A1: 18           	clc
  1481 00:03A2: 69 18 00     	adc	#L8
  1482 00:03A5: 1B           	tcs
  1483 00:03A6: 6B           	rtl
  1484                        	.endblock	164
  1485             00000018   L8	equ	24
  1486             00000011   L9	equ	17
  1487                        	ends
  1488                        	efunc
  1489                        	.endfunc	164,17,24
  1490                        	.line	164
  1491                        	data
  1492                        L7:
  1493 00:00F3: 43 4F 50 48  	db	$43,$4F,$50,$48,$61,$6E,$64,$6C,$65,$72,
                    $3A,$49,$64,$3A,$00
       00:00F7: 61 6E 64 6C 
       00:00FB: 65 72 3A 49 
       00:00FF: 64 3A 00 
  1494 00:0102: 43 4F 50 48  	db	$43,$4F,$50,$48,$61,$6E,$64,$6C,$65,$72,
                    $3A,$42,$45,$46,$4F
  Thu Dec  3 2020 22:25                                                Page 30


       00:0106: 61 6E 64 6C 
       00:010A: 65 72 3A 42 
       00:010E: 45 46 4F 
  1495 00:0111: 52 45 20 66  	db	$52,$45,$20,$66,$6B,$74,$43,$61,$6C,$6C,
                    $3A,$00,$43,$4F,$50
       00:0115: 6B 74 43 61 
       00:0119: 6C 6C 3A 00 
       00:011D: 43 4F 50 
  1496 00:0120: 48 61 6E 64  	db	$48,$61,$6E,$64,$6C,$65,$72,$3A,$41,$46,
                    $54,$45,$52,$20,$66
       00:0124: 6C 65 72 3A 
       00:0128: 41 46 54 45 
       00:012C: 52 20 66 
  1497 00:012F: 6B 74 43 61  	db	$6B,$74,$43,$61,$6C,$6C,$3A,$00
       00:0133: 6C 6C 3A 00 
  1498 00:0137:              	ends
  1499                        ;
  1500                        ;void IRQHandler(void)
  1501                        ;{
  1502                        	.line	166
  1503                        	.line	167
  1504                        	code
  1505                        	xdef	~~IRQHandler
  1506                        	func
  1507                        	.function	167
  1508                        ~~IRQHandler:
  1509                        	longa	on
  1510                        	longi	on
  1511 00:03A7: 3B           	tsc
  1512 00:03A8: 38           	sec
  1513 00:03A9: E9 06 00     	sbc	#L14
  1514 00:03AC: 1B           	tcs
  1515 00:03AD: 0B           	phd
  1516 00:03AE: 5B           	tcd
  1517                        	.block	167
  1518                        ;	//char keyCode[16] = {0,0,0,0,0,0,0,0,
  1519                        ;	//					0,0,0,0,
                    0,0,0,0};
  1520                        ;	IRQDATA data;
  1521                        ;		
  1522                        ;	//data.keycode = keyCode;
  1523                        ;	//data.line    = irqSpinnerPos;
  1524                        ;	
  1525                        ;	if(INT_PENDING_REG0[0]!=0)
  1526             00000000   data_1	set	0
  1527                        	.sym	data,0,10,1,48,9
  1528                        	.line	175
  1529                        ;	{
  1530 00:03AF: AF 40 01 00  	lda	>320
  1531 00:03B3: 29 FF 00     	and	#$ff
  1532 00:03B6: D0 03        	bne	L17
  1533 00:03B8: 82 0D 00     	brl	L10013
  1534                        L17:
  1535                        	.line	176
  1536                        ;		k_dispatch_reg0(&data);
  1537                        	.line	177
  1538 00:03BB: F4 00 00     	pea	#0
  1539 00:03BE: 18           	clc
  Thu Dec  3 2020 22:25                                                Page 31


  1540 00:03BF: 7B           	tdc
  1541 00:03C0: 69 01 00     	adc	#<L15+data_1
  1542 00:03C3: 48           	pha
  1543 00:03C4: 22 xx xx xx  	jsl	~~k_dispatch_reg0
  1544                        ;	}
  1545                        	.line	178
  1546                        ;	
  1547                        ;	if(INT_PENDING_REG1[0]!=0)
  1548                        L10013:
  1549                        	.line	180
  1550                        ;	{
  1551 00:03C8: AF 41 01 00  	lda	>321
  1552 00:03CC: 29 FF 00     	and	#$ff
  1553 00:03CF: D0 03        	bne	L18
  1554 00:03D1: 82 0D 00     	brl	L10014
  1555                        L18:
  1556                        	.line	181
  1557                        ;		k_dispatch_reg1(&data);	
  1558                        	.line	182
  1559 00:03D4: F4 00 00     	pea	#0
  1560 00:03D7: 18           	clc
  1561 00:03D8: 7B           	tdc
  1562 00:03D9: 69 01 00     	adc	#<L15+data_1
  1563 00:03DC: 48           	pha
  1564 00:03DD: 22 xx xx xx  	jsl	~~k_dispatch_reg1
  1565                        ;	}
  1566                        	.line	183
  1567                        ;	
  1568                        ;	if(INT_PENDING_REG2[0]!=0)
  1569                        L10014:
  1570                        	.line	185
  1571                        ;	{
  1572 00:03E1: AF 42 01 00  	lda	>322
  1573 00:03E5: 29 FF 00     	and	#$ff
  1574 00:03E8: D0 03        	bne	L19
  1575 00:03EA: 82 0D 00     	brl	L10015
  1576                        L19:
  1577                        	.line	186
  1578                        ;		k_dispatch_reg2(&data);
  1579                        	.line	187
  1580 00:03ED: F4 00 00     	pea	#0
  1581 00:03F0: 18           	clc
  1582 00:03F1: 7B           	tdc
  1583 00:03F2: 69 01 00     	adc	#<L15+data_1
  1584 00:03F5: 48           	pha
  1585 00:03F6: 22 xx xx xx  	jsl	~~k_dispatch_reg2
  1586                        ;	}
  1587                        	.line	188
  1588                        ;	
  1589                        ;	return;
  1590                        L10015:
  1591                        	.line	190
  1592                        L20:
  1593 00:03FA: 2B           	pld
  1594 00:03FB: 3B           	tsc
  1595 00:03FC: 18           	clc
  1596 00:03FD: 69 06 00     	adc	#L14
  1597 00:0400: 1B           	tcs
  Thu Dec  3 2020 22:25                                                Page 32


  1598 00:0401: 6B           	rtl
  1599                        ;}
  1600                        	.line	191
  1601                        	.endblock	191
  1602             00000006   L14	equ	6
  1603             00000001   L15	equ	1
  1604                        	ends
  1605                        	efunc
  1606                        	.endfunc	191,1,6
  1607                        	.line	191
  1608                        ;
  1609                        ;void k_dispatch_reg0(PIRQDATA pIRQx)
  1610                        ;{
  1611                        	.line	193
  1612                        	.line	194
  1613                        	code
  1614                        	xdef	~~k_dispatch_reg0
  1615                        	func
  1616                        	.function	194
  1617                        ~~k_dispatch_reg0:
  1618                        	longa	on
  1619                        	longi	on
  1620 00:0402: 3B           	tsc
  1621 00:0403: 38           	sec
  1622 00:0404: E9 15 00     	sbc	#L21
  1623 00:0407: 1B           	tcs
  1624 00:0408: 0B           	phd
  1625 00:0409: 5B           	tcd
  1626             00000004   pIRQx_0	set	4
  1627                        	.block	194
  1628                        ;	int i = 0;
  1629                        ;	char spc = 0;
  1630                        ;	unsigned char mptr = 0;
  1631                        ;	unsigned char kbd = 0;
  1632                        ;	char irq0buffer[8];
  1633                        ;	//int line = pIRQ->line;
  1634                        ;	
  1635                        ;	//char FAR *keyCode = pIRQ->keycode;
  1636                        ;
  1637                        ;	//k_put_char(1,40,'A',15,0);
  1638                        ;	
  1639                        ;	//k_put_char(1,1,irqspinner[scirq0++],15,0);
  1640                        ;	//if(scirq0>3)scirq0 = 0;
  1641                        ;	
  1642                        ;	
  1643                        ;	if(INT_PENDING_REG0[0] & FNX0_INT00_SOF)
  1644             00000000   i_1	set	0
  1645             00000002   spc_1	set	2
  1646             00000003   mptr_1	set	3
  1647             00000004   kbd_1	set	4
  1648             00000005   irq0buffer_1	set	5
  1649                        	.sym	i,0,5,1,16
  1650                        	.sym	spc,2,14,1,8
  1651                        	.sym	mptr,3,14,1,8
  1652                        	.sym	kbd,4,14,1,8
  1653                        	.sym	irq0buffer,5,110,1,0,8
  1654                        	.sym	pIRQx,4,138,6,32,9
  1655 00:040A: 64 09        	stz	<L22+i_1
  Thu Dec  3 2020 22:25                                                Page 33


  1656 00:040C: E2 20        	sep	#$20
  1657                        	longa	off
  1658 00:040E: 64 0B        	stz	<L22+spc_1
  1659 00:0410: C2 20        	rep	#$20
  1660                        	longa	on
  1661 00:0412: E2 20        	sep	#$20
  1662                        	longa	off
  1663 00:0414: 64 0C        	stz	<L22+mptr_1
  1664 00:0416: C2 20        	rep	#$20
  1665                        	longa	on
  1666 00:0418: E2 20        	sep	#$20
  1667                        	longa	off
  1668 00:041A: 64 0D        	stz	<L22+kbd_1
  1669 00:041C: C2 20        	rep	#$20
  1670                        	longa	on
  1671                        	.line	210
  1672                        ;	{
  1673 00:041E: E2 20        	sep	#$20
  1674                        	longa	off
  1675 00:0420: AF 40 01 00  	lda	>320
  1676 00:0424: 29 01        	and	#<$1
  1677 00:0426: C2 20        	rep	#$20
  1678                        	longa	on
  1679 00:0428: D0 03        	bne	L24
  1680 00:042A: 82 0E 00     	brl	L10016
  1681                        L24:
  1682                        	.line	211
  1683                        ;		//k_put_char(10,line,irqspinner[scirq00+
                    +],15,0);
  1684                        ;		//if(scirq00>3) scirq00 = 0;
  1685                        ;
  1686                        ;		INT_PENDING_REG0[0] &=  FNX0_INT00_SOF;
  1687                        	.line	215
  1688 00:042D: E2 20        	sep	#$20
  1689                        	longa	off
  1690 00:042F: AF 40 01 00  	lda	>320
  1691 00:0433: 29 01        	and	#<$1
  1692 00:0435: 8F 40 01 00  	sta	>320
  1693 00:0439: C2 20        	rep	#$20
  1694                        	longa	on
  1695                        ;	}
  1696                        	.line	216
  1697                        ;	
  1698                        ;	if(INT_PENDING_REG0[0] & FNX0_INT01_SOL)
  1699                        L10016:
  1700                        	.line	218
  1701                        ;	{
  1702 00:043B: E2 20        	sep	#$20
  1703                        	longa	off
  1704 00:043D: AF 40 01 00  	lda	>320
  1705 00:0441: 29 02        	and	#<$2
  1706 00:0443: C2 20        	rep	#$20
  1707                        	longa	on
  1708 00:0445: D0 03        	bne	L25
  1709 00:0447: 82 42 00     	brl	L10017
  1710                        L25:
  1711                        	.line	219
  1712                        ;		//k_put_char(11,line,irqspinner[scirq01+
  Thu Dec  3 2020 22:25                                                Page 34


                    +],15,0);
  1713                        ;		//if(scirq01>3) scirq01 = 0;
  1714                        ;		//_system_timer++;
  1715                        ;		
  1716                        ;		if(_irq_ktick > 0)
  1717                        	.line	224
  1718                        ;			_irq_ktick--;
  1719 00:044A: 38           	sec
  1720 00:044B: A9 00 00     	lda	#$0
  1721 00:044E: ED xx xx     	sbc	|~~_irq_ktick
  1722 00:0451: A9 00 00     	lda	#$0
  1723 00:0454: ED xx xx     	sbc	|~~_irq_ktick+2
  1724 00:0457: 70 03        	bvs	L26
  1725 00:0459: 49 00 80     	eor	#$8000
  1726                        L26:
  1727 00:045C: 10 03        	bpl	L27
  1728 00:045E: 82 0B 00     	brl	L10018
  1729                        L27:
  1730                        	.line	225
  1731 00:0461: AD xx xx     	lda	|~~_irq_ktick
  1732 00:0464: D0 03        	bne	L28
  1733 00:0466: CE xx xx     	dec	|~~_irq_ktick+2
  1734                        L28:
  1735 00:0469: CE xx xx     	dec	|~~_irq_ktick
  1736                        ;
  1737                        ;		//k_tickManagement(&_irq_ktick);
  1738                        ;		k_signal_sol_event(&_irq_ktick);
  1739                        L10018:
  1740                        	.line	228
  1741 00:046C: A9 xx xx     	lda	#<~~_irq_ktick
  1742 00:046F: 85 01        	sta	<R0
  1743                        	xref	_BEG_DATA
  1744 00:0471: A9 xx xx     	lda	#_BEG_DATA>>16
  1745 00:0474: 85 03        	sta	<R0+2
  1746 00:0476: D4 03        	pei	<R0+2
  1747 00:0478: D4 01        	pei	<R0
  1748 00:047A: 22 xx xx xx  	jsl	~~k_signal_sol_event
  1749                        ;		
  1750                        ;
  1751                        ;		INT_PENDING_REG0[0] &= FNX0_INT01_SOL;
  1752                        	.line	231
  1753 00:047E: E2 20        	sep	#$20
  1754                        	longa	off
  1755 00:0480: AF 40 01 00  	lda	>320
  1756 00:0484: 29 02        	and	#<$2
  1757 00:0486: 8F 40 01 00  	sta	>320
  1758 00:048A: C2 20        	rep	#$20
  1759                        	longa	on
  1760                        ;	}
  1761                        	.line	232
  1762                        ;	if(INT_PENDING_REG0[0] & FNX0_INT02_TMR0)
  1763                        L10017:
  1764                        	.line	233
  1765                        ;	{
  1766 00:048C: E2 20        	sep	#$20
  1767                        	longa	off
  1768 00:048E: AF 40 01 00  	lda	>320
  1769 00:0492: 29 04        	and	#<$4
  Thu Dec  3 2020 22:25                                                Page 35


  1770 00:0494: C2 20        	rep	#$20
  1771                        	longa	on
  1772 00:0496: D0 03        	bne	L29
  1773 00:0498: 82 BF 00     	brl	L10019
  1774                        L29:
  1775                        	.line	234
  1776                        ;		//k_put_char(3,0,'X',15,0);
  1777                        ;		//k_put_char(3,0,'2',15,0);
  1778                        ;
  1779                        ;		//k_put_char(12,line,irqspinner[scirq02+
                    +],15,0);
  1780                        ;		//if(scirq02>3) scirq02 = 0;
  1781                        ;
  1782                        ;		//k_put_string(10,27,k_bytetohex(STATUS_
                    PORT[0],irq0buffer),15,0);
  1783                        ;		_pseudo_timer++;
  1784                        	.line	242
  1785 00:049B: EE xx xx     	inc	|~~_pseudo_timer
  1786 00:049E: D0 03        	bne	L30
  1787 00:04A0: EE xx xx     	inc	|~~_pseudo_timer+2
  1788                        L30:
  1789                        ;
  1790                        ;		_irq_keyboardTimeout++;
  1791                        	.line	244
  1792 00:04A3: EE xx xx     	inc	|~~_irq_keyboardTimeout
  1793                        ;		if((STATUS_PORT[0] & 0x01) && (_irq_keyb
                    oardTimeout > KEYBOARD_TIMEOUT))
  1794                        	.line	245
  1795                        ;		{
  1796 00:04A6: E2 20        	sep	#$20
  1797                        	longa	off
  1798 00:04A8: AF 64 10 AF  	lda	>11472996
  1799 00:04AC: 29 01        	and	#<$1
  1800 00:04AE: C2 20        	rep	#$20
  1801                        	longa	on
  1802 00:04B0: D0 03        	bne	L31
  1803 00:04B2: 82 66 00     	brl	L10020
  1804                        L31:
  1805 00:04B5: 38           	sec
  1806 00:04B6: A9 32 00     	lda	#$32
  1807 00:04B9: ED xx xx     	sbc	|~~_irq_keyboardTimeout
  1808 00:04BC: 70 03        	bvs	L32
  1809 00:04BE: 49 00 80     	eor	#$8000
  1810                        L32:
  1811 00:04C1: 10 03        	bpl	L33
  1812 00:04C3: 82 55 00     	brl	L10020
  1813                        L33:
  1814                        	.line	246
  1815                        ;			
  1816                        ;			//k_debug_hex("FNX0_INT02_TMR0::
                    STATUS_PORT:",STATUS_PORT[0]);
  1817                        ;			//k_debug_hex("FNX0_INT02_TMR0::
                    MOUSE_PTR:",MOUSE_PTR[0]);
  1818                        ;			//k_debug_hex("FNX0_INT02_TMR0::
                    MOUSE_PTR_BYTE0:",MOUSE_PTR_BYTE0[0]);
  1819                        ;			//k_irq_device_event(IRQE_CTLR_R
                    ESET,STATUS_PORT[0],&_irq_ktick);
  1820                        ;			//k_irq_device_event(IRQE_CTLR_R
  Thu Dec  3 2020 22:25                                                Page 36


                    ESET,MOUSE_PTR[0],&_irq_ktick);
  1821                        ;
  1822                        ;			k_irq_device_event(IRQE_CTLR_RES
                    ET,mptr,&_irq_ktick);
  1823                        	.line	254
  1824 00:04C6: A9 xx xx     	lda	#<~~_irq_ktick
  1825 00:04C9: 85 01        	sta	<R0
  1826                        	xref	_BEG_DATA
  1827 00:04CB: A9 xx xx     	lda	#_BEG_DATA>>16
  1828 00:04CE: 85 03        	sta	<R0+2
  1829 00:04D0: D4 03        	pei	<R0+2
  1830 00:04D2: D4 01        	pei	<R0
  1831 00:04D4: A5 0C        	lda	<L22+mptr_1
  1832 00:04D6: 29 FF 00     	and	#$ff
  1833 00:04D9: 85 05        	sta	<R1
  1834 00:04DB: 64 07        	stz	<R1+2
  1835 00:04DD: D4 07        	pei	<R1+2
  1836 00:04DF: D4 05        	pei	<R1
  1837 00:04E1: F4 09 00     	pea	#<$9
  1838 00:04E4: 22 xx xx xx  	jsl	~~k_irq_device_event
  1839                        ;
  1840                        ;			/*
  1841                        ;			_irq_keyboardTimeout = 1000;
  1842                        ;			
  1843                        ;			while(STATUS_PORT[0] & 0x01)
  1844                        ;			{
  1845                        ;				_irq_keyboardTimeout--;
  1846                        ;
  1847                        ;				kbd  = KBD_INPT_BUF[0];
  1848                        ;				//k_irq_device_event(IRQ
                    E_CTLR_RESET,_irq_keyboardTimeout,&_irq_ktick);
  1849                        ;				//k_irq_device_event(IRQ
                    E_CTLR_RESET,STATUS_PORT[0],&_irq_ktick);
  1850                        ;				if(_irq_keyboardTimeout 
                    < 0)
  1851                        ;					break;
  1852                        ;			}
  1853                        ;			*/
  1854                        ;			MOUSE_PTR[0] = 0;
  1855                        	.line	270
  1856 00:04E8: E2 20        	sep	#$20
  1857                        	longa	off
  1858 00:04EA: A9 00        	lda	#$0
  1859 00:04EC: 8F E0 00 00  	sta	>224
  1860 00:04F0: C2 20        	rep	#$20
  1861                        	longa	on
  1862                        ;
  1863                        ;
  1864                        ;
  1865                        ;			/*
  1866                        ;			if(_irq_keyboardTimeout < 0)
  1867                        ;			{
  1868                        ;				k_irq_device_event(IRQE_
                    CTLR_RESET,-1,&_irq_ktick);
  1869                        ;				k_init_keyboard();
  1870                        ;				if(STATUS_PORT[0] & 0x01
                    )
  1871                        ;				{
  Thu Dec  3 2020 22:25                                                Page 37


  1872                        ;					k_init_keyboard(
                    );
  1873                        ;				}
  1874                        ;			}
  1875                        ;			*/
  1876                        ;			k_init_keyboard();
  1877                        	.line	285
  1878 00:04F2: 22 xx xx xx  	jsl	~~k_init_keyboard
  1879                        ;			if(STATUS_PORT[0] & 0x01)
  1880                        	.line	286
  1881                        ;			{
  1882 00:04F6: E2 20        	sep	#$20
  1883                        	longa	off
  1884 00:04F8: AF 64 10 AF  	lda	>11472996
  1885 00:04FC: 29 01        	and	#<$1
  1886 00:04FE: C2 20        	rep	#$20
  1887                        	longa	on
  1888 00:0500: D0 03        	bne	L34
  1889 00:0502: 82 04 00     	brl	L10021
  1890                        L34:
  1891                        	.line	287
  1892                        ;				k_init_keyboard();
  1893                        	.line	288
  1894 00:0505: 22 xx xx xx  	jsl	~~k_init_keyboard
  1895                        ;			}
  1896                        	.line	289
  1897                        ;
  1898                        ;			_irq_keyboardTimeout = 0;
  1899                        L10021:
  1900                        	.line	291
  1901 00:0509: 9C xx xx     	stz	|~~_irq_keyboardTimeout
  1902                        ;
  1903                        ;			spc  = 0;
  1904                        	.line	293
  1905 00:050C: E2 20        	sep	#$20
  1906                        	longa	off
  1907 00:050E: 64 0B        	stz	<L22+spc_1
  1908 00:0510: C2 20        	rep	#$20
  1909                        	longa	on
  1910                        ;			mptr = 0;
  1911                        	.line	294
  1912 00:0512: E2 20        	sep	#$20
  1913                        	longa	off
  1914 00:0514: 64 0C        	stz	<L22+mptr_1
  1915 00:0516: C2 20        	rep	#$20
  1916                        	longa	on
  1917                        ;
  1918                        ;		}
  1919                        	.line	296
  1920                        ;		else if(_irq_keyboardTimeout > KEYBOARD_
                    TIMEOUT)
  1921 00:0518: 82 14 00     	brl	L10022
  1922                        L10020:
  1923                        	.line	297
  1924                        ;		{
  1925 00:051B: 38           	sec
  1926 00:051C: A9 32 00     	lda	#$32
  1927 00:051F: ED xx xx     	sbc	|~~_irq_keyboardTimeout
  Thu Dec  3 2020 22:25                                                Page 38


  1928 00:0522: 70 03        	bvs	L35
  1929 00:0524: 49 00 80     	eor	#$8000
  1930                        L35:
  1931 00:0527: 10 03        	bpl	L36
  1932 00:0529: 82 03 00     	brl	L10023
  1933                        L36:
  1934                        	.line	298
  1935                        ;			_irq_keyboardTimeout = 0;
  1936                        	.line	299
  1937 00:052C: 9C xx xx     	stz	|~~_irq_keyboardTimeout
  1938                        ;		}
  1939                        	.line	300
  1940                        ;
  1941                        ;		k_irq_device_event(IRQE_SOL_TIMER,_pseud
                    o_timer,&_irq_ktick);
  1942                        L10023:
  1943                        L10022:
  1944                        	.line	302
  1945 00:052F: A9 xx xx     	lda	#<~~_irq_ktick
  1946 00:0532: 85 01        	sta	<R0
  1947                        	xref	_BEG_DATA
  1948 00:0534: A9 xx xx     	lda	#_BEG_DATA>>16
  1949 00:0537: 85 03        	sta	<R0+2
  1950 00:0539: D4 03        	pei	<R0+2
  1951 00:053B: D4 01        	pei	<R0
  1952 00:053D: AD xx xx     	lda	|~~_pseudo_timer+2
  1953 00:0540: 48           	pha
  1954 00:0541: AD xx xx     	lda	|~~_pseudo_timer
  1955 00:0544: 48           	pha
  1956 00:0545: F4 05 00     	pea	#<$5
  1957 00:0548: 22 xx xx xx  	jsl	~~k_irq_device_event
  1958                        ;		//k_put_string(0,26,k_inttodec(_irq_keyb
                    oardTimeout,irq0buffer),15,0);
  1959                        ;		
  1960                        ;		//floppy_timer();
  1961                        ;
  1962                        ;		INT_PENDING_REG0[0] &=  FNX0_INT02_TMR0;
  1963                        	.line	307
  1964 00:054C: E2 20        	sep	#$20
  1965                        	longa	off
  1966 00:054E: AF 40 01 00  	lda	>320
  1967 00:0552: 29 04        	and	#<$4
  1968 00:0554: 8F 40 01 00  	sta	>320
  1969 00:0558: C2 20        	rep	#$20
  1970                        	longa	on
  1971                        ;	}
  1972                        	.line	308
  1973                        ;	if(INT_PENDING_REG0[0] & FNX0_INT03_TMR1)
  1974                        L10019:
  1975                        	.line	309
  1976                        ;	{
  1977 00:055A: E2 20        	sep	#$20
  1978                        	longa	off
  1979 00:055C: AF 40 01 00  	lda	>320
  1980 00:0560: 29 08        	and	#<$8
  1981 00:0562: C2 20        	rep	#$20
  1982                        	longa	on
  1983 00:0564: D0 03        	bne	L37
  Thu Dec  3 2020 22:25                                                Page 39


  1984 00:0566: 82 0E 00     	brl	L10024
  1985                        L37:
  1986                        	.line	310
  1987                        ;		//k_put_char(13,line,irqspinner[scirq03+
                    +],15,0);
  1988                        ;		//if(scirq03>3) scirq03 = 0;
  1989                        ;
  1990                        ;		/*
  1991                        ;		_irq_keyboardTimeout++;
  1992                        ;		if(_irq_keyboardTimeout > 120)
  1993                        ;		{
  1994                        ;			_irq_keyboardTimeout = 0;
  1995                        ;			k_init_keyboard();
  1996                        ;		}
  1997                        ;
  1998                        ;		k_put_string(0,26,k_inttodec(_irq_keyboa
                    rdTimeout,irq0buffer),15,0);
  1999                        ;		*/
  2000                        ;		INT_PENDING_REG0[0] &=  FNX0_INT03_TMR1;
  2001                        	.line	324
  2002 00:0569: E2 20        	sep	#$20
  2003                        	longa	off
  2004 00:056B: AF 40 01 00  	lda	>320
  2005 00:056F: 29 08        	and	#<$8
  2006 00:0571: 8F 40 01 00  	sta	>320
  2007 00:0575: C2 20        	rep	#$20
  2008                        	longa	on
  2009                        ;	}
  2010                        	.line	325
  2011                        ;	if(INT_PENDING_REG0[0] & FNX0_INT04_TMR2)
  2012                        L10024:
  2013                        	.line	326
  2014                        ;	{
  2015 00:0577: E2 20        	sep	#$20
  2016                        	longa	off
  2017 00:0579: AF 40 01 00  	lda	>320
  2018 00:057D: 29 10        	and	#<$10
  2019 00:057F: C2 20        	rep	#$20
  2020                        	longa	on
  2021 00:0581: D0 03        	bne	L38
  2022 00:0583: 82 0E 00     	brl	L10025
  2023                        L38:
  2024                        	.line	327
  2025                        ;		//k_put_char(14,line,irqspinner[scirq04+
                    +],15,0);
  2026                        ;		//if(scirq04>3) scirq04 = 0;
  2027                        ;
  2028                        ;
  2029                        ;		//k_put_char(5,0,'X',15,0);
  2030                        ;		//k_put_char(5,0,'4',15,0);
  2031                        ;		INT_PENDING_REG0[0] &=  FNX0_INT04_TMR2;
  2032                        	.line	334
  2033 00:0586: E2 20        	sep	#$20
  2034                        	longa	off
  2035 00:0588: AF 40 01 00  	lda	>320
  2036 00:058C: 29 10        	and	#<$10
  2037 00:058E: 8F 40 01 00  	sta	>320
  2038 00:0592: C2 20        	rep	#$20
  Thu Dec  3 2020 22:25                                                Page 40


  2039                        	longa	on
  2040                        ;	}
  2041                        	.line	335
  2042                        ;	if(INT_PENDING_REG0[0] & FNX0_INT05_RTC)
  2043                        L10025:
  2044                        	.line	336
  2045                        ;	{
  2046 00:0594: E2 20        	sep	#$20
  2047                        	longa	off
  2048 00:0596: AF 40 01 00  	lda	>320
  2049 00:059A: 29 20        	and	#<$20
  2050 00:059C: C2 20        	rep	#$20
  2051                        	longa	on
  2052 00:059E: D0 03        	bne	L39
  2053 00:05A0: 82 0E 00     	brl	L10026
  2054                        L39:
  2055                        	.line	337
  2056                        ;		//k_put_char(15,line,irqspinner[scirq05+
                    +],15,0);
  2057                        ;		//if(scirq05>3) scirq05 = 0;
  2058                        ;
  2059                        ;
  2060                        ;		//k_put_char(6,0,'X',15,0);
  2061                        ;		//k_put_char(6,0,'5',15,0);
  2062                        ;		INT_PENDING_REG0[0]&=FNX0_INT05_RTC;
  2063                        	.line	344
  2064 00:05A3: E2 20        	sep	#$20
  2065                        	longa	off
  2066 00:05A5: AF 40 01 00  	lda	>320
  2067 00:05A9: 29 20        	and	#<$20
  2068 00:05AB: 8F 40 01 00  	sta	>320
  2069 00:05AF: C2 20        	rep	#$20
  2070                        	longa	on
  2071                        ;	}
  2072                        	.line	345
  2073                        ;	if(INT_PENDING_REG0[0] & FNX0_INT06_FDC)
  2074                        L10026:
  2075                        	.line	346
  2076                        ;	{
  2077 00:05B1: E2 20        	sep	#$20
  2078                        	longa	off
  2079 00:05B3: AF 40 01 00  	lda	>320
  2080 00:05B7: 29 40        	and	#<$40
  2081 00:05B9: C2 20        	rep	#$20
  2082                        	longa	on
  2083 00:05BB: D0 03        	bne	L40
  2084 00:05BD: 82 34 00     	brl	L10027
  2085                        L40:
  2086                        	.line	347
  2087                        ;		//k_put_char(16,line,irqspinner[scirq06+
                    +],15,0);
  2088                        ;		//if(scirq06>3) scirq06 = 0;
  2089                        ;
  2090                        ;		/*
  2091                        ;		floppybuffer[floppybufferIndex] = (((LPC
                    HAR)0xaf13f5)[0]);
  2092                        ;		if(floppybufferIndex > 511)
  2093                        ;			floppybufferIndex = 0;
  Thu Dec  3 2020 22:25                                                Page 41


  2094                        ;
  2095                        ;		floppybufferIndex++;
  2096                        ;		*/
  2097                        ;		/*
  2098                        ;		for (i = 0; i < 512; i++)
  2099                        ;		{
  2100                        ;			floppybuffer[i] =  (((LPCHAR)0xA
                    F13f5)[0]);
  2101                        ;		}
  2102                        ;		 */
  2103                        ;
  2104                        ;		k_irq_device_event(IRQE_FLOPPY,_pseudo_t
                    imer,floppybuffer);
  2105                        	.line	365
  2106 00:05C0: A9 xx xx     	lda	#<~~floppybuffer
  2107 00:05C3: 85 01        	sta	<R0
  2108                        	xref	_BEG_DATA
  2109 00:05C5: A9 xx xx     	lda	#_BEG_DATA>>16
  2110 00:05C8: 85 03        	sta	<R0+2
  2111 00:05CA: D4 03        	pei	<R0+2
  2112 00:05CC: D4 01        	pei	<R0
  2113 00:05CE: AD xx xx     	lda	|~~_pseudo_timer+2
  2114 00:05D1: 48           	pha
  2115 00:05D2: AD xx xx     	lda	|~~_pseudo_timer
  2116 00:05D5: 48           	pha
  2117 00:05D6: F4 06 00     	pea	#<$6
  2118 00:05D9: 22 xx xx xx  	jsl	~~k_irq_device_event
  2119                        ;
  2120                        ;
  2121                        ;		//irq_signaled = _FloppyDiskIRQ = TRUE;
  2122                        ;		//floppy_isr();
  2123                        ;
  2124                        ;		// REENABLE FOR FLOPPY
  2125                        ;		irq_signaled =  TRUE;
  2126                        	.line	372
  2127 00:05DD: E2 20        	sep	#$20
  2128                        	longa	off
  2129 00:05DF: A9 01        	lda	#$1
  2130 00:05E1: 8D xx xx     	sta	|~~irq_signaled
  2131 00:05E4: C2 20        	rep	#$20
  2132                        	longa	on
  2133                        ;
  2134                        ;		//k_irq_device_event(IRQE_FLOPPY,_pseudo
                    _timer,floppyBuffer);
  2135                        ;
  2136                        ;		//k_put_char(7,0,'#',15,0);
  2137                        ;		//k_put_char(7,0,'6',15,0);
  2138                        ;		INT_PENDING_REG0[0]&=FNX0_INT06_FDC;
  2139                        	.line	378
  2140 00:05E6: E2 20        	sep	#$20
  2141                        	longa	off
  2142 00:05E8: AF 40 01 00  	lda	>320
  2143 00:05EC: 29 40        	and	#<$40
  2144 00:05EE: 8F 40 01 00  	sta	>320
  2145 00:05F2: C2 20        	rep	#$20
  2146                        	longa	on
  2147                        ;	}
  2148                        	.line	379
  Thu Dec  3 2020 22:25                                                Page 42


  2149                        ;	if(INT_PENDING_REG0[0] & FNX0_INT07_MOUSE)
  2150                        L10027:
  2151                        	.line	380
  2152                        ;	{
  2153 00:05F4: E2 20        	sep	#$20
  2154                        	longa	off
  2155 00:05F6: AF 40 01 00  	lda	>320
  2156 00:05FA: 29 80        	and	#<$80
  2157 00:05FC: C2 20        	rep	#$20
  2158                        	longa	on
  2159 00:05FE: D0 03        	bne	L41
  2160 00:0600: 82 19 01     	brl	L10028
  2161                        L41:
  2162                        	.line	381
  2163                        ;		_irq_keyboardTimeout = 0;
  2164                        	.line	382
  2165 00:0603: 9C xx xx     	stz	|~~_irq_keyboardTimeout
  2166                        ;		
  2167                        ;		//k_put_char(17,line,irqspinner[scirq07+
                    +],15,0);
  2168                        ;		//if(scirq07>3) scirq07 = 0;
  2169                        ;
  2170                        ;		//k_put_char(11,41,KBD_INPT_BUF[0],15,0)
                    ;
  2171                        ;		
  2172                        ;		//k_itoa(KBD_INPT_BUF[0],keyCode,10);
  2173                        ;		
  2174                        ;		//k_put_string(11,irqMousePos,"     ",15
                    ,0);
  2175                        ;		//k_put_string(11,irqMousePos,keyCode,15
                    ,0);
  2176                        ;		
  2177                        ;		//k_put_char(1,40,'B',15,0);
  2178                        ;		while((STATUS_PORT[0] & 0x01) && spc < 4
                    )
  2179                        	.line	395
  2180                        L10029:
  2181 00:0606: E2 20        	sep	#$20
  2182                        	longa	off
  2183 00:0608: AF 64 10 AF  	lda	>11472996
  2184 00:060C: 29 01        	and	#<$1
  2185 00:060E: C2 20        	rep	#$20
  2186                        	longa	on
  2187 00:0610: D0 03        	bne	L42
  2188 00:0612: 82 E7 00     	brl	L10030
  2189                        L42:
  2190 00:0615: E2 20        	sep	#$20
  2191                        	longa	off
  2192 00:0617: A5 0B        	lda	<L22+spc_1
  2193 00:0619: C9 04        	cmp	#<$4
  2194 00:061B: C2 20        	rep	#$20
  2195                        	longa	on
  2196 00:061D: 90 03        	bcc	L43
  2197 00:061F: 82 DA 00     	brl	L10030
  2198                        L43:
  2199                        ;		//while((STATUS_PORT[0] & 0x01))
  2200                        ;		{
  2201                        	.line	397
  Thu Dec  3 2020 22:25                                                Page 43


  2202                        ;			mptr = MOUSE_PTR[0];
  2203                        	.line	398
  2204 00:0622: E2 20        	sep	#$20
  2205                        	longa	off
  2206 00:0624: AF E0 00 00  	lda	>224
  2207 00:0628: 85 0C        	sta	<L22+mptr_1
  2208 00:062A: C2 20        	rep	#$20
  2209                        	longa	on
  2210                        ;			kbd  = KBD_INPT_BUF[0];
  2211                        	.line	399
  2212 00:062C: E2 20        	sep	#$20
  2213                        	longa	off
  2214 00:062E: AF 60 10 AF  	lda	>11472992
  2215 00:0632: 85 0D        	sta	<L22+kbd_1
  2216 00:0634: C2 20        	rep	#$20
  2217                        	longa	on
  2218                        ;
  2219                        ;			MOUSE_PTR_BYTE0[mptr]   = kbd;	
                    		
  2220                        	.line	401
  2221 00:0636: A5 0C        	lda	<L22+mptr_1
  2222 00:0638: 29 FF 00     	and	#$ff
  2223 00:063B: 85 01        	sta	<R0
  2224 00:063D: A9 06 07     	lda	#$706
  2225 00:0640: 85 05        	sta	<R1
  2226 00:0642: A9 AF 00     	lda	#$af
  2227 00:0645: 85 07        	sta	<R1+2
  2228 00:0647: E2 20        	sep	#$20
  2229                        	longa	off
  2230 00:0649: A5 0D        	lda	<L22+kbd_1
  2231 00:064B: A4 01        	ldy	<R0
  2232 00:064D: 97 05        	sta	[<R1],Y
  2233 00:064F: C2 20        	rep	#$20
  2234                        	longa	on
  2235                        ;			FXOS_MOUSE_BYTE[mptr]   = kbd;
  2236                        	.line	402
  2237 00:0651: A5 0C        	lda	<L22+mptr_1
  2238 00:0653: 29 FF 00     	and	#$ff
  2239 00:0656: 85 01        	sta	<R0
  2240 00:0658: A9 00 15     	lda	#$1500
  2241 00:065B: 85 05        	sta	<R1
  2242 00:065D: A9 00 00     	lda	#$0
  2243 00:0660: 85 07        	sta	<R1+2
  2244 00:0662: E2 20        	sep	#$20
  2245                        	longa	off
  2246 00:0664: A5 0D        	lda	<L22+kbd_1
  2247 00:0666: A4 01        	ldy	<R0
  2248 00:0668: 97 05        	sta	[<R1],Y
  2249 00:066A: C2 20        	rep	#$20
  2250                        	longa	on
  2251                        ;				
  2252                        ;			mptr++;	
  2253                        	.line	404
  2254 00:066C: E2 20        	sep	#$20
  2255                        	longa	off
  2256 00:066E: E6 0C        	inc	<L22+mptr_1
  2257 00:0670: C2 20        	rep	#$20
  2258                        	longa	on
  Thu Dec  3 2020 22:25                                                Page 44


  2259                        ;				
  2260                        ;			if(mptr >  2)
  2261                        	.line	406
  2262                        ;			{
  2263 00:0672: E2 20        	sep	#$20
  2264                        	longa	off
  2265 00:0674: A9 02        	lda	#$2
  2266 00:0676: C5 0C        	cmp	<L22+mptr_1
  2267 00:0678: C2 20        	rep	#$20
  2268                        	longa	on
  2269 00:067A: 90 03        	bcc	L44
  2270 00:067C: 82 6A 00     	brl	L10031
  2271                        L44:
  2272                        	.line	407
  2273                        ;				MOUSE_PTR[0] = 0;
  2274                        	.line	408
  2275 00:067F: E2 20        	sep	#$20
  2276                        	longa	off
  2277 00:0681: A9 00        	lda	#$0
  2278 00:0683: 8F E0 00 00  	sta	>224
  2279 00:0687: C2 20        	rep	#$20
  2280                        	longa	on
  2281                        ;				
  2282                        ;				FXOS_MOUSE_BYTE_T   = MO
                    USE_PTR_BYTE0[0];
  2283                        	.line	410
  2284 00:0689: E2 20        	sep	#$20
  2285                        	longa	off
  2286 00:068B: AF 06 07 AF  	lda	>11470598
  2287 00:068F: 8F 03 15 00  	sta	>5379
  2288 00:0693: C2 20        	rep	#$20
  2289                        	longa	on
  2290                        ;				FXOS_MOUSE_BYTE_X_L = MO
                    USE_PTR_X_POS_L[0];
  2291                        	.line	411
  2292 00:0695: E2 20        	sep	#$20
  2293                        	longa	off
  2294 00:0697: AF 02 07 AF  	lda	>11470594
  2295 00:069B: 8F 04 15 00  	sta	>5380
  2296 00:069F: C2 20        	rep	#$20
  2297                        	longa	on
  2298                        ;				FXOS_MOUSE_BYTE_X_H = MO
                    USE_PTR_X_POS_H[0];
  2299                        	.line	412
  2300 00:06A1: E2 20        	sep	#$20
  2301                        	longa	off
  2302 00:06A3: AF 03 07 AF  	lda	>11470595
  2303 00:06A7: 8F 05 15 00  	sta	>5381
  2304 00:06AB: C2 20        	rep	#$20
  2305                        	longa	on
  2306                        ;				FXOS_MOUSE_BYTE_Y_L = MO
                    USE_PTR_Y_POS_L[0];
  2307                        	.line	413
  2308 00:06AD: E2 20        	sep	#$20
  2309                        	longa	off
  2310 00:06AF: AF 04 07 AF  	lda	>11470596
  2311 00:06B3: 8F 06 15 00  	sta	>5382
  2312 00:06B7: C2 20        	rep	#$20
  Thu Dec  3 2020 22:25                                                Page 45


  2313                        	longa	on
  2314                        ;				FXOS_MOUSE_BYTE_Y_H = MO
                    USE_PTR_Y_POS_H[0];
  2315                        	.line	414
  2316 00:06B9: E2 20        	sep	#$20
  2317                        	longa	off
  2318 00:06BB: AF 05 07 AF  	lda	>11470597
  2319 00:06BF: 8F 07 15 00  	sta	>5383
  2320 00:06C3: C2 20        	rep	#$20
  2321                        	longa	on
  2322                        ;
  2323                        ;				//k_irq_device_event(IRQ
                    E_MOUSE,_pseudo_timer,&FXOS_MOUSE_BYTE_T);
  2324                        ;				k_irq_device_event(IRQE_
                    MOUSE,_pseudo_timer,&FXOS_MOUSE_BYTE_T);
  2325                        	.line	417
  2326 00:06C5: F4 00 00     	pea	#^$1503
  2327 00:06C8: F4 03 15     	pea	#<$1503
  2328 00:06CB: AD xx xx     	lda	|~~_pseudo_timer+2
  2329 00:06CE: 48           	pha
  2330 00:06CF: AD xx xx     	lda	|~~_pseudo_timer
  2331 00:06D2: 48           	pha
  2332 00:06D3: F4 02 00     	pea	#<$2
  2333 00:06D6: 22 xx xx xx  	jsl	~~k_irq_device_event
  2334                        ;
  2335                        ;				spc  = 0;
  2336                        	.line	419
  2337 00:06DA: E2 20        	sep	#$20
  2338                        	longa	off
  2339 00:06DC: 64 0B        	stz	<L22+spc_1
  2340 00:06DE: C2 20        	rep	#$20
  2341                        	longa	on
  2342                        ;				mptr = 0;
  2343                        	.line	420
  2344 00:06E0: E2 20        	sep	#$20
  2345                        	longa	off
  2346 00:06E2: 64 0C        	stz	<L22+mptr_1
  2347 00:06E4: C2 20        	rep	#$20
  2348                        	longa	on
  2349                        ;			}
  2350                        	.line	421
  2351                        ;			else
  2352 00:06E6: 82 0A 00     	brl	L10032
  2353                        L10031:
  2354                        ;			{
  2355                        	.line	423
  2356                        ;				MOUSE_PTR[0] = mptr;
  2357                        	.line	424
  2358 00:06E9: E2 20        	sep	#$20
  2359                        	longa	off
  2360 00:06EB: A5 0C        	lda	<L22+mptr_1
  2361 00:06ED: 8F E0 00 00  	sta	>224
  2362 00:06F1: C2 20        	rep	#$20
  2363                        	longa	on
  2364                        ;			}
  2365                        	.line	425
  2366                        L10032:
  2367                        ;
  Thu Dec  3 2020 22:25                                                Page 46


  2368                        ;			spc++;
  2369                        	.line	427
  2370 00:06F3: E2 20        	sep	#$20
  2371                        	longa	off
  2372 00:06F5: E6 0B        	inc	<L22+spc_1
  2373 00:06F7: C2 20        	rep	#$20
  2374                        	longa	on
  2375                        ;		}
  2376                        	.line	428
  2377 00:06F9: 82 0A FF     	brl	L10029
  2378                        L10030:
  2379                        ;		
  2380                        ;		while(STATUS_PORT[0] & 0x01);
  2381                        	.line	430
  2382                        L10033:
  2383 00:06FC: E2 20        	sep	#$20
  2384                        	longa	off
  2385 00:06FE: AF 64 10 AF  	lda	>11472996
  2386 00:0702: 29 01        	and	#<$1
  2387 00:0704: C2 20        	rep	#$20
  2388                        	longa	on
  2389 00:0706: D0 03        	bne	L45
  2390 00:0708: 82 03 00     	brl	L10034
  2391                        L45:
  2392                        	.line	430
  2393 00:070B: 82 EE FF     	brl	L10033
  2394                        L10034:
  2395                        ;
  2396                        ;		//if(spc > 3)
  2397                        ;		//	k_put_char(1,40,'C',15,0);
  2398                        ;
  2399                        ;		INT_PENDING_REG0[0] &= FNX0_INT07_MOUSE;
  2400                        	.line	435
  2401 00:070E: E2 20        	sep	#$20
  2402                        	longa	off
  2403 00:0710: AF 40 01 00  	lda	>320
  2404 00:0714: 29 80        	and	#<$80
  2405 00:0716: 8F 40 01 00  	sta	>320
  2406 00:071A: C2 20        	rep	#$20
  2407                        	longa	on
  2408                        ;	}
  2409                        	.line	436
  2410                        ;	//*INT_PENDING_REG0 = *INT_PENDING_REG0;
  2411                        ;	INT_PENDING_REG0[0] = 0xFF;
  2412                        L10028:
  2413                        	.line	438
  2414 00:071C: E2 20        	sep	#$20
  2415                        	longa	off
  2416 00:071E: A9 FF        	lda	#$ff
  2417 00:0720: 8F 40 01 00  	sta	>320
  2418 00:0724: C2 20        	rep	#$20
  2419                        	longa	on
  2420                        ;	INT_PENDING_REG0[0] = 0x00;
  2421                        	.line	439
  2422 00:0726: E2 20        	sep	#$20
  2423                        	longa	off
  2424 00:0728: A9 00        	lda	#$0
  2425 00:072A: 8F 40 01 00  	sta	>320
  Thu Dec  3 2020 22:25                                                Page 47


  2426 00:072E: C2 20        	rep	#$20
  2427                        	longa	on
  2428                        ;
  2429                        ;	//k_put_char(1,40,'Z',15,0);
  2430                        ;}
  2431                        	.line	442
  2432                        L46:
  2433 00:0730: A5 17        	lda	<L21+2
  2434 00:0732: 85 1B        	sta	<L21+2+4
  2435 00:0734: A5 16        	lda	<L21+1
  2436 00:0736: 85 1A        	sta	<L21+1+4
  2437 00:0738: 2B           	pld
  2438 00:0739: 3B           	tsc
  2439 00:073A: 18           	clc
  2440 00:073B: 69 19 00     	adc	#L21+4
  2441 00:073E: 1B           	tcs
  2442 00:073F: 6B           	rtl
  2443                        	.endblock	442
  2444             00000015   L21	equ	21
  2445             00000009   L22	equ	9
  2446                        	ends
  2447                        	efunc
  2448                        	.endfunc	442,9,21
  2449                        	.line	442
  2450                        ;
  2451                        ;void k_dispatch_reg1(PIRQDATA pIRQx)
  2452                        ;{
  2453                        	.line	444
  2454                        	.line	445
  2455                        	code
  2456                        	xdef	~~k_dispatch_reg1
  2457                        	func
  2458                        	.function	445
  2459                        ~~k_dispatch_reg1:
  2460                        	longa	on
  2461                        	longi	on
  2462 00:0740: 3B           	tsc
  2463 00:0741: 38           	sec
  2464 00:0742: E9 10 00     	sbc	#L47
  2465 00:0745: 1B           	tcs
  2466 00:0746: 0B           	phd
  2467 00:0747: 5B           	tcd
  2468             00000004   pIRQx_0	set	4
  2469                        	.block	445
  2470                        ;	//int line = pIRQ->line;
  2471                        ;	
  2472                        ;	//char FAR *keyCode = pIRQ->keycode;
  2473                        ;	char none = 0;
  2474                        ;	unsigned char data = 0;
  2475                        ;	//char null = 0;
  2476                        ;	int dp = 20;
  2477                        ;	
  2478                        ;	//line++;
  2479                        ;	
  2480                        ;	//k_put_char(9,line,irqspinner[scirq1++],15,0);
  2481                        ;	//if(scirq1>3)scirq1 = 0;
  2482                        ;	
  2483                        ;	//if(irqKeyPos!=0)
  Thu Dec  3 2020 22:25                                                Page 48


  2484                        ;	//k_put_string(11,irqKeyPos,"    ",15,0);
  2485                        ;	
  2486                        ;	//k_put_char(2,40,'A',15,0);
  2487                        ;
  2488                        ;	//k_put_char(0,1,'1',15,0);
  2489                        ;	if(INT_PENDING_REG1[0] & FNX1_INT00_KBD)
  2490             00000000   none_1	set	0
  2491             00000001   data_1	set	1
  2492             00000002   dp_1	set	2
  2493                        	.sym	none,0,14,1,8
  2494                        	.sym	data,1,14,1,8
  2495                        	.sym	dp,2,5,1,16
  2496                        	.sym	pIRQx,4,138,6,32,9
  2497 00:0748: E2 20        	sep	#$20
  2498                        	longa	off
  2499 00:074A: 64 0D        	stz	<L48+none_1
  2500 00:074C: C2 20        	rep	#$20
  2501                        	longa	on
  2502 00:074E: E2 20        	sep	#$20
  2503                        	longa	off
  2504 00:0750: 64 0E        	stz	<L48+data_1
  2505 00:0752: C2 20        	rep	#$20
  2506                        	longa	on
  2507 00:0754: A9 14 00     	lda	#$14
  2508 00:0757: 85 0F        	sta	<L48+dp_1
  2509                        	.line	465
  2510                        ;	{
  2511 00:0759: E2 20        	sep	#$20
  2512                        	longa	off
  2513 00:075B: AF 41 01 00  	lda	>321
  2514 00:075F: 29 01        	and	#<$1
  2515 00:0761: C2 20        	rep	#$20
  2516                        	longa	on
  2517 00:0763: D0 03        	bne	L50
  2518 00:0765: 82 CC 01     	brl	L10035
  2519                        L50:
  2520                        	.line	466
  2521                        ;		_irq_keyboardTimeout = 0;
  2522                        	.line	467
  2523 00:0768: 9C xx xx     	stz	|~~_irq_keyboardTimeout
  2524                        ;		
  2525                        ;		//k_put_char(2,40,'B',15,0);
  2526                        ;
  2527                        ;		//k_put_char(10,line,irqspinner[scirq10+
                    +],15,0);
  2528                        ;		//if(scirq10>3)scirq10 = 0;
  2529                        ;
  2530                        ;		if(_irq_ktick < 1)
  2531                        	.line	474
  2532                        ;		{
  2533 00:076B: AD xx xx     	lda	|~~_irq_ktick+2
  2534 00:076E: 30 0D        	bmi	L51
  2535 00:0770: D0 08        	bne	L52
  2536 00:0772: AD xx xx     	lda	|~~_irq_ktick
  2537 00:0775: C9 01 00     	cmp	#1
  2538 00:0778: 90 03        	bcc	L51
  2539                        L52:
  2540 00:077A: 82 DA 00     	brl	L10036
  Thu Dec  3 2020 22:25                                                Page 49


  2541                        L51:
  2542                        	.line	475
  2543                        ;			//k_put_char(2,40,'C',15,0);
  2544                        ;
  2545                        ;			_irq_ktick = KTICK_MAX;
  2546                        	.line	478
  2547 00:077D: A9 01 00     	lda	#$1
  2548 00:0780: 8D xx xx     	sta	|~~_irq_ktick
  2549 00:0783: A9 00 00     	lda	#$0
  2550 00:0786: 8D xx xx     	sta	|~~_irq_ktick+2
  2551                        ;
  2552                        ;			//if(KBD_INPT_BUF[0]!=_irq_curre
                    ntKeyPress)
  2553                        ;			//	_irq_currentKeyPress = K
                    BD_INPT_BUF[0];
  2554                        ;			_irq_currentKeyPress = KBD_INPT_
                    BUF[0];
  2555                        	.line	482
  2556 00:0789: E2 20        	sep	#$20
  2557                        	longa	off
  2558 00:078B: AF 60 10 AF  	lda	>11472992
  2559 00:078F: 8D xx xx     	sta	|~~_irq_currentKeyPress
  2560 00:0792: C2 20        	rep	#$20
  2561                        	longa	on
  2562                        ;			_k_last_scancode = _irq_currentK
                    eyPress;
  2563                        	.line	483
  2564 00:0794: E2 20        	sep	#$20
  2565                        	longa	off
  2566 00:0796: AD xx xx     	lda	|~~_irq_currentKeyPress
  2567 00:0799: 8D xx xx     	sta	|~~_k_last_scancode
  2568 00:079C: C2 20        	rep	#$20
  2569                        	longa	on
  2570                        ;
  2571                        ;			FXOS_KEY_BYTE_0 =  0;
  2572                        	.line	485
  2573 00:079E: E2 20        	sep	#$20
  2574                        	longa	off
  2575 00:07A0: A9 00        	lda	#$0
  2576 00:07A2: 8F 08 15 00  	sta	>5384
  2577 00:07A6: C2 20        	rep	#$20
  2578                        	longa	on
  2579                        ;			FXOS_KEY_BYTE_1 =  _irq_keyboard
                    BufferIndex;
  2580                        	.line	486
  2581 00:07A8: E2 20        	sep	#$20
  2582                        	longa	off
  2583 00:07AA: AD xx xx     	lda	|~~_irq_keyboardBufferIndex
  2584 00:07AD: 8F 09 15 00  	sta	>5385
  2585 00:07B1: C2 20        	rep	#$20
  2586                        	longa	on
  2587                        ;			FXOS_KEY_BYTE_2 =  _irq_currentK
                    eyPress;
  2588                        	.line	487
  2589 00:07B3: E2 20        	sep	#$20
  2590                        	longa	off
  2591 00:07B5: AD xx xx     	lda	|~~_irq_currentKeyPress
  2592 00:07B8: 8F 0A 15 00  	sta	>5386
  Thu Dec  3 2020 22:25                                                Page 50


  2593 00:07BC: C2 20        	rep	#$20
  2594                        	longa	on
  2595                        ;
  2596                        ;			//_irq_keyboardBuffer[_irq_keybo
                    ardBufferIndex++] = _irq_currentKeyPress;
  2597                        ;			_irq_keyboardBuffer[_irq_keyboar
                    dBufferIndex] = _irq_currentKeyPress;
  2598                        	.line	490
  2599 00:07BE: AD xx xx     	lda	|~~_irq_keyboardBufferIndex
  2600 00:07C1: 29 FF 00     	and	#$ff
  2601 00:07C4: 85 05        	sta	<R1
  2602 00:07C6: A5 05        	lda	<R1
  2603 00:07C8: 0A           	asl	A
  2604 00:07C9: 85 01        	sta	<R0
  2605 00:07CB: AD xx xx     	lda	|~~_irq_currentKeyPress
  2606 00:07CE: 29 FF 00     	and	#$ff
  2607 00:07D1: A6 01        	ldx	<R0
  2608 00:07D3: 9D xx xx     	sta	|~~_irq_keyboardBuffer,X
  2609                        ;
  2610                        ;			if(_irq_currentKeyPress == 0xE0)
  2611                        	.line	492
  2612                        ;				_k_extendedKeyMode = TRU
                    E;
  2613 00:07D6: E2 20        	sep	#$20
  2614                        	longa	off
  2615 00:07D8: AD xx xx     	lda	|~~_irq_currentKeyPress
  2616 00:07DB: C9 E0        	cmp	#<$e0
  2617 00:07DD: C2 20        	rep	#$20
  2618                        	longa	on
  2619 00:07DF: F0 03        	beq	L53
  2620 00:07E1: 82 0C 00     	brl	L10037
  2621                        L53:
  2622                        	.line	493
  2623 00:07E4: E2 20        	sep	#$20
  2624                        	longa	off
  2625 00:07E6: A9 01        	lda	#$1
  2626 00:07E8: 8D xx xx     	sta	|~~_k_extendedKeyMode
  2627 00:07EB: C2 20        	rep	#$20
  2628                        	longa	on
  2629                        ;			else
  2630 00:07ED: 82 31 00     	brl	L10038
  2631                        L10037:
  2632                        ;				k_irq_device_event(IRQE_
                    KEYBOARD,_pseudo_timer,&_irq_keyboardBuffer[_irq_keyboardBuf
                    ferIndex]);
  2633                        	.line	495
  2634 00:07F0: AD xx xx     	lda	|~~_irq_keyboardBufferIndex
  2635 00:07F3: 29 FF 00     	and	#$ff
  2636 00:07F6: 85 09        	sta	<R2
  2637 00:07F8: A5 09        	lda	<R2
  2638 00:07FA: 0A           	asl	A
  2639 00:07FB: 85 05        	sta	<R1
  2640 00:07FD: 18           	clc
  2641 00:07FE: A9 xx xx     	lda	#<~~_irq_keyboardBuffer
  2642 00:0801: 65 05        	adc	<R1
  2643 00:0803: 85 09        	sta	<R2
  2644 00:0805: A5 09        	lda	<R2
  2645 00:0807: 85 01        	sta	<R0
  Thu Dec  3 2020 22:25                                                Page 51


  2646                        	xref	_BEG_DATA
  2647 00:0809: A9 xx xx     	lda	#_BEG_DATA>>16
  2648 00:080C: 85 03        	sta	<R0+2
  2649 00:080E: D4 03        	pei	<R0+2
  2650 00:0810: D4 01        	pei	<R0
  2651 00:0812: AD xx xx     	lda	|~~_pseudo_timer+2
  2652 00:0815: 48           	pha
  2653 00:0816: AD xx xx     	lda	|~~_pseudo_timer
  2654 00:0819: 48           	pha
  2655 00:081A: F4 01 00     	pea	#<$1
  2656 00:081D: 22 xx xx xx  	jsl	~~k_irq_device_event
  2657                        L10038:
  2658                        ;
  2659                        ;			_irq_keyboardBufferIndex++;
  2660                        	.line	497
  2661 00:0821: E2 20        	sep	#$20
  2662                        	longa	off
  2663 00:0823: EE xx xx     	inc	|~~_irq_keyboardBufferIndex
  2664 00:0826: C2 20        	rep	#$20
  2665                        	longa	on
  2666                        ;			if(_irq_keyboardBufferIndex > 19
                    )
  2667                        	.line	498
  2668                        ;				_irq_keyboardBufferIndex
                     = 0;
  2669 00:0828: E2 20        	sep	#$20
  2670                        	longa	off
  2671 00:082A: A9 13        	lda	#$13
  2672 00:082C: CD xx xx     	cmp	|~~_irq_keyboardBufferIndex
  2673 00:082F: C2 20        	rep	#$20
  2674                        	longa	on
  2675 00:0831: 90 03        	bcc	L54
  2676 00:0833: 82 07 00     	brl	L10039
  2677                        L54:
  2678                        	.line	499
  2679 00:0836: E2 20        	sep	#$20
  2680                        	longa	off
  2681 00:0838: 9C xx xx     	stz	|~~_irq_keyboardBufferIndex
  2682 00:083B: C2 20        	rep	#$20
  2683                        	longa	on
  2684                        ;
  2685                        ;			//k_put_char(11,42,_irq_currentK
                    eyPress,15,0);
  2686                        ;
  2687                        ;			if(_irq_currentKeyPress == 0xE0)
  2688                        L10039:
  2689                        	.line	503
  2690                        ;				_k_extendedKeyMode = TRU
                    E;
  2691 00:083D: E2 20        	sep	#$20
  2692                        	longa	off
  2693 00:083F: AD xx xx     	lda	|~~_irq_currentKeyPress
  2694 00:0842: C9 E0        	cmp	#<$e0
  2695 00:0844: C2 20        	rep	#$20
  2696                        	longa	on
  2697 00:0846: F0 03        	beq	L55
  2698 00:0848: 82 09 00     	brl	L10040
  2699                        L55:
  Thu Dec  3 2020 22:25                                                Page 52


  2700                        	.line	504
  2701 00:084B: E2 20        	sep	#$20
  2702                        	longa	off
  2703 00:084D: A9 01        	lda	#$1
  2704 00:084F: 8D xx xx     	sta	|~~_k_extendedKeyMode
  2705 00:0852: C2 20        	rep	#$20
  2706                        	longa	on
  2707                        ;
  2708                        ;			//k_itoa(KBD_INPT_BUF[0],keyCode
                    ,16);
  2709                        ;			//k_bytetohex(_irq_currentKeyPre
                    ss,keyCode);
  2710                        ;			
  2711                        ;			//k_put_char(11,42,KBD_INPT_BUF[
                    0],15,0);
  2712                        ;			//k_put_string(11,42,"    ",15,0
                    );
  2713                        ;			//k_put_string(16,irqKeyPos,_irq
                    _keyboardBuffer,15,0);
  2714                        ;			//k_put_string(11,irqKeyPos,keyC
                    ode,15,0);
  2715                        ;		}
  2716                        L10040:
  2717                        	.line	513
  2718                        ;		else if(_k_extendedKeyMode == TRUE)
  2719 00:0854: 82 C6 00     	brl	L10041
  2720                        L10036:
  2721                        	.line	514
  2722                        ;		{
  2723 00:0857: E2 20        	sep	#$20
  2724                        	longa	off
  2725 00:0859: AD xx xx     	lda	|~~_k_extendedKeyMode
  2726 00:085C: C9 01        	cmp	#<$1
  2727 00:085E: C2 20        	rep	#$20
  2728                        	longa	on
  2729 00:0860: F0 03        	beq	L56
  2730 00:0862: 82 A7 00     	brl	L10042
  2731                        L56:
  2732                        	.line	515
  2733                        ;			_k_extendedKeyMode = FALSE;
  2734                        	.line	516
  2735 00:0865: E2 20        	sep	#$20
  2736                        	longa	off
  2737 00:0867: 9C xx xx     	stz	|~~_k_extendedKeyMode
  2738 00:086A: C2 20        	rep	#$20
  2739                        	longa	on
  2740                        ;
  2741                        ;			_irq_currentKeyPress = KBD_INPT_
                    BUF[0];
  2742                        	.line	518
  2743 00:086C: E2 20        	sep	#$20
  2744                        	longa	off
  2745 00:086E: AF 60 10 AF  	lda	>11472992
  2746 00:0872: 8D xx xx     	sta	|~~_irq_currentKeyPress
  2747 00:0875: C2 20        	rep	#$20
  2748                        	longa	on
  2749                        ;			_k_last_scancode = _irq_currentK
                    eyPress;
  Thu Dec  3 2020 22:25                                                Page 53


  2750                        	.line	519
  2751 00:0877: E2 20        	sep	#$20
  2752                        	longa	off
  2753 00:0879: AD xx xx     	lda	|~~_irq_currentKeyPress
  2754 00:087C: 8D xx xx     	sta	|~~_k_last_scancode
  2755 00:087F: C2 20        	rep	#$20
  2756                        	longa	on
  2757                        ;
  2758                        ;			FXOS_KEY_BYTE_0 =  0;
  2759                        	.line	521
  2760 00:0881: E2 20        	sep	#$20
  2761                        	longa	off
  2762 00:0883: A9 00        	lda	#$0
  2763 00:0885: 8F 08 15 00  	sta	>5384
  2764 00:0889: C2 20        	rep	#$20
  2765                        	longa	on
  2766                        ;			FXOS_KEY_BYTE_1 =  _irq_keyboard
                    BufferIndex;
  2767                        	.line	522
  2768 00:088B: E2 20        	sep	#$20
  2769                        	longa	off
  2770 00:088D: AD xx xx     	lda	|~~_irq_keyboardBufferIndex
  2771 00:0890: 8F 09 15 00  	sta	>5385
  2772 00:0894: C2 20        	rep	#$20
  2773                        	longa	on
  2774                        ;			FXOS_KEY_BYTE_2 =  _irq_currentK
                    eyPress;
  2775                        	.line	523
  2776 00:0896: E2 20        	sep	#$20
  2777                        	longa	off
  2778 00:0898: AD xx xx     	lda	|~~_irq_currentKeyPress
  2779 00:089B: 8F 0A 15 00  	sta	>5386
  2780 00:089F: C2 20        	rep	#$20
  2781                        	longa	on
  2782                        ;
  2783                        ;			_irq_keyboardBuffer[_irq_keyboar
                    dBufferIndex] = (_irq_currentKeyPress | 0xE000);
  2784                        	.line	525
  2785 00:08A1: AD xx xx     	lda	|~~_irq_keyboardBufferIndex
  2786 00:08A4: 29 FF 00     	and	#$ff
  2787 00:08A7: 85 05        	sta	<R1
  2788 00:08A9: A5 05        	lda	<R1
  2789 00:08AB: 0A           	asl	A
  2790 00:08AC: 85 01        	sta	<R0
  2791 00:08AE: AD xx xx     	lda	|~~_irq_currentKeyPress
  2792 00:08B1: 29 FF 00     	and	#$ff
  2793 00:08B4: 09 00 E0     	ora	#<$e000
  2794 00:08B7: A6 01        	ldx	<R0
  2795 00:08B9: 9D xx xx     	sta	|~~_irq_keyboardBuffer,X
  2796                        ;
  2797                        ;			k_irq_device_event(IRQE_KEYBOARD
                    ,_pseudo_timer,&_irq_keyboardBuffer[_irq_keyboardBufferIndex
                    ]);
  2798                        	.line	527
  2799 00:08BC: AD xx xx     	lda	|~~_irq_keyboardBufferIndex
  2800 00:08BF: 29 FF 00     	and	#$ff
  2801 00:08C2: 85 09        	sta	<R2
  2802 00:08C4: A5 09        	lda	<R2
  Thu Dec  3 2020 22:25                                                Page 54


  2803 00:08C6: 0A           	asl	A
  2804 00:08C7: 85 05        	sta	<R1
  2805 00:08C9: 18           	clc
  2806 00:08CA: A9 xx xx     	lda	#<~~_irq_keyboardBuffer
  2807 00:08CD: 65 05        	adc	<R1
  2808 00:08CF: 85 09        	sta	<R2
  2809 00:08D1: A5 09        	lda	<R2
  2810 00:08D3: 85 01        	sta	<R0
  2811                        	xref	_BEG_DATA
  2812 00:08D5: A9 xx xx     	lda	#_BEG_DATA>>16
  2813 00:08D8: 85 03        	sta	<R0+2
  2814 00:08DA: D4 03        	pei	<R0+2
  2815 00:08DC: D4 01        	pei	<R0
  2816 00:08DE: AD xx xx     	lda	|~~_pseudo_timer+2
  2817 00:08E1: 48           	pha
  2818 00:08E2: AD xx xx     	lda	|~~_pseudo_timer
  2819 00:08E5: 48           	pha
  2820 00:08E6: F4 01 00     	pea	#<$1
  2821 00:08E9: 22 xx xx xx  	jsl	~~k_irq_device_event
  2822                        ;
  2823                        ;			_irq_keyboardBufferIndex++;
  2824                        	.line	529
  2825 00:08ED: E2 20        	sep	#$20
  2826                        	longa	off
  2827 00:08EF: EE xx xx     	inc	|~~_irq_keyboardBufferIndex
  2828 00:08F2: C2 20        	rep	#$20
  2829                        	longa	on
  2830                        ;			if(_irq_keyboardBufferIndex > 19
                    )
  2831                        	.line	530
  2832                        ;				_irq_keyboardBufferIndex
                     = 0;
  2833 00:08F4: E2 20        	sep	#$20
  2834                        	longa	off
  2835 00:08F6: A9 13        	lda	#$13
  2836 00:08F8: CD xx xx     	cmp	|~~_irq_keyboardBufferIndex
  2837 00:08FB: C2 20        	rep	#$20
  2838                        	longa	on
  2839 00:08FD: 90 03        	bcc	L57
  2840 00:08FF: 82 07 00     	brl	L10043
  2841                        L57:
  2842                        	.line	531
  2843 00:0902: E2 20        	sep	#$20
  2844                        	longa	off
  2845 00:0904: 9C xx xx     	stz	|~~_irq_keyboardBufferIndex
  2846 00:0907: C2 20        	rep	#$20
  2847                        	longa	on
  2848                        ;
  2849                        ;			//k_put_char(11,42,_irq_currentK
                    eyPress,15,0);
  2850                        ;
  2851                        ;		}
  2852                        L10043:
  2853                        	.line	535
  2854                        ;		else
  2855 00:0909: 82 11 00     	brl	L10044
  2856                        L10042:
  2857                        ;		{
  Thu Dec  3 2020 22:25                                                Page 55


  2858                        	.line	537
  2859                        ;			//k_put_char(2,40,'D',15,0);
  2860                        ;			//if(_k_last_scancode != _irq_cu
                    rrentKeyPress)
  2861                        ;				_irq_currentKeyPress = 0
                    ;
  2862                        	.line	540
  2863 00:090C: E2 20        	sep	#$20
  2864                        	longa	off
  2865 00:090E: 9C xx xx     	stz	|~~_irq_currentKeyPress
  2866 00:0911: C2 20        	rep	#$20
  2867                        	longa	on
  2868                        ;
  2869                        ;			none = KBD_INPT_BUF[0];
  2870                        	.line	542
  2871 00:0913: E2 20        	sep	#$20
  2872                        	longa	off
  2873 00:0915: AF 60 10 AF  	lda	>11472992
  2874 00:0919: 85 0D        	sta	<L48+none_1
  2875 00:091B: C2 20        	rep	#$20
  2876                        	longa	on
  2877                        ;		}
  2878                        	.line	543
  2879                        L10044:
  2880                        L10041:
  2881                        ;	
  2882                        ;		_irq_statusReg&=CHK_KEYMOUSE_CTL;
  2883                        	.line	545
  2884 00:091D: E2 20        	sep	#$20
  2885                        	longa	off
  2886 00:091F: A9 FD        	lda	#$fd
  2887 00:0921: 1C xx xx     	trb	|~~_irq_statusReg
  2888 00:0924: C2 20        	rep	#$20
  2889                        	longa	on
  2890                        ;		
  2891                        ;		INT_PENDING_REG1[0] &= FNX1_INT00_KBD;
  2892                        	.line	547
  2893 00:0926: E2 20        	sep	#$20
  2894                        	longa	off
  2895 00:0928: AF 41 01 00  	lda	>321
  2896 00:092C: 29 01        	and	#<$1
  2897 00:092E: 8F 41 01 00  	sta	>321
  2898 00:0932: C2 20        	rep	#$20
  2899                        	longa	on
  2900                        ;	}
  2901                        	.line	548
  2902                        ;	
  2903                        ;	if(INT_PENDING_REG1[0] & FNX1_INT01_SC0)
  2904                        L10035:
  2905                        	.line	550
  2906                        ;	{
  2907 00:0934: E2 20        	sep	#$20
  2908                        	longa	off
  2909 00:0936: AF 41 01 00  	lda	>321
  2910 00:093A: 29 02        	and	#<$2
  2911 00:093C: C2 20        	rep	#$20
  2912                        	longa	on
  2913 00:093E: D0 03        	bne	L58
  Thu Dec  3 2020 22:25                                                Page 56


  2914 00:0940: 82 0E 00     	brl	L10045
  2915                        L58:
  2916                        	.line	551
  2917                        ;		//k_put_char(11,line,irqspinner[scirq11+
                    +],15,0);
  2918                        ;		//if(scirq11>3)scirq11 = 0;
  2919                        ;
  2920                        ;		//k_put_char(2,1,' ',15,0);
  2921                        ;		//k_put_char(2,1,'1',15,0);
  2922                        ;		INT_PENDING_REG1[0]&=FNX1_INT01_SC0;
  2923                        	.line	557
  2924 00:0943: E2 20        	sep	#$20
  2925                        	longa	off
  2926 00:0945: AF 41 01 00  	lda	>321
  2927 00:0949: 29 02        	and	#<$2
  2928 00:094B: 8F 41 01 00  	sta	>321
  2929 00:094F: C2 20        	rep	#$20
  2930                        	longa	on
  2931                        ;	}
  2932                        	.line	558
  2933                        ;	if(INT_PENDING_REG1[0] & FNX1_INT02_SC1)
  2934                        L10045:
  2935                        	.line	559
  2936                        ;	{
  2937 00:0951: E2 20        	sep	#$20
  2938                        	longa	off
  2939 00:0953: AF 41 01 00  	lda	>321
  2940 00:0957: 29 04        	and	#<$4
  2941 00:0959: C2 20        	rep	#$20
  2942                        	longa	on
  2943 00:095B: D0 03        	bne	L59
  2944 00:095D: 82 0E 00     	brl	L10046
  2945                        L59:
  2946                        	.line	560
  2947                        ;		//k_put_char(12,line,irqspinner[scirq12+
                    +],15,0);
  2948                        ;		//if(scirq12>3)scirq12 = 0;
  2949                        ;		
  2950                        ;		//k_put_char(3,1,' ',15,0);
  2951                        ;		//k_put_char(3,1,'2',15,0);
  2952                        ;		INT_PENDING_REG1[0]&=FNX1_INT02_SC1;
  2953                        	.line	566
  2954 00:0960: E2 20        	sep	#$20
  2955                        	longa	off
  2956 00:0962: AF 41 01 00  	lda	>321
  2957 00:0966: 29 04        	and	#<$4
  2958 00:0968: 8F 41 01 00  	sta	>321
  2959 00:096C: C2 20        	rep	#$20
  2960                        	longa	on
  2961                        ;	}
  2962                        	.line	567
  2963                        ;	if(INT_PENDING_REG1[0] & FNX1_INT03_COM2)
  2964                        L10046:
  2965                        	.line	568
  2966                        ;	{
  2967 00:096E: E2 20        	sep	#$20
  2968                        	longa	off
  2969 00:0970: AF 41 01 00  	lda	>321
  Thu Dec  3 2020 22:25                                                Page 57


  2970 00:0974: 29 08        	and	#<$8
  2971 00:0976: C2 20        	rep	#$20
  2972                        	longa	on
  2973 00:0978: D0 03        	bne	L60
  2974 00:097A: 82 34 00     	brl	L10047
  2975                        L60:
  2976                        	.line	569
  2977                        ;		//k_put_char(13,line,irqspinner[scirq13+
                    +],15,0);
  2978                        ;		//if(scirq13>3)scirq13 = 0;
  2979                        ;		
  2980                        ;		//k_print_uart_status_com2(31);
  2981                        ;		data = UART2_BASE[0];
  2982                        	.line	574
  2983 00:097D: E2 20        	sep	#$20
  2984                        	longa	off
  2985 00:097F: AF F8 12 AF  	lda	>11473656
  2986 00:0983: 85 0E        	sta	<L48+data_1
  2987 00:0985: C2 20        	rep	#$20
  2988                        	longa	on
  2989                        ;		//k_irq_device_event(IRQE_COM2,_pseudo_t
                    imer,&data);
  2990                        ;		//k_put_char(dp++,31,data,15,0);
  2991                        ;		//k_put_char(31,1,'*' ,15,0);
  2992                        ;		while(UART2_BASE[UART_LSR] & 0x01)
  2993                        	.line	578
  2994                        L10048:
  2995 00:0987: E2 20        	sep	#$20
  2996                        	longa	off
  2997 00:0989: AF FD 12 AF  	lda	>11473661
  2998 00:098D: 29 01        	and	#<$1
  2999 00:098F: C2 20        	rep	#$20
  3000                        	longa	on
  3001 00:0991: D0 03        	bne	L61
  3002 00:0993: 82 0D 00     	brl	L10049
  3003                        L61:
  3004                        ;		{
  3005                        	.line	579
  3006                        ;			data = UART2_BASE[0];
  3007                        	.line	580
  3008 00:0996: E2 20        	sep	#$20
  3009                        	longa	off
  3010 00:0998: AF F8 12 AF  	lda	>11473656
  3011 00:099C: 85 0E        	sta	<L48+data_1
  3012 00:099E: C2 20        	rep	#$20
  3013                        	longa	on
  3014                        ;			//k_put_char(dp++,31,data,15,0);
  3015                        ;		}
  3016                        	.line	582
  3017 00:09A0: 82 E4 FF     	brl	L10048
  3018                        L10049:
  3019                        ;		//k_print_uart_status_com2(32);
  3020                        ;		//k_put_char(30,1,'M' ,15,0);
  3021                        ;		
  3022                        ;		//k_put_char(20,31,data+64,15,0);
  3023                        ;		//k_put_char(4,1,' ',15,0);
  3024                        ;		//k_put_char(4,1,'3',15,0);
  3025                        ;		INT_PENDING_REG1[0]&=FNX1_INT03_COM2;
  Thu Dec  3 2020 22:25                                                Page 58


  3026                        	.line	589
  3027 00:09A3: E2 20        	sep	#$20
  3028                        	longa	off
  3029 00:09A5: AF 41 01 00  	lda	>321
  3030 00:09A9: 29 08        	and	#<$8
  3031 00:09AB: 8F 41 01 00  	sta	>321
  3032 00:09AF: C2 20        	rep	#$20
  3033                        	longa	on
  3034                        ;	}
  3035                        	.line	590
  3036                        ;	if(INT_PENDING_REG1[0] & FNX1_INT04_COM1)
  3037                        L10047:
  3038                        	.line	591
  3039                        ;	{
  3040 00:09B1: E2 20        	sep	#$20
  3041                        	longa	off
  3042 00:09B3: AF 41 01 00  	lda	>321
  3043 00:09B7: 29 10        	and	#<$10
  3044 00:09B9: C2 20        	rep	#$20
  3045                        	longa	on
  3046 00:09BB: D0 03        	bne	L62
  3047 00:09BD: 82 4C 00     	brl	L10050
  3048                        L62:
  3049                        	.line	592
  3050                        ;
  3051                        ;		//k_put_char(14,line,irqspinner[scirq14+
                    +],15,0);
  3052                        ;		//if(scirq14>3)scirq14 = 0;
  3053                        ;		
  3054                        ;		//k_print_uart_status_com1(29);
  3055                        ;		data = UART1_BASE[0];
  3056                        	.line	598
  3057 00:09C0: E2 20        	sep	#$20
  3058                        	longa	off
  3059 00:09C2: AF F8 13 AF  	lda	>11473912
  3060 00:09C6: 85 0E        	sta	<L48+data_1
  3061 00:09C8: C2 20        	rep	#$20
  3062                        	longa	on
  3063                        ;		k_irq_device_event(IRQE_COM1,_pseudo_tim
                    er,&data);
  3064                        	.line	599
  3065 00:09CA: F4 00 00     	pea	#0
  3066 00:09CD: 18           	clc
  3067 00:09CE: 7B           	tdc
  3068 00:09CF: 69 0E 00     	adc	#<L48+data_1
  3069 00:09D2: 48           	pha
  3070 00:09D3: AD xx xx     	lda	|~~_pseudo_timer+2
  3071 00:09D6: 48           	pha
  3072 00:09D7: AD xx xx     	lda	|~~_pseudo_timer
  3073 00:09DA: 48           	pha
  3074 00:09DB: F4 03 00     	pea	#<$3
  3075 00:09DE: 22 xx xx xx  	jsl	~~k_irq_device_event
  3076                        ;		//k_put_char(30,1,'*' ,15,0);
  3077                        ;		//if(data)
  3078                        ;		//	k_put_char(30,2,data,15,0);
  3079                        ;		//k_put_char(31,1,'N' ,15,0);
  3080                        ;		//k_put_char(dp++,31,data+64,15,0);
  3081                        ;		while(UART1_BASE[UART_LSR] & 0x01)
  Thu Dec  3 2020 22:25                                                Page 59


  3082                        	.line	605
  3083                        L10051:
  3084 00:09E2: E2 20        	sep	#$20
  3085                        	longa	off
  3086 00:09E4: AF FD 13 AF  	lda	>11473917
  3087 00:09E8: 29 01        	and	#<$1
  3088 00:09EA: C2 20        	rep	#$20
  3089                        	longa	on
  3090 00:09EC: D0 03        	bne	L63
  3091 00:09EE: 82 0D 00     	brl	L10052
  3092                        L63:
  3093                        ;		{
  3094                        	.line	606
  3095                        ;			data = UART1_BASE[0];
  3096                        	.line	607
  3097 00:09F1: E2 20        	sep	#$20
  3098                        	longa	off
  3099 00:09F3: AF F8 13 AF  	lda	>11473912
  3100 00:09F7: 85 0E        	sta	<L48+data_1
  3101 00:09F9: C2 20        	rep	#$20
  3102                        	longa	on
  3103                        ;		}
  3104                        	.line	608
  3105 00:09FB: 82 E4 FF     	brl	L10051
  3106                        L10052:
  3107                        ;		//k_print_uart_status_com1(30);
  3108                        ;		//k_put_char(31,1,'*' ,15,0);
  3109                        ;		//k_put_char(30,3,'*' ,15,0);
  3110                        ;		
  3111                        ;		//k_put_char(5,1,' ',15,0);
  3112                        ;		//k_put_char(5,1,'4',15,0);
  3113                        ;		INT_PENDING_REG1[0]&=FNX1_INT04_COM1;
  3114                        	.line	615
  3115 00:09FE: E2 20        	sep	#$20
  3116                        	longa	off
  3117 00:0A00: AF 41 01 00  	lda	>321
  3118 00:0A04: 29 10        	and	#<$10
  3119 00:0A06: 8F 41 01 00  	sta	>321
  3120 00:0A0A: C2 20        	rep	#$20
  3121                        	longa	on
  3122                        ;	}
  3123                        	.line	616
  3124                        ;	if(INT_PENDING_REG1[0] & FNX1_INT05_MPU401)
  3125                        L10050:
  3126                        	.line	617
  3127                        ;	{
  3128 00:0A0C: E2 20        	sep	#$20
  3129                        	longa	off
  3130 00:0A0E: AF 41 01 00  	lda	>321
  3131 00:0A12: 29 20        	and	#<$20
  3132 00:0A14: C2 20        	rep	#$20
  3133                        	longa	on
  3134 00:0A16: D0 03        	bne	L64
  3135 00:0A18: 82 0E 00     	brl	L10053
  3136                        L64:
  3137                        	.line	618
  3138                        ;		//k_put_char(15,line,irqspinner[scirq15+
                    +],15,0);
  Thu Dec  3 2020 22:25                                                Page 60


  3139                        ;		//if(scirq15>3)scirq15 = 0;
  3140                        ;
  3141                        ;
  3142                        ;		//k_put_char(6,1,' ',15,0);
  3143                        ;		//k_put_char(6,1,'5',15,0);
  3144                        ;		INT_PENDING_REG1[0]&=FNX1_INT05_MPU401;
  3145                        	.line	625
  3146 00:0A1B: E2 20        	sep	#$20
  3147                        	longa	off
  3148 00:0A1D: AF 41 01 00  	lda	>321
  3149 00:0A21: 29 20        	and	#<$20
  3150 00:0A23: 8F 41 01 00  	sta	>321
  3151 00:0A27: C2 20        	rep	#$20
  3152                        	longa	on
  3153                        ;	}
  3154                        	.line	626
  3155                        ;	if(INT_PENDING_REG1[0] & FNX1_INT06_LPT)
  3156                        L10053:
  3157                        	.line	627
  3158                        ;	{
  3159 00:0A29: E2 20        	sep	#$20
  3160                        	longa	off
  3161 00:0A2B: AF 41 01 00  	lda	>321
  3162 00:0A2F: 29 40        	and	#<$40
  3163 00:0A31: C2 20        	rep	#$20
  3164                        	longa	on
  3165 00:0A33: D0 03        	bne	L65
  3166 00:0A35: 82 0E 00     	brl	L10054
  3167                        L65:
  3168                        	.line	628
  3169                        ;		//k_put_char(16,line,irqspinner[scirq16+
                    +],15,0);
  3170                        ;		//if(scirq16>3)scirq16 = 0;
  3171                        ;
  3172                        ;		//k_put_char(6,1,' ',15,0);
  3173                        ;		//k_put_char(6,1,'6',15,0);
  3174                        ;		INT_PENDING_REG1[0]&=FNX1_INT06_LPT;
  3175                        	.line	634
  3176 00:0A38: E2 20        	sep	#$20
  3177                        	longa	off
  3178 00:0A3A: AF 41 01 00  	lda	>321
  3179 00:0A3E: 29 40        	and	#<$40
  3180 00:0A40: 8F 41 01 00  	sta	>321
  3181 00:0A44: C2 20        	rep	#$20
  3182                        	longa	on
  3183                        ;	}
  3184                        	.line	635
  3185                        ;	if(INT_PENDING_REG1[0] & FNX1_INT07_SDCARD)
  3186                        L10054:
  3187                        	.line	636
  3188                        ;	{
  3189 00:0A46: E2 20        	sep	#$20
  3190                        	longa	off
  3191 00:0A48: AF 41 01 00  	lda	>321
  3192 00:0A4C: 29 80        	and	#<$80
  3193 00:0A4E: C2 20        	rep	#$20
  3194                        	longa	on
  3195 00:0A50: D0 03        	bne	L66
  Thu Dec  3 2020 22:25                                                Page 61


  3196 00:0A52: 82 23 00     	brl	L10055
  3197                        L66:
  3198                        	.line	637
  3199                        ;		//k_put_char(17,line,irqspinner[scirq17+
                    +],15,0);
  3200                        ;		//if(scirq17>3)scirq17 = 0;
  3201                        ;
  3202                        ;		k_irq_device_event(IRQE_SDCARD,_pseudo_t
                    imer,NULL);
  3203                        	.line	641
  3204 00:0A55: F4 00 00     	pea	#^$0
  3205 00:0A58: F4 00 00     	pea	#<$0
  3206 00:0A5B: AD xx xx     	lda	|~~_pseudo_timer+2
  3207 00:0A5E: 48           	pha
  3208 00:0A5F: AD xx xx     	lda	|~~_pseudo_timer
  3209 00:0A62: 48           	pha
  3210 00:0A63: F4 07 00     	pea	#<$7
  3211 00:0A66: 22 xx xx xx  	jsl	~~k_irq_device_event
  3212                        ;
  3213                        ;		//k_put_char(7,1,' ',15,0);
  3214                        ;		//k_put_char(7,1,'7',15,0);
  3215                        ;		INT_PENDING_REG1[0]&=FNX1_INT07_SDCARD;
  3216                        	.line	645
  3217 00:0A6A: E2 20        	sep	#$20
  3218                        	longa	off
  3219 00:0A6C: AF 41 01 00  	lda	>321
  3220 00:0A70: 29 80        	and	#<$80
  3221 00:0A72: 8F 41 01 00  	sta	>321
  3222 00:0A76: C2 20        	rep	#$20
  3223                        	longa	on
  3224                        ;	}
  3225                        	.line	646
  3226                        ;	//*INT_PENDING_REG1=*INT_PENDING_REG1;
  3227                        ;	INT_PENDING_REG1[0]=0xFF;
  3228                        L10055:
  3229                        	.line	648
  3230 00:0A78: E2 20        	sep	#$20
  3231                        	longa	off
  3232 00:0A7A: A9 FF        	lda	#$ff
  3233 00:0A7C: 8F 41 01 00  	sta	>321
  3234 00:0A80: C2 20        	rep	#$20
  3235                        	longa	on
  3236                        ;	INT_PENDING_REG1[0]=0x00;
  3237                        	.line	649
  3238 00:0A82: E2 20        	sep	#$20
  3239                        	longa	off
  3240 00:0A84: A9 00        	lda	#$0
  3241 00:0A86: 8F 41 01 00  	sta	>321
  3242 00:0A8A: C2 20        	rep	#$20
  3243                        	longa	on
  3244                        ;	
  3245                        ;	//k_put_char(2,40,'Z',15,0);
  3246                        ;}
  3247                        	.line	652
  3248                        L67:
  3249 00:0A8C: A5 12        	lda	<L47+2
  3250 00:0A8E: 85 16        	sta	<L47+2+4
  3251 00:0A90: A5 11        	lda	<L47+1
  Thu Dec  3 2020 22:25                                                Page 62


  3252 00:0A92: 85 15        	sta	<L47+1+4
  3253 00:0A94: 2B           	pld
  3254 00:0A95: 3B           	tsc
  3255 00:0A96: 18           	clc
  3256 00:0A97: 69 14 00     	adc	#L47+4
  3257 00:0A9A: 1B           	tcs
  3258 00:0A9B: 6B           	rtl
  3259                        	.endblock	652
  3260             00000010   L47	equ	16
  3261             0000000D   L48	equ	13
  3262                        	ends
  3263                        	efunc
  3264                        	.endfunc	652,13,16
  3265                        	.line	652
  3266                        ;
  3267                        ;void k_dispatch_reg2(PIRQDATA pIRQx)
  3268                        ;{
  3269                        	.line	654
  3270                        	.line	655
  3271                        	code
  3272                        	xdef	~~k_dispatch_reg2
  3273                        	func
  3274                        	.function	655
  3275                        ~~k_dispatch_reg2:
  3276                        	longa	on
  3277                        	longi	on
  3278 00:0A9C: 3B           	tsc
  3279 00:0A9D: 38           	sec
  3280 00:0A9E: E9 00 00     	sbc	#L68
  3281 00:0AA1: 1B           	tcs
  3282 00:0AA2: 0B           	phd
  3283 00:0AA3: 5B           	tcd
  3284             00000004   pIRQx_0	set	4
  3285                        	.block	655
  3286                        ;	//int line = pIRQ->line;
  3287                        ;	
  3288                        ;	//char FAR *keyCode = pIRQ->keycode;
  3289                        ;	
  3290                        ;	//line++;
  3291                        ;	
  3292                        ;	//k_put_char(9,line,irqspinner[scirq2++],15,0);
  3293                        ;	//if(scirq2>3) scirq2 = 0;
  3294                        ;
  3295                        ;	//k_put_char(3,40,'A',15,0);
  3296                        ;
  3297                        ;	if(INT_PENDING_REG2[0] & FNX2_INT00_OPL2R)
  3298                        	.sym	pIRQx,4,138,6,32,9
  3299                        	.line	667
  3300                        ;	{
  3301 00:0AA4: E2 20        	sep	#$20
  3302                        	longa	off
  3303 00:0AA6: AF 42 01 00  	lda	>322
  3304 00:0AAA: 29 01        	and	#<$1
  3305 00:0AAC: C2 20        	rep	#$20
  3306                        	longa	on
  3307 00:0AAE: D0 03        	bne	L71
  3308 00:0AB0: 82 0E 00     	brl	L10056
  3309                        L71:
  Thu Dec  3 2020 22:25                                                Page 63


  3310                        	.line	668
  3311                        ;		//k_put_char(10,line,irqspinner[scirq20+
                    +],15,0);
  3312                        ;		//if(scirq20>3) scirq20 = 0;
  3313                        ;		//k_put_char(2,2,' ',15,0);
  3314                        ;		//k_put_char(2,2,'0',15,0);
  3315                        ;		INT_PENDING_REG2[0]&=FNX2_INT00_OPL2R;
  3316                        	.line	673
  3317 00:0AB3: E2 20        	sep	#$20
  3318                        	longa	off
  3319 00:0AB5: AF 42 01 00  	lda	>322
  3320 00:0AB9: 29 01        	and	#<$1
  3321 00:0ABB: 8F 42 01 00  	sta	>322
  3322 00:0ABF: C2 20        	rep	#$20
  3323                        	longa	on
  3324                        ;	}
  3325                        	.line	674
  3326                        ;	if(INT_PENDING_REG2[0] & FNX2_INT01_OPL2L)
  3327                        L10056:
  3328                        	.line	675
  3329                        ;	{
  3330 00:0AC1: E2 20        	sep	#$20
  3331                        	longa	off
  3332 00:0AC3: AF 42 01 00  	lda	>322
  3333 00:0AC7: 29 02        	and	#<$2
  3334 00:0AC9: C2 20        	rep	#$20
  3335                        	longa	on
  3336 00:0ACB: D0 03        	bne	L72
  3337 00:0ACD: 82 0E 00     	brl	L10057
  3338                        L72:
  3339                        	.line	676
  3340                        ;		//k_put_char(11,line,irqspinner[scirq21+
                    +],15,0);
  3341                        ;		//if(scirq21>3) scirq21 = 0;
  3342                        ;		//k_put_char(3,2,' ',15,0);
  3343                        ;		//k_put_char(3,2,'1',15,0);
  3344                        ;		INT_PENDING_REG2[0]&=FNX2_INT01_OPL2L;
  3345                        	.line	681
  3346 00:0AD0: E2 20        	sep	#$20
  3347                        	longa	off
  3348 00:0AD2: AF 42 01 00  	lda	>322
  3349 00:0AD6: 29 02        	and	#<$2
  3350 00:0AD8: 8F 42 01 00  	sta	>322
  3351 00:0ADC: C2 20        	rep	#$20
  3352                        	longa	on
  3353                        ;	}
  3354                        	.line	682
  3355                        ;	if(INT_PENDING_REG2[0] & FNX2_INT02_BTX_INT)
  3356                        L10057:
  3357                        	.line	683
  3358                        ;	{
  3359 00:0ADE: E2 20        	sep	#$20
  3360                        	longa	off
  3361 00:0AE0: AF 42 01 00  	lda	>322
  3362 00:0AE4: 29 04        	and	#<$4
  3363 00:0AE6: C2 20        	rep	#$20
  3364                        	longa	on
  3365 00:0AE8: D0 03        	bne	L73
  Thu Dec  3 2020 22:25                                                Page 64


  3366 00:0AEA: 82 0E 00     	brl	L10058
  3367                        L73:
  3368                        	.line	684
  3369                        ;		//k_put_char(12,line,irqspinner[scirq22+
                    +],15,0);
  3370                        ;		//if(scirq22>3) scirq22 = 0;
  3371                        ;		//k_put_char(4,2,' ',15,0);
  3372                        ;		//k_put_char(4,2,'2',15,0);
  3373                        ;		INT_PENDING_REG2[0]&=FNX2_INT02_BTX_INT;
  3374                        	.line	689
  3375 00:0AED: E2 20        	sep	#$20
  3376                        	longa	off
  3377 00:0AEF: AF 42 01 00  	lda	>322
  3378 00:0AF3: 29 04        	and	#<$4
  3379 00:0AF5: 8F 42 01 00  	sta	>322
  3380 00:0AF9: C2 20        	rep	#$20
  3381                        	longa	on
  3382                        ;	}
  3383                        	.line	690
  3384                        ;	if(INT_PENDING_REG2[0] & FNX2_INT03_SDMA)
  3385                        L10058:
  3386                        	.line	691
  3387                        ;	{
  3388 00:0AFB: E2 20        	sep	#$20
  3389                        	longa	off
  3390 00:0AFD: AF 42 01 00  	lda	>322
  3391 00:0B01: 29 08        	and	#<$8
  3392 00:0B03: C2 20        	rep	#$20
  3393                        	longa	on
  3394 00:0B05: D0 03        	bne	L74
  3395 00:0B07: 82 0E 00     	brl	L10059
  3396                        L74:
  3397                        	.line	692
  3398                        ;		//k_put_char(13,line,irqspinner[scirq23+
                    +],15,0);
  3399                        ;		//if(scirq23>3) scirq23 = 0;
  3400                        ;		//k_put_char(5,2,' ',15,0);
  3401                        ;		//k_put_char(5,2,'3',15,0);
  3402                        ;		INT_PENDING_REG2[0]&=FNX2_INT03_SDMA;
  3403                        	.line	697
  3404 00:0B0A: E2 20        	sep	#$20
  3405                        	longa	off
  3406 00:0B0C: AF 42 01 00  	lda	>322
  3407 00:0B10: 29 08        	and	#<$8
  3408 00:0B12: 8F 42 01 00  	sta	>322
  3409 00:0B16: C2 20        	rep	#$20
  3410                        	longa	on
  3411                        ;	}
  3412                        	.line	698
  3413                        ;	if(INT_PENDING_REG2[0] & FNX2_INT04_VDMA)
  3414                        L10059:
  3415                        	.line	699
  3416                        ;	{
  3417 00:0B18: E2 20        	sep	#$20
  3418                        	longa	off
  3419 00:0B1A: AF 42 01 00  	lda	>322
  3420 00:0B1E: 29 10        	and	#<$10
  3421 00:0B20: C2 20        	rep	#$20
  Thu Dec  3 2020 22:25                                                Page 65


  3422                        	longa	on
  3423 00:0B22: D0 03        	bne	L75
  3424 00:0B24: 82 0E 00     	brl	L10060
  3425                        L75:
  3426                        	.line	700
  3427                        ;		//k_put_char(14,line,irqspinner[scirq24+
                    +],15,0);
  3428                        ;		//if(scirq24>3) scirq24 = 0;
  3429                        ;		//k_put_char(6,2,' ',15,0);
  3430                        ;		//k_put_char(6,2,'4',15,0);
  3431                        ;		INT_PENDING_REG2[0]&=FNX2_INT04_VDMA;
  3432                        	.line	705
  3433 00:0B27: E2 20        	sep	#$20
  3434                        	longa	off
  3435 00:0B29: AF 42 01 00  	lda	>322
  3436 00:0B2D: 29 10        	and	#<$10
  3437 00:0B2F: 8F 42 01 00  	sta	>322
  3438 00:0B33: C2 20        	rep	#$20
  3439                        	longa	on
  3440                        ;	}
  3441                        	.line	706
  3442                        ;	if(INT_PENDING_REG2[0] & FNX1_INT06_LPT)
  3443                        L10060:
  3444                        	.line	707
  3445                        ;	{
  3446 00:0B35: E2 20        	sep	#$20
  3447                        	longa	off
  3448 00:0B37: AF 42 01 00  	lda	>322
  3449 00:0B3B: 29 40        	and	#<$40
  3450 00:0B3D: C2 20        	rep	#$20
  3451                        	longa	on
  3452 00:0B3F: D0 03        	bne	L76
  3453 00:0B41: 82 0E 00     	brl	L10061
  3454                        L76:
  3455                        	.line	708
  3456                        ;		//k_put_char(16,line,irqspinner[scirq26+
                    +],15,0);
  3457                        ;		//if(scirq26>3) scirq26 = 0;
  3458                        ;		//k_put_char(7,2,' ',15,0);
  3459                        ;		//k_put_char(7,2,'6',15,0);
  3460                        ;		INT_PENDING_REG2[0]&=FNX1_INT06_LPT;
  3461                        	.line	713
  3462 00:0B44: E2 20        	sep	#$20
  3463                        	longa	off
  3464 00:0B46: AF 42 01 00  	lda	>322
  3465 00:0B4A: 29 40        	and	#<$40
  3466 00:0B4C: 8F 42 01 00  	sta	>322
  3467 00:0B50: C2 20        	rep	#$20
  3468                        	longa	on
  3469                        ;	}
  3470                        	.line	714
  3471                        ;	/*
  3472                        ;	if(INT_PENDING_REG2[0] & FNX2_INT07_SDCARD_INS)
  3473                        ;		{
  3474                        ;			//k_put_char(16,line,irqspinner[
                    scirq26++],15,0);
  3475                        ;			//if(scirq26>3) scirq26 = 0;
  3476                        ;			//k_put_char(7,2,' ',15,0);
  Thu Dec  3 2020 22:25                                                Page 66


  3477                        ;			//k_put_char(7,2,'6',15,0);
  3478                        ;			INT_PENDING_REG2[0]&=FNX2_INT07_
                    SDCARD_INS;
  3479                        ;		}
  3480                        ;	*/
  3481                        ;	/*
  3482                        ;	if(INT_PENDING_REG2[0] & FNX2_INT07_SDCARD)
  3483                        ;	{
  3484                        ;		//k_put_char(17,line,irqspinner[scirq17+
                    +],15,0);
  3485                        ;		//if(scirq17>3)scirq17 = 0;
  3486                        ;
  3487                        ;		k_irq_device_event(IRQE_SDCARD_INS,_pseu
                    do_timer,NULL);
  3488                        ;
  3489                        ;		//k_put_char(7,1,' ',15,0);
  3490                        ;		//k_put_char(7,1,'7',15,0);
  3491                        ;		INT_PENDING_REG2[0]&=FNX2_INT07_SDCARD;
  3492                        ;	}
  3493                        ;	*/
  3494                        ;	INT_PENDING_REG2[0]=0xFF;
  3495                        L10061:
  3496                        	.line	738
  3497 00:0B52: E2 20        	sep	#$20
  3498                        	longa	off
  3499 00:0B54: A9 FF        	lda	#$ff
  3500 00:0B56: 8F 42 01 00  	sta	>322
  3501 00:0B5A: C2 20        	rep	#$20
  3502                        	longa	on
  3503                        ;	INT_PENDING_REG2[0]=0x00;
  3504                        	.line	739
  3505 00:0B5C: E2 20        	sep	#$20
  3506                        	longa	off
  3507 00:0B5E: A9 00        	lda	#$0
  3508 00:0B60: 8F 42 01 00  	sta	>322
  3509 00:0B64: C2 20        	rep	#$20
  3510                        	longa	on
  3511                        ;
  3512                        ;	//k_put_char(3,40,'Z',15,0);
  3513                        ;}
  3514                        	.line	742
  3515                        L77:
  3516 00:0B66: A5 02        	lda	<L68+2
  3517 00:0B68: 85 06        	sta	<L68+2+4
  3518 00:0B6A: A5 01        	lda	<L68+1
  3519 00:0B6C: 85 05        	sta	<L68+1+4
  3520 00:0B6E: 2B           	pld
  3521 00:0B6F: 3B           	tsc
  3522 00:0B70: 18           	clc
  3523 00:0B71: 69 04 00     	adc	#L68+4
  3524 00:0B74: 1B           	tcs
  3525 00:0B75: 6B           	rtl
  3526                        	.endblock	742
  3527             00000000   L68	equ	0
  3528             00000001   L69	equ	1
  3529                        	ends
  3530                        	efunc
  3531                        	.endfunc	742,1,0
  Thu Dec  3 2020 22:25                                                Page 67


  3532                        	.line	742
  3533                        ;
  3534                        	.line	742
  3535                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxirq.c",654
  3536                        	xref	~~k_init_keyboard
  3537                        	xref	~~k_debug_integer
  3538                        	xref	~~k_debug_pointer
  3539                        	xref	~~k_debug_string
  3540                        	xref	~~k_delay
  3541                        	xref	~~k_getKernelTrapTable
  3542                        	xref	~~k_getZeroPage
  3543                        	xref	~~k_put_string
  3544                        	xref	~~k_clear_screen
  3545                        	xref	~~k_enable_text_cursor
  3546                        	xref	~~k_set_border_color
  3547                        	xref	~~k_enable_border
  3548                        	xref	~~k_irq_device_event
  3549                        	xref	~~k_signal_sol_event
  3550                        	xref	~~k_enable_text_mode
  3551                        	xref	~~k_longtodec
  3552                        	xref	~~_k_exec_message
  3553                        	xref	~~_k_exec_error
  3554                        	xref	~~_k_exec_context
  3555                        	xref	~~floppybuffer
  3556                        	xref	~~irq_signaled
  3557                        	.sym	~~k_init_keyboard,~~k_init_keyboard,69,1
                    8,0
  3558                        	.sym	~~IRQHandler,~~IRQHandler,65,2,0
  3559                        	.sym	~~COPHandler,~~COPHandler,65,2,0
  3560                        	.sym	~~BRKHandler,~~BRKHandler,65,2,0
  3561                        	.sym	~~k_dispatch_reg2,~~k_dispatch_reg2,65,2
                    ,0
  3562                        	.sym	~~k_dispatch_reg1,~~k_dispatch_reg1,65,2
                    ,0
  3563                        	.sym	~~k_dispatch_reg0,~~k_dispatch_reg0,65,2
                    ,0
  3564                        	.sym	~~_system_timer,~~_system_timer,18,2,32
  3565                        	.sym	~~_pseudo_timer,~~_pseudo_timer,18,2,32
  3566                        	.sym	~~_k_exec_message,~~_k_exec_message,110,
                    18,0,64
  3567                        	.sym	~~_k_exec_error,~~_k_exec_error,18,18,32
  3568                        	.sym	~~_k_exec_context,~~_k_exec_context,18,1
                    8,32
  3569                        	.sym	~~_k_shiftKeyMode,~~_k_shiftKeyMode,14,3
                    ,8
  3570                        	.sym	~~_k_extendedKeyMode,~~_k_extendedKeyMod
                    e,14,3,8
  3571                        	.sym	~~boxside,~~boxside,110,2,0,2
  3572                        	.sym	~~boxbottom,~~boxbottom,110,2,0,71
  3573                        	.sym	~~boxtop,~~boxtop,110,2,0,71
  3574                        	.sym	~~_k_last_scancode,~~_k_last_scancode,14
                    ,3,8
  3575                        	.sym	~~_irq_ktick,~~_irq_ktick,7,3,32
  3576                        	.sym	~~floppybuffer,~~floppybuffer,110,18,0,5
                    12
  3577                        	.sym	~~_irq_statusReg,~~_irq_statusReg,14,3,8
  3578                        	.sym	~~_irq_keyboardTimeout,~~_irq_keyboardTi
  Thu Dec  3 2020 22:25                                                Page 68


                    meout,5,3,16
  3579                        	.sym	~~_irq_currentKeyPress,~~_irq_currentKey
                    Press,14,3,8
  3580                        	.sym	~~_irq_keyboardBufferIndex,~~_irq_keyboa
                    rdBufferIndex,14,3,8
  3581                        	.sym	~~_irq_keyboardBuffer,~~_irq_keyboardBuf
                    fer,101,3,0,21
  3582                        	.sym	~~irq_signaled,~~irq_signaled,14,18,8
  3583                        	.sym	DEVICEDRIVER_COMMAND,0,656,14,32
  3584                        	.sym	DEVICEDRIVER_UNLOAD,0,654,14,32
  3585                        	.sym	DEVICEDRIVER_WRITE,0,656,14,32
  3586                        	.sym	DEVICEDRIVER_READ,0,656,14,32
  3587                        	.sym	DEVICEDRIVER_LOAD,0,654,14,32
  3588                        	.sym	PFX_BLOCK_DEVICE_DRIVER,0,138,14,32,63
  3589                        	.sym	FX_BLOCK_DEVICE_DRIVER,0,10,14,1448,63
  3590                        	.sym	PFX_DEVICE_DRIVER,0,138,14,32,62
  3591                        	.sym	FX_DEVICE_DRIVER,0,10,14,1416,62
  3592                        	.sym	~~k_debug_integer,~~k_debug_integer,65,1
                    8,0
  3593                        	.sym	~~k_debug_pointer,~~k_debug_pointer,65,1
                    8,0
  3594                        	.sym	~~k_debug_string,~~k_debug_string,65,18,
                    0
  3595                        	.sym	~~k_delay,~~k_delay,65,18,0
  3596                        	.sym	~~k_getKernelTrapTable,~~k_getKernelTrap
                    Table,42049,18,32
  3597                        	.sym	~~k_getZeroPage,~~k_getZeroPage,1098,18,
                    32,59
  3598                        	.sym	PDEBUGBYTEBITS,0,138,14,32,61
  3599                        	.sym	DEBUGBYTEBITS,0,10,14,8,61
  3600                        	.sym	PFXENVIRONMENT,0,138,14,32,60
  3601                        	.sym	FXENVIRONMENT,0,10,14,96,60
  3602                        	.sym	PFXZERPOPAGE,0,138,14,32,59
  3603                        	.sym	FXZERPOPAGE,0,10,14,448,59
  3604                        	.sym	KERNELTRAPCALL,0,641,14,32
  3605                        	.sym	~~k_put_string,~~k_put_string,69,18,0
  3606                        	.sym	~~k_clear_screen,~~k_clear_screen,65,18,
                    0
  3607                        	.sym	~~k_enable_text_cursor,~~k_enable_text_c
                    ursor,65,18,0
  3608                        	.sym	~~k_set_border_color,~~k_set_border_colo
                    r,65,18,0
  3609                        	.sym	~~k_enable_border,~~k_enable_border,65,1
                    8,0
  3610                        	.sym	PCOMMANDARGS,0,138,14,32,58
  3611                        	.sym	COMMANDARGS,0,10,14,64,58
  3612                        	.sym	PTOKENIZESTATE,0,133,14,32
  3613                        	.sym	TOKENIZESTATE,0,5,14,16
  3614                        	.sym	PTOKEN,0,138,14,32,57
  3615                        	.sym	TOKEN,0,10,14,64,57
  3616                        	.sym	PTOKENTYPE,0,133,14,32
  3617                        	.sym	TOKENTYPE,0,5,14,16
  3618                        	.sym	FXCommandHandler,0,656,14,32
  3619                        	.sym	PCONSOLECTX,0,138,14,32,56
  3620                        	.sym	CONSOLECTX,0,10,14,1144,56
  3621                        	.sym	PSPINNERCTX,0,138,14,32,55
  3622                        	.sym	SPINNERCTX,0,10,14,48,55
  3623                        	.sym	~~k_irq_device_event,~~k_irq_device_even
  Thu Dec  3 2020 22:25                                                Page 69


                    t,65,18,0
  3624                        	.sym	~~k_signal_sol_event,~~k_signal_sol_even
                    t,65,18,0
  3625                        	.sym	PMOUSE_MSG_STATE,0,138,14,32,54
  3626                        	.sym	MOUSE_MSG_STATE,0,10,14,184,54
  3627                        	.sym	PFXEVENTPROCESS,0,138,14,32,53
  3628                        	.sym	FXEVENTPROCESS,0,10,14,64,53
  3629                        	.sym	FXEventProc,0,641,14,32
  3630                        	.sym	PMOUSEMSGDATA,0,138,14,32,52
  3631                        	.sym	MOUSEMSGDATA,0,10,14,64,52
  3632                        	.sym	MSGIRQ,0,5,14,16
  3633                        	.sym	MAINLOOPARGS,0,10,14,16,51
  3634                        	.sym	PEACHCHILD_MSG,0,138,14,32,50
  3635                        	.sym	EACHCHILD_MSG,0,10,14,64,50
  3636                        	.sym	~~k_enable_text_mode,~~k_enable_text_mod
                    e,65,18,0
  3637                        	.sym	PCUR_PALETTE_MAP,0,138,14,32,49
  3638                        	.sym	CUR_PALETTE_MAP,0,10,14,400,49
  3639                        	.sym	PCLICKDETECTED,0,138,14,32,48
  3640                        	.sym	CLICKDETECTED,0,10,14,64,48
  3641                        	.sym	OBJECTCLICKED,0,641,14,32
  3642                        	.sym	MemoryCallback,0,641,14,32
  3643                        	.sym	PFXMEMORYMAP,0,138,14,32,47
  3644                        	.sym	FXMEMORYMAP,0,10,14,2072,47
  3645                        	.sym	UMM_HEAP_INFO,0,10,14,256,46
  3646                        	.sym	FOREACHNODEUNTIL,0,654,14,32
  3647                        	.sym	FOREACHNODE,0,641,14,32
  3648                        	.sym	~~k_longtodec,~~k_longtodec,1102,18,32
  3649                        	.sym	PFXSTRING,0,138,14,32,45
  3650                        	.sym	FXSTRING,0,10,14,64,45
  3651                        	.sym	Boolean_T,0,5,14,16
  3652                        	.sym	ldiv_t,0,10,14,64,43
  3653                        	.sym	div_t,0,10,14,32,42
  3654                        	.sym	wctype_t,0,16,14,16
  3655                        	.sym	wint_t,0,16,14,16
  3656                        	.sym	wchar_t,0,14,14,8
  3657                        	.sym	ptrdiff_t,0,7,14,32
  3658                        	.sym	size_t,0,16,14,16
  3659                        	.sym	PFXCOMBUFFER,0,138,14,32,41
  3660                        	.sym	FXCOMBUFFER,0,10,14,2080,41
  3661                        	.sym	PSUBMENULIST,0,138,14,32,40
  3662                        	.sym	SUBMENULIST,0,10,14,40,40
  3663                        	.sym	HSUBMENU,0,7,14,32
  3664                        	.sym	PSUBMENU,0,138,14,32,39
  3665                        	.sym	SUBMENU,0,10,14,64,39
  3666                        	.sym	MenuAction,0,641,14,32
  3667                        	.sym	PMENUANCHOR,0,138,14,32,38
  3668                        	.sym	MENUANCHOR,0,10,14,144,38
  3669                        	.sym	PTEXTBOX,0,138,14,32,37
  3670                        	.sym	TEXTBOX,0,10,14,144,37
  3671                        	.sym	PLISTBOX,0,138,14,32,36
  3672                        	.sym	LISTBOX,0,10,14,240,36
  3673                        	.sym	PSCROLLBAR,0,138,14,32,35
  3674                        	.sym	SCROLLBAR,0,10,14,192,35
  3675                        	.sym	PBUTTON,0,138,14,32,34
  3676                        	.sym	BUTTON,0,10,14,80,34
  3677                        	.sym	PMENUDROPDOWNDATA,0,138,14,32,33
  3678                        	.sym	MENUDROPDOWNDATA,0,10,14,3568,33
  Thu Dec  3 2020 22:25                                                Page 70


  3679                        	.sym	PMENUTAG,0,138,14,32,32
  3680                        	.sym	MENUTAG,0,10,14,112,32
  3681                        	.sym	PMENU,0,138,14,32,31
  3682                        	.sym	MENU,0,10,14,248,31
  3683                        	.sym	HMENURESOURCE,0,129,14,32
  3684                        	.sym	HTEXTBOX,0,7,14,32
  3685                        	.sym	PTEXTBOXX,0,138,14,32,30
  3686                        	.sym	TEXTBOXX,0,10,14,112,30
  3687                        	.sym	FONTMETRIC,0,10,14,32,29
  3688                        	.sym	TITLE,0,142,14,32
  3689                        	.sym	PHANDLE,0,1153,14,32
  3690                        	.sym	HANDLE,0,129,14,32
  3691                        	.sym	PWINDOWEX,0,138,14,32,28
  3692                        	.sym	WINDOWEX,0,10,14,2704,28
  3693                        	.sym	PWINDOW,0,138,14,32,27
  3694                        	.sym	WINDOW,0,10,14,2808,27
  3695                        	.sym	PDRAGDATA,0,138,14,32,26
  3696                        	.sym	DRAGDATA,0,10,14,136,26
  3697                        	.sym	PNCCLICKABLE,0,138,14,32,25
  3698                        	.sym	NCCLICKABLE,0,10,14,88,25
  3699                        	.sym	HCLICKABLE,0,7,14,32
  3700                        	.sym	PCLICKABLE,0,138,14,32,24
  3701                        	.sym	CLICKABLE,0,10,14,88,24
  3702                        	.sym	PWNDCLASS,0,138,14,32,23
  3703                        	.sym	WNDCLASS,0,10,14,256,23
  3704                        	.sym	HBRUSH,0,129,14,32
  3705                        	.sym	HCURSOR,0,129,14,32
  3706                        	.sym	HICON,0,129,14,32
  3707                        	.sym	HINSTANCE,0,129,14,32
  3708                        	.sym	FXWndProc,0,654,14,32
  3709                        	.sym	PRECT,0,138,14,32,22
  3710                        	.sym	RECT,0,10,14,64,22
  3711                        	.sym	PPOINT,0,138,14,32,21
  3712                        	.sym	POINT,0,10,14,32,21
  3713                        	.sym	PFXPROPERTY,0,138,14,32,19
  3714                        	.sym	FXPROPERTY,0,10,14,384,19
  3715                        	.sym	SCANCODE,0,14,14,8
  3716                        	.sym	KEYCODE,0,14,14,8
  3717                        	.sym	PFXPROCESSMESSAGE,0,138,14,32,18
  3718                        	.sym	FXPROCESSMESSAGE,0,10,14,112,18
  3719                        	.sym	PFXPROCESS,0,138,14,32,17
  3720                        	.sym	FXPROCESS,0,10,14,800,17
  3721                        	.sym	PDESKTOP_CONTROL,0,138,14,32,16
  3722                        	.sym	DESKTOP_CONTROL,0,10,14,392,16
  3723                        	.sym	PCONSOLE_CONTROL,0,138,14,32,15
  3724                        	.sym	CONSOLE_CONTROL,0,10,14,448,15
  3725                        	.sym	FXProcessProc,0,641,14,32
  3726                        	.sym	PFXCMDMESSAGE,0,138,14,32,14
  3727                        	.sym	FXCMDMESSAGE,0,10,14,304,14
  3728                        	.sym	PFXOSMESSAGE,0,138,14,32,13
  3729                        	.sym	FXOSMESSAGE,0,10,14,304,13
  3730                        	.sym	PINT_REGS,0,138,14,32,12
  3731                        	.sym	INT_REGS,0,10,14,104,12
  3732                        	.sym	TASK_STACK,0,10,14,32,11
  3733                        	.sym	TASK,0,10,14,48,10
  3734                        	.sym	PIRQDATA,0,138,14,32,9
  3735                        	.sym	IRQDATA,0,10,14,48,9
  3736                        	.sym	HMENU,0,129,14,32
  Thu Dec  3 2020 22:25                                                Page 71


  3737                        	.sym	HWND,0,129,14,32
  3738                        	.sym	MSGDATA,0,14,14,8
  3739                        	.sym	MSGDEST,0,18,14,32
  3740                        	.sym	MSGSRC,0,18,14,32
  3741                        	.sym	MSGTYPE,0,16,14,16
  3742                        	.sym	PROCESS_RESOURCE_LIST,0,138,14,32,3
  3743                        	.sym	PROCESS_TLS_LIST,0,138,14,32,3
  3744                        	.sym	SEMAPHORE_LIST,0,138,14,32,3
  3745                        	.sym	FILE_BLOCK_LIST,0,138,14,32,3
  3746                        	.sym	FILE_PATH_LIST,0,138,14,32,3
  3747                        	.sym	PROCEDURE_LIST,0,138,14,32,3
  3748                        	.sym	FILE_HANDLE,0,138,14,32,8
  3749                        	.sym	FILE_BLOCK,0,10,14,552,8
  3750                        	.sym	SEMAPHORE,0,10,14,16,7
  3751                        	.sym	PPROCESS_SIGNAL,0,138,14,32,6
  3752                        	.sym	PROCESS_SIGNAL,0,10,14,16,6
  3753                        	.sym	KRESULT,0,18,14,32
  3754                        	.sym	PKERNEL_ERROR,0,138,14,32,5
  3755                        	.sym	KERNEL_ERROR,0,10,14,32,5
  3756                        	.sym	PROCESS_STATUS,0,16,14,16
  3757                        	.sym	FILE_PATH_NAME,0,142,14,32
  3758                        	.sym	PROCESS_RESOURCE,0,129,14,32
  3759                        	.sym	PROCESS_TLS,0,129,14,32
  3760                        	.sym	PROCESS_CTX,0,129,14,32
  3761                        	.sym	USERID,0,16,14,16
  3762                        	.sym	PROCESS_ID,0,18,14,32
  3763                        	.sym	PROCESS_BANK,0,14,14,8
  3764                        	.sym	PFXQUEUE,0,138,14,32,4
  3765                        	.sym	FXQUEUE,0,10,14,80,4
  3766                        	.sym	PFXNODELIST,0,138,14,32,3
  3767                        	.sym	FXNODELIST,0,10,14,96,3
  3768                        	.sym	NodeListDeallocator,0,641,14,32
  3769                        	.sym	PFXNODE,0,138,14,32,2
  3770                        	.sym	FXNODE,0,10,14,384,2
  3771                        	.sym	PBYTEBITS,0,138,14,32,1
  3772                        	.sym	BYTEBITS,0,10,14,8,1
  3773                        	.sym	HCOLOR,0,129,14,32
  3774                        	.sym	HFONT,0,129,14,32
  3775                        	.sym	HDC,0,129,14,32
  3776                        	.sym	HPOINTER,0,129,14,32
  3777                        	.sym	uint32_t,0,18,14,32
  3778                        	.sym	uint8_t,0,14,14,8
  3779                        	.sym	PFAR,0,142,14,32
  3780                        	.sym	LPBOOL,0,142,14,32
  3781                        	.sym	BOOL,0,14,14,8
  3782                        	.sym	DWORD,0,18,14,32
  3783                        	.sym	ULONG,0,18,14,32
  3784                        	.sym	LPLONG,0,135,14,32
  3785                        	.sym	LONG,0,7,14,32
  3786                        	.sym	PUINT,0,144,14,32
  3787                        	.sym	USHORT,0,16,14,16
  3788                        	.sym	UINT,0,16,14,16
  3789                        	.sym	INT,0,5,14,16
  3790                        	.sym	WORD,0,5,14,16
  3791                        	.sym	PBYTE,0,142,14,32
  3792                        	.sym	BYTE,0,14,14,8
  3793                        	.sym	UCHAR,0,14,14,8
  3794                        	.sym	LPWCSTR,0,142,14,32
  Thu Dec  3 2020 22:25                                                Page 72


  3795                        	.sym	LPCSTR,0,142,14,32
  3796                        	.sym	LPSTR,0,142,14,32
  3797                        	.sym	LPCHAR,0,142,14,32
  3798                        	.sym	CHAR,0,14,14,8
  3799                        	.sym	LPVOID,0,129,14,32
  3800                        	.sym	VOID,0,1,14,32
  3801                        	end


      Lines assembled: 3801
      Errors: 0
