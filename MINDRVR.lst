  Thu Dec  3 2020 22:25                                                Page 1


                     ***************************************
                     **      WDC 65C816 Macro Assembler   **
                     **                                   **
                     **     Version 3.49.1- Feb  6 2006    **
                     ***************************************

     1                        ;:ts=8
     2             00000001   R0	equ	1
     3             00000005   R1	equ	5
     4             00000009   R2	equ	9
     5             0000000D   R3	equ	13
     6                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\MINDRVR.C",0
     7                        ;//***********************************************
                    *********************
     8                        ;// MINIMUM ATA LOW LEVEL I/O DRIVER -- MINDRVR.C
     9                        ;//
    10                        ;// by Hale Landis (hlandis@ata-atapi.com)
    11                        ;//
    12                        ;// There is no copyright and there are no restric
                    tions on the use
    13                        ;// of this ATA Low Level I/O Driver code.  It is 
                    distributed to
    14                        ;// help other programmers understand how the ATA 
                    device interface
    15                        ;// works and it is distributed without any warran
                    ty.  Use this
    16                        ;// code at your own risk.
    17                        ;//
    18                        ;// Minimum ATA Driver (MINDRVR) is a subset of AT
                    ADRVR. MINDRVR
    19                        ;// has a single header file and a single C file. 
                    MINDRVR can
    20                        ;// be used as the starting point for an ATADRVR f
                    or an embedded
    21                        ;// system. NOTE all the places in the MINDRVR.H a
                    nd MINDRVR.C files
    22                        ;// where there is a comment containing the string
                     "!!!".
    23                        ;//
    24                        ;// Use the header file mindrvr.h in any C files t
                    hat call MINDRVR
    25                        ;// functions.
    26                        ;//
    27                        ;// This code is based on the ATA/ATAPI-4,-5 and -
                    6 standards and
    28                        ;// on interviews with various ATA controller and 
                    drive designers.
    29                        ;//
    30                        ;// Note that MINDRVR does not support ATA CHS add
                    ressing.
    31                        ;//
    32                        ;// Most of the MINDRVR code is standard C code an
                    d should compile
    33                        ;// using any C compiler. It has been tested using
                     Borland C/C++ 4.5.
    34                        ;//
    35                        ;// This C source file is the header file for the 
  Thu Dec  3 2020 22:25                                                Page 2


                    driver
    36                        ;// and is used in the MINDRVR.C files and must al
                    so be used
    37                        ;// by any program using the MINDRVR code/function
                    s.
    38                        ;//***********************************************
                    *********************
    39                        ;
    40                        ;#ifdef USE_FX256_FMX
    41                        ;
    42                        ;#include "mindrvr.h"
    43                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\mindrvr.h",0
    44                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
    45                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
    46                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stddef.h",0
    47                        	.line	88
    48                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",43
    49                        	.stag	fake1_,32,1
    50                        	.member	quot,0,5,8,16
    51                        	.member	rem,16,5,8,16
    52                        	.eos
    53                        	.stag	fake2_,64,2
    54                        	.member	quot,0,7,8,32
    55                        	.member	rem,32,7,8,32
    56                        	.eos
    57                        	.stag	int_sqrt,32,3
    58                        	.member	sqrt,0,16,8,16
    59                        	.member	frac,16,16,8,16
    60                        	.eos
    61                        	.line	205
    62                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",4
    63                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
    64                        	.line	134
    65                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",5
    66                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    ctype.h",0
    67                        	.line	103
    68                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",6
    69                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
    70                        	.stag	_fx_bytebits,8,4
    71                        	.member	b7,0,14,17,1
    72                        	.member	b6,1,14,17,1
    73                        	.member	b5,2,14,17,1
    74                        	.member	b4,3,14,17,1
    75                        	.member	b3,4,14,17,1
    76                        	.member	b2,5,14,17,1
    77                        	.member	b1,6,14,17,1
    78                        	.member	b0,7,14,17,1
  Thu Dec  3 2020 22:25                                                Page 3


    79                        	.eos
    80                        	.stag	_fx_node,384,5
    81                        	.member	type,0,14,8,8
    82                        	.member	Reserved0,8,14,8,8
    83                        	.member	data,16,129,8,32
    84                        	.member	last,48,138,8,32,5
    85                        	.member	next,80,138,8,32,5
    86                        	.member	name,112,110,8,0,32
    87                        	.member	Reserved1,368,16,8,16
    88                        	.eos
    89                        	.stag	_fx_nodelist,96,6
    90                        	.member	listhead,0,138,8,32,5
    91                        	.member	listData,32,129,8,32
    92                        	.member	deallocator,64,641,8,32
    93                        	.eos
    94                        	.stag	_fx_queue,80,7
    95                        	.member	count,0,5,8,16
    96                        	.member	front,16,138,8,32,5
    97                        	.member	rear,48,138,8,32,5
    98                        	.eos
    99                        	.stag	fake8_,32,8
   100                        	.member	subsystem,0,14,8,8
   101                        	.member	level,8,14,8,8
   102                        	.member	error,16,16,8,16
   103                        	.eos
   104                        	.stag	_fx_process_signal,16,9
   105                        	.member	cbSize,0,16,8,16
   106                        	.eos
   107                        	.stag	_fx_semaphore,16,10
   108                        	.member	reserved,0,5,8,16
   109                        	.eos
   110                        	.stag	_fx_fileBlock,552,11
   111                        	.member	openCount,0,16,8,16
   112                        	.member	lockCount,16,16,8,16
   113                        	.member	dirty,32,14,8,8
   114                        	.member	fileBuffer,40,110,8,0,64
   115                        	.eos
   116                        	.stag	_fx_irq_data,48,12
   117                        	.member	line,0,5,8,16
   118                        	.member	keycode,16,142,8,32
   119                        	.eos
   120                        	.stag	_task,48,13
   121                        	.member	SPL,0,14,8,8
   122                        	.member	SPH,8,14,8,8
   123                        	.member	pstack,16,142,8,32
   124                        	.eos
   125                        	.stag	_task_stack,32,14
   126                        	.member	SS,0,142,8,32
   127                        	.eos
   128                        	.stag	int_regs,104,15
   129                        	.member	PB,0,14,8,8
   130                        	.member	PH,8,14,8,8
   131                        	.member	PL,16,14,8,8
   132                        	.member	PP,24,14,8,8
   133                        	.member	DB,32,14,8,8
   134                        	.member	DH,40,14,8,8
   135                        	.member	DL,48,14,8,8
   136                        	.member	AH,56,14,8,8
  Thu Dec  3 2020 22:25                                                Page 4


   137                        	.member	AL,64,14,8,8
   138                        	.member	XH,72,14,8,8
   139                        	.member	XL,80,14,8,8
   140                        	.member	YH,88,14,8,8
   141                        	.member	YL,96,14,8,8
   142                        	.eos
   143                        	.stag	_fx_eventMessage,304,16
   144                        	.member	src,0,18,8,32
   145                        	.member	dest,32,18,8,32
   146                        	.member	type,64,16,8,16
   147                        	.member	hwnd,80,129,8,32
   148                        	.member	pheap,112,129,8,32
   149                        	.member	msgTime,144,18,8,32
   150                        	.member	data,176,110,8,0,16
   151                        	.eos
   152                        	.stag	_fx_cmdMessage,304,17
   153                        	.member	src,0,18,8,32
   154                        	.member	dest,32,18,8,32
   155                        	.member	type,64,16,8,16
   156                        	.member	hwnd,80,129,8,32
   157                        	.member	pheap,112,129,8,32
   158                        	.member	msgTime,144,18,8,32
   159                        	.member	cmdCId,176,16,8,16
   160                        	.member	cmdMId,192,16,8,16
   161                        	.member	parameter1,208,18,8,32
   162                        	.member	parameter2,240,18,8,32
   163                        	.member	parameter3,272,18,8,32
   164                        	.eos
   165                        	.stag	_fx_console_ctl,448,18
   166                        	.member	maxCols,0,5,8,16
   167                        	.member	maxRows,16,5,8,16
   168                        	.member	curX,32,5,8,16
   169                        	.member	curY,48,5,8,16
   170                        	.member	fgColor,64,5,8,16
   171                        	.member	bgColor,80,5,8,16
   172                        	.member	mode,96,14,8,8
   173                        	.member	kbBuffer,104,101,8,0,16
   174                        	.member	screenBuffer,360,142,8,32
   175                        	.member	desktopMode,392,14,8,8
   176                        	.member	lastMouseButton,400,5,8,16
   177                        	.member	lastMouseX,416,5,8,16
   178                        	.member	lastMouseY,432,5,8,16
   179                        	.eos
   180                        	.stag	_fx_desktop_ctl,392,19
   181                        	.member	desktopMode,0,14,8,8
   182                        	.member	cursorCtl,8,5,8,16
   183                        	.member	cursorState,24,5,8,16
   184                        	.member	backgroundColor,40,5,8,16
   185                        	.member	foregroundColor,56,5,8,16
   186                        	.member	menuMode,72,5,8,16
   187                        	.member	lastMouseButton,88,5,8,16
   188                        	.member	lastMouseX,104,5,8,16
   189                        	.member	lastMouseY,120,5,8,16
   190                        	.member	currentDiskName,136,142,8,32
   191                        	.member	diskNodes,168,129,8,32
   192                        	.member	titleNodes,200,129,8,32
   193                        	.member	menuNodes,232,129,8,32
   194                        	.member	iconNodes,264,129,8,32
  Thu Dec  3 2020 22:25                                                Page 5


   195                        	.member	windowNodes,296,129,8,32
   196                        	.member	fontNodes,328,129,8,32
   197                        	.member	wndProc,360,138,8,32,6
   198                        	.eos
   199                        	.stag	_fx_process,800,20
   200                        	.member	cbSize,0,5,8,16
   201                        	.member	procId,16,18,8,32
   202                        	.member	parentId,48,18,8,32
   203                        	.member	ctx,80,129,8,32
   204                        	.member	userId,112,16,8,16
   205                        	.member	status,128,16,8,16
   206                        	.member	foregroundActive,144,14,8,8
   207                        	.member	tls,152,1121,8,32,8
   208                        	.member	commandLine,408,142,8,32
   209                        	.member	semaphores,440,138,8,32,6
   210                        	.member	fileHandles,472,138,8,32,6
   211                        	.member	pathList,504,138,8,32,6
   212                        	.member	resources,536,138,8,32,6
   213                        	.member	timerAware,568,14,8,8
   214                        	.member	timerTicks,576,112,8,0,2
   215                        	.member	timerTickCount,608,112,8,0,2
   216                        	.member	kernelError,640,10,8,32,8
   217                        	.member	consoleCtl,672,138,8,32,18
   218                        	.member	desktopCtl,704,138,8,32,19
   219                        	.member	execProc,736,641,8,32
   220                        	.member	startupArgs,768,129,8,32
   221                        	.eos
   222                        	.stag	_fxProcessMessage,112,21
   223                        	.member	src,0,18,8,32
   224                        	.member	dest,32,18,8,32
   225                        	.member	type,64,16,8,16
   226                        	.member	processInfo,80,138,8,32,20
   227                        	.eos
   228                        	.stag	_fx_property,384,22
   229                        	.member	name,0,110,8,0,16
   230                        	.member	value,128,110,8,0,32
   231                        	.eos
   232                        	.utag	_24bitPointer,32,23
   233                        	.member	address,0,142,11,32
   234                        	.member	bytes,0,110,11,0,4
   235                        	.eos
   236                        	.stag	_PointStruct,32,24
   237                        	.member	x,0,5,8,16
   238                        	.member	y,16,5,8,16
   239                        	.eos
   240                        	.stag	_RectStruct,64,25
   241                        	.member	x,0,5,8,16
   242                        	.member	y,16,5,8,16
   243                        	.member	width,32,5,8,16
   244                        	.member	height,48,5,8,16
   245                        	.eos
   246                        	.stag	_k_WindowClass,256,26
   247                        	.member	cbSize,0,16,8,16
   248                        	.member	style,16,16,8,16
   249                        	.member	pWndProc,32,654,8,32
   250                        	.member	hInstance,64,129,8,32
   251                        	.member	hIcon,96,129,8,32
   252                        	.member	hCursor,128,129,8,32
  Thu Dec  3 2020 22:25                                                Page 6


   253                        	.member	hbrBackground,160,129,8,32
   254                        	.member	lpszMenuName,192,142,8,32
   255                        	.member	lpszClassName,224,142,8,32
   256                        	.eos
   257                        	.stag	_ClickableRect,88,27
   258                        	.member	area,0,10,8,64,25
   259                        	.member	z,64,5,8,16
   260                        	.member	enabled,80,14,8,8
   261                        	.eos
   262                        	.stag	_NCClickableRect,88,28
   263                        	.member	area,0,10,8,64,25
   264                        	.member	msgType,64,16,8,16
   265                        	.member	enabled,80,14,8,8
   266                        	.eos
   267                        	.stag	_DragData,136,29
   268                        	.member	area,0,10,8,64,25
   269                        	.member	xoffset,64,5,8,16
   270                        	.member	yoffset,80,5,8,16
   271                        	.member	msgType,96,16,8,16
   272                        	.member	isDrag,112,14,8,8
   273                        	.member	canDrag,120,14,8,8
   274                        	.member	canDrop,128,14,8,8
   275                        	.eos
   276                        	.stag	_k_WindowStruct,2808,30
   277                        	.member	cbSize,0,16,8,16
   278                        	.member	style,16,18,8,32
   279                        	.member	win_id,48,5,8,16
   280                        	.member	win_x,64,5,8,16
   281                        	.member	win_y,80,5,8,16
   282                        	.member	win_width,96,5,8,16
   283                        	.member	win_height,112,5,8,16
   284                        	.member	wndRect,128,10,8,64,25
   285                        	.member	clientRect,192,10,8,64,25
   286                        	.member	nonclientGadgets,256,106,8,0,28,16
   287                        	.member	clickable,1664,129,8,32
   288                        	.member	win_title,1696,110,8,0,32
   289                        	.member	Reserved0,1952,16,8,16
   290                        	.member	win_class,1968,110,8,0,16
   291                        	.member	win_class_name,2096,110,8,0,32
   292                        	.member	nBitmapLayer,2352,16,8,16
   293                        	.member	procid,2368,18,8,32
   294                        	.member	pWndClass,2400,138,8,32,26
   295                        	.member	pParentWindow,2432,129,8,32
   296                        	.member	hMenu,2464,129,8,32
   297                        	.member	pChildWindows,2496,138,8,32,6
   298                        	.member	pChildHitList,2528,138,8,32,6
   299                        	.member	isVisible,2560,14,8,8
   300                        	.member	windowData,2568,129,8,32
   301                        	.member	clientData,2600,1121,8,32,6
   302                        	.member	isClosed,2792,14,8,8
   303                        	.member	isClosing,2800,14,8,8
   304                        	.eos
   305                        	.stag	_k_WindowStructEx,2704,31
   306                        	.member	cbSize,0,16,8,16
   307                        	.member	style,16,18,8,32
   308                        	.member	win_id,48,5,8,16
   309                        	.member	win_x,64,5,8,16
   310                        	.member	win_y,80,5,8,16
  Thu Dec  3 2020 22:25                                                Page 7


   311                        	.member	win_width,96,5,8,16
   312                        	.member	win_height,112,5,8,16
   313                        	.member	wndRect,128,10,8,64,25
   314                        	.member	clientRect,192,10,8,64,25
   315                        	.member	nonclientGadgets,256,106,8,0,28,16
   316                        	.member	clickable,1664,129,8,32
   317                        	.member	win_title,1696,110,8,0,32
   318                        	.member	Reserved0,1952,16,8,16
   319                        	.member	win_class,1968,110,8,0,16
   320                        	.member	nBitmapLayer,2096,16,8,16
   321                        	.member	procid,2112,18,8,32
   322                        	.member	pWndClass,2144,138,8,32,26
   323                        	.member	pParentWindow,2176,129,8,32
   324                        	.member	hMenu,2208,129,8,32
   325                        	.member	pChildWindows,2240,138,8,32,6
   326                        	.member	pChildHitList,2272,138,8,32,6
   327                        	.member	isVisible,2304,14,8,8
   328                        	.member	windowData,2312,129,8,32
   329                        	.member	clientData,2344,1121,8,32,4
   330                        	.member	isClosed,2472,14,8,8
   331                        	.member	hWnd,2480,129,8,32
   332                        	.member	localRect,2512,10,8,64,25
   333                        	.member	globalRect,2576,10,8,64,25
   334                        	.member	clientOffsetRect,2640,10,8,64,25
   335                        	.eos
   336                        	.stag	_FontMetric,32,32
   337                        	.member	width,0,5,8,16
   338                        	.member	height,16,5,8,16
   339                        	.eos
   340                        	.stag	_ctl_Textbox,112,33
   341                        	.member	win_id,0,5,8,16
   342                        	.member	win_x,16,5,8,16
   343                        	.member	win_y,32,5,8,16
   344                        	.member	win_width,48,5,8,16
   345                        	.member	win_height,64,5,8,16
   346                        	.member	content,80,1166,8,32
   347                        	.eos
   348                        	.stag	_MenuStruct,248,34
   349                        	.member	cx,0,5,8,16
   350                        	.member	cy,16,5,8,16
   351                        	.member	width,32,5,8,16
   352                        	.member	height,48,5,8,16
   353                        	.member	fcolor,64,14,8,8
   354                        	.member	bcolor,72,14,8,8
   355                        	.member	chromeLeft,80,14,8,8
   356                        	.member	chromeRight1,88,14,8,8
   357                        	.member	chromeRight2,96,14,8,8
   358                        	.member	itemId,104,16,8,16
   359                        	.member	pCaption,120,142,8,32
   360                        	.member	subMenus,152,138,8,32,6
   361                        	.member	pBackground,184,129,8,32
   362                        	.member	hWndOwner,216,129,8,32
   363                        	.eos
   364                        	.stag	fake35_,112,35
   365                        	.member	menuId,0,16,8,16
   366                        	.member	caption,16,142,8,32
   367                        	.member	rect,48,10,8,64,25
   368                        	.eos
  Thu Dec  3 2020 22:25                                                Page 8


   369                        	.stag	fake36_,3568,36
   370                        	.member	pParent,0,138,8,32,30
   371                        	.member	rect,32,10,8,64,25
   372                        	.member	captions,96,1134,8,32,24
   373                        	.member	chrome,864,110,8,0,24
   374                        	.member	ids,1056,112,8,0,24
   375                        	.member	clickable,1440,106,8,0,27,24
   376                        	.member	selected,3552,16,8,16
   377                        	.eos
   378                        	.stag	_fx_button_t,80,37
   379                        	.member	pCaption,0,142,8,32
   380                        	.member	data,32,129,8,32
   381                        	.member	captionPixelWidth,64,16,8,16
   382                        	.eos
   383                        	.stag	_fx_scrollbar_t,192,38
   384                        	.member	min,0,16,8,16
   385                        	.member	max,16,16,8,16
   386                        	.member	increment,32,16,8,16
   387                        	.member	stopsize,48,16,8,16
   388                        	.member	location,64,5,8,16
   389                        	.member	state,80,5,8,16
   390                        	.member	rectThumb,96,10,8,64,25
   391                        	.member	data,160,129,8,32
   392                        	.eos
   393                        	.stag	_fx_listbox_t,240,39
   394                        	.member	pos,0,5,8,16
   395                        	.member	selected,16,16,8,16
   396                        	.member	offsetX,32,5,8,16
   397                        	.member	offsetY,48,5,8,16
   398                        	.member	inc,64,5,8,16
   399                        	.member	direction,80,5,8,16
   400                        	.member	top,96,5,8,16
   401                        	.member	bottom,112,5,8,16
   402                        	.member	indexTop,128,5,8,16
   403                        	.member	indexBottom,144,5,8,16
   404                        	.member	maxItems,160,16,8,16
   405                        	.member	fontSet,176,142,8,32
   406                        	.member	data,208,129,8,32
   407                        	.eos
   408                        	.stag	_fx_textbox_t,144,40
   409                        	.member	pos,0,5,8,16
   410                        	.member	selected,16,16,8,16
   411                        	.member	offsetX,32,5,8,16
   412                        	.member	offsetY,48,5,8,16
   413                        	.member	isShifted,64,14,8,8
   414                        	.member	cursorState,72,14,8,8
   415                        	.member	fontSet,80,142,8,32
   416                        	.member	data,112,129,8,32
   417                        	.eos
   418                        	.stag	_fx_menuAnchor_t,144,41
   419                        	.member	pCaption,0,142,8,32
   420                        	.member	renderLayoutX,32,16,8,16
   421                        	.member	renderLayoutY,48,16,8,16
   422                        	.member	captionPixelWidth,64,16,8,16
   423                        	.member	data,80,129,8,32
   424                        	.member	droppedWindow,112,138,8,32,30
   425                        	.eos
   426                        	.stag	_SubMenuStruct,64,42
  Thu Dec  3 2020 22:25                                                Page 9


   427                        	.member	caption,0,142,8,32
   428                        	.member	action,32,641,8,32
   429                        	.eos
   430                        	.stag	_SubMenuListStruct,40,43
   431                        	.member	cMenus,0,14,8,8
   432                        	.member	psubmenus,8,9354,8,32,42
   433                        	.eos
   434                        	.stag	_fx_ComBuffer,2080,44
   435                        	.member	cbSize,0,16,8,16
   436                        	.member	cbBuffer,16,16,8,16
   437                        	.member	buffer,32,110,8,0,256
   438                        	.eos
   439                        	.line	708
   440                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",8
   441                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstringtable.h",0
   442                        	.line	89
   443                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",9
   444                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256fmx.h",0
   445                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   446                        	.line	708
   447                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256fmx.h",5
   448                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fmx_vicky.h",0
   449                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   450                        	.line	708
   451                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fmx_vicky.h",11
   452                        	.line	72
   453                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256fmx.h",6
   454                        	.line	1325
   455                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",13
   456                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxkernel.h",0
   457                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   458                        	.line	25
   459                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxkernel.h",5
   460                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",0
   461                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   462                        	.line	708
   463                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",5
   464                        	.line	61
   465                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxkernel.h",6
   466                        	.stag	_fx_zero_page,448,45
  Thu Dec  3 2020 22:25                                                Page 10


   467                        	.member	fxos_mouse_byte_0,0,14,8,8
   468                        	.member	fxos_mouse_byte_1,8,14,8,8
   469                        	.member	fxos_mouse_byte_2,16,14,8,8
   470                        	.member	fxos_mouse_byte_t,24,14,8,8
   471                        	.member	fxos_mouse_byte_x_l,32,14,8,8
   472                        	.member	fxos_mouse_byte_x_h,40,14,8,8
   473                        	.member	fxos_mouse_byte_y_l,48,14,8,8
   474                        	.member	fxos_mouse_byte_y_h,56,14,8,8
   475                        	.member	fxos_key_byte_0,64,14,8,8
   476                        	.member	fxos_key_byte_1,72,14,8,8
   477                        	.member	fxos_key_byte_2,80,14,8,8
   478                        	.member	fxos_mouse_ctl,88,14,8,8
   479                        	.member	fxos_mouse_index,96,14,8,8
   480                        	.member	fxos_mouse_status,104,14,8,8
   481                        	.member	VersionMajor,112,16,8,16
   482                        	.member	VersionMinor,128,16,8,16
   483                        	.member	VersionRelease,144,16,8,16
   484                        	.member	topMemory,160,18,8,32
   485                        	.member	bottomMemory,192,18,8,32
   486                        	.member	availableMemory,224,18,8,32
   487                        	.member	availableMemoryK,256,18,8,32
   488                        	.member	availableHeapMemory,288,18,8,32
   489                        	.member	availableHeapMemoryK,320,18,8,32
   490                        	.member	kernelFunctionCallId,352,16,8,16
   491                        	.member	kernelFunctionCallBank,368,14,8,8
   492                        	.member	kernelFunctionCallReserved,376,14,8,8
   493                        	.member	kernelFunctionCallParameter,384,129,8,32
   494                        	.member	kernelFunctionCallReturn,416,129,8,32
   495                        	.eos
   496                        	.stag	_fx_environment,96,46
   497                        	.member	variables,0,142,8,32
   498                        	.member	reserved1,32,5,8,16
   499                        	.member	reserved2,48,5,8,16
   500                        	.member	reserved3,64,5,8,16
   501                        	.member	reserved4,80,5,8,16
   502                        	.eos
   503                        	.stag	_debug_byte_bits,8,47
   504                        	.member	bit7,0,14,17,1
   505                        	.member	bit6,1,14,17,1
   506                        	.member	bit5,2,14,17,1
   507                        	.member	bit4,3,14,17,1
   508                        	.member	bit3,4,14,17,1
   509                        	.member	bit2,5,14,17,1
   510                        	.member	bit1,6,14,17,1
   511                        	.member	bit0,7,14,17,1
   512                        	.eos
   513                        	.stag	_fx_device_driver,1416,48
   514                        	.member	name,0,110,8,0,64
   515                        	.member	version,512,110,8,0,64
   516                        	.member	hmajor,1024,110,8,0,16
   517                        	.member	hminor,1152,110,8,0,16
   518                        	.member	type,1280,14,8,8
   519                        	.member	f_driver_load,1288,129,8,32
   520                        	.member	f_driver_read,1320,129,8,32
   521                        	.member	f_driver_write,1352,129,8,32
   522                        	.member	f_driver_unload,1384,129,8,32
   523                        	.eos
   524                        	.stag	_fx_block_device_driver,1448,49
  Thu Dec  3 2020 22:25                                                Page 11


   525                        	.member	name,0,110,8,0,64
   526                        	.member	version,512,110,8,0,64
   527                        	.member	hmajor,1024,110,8,0,16
   528                        	.member	hminor,1152,110,8,0,16
   529                        	.member	type,1280,14,8,8
   530                        	.member	f_driver_load,1288,129,8,32
   531                        	.member	f_driver_read,1320,129,8,32
   532                        	.member	f_driver_write,1352,129,8,32
   533                        	.member	f_driver_unload,1384,129,8,32
   534                        	.member	f_driver_command,1416,129,8,32
   535                        	.eos
   536                        	.line	270
   537                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",19
   538                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",0
   539                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
   540                        	.line	134
   541                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",5
   542                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   543                        	.line	205
   544                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",6
   545                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   546                        	.line	708
   547                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",7
   548                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxc256fmx.h",0
   549                        	.line	1325
   550                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",10
   551                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",0
   552                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    stdlib.h",0
   553                        	.line	205
   554                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",5
   555                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
                    string.h",0
   556                        	.line	134
   557                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",6
   558                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   559                        	.line	708
   560                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",7
   561                        	.stag	_fx_string,64,50
   562                        	.member	size,0,16,8,16
   563                        	.member	pos,16,5,8,16
   564                        	.member	buffer,32,142,8,32
   565                        	.eos
  Thu Dec  3 2020 22:25                                                Page 12


   566                        	.line	71
   567                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",15
   568                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",0
   569                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   570                        	.line	25
   571                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",5
   572                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxexec.h",0
   573                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   574                        	.line	708
   575                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxexec.h",5
   576                        	.line	52
   577                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",6
   578                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",0
   579                        	.line	61
   580                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",7
   581                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",0
   582                        	.line	171
   583                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",8
   584                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",0
   585                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   586                        	.line	708
   587                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",5
   588                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   589                        	.line	25
   590                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",6
   591                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",0
   592                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   593                        	.line	25
   594                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",5
   595                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc_cfg.h",0
   596                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos_build_parameters.h",0
   597                        	.line	32
   598                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc_cfg.h",8
   599                        	.stag	UMM_HEAP_INFO_t,256,51
   600                        	.member	totalEntries,0,18,8,32
  Thu Dec  3 2020 22:25                                                Page 13


   601                        	.member	usedEntries,32,18,8,32
   602                        	.member	freeEntries,64,18,8,32
   603                        	.member	totalBlocks,96,18,8,32
   604                        	.member	usedBlocks,128,18,8,32
   605                        	.member	freeBlocks,160,18,8,32
   606                        	.member	maxFreeContiguousBlocks,192,18,8,32
   607                        	.member	blockSize,224,18,8,32
   608                        	.eos
   609                        	.line	199
   610                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",6
   611                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc.h",0
   612                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   613                        	.line	708
   614                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\umm_malloc.h",11
   615                        	.line	24
   616                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxmemorymanager.h",7
   617                        	.stag	_fx_memory_map,2072,52
   618                        	.member	availableMemory,0,18,8,32
   619                        	.member	valid_segments,32,110,8,0,255
   620                        	.eos
   621                        	.line	39
   622                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",7
   623                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",0
   624                        	.line	743
   625                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",8
   626                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxgui.h",0
   627                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxfont.h",0
   628                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxtypes.h",0
   629                        	.line	708
   630                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxfont.h",6
   631                        	.line	64
   632                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxgui.h",4
   633                        	.stag	_click_detected,64,53
   634                        	.member	window,0,138,8,32,30
   635                        	.member	handler,32,641,8,32
   636                        	.eos
   637                        	.stag	_current_palette_map,400,54
   638                        	.member	CUR_DESKTOP,0,5,8,16
   639                        	.member	CUR_BACKGROUND,16,5,8,16
   640                        	.member	CUR_FONT,32,5,8,16
   641                        	.member	CUR_SELECTED_FONT,48,5,8,16
   642                        	.member	CUR_HIGHLIGHT_COLOR,64,5,8,16
   643                        	.member	CUR_WINDOWFRAME,80,5,8,16
   644                        	.member	CUR_WINDOWBORDER,96,5,8,16
   645                        	.member	CUR_WINDOWSHADOW,112,5,8,16
  Thu Dec  3 2020 22:25                                                Page 14


   646                        	.member	CUR_MENU,128,5,8,16
   647                        	.member	CUR_GADGET,144,5,8,16
   648                        	.member	CUR_COLOR,160,101,8,0,15
   649                        	.eos
   650                        	.line	264
   651                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxwindowmanager.h",9
   652                        	.stag	_childMessage_t,64,55
   653                        	.member	msgType,0,16,8,16
   654                        	.member	msgData,16,129,8,32
   655                        	.member	dataSize,48,16,8,16
   656                        	.eos
   657                        	.line	362
   658                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxeventmanager.h",9
   659                        	.stag	_fx_main_loopvars,16,56
   660                        	.member	dummy,0,5,8,16
   661                        	.eos
   662                        	.stag	_fxMouseMessageData,64,57
   663                        	.member	button1,0,14,8,8
   664                        	.member	button2,8,14,8,8
   665                        	.member	button3,16,14,8,8
   666                        	.member	button4,24,14,8,8
   667                        	.member	x,32,16,8,16
   668                        	.member	y,48,16,8,16
   669                        	.eos
   670                        	.stag	_fx_eventProcess,64,58
   671                        	.member	process,0,138,8,32,20
   672                        	.member	eventProc,32,641,8,32
   673                        	.eos
   674                        	.stag	_mouse_msg_state,184,59
   675                        	.member	lastEvent,0,18,8,32
   676                        	.member	buttonLeftDown,32,14,8,8
   677                        	.member	lastLeftDown,40,18,8,32
   678                        	.member	buttonRightDown,72,14,8,8
   679                        	.member	lastRightDown,80,18,8,32
   680                        	.member	buttonMiddleDown,112,14,8,8
   681                        	.member	lastMiddleDown,120,18,8,32
   682                        	.member	lastX,152,16,8,16
   683                        	.member	lastY,168,16,8,16
   684                        	.eos
   685                        	.line	743
   686                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxconsole.h",16
   687                        	.stag	_fx_spinner_ctx,48,60
   688                        	.member	index,0,5,8,16
   689                        	.member	spinner,16,142,8,32
   690                        	.eos
   691                        	.stag	_fx_console_ctx,1144,61
   692                        	.member	lineBufferIndex,0,5,8,16
   693                        	.member	lineBuffer,16,110,8,0,128
   694                        	.member	isShifted,1040,14,8,8
   695                        	.member	userData,1048,129,8,32
   696                        	.member	screenBuffer,1080,129,8,32
   697                        	.member	Reserved1,1112,129,8,32
   698                        	.eos
   699                        	.stag	_token,64,62
   700                        	.member	type,0,5,8,16
  Thu Dec  3 2020 22:25                                                Page 15


   701                        	.member	depth,16,16,8,16
   702                        	.member	text,32,142,8,32
   703                        	.eos
   704                        	.stag	_command_args,64,63
   705                        	.member	proc,0,656,8,32
   706                        	.member	tokens,32,138,8,32,5
   707                        	.eos
   708                        	.line	171
   709                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",20
   710                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxstring.h",0
   711                        	.line	71
   712                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",21
   713                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxnode.h",0
   714                        	.line	61
   715                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",22
   716                        	.line	25
   717                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\mindrvr.h",35
   718                        	.stag	REG_CMD_INFO,328,64
   719                        	.member	cmd,0,14,8,8
   720                        	.member	fr,8,16,8,16
   721                        	.member	sc,24,16,8,16
   722                        	.member	sn,40,16,8,16
   723                        	.member	cl,56,16,8,16
   724                        	.member	ch,72,16,8,16
   725                        	.member	dh,88,14,8,8
   726                        	.member	dc,96,14,8,8
   727                        	.member	ns,104,7,8,32
   728                        	.member	mc,136,5,8,16
   729                        	.member	lbaSize,152,14,8,8
   730                        	.member	lbaLow,160,18,8,32
   731                        	.member	lbaHigh,192,18,8,32
   732                        	.member	st,224,14,8,8
   733                        	.member	as,232,14,8,8
   734                        	.member	er,240,14,8,8
   735                        	.member	ec,248,14,8,8
   736                        	.member	to,256,14,8,8
   737                        	.member	totalBytesXfer,264,7,8,32
   738                        	.member	drqPackets,296,7,8,32
   739                        	.eos
   740                        	.line	475
   741                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\MINDRVR.C",36
   742                        ;#include "fxos.h"
   743                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   744                        	.line	25
   745                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\MINDRVR.C",37
   746                        ;#include "ata.h"
   747                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ata.h",0
   748                        	.file	"G:\devtools\WDCTools\wdc\Tools\include\
  Thu Dec  3 2020 22:25                                                Page 16


                    stdint.h",0
   749                        	.line	92
   750                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ata.h",4
   751                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\fxos.h",0
   752                        	.line	25
   753                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\ata.h",5
   754                        	.stag	fake65_,8,65
   755                        	.member	drive,0,14,8,8
   756                        	.eos
   757                        	.line	94
   758                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
                    space\FXOSv1\src\MINDRVR.C",38
   759                        ;
   760                        ;//#pragma section CODE=IDEMAN,offset $08:0000
   761                        ;#pragma section CODE=FXHDD,offset $03:7FFF
   762                        FXHDD	section	offset $03:7FFF
   763 03:7FFF:              	ends
   764                        ;
   765                        ;//***********************************************
                    ***************
   766                        ;//
   767                        ;// !!! data that functions outside of MINDRVR mus
                    t use
   768                        ;//
   769                        ;// Note that there is no actual "interrupt handle
                    r" provide in
   770                        ;// MINDRVR. The interrupt handler is usually a sm
                    all function that
   771                        ;// is very system specific. However, MINDRVR expe
                    cts that interrupt
   772                        ;// handler function to provide some status data a
                    t the time the
   773                        ;// interrupt handler is executed.
   774                        ;//
   775                        ;// In many systems, including PCI bus based syste
                    ms, when an
   776                        ;// interrupt is received from an ATA controller, 
                    the interrupt
   777                        ;// handler must acknowledge the interrupt by read
                    ing both the
   778                        ;// ATA/ATAPI device Status register and the contr
                    oller status
   779                        ;// register. This status must be stored here so t
                    hat MINDRVR
   780                        ;// can use it.
   781                        ;//
   782                        ;//***********************************************
                    ***************
   783                        ;extern ULONG _pseudo_timer;
   784                        ;
   785                        ;//UCHAR ide_sector[512];
   786                        ;
   787                        ;unsigned char int_ata_status;    // ATA status re
                    ad by interrupt handler
   788                        ;
  Thu Dec  3 2020 22:25                                                Page 17


   789                        ;unsigned char int_bmide_status;  // BMIDE status 
                    read by interrupt handler
   790                        ;
   791                        ;unsigned char int_use_intr_flag = INT_DEFAULT_INT
                    ERRUPT_MODE;
   792                        	data
   793                        	xdef	~~int_use_intr_flag
   794                        ~~int_use_intr_flag:
   795 00:0000: 00           	db	$0
   796 00:0001:              	ends
   797                        ;
   798                        ;struct REG_CMD_INFO reg_cmd_info;
   799                        ;
   800                        ;int reg_config_info[2];
   801                        ;
   802                        ;unsigned char * pio_bmide_base_addr;
   803                        ;
   804                        ;unsigned char * pio_reg_addrs[9] =
   805                        	data
   806                        	xdef	~~pio_reg_addrs
   807                        ~~pio_reg_addrs:
   808                        ;{
   809                        ;   PIO_BASE_ADDR1 + 0,  // [0] CB_DATA
   810 00:0001: 39 E8 AF 00  	dl	$AFE839
   811                        ;   PIO_BASE_ADDR1 + 1,  // [1] CB_FR & CB_ER
   812 00:0005: 3A E8 AF 00  	dl	$AFE83A
   813                        ;   PIO_BASE_ADDR1 + 2,  // [2] CB_SC
   814 00:0009: 3B E8 AF 00  	dl	$AFE83B
   815                        ;   PIO_BASE_ADDR1 + 3,  // [3] CB_SN
   816 00:000D: 3C E8 AF 00  	dl	$AFE83C
   817                        ;   PIO_BASE_ADDR1 + 4,  // [4] CB_CL
   818 00:0011: 3D E8 AF 00  	dl	$AFE83D
   819                        ;   PIO_BASE_ADDR1 + 5,  // [5] CB_CH
   820 00:0015: 3E E8 AF 00  	dl	$AFE83E
   821                        ;   PIO_BASE_ADDR1 + 6,  // [6] CB_DH
   822 00:0019: 3F E8 AF 00  	dl	$AFE83F
   823                        ;   PIO_BASE_ADDR1 + 7,  // [7] CB_CMD & CB_STAT
   824 00:001D: 40 E8 AF 00  	dl	$AFE840
   825                        ;   PIO_BASE_ADDR2 + 0   // [8] CB_DC & CB_ASTAT
   826                        ;} ;
   827 00:0021: 38 E8 AF 00  	dl	$AFE838
   828 00:0025:              	ends
   829                        ;
   830                        ;unsigned char pio_xfer_width = PIO_DEFAULT_XFER_W
                    IDTH;
   831                        	data
   832                        	xdef	~~pio_xfer_width
   833                        ~~pio_xfer_width:
   834 00:0025: 10           	db	$10
   835 00:0026:              	ends
   836                        ;
   837                        ;//***********************************************
                    ***************
   838                        ;//
   839                        ;// functions internal and private to MINDRVR
   840                        ;//
   841                        ;//***********************************************
                    ***************
  Thu Dec  3 2020 22:25                                                Page 18


   842                        ;
   843                        ;static void sub_setup_command( void );
   844                        ;static void sub_trace_command( void );
   845                        ;static int sub_select( unsigned char dev );
   846                        ;static void sub_wait_poll( unsigned char we, unsi
                    gned char pe );
   847                        ;
   848                        ;static unsigned char pio_inbyte( unsigned char ad
                    dr );
   849                        ;static void pio_outbyte( int addr, unsigned char 
                    data );
   850                        ;static unsigned int pio_inword( unsigned char add
                    r );
   851                        ;static void pio_outword( int addr, unsigned int d
                    ata );
   852                        ;static unsigned long pio_indword( unsigned char a
                    ddr );
   853                        ;static void pio_outdword( int addr, unsigned long
                     data );
   854                        ;static void pio_drq_block_in( unsigned char addrD
                    ataReg,
   855                        ;                              unsigned char * buf
                    Addr,
   856                        ;                              long wordCnt );
   857                        ;static void pio_drq_block_out( unsigned char addr
                    DataReg,
   858                        ;                               unsigned char * bu
                    fAddr,
   859                        ;                               long wordCnt );
   860                        ;static void pio_rep_inbyte( unsigned char addrDat
                    aReg,
   861                        ;                            unsigned char * bufAd
                    dr,
   862                        ;                            long byteCnt );
   863                        ;static void pio_rep_outbyte( unsigned char addrDa
                    taReg,
   864                        ;                             unsigned char * bufA
                    ddr,
   865                        ;                             long byteCnt );
   866                        ;static void pio_rep_inword( unsigned char addrDat
                    aReg,
   867                        ;                            unsigned char * bufAd
                    dr,
   868                        ;                            long wordCnt );
   869                        ;static void pio_rep_outword( unsigned char addrDa
                    taReg,
   870                        ;                             unsigned char * bufA
                    ddr,
   871                        ;                             long wordCnt );
   872                        ;static void pio_rep_indword( unsigned char addrDa
                    taReg,
   873                        ;                             unsigned char * bufA
                    ddr,
   874                        ;                             long dwordCnt );
   875                        ;static void pio_rep_outdword( unsigned char addrD
                    ataReg,
   876                        ;                              unsigned char * buf
                    Addr,
  Thu Dec  3 2020 22:25                                                Page 19


   877                        ;                              long dwordCnt );
   878                        ;
   879                        ;static unsigned char pio_readBusMstrCmd( void );
   880                        ;static unsigned char pio_readBusMstrStatus( void 
                    );
   881                        ;static void pio_writeBusMstrCmd( unsigned char x 
                    );
   882                        ;static void pio_writeBusMstrStatus( unsigned char
                     x );
   883                        ;
   884                        ;static long tmr_cmd_start_time;     // command st
                    art time
   885                        ;static void tmr_set_timeout( void );
   886                        ;static int tmr_chk_timeout( void );
   887                        ;
   888                        ;void k_ide_init(void);
   889                        ;void k_ide_busy(void);
   890                        ;void k_ide_drive_ready(void);
   891                        ;void k_ide_drive_ready_notbusy(void);
   892                        ;void k_ide_not_drq(void);
   893                        ;LPCHAR k_ide_read_sector(LPCHAR readBuffer);
   894                        ;void k_read_lba_sector(ULONG sectorStart,
   895                        ;						unsigned
                     char count,
   896                        ;					   LPCHAR readBu
                    ffer);
   897                        ;LPCHAR k_ide_get_info(void);
   898                        ;
   899                        ;// This macro provides a small delay that is used
                     in several
   900                        ;// places in the ATA command protocols:
   901                        ;
   902                        ;#define DELAY400NS  { pio_inbyte( CB_ASTAT ); pio
                    _inbyte( CB_ASTAT );  \
   903                        ;                      pio_inbyte( CB_ASTAT ); pio
                    _inbyte( CB_ASTAT ); pio_inbyte( CB_ASTAT );}
   904                        ;
   905                        ;//***********************************************
                    **************
   906                        ;//
   907                        ;// reg_config() - Check the host adapter and dete
                    rmine the
   908                        ;//                number and type of drives attac
                    hed.
   909                        ;//
   910                        ;// This process is not documented by any of the A
                    TA standards.
   911                        ;//
   912                        ;// Infomation is returned by this function is in
   913                        ;// reg_config_info[] -- see MINDRVR.H.
   914                        ;//
   915                        ;//***********************************************
                    **************
   916                        ;
   917                        ;
   918                        ;
   919                        ;// Directions:
   920                        ;//#define      ATA_READ      0x00
  Thu Dec  3 2020 22:25                                                Page 20


   921                        ;//#define      ATA_WRITE     0x01
   922                        ;/*
   923                        ;struct IDEChannelRegisters {
   924                        ;   unsigned short base;  // I/O Base.
   925                        ;   unsigned short ctrl;  // Control Base
   926                        ;   unsigned short bmide; // Bus Master IDE
   927                        ;   unsigned char  nIEN;  // nIEN (No Interrupt);
   928                        ;} channels[2];
   929                        ;
   930                        ;unsigned char ide_buf[2048] = {0};
   931                        ;unsigned static char ide_irq_invoked = 0;
   932                        ;unsigned static char atapi_packet[12] = {0xA8, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
   933                        ;
   934                        ;struct ide_device {
   935                        ;   unsigned char  Reserved;    // 0 (Empty) or 1 
                    (This Drive really exists).
   936                        ;   unsigned char  Channel;     // 0 (Primary Chan
                    nel) or 1 (Secondary Channel).
   937                        ;   unsigned char  Drive;       // 0 (Master Drive
                    ) or 1 (Slave Drive).
   938                        ;   unsigned short Type;        // 0: ATA, 1:ATAPI
                    .
   939                        ;   unsigned short Signature;   // Drive Signature
   940                        ;   unsigned short Capabilities;// Features.
   941                        ;   unsigned int   CommandSets; // Command Sets Su
                    pported.
   942                        ;   unsigned int   Size;        // Size in Sectors
                    .
   943                        ;   unsigned char  Model[41];   // Model in string
                    .
   944                        ;} ide_devices[4];
   945                        ;
   946                        ;
   947                        ;void ide_write(unsigned char channel, unsigned ch
                    ar reg, unsigned char data)
   948                        ;{
   949                        ;   if (reg > 0x07 && reg < 0x0C)
   950                        ;      ide_write(channel, ATA_REG_CONTROL, 0x80 | 
                    channels[channel].nIEN);
   951                        ;   if (reg < 0x08)
   952                        ;      outb(channels[channel].base  + reg - 0x00, 
                    data);
   953                        ;   else if (reg < 0x0C)
   954                        ;      outb(channels[channel].base  + reg - 0x06, 
                    data);
   955                        ;   else if (reg < 0x0E)
   956                        ;      outb(channels[channel].ctrl  + reg - 0x0A, 
                    data);
   957                        ;   else if (reg < 0x16)
   958                        ;      outb(channels[channel].bmide + reg - 0x0E, 
                    data);
   959                        ;   if (reg > 0x07 && reg < 0x0C)
   960                        ;      ide_write(channel, ATA_REG_CONTROL, channel
                    s[channel].nIEN);
   961                        ;}
   962                        ;
   963                        ;unsigned char ide_read(unsigned char channel, uns
  Thu Dec  3 2020 22:25                                                Page 21


                    igned char reg)
   964                        ;{
   965                        ;   unsigned char result;
   966                        ;   if (reg > 0x07 && reg < 0x0C)
   967                        ;      ide_write(channel, ATA_REG_CONTROL, 0x80 | 
                    channels[channel].nIEN);
   968                        ;   if (reg < 0x08)
   969                        ;      result = inb(channels[channel].base + reg -
                     0x00);
   970                        ;   else if (reg < 0x0C)
   971                        ;      result = inb(channels[channel].base  + reg 
                    - 0x06);
   972                        ;   else if (reg < 0x0E)
   973                        ;      result = inb(channels[channel].ctrl  + reg 
                    - 0x0A);
   974                        ;   else if (reg < 0x16)
   975                        ;      result = inb(channels[channel].bmide + reg 
                    - 0x0E);
   976                        ;   if (reg > 0x07 && reg < 0x0C)
   977                        ;      ide_write(channel, ATA_REG_CONTROL, channel
                    s[channel].nIEN);
   978                        ;   return result;
   979                        ;}
   980                        ;
   981                        ;void ide_read_buffer(unsigned char channel, unsig
                    ned char reg, unsigned int buffer,unsigned int quads)
   982                        ;{
   983                        ;    if (reg > 0x07 && reg < 0x0C)
   984                        ;      ide_write(channel, ATA_REG_CONTROL, 0x80 | 
                    channels[channel].nIEN);
   985                        ;  // asm("pushw %es; movw %ds, %ax; movw %ax, %es
                    ");
   986                        ;   if (reg < 0x08)
   987                        ;      insl(channels[channel].base  + reg - 0x00, 
                    buffer, quads);
   988                        ;   else if (reg < 0x0C)
   989                        ;      insl(channels[channel].base  + reg - 0x06, 
                    buffer, quads);
   990                        ;   else if (reg < 0x0E)
   991                        ;      insl(channels[channel].ctrl  + reg - 0x0A, 
                    buffer, quads);
   992                        ;   else if (reg < 0x16)
   993                        ;      insl(channels[channel].bmide + reg - 0x0E, 
                    buffer, quads);
   994                        ;   //asm("popw %es;");
   995                        ;   if (reg > 0x07 && reg < 0x0C)
   996                        ;      ide_write(channel, ATA_REG_CONTROL, channel
                    s[channel].nIEN);
   997                        ;}
   998                        ;
   999                        ;void ide_initialize(unsigned int BAR0, unsigned i
                    nt BAR1, unsigned int BAR2, unsigned int BAR3,unsigned int B
                    AR4)
  1000                        ;{
  1001                        ;	UCHAR i;
  1002                        ;    int j, k, count = 0;
  1003                        ;
  1004                        ;   // 1- Detect I/O Ports which interface IDE Con
  Thu Dec  3 2020 22:25                                                Page 22


                    troller:
  1005                        ;   channels[ATA_PRIMARY  ].base  = (BAR0 & 0xFFFF
                    FFFC) + 0x1F0 * (!BAR0);
  1006                        ;   channels[ATA_PRIMARY  ].ctrl  = (BAR1 & 0xFFFF
                    FFFC) + 0x3F6 * (!BAR1);
  1007                        ;   channels[ATA_SECONDARY].base  = (BAR2 & 0xFFFF
                    FFFC) + 0x170 * (!BAR2);
  1008                        ;   channels[ATA_SECONDARY].ctrl  = (BAR3 & 0xFFFF
                    FFFC) + 0x376 * (!BAR3);
  1009                        ;   channels[ATA_PRIMARY  ].bmide = (BAR4 & 0xFFFF
                    FFFC) + 0; // Bus Master IDE
  1010                        ;   channels[ATA_SECONDARY].bmide = (BAR4 & 0xFFFF
                    FFFC) + 8; // Bus Master IDE
  1011                        ;
  1012                        ;   ide_write(ATA_PRIMARY  , ATA_REG_CONTROL, 2);
  1013                        ;   ide_write(ATA_SECONDARY, ATA_REG_CONTROL, 2);
  1014                        ;
  1015                        ;
  1016                        ;   // 3- Detect ATA-ATAPI Devices:
  1017                        ;   for (i = 0; i < 2; i++)
  1018                        ;      for (j = 0; j < 2; j++) {
  1019                        ;
  1020                        ;         unsigned char err = 0, type = IDE_ATA, s
                    tatus;
  1021                        ;         ide_devices[count].Reserved = 0; // Assu
                    ming that no drive here.
  1022                        ;
  1023                        ;         // (I) Select Drive:
  1024                        ;         ide_write(i, ATA_REG_HDDEVSEL, 0xA0 | (j
                     << 4)); // Select Drive.
  1025                        ;         sleep(1); // Wait 1ms for drive select t
                    o work.
  1026                        ;
  1027                        ;         // (II) Send ATA Identify Command:
  1028                        ;         ide_write(i, ATA_REG_COMMAND, ATA_CMD_ID
                    ENTIFY);
  1029                        ;         sleep(1); // This function should be imp
                    lemented in your OS. which waits for 1 ms.
  1030                        ;                   // it is based on System Timer
                     Device Driver.
  1031                        ;
  1032                        ;         // (III) Polling:
  1033                        ;         if (ide_read(i, ATA_REG_STATUS) == 0) co
                    ntinue; // If Status = 0, No Device.
  1034                        ;
  1035                        ;         while(1) {
  1036                        ;            status = ide_read(i, ATA_REG_STATUS);
  1037                        ;            if ((status & ATA_SR_ERR)) {err = 1; 
                    break;} // If Err, Device is not ATA.
  1038                        ;            if (!(status & ATA_SR_BSY) && (status
                     & ATA_SR_DRQ)) break; // Everything is right.
  1039                        ;         }
  1040                        ;
  1041                        ;         // (IV) Probe for ATAPI Devices:
  1042                        ;
  1043                        ;         if (err != 0) {
  1044                        ;            unsigned char cl = ide_read(i, ATA_RE
                    G_LBA1);
  Thu Dec  3 2020 22:25                                                Page 23


  1045                        ;            unsigned char ch = ide_read(i, ATA_RE
                    G_LBA2);
  1046                        ;
  1047                        ;            if (cl == 0x14 && ch ==0xEB)
  1048                        ;               type = IDE_ATAPI;
  1049                        ;            else if (cl == 0x69 && ch == 0x96)
  1050                        ;               type = IDE_ATAPI;
  1051                        ;            else
  1052                        ;               continue; // Unknown Type (may not
                     be a device).
  1053                        ;
  1054                        ;            ide_write(i, ATA_REG_COMMAND, ATA_CMD
                    _IDENTIFY_PACKET);
  1055                        ;            sleep(1);
  1056                        ;         }
  1057                        ;
  1058                        ;         // (V) Read Identification Space of the 
                    Device:
  1059                        ;         ide_read_buffer(i, ATA_REG_DATA, (unsign
                    ed int) ide_buf, 128);
  1060                        ;
  1061                        ;         // (VI) Read Device Parameters:
  1062                        ;         ide_devices[count].Reserved     = 1;
  1063                        ;         ide_devices[count].Type         = type;
  1064                        ;         ide_devices[count].Channel      = i;
  1065                        ;         ide_devices[count].Drive        = j;
  1066                        ;         ide_devices[count].Signature    = *((uns
                    igned short *)(ide_buf + ATA_IDENT_DEVICETYPE));
  1067                        ;         ide_devices[count].Capabilities = *((uns
                    igned short *)(ide_buf + ATA_IDENT_CAPABILITIES));
  1068                        ;         ide_devices[count].CommandSets  = *((uns
                    igned int *)(ide_buf + ATA_IDENT_COMMANDSETS));
  1069                        ;
  1070                        ;         // (VII) Get Size:
  1071                        ;         if (ide_devices[count].CommandSets & (1 
                    << 26))
  1072                        ;            // Device uses 48-Bit Addressing:
  1073                        ;            ide_devices[count].Size   = *((unsign
                    ed int *)(ide_buf + ATA_IDENT_MAX_LBA_EXT));
  1074                        ;         else
  1075                        ;            // Device uses CHS or 28-bit Addressi
                    ng:
  1076                        ;            ide_devices[count].Size   = *((unsign
                    ed int *)(ide_buf + ATA_IDENT_MAX_LBA));
  1077                        ;
  1078                        ;         // (VIII) String indicates model of devi
                    ce (like Western Digital HDD and SONY DVD-RW...):
  1079                        ;         for(k = 0; k < 40; k += 2) {
  1080                        ;            ide_devices[count].Model[k] = ide_buf
                    [ATA_IDENT_MODEL + k + 1];
  1081                        ;            ide_devices[count].Model[k + 1] = ide
                    _buf[ATA_IDENT_MODEL + k];}
  1082                        ;         ide_devices[count].Model[40] = 0; // Ter
                    minate String.
  1083                        ;
  1084                        ;         count++;
  1085                        ;      }
  1086                        ;
  Thu Dec  3 2020 22:25                                                Page 24


  1087                        ;   // 4- Print Summary:
  1088                        ;   for (i = 0; i < 4; i++)
  1089                        ;   {
  1090                        ;      if (ide_devices[i].Reserved == 1)
  1091                        ;      {
  1092                        ;
  1093                        ;      }
  1094                        ;   }
  1095                        ;}
  1096                        ;
  1097                        ;unsigned char ide_polling(unsigned char channel, 
                    unsigned int advanced_check)
  1098                        ;{
  1099                        ;	int i;
  1100                        ;   // (I) Delay 400 nanosecond for BSY to be set:
  1101                        ;   // -------------------------------------------
                    ------
  1102                        ;   for(i = 0; i < 4; i++)
  1103                        ;      ide_read(channel, ATA_REG_ALTSTATUS); // Re
                    ading the Alternate Status port wastes 100ns; loop four time
                    s.
  1104                        ;
  1105                        ;   // (II) Wait for BSY to be cleared:
  1106                        ;   // -------------------------------------------
                    ------
  1107                        ;   while (ide_read(channel, ATA_REG_STATUS) & ATA
                    _SR_BSY)
  1108                        ;      ; // Wait for BSY to be zero.
  1109                        ;
  1110                        ;   if (advanced_check) {
  1111                        ;      unsigned char state = ide_read(channel, ATA
                    _REG_STATUS); // Read Status Register.
  1112                        ;
  1113                        ;      // (III) Check For Errors:
  1114                        ;      // ----------------------------------------
                    ---------
  1115                        ;      if (state & ATA_SR_ERR)
  1116                        ;         return 2; // Error.
  1117                        ;
  1118                        ;      // (IV) Check If Device fault:
  1119                        ;      // ----------------------------------------
                    ---------
  1120                        ;      if (state & ATA_SR_DF)
  1121                        ;         return 1; // Device Fault.
  1122                        ;
  1123                        ;      // (V) Check DRQ:
  1124                        ;      // ----------------------------------------
                    ---------
  1125                        ;      // BSY = 0; DF = 0; ERR = 0 so we should ch
                    eck for DRQ now.
  1126                        ;      if ((state & ATA_SR_DRQ) == 0)
  1127                        ;         return 3; // DRQ should be set
  1128                        ;
  1129                        ;   }
  1130                        ;
  1131                        ;   return 0; // No Error.
  1132                        ;
  1133                        ;}
  Thu Dec  3 2020 22:25                                                Page 25


  1134                        ;*/
  1135                        ;
  1136                        ;/*
  1137                        ;#define ATA_SR_BSY     0x80
  1138                        ;#define ATA_SR_DRDY    0x40
  1139                        ;#define ATA_SR_DF      0x20
  1140                        ;#define ATA_SR_DSC     0x10
  1141                        ;#define ATA_SR_DRQ     0x08
  1142                        ;#define ATA_SR_CORR    0x04
  1143                        ;#define ATA_SR_IDX     0x02
  1144                        ;#define ATA_SR_ERR     0x01
  1145                        ;
  1146                        ;#define FX_ATA_REG_DATA       ((LPCHAR)0xAFE830)
  1147                        ;#define FX_ATA_REG_ERROR      ((LPCHAR)0xAFE831)
  1148                        ;#define FX_ATA_REG_FEATURES   ((LPCHAR)0xAFE831)
  1149                        ;#define FX_ATA_REG_SECCOUNT0  ((LPCHAR)0xAFE832)
  1150                        ;#define FX_ATA_REG_LBA0       ((LPCHAR)0xAFE833)
  1151                        ;#define FX_ATA_REG_LBA1       ((LPCHAR)0xAFE834)
  1152                        ;#define FX_ATA_REG_LBA2       ((LPCHAR)0xAFE835)
  1153                        ;#define FX_ATA_REG_HDDEVSEL   ((LPCHAR)0xAFE836)
  1154                        ;#define FX_ATA_REG_HDDEVSEL   ((LPCHAR)0xAFE836)
  1155                        ;#define FX_ATA_REG_COMMAND    ((LPCHAR)0xAFE837)
  1156                        ;#define FX_ATA_REG_STATUS     ((LPCHAR)0xAFE837)
  1157                        ;#define FX_ATA_REG_SECCOUNT1  ((LPCHAR)0xAFE838)
  1158                        ;#define FX_ATA_REG_LBA3       ((LPCHAR)0xAFE839)
  1159                        ;
  1160                        ;*/
  1161                        ;
  1162                        ;void k_ide_isbusy(void)
  1163                        ;{
  1164                        	.line	417
  1165                        	.line	418
  1166                        	FXHDD
  1167                        	xdef	~~k_ide_isbusy
  1168                        	func
  1169                        	.function	418
  1170                        ~~k_ide_isbusy:
  1171                        	longa	on
  1172                        	longi	on
  1173 03:7FFF: 3B           	tsc
  1174 03:8000: 38           	sec
  1175 03:8001: E9 04 00     	sbc	#L2
  1176 03:8004: 1B           	tcs
  1177 03:8005: 0B           	phd
  1178 03:8006: 5B           	tcd
  1179                        	.block	418
  1180                        ;	INT timeout  = 128;
  1181                        ;	UCHAR sts    = ATA_SR_BSY;
  1182                        ;	UCHAR errsts = 0x00;
  1183                        ;
  1184                        ;	k_debug_string("k_ide_isbusy:enter\r\n");
  1185             00000000   timeout_1	set	0
  1186             00000002   sts_1	set	2
  1187             00000003   errsts_1	set	3
  1188                        	.sym	timeout,0,5,1,16
  1189                        	.sym	sts,2,14,1,8
  1190                        	.sym	errsts,3,14,1,8
  1191 03:8007: A9 80 00     	lda	#$80
  Thu Dec  3 2020 22:25                                                Page 26


  1192 03:800A: 85 01        	sta	<L3+timeout_1
  1193 03:800C: E2 20        	sep	#$20
  1194                        	longa	off
  1195 03:800E: A9 80        	lda	#$80
  1196 03:8010: 85 03        	sta	<L3+sts_1
  1197 03:8012: C2 20        	rep	#$20
  1198                        	longa	on
  1199 03:8014: E2 20        	sep	#$20
  1200                        	longa	off
  1201 03:8016: 64 04        	stz	<L3+errsts_1
  1202 03:8018: C2 20        	rep	#$20
  1203                        	longa	on
  1204                        	.line	423
  1205 03:801A: F4 xx xx     	pea	#^L1
  1206 03:801D: F4 xx xx     	pea	#<L1
  1207 03:8020: 22 xx xx xx  	jsl	~~k_debug_string
  1208                        ;
  1209                        ;	do
  1210                        	.line	425
  1211                        L10003:
  1212                        ;	{
  1213                        	.line	426
  1214                        ;		sts = FX_ATA_REG_STATUS[0];
  1215                        	.line	427
  1216 03:8024: E2 20        	sep	#$20
  1217                        	longa	off
  1218 03:8026: AF 37 E8 AF  	lda	>11528247
  1219 03:802A: 85 03        	sta	<L3+sts_1
  1220 03:802C: C2 20        	rep	#$20
  1221                        	longa	on
  1222                        ;		//k_debug_bits("k_ide_isbusy:",sts);
  1223                        ;		if(sts & ATA_SR_ERR)
  1224                        	.line	429
  1225                        ;		{
  1226 03:802E: E2 20        	sep	#$20
  1227                        	longa	off
  1228 03:8030: A5 03        	lda	<L3+sts_1
  1229 03:8032: 29 01        	and	#<$1
  1230 03:8034: C2 20        	rep	#$20
  1231                        	longa	on
  1232 03:8036: D0 03        	bne	L5
  1233 03:8038: 82 19 00     	brl	L10004
  1234                        L5:
  1235                        	.line	430
  1236                        ;			errsts = FX_ATA_REG_ERROR[0];
  1237                        	.line	431
  1238 03:803B: E2 20        	sep	#$20
  1239                        	longa	off
  1240 03:803D: AF 31 E8 AF  	lda	>11528241
  1241 03:8041: 85 04        	sta	<L3+errsts_1
  1242 03:8043: C2 20        	rep	#$20
  1243                        	longa	on
  1244                        ;			k_debug_bits("k_ide_busy:ERR:",e
                    rrsts);
  1245                        	.line	432
  1246 03:8045: D4 04        	pei	<L3+errsts_1
  1247 03:8047: F4 xx xx     	pea	#^L1+21
  1248 03:804A: F4 xx xx     	pea	#<L1+21
  Thu Dec  3 2020 22:25                                                Page 27


  1249 03:804D: 22 xx xx xx  	jsl	~~k_debug_bits
  1250                        ;			break;
  1251                        	.line	433
  1252 03:8051: 82 1F 00     	brl	L10002
  1253                        ;		}
  1254                        	.line	434
  1255                        ;		timeout--;
  1256                        L10004:
  1257                        	.line	435
  1258 03:8054: C6 01        	dec	<L3+timeout_1
  1259                        ;	}while((sts & ATA_SR_BSY) && timeout > 0);
  1260                        	.line	436
  1261                        L10001:
  1262 03:8056: E2 20        	sep	#$20
  1263                        	longa	off
  1264 03:8058: A5 03        	lda	<L3+sts_1
  1265 03:805A: 29 80        	and	#<$80
  1266 03:805C: C2 20        	rep	#$20
  1267                        	longa	on
  1268 03:805E: D0 03        	bne	L7
  1269 03:8060: 82 10 00     	brl	L6
  1270                        L7:
  1271 03:8063: 38           	sec
  1272 03:8064: A9 00 00     	lda	#$0
  1273 03:8067: E5 01        	sbc	<L3+timeout_1
  1274 03:8069: 70 03        	bvs	L8
  1275 03:806B: 49 00 80     	eor	#$8000
  1276                        L8:
  1277 03:806E: 30 03        	bmi	L9
  1278 03:8070: 82 B1 FF     	brl	L10003
  1279                        L9:
  1280                        L6:
  1281                        L10002:
  1282                        ;	k_debug_bits("k_ide_isbusy:",sts);
  1283                        	.line	437
  1284 03:8073: D4 03        	pei	<L3+sts_1
  1285 03:8075: F4 xx xx     	pea	#^L1+37
  1286 03:8078: F4 xx xx     	pea	#<L1+37
  1287 03:807B: 22 xx xx xx  	jsl	~~k_debug_bits
  1288                        ;	k_debug_string("k_ide_isbusy:exit\r\n");
  1289                        	.line	438
  1290 03:807F: F4 xx xx     	pea	#^L1+51
  1291 03:8082: F4 xx xx     	pea	#<L1+51
  1292 03:8085: 22 xx xx xx  	jsl	~~k_debug_string
  1293                        ;
  1294                        ;	return;
  1295                        	.line	440
  1296                        L10:
  1297 03:8089: 2B           	pld
  1298 03:808A: 3B           	tsc
  1299 03:808B: 18           	clc
  1300 03:808C: 69 04 00     	adc	#L2
  1301 03:808F: 1B           	tcs
  1302 03:8090: 6B           	rtl
  1303                        ;}
  1304                        	.line	441
  1305                        	.endblock	441
  1306             00000004   L2	equ	4
  Thu Dec  3 2020 22:25                                                Page 28


  1307             00000001   L3	equ	1
  1308 03:8091:              	ends
  1309                        	efunc
  1310                        	.endfunc	441,1,4
  1311                        	.line	441
  1312                        	data
  1313                        L1:
  1314 00:0026: 6B 5F 69 64  	db	$6B,$5F,$69,$64,$65,$5F,$69,$73,$62,$75,
                    $73,$79,$3A,$65,$6E
       00:002A: 65 5F 69 73 
       00:002E: 62 75 73 79 
       00:0032: 3A 65 6E 
  1315 00:0035: 74 65 72 0D  	db	$74,$65,$72,$0D,$0A,$00,$6B,$5F,$69,$64,
                    $65,$5F,$62,$75,$73
       00:0039: 0A 00 6B 5F 
       00:003D: 69 64 65 5F 
       00:0041: 62 75 73 
  1316 00:0044: 79 3A 45 52  	db	$79,$3A,$45,$52,$52,$3A,$00,$6B,$5F,$69,
                    $64,$65,$5F,$69,$73
       00:0048: 52 3A 00 6B 
       00:004C: 5F 69 64 65 
       00:0050: 5F 69 73 
  1317 00:0053: 62 75 73 79  	db	$62,$75,$73,$79,$3A,$00,$6B,$5F,$69,$64,
                    $65,$5F,$69,$73,$62
       00:0057: 3A 00 6B 5F 
       00:005B: 69 64 65 5F 
       00:005F: 69 73 62 
  1318 00:0062: 75 73 79 3A  	db	$75,$73,$79,$3A,$65,$78,$69,$74,$0D,$0A,
                    $00
       00:0066: 65 78 69 74 
       00:006A: 0D 0A 00 
  1319 00:006D:              	ends
  1320                        ;
  1321                        ;
  1322                        ;void k_ide_isready(void)
  1323                        ;{
  1324                        	.line	444
  1325                        	.line	445
  1326                        	FXHDD
  1327                        	xdef	~~k_ide_isready
  1328                        	func
  1329                        	.function	445
  1330                        ~~k_ide_isready:
  1331                        	longa	on
  1332                        	longi	on
  1333 03:8091: 3B           	tsc
  1334 03:8092: 38           	sec
  1335 03:8093: E9 04 00     	sbc	#L12
  1336 03:8096: 1B           	tcs
  1337 03:8097: 0B           	phd
  1338 03:8098: 5B           	tcd
  1339                        	.block	445
  1340                        ;	INT timeout  = 128;
  1341                        ;	UCHAR sts    = ATA_SR_DRDY;
  1342                        ;	UCHAR errsts = 0x00;
  1343                        ;
  1344                        ;	//k_debug_string("k_ide_isready:enter\r\n");
  1345                        ;
  Thu Dec  3 2020 22:25                                                Page 29


  1346                        ;	do
  1347             00000000   timeout_1	set	0
  1348             00000002   sts_1	set	2
  1349             00000003   errsts_1	set	3
  1350                        	.sym	timeout,0,5,1,16
  1351                        	.sym	sts,2,14,1,8
  1352                        	.sym	errsts,3,14,1,8
  1353 03:8099: A9 80 00     	lda	#$80
  1354 03:809C: 85 01        	sta	<L13+timeout_1
  1355 03:809E: E2 20        	sep	#$20
  1356                        	longa	off
  1357 03:80A0: A9 40        	lda	#$40
  1358 03:80A2: 85 03        	sta	<L13+sts_1
  1359 03:80A4: C2 20        	rep	#$20
  1360                        	longa	on
  1361 03:80A6: E2 20        	sep	#$20
  1362                        	longa	off
  1363 03:80A8: 64 04        	stz	<L13+errsts_1
  1364 03:80AA: C2 20        	rep	#$20
  1365                        	longa	on
  1366                        	.line	452
  1367                        L10007:
  1368                        ;	{
  1369                        	.line	453
  1370                        ;		sts = FX_ATA_REG_STATUS[0];
  1371                        	.line	454
  1372 03:80AC: E2 20        	sep	#$20
  1373                        	longa	off
  1374 03:80AE: AF 37 E8 AF  	lda	>11528247
  1375 03:80B2: 85 03        	sta	<L13+sts_1
  1376 03:80B4: C2 20        	rep	#$20
  1377                        	longa	on
  1378                        ;
  1379                        ;		if(sts & ATA_SR_BSY)
  1380                        	.line	456
  1381                        ;			k_ide_isbusy();
  1382 03:80B6: E2 20        	sep	#$20
  1383                        	longa	off
  1384 03:80B8: A5 03        	lda	<L13+sts_1
  1385 03:80BA: 29 80        	and	#<$80
  1386 03:80BC: C2 20        	rep	#$20
  1387                        	longa	on
  1388 03:80BE: D0 03        	bne	L15
  1389 03:80C0: 82 04 00     	brl	L10008
  1390                        L15:
  1391                        	.line	457
  1392 03:80C3: 22 FF 7F 03  	jsl	~~k_ide_isbusy
  1393                        ;
  1394                        ;		//k_debug_bits("k_ide_isready:",sts);
  1395                        ;		//k_debug_hex("k_ide_isready:set:",(sts 
                    & ATA_SR_DRDY));
  1396                        ;		if((sts & ATA_SR_ERR) && (((sts & ATA_SR
                    _BSY) == 0) && ((sts & ATA_SR_BSY) == 0)  ))
  1397                        L10008:
  1398                        	.line	461
  1399                        ;		{
  1400 03:80C7: E2 20        	sep	#$20
  1401                        	longa	off
  Thu Dec  3 2020 22:25                                                Page 30


  1402 03:80C9: A5 03        	lda	<L13+sts_1
  1403 03:80CB: 29 01        	and	#<$1
  1404 03:80CD: C2 20        	rep	#$20
  1405                        	longa	on
  1406 03:80CF: D0 03        	bne	L16
  1407 03:80D1: 82 33 00     	brl	L10009
  1408                        L16:
  1409 03:80D4: E2 20        	sep	#$20
  1410                        	longa	off
  1411 03:80D6: A5 03        	lda	<L13+sts_1
  1412 03:80D8: 29 80        	and	#<$80
  1413 03:80DA: C2 20        	rep	#$20
  1414                        	longa	on
  1415 03:80DC: F0 03        	beq	L17
  1416 03:80DE: 82 26 00     	brl	L10009
  1417                        L17:
  1418 03:80E1: E2 20        	sep	#$20
  1419                        	longa	off
  1420 03:80E3: A5 03        	lda	<L13+sts_1
  1421 03:80E5: 29 80        	and	#<$80
  1422 03:80E7: C2 20        	rep	#$20
  1423                        	longa	on
  1424 03:80E9: F0 03        	beq	L18
  1425 03:80EB: 82 19 00     	brl	L10009
  1426                        L18:
  1427                        	.line	462
  1428                        ;			errsts = FX_ATA_REG_ERROR[0];
  1429                        	.line	463
  1430 03:80EE: E2 20        	sep	#$20
  1431                        	longa	off
  1432 03:80F0: AF 31 E8 AF  	lda	>11528241
  1433 03:80F4: 85 04        	sta	<L13+errsts_1
  1434 03:80F6: C2 20        	rep	#$20
  1435                        	longa	on
  1436                        ;			k_debug_bits("k_ide_isready:ERR:
                    ",errsts);
  1437                        	.line	464
  1438 03:80F8: D4 04        	pei	<L13+errsts_1
  1439 03:80FA: F4 xx xx     	pea	#^L11
  1440 03:80FD: F4 xx xx     	pea	#<L11
  1441 03:8100: 22 xx xx xx  	jsl	~~k_debug_bits
  1442                        ;			break;
  1443                        	.line	465
  1444 03:8104: 82 16 00     	brl	L10006
  1445                        ;		}
  1446                        	.line	466
  1447                        ;		timeout--;
  1448                        L10009:
  1449                        	.line	467
  1450 03:8107: C6 01        	dec	<L13+timeout_1
  1451                        ;		if(timeout < 0)
  1452                        	.line	468
  1453                        ;			break;
  1454 03:8109: A5 01        	lda	<L13+timeout_1
  1455 03:810B: 10 03        	bpl	L19
  1456 03:810D: 82 0D 00     	brl	L10006
  1457                        L19:
  1458                        ;	}
  Thu Dec  3 2020 22:25                                                Page 31


  1459                        	.line	470
  1460                        ;	while(!(sts & ATA_SR_DRDY));
  1461                        L10005:
  1462 03:8110: E2 20        	sep	#$20
  1463                        	longa	off
  1464 03:8112: A5 03        	lda	<L13+sts_1
  1465 03:8114: 29 40        	and	#<$40
  1466 03:8116: C2 20        	rep	#$20
  1467                        	longa	on
  1468 03:8118: D0 03        	bne	L20
  1469 03:811A: 82 8F FF     	brl	L10007
  1470                        L20:
  1471                        L10006:
  1472                        ;	//k_debug_bits("k_ide_isready:",sts);
  1473                        ;	//k_debug_string("k_ide_isready:exit\r\n");
  1474                        ;
  1475                        ;	return;
  1476                        	.line	475
  1477                        L21:
  1478 03:811D: 2B           	pld
  1479 03:811E: 3B           	tsc
  1480 03:811F: 18           	clc
  1481 03:8120: 69 04 00     	adc	#L12
  1482 03:8123: 1B           	tcs
  1483 03:8124: 6B           	rtl
  1484                        ;}
  1485                        	.line	476
  1486                        	.endblock	476
  1487             00000004   L12	equ	4
  1488             00000001   L13	equ	1
  1489 03:8125:              	ends
  1490                        	efunc
  1491                        	.endfunc	476,1,4
  1492                        	.line	476
  1493                        	data
  1494                        L11:
  1495 00:006D: 6B 5F 69 64  	db	$6B,$5F,$69,$64,$65,$5F,$69,$73,$72,$65,
                    $61,$64,$79,$3A,$45
       00:0071: 65 5F 69 73 
       00:0075: 72 65 61 64 
       00:0079: 79 3A 45 
  1496 00:007C: 52 52 3A 00  	db	$52,$52,$3A,$00
  1497 00:0080:              	ends
  1498                        ;
  1499                        ;void k_ide_isdrq(void)
  1500                        ;{
  1501                        	.line	478
  1502                        	.line	479
  1503                        	FXHDD
  1504                        	xdef	~~k_ide_isdrq
  1505                        	func
  1506                        	.function	479
  1507                        ~~k_ide_isdrq:
  1508                        	longa	on
  1509                        	longi	on
  1510 03:8125: 3B           	tsc
  1511 03:8126: 38           	sec
  1512 03:8127: E9 08 00     	sbc	#L23
  Thu Dec  3 2020 22:25                                                Page 32


  1513 03:812A: 1B           	tcs
  1514 03:812B: 0B           	phd
  1515 03:812C: 5B           	tcd
  1516                        	.block	479
  1517                        ;	INT timeout  = 128;
  1518                        ;	UCHAR sts    = ATA_SR_DRDY;
  1519                        ;	UCHAR errsts = 0x00;
  1520                        ;
  1521                        ;	k_debug_string("k_ide_isdrq:enter\r\n");
  1522             00000000   timeout_1	set	0
  1523             00000002   sts_1	set	2
  1524             00000003   errsts_1	set	3
  1525                        	.sym	timeout,0,5,1,16
  1526                        	.sym	sts,2,14,1,8
  1527                        	.sym	errsts,3,14,1,8
  1528 03:812D: A9 80 00     	lda	#$80
  1529 03:8130: 85 05        	sta	<L24+timeout_1
  1530 03:8132: E2 20        	sep	#$20
  1531                        	longa	off
  1532 03:8134: A9 40        	lda	#$40
  1533 03:8136: 85 07        	sta	<L24+sts_1
  1534 03:8138: C2 20        	rep	#$20
  1535                        	longa	on
  1536 03:813A: E2 20        	sep	#$20
  1537                        	longa	off
  1538 03:813C: 64 08        	stz	<L24+errsts_1
  1539 03:813E: C2 20        	rep	#$20
  1540                        	longa	on
  1541                        	.line	484
  1542 03:8140: F4 xx xx     	pea	#^L22
  1543 03:8143: F4 xx xx     	pea	#<L22
  1544 03:8146: 22 xx xx xx  	jsl	~~k_debug_string
  1545                        ;
  1546                        ;	do
  1547                        	.line	486
  1548                        L10012:
  1549                        ;	{
  1550                        	.line	487
  1551                        ;		sts = FX_ATA_REG_STATUS[0];
  1552                        	.line	488
  1553 03:814A: E2 20        	sep	#$20
  1554                        	longa	off
  1555 03:814C: AF 37 E8 AF  	lda	>11528247
  1556 03:8150: 85 07        	sta	<L24+sts_1
  1557 03:8152: C2 20        	rep	#$20
  1558                        	longa	on
  1559                        ;		//k_debug_bits("k_ide_isdrq:",sts);
  1560                        ;
  1561                        ;		//if(sts & ATA_SR_BSY)
  1562                        ;		//	k_ide_isbusy();
  1563                        ;
  1564                        ;		if(sts & ATA_SR_ERR)
  1565                        	.line	494
  1566                        ;		{
  1567 03:8154: E2 20        	sep	#$20
  1568                        	longa	off
  1569 03:8156: A5 07        	lda	<L24+sts_1
  1570 03:8158: 29 01        	and	#<$1
  Thu Dec  3 2020 22:25                                                Page 33


  1571 03:815A: C2 20        	rep	#$20
  1572                        	longa	on
  1573 03:815C: D0 03        	bne	L26
  1574 03:815E: 82 19 00     	brl	L10013
  1575                        L26:
  1576                        	.line	495
  1577                        ;			errsts = FX_ATA_REG_ERROR[0];
  1578                        	.line	496
  1579 03:8161: E2 20        	sep	#$20
  1580                        	longa	off
  1581 03:8163: AF 31 E8 AF  	lda	>11528241
  1582 03:8167: 85 08        	sta	<L24+errsts_1
  1583 03:8169: C2 20        	rep	#$20
  1584                        	longa	on
  1585                        ;			k_debug_bits("k_ide_isdrq:ERR:",
                    errsts);
  1586                        	.line	497
  1587 03:816B: D4 08        	pei	<L24+errsts_1
  1588 03:816D: F4 xx xx     	pea	#^L22+20
  1589 03:8170: F4 xx xx     	pea	#<L22+20
  1590 03:8173: 22 xx xx xx  	jsl	~~k_debug_bits
  1591                        ;			break;
  1592                        	.line	498
  1593 03:8177: 82 13 00     	brl	L10011
  1594                        ;		}
  1595                        	.line	499
  1596                        ;		timeout--;
  1597                        L10013:
  1598                        	.line	500
  1599 03:817A: C6 05        	dec	<L24+timeout_1
  1600                        ;	}while((sts & ATA_SR_DRQ) != ATA_SR_DRQ);
  1601                        	.line	501
  1602                        L10010:
  1603 03:817C: A5 07        	lda	<L24+sts_1
  1604 03:817E: 29 08 00     	and	#<$8
  1605 03:8181: 85 01        	sta	<R0
  1606 03:8183: A5 01        	lda	<R0
  1607 03:8185: C9 08 00     	cmp	#<$8
  1608 03:8188: F0 03        	beq	L27
  1609 03:818A: 82 BD FF     	brl	L10012
  1610                        L27:
  1611                        L10011:
  1612                        ;	k_debug_bits("k_ide_isdrq:",sts);
  1613                        	.line	502
  1614 03:818D: D4 07        	pei	<L24+sts_1
  1615 03:818F: F4 xx xx     	pea	#^L22+37
  1616 03:8192: F4 xx xx     	pea	#<L22+37
  1617 03:8195: 22 xx xx xx  	jsl	~~k_debug_bits
  1618                        ;	k_debug_string("k_ide_isdrq:exit\r\n");
  1619                        	.line	503
  1620 03:8199: F4 xx xx     	pea	#^L22+50
  1621 03:819C: F4 xx xx     	pea	#<L22+50
  1622 03:819F: 22 xx xx xx  	jsl	~~k_debug_string
  1623                        ;
  1624                        ;	return;
  1625                        	.line	505
  1626                        L28:
  1627 03:81A3: 2B           	pld
  Thu Dec  3 2020 22:25                                                Page 34


  1628 03:81A4: 3B           	tsc
  1629 03:81A5: 18           	clc
  1630 03:81A6: 69 08 00     	adc	#L23
  1631 03:81A9: 1B           	tcs
  1632 03:81AA: 6B           	rtl
  1633                        ;}
  1634                        	.line	506
  1635                        	.endblock	506
  1636             00000008   L23	equ	8
  1637             00000005   L24	equ	5
  1638 03:81AB:              	ends
  1639                        	efunc
  1640                        	.endfunc	506,5,8
  1641                        	.line	506
  1642                        	data
  1643                        L22:
  1644 00:0080: 6B 5F 69 64  	db	$6B,$5F,$69,$64,$65,$5F,$69,$73,$64,$72,
                    $71,$3A,$65,$6E,$74
       00:0084: 65 5F 69 73 
       00:0088: 64 72 71 3A 
       00:008C: 65 6E 74 
  1645 00:008F: 65 72 0D 0A  	db	$65,$72,$0D,$0A,$00,$6B,$5F,$69,$64,$65,
                    $5F,$69,$73,$64,$72
       00:0093: 00 6B 5F 69 
       00:0097: 64 65 5F 69 
       00:009B: 73 64 72 
  1646 00:009E: 71 3A 45 52  	db	$71,$3A,$45,$52,$52,$3A,$00,$6B,$5F,$69,
                    $64,$65,$5F,$69,$73
       00:00A2: 52 3A 00 6B 
       00:00A6: 5F 69 64 65 
       00:00AA: 5F 69 73 
  1647 00:00AD: 64 72 71 3A  	db	$64,$72,$71,$3A,$00,$6B,$5F,$69,$64,$65,
                    $5F,$69,$73,$64,$72
       00:00B1: 00 6B 5F 69 
       00:00B5: 64 65 5F 69 
       00:00B9: 73 64 72 
  1648 00:00BC: 71 3A 65 78  	db	$71,$3A,$65,$78,$69,$74,$0D,$0A,$00
       00:00C0: 69 74 0D 0A 
       00:00C4: 00 
  1649 00:00C5:              	ends
  1650                        ;
  1651                        ;
  1652                        ;void ide_select_drive(UCHAR bus, UCHAR i)
  1653                        ;{
  1654                        	.line	509
  1655                        	.line	510
  1656                        	FXHDD
  1657                        	xdef	~~ide_select_drive
  1658                        	func
  1659                        	.function	510
  1660                        ~~ide_select_drive:
  1661                        	longa	on
  1662                        	longi	on
  1663 03:81AB: 3B           	tsc
  1664 03:81AC: 38           	sec
  1665 03:81AD: E9 00 00     	sbc	#L30
  1666 03:81B0: 1B           	tcs
  1667 03:81B1: 0B           	phd
  Thu Dec  3 2020 22:25                                                Page 35


  1668 03:81B2: 5B           	tcd
  1669             00000004   bus_0	set	4
  1670             00000006   i_0	set	6
  1671                        	.block	510
  1672                        ;	k_debug_hex("ide_select_drive:",i);
  1673                        	.sym	bus,4,14,6,8
  1674                        	.sym	i,6,14,6,8
  1675                        	.line	511
  1676 03:81B3: D4 06        	pei	<L30+i_0
  1677 03:81B5: F4 xx xx     	pea	#^L29
  1678 03:81B8: F4 xx xx     	pea	#<L29
  1679 03:81BB: 22 xx xx xx  	jsl	~~k_debug_hex
  1680                        ;
  1681                        ;	if(bus == ATA_PRIMARY)
  1682                        	.line	513
  1683                        ;	{
  1684 03:81BF: A5 04        	lda	<L30+bus_0
  1685 03:81C1: 29 FF 00     	and	#$ff
  1686 03:81C4: F0 03        	beq	L33
  1687 03:81C6: 82 21 00     	brl	L10014
  1688                        L33:
  1689                        	.line	514
  1690                        ;		if(i == ATA_MASTER)
  1691                        	.line	515
  1692                        ;			ATA_PRIMARY_IO[ATA_REG_HDDEVSEL]
                     = 0xA0;
  1693 03:81C9: A5 06        	lda	<L30+i_0
  1694 03:81CB: 29 FF 00     	and	#$ff
  1695 03:81CE: F0 03        	beq	L34
  1696 03:81D0: 82 0D 00     	brl	L10015
  1697                        L34:
  1698                        	.line	516
  1699 03:81D3: E2 20        	sep	#$20
  1700                        	longa	off
  1701 03:81D5: A9 A0        	lda	#$a0
  1702 03:81D7: 8F 36 E8 AF  	sta	>11528246
  1703 03:81DB: C2 20        	rep	#$20
  1704                        	longa	on
  1705                        ;		else
  1706 03:81DD: 82 0A 00     	brl	L10016
  1707                        L10015:
  1708                        ;			ATA_PRIMARY_IO[ATA_REG_HDDEVSEL]
                     = 0xB0;
  1709                        	.line	518
  1710 03:81E0: E2 20        	sep	#$20
  1711                        	longa	off
  1712 03:81E2: A9 B0        	lda	#$b0
  1713 03:81E4: 8F 36 E8 AF  	sta	>11528246
  1714 03:81E8: C2 20        	rep	#$20
  1715                        	longa	on
  1716                        L10016:
  1717                        ;	}
  1718                        	.line	519
  1719                        ;
  1720                        ;
  1721                        ;	//k_delay(10);
  1722                        ;	k_ide_isbusy();
  1723                        L10014:
  Thu Dec  3 2020 22:25                                                Page 36


  1724                        	.line	523
  1725 03:81EA: 22 FF 7F 03  	jsl	~~k_ide_isbusy
  1726                        ;
  1727                        ;}
  1728                        	.line	525
  1729                        L35:
  1730 03:81EE: A5 02        	lda	<L30+2
  1731 03:81F0: 85 06        	sta	<L30+2+4
  1732 03:81F2: A5 01        	lda	<L30+1
  1733 03:81F4: 85 05        	sta	<L30+1+4
  1734 03:81F6: 2B           	pld
  1735 03:81F7: 3B           	tsc
  1736 03:81F8: 18           	clc
  1737 03:81F9: 69 04 00     	adc	#L30+4
  1738 03:81FC: 1B           	tcs
  1739 03:81FD: 6B           	rtl
  1740                        	.endblock	525
  1741             00000000   L30	equ	0
  1742             00000001   L31	equ	1
  1743 03:81FE:              	ends
  1744                        	efunc
  1745                        	.endfunc	525,1,0
  1746                        	.line	525
  1747                        	data
  1748                        L29:
  1749 00:00C5: 69 64 65 5F  	db	$69,$64,$65,$5F,$73,$65,$6C,$65,$63,$74,
                    $5F,$64,$72,$69,$76
       00:00C9: 73 65 6C 65 
       00:00CD: 63 74 5F 64 
       00:00D1: 72 69 76 
  1750 00:00D4: 65 3A 00     	db	$65,$3A,$00
  1751 00:00D7:              	ends
  1752                        ;
  1753                        ;void k_ide_diagnostic(void)
  1754                        ;{
  1755                        	.line	527
  1756                        	.line	528
  1757                        	FXHDD
  1758                        	xdef	~~k_ide_diagnostic
  1759                        	func
  1760                        	.function	528
  1761                        ~~k_ide_diagnostic:
  1762                        	longa	on
  1763                        	longi	on
  1764 03:81FE: 3B           	tsc
  1765 03:81FF: 38           	sec
  1766 03:8200: E9 01 00     	sbc	#L37
  1767 03:8203: 1B           	tcs
  1768 03:8204: 0B           	phd
  1769 03:8205: 5B           	tcd
  1770                        	.block	528
  1771                        ;	UCHAR sts = 0x00;
  1772                        ;
  1773                        ;	k_ide_isbusy();
  1774             00000000   sts_1	set	0
  1775                        	.sym	sts,0,14,1,8
  1776 03:8206: E2 20        	sep	#$20
  1777                        	longa	off
  Thu Dec  3 2020 22:25                                                Page 37


  1778 03:8208: 64 01        	stz	<L38+sts_1
  1779 03:820A: C2 20        	rep	#$20
  1780                        	longa	on
  1781                        	.line	531
  1782 03:820C: 22 FF 7F 03  	jsl	~~k_ide_isbusy
  1783                        ;
  1784                        ;	IDE_CMD_STAT[0] = 0x90;
  1785                        	.line	533
  1786 03:8210: E2 20        	sep	#$20
  1787                        	longa	off
  1788 03:8212: A9 90        	lda	#$90
  1789 03:8214: 8F 37 E8 AF  	sta	>11528247
  1790 03:8218: C2 20        	rep	#$20
  1791                        	longa	on
  1792                        ;
  1793                        ;	k_ide_isbusy();
  1794                        	.line	535
  1795 03:821A: 22 FF 7F 03  	jsl	~~k_ide_isbusy
  1796                        ;
  1797                        ;	sts = IDE_ERROR[0];
  1798                        	.line	537
  1799 03:821E: E2 20        	sep	#$20
  1800                        	longa	off
  1801 03:8220: AF 31 E8 AF  	lda	>11528241
  1802 03:8224: 85 01        	sta	<L38+sts_1
  1803 03:8226: C2 20        	rep	#$20
  1804                        	longa	on
  1805                        ;	k_debug_hex("k_ide_diagnostic:code:",sts);
  1806                        	.line	538
  1807 03:8228: D4 01        	pei	<L38+sts_1
  1808 03:822A: F4 xx xx     	pea	#^L36
  1809 03:822D: F4 xx xx     	pea	#<L36
  1810 03:8230: 22 xx xx xx  	jsl	~~k_debug_hex
  1811                        ;
  1812                        ;	//k_ide_isbusy();
  1813                        ;
  1814                        ;	return;
  1815                        	.line	542
  1816                        L40:
  1817 03:8234: 2B           	pld
  1818 03:8235: 3B           	tsc
  1819 03:8236: 18           	clc
  1820 03:8237: 69 01 00     	adc	#L37
  1821 03:823A: 1B           	tcs
  1822 03:823B: 6B           	rtl
  1823                        ;}
  1824                        	.line	543
  1825                        	.endblock	543
  1826             00000001   L37	equ	1
  1827             00000001   L38	equ	1
  1828 03:823C:              	ends
  1829                        	efunc
  1830                        	.endfunc	543,1,1
  1831                        	.line	543
  1832                        	data
  1833                        L36:
  1834 00:00D7: 6B 5F 69 64  	db	$6B,$5F,$69,$64,$65,$5F,$64,$69,$61,$67,
                    $6E,$6F,$73,$74,$69
  Thu Dec  3 2020 22:25                                                Page 38


       00:00DB: 65 5F 64 69 
       00:00DF: 61 67 6E 6F 
       00:00E3: 73 74 69 
  1835 00:00E6: 63 3A 63 6F  	db	$63,$3A,$63,$6F,$64,$65,$3A,$00
       00:00EA: 64 65 3A 00 
  1836 00:00EE:              	ends
  1837                        ;
  1838                        ;
  1839                        ;void k_ide_init(void)
  1840                        ;{
  1841                        	.line	546
  1842                        	.line	547
  1843                        	FXHDD
  1844                        	xdef	~~k_ide_init
  1845                        	func
  1846                        	.function	547
  1847                        ~~k_ide_init:
  1848                        	longa	on
  1849                        	longi	on
  1850 03:823C: 3B           	tsc
  1851 03:823D: 38           	sec
  1852 03:823E: E9 01 00     	sbc	#L42
  1853 03:8241: 1B           	tcs
  1854 03:8242: 0B           	phd
  1855 03:8243: 5B           	tcd
  1856                        	.block	547
  1857                        ;	UCHAR sts = 0x00;
  1858                        ;
  1859                        ;	//k_ide_diagnostic();
  1860                        ;
  1861                        ;	k_debug_hex("k_ide_init:",0);
  1862             00000000   sts_1	set	0
  1863                        	.sym	sts,0,14,1,8
  1864 03:8244: E2 20        	sep	#$20
  1865                        	longa	off
  1866 03:8246: 64 01        	stz	<L43+sts_1
  1867 03:8248: C2 20        	rep	#$20
  1868                        	longa	on
  1869                        	.line	552
  1870 03:824A: F4 00 00     	pea	#<$0
  1871 03:824D: F4 xx xx     	pea	#^L41
  1872 03:8250: F4 xx xx     	pea	#<L41
  1873 03:8253: 22 xx xx xx  	jsl	~~k_debug_hex
  1874                        ;	IDE_HEAD[0] = 0x06;
  1875                        	.line	553
  1876 03:8257: E2 20        	sep	#$20
  1877                        	longa	off
  1878 03:8259: A9 06        	lda	#$6
  1879 03:825B: 8F 36 E8 AF  	sta	>11528246
  1880 03:825F: C2 20        	rep	#$20
  1881                        	longa	on
  1882                        ;
  1883                        ;
  1884                        ;
  1885                        ;	//IDE_CMD_STAT[0] = 0x08;
  1886                        ;	k_ide_isbusy();
  1887                        	.line	558
  1888 03:8261: 22 FF 7F 03  	jsl	~~k_ide_isbusy
  Thu Dec  3 2020 22:25                                                Page 39


  1889                        ;
  1890                        ;	//k_ide_wait();
  1891                        ;	sts = IDE_CMD_STAT[0];
  1892                        	.line	561
  1893 03:8265: E2 20        	sep	#$20
  1894                        	longa	off
  1895 03:8267: AF 37 E8 AF  	lda	>11528247
  1896 03:826B: 85 01        	sta	<L43+sts_1
  1897 03:826D: C2 20        	rep	#$20
  1898                        	longa	on
  1899                        ;	k_debug_bits("k_ide_init:softreset:",sts);
  1900                        	.line	562
  1901 03:826F: D4 01        	pei	<L43+sts_1
  1902 03:8271: F4 xx xx     	pea	#^L41+12
  1903 03:8274: F4 xx xx     	pea	#<L41+12
  1904 03:8277: 22 xx xx xx  	jsl	~~k_debug_bits
  1905                        ;	k_ide_isbusy();
  1906                        	.line	563
  1907 03:827B: 22 FF 7F 03  	jsl	~~k_ide_isbusy
  1908                        ;	k_ide_isready();
  1909                        	.line	564
  1910 03:827F: 22 91 80 03  	jsl	~~k_ide_isready
  1911                        ;
  1912                        ;	//k_delay(10);
  1913                        ;	ide_select_drive(ATA_PRIMARY, ATA_MASTER);
  1914                        	.line	567
  1915 03:8283: F4 00 00     	pea	#<$0
  1916 03:8286: F4 00 00     	pea	#<$0
  1917 03:8289: 22 AB 81 03  	jsl	~~ide_select_drive
  1918                        ;
  1919                        ;	//k_debug_hex("k_ide_init:",sts);
  1920                        ;	//k_ide_isbusy();
  1921                        ;
  1922                        ;	IDE_CLDR_HI[0]  = 0;
  1923                        	.line	572
  1924 03:828D: E2 20        	sep	#$20
  1925                        	longa	off
  1926 03:828F: A9 00        	lda	#$0
  1927 03:8291: 8F 35 E8 AF  	sta	>11528245
  1928 03:8295: C2 20        	rep	#$20
  1929                        	longa	on
  1930                        ;	IDE_CLDR_LO[0]  = 0;
  1931                        	.line	573
  1932 03:8297: E2 20        	sep	#$20
  1933                        	longa	off
  1934 03:8299: A9 00        	lda	#$0
  1935 03:829B: 8F 34 E8 AF  	sta	>11528244
  1936 03:829F: C2 20        	rep	#$20
  1937                        	longa	on
  1938                        ;	IDE_SECT_CNT[0] = 0;
  1939                        	.line	574
  1940 03:82A1: E2 20        	sep	#$20
  1941                        	longa	off
  1942 03:82A3: A9 00        	lda	#$0
  1943 03:82A5: 8F 32 E8 AF  	sta	>11528242
  1944 03:82A9: C2 20        	rep	#$20
  1945                        	longa	on
  1946                        ;	IDE_SECT_SRT[0] = 0x01;
  Thu Dec  3 2020 22:25                                                Page 40


  1947                        	.line	575
  1948 03:82AB: E2 20        	sep	#$20
  1949                        	longa	off
  1950 03:82AD: A9 01        	lda	#$1
  1951 03:82AF: 8F 33 E8 AF  	sta	>11528243
  1952 03:82B3: C2 20        	rep	#$20
  1953                        	longa	on
  1954                        ;	IDE_HEAD[0]     = 0xA0;
  1955                        	.line	576
  1956 03:82B5: E2 20        	sep	#$20
  1957                        	longa	off
  1958 03:82B7: A9 A0        	lda	#$a0
  1959 03:82B9: 8F 36 E8 AF  	sta	>11528246
  1960 03:82BD: C2 20        	rep	#$20
  1961                        	longa	on
  1962                        ;
  1963                        ;	//IDE_CMD_STAT[0] = 0x91;
  1964                        ;
  1965                        ;	//sts = IDE_CMD_STAT[0];
  1966                        ;	//k_debug_hex("k_ide_init:",sts);
  1967                        ;
  1968                        ;	//k_ide_isbusy();
  1969                        ;	//k_ide_isready();
  1970                        ;	//k_ide_drive_ready_notbusy();
  1971                        ;
  1972                        ;	return;
  1973                        	.line	587
  1974                        L45:
  1975 03:82BF: 2B           	pld
  1976 03:82C0: 3B           	tsc
  1977 03:82C1: 18           	clc
  1978 03:82C2: 69 01 00     	adc	#L42
  1979 03:82C5: 1B           	tcs
  1980 03:82C6: 6B           	rtl
  1981                        ;}
  1982                        	.line	588
  1983                        	.endblock	588
  1984             00000001   L42	equ	1
  1985             00000001   L43	equ	1
  1986 03:82C7:              	ends
  1987                        	efunc
  1988                        	.endfunc	588,1,1
  1989                        	.line	588
  1990                        	data
  1991                        L41:
  1992 00:00EE: 6B 5F 69 64  	db	$6B,$5F,$69,$64,$65,$5F,$69,$6E,$69,$74,
                    $3A,$00,$6B,$5F,$69
       00:00F2: 65 5F 69 6E 
       00:00F6: 69 74 3A 00 
       00:00FA: 6B 5F 69 
  1993 00:00FD: 64 65 5F 69  	db	$64,$65,$5F,$69,$6E,$69,$74,$3A,$73,$6F,
                    $66,$74,$72,$65,$73
       00:0101: 6E 69 74 3A 
       00:0105: 73 6F 66 74 
       00:0109: 72 65 73 
  1994 00:010C: 65 74 3A 00  	db	$65,$74,$3A,$00
  1995 00:0110:              	ends
  1996                        ;
  Thu Dec  3 2020 22:25                                                Page 41


  1997                        ;
  1998                        ;LPCHAR k_ide_get_info(void)
  1999                        ;{
  2000                        	.line	591
  2001                        	.line	592
  2002                        	FXHDD
  2003                        	xdef	~~k_ide_get_info
  2004                        	func
  2005                        	.function	592
  2006                        ~~k_ide_get_info:
  2007                        	longa	on
  2008                        	longi	on
  2009 03:82C7: 3B           	tsc
  2010 03:82C8: 38           	sec
  2011 03:82C9: E9 2B 00     	sbc	#L47
  2012 03:82CC: 1B           	tcs
  2013 03:82CD: 0B           	phd
  2014 03:82CE: 5B           	tcd
  2015                        	.block	592
  2016                        ;	UINT index = 0;
  2017                        ;	UINT data = 0;
  2018                        ;
  2019                        ;	LPCHAR pdata = (LPCHAR)k_mem_allocate_heap(516);
  2020                        ;	UINT *ideInfo = (UINT*)(&pdata[0]);
  2021                        ;
  2022                        ;	UCHAR sts = 0x00;
  2023                        ;	UCHAR lo = 0;
  2024                        ;	UCHAR hi = 0;
  2025                        ;
  2026                        ;	k_debug_bits("k_ide_get_info:bits:",0);
  2027             00000000   index_1	set	0
  2028             00000002   data_1	set	2
  2029             00000004   pdata_1	set	4
  2030             00000008   ideInfo_1	set	8
  2031             0000000C   sts_1	set	12
  2032             0000000D   lo_1	set	13
  2033             0000000E   hi_1	set	14
  2034                        	.sym	index,0,16,1,16
  2035                        	.sym	data,2,16,1,16
  2036                        	.sym	pdata,4,142,1,32
  2037                        	.sym	ideInfo,8,144,1,32
  2038                        	.sym	sts,12,14,1,8
  2039                        	.sym	lo,13,14,1,8
  2040                        	.sym	hi,14,14,1,8
  2041 03:82CF: 64 1D        	stz	<L48+index_1
  2042 03:82D1: 64 1F        	stz	<L48+data_1
  2043 03:82D3: F4 04 02     	pea	#<$204
  2044 03:82D6: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  2045 03:82DA: 85 21        	sta	<L48+pdata_1
  2046 03:82DC: 86 23        	stx	<L48+pdata_1+2
  2047 03:82DE: A5 21        	lda	<L48+pdata_1
  2048 03:82E0: 85 25        	sta	<L48+ideInfo_1
  2049 03:82E2: A5 23        	lda	<L48+pdata_1+2
  2050 03:82E4: 85 27        	sta	<L48+ideInfo_1+2
  2051 03:82E6: E2 20        	sep	#$20
  2052                        	longa	off
  2053 03:82E8: 64 29        	stz	<L48+sts_1
  2054 03:82EA: C2 20        	rep	#$20
  Thu Dec  3 2020 22:25                                                Page 42


  2055                        	longa	on
  2056 03:82EC: E2 20        	sep	#$20
  2057                        	longa	off
  2058 03:82EE: 64 2A        	stz	<L48+lo_1
  2059 03:82F0: C2 20        	rep	#$20
  2060                        	longa	on
  2061 03:82F2: E2 20        	sep	#$20
  2062                        	longa	off
  2063 03:82F4: 64 2B        	stz	<L48+hi_1
  2064 03:82F6: C2 20        	rep	#$20
  2065                        	longa	on
  2066                        	.line	603
  2067 03:82F8: F4 00 00     	pea	#<$0
  2068 03:82FB: F4 xx xx     	pea	#^L46
  2069 03:82FE: F4 xx xx     	pea	#<L46
  2070 03:8301: 22 xx xx xx  	jsl	~~k_debug_bits
  2071                        ;
  2072                        ;	k_ide_isbusy();
  2073                        	.line	605
  2074 03:8305: 22 FF 7F 03  	jsl	~~k_ide_isbusy
  2075                        ;	k_ide_isready();
  2076                        	.line	606
  2077 03:8309: 22 91 80 03  	jsl	~~k_ide_isready
  2078                        ;
  2079                        ;	FX_ATA_REG_FEATURES[0] = 0;
  2080                        	.line	608
  2081 03:830D: E2 20        	sep	#$20
  2082                        	longa	off
  2083 03:830F: A9 00        	lda	#$0
  2084 03:8311: 8F 31 E8 AF  	sta	>11528241
  2085 03:8315: C2 20        	rep	#$20
  2086                        	longa	on
  2087                        ;	IDE_CLDR_HI[0]  = 0;
  2088                        	.line	609
  2089 03:8317: E2 20        	sep	#$20
  2090                        	longa	off
  2091 03:8319: A9 00        	lda	#$0
  2092 03:831B: 8F 35 E8 AF  	sta	>11528245
  2093 03:831F: C2 20        	rep	#$20
  2094                        	longa	on
  2095                        ;	IDE_CLDR_LO[0]  = 0;
  2096                        	.line	610
  2097 03:8321: E2 20        	sep	#$20
  2098                        	longa	off
  2099 03:8323: A9 00        	lda	#$0
  2100 03:8325: 8F 34 E8 AF  	sta	>11528244
  2101 03:8329: C2 20        	rep	#$20
  2102                        	longa	on
  2103                        ;	IDE_SECT_CNT[0] = 0;
  2104                        	.line	611
  2105 03:832B: E2 20        	sep	#$20
  2106                        	longa	off
  2107 03:832D: A9 00        	lda	#$0
  2108 03:832F: 8F 32 E8 AF  	sta	>11528242
  2109 03:8333: C2 20        	rep	#$20
  2110                        	longa	on
  2111                        ;	IDE_SECT_SRT[0] = 0;
  2112                        	.line	612
  Thu Dec  3 2020 22:25                                                Page 43


  2113 03:8335: E2 20        	sep	#$20
  2114                        	longa	off
  2115 03:8337: A9 00        	lda	#$0
  2116 03:8339: 8F 33 E8 AF  	sta	>11528243
  2117 03:833D: C2 20        	rep	#$20
  2118                        	longa	on
  2119                        ;	IDE_HEAD[0]     = 0xA0;
  2120                        	.line	613
  2121 03:833F: E2 20        	sep	#$20
  2122                        	longa	off
  2123 03:8341: A9 A0        	lda	#$a0
  2124 03:8343: 8F 36 E8 AF  	sta	>11528246
  2125 03:8347: C2 20        	rep	#$20
  2126                        	longa	on
  2127                        ;
  2128                        ;	FX_ATA_REG_COMMAND[0] = ATA_CMD_IDENTIFY;
  2129                        	.line	615
  2130 03:8349: E2 20        	sep	#$20
  2131                        	longa	off
  2132 03:834B: A9 EC        	lda	#$ec
  2133 03:834D: 8F 37 E8 AF  	sta	>11528247
  2134 03:8351: C2 20        	rep	#$20
  2135                        	longa	on
  2136                        ;
  2137                        ;	k_ide_isbusy();
  2138                        	.line	617
  2139 03:8353: 22 FF 7F 03  	jsl	~~k_ide_isbusy
  2140                        ;
  2141                        ;
  2142                        ;	k_ide_isready();
  2143                        	.line	620
  2144 03:8357: 22 91 80 03  	jsl	~~k_ide_isready
  2145                        ;
  2146                        ;
  2147                        ;	if(FX_ATA_REG_STATUS[0] & ATA_SR_DRQ)
  2148                        	.line	623
  2149                        ;	{
  2150 03:835B: E2 20        	sep	#$20
  2151                        	longa	off
  2152 03:835D: AF 37 E8 AF  	lda	>11528247
  2153 03:8361: 29 08        	and	#<$8
  2154 03:8363: C2 20        	rep	#$20
  2155                        	longa	on
  2156 03:8365: D0 03        	bne	L50
  2157 03:8367: 82 E8 00     	brl	L10017
  2158                        L50:
  2159                        	.line	624
  2160                        ;		k_debug_bits("k_ide_get_info:bits:",FX_A
                    TA_REG_STATUS[0]);
  2161                        	.line	625
  2162 03:836A: AF 37 E8 AF  	lda	>11528247
  2163 03:836E: 48           	pha
  2164 03:836F: F4 xx xx     	pea	#^L46+21
  2165 03:8372: F4 xx xx     	pea	#<L46+21
  2166 03:8375: 22 xx xx xx  	jsl	~~k_debug_bits
  2167                        ;
  2168                        ;		for(index = 0;index < 256;index++)
  2169                        	.line	627
  Thu Dec  3 2020 22:25                                                Page 44


  2170 03:8379: 64 1D        	stz	<L48+index_1
  2171                        L10020:
  2172                        ;		{
  2173                        	.line	628
  2174                        ;			ideInfo[index] = *((UINT*)&IDE_D
                    ATA_LO[0]);
  2175                        	.line	629
  2176 03:837B: A5 1D        	lda	<L48+index_1
  2177 03:837D: 85 05        	sta	<R1
  2178 03:837F: 64 07        	stz	<R1+2
  2179 03:8381: D4 07        	pei	<R1+2
  2180 03:8383: D4 05        	pei	<R1
  2181 03:8385: A9 01 00     	lda	#$1
  2182                        	xref	~~~lasl
  2183 03:8388: 22 xx xx xx  	jsl	~~~lasl
  2184 03:838C: 85 01        	sta	<R0
  2185 03:838E: 86 03        	stx	<R0+2
  2186 03:8390: 18           	clc
  2187 03:8391: A5 25        	lda	<L48+ideInfo_1
  2188 03:8393: 65 01        	adc	<R0
  2189 03:8395: 85 09        	sta	<R2
  2190 03:8397: A5 27        	lda	<L48+ideInfo_1+2
  2191 03:8399: 65 03        	adc	<R0+2
  2192 03:839B: 85 0B        	sta	<R2+2
  2193 03:839D: AF 38 E8 AF  	lda	>11528248
  2194 03:83A1: 87 09        	sta	[<R2]
  2195                        ;			ideInfo[index] = ((ideInfo[index
                    ]<<8)&0xff00)|((ideInfo[index]>>8)&0x00ff);
  2196                        	.line	630
  2197 03:83A3: A5 1D        	lda	<L48+index_1
  2198 03:83A5: 85 05        	sta	<R1
  2199 03:83A7: 64 07        	stz	<R1+2
  2200 03:83A9: D4 07        	pei	<R1+2
  2201 03:83AB: D4 05        	pei	<R1
  2202 03:83AD: A9 01 00     	lda	#$1
  2203                        	xref	~~~lasl
  2204 03:83B0: 22 xx xx xx  	jsl	~~~lasl
  2205 03:83B4: 85 01        	sta	<R0
  2206 03:83B6: 86 03        	stx	<R0+2
  2207 03:83B8: 18           	clc
  2208 03:83B9: A5 25        	lda	<L48+ideInfo_1
  2209 03:83BB: 65 01        	adc	<R0
  2210 03:83BD: 85 09        	sta	<R2
  2211 03:83BF: A5 27        	lda	<L48+ideInfo_1+2
  2212 03:83C1: 65 03        	adc	<R0+2
  2213 03:83C3: 85 0B        	sta	<R2+2
  2214 03:83C5: A5 1D        	lda	<L48+index_1
  2215 03:83C7: 85 0D        	sta	<R3
  2216 03:83C9: 64 0F        	stz	<R3+2
  2217 03:83CB: D4 0F        	pei	<R3+2
  2218 03:83CD: D4 0D        	pei	<R3
  2219 03:83CF: A9 01 00     	lda	#$1
  2220                        	xref	~~~lasl
  2221 03:83D2: 22 xx xx xx  	jsl	~~~lasl
  2222 03:83D6: 85 01        	sta	<R0
  2223 03:83D8: 86 03        	stx	<R0+2
  2224 03:83DA: 18           	clc
  2225 03:83DB: A5 25        	lda	<L48+ideInfo_1
  Thu Dec  3 2020 22:25                                                Page 45


  2226 03:83DD: 65 01        	adc	<R0
  2227 03:83DF: 85 11        	sta	<17
  2228 03:83E1: A5 27        	lda	<L48+ideInfo_1+2
  2229 03:83E3: 65 03        	adc	<R0+2
  2230 03:83E5: 85 13        	sta	<17+2
  2231 03:83E7: A7 11        	lda	[<17]
  2232 03:83E9: EB           	xba
  2233 03:83EA: 29 00 FF     	and	#$ff00
  2234 03:83ED: 29 00 FF     	and	#<$ff00
  2235 03:83F0: 85 01        	sta	<R0
  2236 03:83F2: A5 1D        	lda	<L48+index_1
  2237 03:83F4: 85 15        	sta	<21
  2238 03:83F6: 64 17        	stz	<21+2
  2239 03:83F8: D4 17        	pei	<21+2
  2240 03:83FA: D4 15        	pei	<21
  2241 03:83FC: A9 01 00     	lda	#$1
  2242                        	xref	~~~lasl
  2243 03:83FF: 22 xx xx xx  	jsl	~~~lasl
  2244 03:8403: 85 11        	sta	<17
  2245 03:8405: 86 13        	stx	<17+2
  2246 03:8407: 18           	clc
  2247 03:8408: A5 25        	lda	<L48+ideInfo_1
  2248 03:840A: 65 11        	adc	<17
  2249 03:840C: 85 19        	sta	<25
  2250 03:840E: A5 27        	lda	<L48+ideInfo_1+2
  2251 03:8410: 65 13        	adc	<17+2
  2252 03:8412: 85 1B        	sta	<25+2
  2253 03:8414: A7 19        	lda	[<25]
  2254 03:8416: EB           	xba
  2255 03:8417: 29 FF 00     	and	#$00ff
  2256 03:841A: 29 FF 00     	and	#<$ff
  2257 03:841D: 85 11        	sta	<17
  2258 03:841F: A5 11        	lda	<17
  2259 03:8421: 05 01        	ora	<R0
  2260 03:8423: 87 09        	sta	[<R2]
  2261                        ;			//k_debug_bits("k_ide_get_info:b
                    its:",FX_ATA_REG_STATUS[0]);
  2262                        ;			//if(!(FX_ATA_REG_STATUS[0] & AT
                    A_SR_DRQ))
  2263                        ;			//	k_ide_isdrq();
  2264                        ;		}
  2265                        	.line	634
  2266                        L10018:
  2267 03:8425: E6 1D        	inc	<L48+index_1
  2268 03:8427: A5 1D        	lda	<L48+index_1
  2269 03:8429: C9 00 01     	cmp	#<$100
  2270 03:842C: B0 03        	bcs	L51
  2271 03:842E: 82 4A FF     	brl	L10020
  2272                        L51:
  2273                        L10019:
  2274                        ;
  2275                        ;		FX_ATA_REG_HDDEVCTL[0] = 0x06;
  2276                        	.line	636
  2277 03:8431: E2 20        	sep	#$20
  2278                        	longa	off
  2279 03:8433: A9 06        	lda	#$6
  2280 03:8435: 8F 36 E8 AF  	sta	>11528246
  2281 03:8439: C2 20        	rep	#$20
  Thu Dec  3 2020 22:25                                                Page 46


  2282                        	longa	on
  2283                        ;
  2284                        ;
  2285                        ;		k_debug_byte_array("k_ide_get_info:DATA:
                    \r\n",(LPCHAR)pdata,512);
  2286                        	.line	639
  2287 03:843B: F4 00 00     	pea	#^$200
  2288 03:843E: F4 00 02     	pea	#<$200
  2289 03:8441: D4 23        	pei	<L48+pdata_1+2
  2290 03:8443: D4 21        	pei	<L48+pdata_1
  2291 03:8445: F4 xx xx     	pea	#^L46+42
  2292 03:8448: F4 xx xx     	pea	#<L46+42
  2293 03:844B: 22 xx xx xx  	jsl	~~k_debug_byte_array
  2294                        ;	}
  2295                        	.line	640
  2296                        ;	else
  2297 03:844F: 82 04 00     	brl	L10021
  2298                        L10017:
  2299                        ;	{
  2300                        	.line	642
  2301                        ;		pdata = NULL;
  2302                        	.line	643
  2303 03:8452: 64 21        	stz	<L48+pdata_1
  2304 03:8454: 64 23        	stz	<L48+pdata_1+2
  2305                        ;	}
  2306                        	.line	644
  2307                        L10021:
  2308                        ;	return (LPCHAR)pdata;
  2309                        	.line	645
  2310 03:8456: A6 23        	ldx	<L48+pdata_1+2
  2311 03:8458: A5 21        	lda	<L48+pdata_1
  2312                        L52:
  2313 03:845A: A8           	tay
  2314 03:845B: 2B           	pld
  2315 03:845C: 3B           	tsc
  2316 03:845D: 18           	clc
  2317 03:845E: 69 2B 00     	adc	#L47
  2318 03:8461: 1B           	tcs
  2319 03:8462: 98           	tya
  2320 03:8463: 6B           	rtl
  2321                        ;}
  2322                        	.line	646
  2323                        	.endblock	646
  2324             0000002B   L47	equ	43
  2325             0000001D   L48	equ	29
  2326 03:8464:              	ends
  2327                        	efunc
  2328                        	.endfunc	646,29,43
  2329                        	.line	646
  2330                        	data
  2331                        L46:
  2332 00:0110: 6B 5F 69 64  	db	$6B,$5F,$69,$64,$65,$5F,$67,$65,$74,$5F,
                    $69,$6E,$66,$6F,$3A
       00:0114: 65 5F 67 65 
       00:0118: 74 5F 69 6E 
       00:011C: 66 6F 3A 
  2333 00:011F: 62 69 74 73  	db	$62,$69,$74,$73,$3A,$00,$6B,$5F,$69,$64,
                    $65,$5F,$67,$65,$74
  Thu Dec  3 2020 22:25                                                Page 47


       00:0123: 3A 00 6B 5F 
       00:0127: 69 64 65 5F 
       00:012B: 67 65 74 
  2334 00:012E: 5F 69 6E 66  	db	$5F,$69,$6E,$66,$6F,$3A,$62,$69,$74,$73,
                    $3A,$00,$6B,$5F,$69
       00:0132: 6F 3A 62 69 
       00:0136: 74 73 3A 00 
       00:013A: 6B 5F 69 
  2335 00:013D: 64 65 5F 67  	db	$64,$65,$5F,$67,$65,$74,$5F,$69,$6E,$66,
                    $6F,$3A,$44,$41,$54
       00:0141: 65 74 5F 69 
       00:0145: 6E 66 6F 3A 
       00:0149: 44 41 54 
  2336 00:014C: 41 3A 0D 0A  	db	$41,$3A,$0D,$0A,$00
       00:0150: 00 
  2337 00:0151:              	ends
  2338                        ;
  2339                        ;LPCHAR k_ide_get_info_old(void)
  2340                        ;{
  2341                        	.line	648
  2342                        	.line	649
  2343                        	FXHDD
  2344                        	xdef	~~k_ide_get_info_old
  2345                        	func
  2346                        	.function	649
  2347                        ~~k_ide_get_info_old:
  2348                        	longa	on
  2349                        	longi	on
  2350 03:8464: 3B           	tsc
  2351 03:8465: 38           	sec
  2352 03:8466: E9 2B 00     	sbc	#L54
  2353 03:8469: 1B           	tcs
  2354 03:846A: 0B           	phd
  2355 03:846B: 5B           	tcd
  2356                        	.block	649
  2357                        ;	UINT index = 0;
  2358                        ;	UINT data = 0;
  2359                        ;	//LPCHAR ideInfo = k_mem_allocate_heap(512);
  2360                        ;
  2361                        ;	//UINT *ideInfo = (UINT*)k_mem_allocate_heap(512
                    );
  2362                        ;
  2363                        ;	LPCHAR pdata = (LPCHAR)k_mem_allocate_heap(516);
  2364                        ;	UINT *ideInfo = (UINT*)(&pdata[0]);
  2365                        ;
  2366                        ;	UCHAR sts = 0x00;
  2367                        ;	UCHAR lo = 0;
  2368                        ;	UCHAR hi = 0;
  2369                        ;
  2370                        ;	k_debug_bits("k_ide_get_info:bits:",0);
  2371             00000000   index_1	set	0
  2372             00000002   data_1	set	2
  2373             00000004   pdata_1	set	4
  2374             00000008   ideInfo_1	set	8
  2375             0000000C   sts_1	set	12
  2376             0000000D   lo_1	set	13
  2377             0000000E   hi_1	set	14
  2378                        	.sym	index,0,16,1,16
  Thu Dec  3 2020 22:25                                                Page 48


  2379                        	.sym	data,2,16,1,16
  2380                        	.sym	pdata,4,142,1,32
  2381                        	.sym	ideInfo,8,144,1,32
  2382                        	.sym	sts,12,14,1,8
  2383                        	.sym	lo,13,14,1,8
  2384                        	.sym	hi,14,14,1,8
  2385 03:846C: 64 1D        	stz	<L55+index_1
  2386 03:846E: 64 1F        	stz	<L55+data_1
  2387 03:8470: F4 04 02     	pea	#<$204
  2388 03:8473: 22 xx xx xx  	jsl	~~k_mem_allocate_heap
  2389 03:8477: 85 21        	sta	<L55+pdata_1
  2390 03:8479: 86 23        	stx	<L55+pdata_1+2
  2391 03:847B: A5 21        	lda	<L55+pdata_1
  2392 03:847D: 85 25        	sta	<L55+ideInfo_1
  2393 03:847F: A5 23        	lda	<L55+pdata_1+2
  2394 03:8481: 85 27        	sta	<L55+ideInfo_1+2
  2395 03:8483: E2 20        	sep	#$20
  2396                        	longa	off
  2397 03:8485: 64 29        	stz	<L55+sts_1
  2398 03:8487: C2 20        	rep	#$20
  2399                        	longa	on
  2400 03:8489: E2 20        	sep	#$20
  2401                        	longa	off
  2402 03:848B: 64 2A        	stz	<L55+lo_1
  2403 03:848D: C2 20        	rep	#$20
  2404                        	longa	on
  2405 03:848F: E2 20        	sep	#$20
  2406                        	longa	off
  2407 03:8491: 64 2B        	stz	<L55+hi_1
  2408 03:8493: C2 20        	rep	#$20
  2409                        	longa	on
  2410                        	.line	663
  2411 03:8495: F4 00 00     	pea	#<$0
  2412 03:8498: F4 xx xx     	pea	#^L53
  2413 03:849B: F4 xx xx     	pea	#<L53
  2414 03:849E: 22 xx xx xx  	jsl	~~k_debug_bits
  2415                        ;
  2416                        ;	k_ide_isbusy();
  2417                        	.line	665
  2418 03:84A2: 22 FF 7F 03  	jsl	~~k_ide_isbusy
  2419                        ;	k_ide_isready();
  2420                        	.line	666
  2421 03:84A6: 22 91 80 03  	jsl	~~k_ide_isready
  2422                        ;
  2423                        ;	//ide_select_drive(ATA_PRIMARY, ATA_MASTER);
  2424                        ;
  2425                        ;	FX_ATA_REG_FEATURES[0] = 0;
  2426                        	.line	670
  2427 03:84AA: E2 20        	sep	#$20
  2428                        	longa	off
  2429 03:84AC: A9 00        	lda	#$0
  2430 03:84AE: 8F 31 E8 AF  	sta	>11528241
  2431 03:84B2: C2 20        	rep	#$20
  2432                        	longa	on
  2433                        ;	IDE_CLDR_HI[0]  = 0;
  2434                        	.line	671
  2435 03:84B4: E2 20        	sep	#$20
  2436                        	longa	off
  Thu Dec  3 2020 22:25                                                Page 49


  2437 03:84B6: A9 00        	lda	#$0
  2438 03:84B8: 8F 35 E8 AF  	sta	>11528245
  2439 03:84BC: C2 20        	rep	#$20
  2440                        	longa	on
  2441                        ;	IDE_CLDR_LO[0]  = 0;
  2442                        	.line	672
  2443 03:84BE: E2 20        	sep	#$20
  2444                        	longa	off
  2445 03:84C0: A9 00        	lda	#$0
  2446 03:84C2: 8F 34 E8 AF  	sta	>11528244
  2447 03:84C6: C2 20        	rep	#$20
  2448                        	longa	on
  2449                        ;	IDE_SECT_CNT[0] = 0;
  2450                        	.line	673
  2451 03:84C8: E2 20        	sep	#$20
  2452                        	longa	off
  2453 03:84CA: A9 00        	lda	#$0
  2454 03:84CC: 8F 32 E8 AF  	sta	>11528242
  2455 03:84D0: C2 20        	rep	#$20
  2456                        	longa	on
  2457                        ;	IDE_SECT_SRT[0] = 0;
  2458                        	.line	674
  2459 03:84D2: E2 20        	sep	#$20
  2460                        	longa	off
  2461 03:84D4: A9 00        	lda	#$0
  2462 03:84D6: 8F 33 E8 AF  	sta	>11528243
  2463 03:84DA: C2 20        	rep	#$20
  2464                        	longa	on
  2465                        ;	IDE_HEAD[0]     = 0xA0;
  2466                        	.line	675
  2467 03:84DC: E2 20        	sep	#$20
  2468                        	longa	off
  2469 03:84DE: A9 A0        	lda	#$a0
  2470 03:84E0: 8F 36 E8 AF  	sta	>11528246
  2471 03:84E4: C2 20        	rep	#$20
  2472                        	longa	on
  2473                        ;
  2474                        ;	FX_ATA_REG_COMMAND[0] = ATA_CMD_IDENTIFY;
  2475                        	.line	677
  2476 03:84E6: E2 20        	sep	#$20
  2477                        	longa	off
  2478 03:84E8: A9 EC        	lda	#$ec
  2479 03:84EA: 8F 37 E8 AF  	sta	>11528247
  2480 03:84EE: C2 20        	rep	#$20
  2481                        	longa	on
  2482                        ;
  2483                        ;	//k_ide_wait();
  2484                        ;	k_ide_isbusy();
  2485                        	.line	680
  2486 03:84F0: 22 FF 7F 03  	jsl	~~k_ide_isbusy
  2487                        ;
  2488                        ;	//k_ide_wait();
  2489                        ;
  2490                        ;	//sts = IDE_CMD_STAT[0];
  2491                        ;	//k_debug_hex("k_ide_get_info:sts:initial:",sts)
                    ;
  2492                        ;
  2493                        ;	//k_debug_bits("k_ide_get_info:bits:",sts);
  Thu Dec  3 2020 22:25                                                Page 50


  2494                        ;
  2495                        ;	//k_ide_isbusy();
  2496                        ;	k_ide_isready();
  2497                        	.line	690
  2498 03:84F4: 22 91 80 03  	jsl	~~k_ide_isready
  2499                        ;	//k_ide_isdrq();
  2500                        ;
  2501                        ;	//k_debug_hex("k_ide_get_info:IDE_DATA:",IDE_DAT
                    A[0]);
  2502                        ;	/*
  2503                        ;	k_ide_read_sector(ide_sector);
  2504                        ;	if(ide_sector)
  2505                        ;	{
  2506                        ;		k_debug_byte_array("k_ide_get_info:DATA:
                    ",ide_sector,512);
  2507                        ;	}
  2508                        ;	*/
  2509                        ;
  2510                        ;	/*
  2511                        ;	if(sts & FX_ATA_REG_ALTSTATUS[0])
  2512                        ;	{
  2513                        ;		for(index = 0;index < 512;index+=2)
  2514                        ;		{
  2515                        ;			lo = IDE_DATA_LO[0];
  2516                        ;			hi = IDE_DATA_HI[0];
  2517                        ;			//k_debug_hex("k_ide_read_sector
                    :lo:",index);
  2518                        ;			//k_debug_hex("k_ide_read_sector
                    :hi:",index+1);
  2519                        ;			ideInfo[index] =   lo;
  2520                        ;			ideInfo[index+1] = hi;
  2521                        ;		}
  2522                        ;		k_debug_byte_array("k_ide_get_info:DATA:
                    \r\n",ideInfo,512);
  2523                        ;	}
  2524                        ;	else
  2525                        ;	{
  2526                        ;		ideInfo = NULL;
  2527                        ;	}
  2528                        ;	*/
  2529                        ;
  2530                        ;
  2531                        ;	if(FX_ATA_REG_STATUS[0] & ATA_SR_DRQ)
  2532                        	.line	723
  2533                        ;	{
  2534 03:84F8: E2 20        	sep	#$20
  2535                        	longa	off
  2536 03:84FA: AF 37 E8 AF  	lda	>11528247
  2537 03:84FE: 29 08        	and	#<$8
  2538 03:8500: C2 20        	rep	#$20
  2539                        	longa	on
  2540 03:8502: D0 03        	bne	L57
  2541 03:8504: 82 EC 00     	brl	L10022
  2542                        L57:
  2543                        	.line	724
  2544                        ;		k_debug_bits("k_ide_get_info:bits:",FX_A
                    TA_REG_STATUS[0]);
  2545                        	.line	725
  Thu Dec  3 2020 22:25                                                Page 51


  2546 03:8507: AF 37 E8 AF  	lda	>11528247
  2547 03:850B: 48           	pha
  2548 03:850C: F4 xx xx     	pea	#^L53+21
  2549 03:850F: F4 xx xx     	pea	#<L53+21
  2550 03:8512: 22 xx xx xx  	jsl	~~k_debug_bits
  2551                        ;
  2552                        ;		//lo = IDE_DATA_LO[0];
  2553                        ;		//hi = IDE_DATA_HI[0];
  2554                        ;
  2555                        ;		/*
  2556                        ;		lo = IDE_DATA[0];
  2557                        ;		hi = IDE_DATA[0];
  2558                        ;		k_debug_hex("LO:",lo);
  2559                        ;		k_debug_hex("HI:",hi);
  2560                        ;
  2561                        ;
  2562                        ;		pdata[0] = lo;//MAKEWORD(lo,hi);
  2563                        ;		pdata[1] = hi;//MAKEWORD(lo,hi);
  2564                        ;		*/
  2565                        ;		/*
  2566                        ;		lo = IDE_DATA[0];
  2567                        ;		hi = IDE_DATA[0];
  2568                        ;
  2569                        ;		k_debug_hex("LO:",lo);
  2570                        ;		k_debug_hex("HI:",hi);
  2571                        ;		*/
  2572                        ;
  2573                        ;		/*
  2574                        ;		for(index = 0;index < 256;index++)
  2575                        ;		{
  2576                        ;			//lo = IDE_DATA_LO[0];
  2577                        ;			//hi = IDE_DATA_HI[0];
  2578                        ;
  2579                        ;			ideInfo[index] = *((UINT*)&IDE_D
                    ATA_LO[0]);
  2580                        ;
  2581                        ;			ideInfo[index] = ((ideInfo[index
                    ]<<8)&0xff00)|((ideInfo[index]>>8)&0x00ff);
  2582                        ;
  2583                        ;			//k_debug_hex("k_ide_read_sector
                    :lo:",index);
  2584                        ;			//k_debug_hex("k_ide_read_sector
                    :hi:",index+1);
  2585                        ;			//ideInfo[index] =   lo;
  2586                        ;			//ideInfo[index+1] = hi;
  2587                        ;		}
  2588                        ;		*/
  2589                        ;
  2590                        ;		/*
  2591                        ;		for(index = 0;index < 512;index+=2)
  2592                        ;		{
  2593                        ;			pdata[index]   = IDE_DATA_HI[0];
  2594                        ;			pdata[index+1] = IDE_DATA_LO[0];
  2595                        ;			k_debug_bits("k_ide_get_info:bit
                    s:",FX_ATA_REG_STATUS[0]);
  2596                        ;		}
  2597                        ;		*/
  2598                        ;		for(index = 0;index < 256;index++)
  Thu Dec  3 2020 22:25                                                Page 52


  2599                        	.line	773
  2600 03:8516: 64 1D        	stz	<L55+index_1
  2601                        L10025:
  2602                        ;		{
  2603                        	.line	774
  2604                        ;			ideInfo[index] = *((UINT*)&IDE_D
                    ATA_LO[0]);
  2605                        	.line	775
  2606 03:8518: A5 1D        	lda	<L55+index_1
  2607 03:851A: 85 05        	sta	<R1
  2608 03:851C: 64 07        	stz	<R1+2
  2609 03:851E: D4 07        	pei	<R1+2
  2610 03:8520: D4 05        	pei	<R1
  2611 03:8522: A9 01 00     	lda	#$1
  2612                        	xref	~~~lasl
  2613 03:8525: 22 xx xx xx  	jsl	~~~lasl
  2614 03:8529: 85 01        	sta	<R0
  2615 03:852B: 86 03        	stx	<R0+2
  2616 03:852D: 18           	clc
  2617 03:852E: A5 25        	lda	<L55+ideInfo_1
  2618 03:8530: 65 01        	adc	<R0
  2619 03:8532: 85 09        	sta	<R2
  2620 03:8534: A5 27        	lda	<L55+ideInfo_1+2
  2621 03:8536: 65 03        	adc	<R0+2
  2622 03:8538: 85 0B        	sta	<R2+2
  2623 03:853A: AF 38 E8 AF  	lda	>11528248
  2624 03:853E: 87 09        	sta	[<R2]
  2625                        ;			ideInfo[index] = ((ideInfo[index
                    ]<<8)&0xff00)|((ideInfo[index]>>8)&0x00ff);
  2626                        	.line	776
  2627 03:8540: A5 1D        	lda	<L55+index_1
  2628 03:8542: 85 05        	sta	<R1
  2629 03:8544: 64 07        	stz	<R1+2
  2630 03:8546: D4 07        	pei	<R1+2
  2631 03:8548: D4 05        	pei	<R1
  2632 03:854A: A9 01 00     	lda	#$1
  2633                        	xref	~~~lasl
  2634 03:854D: 22 xx xx xx  	jsl	~~~lasl
  2635 03:8551: 85 01        	sta	<R0
  2636 03:8553: 86 03        	stx	<R0+2
  2637 03:8555: 18           	clc
  2638 03:8556: A5 25        	lda	<L55+ideInfo_1
  2639 03:8558: 65 01        	adc	<R0
  2640 03:855A: 85 09        	sta	<R2
  2641 03:855C: A5 27        	lda	<L55+ideInfo_1+2
  2642 03:855E: 65 03        	adc	<R0+2
  2643 03:8560: 85 0B        	sta	<R2+2
  2644 03:8562: A5 1D        	lda	<L55+index_1
  2645 03:8564: 85 0D        	sta	<R3
  2646 03:8566: 64 0F        	stz	<R3+2
  2647 03:8568: D4 0F        	pei	<R3+2
  2648 03:856A: D4 0D        	pei	<R3
  2649 03:856C: A9 01 00     	lda	#$1
  2650                        	xref	~~~lasl
  2651 03:856F: 22 xx xx xx  	jsl	~~~lasl
  2652 03:8573: 85 01        	sta	<R0
  2653 03:8575: 86 03        	stx	<R0+2
  2654 03:8577: 18           	clc
  Thu Dec  3 2020 22:25                                                Page 53


  2655 03:8578: A5 25        	lda	<L55+ideInfo_1
  2656 03:857A: 65 01        	adc	<R0
  2657 03:857C: 85 11        	sta	<17
  2658 03:857E: A5 27        	lda	<L55+ideInfo_1+2
  2659 03:8580: 65 03        	adc	<R0+2
  2660 03:8582: 85 13        	sta	<17+2
  2661 03:8584: A7 11        	lda	[<17]
  2662 03:8586: EB           	xba
  2663 03:8587: 29 00 FF     	and	#$ff00
  2664 03:858A: 29 00 FF     	and	#<$ff00
  2665 03:858D: 85 01        	sta	<R0
  2666 03:858F: A5 1D        	lda	<L55+index_1
  2667 03:8591: 85 15        	sta	<21
  2668 03:8593: 64 17        	stz	<21+2
  2669 03:8595: D4 17        	pei	<21+2
  2670 03:8597: D4 15        	pei	<21
  2671 03:8599: A9 01 00     	lda	#$1
  2672                        	xref	~~~lasl
  2673 03:859C: 22 xx xx xx  	jsl	~~~lasl
  2674 03:85A0: 85 11        	sta	<17
  2675 03:85A2: 86 13        	stx	<17+2
  2676 03:85A4: 18           	clc
  2677 03:85A5: A5 25        	lda	<L55+ideInfo_1
  2678 03:85A7: 65 11        	adc	<17
  2679 03:85A9: 85 19        	sta	<25
  2680 03:85AB: A5 27        	lda	<L55+ideInfo_1+2
  2681 03:85AD: 65 13        	adc	<17+2
  2682 03:85AF: 85 1B        	sta	<25+2
  2683 03:85B1: A7 19        	lda	[<25]
  2684 03:85B3: EB           	xba
  2685 03:85B4: 29 FF 00     	and	#$00ff
  2686 03:85B7: 29 FF 00     	and	#<$ff
  2687 03:85BA: 85 11        	sta	<17
  2688 03:85BC: A5 11        	lda	<17
  2689 03:85BE: 05 01        	ora	<R0
  2690 03:85C0: 87 09        	sta	[<R2]
  2691                        ;			//k_debug_bits("k_ide_get_info:b
                    its:",FX_ATA_REG_STATUS[0]);
  2692                        ;			//if(!(FX_ATA_REG_STATUS[0] & AT
                    A_SR_DRQ))
  2693                        ;			//	k_ide_isdrq();
  2694                        ;		}
  2695                        	.line	780
  2696                        L10023:
  2697 03:85C2: E6 1D        	inc	<L55+index_1
  2698 03:85C4: A5 1D        	lda	<L55+index_1
  2699 03:85C6: C9 00 01     	cmp	#<$100
  2700 03:85C9: B0 03        	bcs	L58
  2701 03:85CB: 82 4A FF     	brl	L10025
  2702                        L58:
  2703                        L10024:
  2704                        ;
  2705                        ;		/*
  2706                        ;		for(index = 0;index < 256;index++)
  2707                        ;		{
  2708                        ;			lo = IDE_DATA_LO[0];
  2709                        ;			hi = IDE_DATA_HI[0];
  2710                        ;
  Thu Dec  3 2020 22:25                                                Page 54


  2711                        ;			ideInfo[index] = MAKEWORD(lo,hi)
                    ;
  2712                        ;
  2713                        ;			//ideInfo[index] = ((ideInfo[ind
                    ex]<<8)&0xff00)|((ideInfo[index]>>8)&0x00ff);
  2714                        ;
  2715                        ;			//k_debug_hex("k_ide_read_sector
                    :lo:",index);
  2716                        ;			//k_debug_hex("k_ide_read_sector
                    :hi:",index+1);
  2717                        ;			//ideInfo[index] =   lo;
  2718                        ;			//ideInfo[index+1] = hi;
  2719                        ;		}
  2720                        ;		*/
  2721                        ;		FX_ATA_REG_HDDEVCTL[0] = 0x06;
  2722                        	.line	798
  2723 03:85CE: E2 20        	sep	#$20
  2724                        	longa	off
  2725 03:85D0: A9 06        	lda	#$6
  2726 03:85D2: 8F 36 E8 AF  	sta	>11528246
  2727 03:85D6: C2 20        	rep	#$20
  2728                        	longa	on
  2729                        ;		k_ide_wait();
  2730                        	.line	799
  2731 03:85D8: 22 05 86 03  	jsl	~~k_ide_wait
  2732                        ;
  2733                        ;		k_debug_byte_array("k_ide_get_info:DATA:
                    \r\n",(LPCHAR)pdata,512);
  2734                        	.line	801
  2735 03:85DC: F4 00 00     	pea	#^$200
  2736 03:85DF: F4 00 02     	pea	#<$200
  2737 03:85E2: D4 23        	pei	<L55+pdata_1+2
  2738 03:85E4: D4 21        	pei	<L55+pdata_1
  2739 03:85E6: F4 xx xx     	pea	#^L53+42
  2740 03:85E9: F4 xx xx     	pea	#<L53+42
  2741 03:85EC: 22 xx xx xx  	jsl	~~k_debug_byte_array
  2742                        ;	}
  2743                        	.line	802
  2744                        ;	else
  2745 03:85F0: 82 04 00     	brl	L10026
  2746                        L10022:
  2747                        ;	{
  2748                        	.line	804
  2749                        ;		pdata = NULL;
  2750                        	.line	805
  2751 03:85F3: 64 21        	stz	<L55+pdata_1
  2752 03:85F5: 64 23        	stz	<L55+pdata_1+2
  2753                        ;	}
  2754                        	.line	806
  2755                        L10026:
  2756                        ;	return (LPCHAR)pdata;
  2757                        	.line	807
  2758 03:85F7: A6 23        	ldx	<L55+pdata_1+2
  2759 03:85F9: A5 21        	lda	<L55+pdata_1
  2760                        L59:
  2761 03:85FB: A8           	tay
  2762 03:85FC: 2B           	pld
  2763 03:85FD: 3B           	tsc
  Thu Dec  3 2020 22:25                                                Page 55


  2764 03:85FE: 18           	clc
  2765 03:85FF: 69 2B 00     	adc	#L54
  2766 03:8602: 1B           	tcs
  2767 03:8603: 98           	tya
  2768 03:8604: 6B           	rtl
  2769                        ;}
  2770                        	.line	808
  2771                        	.endblock	808
  2772             0000002B   L54	equ	43
  2773             0000001D   L55	equ	29
  2774 03:8605:              	ends
  2775                        	efunc
  2776                        	.endfunc	808,29,43
  2777                        	.line	808
  2778                        	data
  2779                        L53:
  2780 00:0151: 6B 5F 69 64  	db	$6B,$5F,$69,$64,$65,$5F,$67,$65,$74,$5F,
                    $69,$6E,$66,$6F,$3A
       00:0155: 65 5F 67 65 
       00:0159: 74 5F 69 6E 
       00:015D: 66 6F 3A 
  2781 00:0160: 62 69 74 73  	db	$62,$69,$74,$73,$3A,$00,$6B,$5F,$69,$64,
                    $65,$5F,$67,$65,$74
       00:0164: 3A 00 6B 5F 
       00:0168: 69 64 65 5F 
       00:016C: 67 65 74 
  2782 00:016F: 5F 69 6E 66  	db	$5F,$69,$6E,$66,$6F,$3A,$62,$69,$74,$73,
                    $3A,$00,$6B,$5F,$69
       00:0173: 6F 3A 62 69 
       00:0177: 74 73 3A 00 
       00:017B: 6B 5F 69 
  2783 00:017E: 64 65 5F 67  	db	$64,$65,$5F,$67,$65,$74,$5F,$69,$6E,$66,
                    $6F,$3A,$44,$41,$54
       00:0182: 65 74 5F 69 
       00:0186: 6E 66 6F 3A 
       00:018A: 44 41 54 
  2784 00:018D: 41 3A 0D 0A  	db	$41,$3A,$0D,$0A,$00
       00:0191: 00 
  2785 00:0192:              	ends
  2786                        ;
  2787                        ;
  2788                        ;void k_ide_wait(void)
  2789                        ;{
  2790                        	.line	811
  2791                        	.line	812
  2792                        	FXHDD
  2793                        	xdef	~~k_ide_wait
  2794                        	func
  2795                        	.function	812
  2796                        ~~k_ide_wait:
  2797                        	longa	on
  2798                        	longi	on
  2799 03:8605: 3B           	tsc
  2800 03:8606: 38           	sec
  2801 03:8607: E9 03 00     	sbc	#L61
  2802 03:860A: 1B           	tcs
  2803 03:860B: 0B           	phd
  2804 03:860C: 5B           	tcd
  Thu Dec  3 2020 22:25                                                Page 56


  2805                        	.block	812
  2806                        ;	UINT i = 0;
  2807                        ;	UCHAR status = 0x00;
  2808                        ;
  2809                        ;	//k_debug_string("k_ide_wait...\r\n");
  2810                        ;
  2811                        ;	for(i=0; i< 4; i++)
  2812             00000000   i_1	set	0
  2813             00000002   status_1	set	2
  2814                        	.sym	i,0,16,1,16
  2815                        	.sym	status,2,14,1,8
  2816 03:860D: 64 01        	stz	<L62+i_1
  2817 03:860F: E2 20        	sep	#$20
  2818                        	longa	off
  2819 03:8611: 64 03        	stz	<L62+status_1
  2820 03:8613: C2 20        	rep	#$20
  2821                        	longa	on
  2822                        	.line	818
  2823 03:8615: 64 01        	stz	<L62+i_1
  2824                        L10029:
  2825                        ;	{
  2826                        	.line	819
  2827                        ;		status = IDE_CMD_STAT[0];
  2828                        	.line	820
  2829 03:8617: E2 20        	sep	#$20
  2830                        	longa	off
  2831 03:8619: AF 37 E8 AF  	lda	>11528247
  2832 03:861D: 85 03        	sta	<L62+status_1
  2833 03:861F: C2 20        	rep	#$20
  2834                        	longa	on
  2835                        ;		k_debug_bits("k_ide_wait:bits:",status);
  2836                        	.line	821
  2837 03:8621: D4 03        	pei	<L62+status_1
  2838 03:8623: F4 xx xx     	pea	#^L60
  2839 03:8626: F4 xx xx     	pea	#<L60
  2840 03:8629: 22 xx xx xx  	jsl	~~k_debug_bits
  2841                        ;	}
  2842                        	.line	822
  2843                        L10027:
  2844 03:862D: E6 01        	inc	<L62+i_1
  2845 03:862F: A5 01        	lda	<L62+i_1
  2846 03:8631: C9 04 00     	cmp	#<$4
  2847 03:8634: B0 03        	bcs	L64
  2848 03:8636: 82 DE FF     	brl	L10029
  2849                        L64:
  2850                        L10028:
  2851                        ;}
  2852                        	.line	823
  2853                        L65:
  2854 03:8639: 2B           	pld
  2855 03:863A: 3B           	tsc
  2856 03:863B: 18           	clc
  2857 03:863C: 69 03 00     	adc	#L61
  2858 03:863F: 1B           	tcs
  2859 03:8640: 6B           	rtl
  2860                        	.endblock	823
  2861             00000003   L61	equ	3
  2862             00000001   L62	equ	1
  Thu Dec  3 2020 22:25                                                Page 57


  2863 03:8641:              	ends
  2864                        	efunc
  2865                        	.endfunc	823,1,3
  2866                        	.line	823
  2867                        	data
  2868                        L60:
  2869 00:0192: 6B 5F 69 64  	db	$6B,$5F,$69,$64,$65,$5F,$77,$61,$69,$74,
                    $3A,$62,$69,$74,$73
       00:0196: 65 5F 77 61 
       00:019A: 69 74 3A 62 
       00:019E: 69 74 73 
  2870 00:01A1: 3A 00        	db	$3A,$00
  2871 00:01A3:              	ends
  2872                        ;
  2873                        ;void k_ide_poll(UINT io)
  2874                        ;{
  2875                        	.line	825
  2876                        	.line	826
  2877                        	FXHDD
  2878                        	xdef	~~k_ide_poll
  2879                        	func
  2880                        	.function	826
  2881                        ~~k_ide_poll:
  2882                        	longa	on
  2883                        	longi	on
  2884 03:8641: 3B           	tsc
  2885 03:8642: 38           	sec
  2886 03:8643: E9 03 00     	sbc	#L67
  2887 03:8646: 1B           	tcs
  2888 03:8647: 0B           	phd
  2889 03:8648: 5B           	tcd
  2890             00000004   io_0	set	4
  2891                        	.block	826
  2892                        ;	UINT i = 0;
  2893                        ;	UCHAR status = 0x00;
  2894                        ;
  2895                        ;	for(i=0; i< 4; i++)
  2896             00000000   i_1	set	0
  2897             00000002   status_1	set	2
  2898                        	.sym	i,0,16,1,16
  2899                        	.sym	status,2,14,1,8
  2900                        	.sym	io,4,16,6,16
  2901 03:8649: 64 01        	stz	<L68+i_1
  2902 03:864B: E2 20        	sep	#$20
  2903                        	longa	off
  2904 03:864D: 64 03        	stz	<L68+status_1
  2905 03:864F: C2 20        	rep	#$20
  2906                        	longa	on
  2907                        	.line	830
  2908 03:8651: 64 01        	stz	<L68+i_1
  2909                        L10032:
  2910                        ;		status = FX_ATA_REG_STATUS[0];
  2911                        	.line	831
  2912 03:8653: E2 20        	sep	#$20
  2913                        	longa	off
  2914 03:8655: AF 37 E8 AF  	lda	>11528247
  2915 03:8659: 85 03        	sta	<L68+status_1
  2916 03:865B: C2 20        	rep	#$20
  Thu Dec  3 2020 22:25                                                Page 58


  2917                        	longa	on
  2918                        L10030:
  2919 03:865D: E6 01        	inc	<L68+i_1
  2920 03:865F: A5 01        	lda	<L68+i_1
  2921 03:8661: C9 04 00     	cmp	#<$4
  2922 03:8664: B0 03        	bcs	L70
  2923 03:8666: 82 EA FF     	brl	L10032
  2924                        L70:
  2925                        L10031:
  2926                        ;
  2927                        ;retry:;
  2928                        	.line	833
  2929                        L10033:
  2930                        	.line	833
  2931                        ;	status = FX_ATA_REG_STATUS[0];
  2932                        	.line	834
  2933 03:8669: E2 20        	sep	#$20
  2934                        	longa	off
  2935 03:866B: AF 37 E8 AF  	lda	>11528247
  2936 03:866F: 85 03        	sta	<L68+status_1
  2937 03:8671: C2 20        	rep	#$20
  2938                        	longa	on
  2939                        ;	k_debug_string("testing for BSY\r\n");
  2940                        	.line	835
  2941 03:8673: F4 xx xx     	pea	#^L66
  2942 03:8676: F4 xx xx     	pea	#<L66
  2943 03:8679: 22 xx xx xx  	jsl	~~k_debug_string
  2944                        ;	if(status & ATA_SR_BSY) goto retry;
  2945                        	.line	836
  2946 03:867D: E2 20        	sep	#$20
  2947                        	longa	off
  2948 03:867F: A5 03        	lda	<L68+status_1
  2949 03:8681: 29 80        	and	#<$80
  2950 03:8683: C2 20        	rep	#$20
  2951                        	longa	on
  2952 03:8685: F0 03        	beq	L71
  2953 03:8687: 82 DF FF     	brl	L10033
  2954                        L71:
  2955                        ;	k_debug_string("BSY cleared\r\n");
  2956                        	.line	837
  2957 03:868A: F4 xx xx     	pea	#^L66+18
  2958 03:868D: F4 xx xx     	pea	#<L66+18
  2959 03:8690: 22 xx xx xx  	jsl	~~k_debug_string
  2960                        ;
  2961                        ;retry2:	status = FX_ATA_REG_STATUS[0];
  2962                        	.line	839
  2963                        L10034:
  2964                        	.line	839
  2965 03:8694: E2 20        	sep	#$20
  2966                        	longa	off
  2967 03:8696: AF 37 E8 AF  	lda	>11528247
  2968 03:869A: 85 03        	sta	<L68+status_1
  2969 03:869C: C2 20        	rep	#$20
  2970                        	longa	on
  2971                        ;	if(status & ATA_SR_ERR)
  2972                        	.line	840
  2973                        ;	{
  2974 03:869E: E2 20        	sep	#$20
  Thu Dec  3 2020 22:25                                                Page 59


  2975                        	longa	off
  2976 03:86A0: A5 03        	lda	<L68+status_1
  2977 03:86A2: 29 01        	and	#<$1
  2978 03:86A4: C2 20        	rep	#$20
  2979                        	longa	on
  2980 03:86A6: D0 03        	bne	L72
  2981 03:86A8: 82 0C 00     	brl	L10035
  2982                        L72:
  2983                        	.line	841
  2984                        ;		k_debug_hex("k_ide_poll:ATA_SR_ERR:",sta
                    tus);
  2985                        	.line	842
  2986 03:86AB: D4 03        	pei	<L68+status_1
  2987 03:86AD: F4 xx xx     	pea	#^L66+32
  2988 03:86B0: F4 xx xx     	pea	#<L66+32
  2989 03:86B3: 22 xx xx xx  	jsl	~~k_debug_hex
  2990                        ;	}
  2991                        	.line	843
  2992                        ;	k_debug_string("testing for DRQ\r\n");
  2993                        L10035:
  2994                        	.line	844
  2995 03:86B7: F4 xx xx     	pea	#^L66+55
  2996 03:86BA: F4 xx xx     	pea	#<L66+55
  2997 03:86BD: 22 xx xx xx  	jsl	~~k_debug_string
  2998                        ;	if(!(status & ATA_SR_DRQ)) goto retry2;
  2999                        	.line	845
  3000 03:86C1: E2 20        	sep	#$20
  3001                        	longa	off
  3002 03:86C3: A5 03        	lda	<L68+status_1
  3003 03:86C5: 29 08        	and	#<$8
  3004 03:86C7: C2 20        	rep	#$20
  3005                        	longa	on
  3006 03:86C9: D0 03        	bne	L73
  3007 03:86CB: 82 C6 FF     	brl	L10034
  3008                        L73:
  3009                        ;	k_debug_string("DRQ set, ready to PIO!\r\n");
  3010                        	.line	846
  3011 03:86CE: F4 xx xx     	pea	#^L66+73
  3012 03:86D1: F4 xx xx     	pea	#<L66+73
  3013 03:86D4: 22 xx xx xx  	jsl	~~k_debug_string
  3014                        ;	return;
  3015                        	.line	847
  3016                        L74:
  3017 03:86D8: A5 05        	lda	<L67+2
  3018 03:86DA: 85 07        	sta	<L67+2+2
  3019 03:86DC: A5 04        	lda	<L67+1
  3020 03:86DE: 85 06        	sta	<L67+1+2
  3021 03:86E0: 2B           	pld
  3022 03:86E1: 3B           	tsc
  3023 03:86E2: 18           	clc
  3024 03:86E3: 69 05 00     	adc	#L67+2
  3025 03:86E6: 1B           	tcs
  3026 03:86E7: 6B           	rtl
  3027                        ;}
  3028                        	.line	848
  3029                        	.endblock	848
  3030             00000003   L67	equ	3
  3031             00000001   L68	equ	1
  Thu Dec  3 2020 22:25                                                Page 60


  3032 03:86E8:              	ends
  3033                        	efunc
  3034                        	.endfunc	848,1,3
  3035                        	.line	848
  3036                        	data
  3037                        L66:
  3038 00:01A3: 74 65 73 74  	db	$74,$65,$73,$74,$69,$6E,$67,$20,$66,$6F,
                    $72,$20,$42,$53,$59
       00:01A7: 69 6E 67 20 
       00:01AB: 66 6F 72 20 
       00:01AF: 42 53 59 
  3039 00:01B2: 0D 0A 00 42  	db	$0D,$0A,$00,$42,$53,$59,$20,$63,$6C,$65,
                    $61,$72,$65,$64,$0D
       00:01B6: 53 59 20 63 
       00:01BA: 6C 65 61 72 
       00:01BE: 65 64 0D 
  3040 00:01C1: 0A 00 6B 5F  	db	$0A,$00,$6B,$5F,$69,$64,$65,$5F,$70,$6F,
                    $6C,$6C,$3A,$41,$54
       00:01C5: 69 64 65 5F 
       00:01C9: 70 6F 6C 6C 
       00:01CD: 3A 41 54 
  3041 00:01D0: 41 5F 53 52  	db	$41,$5F,$53,$52,$5F,$45,$52,$52,$3A,$00,
                    $74,$65,$73,$74,$69
       00:01D4: 5F 45 52 52 
       00:01D8: 3A 00 74 65 
       00:01DC: 73 74 69 
  3042 00:01DF: 6E 67 20 66  	db	$6E,$67,$20,$66,$6F,$72,$20,$44,$52,$51,
                    $0D,$0A,$00,$44,$52
       00:01E3: 6F 72 20 44 
       00:01E7: 52 51 0D 0A 
       00:01EB: 00 44 52 
  3043 00:01EE: 51 20 73 65  	db	$51,$20,$73,$65,$74,$2C,$20,$72,$65,$61,
                    $64,$79,$20,$74,$6F
       00:01F2: 74 2C 20 72 
       00:01F6: 65 61 64 79 
       00:01FA: 20 74 6F 
  3044 00:01FD: 20 50 49 4F  	db	$20,$50,$49,$4F,$21,$0D,$0A,$00
       00:0201: 21 0D 0A 00 
  3045 00:0205:              	ends
  3046                        ;
  3047                        ;
  3048                        ;
  3049                        ;void k_read_lba_sector(ULONG lba,unsigned char co
                    unt,LPCHAR readBuffer)
  3050                        ;{
  3051                        	.line	852
  3052                        	.line	853
  3053                        	FXHDD
  3054                        	xdef	~~k_read_lba_sector
  3055                        	func
  3056                        	.function	853
  3057                        ~~k_read_lba_sector:
  3058                        	longa	on
  3059                        	longi	on
  3060 03:86E8: 3B           	tsc
  3061 03:86E9: 38           	sec
  3062 03:86EA: E9 16 00     	sbc	#L76
  3063 03:86ED: 1B           	tcs
  Thu Dec  3 2020 22:25                                                Page 61


  3064 03:86EE: 0B           	phd
  3065 03:86EF: 5B           	tcd
  3066             00000004   lba_0	set	4
  3067             00000008   count_0	set	8
  3068             0000000A   readBuffer_0	set	10
  3069                        	.block	853
  3070                        ;	UCHAR sts = 0x00;
  3071                        ;	UCHAR cmd = 0xE0;
  3072                        ;	UCHAR hi;
  3073                        ;	UCHAR lo;
  3074                        ;	UINT  index = 0;
  3075                        ;
  3076                        ;	UINT *pbuffer = (UINT*)readBuffer;
  3077                        ;
  3078                        ;	k_debug_long("READING LBA:",lba);
  3079             00000000   sts_1	set	0
  3080             00000001   cmd_1	set	1
  3081             00000002   hi_1	set	2
  3082             00000003   lo_1	set	3
  3083             00000004   index_1	set	4
  3084             00000006   pbuffer_1	set	6
  3085                        	.sym	sts,0,14,1,8
  3086                        	.sym	cmd,1,14,1,8
  3087                        	.sym	hi,2,14,1,8
  3088                        	.sym	lo,3,14,1,8
  3089                        	.sym	index,4,16,1,16
  3090                        	.sym	pbuffer,6,144,1,32
  3091                        	.sym	lba,4,18,6,32
  3092                        	.sym	count,8,14,6,8
  3093                        	.sym	readBuffer,10,142,6,32
  3094 03:86F0: E2 20        	sep	#$20
  3095                        	longa	off
  3096 03:86F2: 64 0D        	stz	<L77+sts_1
  3097 03:86F4: C2 20        	rep	#$20
  3098                        	longa	on
  3099 03:86F6: E2 20        	sep	#$20
  3100                        	longa	off
  3101 03:86F8: A9 E0        	lda	#$e0
  3102 03:86FA: 85 0E        	sta	<L77+cmd_1
  3103 03:86FC: C2 20        	rep	#$20
  3104                        	longa	on
  3105 03:86FE: 64 11        	stz	<L77+index_1
  3106 03:8700: A5 20        	lda	<L76+readBuffer_0
  3107 03:8702: 85 13        	sta	<L77+pbuffer_1
  3108 03:8704: A5 22        	lda	<L76+readBuffer_0+2
  3109 03:8706: 85 15        	sta	<L77+pbuffer_1+2
  3110                        	.line	862
  3111 03:8708: D4 1C        	pei	<L76+lba_0+2
  3112 03:870A: D4 1A        	pei	<L76+lba_0
  3113 03:870C: F4 xx xx     	pea	#^L75
  3114 03:870F: F4 xx xx     	pea	#<L75
  3115 03:8712: 22 xx xx xx  	jsl	~~k_debug_long
  3116                        ;
  3117                        ;	k_ide_isbusy();
  3118                        	.line	864
  3119 03:8716: 22 FF 7F 03  	jsl	~~k_ide_isbusy
  3120                        ;	k_ide_isready();
  3121                        	.line	865
  Thu Dec  3 2020 22:25                                                Page 62


  3122 03:871A: 22 91 80 03  	jsl	~~k_ide_isready
  3123                        ;
  3124                        ;	FX_ATA_REG_HDDEVSEL[0] 	= (cmd | (UCHAR)((lba >>
                     24 & 0x0F)));
  3125                        	.line	867
  3126 03:871E: D4 1C        	pei	<L76+lba_0+2
  3127 03:8720: D4 1A        	pei	<L76+lba_0
  3128 03:8722: A9 18 00     	lda	#$18
  3129                        	xref	~~~llsr
  3130 03:8725: 22 xx xx xx  	jsl	~~~llsr
  3131 03:8729: 85 01        	sta	<R0
  3132 03:872B: 86 03        	stx	<R0+2
  3133 03:872D: A5 01        	lda	<R0
  3134 03:872F: 29 0F 00     	and	#<$f
  3135 03:8732: 85 05        	sta	<R1
  3136 03:8734: 64 07        	stz	<R1+2
  3137 03:8736: E2 20        	sep	#$20
  3138                        	longa	off
  3139 03:8738: A5 0E        	lda	<L77+cmd_1
  3140 03:873A: 05 05        	ora	<R1
  3141 03:873C: 8F 36 E8 AF  	sta	>11528246
  3142 03:8740: C2 20        	rep	#$20
  3143                        	longa	on
  3144                        ;
  3145                        ;	FX_ATA_REG_FEATURES[0] 	= 0x00;
  3146                        	.line	869
  3147 03:8742: E2 20        	sep	#$20
  3148                        	longa	off
  3149 03:8744: A9 00        	lda	#$0
  3150 03:8746: 8F 31 E8 AF  	sta	>11528241
  3151 03:874A: C2 20        	rep	#$20
  3152                        	longa	on
  3153                        ;	FX_ATA_REG_SECCOUNT0[0] = count;
  3154                        	.line	870
  3155 03:874C: E2 20        	sep	#$20
  3156                        	longa	off
  3157 03:874E: A5 1E        	lda	<L76+count_0
  3158 03:8750: 8F 32 E8 AF  	sta	>11528242
  3159 03:8754: C2 20        	rep	#$20
  3160                        	longa	on
  3161                        ;	FX_ATA_REG_LBA0[0] 		= (UCHAR)((lba))
                    ;
  3162                        	.line	871
  3163 03:8756: E2 20        	sep	#$20
  3164                        	longa	off
  3165 03:8758: A5 1A        	lda	<L76+lba_0
  3166 03:875A: 8F 33 E8 AF  	sta	>11528243
  3167 03:875E: C2 20        	rep	#$20
  3168                        	longa	on
  3169                        ;	FX_ATA_REG_LBA1[0] 		= (UCHAR)((lba) 
                    >> 8);
  3170                        	.line	872
  3171 03:8760: D4 1C        	pei	<L76+lba_0+2
  3172 03:8762: D4 1A        	pei	<L76+lba_0
  3173 03:8764: A9 08 00     	lda	#$8
  3174                        	xref	~~~llsr
  3175 03:8767: 22 xx xx xx  	jsl	~~~llsr
  3176 03:876B: 85 01        	sta	<R0
  Thu Dec  3 2020 22:25                                                Page 63


  3177 03:876D: 86 03        	stx	<R0+2
  3178 03:876F: E2 20        	sep	#$20
  3179                        	longa	off
  3180 03:8771: A5 01        	lda	<R0
  3181 03:8773: 8F 34 E8 AF  	sta	>11528244
  3182 03:8777: C2 20        	rep	#$20
  3183                        	longa	on
  3184                        ;	FX_ATA_REG_LBA2[0] 		= (UCHAR)((lba) 
                    >> 16);
  3185                        	.line	873
  3186 03:8779: D4 1C        	pei	<L76+lba_0+2
  3187 03:877B: D4 1A        	pei	<L76+lba_0
  3188 03:877D: A9 10 00     	lda	#$10
  3189                        	xref	~~~llsr
  3190 03:8780: 22 xx xx xx  	jsl	~~~llsr
  3191 03:8784: 85 01        	sta	<R0
  3192 03:8786: 86 03        	stx	<R0+2
  3193 03:8788: E2 20        	sep	#$20
  3194                        	longa	off
  3195 03:878A: A5 01        	lda	<R0
  3196 03:878C: 8F 35 E8 AF  	sta	>11528245
  3197 03:8790: C2 20        	rep	#$20
  3198                        	longa	on
  3199                        ;
  3200                        ;	FX_ATA_REG_COMMAND[0] 	= ATA_CMD_READ_PIO;
  3201                        	.line	875
  3202 03:8792: E2 20        	sep	#$20
  3203                        	longa	off
  3204 03:8794: A9 20        	lda	#$20
  3205 03:8796: 8F 37 E8 AF  	sta	>11528247
  3206 03:879A: C2 20        	rep	#$20
  3207                        	longa	on
  3208                        ;
  3209                        ;	k_debug_bits("FX_ATA_REG_SECCOUNT0:",count);
  3210                        	.line	877
  3211 03:879C: D4 1E        	pei	<L76+count_0
  3212 03:879E: F4 xx xx     	pea	#^L75+13
  3213 03:87A1: F4 xx xx     	pea	#<L75+13
  3214 03:87A4: 22 xx xx xx  	jsl	~~k_debug_bits
  3215                        ;	k_debug_bits("FX_ATA_REG_HDDEVSEL:",(cmd | (UCHA
                    R)((lba >> 24 & 0x0F))));
  3216                        	.line	878
  3217 03:87A8: D4 1C        	pei	<L76+lba_0+2
  3218 03:87AA: D4 1A        	pei	<L76+lba_0
  3219 03:87AC: A9 18 00     	lda	#$18
  3220                        	xref	~~~llsr
  3221 03:87AF: 22 xx xx xx  	jsl	~~~llsr
  3222 03:87B3: 85 01        	sta	<R0
  3223 03:87B5: 86 03        	stx	<R0+2
  3224 03:87B7: A5 01        	lda	<R0
  3225 03:87B9: 29 0F 00     	and	#<$f
  3226 03:87BC: 85 05        	sta	<R1
  3227 03:87BE: 64 07        	stz	<R1+2
  3228 03:87C0: A5 05        	lda	<R1
  3229 03:87C2: 29 FF 00     	and	#$ff
  3230 03:87C5: 85 01        	sta	<R0
  3231 03:87C7: A5 0E        	lda	<L77+cmd_1
  3232 03:87C9: 29 FF 00     	and	#$ff
  Thu Dec  3 2020 22:25                                                Page 64


  3233 03:87CC: 85 05        	sta	<R1
  3234 03:87CE: A5 05        	lda	<R1
  3235 03:87D0: 05 01        	ora	<R0
  3236 03:87D2: 48           	pha
  3237 03:87D3: F4 xx xx     	pea	#^L75+35
  3238 03:87D6: F4 xx xx     	pea	#<L75+35
  3239 03:87D9: 22 xx xx xx  	jsl	~~k_debug_bits
  3240                        ;	k_debug_bits("FX_ATA_REG_LBA0:",(UCHAR)((lba)));
  3241                        	.line	879
  3242 03:87DD: D4 1A        	pei	<L76+lba_0
  3243 03:87DF: F4 xx xx     	pea	#^L75+56
  3244 03:87E2: F4 xx xx     	pea	#<L75+56
  3245 03:87E5: 22 xx xx xx  	jsl	~~k_debug_bits
  3246                        ;	k_debug_bits("FX_ATA_REG_LBA1:",(UCHAR)((lba) >>
                     8));
  3247                        	.line	880
  3248 03:87E9: D4 1C        	pei	<L76+lba_0+2
  3249 03:87EB: D4 1A        	pei	<L76+lba_0
  3250 03:87ED: A9 08 00     	lda	#$8
  3251                        	xref	~~~llsr
  3252 03:87F0: 22 xx xx xx  	jsl	~~~llsr
  3253 03:87F4: 85 01        	sta	<R0
  3254 03:87F6: 86 03        	stx	<R0+2
  3255 03:87F8: D4 01        	pei	<R0
  3256 03:87FA: F4 xx xx     	pea	#^L75+73
  3257 03:87FD: F4 xx xx     	pea	#<L75+73
  3258 03:8800: 22 xx xx xx  	jsl	~~k_debug_bits
  3259                        ;	k_debug_bits("FX_ATA_REG_LBA2:",(UCHAR)((lba) >>
                     16));
  3260                        	.line	881
  3261 03:8804: D4 1C        	pei	<L76+lba_0+2
  3262 03:8806: D4 1A        	pei	<L76+lba_0
  3263 03:8808: A9 10 00     	lda	#$10
  3264                        	xref	~~~llsr
  3265 03:880B: 22 xx xx xx  	jsl	~~~llsr
  3266 03:880F: 85 01        	sta	<R0
  3267 03:8811: 86 03        	stx	<R0+2
  3268 03:8813: D4 01        	pei	<R0
  3269 03:8815: F4 xx xx     	pea	#^L75+90
  3270 03:8818: F4 xx xx     	pea	#<L75+90
  3271 03:881B: 22 xx xx xx  	jsl	~~k_debug_bits
  3272                        ;
  3273                        ;	//k_ide_wait();
  3274                        ;
  3275                        ;	k_ide_isbusy();
  3276                        	.line	885
  3277 03:881F: 22 FF 7F 03  	jsl	~~k_ide_isbusy
  3278                        ;	k_ide_isdrq();
  3279                        	.line	886
  3280 03:8823: 22 25 81 03  	jsl	~~k_ide_isdrq
  3281                        ;
  3282                        ;	index = *((UINT*)&IDE_DATA_LO[0]);
  3283                        	.line	888
  3284 03:8827: AF 38 E8 AF  	lda	>11528248
  3285 03:882B: 85 11        	sta	<L77+index_1
  3286                        ;
  3287                        ;	for(index = 0;index < 256;index++)
  3288                        	.line	890
  Thu Dec  3 2020 22:25                                                Page 65


  3289 03:882D: 64 11        	stz	<L77+index_1
  3290                        L10038:
  3291                        ;	{
  3292                        	.line	891
  3293                        ;		pbuffer[index] = *((UINT*)&IDE_DATA_LO[0
                    ]);
  3294                        	.line	892
  3295 03:882F: A5 11        	lda	<L77+index_1
  3296 03:8831: 85 05        	sta	<R1
  3297 03:8833: 64 07        	stz	<R1+2
  3298 03:8835: D4 07        	pei	<R1+2
  3299 03:8837: D4 05        	pei	<R1
  3300 03:8839: A9 01 00     	lda	#$1
  3301                        	xref	~~~lasl
  3302 03:883C: 22 xx xx xx  	jsl	~~~lasl
  3303 03:8840: 85 01        	sta	<R0
  3304 03:8842: 86 03        	stx	<R0+2
  3305 03:8844: 18           	clc
  3306 03:8845: A5 13        	lda	<L77+pbuffer_1
  3307 03:8847: 65 01        	adc	<R0
  3308 03:8849: 85 09        	sta	<R2
  3309 03:884B: A5 15        	lda	<L77+pbuffer_1+2
  3310 03:884D: 65 03        	adc	<R0+2
  3311 03:884F: 85 0B        	sta	<R2+2
  3312 03:8851: AF 38 E8 AF  	lda	>11528248
  3313 03:8855: 87 09        	sta	[<R2]
  3314                        ;		//pbuffer[index] = ((pbuffer[index]<<8)&
                    0xff00)|((pbuffer[index]>>8)&0x00ff);
  3315                        ;	}
  3316                        	.line	894
  3317                        L10036:
  3318 03:8857: E6 11        	inc	<L77+index_1
  3319 03:8859: A5 11        	lda	<L77+index_1
  3320 03:885B: C9 00 01     	cmp	#<$100
  3321 03:885E: B0 03        	bcs	L79
  3322 03:8860: 82 CC FF     	brl	L10038
  3323                        L79:
  3324                        L10037:
  3325                        ;
  3326                        ;	return;
  3327                        	.line	896
  3328                        L80:
  3329 03:8863: A5 18        	lda	<L76+2
  3330 03:8865: 85 22        	sta	<L76+2+10
  3331 03:8867: A5 17        	lda	<L76+1
  3332 03:8869: 85 21        	sta	<L76+1+10
  3333 03:886B: 2B           	pld
  3334 03:886C: 3B           	tsc
  3335 03:886D: 18           	clc
  3336 03:886E: 69 20 00     	adc	#L76+10
  3337 03:8871: 1B           	tcs
  3338 03:8872: 6B           	rtl
  3339                        ;}
  3340                        	.line	897
  3341                        	.endblock	897
  3342             00000016   L76	equ	22
  3343             0000000D   L77	equ	13
  3344 03:8873:              	ends
  Thu Dec  3 2020 22:25                                                Page 66


  3345                        	efunc
  3346                        	.endfunc	897,13,22
  3347                        	.line	897
  3348                        	data
  3349                        L75:
  3350 00:0205: 52 45 41 44  	db	$52,$45,$41,$44,$49,$4E,$47,$20,$4C,$42,
                    $41,$3A,$00,$46,$58
       00:0209: 49 4E 47 20 
       00:020D: 4C 42 41 3A 
       00:0211: 00 46 58 
  3351 00:0214: 5F 41 54 41  	db	$5F,$41,$54,$41,$5F,$52,$45,$47,$5F,$53,
                    $45,$43,$43,$4F,$55
       00:0218: 5F 52 45 47 
       00:021C: 5F 53 45 43 
       00:0220: 43 4F 55 
  3352 00:0223: 4E 54 30 3A  	db	$4E,$54,$30,$3A,$00,$46,$58,$5F,$41,$54,
                    $41,$5F,$52,$45,$47
       00:0227: 00 46 58 5F 
       00:022B: 41 54 41 5F 
       00:022F: 52 45 47 
  3353 00:0232: 5F 48 44 44  	db	$5F,$48,$44,$44,$45,$56,$53,$45,$4C,$3A,
                    $00,$46,$58,$5F,$41
       00:0236: 45 56 53 45 
       00:023A: 4C 3A 00 46 
       00:023E: 58 5F 41 
  3354 00:0241: 54 41 5F 52  	db	$54,$41,$5F,$52,$45,$47,$5F,$4C,$42,$41,
                    $30,$3A,$00,$46,$58
       00:0245: 45 47 5F 4C 
       00:0249: 42 41 30 3A 
       00:024D: 00 46 58 
  3355 00:0250: 5F 41 54 41  	db	$5F,$41,$54,$41,$5F,$52,$45,$47,$5F,$4C,
                    $42,$41,$31,$3A,$00
       00:0254: 5F 52 45 47 
       00:0258: 5F 4C 42 41 
       00:025C: 31 3A 00 
  3356 00:025F: 46 58 5F 41  	db	$46,$58,$5F,$41,$54,$41,$5F,$52,$45,$47,
                    $5F,$4C,$42,$41,$32
       00:0263: 54 41 5F 52 
       00:0267: 45 47 5F 4C 
       00:026B: 42 41 32 
  3357 00:026E: 3A 00        	db	$3A,$00
  3358 00:0270:              	ends
  3359                        ;
  3360                        ;
  3361                        ;void k_read_lba_sector_old(ULONG lba,unsigned cha
                    r count,LPCHAR readBuffer)
  3362                        ;{
  3363                        	.line	900
  3364                        	.line	901
  3365                        	FXHDD
  3366                        	xdef	~~k_read_lba_sector_old
  3367                        	func
  3368                        	.function	901
  3369                        ~~k_read_lba_sector_old:
  3370                        	longa	on
  3371                        	longi	on
  3372 03:8873: 3B           	tsc
  3373 03:8874: 38           	sec
  Thu Dec  3 2020 22:25                                                Page 67


  3374 03:8875: E9 0E 00     	sbc	#L82
  3375 03:8878: 1B           	tcs
  3376 03:8879: 0B           	phd
  3377 03:887A: 5B           	tcd
  3378             00000004   lba_0	set	4
  3379             00000008   count_0	set	8
  3380             0000000A   readBuffer_0	set	10
  3381                        	.block	901
  3382                        ;	UCHAR sts = 0x00;
  3383                        ;	UCHAR cmd = 0xE0;
  3384                        ;	UCHAR hi;
  3385                        ;	UCHAR lo;
  3386                        ;	UINT  index = 0;
  3387                        ;	//LPCHAR lbaBytes = (LPCHAR)&lba;
  3388                        ;	k_debug_long("k_read_lba_sector:",lba);
  3389             00000000   sts_1	set	0
  3390             00000001   cmd_1	set	1
  3391             00000002   hi_1	set	2
  3392             00000003   lo_1	set	3
  3393             00000004   index_1	set	4
  3394                        	.sym	sts,0,14,1,8
  3395                        	.sym	cmd,1,14,1,8
  3396                        	.sym	hi,2,14,1,8
  3397                        	.sym	lo,3,14,1,8
  3398                        	.sym	index,4,16,1,16
  3399                        	.sym	lba,4,18,6,32
  3400                        	.sym	count,8,14,6,8
  3401                        	.sym	readBuffer,10,142,6,32
  3402 03:887B: E2 20        	sep	#$20
  3403                        	longa	off
  3404 03:887D: 64 09        	stz	<L83+sts_1
  3405 03:887F: C2 20        	rep	#$20
  3406                        	longa	on
  3407 03:8881: E2 20        	sep	#$20
  3408                        	longa	off
  3409 03:8883: A9 E0        	lda	#$e0
  3410 03:8885: 85 0A        	sta	<L83+cmd_1
  3411 03:8887: C2 20        	rep	#$20
  3412                        	longa	on
  3413 03:8889: 64 0D        	stz	<L83+index_1
  3414                        	.line	908
  3415 03:888B: D4 14        	pei	<L82+lba_0+2
  3416 03:888D: D4 12        	pei	<L82+lba_0
  3417 03:888F: F4 xx xx     	pea	#^L81
  3418 03:8892: F4 xx xx     	pea	#<L81
  3419 03:8895: 22 xx xx xx  	jsl	~~k_debug_long
  3420                        ;
  3421                        ;	//ide_select_drive(ATA_PRIMARY,ATA_MASTER);
  3422                        ;
  3423                        ;	k_ide_isbusy();
  3424                        	.line	912
  3425 03:8899: 22 FF 7F 03  	jsl	~~k_ide_isbusy
  3426                        ;
  3427                        ;	/*
  3428                        ;	IDE_SECT_CNT[0]  = count;
  3429                        ;
  3430                        ;	IDE_HEAD[0]  	 = lbaBytes[3];
  3431                        ;	IDE_SECT_SRT[0]  = lbaBytes[0];
  Thu Dec  3 2020 22:25                                                Page 68


  3432                        ;	IDE_CLDR_LO[0]   = lbaBytes[1];
  3433                        ;	IDE_CLDR_HI[0]   = lbaBytes[2];
  3434                        ;	*/
  3435                        ;	//FX_ATA_REG_HDDEVSEL[0] 	= 0xA0;
  3436                        ;
  3437                        ;	//k_ide_isbusy();
  3438                        ;	//k_ide_isready();
  3439                        ;
  3440                        ;
  3441                        ;	k_ide_isready();
  3442                        	.line	928
  3443 03:889D: 22 91 80 03  	jsl	~~k_ide_isready
  3444                        ;
  3445                        ;	FX_ATA_REG_HDDEVSEL[0] 	= (cmd | (UCHAR)((lba >>
                     24 & 0x0F)));
  3446                        	.line	930
  3447 03:88A1: D4 14        	pei	<L82+lba_0+2
  3448 03:88A3: D4 12        	pei	<L82+lba_0
  3449 03:88A5: A9 18 00     	lda	#$18
  3450                        	xref	~~~llsr
  3451 03:88A8: 22 xx xx xx  	jsl	~~~llsr
  3452 03:88AC: 85 01        	sta	<R0
  3453 03:88AE: 86 03        	stx	<R0+2
  3454 03:88B0: A5 01        	lda	<R0
  3455 03:88B2: 29 0F 00     	and	#<$f
  3456 03:88B5: 85 05        	sta	<R1
  3457 03:88B7: 64 07        	stz	<R1+2
  3458 03:88B9: E2 20        	sep	#$20
  3459                        	longa	off
  3460 03:88BB: A5 0A        	lda	<L83+cmd_1
  3461 03:88BD: 05 05        	ora	<R1
  3462 03:88BF: 8F 36 E8 AF  	sta	>11528246
  3463 03:88C3: C2 20        	rep	#$20
  3464                        	longa	on
  3465                        ;
  3466                        ;
  3467                        ;
  3468                        ;	FX_ATA_REG_FEATURES[0] 	= 0x00;
  3469                        	.line	934
  3470 03:88C5: E2 20        	sep	#$20
  3471                        	longa	off
  3472 03:88C7: A9 00        	lda	#$0
  3473 03:88C9: 8F 31 E8 AF  	sta	>11528241
  3474 03:88CD: C2 20        	rep	#$20
  3475                        	longa	on
  3476                        ;	FX_ATA_REG_SECCOUNT0[0] = count;
  3477                        	.line	935
  3478 03:88CF: E2 20        	sep	#$20
  3479                        	longa	off
  3480 03:88D1: A5 16        	lda	<L82+count_0
  3481 03:88D3: 8F 32 E8 AF  	sta	>11528242
  3482 03:88D7: C2 20        	rep	#$20
  3483                        	longa	on
  3484                        ;	FX_ATA_REG_LBA0[0] 		= (UCHAR)((lba))
                    ;
  3485                        	.line	936
  3486 03:88D9: E2 20        	sep	#$20
  3487                        	longa	off
  Thu Dec  3 2020 22:25                                                Page 69


  3488 03:88DB: A5 12        	lda	<L82+lba_0
  3489 03:88DD: 8F 33 E8 AF  	sta	>11528243
  3490 03:88E1: C2 20        	rep	#$20
  3491                        	longa	on
  3492                        ;	FX_ATA_REG_LBA1[0] 		= (UCHAR)((lba) 
                    >> 8);
  3493                        	.line	937
  3494 03:88E3: D4 14        	pei	<L82+lba_0+2
  3495 03:88E5: D4 12        	pei	<L82+lba_0
  3496 03:88E7: A9 08 00     	lda	#$8
  3497                        	xref	~~~llsr
  3498 03:88EA: 22 xx xx xx  	jsl	~~~llsr
  3499 03:88EE: 85 01        	sta	<R0
  3500 03:88F0: 86 03        	stx	<R0+2
  3501 03:88F2: E2 20        	sep	#$20
  3502                        	longa	off
  3503 03:88F4: A5 01        	lda	<R0
  3504 03:88F6: 8F 34 E8 AF  	sta	>11528244
  3505 03:88FA: C2 20        	rep	#$20
  3506                        	longa	on
  3507                        ;	FX_ATA_REG_LBA2[0] 		= (UCHAR)((lba) 
                    >> 16);
  3508                        	.line	938
  3509 03:88FC: D4 14        	pei	<L82+lba_0+2
  3510 03:88FE: D4 12        	pei	<L82+lba_0
  3511 03:8900: A9 10 00     	lda	#$10
  3512                        	xref	~~~llsr
  3513 03:8903: 22 xx xx xx  	jsl	~~~llsr
  3514 03:8907: 85 01        	sta	<R0
  3515 03:8909: 86 03        	stx	<R0+2
  3516 03:890B: E2 20        	sep	#$20
  3517                        	longa	off
  3518 03:890D: A5 01        	lda	<R0
  3519 03:890F: 8F 35 E8 AF  	sta	>11528245
  3520 03:8913: C2 20        	rep	#$20
  3521                        	longa	on
  3522                        ;
  3523                        ;	FX_ATA_REG_COMMAND[0] 	= ATA_CMD_READ_PIO;
  3524                        	.line	940
  3525 03:8915: E2 20        	sep	#$20
  3526                        	longa	off
  3527 03:8917: A9 20        	lda	#$20
  3528 03:8919: 8F 37 E8 AF  	sta	>11528247
  3529 03:891D: C2 20        	rep	#$20
  3530                        	longa	on
  3531                        ;
  3532                        ;	k_debug_bits("FX_ATA_REG_SECCOUNT0:",count);
  3533                        	.line	942
  3534 03:891F: D4 16        	pei	<L82+count_0
  3535 03:8921: F4 xx xx     	pea	#^L81+19
  3536 03:8924: F4 xx xx     	pea	#<L81+19
  3537 03:8927: 22 xx xx xx  	jsl	~~k_debug_bits
  3538                        ;	k_debug_bits("FX_ATA_REG_HDDEVSEL:",(cmd | (UCHA
                    R)((lba >> 24 & 0x0F))));
  3539                        	.line	943
  3540 03:892B: D4 14        	pei	<L82+lba_0+2
  3541 03:892D: D4 12        	pei	<L82+lba_0
  3542 03:892F: A9 18 00     	lda	#$18
  Thu Dec  3 2020 22:25                                                Page 70


  3543                        	xref	~~~llsr
  3544 03:8932: 22 xx xx xx  	jsl	~~~llsr
  3545 03:8936: 85 01        	sta	<R0
  3546 03:8938: 86 03        	stx	<R0+2
  3547 03:893A: A5 01        	lda	<R0
  3548 03:893C: 29 0F 00     	and	#<$f
  3549 03:893F: 85 05        	sta	<R1
  3550 03:8941: 64 07        	stz	<R1+2
  3551 03:8943: A5 05        	lda	<R1
  3552 03:8945: 29 FF 00     	and	#$ff
  3553 03:8948: 85 01        	sta	<R0
  3554 03:894A: A5 0A        	lda	<L83+cmd_1
  3555 03:894C: 29 FF 00     	and	#$ff
  3556 03:894F: 85 05        	sta	<R1
  3557 03:8951: A5 05        	lda	<R1
  3558 03:8953: 05 01        	ora	<R0
  3559 03:8955: 48           	pha
  3560 03:8956: F4 xx xx     	pea	#^L81+41
  3561 03:8959: F4 xx xx     	pea	#<L81+41
  3562 03:895C: 22 xx xx xx  	jsl	~~k_debug_bits
  3563                        ;	k_debug_bits("FX_ATA_REG_LBA0:",(UCHAR)((lba)));
  3564                        	.line	944
  3565 03:8960: D4 12        	pei	<L82+lba_0
  3566 03:8962: F4 xx xx     	pea	#^L81+62
  3567 03:8965: F4 xx xx     	pea	#<L81+62
  3568 03:8968: 22 xx xx xx  	jsl	~~k_debug_bits
  3569                        ;	k_debug_bits("FX_ATA_REG_LBA1:",(UCHAR)((lba) >>
                     8));
  3570                        	.line	945
  3571 03:896C: D4 14        	pei	<L82+lba_0+2
  3572 03:896E: D4 12        	pei	<L82+lba_0
  3573 03:8970: A9 08 00     	lda	#$8
  3574                        	xref	~~~llsr
  3575 03:8973: 22 xx xx xx  	jsl	~~~llsr
  3576 03:8977: 85 01        	sta	<R0
  3577 03:8979: 86 03        	stx	<R0+2
  3578 03:897B: D4 01        	pei	<R0
  3579 03:897D: F4 xx xx     	pea	#^L81+79
  3580 03:8980: F4 xx xx     	pea	#<L81+79
  3581 03:8983: 22 xx xx xx  	jsl	~~k_debug_bits
  3582                        ;	k_debug_bits("FX_ATA_REG_LBA2:",(UCHAR)((lba) >>
                     16));
  3583                        	.line	946
  3584 03:8987: D4 14        	pei	<L82+lba_0+2
  3585 03:8989: D4 12        	pei	<L82+lba_0
  3586 03:898B: A9 10 00     	lda	#$10
  3587                        	xref	~~~llsr
  3588 03:898E: 22 xx xx xx  	jsl	~~~llsr
  3589 03:8992: 85 01        	sta	<R0
  3590 03:8994: 86 03        	stx	<R0+2
  3591 03:8996: D4 01        	pei	<R0
  3592 03:8998: F4 xx xx     	pea	#^L81+96
  3593 03:899B: F4 xx xx     	pea	#<L81+96
  3594 03:899E: 22 xx xx xx  	jsl	~~k_debug_bits
  3595                        ;
  3596                        ;
  3597                        ;	k_ide_isbusy();
  3598                        	.line	949
  Thu Dec  3 2020 22:25                                                Page 71


  3599 03:89A2: 22 FF 7F 03  	jsl	~~k_ide_isbusy
  3600                        ;
  3601                        ;	k_ide_isdrq();
  3602                        	.line	951
  3603 03:89A6: 22 25 81 03  	jsl	~~k_ide_isdrq
  3604                        ;
  3605                        ;	/*
  3606                        ;	IDE_CMD_STAT[0] = 0x20;
  3607                        ;
  3608                        ;	k_ide_busy();
  3609                        ;
  3610                        ;	sts = IDE_CMD_STAT[0];
  3611                        ;	k_debug_hex("k_read_lba_sector:",sts);
  3612                        ;	*/
  3613                        ;
  3614                        ;	//k_ide_drive_ready_notbusy();
  3615                        ;	//k_ide_not_drq();
  3616                        ;
  3617                        ;
  3618                        ;	//k_ide_read_sector(readBuffer);
  3619                        ;
  3620                        ;	for(index = 0;index < 512;index+=2)
  3621                        	.line	968
  3622 03:89AA: 64 0D        	stz	<L83+index_1
  3623                        L10041:
  3624                        ;	{
  3625                        	.line	969
  3626                        ;		lo = IDE_DATA_LO[0];
  3627                        	.line	970
  3628 03:89AC: E2 20        	sep	#$20
  3629                        	longa	off
  3630 03:89AE: AF 38 E8 AF  	lda	>11528248
  3631 03:89B2: 85 0C        	sta	<L83+lo_1
  3632 03:89B4: C2 20        	rep	#$20
  3633                        	longa	on
  3634                        ;		hi = IDE_DATA_HI[0];
  3635                        	.line	971
  3636 03:89B6: E2 20        	sep	#$20
  3637                        	longa	off
  3638 03:89B8: AF 39 E8 AF  	lda	>11528249
  3639 03:89BC: 85 0B        	sta	<L83+hi_1
  3640 03:89BE: C2 20        	rep	#$20
  3641                        	longa	on
  3642                        ;		//k_debug_hex("k_ide_read_sector:lo:",lo
                    );
  3643                        ;		//k_debug_hex("k_ide_read_sector:hi:",hi
                    );
  3644                        ;		readBuffer[index] =   hi;
  3645                        	.line	974
  3646 03:89C0: E2 20        	sep	#$20
  3647                        	longa	off
  3648 03:89C2: A5 0B        	lda	<L83+hi_1
  3649 03:89C4: A4 0D        	ldy	<L83+index_1
  3650 03:89C6: 97 18        	sta	[<L82+readBuffer_0],Y
  3651 03:89C8: C2 20        	rep	#$20
  3652                        	longa	on
  3653                        ;		readBuffer[index+1] = lo;
  3654                        	.line	975
  Thu Dec  3 2020 22:25                                                Page 72


  3655 03:89CA: A5 0D        	lda	<L83+index_1
  3656 03:89CC: 1A           	ina
  3657 03:89CD: 85 01        	sta	<R0
  3658 03:89CF: E2 20        	sep	#$20
  3659                        	longa	off
  3660 03:89D1: A5 0C        	lda	<L83+lo_1
  3661 03:89D3: A4 01        	ldy	<R0
  3662 03:89D5: 97 18        	sta	[<L82+readBuffer_0],Y
  3663 03:89D7: C2 20        	rep	#$20
  3664                        	longa	on
  3665                        ;	}
  3666                        	.line	976
  3667                        L10039:
  3668 03:89D9: E6 0D        	inc	<L83+index_1
  3669 03:89DB: E6 0D        	inc	<L83+index_1
  3670 03:89DD: A5 0D        	lda	<L83+index_1
  3671 03:89DF: C9 00 02     	cmp	#<$200
  3672 03:89E2: B0 03        	bcs	L85
  3673 03:89E4: 82 C5 FF     	brl	L10041
  3674                        L85:
  3675                        L10040:
  3676                        ;
  3677                        ;
  3678                        ;
  3679                        ;	return;
  3680                        	.line	980
  3681                        L86:
  3682 03:89E7: A5 10        	lda	<L82+2
  3683 03:89E9: 85 1A        	sta	<L82+2+10
  3684 03:89EB: A5 0F        	lda	<L82+1
  3685 03:89ED: 85 19        	sta	<L82+1+10
  3686 03:89EF: 2B           	pld
  3687 03:89F0: 3B           	tsc
  3688 03:89F1: 18           	clc
  3689 03:89F2: 69 18 00     	adc	#L82+10
  3690 03:89F5: 1B           	tcs
  3691 03:89F6: 6B           	rtl
  3692                        ;}
  3693                        	.line	981
  3694                        	.endblock	981
  3695             0000000E   L82	equ	14
  3696             00000009   L83	equ	9
  3697 03:89F7:              	ends
  3698                        	efunc
  3699                        	.endfunc	981,9,14
  3700                        	.line	981
  3701                        	data
  3702                        L81:
  3703 00:0270: 6B 5F 72 65  	db	$6B,$5F,$72,$65,$61,$64,$5F,$6C,$62,$61,
                    $5F,$73,$65,$63,$74
       00:0274: 61 64 5F 6C 
       00:0278: 62 61 5F 73 
       00:027C: 65 63 74 
  3704 00:027F: 6F 72 3A 00  	db	$6F,$72,$3A,$00,$46,$58,$5F,$41,$54,$41,
                    $5F,$52,$45,$47,$5F
       00:0283: 46 58 5F 41 
       00:0287: 54 41 5F 52 
       00:028B: 45 47 5F 
  Thu Dec  3 2020 22:25                                                Page 73


  3705 00:028E: 53 45 43 43  	db	$53,$45,$43,$43,$4F,$55,$4E,$54,$30,$3A,
                    $00,$46,$58,$5F,$41
       00:0292: 4F 55 4E 54 
       00:0296: 30 3A 00 46 
       00:029A: 58 5F 41 
  3706 00:029D: 54 41 5F 52  	db	$54,$41,$5F,$52,$45,$47,$5F,$48,$44,$44,
                    $45,$56,$53,$45,$4C
       00:02A1: 45 47 5F 48 
       00:02A5: 44 44 45 56 
       00:02A9: 53 45 4C 
  3707 00:02AC: 3A 00 46 58  	db	$3A,$00,$46,$58,$5F,$41,$54,$41,$5F,$52,
                    $45,$47,$5F,$4C,$42
       00:02B0: 5F 41 54 41 
       00:02B4: 5F 52 45 47 
       00:02B8: 5F 4C 42 
  3708 00:02BB: 41 30 3A 00  	db	$41,$30,$3A,$00,$46,$58,$5F,$41,$54,$41,
                    $5F,$52,$45,$47,$5F
       00:02BF: 46 58 5F 41 
       00:02C3: 54 41 5F 52 
       00:02C7: 45 47 5F 
  3709 00:02CA: 4C 42 41 31  	db	$4C,$42,$41,$31,$3A,$00,$46,$58,$5F,$41,
                    $54,$41,$5F,$52,$45
       00:02CE: 3A 00 46 58 
       00:02D2: 5F 41 54 41 
       00:02D6: 5F 52 45 
  3710 00:02D9: 47 5F 4C 42  	db	$47,$5F,$4C,$42,$41,$32,$3A,$00
       00:02DD: 41 32 3A 00 
  3711 00:02E1:              	ends
  3712                        ;
  3713                        ;/**
  3714                        ; *
  3715                        ; */
  3716                        ;
  3717                        ;UCHAR k_read_hd_sector(unsigned long offset,LPCHA
                    R receiveBuffer)
  3718                        ;{
  3719                        	.line	987
  3720                        	.line	988
  3721                        	FXHDD
  3722                        	xdef	~~k_read_hd_sector
  3723                        	func
  3724                        	.function	988
  3725                        ~~k_read_hd_sector:
  3726                        	longa	on
  3727                        	longi	on
  3728 03:89F7: 3B           	tsc
  3729 03:89F8: 38           	sec
  3730 03:89F9: E9 04 00     	sbc	#L88
  3731 03:89FC: 1B           	tcs
  3732 03:89FD: 0B           	phd
  3733 03:89FE: 5B           	tcd
  3734             00000004   offset_0	set	4
  3735             00000008   receiveBuffer_0	set	8
  3736                        	.block	988
  3737                        ;	k_read_lba_sector(offset/512,1,receiveBuffer);
  3738                        	.sym	offset,4,18,6,32
  3739                        	.sym	receiveBuffer,8,142,6,32
  3740                        	.line	989
  Thu Dec  3 2020 22:25                                                Page 74


  3741 03:89FF: D4 0E        	pei	<L88+receiveBuffer_0+2
  3742 03:8A01: D4 0C        	pei	<L88+receiveBuffer_0
  3743 03:8A03: F4 01 00     	pea	#<$1
  3744 03:8A06: D4 0A        	pei	<L88+offset_0+2
  3745 03:8A08: D4 08        	pei	<L88+offset_0
  3746 03:8A0A: A9 09 00     	lda	#$9
  3747                        	xref	~~~llsr
  3748 03:8A0D: 22 xx xx xx  	jsl	~~~llsr
  3749 03:8A11: 85 01        	sta	<R0
  3750 03:8A13: 86 03        	stx	<R0+2
  3751 03:8A15: D4 03        	pei	<R0+2
  3752 03:8A17: D4 01        	pei	<R0
  3753 03:8A19: 22 E8 86 03  	jsl	~~k_read_lba_sector
  3754                        ;	k_debug_byte_array("k_read_hd_sector:\r\n",recei
                    veBuffer,512);
  3755                        	.line	990
  3756 03:8A1D: F4 00 00     	pea	#^$200
  3757 03:8A20: F4 00 02     	pea	#<$200
  3758 03:8A23: D4 0E        	pei	<L88+receiveBuffer_0+2
  3759 03:8A25: D4 0C        	pei	<L88+receiveBuffer_0
  3760 03:8A27: F4 xx xx     	pea	#^L87
  3761 03:8A2A: F4 xx xx     	pea	#<L87
  3762 03:8A2D: 22 xx xx xx  	jsl	~~k_debug_byte_array
  3763                        ;	return 0;
  3764                        	.line	991
  3765 03:8A31: A9 00 00     	lda	#$0
  3766                        L91:
  3767 03:8A34: A8           	tay
  3768 03:8A35: A5 06        	lda	<L88+2
  3769 03:8A37: 85 0E        	sta	<L88+2+8
  3770 03:8A39: A5 05        	lda	<L88+1
  3771 03:8A3B: 85 0D        	sta	<L88+1+8
  3772 03:8A3D: 2B           	pld
  3773 03:8A3E: 3B           	tsc
  3774 03:8A3F: 18           	clc
  3775 03:8A40: 69 0C 00     	adc	#L88+8
  3776 03:8A43: 1B           	tcs
  3777 03:8A44: 98           	tya
  3778 03:8A45: 6B           	rtl
  3779                        ;}
  3780                        	.line	992
  3781                        	.endblock	992
  3782             00000004   L88	equ	4
  3783             00000005   L89	equ	5
  3784 03:8A46:              	ends
  3785                        	efunc
  3786                        	.endfunc	992,5,4
  3787                        	.line	992
  3788                        	data
  3789                        L87:
  3790 00:02E1: 6B 5F 72 65  	db	$6B,$5F,$72,$65,$61,$64,$5F,$68,$64,$5F,
                    $73,$65,$63,$74,$6F
       00:02E5: 61 64 5F 68 
       00:02E9: 64 5F 73 65 
       00:02ED: 63 74 6F 
  3791 00:02F0: 72 3A 0D 0A  	db	$72,$3A,$0D,$0A,$00
       00:02F4: 00 
  3792 00:02F5:              	ends
  Thu Dec  3 2020 22:25                                                Page 75


  3793                        ;
  3794                        ;
  3795                        ;void k_ide_busy(void)
  3796                        ;{
  3797                        	.line	995
  3798                        	.line	996
  3799                        	FXHDD
  3800                        	xdef	~~k_ide_busy
  3801                        	func
  3802                        	.function	996
  3803                        ~~k_ide_busy:
  3804                        	longa	on
  3805                        	longi	on
  3806 03:8A46: 3B           	tsc
  3807 03:8A47: 38           	sec
  3808 03:8A48: E9 03 00     	sbc	#L93
  3809 03:8A4B: 1B           	tcs
  3810 03:8A4C: 0B           	phd
  3811 03:8A4D: 5B           	tcd
  3812                        	.block	996
  3813                        ;	INT timeout = 128;
  3814                        ;	UCHAR sts = 0x80;
  3815                        ;
  3816                        ;	k_debug_hex("k_ide_busy:",0);
  3817             00000000   timeout_1	set	0
  3818             00000002   sts_1	set	2
  3819                        	.sym	timeout,0,5,1,16
  3820                        	.sym	sts,2,14,1,8
  3821 03:8A4E: A9 80 00     	lda	#$80
  3822 03:8A51: 85 01        	sta	<L94+timeout_1
  3823 03:8A53: E2 20        	sep	#$20
  3824                        	longa	off
  3825 03:8A55: A9 80        	lda	#$80
  3826 03:8A57: 85 03        	sta	<L94+sts_1
  3827 03:8A59: C2 20        	rep	#$20
  3828                        	longa	on
  3829                        	.line	1000
  3830 03:8A5B: F4 00 00     	pea	#<$0
  3831 03:8A5E: F4 xx xx     	pea	#^L92
  3832 03:8A61: F4 xx xx     	pea	#<L92
  3833 03:8A64: 22 xx xx xx  	jsl	~~k_debug_hex
  3834                        ;
  3835                        ;	do
  3836                        	.line	1002
  3837                        L10044:
  3838                        ;	{
  3839                        	.line	1003
  3840                        ;		sts = IDE_CMD_STAT[0];
  3841                        	.line	1004
  3842 03:8A68: E2 20        	sep	#$20
  3843                        	longa	off
  3844 03:8A6A: AF 37 E8 AF  	lda	>11528247
  3845 03:8A6E: 85 03        	sta	<L94+sts_1
  3846 03:8A70: C2 20        	rep	#$20
  3847                        	longa	on
  3848                        ;		k_debug_hex("k_ide_busy:sts:",sts);
  3849                        	.line	1005
  3850 03:8A72: D4 03        	pei	<L94+sts_1
  Thu Dec  3 2020 22:25                                                Page 76


  3851 03:8A74: F4 xx xx     	pea	#^L92+12
  3852 03:8A77: F4 xx xx     	pea	#<L92+12
  3853 03:8A7A: 22 xx xx xx  	jsl	~~k_debug_hex
  3854                        ;		if(sts&ATA_SR_ERR)
  3855                        	.line	1006
  3856                        ;		{
  3857 03:8A7E: E2 20        	sep	#$20
  3858                        	longa	off
  3859 03:8A80: A5 03        	lda	<L94+sts_1
  3860 03:8A82: 29 01        	and	#<$1
  3861 03:8A84: C2 20        	rep	#$20
  3862                        	longa	on
  3863 03:8A86: D0 03        	bne	L96
  3864 03:8A88: 82 0F 00     	brl	L10045
  3865                        L96:
  3866                        	.line	1007
  3867                        ;			k_debug_hex("k_ide_busy:ERR:",st
                    s);
  3868                        	.line	1008
  3869 03:8A8B: D4 03        	pei	<L94+sts_1
  3870 03:8A8D: F4 xx xx     	pea	#^L92+28
  3871 03:8A90: F4 xx xx     	pea	#<L92+28
  3872 03:8A93: 22 xx xx xx  	jsl	~~k_debug_hex
  3873                        ;			break;
  3874                        	.line	1009
  3875 03:8A97: 82 1F 00     	brl	L10043
  3876                        ;		}
  3877                        	.line	1010
  3878                        ;		timeout--;
  3879                        L10045:
  3880                        	.line	1011
  3881 03:8A9A: C6 01        	dec	<L94+timeout_1
  3882                        ;	}while((sts&0x80) && timeout > 0);
  3883                        	.line	1012
  3884                        L10042:
  3885 03:8A9C: E2 20        	sep	#$20
  3886                        	longa	off
  3887 03:8A9E: A5 03        	lda	<L94+sts_1
  3888 03:8AA0: 29 80        	and	#<$80
  3889 03:8AA2: C2 20        	rep	#$20
  3890                        	longa	on
  3891 03:8AA4: D0 03        	bne	L98
  3892 03:8AA6: 82 10 00     	brl	L97
  3893                        L98:
  3894 03:8AA9: 38           	sec
  3895 03:8AAA: A9 00 00     	lda	#$0
  3896 03:8AAD: E5 01        	sbc	<L94+timeout_1
  3897 03:8AAF: 70 03        	bvs	L99
  3898 03:8AB1: 49 00 80     	eor	#$8000
  3899                        L99:
  3900 03:8AB4: 30 03        	bmi	L100
  3901 03:8AB6: 82 AF FF     	brl	L10044
  3902                        L100:
  3903                        L97:
  3904                        L10043:
  3905                        ;
  3906                        ;	return;
  3907                        	.line	1014
  Thu Dec  3 2020 22:25                                                Page 77


  3908                        L101:
  3909 03:8AB9: 2B           	pld
  3910 03:8ABA: 3B           	tsc
  3911 03:8ABB: 18           	clc
  3912 03:8ABC: 69 03 00     	adc	#L93
  3913 03:8ABF: 1B           	tcs
  3914 03:8AC0: 6B           	rtl
  3915                        ;}
  3916                        	.line	1015
  3917                        	.endblock	1015
  3918             00000003   L93	equ	3
  3919             00000001   L94	equ	1
  3920 03:8AC1:              	ends
  3921                        	efunc
  3922                        	.endfunc	1015,1,3
  3923                        	.line	1015
  3924                        	data
  3925                        L92:
  3926 00:02F5: 6B 5F 69 64  	db	$6B,$5F,$69,$64,$65,$5F,$62,$75,$73,$79,
                    $3A,$00,$6B,$5F,$69
       00:02F9: 65 5F 62 75 
       00:02FD: 73 79 3A 00 
       00:0301: 6B 5F 69 
  3927 00:0304: 64 65 5F 62  	db	$64,$65,$5F,$62,$75,$73,$79,$3A,$73,$74,
                    $73,$3A,$00,$6B,$5F
       00:0308: 75 73 79 3A 
       00:030C: 73 74 73 3A 
       00:0310: 00 6B 5F 
  3928 00:0313: 69 64 65 5F  	db	$69,$64,$65,$5F,$62,$75,$73,$79,$3A,$45,
                    $52,$52,$3A,$00
       00:0317: 62 75 73 79 
       00:031B: 3A 45 52 52 
       00:031F: 3A 00 
  3929 00:0321:              	ends
  3930                        ;
  3931                        ;void k_ide_drive_ready(void)
  3932                        ;{
  3933                        	.line	1017
  3934                        	.line	1018
  3935                        	FXHDD
  3936                        	xdef	~~k_ide_drive_ready
  3937                        	func
  3938                        	.function	1018
  3939                        ~~k_ide_drive_ready:
  3940                        	longa	on
  3941                        	longi	on
  3942 03:8AC1: 3B           	tsc
  3943 03:8AC2: 38           	sec
  3944 03:8AC3: E9 03 00     	sbc	#L103
  3945 03:8AC6: 1B           	tcs
  3946 03:8AC7: 0B           	phd
  3947 03:8AC8: 5B           	tcd
  3948                        	.block	1018
  3949                        ;	UCHAR sts = 0x00;
  3950                        ;	INT timeout = 255;
  3951                        ;	do
  3952             00000000   sts_1	set	0
  3953             00000001   timeout_1	set	1
  Thu Dec  3 2020 22:25                                                Page 78


  3954                        	.sym	sts,0,14,1,8
  3955                        	.sym	timeout,1,5,1,16
  3956 03:8AC9: E2 20        	sep	#$20
  3957                        	longa	off
  3958 03:8ACB: 64 01        	stz	<L104+sts_1
  3959 03:8ACD: C2 20        	rep	#$20
  3960                        	longa	on
  3961 03:8ACF: A9 FF 00     	lda	#$ff
  3962 03:8AD2: 85 02        	sta	<L104+timeout_1
  3963                        	.line	1021
  3964                        L10048:
  3965                        ;	{
  3966                        	.line	1022
  3967                        ;		sts = IDE_CMD_STAT[0];
  3968                        	.line	1023
  3969 03:8AD4: E2 20        	sep	#$20
  3970                        	longa	off
  3971 03:8AD6: AF 37 E8 AF  	lda	>11528247
  3972 03:8ADA: 85 01        	sta	<L104+sts_1
  3973 03:8ADC: C2 20        	rep	#$20
  3974                        	longa	on
  3975                        ;		k_debug_bits("k_ide_drive_ready:sts:",st
                    s);
  3976                        	.line	1024
  3977 03:8ADE: D4 01        	pei	<L104+sts_1
  3978 03:8AE0: F4 xx xx     	pea	#^L102
  3979 03:8AE3: F4 xx xx     	pea	#<L102
  3980 03:8AE6: 22 xx xx xx  	jsl	~~k_debug_bits
  3981                        ;		if(sts&ATA_SR_ERR)
  3982                        	.line	1025
  3983                        ;		{
  3984 03:8AEA: E2 20        	sep	#$20
  3985                        	longa	off
  3986 03:8AEC: A5 01        	lda	<L104+sts_1
  3987 03:8AEE: 29 01        	and	#<$1
  3988 03:8AF0: C2 20        	rep	#$20
  3989                        	longa	on
  3990 03:8AF2: D0 03        	bne	L106
  3991 03:8AF4: 82 0F 00     	brl	L10049
  3992                        L106:
  3993                        	.line	1026
  3994                        ;			k_debug_hex("k_ide_drive_ready:E
                    RR:",sts);
  3995                        	.line	1027
  3996 03:8AF7: D4 01        	pei	<L104+sts_1
  3997 03:8AF9: F4 xx xx     	pea	#^L102+23
  3998 03:8AFC: F4 xx xx     	pea	#<L102+23
  3999 03:8AFF: 22 xx xx xx  	jsl	~~k_debug_hex
  4000                        ;			break;
  4001                        	.line	1028
  4002 03:8B03: 82 1F 00     	brl	L10047
  4003                        ;		}
  4004                        	.line	1029
  4005                        ;		timeout--;
  4006                        L10049:
  4007                        	.line	1030
  4008 03:8B06: C6 02        	dec	<L104+timeout_1
  4009                        ;	}
  Thu Dec  3 2020 22:25                                                Page 79


  4010                        	.line	1031
  4011                        ;	while((sts&0x40) && timeout > 0);
  4012                        L10046:
  4013 03:8B08: E2 20        	sep	#$20
  4014                        	longa	off
  4015 03:8B0A: A5 01        	lda	<L104+sts_1
  4016 03:8B0C: 29 40        	and	#<$40
  4017 03:8B0E: C2 20        	rep	#$20
  4018                        	longa	on
  4019 03:8B10: D0 03        	bne	L108
  4020 03:8B12: 82 10 00     	brl	L107
  4021                        L108:
  4022 03:8B15: 38           	sec
  4023 03:8B16: A9 00 00     	lda	#$0
  4024 03:8B19: E5 02        	sbc	<L104+timeout_1
  4025 03:8B1B: 70 03        	bvs	L109
  4026 03:8B1D: 49 00 80     	eor	#$8000
  4027                        L109:
  4028 03:8B20: 30 03        	bmi	L110
  4029 03:8B22: 82 AF FF     	brl	L10048
  4030                        L110:
  4031                        L107:
  4032                        L10047:
  4033                        ;
  4034                        ;	return;
  4035                        	.line	1034
  4036                        L111:
  4037 03:8B25: 2B           	pld
  4038 03:8B26: 3B           	tsc
  4039 03:8B27: 18           	clc
  4040 03:8B28: 69 03 00     	adc	#L103
  4041 03:8B2B: 1B           	tcs
  4042 03:8B2C: 6B           	rtl
  4043                        ;}
  4044                        	.line	1035
  4045                        	.endblock	1035
  4046             00000003   L103	equ	3
  4047             00000001   L104	equ	1
  4048 03:8B2D:              	ends
  4049                        	efunc
  4050                        	.endfunc	1035,1,3
  4051                        	.line	1035
  4052                        	data
  4053                        L102:
  4054 00:0321: 6B 5F 69 64  	db	$6B,$5F,$69,$64,$65,$5F,$64,$72,$69,$76,
                    $65,$5F,$72,$65,$61
       00:0325: 65 5F 64 72 
       00:0329: 69 76 65 5F 
       00:032D: 72 65 61 
  4055 00:0330: 64 79 3A 73  	db	$64,$79,$3A,$73,$74,$73,$3A,$00,$6B,$5F,
                    $69,$64,$65,$5F,$64
       00:0334: 74 73 3A 00 
       00:0338: 6B 5F 69 64 
       00:033C: 65 5F 64 
  4056 00:033F: 72 69 76 65  	db	$72,$69,$76,$65,$5F,$72,$65,$61,$64,$79,
                    $3A,$45,$52,$52,$3A
       00:0343: 5F 72 65 61 
       00:0347: 64 79 3A 45 
  Thu Dec  3 2020 22:25                                                Page 80


       00:034B: 52 52 3A 
  4057 00:034E: 00           	db	$00
  4058 00:034F:              	ends
  4059                        ;
  4060                        ;
  4061                        ;void k_ide_drive_ready_notbusy(void)
  4062                        ;{
  4063                        	.line	1038
  4064                        	.line	1039
  4065                        	FXHDD
  4066                        	xdef	~~k_ide_drive_ready_notbusy
  4067                        	func
  4068                        	.function	1039
  4069                        ~~k_ide_drive_ready_notbusy:
  4070                        	longa	on
  4071                        	longi	on
  4072 03:8B2D: 3B           	tsc
  4073 03:8B2E: 38           	sec
  4074 03:8B2F: E9 00 00     	sbc	#L113
  4075 03:8B32: 1B           	tcs
  4076 03:8B33: 0B           	phd
  4077 03:8B34: 5B           	tcd
  4078                        	.block	1039
  4079                        ;
  4080                        ;
  4081                        ;	k_ide_drive_ready();
  4082                        	.line	1042
  4083 03:8B35: 22 C1 8A 03  	jsl	~~k_ide_drive_ready
  4084                        ;	k_ide_busy();
  4085                        	.line	1043
  4086 03:8B39: 22 46 8A 03  	jsl	~~k_ide_busy
  4087                        ;
  4088                        ;
  4089                        ;	return;
  4090                        	.line	1046
  4091                        L116:
  4092 03:8B3D: 2B           	pld
  4093 03:8B3E: 3B           	tsc
  4094 03:8B3F: 18           	clc
  4095 03:8B40: 69 00 00     	adc	#L113
  4096 03:8B43: 1B           	tcs
  4097 03:8B44: 6B           	rtl
  4098                        ;}
  4099                        	.line	1047
  4100                        	.endblock	1047
  4101             00000000   L113	equ	0
  4102             00000001   L114	equ	1
  4103 03:8B45:              	ends
  4104                        	efunc
  4105                        	.endfunc	1047,1,0
  4106                        	.line	1047
  4107                        ;
  4108                        ;/*
  4109                        ;;
  4110                        ;;////////////////////////////////////////////////
                    ////////
  4111                        ;; IDE_NOT_DRQ
  4112                        ;; Indicates that the drive is ready to transfer w
  Thu Dec  3 2020 22:25                                                Page 81


                    ord or byte of data
  4113                        ;; Inputs:
  4114                        ;;  None
  4115                        ;; Affects:
  4116                        ;;   A
  4117                        ;;////////////////////////////////////////////////
                    /////////
  4118                        ;*/
  4119                        ;void k_ide_not_drq(void)
  4120                        ;{
  4121                        	.line	1060
  4122                        	.line	1061
  4123                        	FXHDD
  4124                        	xdef	~~k_ide_not_drq
  4125                        	func
  4126                        	.function	1061
  4127                        ~~k_ide_not_drq:
  4128                        	longa	on
  4129                        	longi	on
  4130 03:8B45: 3B           	tsc
  4131 03:8B46: 38           	sec
  4132 03:8B47: E9 01 00     	sbc	#L117
  4133 03:8B4A: 1B           	tcs
  4134 03:8B4B: 0B           	phd
  4135 03:8B4C: 5B           	tcd
  4136                        	.block	1061
  4137                        ;	UCHAR sts = 0x00;
  4138                        ;
  4139                        ;	do
  4140             00000000   sts_1	set	0
  4141                        	.sym	sts,0,14,1,8
  4142 03:8B4D: E2 20        	sep	#$20
  4143                        	longa	off
  4144 03:8B4F: 64 01        	stz	<L118+sts_1
  4145 03:8B51: C2 20        	rep	#$20
  4146                        	longa	on
  4147                        	.line	1064
  4148                        L10052:
  4149                        ;	{
  4150                        	.line	1065
  4151                        ;		sts = IDE_CMD_STAT[0];
  4152                        	.line	1066
  4153 03:8B53: E2 20        	sep	#$20
  4154                        	longa	off
  4155 03:8B55: AF 37 E8 AF  	lda	>11528247
  4156 03:8B59: 85 01        	sta	<L118+sts_1
  4157 03:8B5B: C2 20        	rep	#$20
  4158                        	longa	on
  4159                        ;		k_debug_hex("k_ide_not_drq:sts:",sts);
  4160                        	.line	1067
  4161 03:8B5D: D4 01        	pei	<L118+sts_1
  4162 03:8B5F: F4 xx xx     	pea	#^L112
  4163 03:8B62: F4 xx xx     	pea	#<L112
  4164 03:8B65: 22 xx xx xx  	jsl	~~k_debug_hex
  4165                        ;		if(sts == ATA_SR_ERR)
  4166                        	.line	1068
  4167                        ;			break;
  4168 03:8B69: E2 20        	sep	#$20
  Thu Dec  3 2020 22:25                                                Page 82


  4169                        	longa	off
  4170 03:8B6B: A5 01        	lda	<L118+sts_1
  4171 03:8B6D: C9 01        	cmp	#<$1
  4172 03:8B6F: C2 20        	rep	#$20
  4173                        	longa	on
  4174 03:8B71: D0 03        	bne	L120
  4175 03:8B73: 82 0D 00     	brl	L10051
  4176                        L120:
  4177                        ;	}
  4178                        	.line	1070
  4179                        ;	while(sts & ATA_SR_DRQ);
  4180                        L10050:
  4181 03:8B76: E2 20        	sep	#$20
  4182                        	longa	off
  4183 03:8B78: A5 01        	lda	<L118+sts_1
  4184 03:8B7A: 29 08        	and	#<$8
  4185 03:8B7C: C2 20        	rep	#$20
  4186                        	longa	on
  4187 03:8B7E: F0 03        	beq	L121
  4188 03:8B80: 82 D0 FF     	brl	L10052
  4189                        L121:
  4190                        L10051:
  4191                        ;
  4192                        ;	return;
  4193                        	.line	1073
  4194                        L122:
  4195 03:8B83: 2B           	pld
  4196 03:8B84: 3B           	tsc
  4197 03:8B85: 18           	clc
  4198 03:8B86: 69 01 00     	adc	#L117
  4199 03:8B89: 1B           	tcs
  4200 03:8B8A: 6B           	rtl
  4201                        ;}
  4202                        	.line	1074
  4203                        	.endblock	1074
  4204             00000001   L117	equ	1
  4205             00000001   L118	equ	1
  4206 03:8B8B:              	ends
  4207                        	efunc
  4208                        	.endfunc	1074,1,1
  4209                        	.line	1074
  4210                        	data
  4211                        L112:
  4212 00:034F: 6B 5F 69 64  	db	$6B,$5F,$69,$64,$65,$5F,$6E,$6F,$74,$5F,
                    $64,$72,$71,$3A,$73
       00:0353: 65 5F 6E 6F 
       00:0357: 74 5F 64 72 
       00:035B: 71 3A 73 
  4213 00:035E: 74 73 3A 00  	db	$74,$73,$3A,$00
  4214 00:0362:              	ends
  4215                        ;
  4216                        ;/*
  4217                        ;			  ;
  4218                        ;;////////////////////////////////////////////////
                    ////////
  4219                        ;; IDE_GET_512BYTES
  4220                        ;; Fetch the Data from the Drive and Save it in th
                    e SDCard Data Buffer
  Thu Dec  3 2020 22:25                                                Page 83


  4221                        ;; Inputs:
  4222                        ;;  None
  4223                        ;; Affects:
  4224                        ;;   None
  4225                        ;;////////////////////////////////////////////////
                    /////////
  4226                        ;IDE_GET_512BYTES
  4227                        ;              setaxl
  4228                        ;              LDA IDE_DATA_LO
  4229                        ;              LDX #$0000
  4230                        ;IDE_GET_INFO_KEEP_FETCHING
  4231                        ;              LDA IDE_DATA_LO
  4232                        ;              STA SDOS_BLK_BEGIN, X
  4233                        ;              ;LDA IDE_DATA_HI
  4234                        ;              ;INX
  4235                        ;              ;STA SDOS_BLK_BEGIN, x
  4236                        ;              INX
  4237                        ;              INX
  4238                        ;              CPX #$0200
  4239                        ;              BNE IDE_GET_INFO_KEEP_FETCHING
  4240                        ;              RTL
  4241                        ;
  4242                        ;*/
  4243                        ;LPCHAR k_ide_read_sector(LPCHAR readBuffer)
  4244                        ;{
  4245                        	.line	1103
  4246                        	.line	1104
  4247                        	FXHDD
  4248                        	xdef	~~k_ide_read_sector
  4249                        	func
  4250                        	.function	1104
  4251                        ~~k_ide_read_sector:
  4252                        	longa	on
  4253                        	longi	on
  4254 03:8B8B: 3B           	tsc
  4255 03:8B8C: 38           	sec
  4256 03:8B8D: E9 08 00     	sbc	#L124
  4257 03:8B90: 1B           	tcs
  4258 03:8B91: 0B           	phd
  4259 03:8B92: 5B           	tcd
  4260             00000004   readBuffer_0	set	4
  4261                        	.block	1104
  4262                        ;	UINT index = 0;
  4263                        ;	UCHAR lo;
  4264                        ;	UCHAR hi;
  4265                        ;
  4266                        ;	//UINT *pword = (UINT*)readBuffer;
  4267                        ;
  4268                        ;	//k_ide_poll(0);
  4269                        ;	//k_ide_not_drq();
  4270                        ;	k_debug_integer("k_ide_read_sector:sts:",512);
  4271             00000000   index_1	set	0
  4272             00000002   lo_1	set	2
  4273             00000003   hi_1	set	3
  4274                        	.sym	index,0,16,1,16
  4275                        	.sym	lo,2,14,1,8
  4276                        	.sym	hi,3,14,1,8
  4277                        	.sym	readBuffer,4,142,6,32
  Thu Dec  3 2020 22:25                                                Page 84


  4278 03:8B93: 64 05        	stz	<L125+index_1
  4279                        	.line	1113
  4280 03:8B95: F4 00 02     	pea	#<$200
  4281 03:8B98: F4 xx xx     	pea	#^L123
  4282 03:8B9B: F4 xx xx     	pea	#<L123
  4283 03:8B9E: 22 xx xx xx  	jsl	~~k_debug_integer
  4284                        ;
  4285                        ;	for(index = 0;index < 512;index+=2)
  4286                        	.line	1115
  4287 03:8BA2: 64 05        	stz	<L125+index_1
  4288                        L10055:
  4289                        ;	{
  4290                        	.line	1116
  4291                        ;		lo = IDE_DATA_LO[0];
  4292                        	.line	1117
  4293 03:8BA4: E2 20        	sep	#$20
  4294                        	longa	off
  4295 03:8BA6: AF 38 E8 AF  	lda	>11528248
  4296 03:8BAA: 85 07        	sta	<L125+lo_1
  4297 03:8BAC: C2 20        	rep	#$20
  4298                        	longa	on
  4299                        ;		hi = IDE_DATA_HI[0];
  4300                        	.line	1118
  4301 03:8BAE: E2 20        	sep	#$20
  4302                        	longa	off
  4303 03:8BB0: AF 39 E8 AF  	lda	>11528249
  4304 03:8BB4: 85 08        	sta	<L125+hi_1
  4305 03:8BB6: C2 20        	rep	#$20
  4306                        	longa	on
  4307                        ;		//k_debug_hex("k_ide_read_sector:lo:",lo
                    );
  4308                        ;		//k_debug_hex("k_ide_read_sector:hi:",hi
                    );
  4309                        ;		readBuffer[index] =   lo;
  4310                        	.line	1121
  4311 03:8BB8: E2 20        	sep	#$20
  4312                        	longa	off
  4313 03:8BBA: A5 07        	lda	<L125+lo_1
  4314 03:8BBC: A4 05        	ldy	<L125+index_1
  4315 03:8BBE: 97 0C        	sta	[<L124+readBuffer_0],Y
  4316 03:8BC0: C2 20        	rep	#$20
  4317                        	longa	on
  4318                        ;		readBuffer[index+1] = hi;
  4319                        	.line	1122
  4320 03:8BC2: A5 05        	lda	<L125+index_1
  4321 03:8BC4: 1A           	ina
  4322 03:8BC5: 85 01        	sta	<R0
  4323 03:8BC7: E2 20        	sep	#$20
  4324                        	longa	off
  4325 03:8BC9: A5 08        	lda	<L125+hi_1
  4326 03:8BCB: A4 01        	ldy	<R0
  4327 03:8BCD: 97 0C        	sta	[<L124+readBuffer_0],Y
  4328 03:8BCF: C2 20        	rep	#$20
  4329                        	longa	on
  4330                        ;	}
  4331                        	.line	1123
  4332                        L10053:
  4333 03:8BD1: E6 05        	inc	<L125+index_1
  Thu Dec  3 2020 22:25                                                Page 85


  4334 03:8BD3: E6 05        	inc	<L125+index_1
  4335 03:8BD5: A5 05        	lda	<L125+index_1
  4336 03:8BD7: C9 00 02     	cmp	#<$200
  4337 03:8BDA: B0 03        	bcs	L127
  4338 03:8BDC: 82 C5 FF     	brl	L10055
  4339                        L127:
  4340                        L10054:
  4341                        ;
  4342                        ;	/*
  4343                        ;	for(index = 0;index < 256;index+=2)
  4344                        ;	{
  4345                        ;		lo = IDE_DATA_LO[0];
  4346                        ;		hi = IDE_DATA_HI[0];
  4347                        ;
  4348                        ;
  4349                        ;		k_debug_hex("k_ide_read_sector:lo:",lo);
  4350                        ;		k_debug_hex("k_ide_read_sector:hi:",hi);
  4351                        ;		readBuffer[index] =   lo;
  4352                        ;		readBuffer[index+1] = hi;
  4353                        ;	}
  4354                        ;	*/
  4355                        ;
  4356                        ;	//k_debug_byte_array("k_ide_read_sector:data:",r
                    eadBuffer,512);
  4357                        ;
  4358                        ;	return readBuffer;
  4359                        	.line	1141
  4360 03:8BDF: A6 0E        	ldx	<L124+readBuffer_0+2
  4361 03:8BE1: A5 0C        	lda	<L124+readBuffer_0
  4362                        L128:
  4363 03:8BE3: A8           	tay
  4364 03:8BE4: A5 0A        	lda	<L124+2
  4365 03:8BE6: 85 0E        	sta	<L124+2+4
  4366 03:8BE8: A5 09        	lda	<L124+1
  4367 03:8BEA: 85 0D        	sta	<L124+1+4
  4368 03:8BEC: 2B           	pld
  4369 03:8BED: 3B           	tsc
  4370 03:8BEE: 18           	clc
  4371 03:8BEF: 69 0C 00     	adc	#L124+4
  4372 03:8BF2: 1B           	tcs
  4373 03:8BF3: 98           	tya
  4374 03:8BF4: 6B           	rtl
  4375                        ;}
  4376                        	.line	1142
  4377                        	.endblock	1142
  4378             00000008   L124	equ	8
  4379             00000005   L125	equ	5
  4380 03:8BF5:              	ends
  4381                        	efunc
  4382                        	.endfunc	1142,5,8
  4383                        	.line	1142
  4384                        	data
  4385                        L123:
  4386 00:0362: 6B 5F 69 64  	db	$6B,$5F,$69,$64,$65,$5F,$72,$65,$61,$64,
                    $5F,$73,$65,$63,$74
       00:0366: 65 5F 72 65 
       00:036A: 61 64 5F 73 
       00:036E: 65 63 74 
  Thu Dec  3 2020 22:25                                                Page 86


  4387 00:0371: 6F 72 3A 73  	db	$6F,$72,$3A,$73,$74,$73,$3A,$00
       00:0375: 74 73 3A 00 
  4388 00:0379:              	ends
  4389                        ;
  4390                        ;
  4391                        ;
  4392                        ;
  4393                        ;int reg_config( void )
  4394                        ;
  4395                        ;{
  4396                        	.line	1147
  4397                        	.line	1149
  4398                        	FXHDD
  4399                        	xdef	~~reg_config
  4400                        	func
  4401                        	.function	1149
  4402                        ~~reg_config:
  4403                        	longa	on
  4404                        	longi	on
  4405 03:8BF5: 3B           	tsc
  4406 03:8BF6: 38           	sec
  4407 03:8BF7: E9 0C 00     	sbc	#L130
  4408 03:8BFA: 1B           	tcs
  4409 03:8BFB: 0B           	phd
  4410 03:8BFC: 5B           	tcd
  4411                        	.block	1149
  4412                        ;   int numDev = 0;
  4413                        ;   unsigned char sc;
  4414                        ;   unsigned char sn;
  4415                        ;   unsigned char cl;
  4416                        ;   unsigned char ch;
  4417                        ;   unsigned char st;
  4418                        ;   unsigned char dc;
  4419                        ;
  4420                        ;   // setup register values
  4421                        ;
  4422                        ;
  4423                        ;   dc = (unsigned char) ( int_use_intr_flag ? 0 :
                     CB_DC_NIEN );
  4424             00000000   numDev_1	set	0
  4425             00000002   sc_1	set	2
  4426             00000003   sn_1	set	3
  4427             00000004   cl_1	set	4
  4428             00000005   ch_1	set	5
  4429             00000006   st_1	set	6
  4430             00000007   dc_1	set	7
  4431                        	.sym	numDev,0,5,1,16
  4432                        	.sym	sc,2,14,1,8
  4433                        	.sym	sn,3,14,1,8
  4434                        	.sym	cl,4,14,1,8
  4435                        	.sym	ch,5,14,1,8
  4436                        	.sym	st,6,14,1,8
  4437                        	.sym	dc,7,14,1,8
  4438 03:8BFD: 64 05        	stz	<L131+numDev_1
  4439                        	.line	1161
  4440 03:8BFF: AD xx xx     	lda	|~~int_use_intr_flag
  4441 03:8C02: 29 FF 00     	and	#$ff
  4442 03:8C05: D0 03        	bne	L134
  Thu Dec  3 2020 22:25                                                Page 87


  4443 03:8C07: 82 05 00     	brl	L133
  4444                        L134:
  4445 03:8C0A: A9 00 00     	lda	#$0
  4446 03:8C0D: 80 03        	bra	L135
  4447                        L133:
  4448 03:8C0F: A9 02 00     	lda	#$2
  4449                        L135:
  4450 03:8C12: 85 01        	sta	<R0
  4451 03:8C14: E2 20        	sep	#$20
  4452                        	longa	off
  4453 03:8C16: A5 01        	lda	<R0
  4454 03:8C18: 85 0C        	sta	<L131+dc_1
  4455 03:8C1A: C2 20        	rep	#$20
  4456                        	longa	on
  4457                        ;   k_debug_hex("dc:",dc);
  4458                        	.line	1162
  4459 03:8C1C: D4 0C        	pei	<L131+dc_1
  4460 03:8C1E: F4 xx xx     	pea	#^L129
  4461 03:8C21: F4 xx xx     	pea	#<L129
  4462 03:8C24: 22 xx xx xx  	jsl	~~k_debug_hex
  4463                        ;
  4464                        ;   // reset Bus Master Error bit
  4465                        ;
  4466                        ;   pio_writeBusMstrStatus( BM_SR_MASK_ERR );
  4467                        	.line	1166
  4468 03:8C28: F4 02 00     	pea	#<$2
  4469 03:8C2B: 22 6D A7 03  	jsl	~~pio_writeBusMstrStatus
  4470                        ;   k_debug_hex("pio_writeBusMstrStatus:",BM_SR_MA
                    SK_ERR);
  4471                        	.line	1167
  4472 03:8C2F: F4 02 00     	pea	#<$2
  4473 03:8C32: F4 xx xx     	pea	#^L129+4
  4474 03:8C35: F4 xx xx     	pea	#<L129+4
  4475 03:8C38: 22 xx xx xx  	jsl	~~k_debug_hex
  4476                        ;   // assume there are no devices
  4477                        ;
  4478                        ;   reg_config_info[0] = REG_CONFIG_TYPE_NONE;
  4479                        	.line	1170
  4480 03:8C3C: 9C xx xx     	stz	|~~reg_config_info
  4481                        ;   reg_config_info[1] = REG_CONFIG_TYPE_NONE;
  4482                        	.line	1171
  4483 03:8C3F: 9C xx xx     	stz	|~~reg_config_info+2
  4484                        ;
  4485                        ;   // set up Device Control register
  4486                        ;
  4487                        ;   pio_outbyte( CB_DC, dc );
  4488                        	.line	1175
  4489 03:8C42: D4 0C        	pei	<L131+dc_1
  4490 03:8C44: F4 08 00     	pea	#<$8
  4491 03:8C47: 22 E7 A7 03  	jsl	~~pio_outbyte
  4492                        ;
  4493                        ;   // lets see if there is a device 0
  4494                        ;
  4495                        ;   pio_outbyte( CB_DH, CB_DH_DEV0 );
  4496                        	.line	1179
  4497 03:8C4B: F4 00 00     	pea	#<$0
  4498 03:8C4E: F4 06 00     	pea	#<$6
  4499 03:8C51: 22 E7 A7 03  	jsl	~~pio_outbyte
  Thu Dec  3 2020 22:25                                                Page 88


  4500                        ;   DELAY400NS;
  4501                        	.line	1180
  4502                        	.line	1180
  4503 03:8C55: F4 08 00     	pea	#<$8
  4504 03:8C58: 22 A8 A7 03  	jsl	~~pio_inbyte
  4505                        	.line	1180
  4506 03:8C5C: F4 08 00     	pea	#<$8
  4507 03:8C5F: 22 A8 A7 03  	jsl	~~pio_inbyte
  4508                        	.line	1180
  4509 03:8C63: F4 08 00     	pea	#<$8
  4510 03:8C66: 22 A8 A7 03  	jsl	~~pio_inbyte
  4511                        	.line	1180
  4512 03:8C6A: F4 08 00     	pea	#<$8
  4513 03:8C6D: 22 A8 A7 03  	jsl	~~pio_inbyte
  4514                        	.line	1180
  4515 03:8C71: F4 08 00     	pea	#<$8
  4516 03:8C74: 22 A8 A7 03  	jsl	~~pio_inbyte
  4517                        	.line	1180
  4518                        	.line	1180
  4519                        ;   pio_outbyte( CB_SC, 0x55 );
  4520                        	.line	1181
  4521 03:8C78: F4 55 00     	pea	#<$55
  4522 03:8C7B: F4 02 00     	pea	#<$2
  4523 03:8C7E: 22 E7 A7 03  	jsl	~~pio_outbyte
  4524                        ;   pio_outbyte( CB_SN, 0xaa );
  4525                        	.line	1182
  4526 03:8C82: F4 AA 00     	pea	#<$aa
  4527 03:8C85: F4 03 00     	pea	#<$3
  4528 03:8C88: 22 E7 A7 03  	jsl	~~pio_outbyte
  4529                        ;   pio_outbyte( CB_SC, 0xaa );
  4530                        	.line	1183
  4531 03:8C8C: F4 AA 00     	pea	#<$aa
  4532 03:8C8F: F4 02 00     	pea	#<$2
  4533 03:8C92: 22 E7 A7 03  	jsl	~~pio_outbyte
  4534                        ;   pio_outbyte( CB_SN, 0x55 );
  4535                        	.line	1184
  4536 03:8C96: F4 55 00     	pea	#<$55
  4537 03:8C99: F4 03 00     	pea	#<$3
  4538 03:8C9C: 22 E7 A7 03  	jsl	~~pio_outbyte
  4539                        ;   pio_outbyte( CB_SC, 0x55 );
  4540                        	.line	1185
  4541 03:8CA0: F4 55 00     	pea	#<$55
  4542 03:8CA3: F4 02 00     	pea	#<$2
  4543 03:8CA6: 22 E7 A7 03  	jsl	~~pio_outbyte
  4544                        ;   pio_outbyte( CB_SN, 0xaa );
  4545                        	.line	1186
  4546 03:8CAA: F4 AA 00     	pea	#<$aa
  4547 03:8CAD: F4 03 00     	pea	#<$3
  4548 03:8CB0: 22 E7 A7 03  	jsl	~~pio_outbyte
  4549                        ;   sc = pio_inbyte( CB_SC );
  4550                        	.line	1187
  4551 03:8CB4: F4 02 00     	pea	#<$2
  4552 03:8CB7: 22 A8 A7 03  	jsl	~~pio_inbyte
  4553 03:8CBB: E2 20        	sep	#$20
  4554                        	longa	off
  4555 03:8CBD: 85 07        	sta	<L131+sc_1
  4556 03:8CBF: C2 20        	rep	#$20
  4557                        	longa	on
  Thu Dec  3 2020 22:25                                                Page 89


  4558                        ;   sn = pio_inbyte( CB_SN );
  4559                        	.line	1188
  4560 03:8CC1: F4 03 00     	pea	#<$3
  4561 03:8CC4: 22 A8 A7 03  	jsl	~~pio_inbyte
  4562 03:8CC8: E2 20        	sep	#$20
  4563                        	longa	off
  4564 03:8CCA: 85 08        	sta	<L131+sn_1
  4565 03:8CCC: C2 20        	rep	#$20
  4566                        	longa	on
  4567                        ;   if ( ( sc == 0x55 ) && ( sn == 0xaa ) )
  4568                        	.line	1189
  4569                        ;      reg_config_info[0] = REG_CONFIG_TYPE_UNKN;
  4570 03:8CCE: E2 20        	sep	#$20
  4571                        	longa	off
  4572 03:8CD0: A5 07        	lda	<L131+sc_1
  4573 03:8CD2: C9 55        	cmp	#<$55
  4574 03:8CD4: C2 20        	rep	#$20
  4575                        	longa	on
  4576 03:8CD6: F0 03        	beq	L136
  4577 03:8CD8: 82 13 00     	brl	L10056
  4578                        L136:
  4579 03:8CDB: E2 20        	sep	#$20
  4580                        	longa	off
  4581 03:8CDD: A5 08        	lda	<L131+sn_1
  4582 03:8CDF: C9 AA        	cmp	#<$aa
  4583 03:8CE1: C2 20        	rep	#$20
  4584                        	longa	on
  4585 03:8CE3: F0 03        	beq	L137
  4586 03:8CE5: 82 06 00     	brl	L10056
  4587                        L137:
  4588                        	.line	1190
  4589 03:8CE8: A9 01 00     	lda	#$1
  4590 03:8CEB: 8D xx xx     	sta	|~~reg_config_info
  4591                        ;
  4592                        ;   k_debug_hex("sc1:",sc);
  4593                        L10056:
  4594                        	.line	1192
  4595 03:8CEE: D4 07        	pei	<L131+sc_1
  4596 03:8CF0: F4 xx xx     	pea	#^L129+28
  4597 03:8CF3: F4 xx xx     	pea	#<L129+28
  4598 03:8CF6: 22 xx xx xx  	jsl	~~k_debug_hex
  4599                        ;   k_debug_hex("sn1:",sn);
  4600                        	.line	1193
  4601 03:8CFA: D4 08        	pei	<L131+sn_1
  4602 03:8CFC: F4 xx xx     	pea	#^L129+33
  4603 03:8CFF: F4 xx xx     	pea	#<L129+33
  4604 03:8D02: 22 xx xx xx  	jsl	~~k_debug_hex
  4605                        ;   // lets see if there is a device 1
  4606                        ;
  4607                        ;   pio_outbyte( CB_DH, CB_DH_DEV1 );
  4608                        	.line	1196
  4609 03:8D06: F4 10 00     	pea	#<$10
  4610 03:8D09: F4 06 00     	pea	#<$6
  4611 03:8D0C: 22 E7 A7 03  	jsl	~~pio_outbyte
  4612                        ;   DELAY400NS;
  4613                        	.line	1197
  4614                        	.line	1197
  4615 03:8D10: F4 08 00     	pea	#<$8
  Thu Dec  3 2020 22:25                                                Page 90


  4616 03:8D13: 22 A8 A7 03  	jsl	~~pio_inbyte
  4617                        	.line	1197
  4618 03:8D17: F4 08 00     	pea	#<$8
  4619 03:8D1A: 22 A8 A7 03  	jsl	~~pio_inbyte
  4620                        	.line	1197
  4621 03:8D1E: F4 08 00     	pea	#<$8
  4622 03:8D21: 22 A8 A7 03  	jsl	~~pio_inbyte
  4623                        	.line	1197
  4624 03:8D25: F4 08 00     	pea	#<$8
  4625 03:8D28: 22 A8 A7 03  	jsl	~~pio_inbyte
  4626                        	.line	1197
  4627 03:8D2C: F4 08 00     	pea	#<$8
  4628 03:8D2F: 22 A8 A7 03  	jsl	~~pio_inbyte
  4629                        	.line	1197
  4630                        	.line	1197
  4631                        ;   pio_outbyte( CB_SC, 0x55 );
  4632                        	.line	1198
  4633 03:8D33: F4 55 00     	pea	#<$55
  4634 03:8D36: F4 02 00     	pea	#<$2
  4635 03:8D39: 22 E7 A7 03  	jsl	~~pio_outbyte
  4636                        ;   pio_outbyte( CB_SN, 0xaa );
  4637                        	.line	1199
  4638 03:8D3D: F4 AA 00     	pea	#<$aa
  4639 03:8D40: F4 03 00     	pea	#<$3
  4640 03:8D43: 22 E7 A7 03  	jsl	~~pio_outbyte
  4641                        ;   pio_outbyte( CB_SC, 0xaa );
  4642                        	.line	1200
  4643 03:8D47: F4 AA 00     	pea	#<$aa
  4644 03:8D4A: F4 02 00     	pea	#<$2
  4645 03:8D4D: 22 E7 A7 03  	jsl	~~pio_outbyte
  4646                        ;   pio_outbyte( CB_SN, 0x55 );
  4647                        	.line	1201
  4648 03:8D51: F4 55 00     	pea	#<$55
  4649 03:8D54: F4 03 00     	pea	#<$3
  4650 03:8D57: 22 E7 A7 03  	jsl	~~pio_outbyte
  4651                        ;   pio_outbyte( CB_SC, 0x55 );
  4652                        	.line	1202
  4653 03:8D5B: F4 55 00     	pea	#<$55
  4654 03:8D5E: F4 02 00     	pea	#<$2
  4655 03:8D61: 22 E7 A7 03  	jsl	~~pio_outbyte
  4656                        ;   pio_outbyte( CB_SN, 0xaa );
  4657                        	.line	1203
  4658 03:8D65: F4 AA 00     	pea	#<$aa
  4659 03:8D68: F4 03 00     	pea	#<$3
  4660 03:8D6B: 22 E7 A7 03  	jsl	~~pio_outbyte
  4661                        ;   sc = pio_inbyte( CB_SC );
  4662                        	.line	1204
  4663 03:8D6F: F4 02 00     	pea	#<$2
  4664 03:8D72: 22 A8 A7 03  	jsl	~~pio_inbyte
  4665 03:8D76: E2 20        	sep	#$20
  4666                        	longa	off
  4667 03:8D78: 85 07        	sta	<L131+sc_1
  4668 03:8D7A: C2 20        	rep	#$20
  4669                        	longa	on
  4670                        ;   sn = pio_inbyte( CB_SN );
  4671                        	.line	1205
  4672 03:8D7C: F4 03 00     	pea	#<$3
  4673 03:8D7F: 22 A8 A7 03  	jsl	~~pio_inbyte
  Thu Dec  3 2020 22:25                                                Page 91


  4674 03:8D83: E2 20        	sep	#$20
  4675                        	longa	off
  4676 03:8D85: 85 08        	sta	<L131+sn_1
  4677 03:8D87: C2 20        	rep	#$20
  4678                        	longa	on
  4679                        ;   if ( ( sc == 0x55 ) && ( sn == 0xaa ) )
  4680                        	.line	1206
  4681                        ;      reg_config_info[1] = REG_CONFIG_TYPE_UNKN;
  4682 03:8D89: E2 20        	sep	#$20
  4683                        	longa	off
  4684 03:8D8B: A5 07        	lda	<L131+sc_1
  4685 03:8D8D: C9 55        	cmp	#<$55
  4686 03:8D8F: C2 20        	rep	#$20
  4687                        	longa	on
  4688 03:8D91: F0 03        	beq	L138
  4689 03:8D93: 82 13 00     	brl	L10057
  4690                        L138:
  4691 03:8D96: E2 20        	sep	#$20
  4692                        	longa	off
  4693 03:8D98: A5 08        	lda	<L131+sn_1
  4694 03:8D9A: C9 AA        	cmp	#<$aa
  4695 03:8D9C: C2 20        	rep	#$20
  4696                        	longa	on
  4697 03:8D9E: F0 03        	beq	L139
  4698 03:8DA0: 82 06 00     	brl	L10057
  4699                        L139:
  4700                        	.line	1207
  4701 03:8DA3: A9 01 00     	lda	#$1
  4702 03:8DA6: 8D xx xx     	sta	|~~reg_config_info+2
  4703                        ;
  4704                        ;   // now we think we know which devices, if any 
                    are there,
  4705                        ;   // so lets try a soft reset (ignoring any erro
                    rs).
  4706                        ;   k_debug_hex("sc2:",sc);
  4707                        L10057:
  4708                        	.line	1211
  4709 03:8DA9: D4 07        	pei	<L131+sc_1
  4710 03:8DAB: F4 xx xx     	pea	#^L129+38
  4711 03:8DAE: F4 xx xx     	pea	#<L129+38
  4712 03:8DB1: 22 xx xx xx  	jsl	~~k_debug_hex
  4713                        ;   k_debug_hex("sn2:",sn);
  4714                        	.line	1212
  4715 03:8DB5: D4 08        	pei	<L131+sn_1
  4716 03:8DB7: F4 xx xx     	pea	#^L129+43
  4717 03:8DBA: F4 xx xx     	pea	#<L129+43
  4718 03:8DBD: 22 xx xx xx  	jsl	~~k_debug_hex
  4719                        ;
  4720                        ;   pio_outbyte( CB_DH, CB_DH_DEV0 );
  4721                        	.line	1214
  4722 03:8DC1: F4 00 00     	pea	#<$0
  4723 03:8DC4: F4 06 00     	pea	#<$6
  4724 03:8DC7: 22 E7 A7 03  	jsl	~~pio_outbyte
  4725                        ;   DELAY400NS;
  4726                        	.line	1215
  4727                        	.line	1215
  4728 03:8DCB: F4 08 00     	pea	#<$8
  4729 03:8DCE: 22 A8 A7 03  	jsl	~~pio_inbyte
  Thu Dec  3 2020 22:25                                                Page 92


  4730                        	.line	1215
  4731 03:8DD2: F4 08 00     	pea	#<$8
  4732 03:8DD5: 22 A8 A7 03  	jsl	~~pio_inbyte
  4733                        	.line	1215
  4734 03:8DD9: F4 08 00     	pea	#<$8
  4735 03:8DDC: 22 A8 A7 03  	jsl	~~pio_inbyte
  4736                        	.line	1215
  4737 03:8DE0: F4 08 00     	pea	#<$8
  4738 03:8DE3: 22 A8 A7 03  	jsl	~~pio_inbyte
  4739                        	.line	1215
  4740 03:8DE7: F4 08 00     	pea	#<$8
  4741 03:8DEA: 22 A8 A7 03  	jsl	~~pio_inbyte
  4742                        	.line	1215
  4743                        	.line	1215
  4744                        ;   reg_reset( 0 );
  4745                        	.line	1216
  4746 03:8DEE: F4 00 00     	pea	#<$0
  4747 03:8DF1: 22 F1 90 03  	jsl	~~reg_reset
  4748                        ;
  4749                        ;   // lets check device 0 again, is device 0 real
                    ly there?
  4750                        ;   // is it ATA or ATAPI?
  4751                        ;
  4752                        ;   pio_outbyte( CB_DH, CB_DH_DEV0 );
  4753                        	.line	1221
  4754 03:8DF5: F4 00 00     	pea	#<$0
  4755 03:8DF8: F4 06 00     	pea	#<$6
  4756 03:8DFB: 22 E7 A7 03  	jsl	~~pio_outbyte
  4757                        ;   DELAY400NS;
  4758                        	.line	1222
  4759                        	.line	1222
  4760 03:8DFF: F4 08 00     	pea	#<$8
  4761 03:8E02: 22 A8 A7 03  	jsl	~~pio_inbyte
  4762                        	.line	1222
  4763 03:8E06: F4 08 00     	pea	#<$8
  4764 03:8E09: 22 A8 A7 03  	jsl	~~pio_inbyte
  4765                        	.line	1222
  4766 03:8E0D: F4 08 00     	pea	#<$8
  4767 03:8E10: 22 A8 A7 03  	jsl	~~pio_inbyte
  4768                        	.line	1222
  4769 03:8E14: F4 08 00     	pea	#<$8
  4770 03:8E17: 22 A8 A7 03  	jsl	~~pio_inbyte
  4771                        	.line	1222
  4772 03:8E1B: F4 08 00     	pea	#<$8
  4773 03:8E1E: 22 A8 A7 03  	jsl	~~pio_inbyte
  4774                        	.line	1222
  4775                        	.line	1222
  4776                        ;   sc = pio_inbyte( CB_SC );
  4777                        	.line	1223
  4778 03:8E22: F4 02 00     	pea	#<$2
  4779 03:8E25: 22 A8 A7 03  	jsl	~~pio_inbyte
  4780 03:8E29: E2 20        	sep	#$20
  4781                        	longa	off
  4782 03:8E2B: 85 07        	sta	<L131+sc_1
  4783 03:8E2D: C2 20        	rep	#$20
  4784                        	longa	on
  4785                        ;   sn = pio_inbyte( CB_SN );
  4786                        	.line	1224
  Thu Dec  3 2020 22:25                                                Page 93


  4787 03:8E2F: F4 03 00     	pea	#<$3
  4788 03:8E32: 22 A8 A7 03  	jsl	~~pio_inbyte
  4789 03:8E36: E2 20        	sep	#$20
  4790                        	longa	off
  4791 03:8E38: 85 08        	sta	<L131+sn_1
  4792 03:8E3A: C2 20        	rep	#$20
  4793                        	longa	on
  4794                        ;
  4795                        ;   k_debug_hex("sc3:",sc);
  4796                        	.line	1226
  4797 03:8E3C: D4 07        	pei	<L131+sc_1
  4798 03:8E3E: F4 xx xx     	pea	#^L129+48
  4799 03:8E41: F4 xx xx     	pea	#<L129+48
  4800 03:8E44: 22 xx xx xx  	jsl	~~k_debug_hex
  4801                        ;   k_debug_hex("sn3:",sn);
  4802                        	.line	1227
  4803 03:8E48: D4 08        	pei	<L131+sn_1
  4804 03:8E4A: F4 xx xx     	pea	#^L129+53
  4805 03:8E4D: F4 xx xx     	pea	#<L129+53
  4806 03:8E50: 22 xx xx xx  	jsl	~~k_debug_hex
  4807                        ;
  4808                        ;   if ( ( sc == 0x01 ) && ( sn == 0x01 ) )
  4809                        	.line	1229
  4810                        ;   {
  4811 03:8E54: E2 20        	sep	#$20
  4812                        	longa	off
  4813 03:8E56: A5 07        	lda	<L131+sc_1
  4814 03:8E58: C9 01        	cmp	#<$1
  4815 03:8E5A: C2 20        	rep	#$20
  4816                        	longa	on
  4817 03:8E5C: F0 03        	beq	L140
  4818 03:8E5E: 82 B5 00     	brl	L10058
  4819                        L140:
  4820 03:8E61: E2 20        	sep	#$20
  4821                        	longa	off
  4822 03:8E63: A5 08        	lda	<L131+sn_1
  4823 03:8E65: C9 01        	cmp	#<$1
  4824 03:8E67: C2 20        	rep	#$20
  4825                        	longa	on
  4826 03:8E69: F0 03        	beq	L141
  4827 03:8E6B: 82 A8 00     	brl	L10058
  4828                        L141:
  4829                        	.line	1230
  4830                        ;      reg_config_info[0] = REG_CONFIG_TYPE_UNKN;
  4831                        	.line	1231
  4832 03:8E6E: A9 01 00     	lda	#$1
  4833 03:8E71: 8D xx xx     	sta	|~~reg_config_info
  4834                        ;      st = pio_inbyte( CB_STAT );
  4835                        	.line	1232
  4836 03:8E74: F4 07 00     	pea	#<$7
  4837 03:8E77: 22 A8 A7 03  	jsl	~~pio_inbyte
  4838 03:8E7B: E2 20        	sep	#$20
  4839                        	longa	off
  4840 03:8E7D: 85 0B        	sta	<L131+st_1
  4841 03:8E7F: C2 20        	rep	#$20
  4842                        	longa	on
  4843                        ;      cl = pio_inbyte( CB_CL );
  4844                        	.line	1233
  Thu Dec  3 2020 22:25                                                Page 94


  4845 03:8E81: F4 04 00     	pea	#<$4
  4846 03:8E84: 22 A8 A7 03  	jsl	~~pio_inbyte
  4847 03:8E88: E2 20        	sep	#$20
  4848                        	longa	off
  4849 03:8E8A: 85 09        	sta	<L131+cl_1
  4850 03:8E8C: C2 20        	rep	#$20
  4851                        	longa	on
  4852                        ;      ch = pio_inbyte( CB_CH );
  4853                        	.line	1234
  4854 03:8E8E: F4 05 00     	pea	#<$5
  4855 03:8E91: 22 A8 A7 03  	jsl	~~pio_inbyte
  4856 03:8E95: E2 20        	sep	#$20
  4857                        	longa	off
  4858 03:8E97: 85 0A        	sta	<L131+ch_1
  4859 03:8E99: C2 20        	rep	#$20
  4860                        	longa	on
  4861                        ;      if ( ( ( cl == 0x14 ) && ( ch == 0xeb ) )  
                         // PATAPI
  4862                        	.line	1235
  4863                        ;           ||
  4864                        ;           ( ( cl == 0x69 ) && ( ch == 0x96 ) )  
                         // SATAPI
  4865                        ;         )
  4866                        ;      {
  4867 03:8E9B: E2 20        	sep	#$20
  4868                        	longa	off
  4869 03:8E9D: A5 09        	lda	<L131+cl_1
  4870 03:8E9F: C9 14        	cmp	#<$14
  4871 03:8EA1: C2 20        	rep	#$20
  4872                        	longa	on
  4873 03:8EA3: F0 03        	beq	L144
  4874 03:8EA5: 82 0D 00     	brl	L143
  4875                        L144:
  4876 03:8EA8: E2 20        	sep	#$20
  4877                        	longa	off
  4878 03:8EAA: A5 0A        	lda	<L131+ch_1
  4879 03:8EAC: C9 EB        	cmp	#<$eb
  4880 03:8EAE: C2 20        	rep	#$20
  4881                        	longa	on
  4882 03:8EB0: D0 03        	bne	L145
  4883 03:8EB2: 82 1A 00     	brl	L142
  4884                        L145:
  4885                        L143:
  4886 03:8EB5: E2 20        	sep	#$20
  4887                        	longa	off
  4888 03:8EB7: A5 09        	lda	<L131+cl_1
  4889 03:8EB9: C9 69        	cmp	#<$69
  4890 03:8EBB: C2 20        	rep	#$20
  4891                        	longa	on
  4892 03:8EBD: F0 03        	beq	L146
  4893 03:8EBF: 82 16 00     	brl	L10059
  4894                        L146:
  4895 03:8EC2: E2 20        	sep	#$20
  4896                        	longa	off
  4897 03:8EC4: A5 0A        	lda	<L131+ch_1
  4898 03:8EC6: C9 96        	cmp	#<$96
  4899 03:8EC8: C2 20        	rep	#$20
  4900                        	longa	on
  Thu Dec  3 2020 22:25                                                Page 95


  4901 03:8ECA: F0 03        	beq	L147
  4902 03:8ECC: 82 09 00     	brl	L10059
  4903                        L147:
  4904                        L142:
  4905                        	.line	1239
  4906                        ;         reg_config_info[0] = REG_CONFIG_TYPE_ATA
                    PI;
  4907                        	.line	1240
  4908 03:8ECF: A9 03 00     	lda	#$3
  4909 03:8ED2: 8D xx xx     	sta	|~~reg_config_info
  4910                        ;      }
  4911                        	.line	1241
  4912                        ;      else
  4913 03:8ED5: 82 3E 00     	brl	L10060
  4914                        L10059:
  4915                        ;      if ( ( st != 0 )
  4916                        	.line	1243
  4917                        ;           &&
  4918                        ;           ( ( ( cl == 0x00 ) && ( ch == 0x00 ) )
                         // PATA
  4919                        ;             ||
  4920                        ;             ( ( cl == 0x3c ) && ( ch == 0xc3 ) )
                     )   // SATA
  4921                        ;         )
  4922                        ;      {
  4923 03:8ED8: A5 0B        	lda	<L131+st_1
  4924 03:8EDA: 29 FF 00     	and	#$ff
  4925 03:8EDD: D0 03        	bne	L148
  4926 03:8EDF: 82 34 00     	brl	L10061
  4927                        L148:
  4928 03:8EE2: A5 09        	lda	<L131+cl_1
  4929 03:8EE4: 29 FF 00     	and	#$ff
  4930 03:8EE7: F0 03        	beq	L151
  4931 03:8EE9: 82 0A 00     	brl	L150
  4932                        L151:
  4933 03:8EEC: A5 0A        	lda	<L131+ch_1
  4934 03:8EEE: 29 FF 00     	and	#$ff
  4935 03:8EF1: D0 03        	bne	L152
  4936 03:8EF3: 82 1A 00     	brl	L149
  4937                        L152:
  4938                        L150:
  4939 03:8EF6: E2 20        	sep	#$20
  4940                        	longa	off
  4941 03:8EF8: A5 09        	lda	<L131+cl_1
  4942 03:8EFA: C9 3C        	cmp	#<$3c
  4943 03:8EFC: C2 20        	rep	#$20
  4944                        	longa	on
  4945 03:8EFE: F0 03        	beq	L153
  4946 03:8F00: 82 13 00     	brl	L10061
  4947                        L153:
  4948 03:8F03: E2 20        	sep	#$20
  4949                        	longa	off
  4950 03:8F05: A5 0A        	lda	<L131+ch_1
  4951 03:8F07: C9 C3        	cmp	#<$c3
  4952 03:8F09: C2 20        	rep	#$20
  4953                        	longa	on
  4954 03:8F0B: F0 03        	beq	L154
  4955 03:8F0D: 82 06 00     	brl	L10061
  Thu Dec  3 2020 22:25                                                Page 96


  4956                        L154:
  4957                        L149:
  4958                        	.line	1249
  4959                        ;         reg_config_info[0] = REG_CONFIG_TYPE_ATA
                    ;
  4960                        	.line	1250
  4961 03:8F10: A9 02 00     	lda	#$2
  4962 03:8F13: 8D xx xx     	sta	|~~reg_config_info
  4963                        ;      }
  4964                        	.line	1251
  4965                        ;   }
  4966                        L10061:
  4967                        L10060:
  4968                        	.line	1252
  4969                        ;
  4970                        ;   // lets check device 1 again, is device 1 real
                    ly there?
  4971                        ;   // is it ATA or ATAPI?
  4972                        ;   k_debug_hex("reg_config_info[0]:",reg_config_i
                    nfo[0]);
  4973                        L10058:
  4974                        	.line	1256
  4975 03:8F16: AD xx xx     	lda	|~~reg_config_info
  4976 03:8F19: 48           	pha
  4977 03:8F1A: F4 xx xx     	pea	#^L129+58
  4978 03:8F1D: F4 xx xx     	pea	#<L129+58
  4979 03:8F20: 22 xx xx xx  	jsl	~~k_debug_hex
  4980                        ;
  4981                        ;   pio_outbyte( CB_DH, CB_DH_DEV1 );
  4982                        	.line	1258
  4983 03:8F24: F4 10 00     	pea	#<$10
  4984 03:8F27: F4 06 00     	pea	#<$6
  4985 03:8F2A: 22 E7 A7 03  	jsl	~~pio_outbyte
  4986                        ;   DELAY400NS;
  4987                        	.line	1259
  4988                        	.line	1259
  4989 03:8F2E: F4 08 00     	pea	#<$8
  4990 03:8F31: 22 A8 A7 03  	jsl	~~pio_inbyte
  4991                        	.line	1259
  4992 03:8F35: F4 08 00     	pea	#<$8
  4993 03:8F38: 22 A8 A7 03  	jsl	~~pio_inbyte
  4994                        	.line	1259
  4995 03:8F3C: F4 08 00     	pea	#<$8
  4996 03:8F3F: 22 A8 A7 03  	jsl	~~pio_inbyte
  4997                        	.line	1259
  4998 03:8F43: F4 08 00     	pea	#<$8
  4999 03:8F46: 22 A8 A7 03  	jsl	~~pio_inbyte
  5000                        	.line	1259
  5001 03:8F4A: F4 08 00     	pea	#<$8
  5002 03:8F4D: 22 A8 A7 03  	jsl	~~pio_inbyte
  5003                        	.line	1259
  5004                        	.line	1259
  5005                        ;   sc = pio_inbyte( CB_SC );
  5006                        	.line	1260
  5007 03:8F51: F4 02 00     	pea	#<$2
  5008 03:8F54: 22 A8 A7 03  	jsl	~~pio_inbyte
  5009 03:8F58: E2 20        	sep	#$20
  5010                        	longa	off
  Thu Dec  3 2020 22:25                                                Page 97


  5011 03:8F5A: 85 07        	sta	<L131+sc_1
  5012 03:8F5C: C2 20        	rep	#$20
  5013                        	longa	on
  5014                        ;   sn = pio_inbyte( CB_SN );
  5015                        	.line	1261
  5016 03:8F5E: F4 03 00     	pea	#<$3
  5017 03:8F61: 22 A8 A7 03  	jsl	~~pio_inbyte
  5018 03:8F65: E2 20        	sep	#$20
  5019                        	longa	off
  5020 03:8F67: 85 08        	sta	<L131+sn_1
  5021 03:8F69: C2 20        	rep	#$20
  5022                        	longa	on
  5023                        ;
  5024                        ;   k_debug_hex("sc4:",sc);
  5025                        	.line	1263
  5026 03:8F6B: D4 07        	pei	<L131+sc_1
  5027 03:8F6D: F4 xx xx     	pea	#^L129+78
  5028 03:8F70: F4 xx xx     	pea	#<L129+78
  5029 03:8F73: 22 xx xx xx  	jsl	~~k_debug_hex
  5030                        ;   k_debug_hex("sn4:",sn);
  5031                        	.line	1264
  5032 03:8F77: D4 08        	pei	<L131+sn_1
  5033 03:8F79: F4 xx xx     	pea	#^L129+83
  5034 03:8F7C: F4 xx xx     	pea	#<L129+83
  5035 03:8F7F: 22 xx xx xx  	jsl	~~k_debug_hex
  5036                        ;
  5037                        ;   if ( ( sc == 0x01 ) && ( sn == 0x01 ) )
  5038                        	.line	1266
  5039                        ;   {
  5040 03:8F83: E2 20        	sep	#$20
  5041                        	longa	off
  5042 03:8F85: A5 07        	lda	<L131+sc_1
  5043 03:8F87: C9 01        	cmp	#<$1
  5044 03:8F89: C2 20        	rep	#$20
  5045                        	longa	on
  5046 03:8F8B: F0 03        	beq	L155
  5047 03:8F8D: 82 B5 00     	brl	L10062
  5048                        L155:
  5049 03:8F90: E2 20        	sep	#$20
  5050                        	longa	off
  5051 03:8F92: A5 08        	lda	<L131+sn_1
  5052 03:8F94: C9 01        	cmp	#<$1
  5053 03:8F96: C2 20        	rep	#$20
  5054                        	longa	on
  5055 03:8F98: F0 03        	beq	L156
  5056 03:8F9A: 82 A8 00     	brl	L10062
  5057                        L156:
  5058                        	.line	1267
  5059                        ;      reg_config_info[1] = REG_CONFIG_TYPE_UNKN;
  5060                        	.line	1268
  5061 03:8F9D: A9 01 00     	lda	#$1
  5062 03:8FA0: 8D xx xx     	sta	|~~reg_config_info+2
  5063                        ;      st = pio_inbyte( CB_STAT );
  5064                        	.line	1269
  5065 03:8FA3: F4 07 00     	pea	#<$7
  5066 03:8FA6: 22 A8 A7 03  	jsl	~~pio_inbyte
  5067 03:8FAA: E2 20        	sep	#$20
  5068                        	longa	off
  Thu Dec  3 2020 22:25                                                Page 98


  5069 03:8FAC: 85 0B        	sta	<L131+st_1
  5070 03:8FAE: C2 20        	rep	#$20
  5071                        	longa	on
  5072                        ;      cl = pio_inbyte( CB_CL );
  5073                        	.line	1270
  5074 03:8FB0: F4 04 00     	pea	#<$4
  5075 03:8FB3: 22 A8 A7 03  	jsl	~~pio_inbyte
  5076 03:8FB7: E2 20        	sep	#$20
  5077                        	longa	off
  5078 03:8FB9: 85 09        	sta	<L131+cl_1
  5079 03:8FBB: C2 20        	rep	#$20
  5080                        	longa	on
  5081                        ;      ch = pio_inbyte( CB_CH );
  5082                        	.line	1271
  5083 03:8FBD: F4 05 00     	pea	#<$5
  5084 03:8FC0: 22 A8 A7 03  	jsl	~~pio_inbyte
  5085 03:8FC4: E2 20        	sep	#$20
  5086                        	longa	off
  5087 03:8FC6: 85 0A        	sta	<L131+ch_1
  5088 03:8FC8: C2 20        	rep	#$20
  5089                        	longa	on
  5090                        ;      if ( ( ( cl == 0x14 ) && ( ch == 0xeb ) )  
                         // PATAPI
  5091                        	.line	1272
  5092                        ;           ||
  5093                        ;           ( ( cl == 0x69 ) && ( ch == 0x96 ) )  
                         // SATAPI
  5094                        ;         )
  5095                        ;      {
  5096 03:8FCA: E2 20        	sep	#$20
  5097                        	longa	off
  5098 03:8FCC: A5 09        	lda	<L131+cl_1
  5099 03:8FCE: C9 14        	cmp	#<$14
  5100 03:8FD0: C2 20        	rep	#$20
  5101                        	longa	on
  5102 03:8FD2: F0 03        	beq	L159
  5103 03:8FD4: 82 0D 00     	brl	L158
  5104                        L159:
  5105 03:8FD7: E2 20        	sep	#$20
  5106                        	longa	off
  5107 03:8FD9: A5 0A        	lda	<L131+ch_1
  5108 03:8FDB: C9 EB        	cmp	#<$eb
  5109 03:8FDD: C2 20        	rep	#$20
  5110                        	longa	on
  5111 03:8FDF: D0 03        	bne	L160
  5112 03:8FE1: 82 1A 00     	brl	L157
  5113                        L160:
  5114                        L158:
  5115 03:8FE4: E2 20        	sep	#$20
  5116                        	longa	off
  5117 03:8FE6: A5 09        	lda	<L131+cl_1
  5118 03:8FE8: C9 69        	cmp	#<$69
  5119 03:8FEA: C2 20        	rep	#$20
  5120                        	longa	on
  5121 03:8FEC: F0 03        	beq	L161
  5122 03:8FEE: 82 16 00     	brl	L10063
  5123                        L161:
  5124 03:8FF1: E2 20        	sep	#$20
  Thu Dec  3 2020 22:25                                                Page 99


  5125                        	longa	off
  5126 03:8FF3: A5 0A        	lda	<L131+ch_1
  5127 03:8FF5: C9 96        	cmp	#<$96
  5128 03:8FF7: C2 20        	rep	#$20
  5129                        	longa	on
  5130 03:8FF9: F0 03        	beq	L162
  5131 03:8FFB: 82 09 00     	brl	L10063
  5132                        L162:
  5133                        L157:
  5134                        	.line	1276
  5135                        ;         reg_config_info[1] = REG_CONFIG_TYPE_ATA
                    PI;
  5136                        	.line	1277
  5137 03:8FFE: A9 03 00     	lda	#$3
  5138 03:9001: 8D xx xx     	sta	|~~reg_config_info+2
  5139                        ;      }
  5140                        	.line	1278
  5141                        ;      else
  5142 03:9004: 82 3E 00     	brl	L10064
  5143                        L10063:
  5144                        ;      if ( ( st != 0 )
  5145                        	.line	1280
  5146                        ;           &&
  5147                        ;           ( ( ( cl == 0x00 ) && ( ch == 0x00 ) )
                         // PATA
  5148                        ;             ||
  5149                        ;             ( ( cl == 0x3c ) && ( ch == 0xc3 ) )
                     )   // SATA
  5150                        ;         )
  5151                        ;      {
  5152 03:9007: A5 0B        	lda	<L131+st_1
  5153 03:9009: 29 FF 00     	and	#$ff
  5154 03:900C: D0 03        	bne	L163
  5155 03:900E: 82 34 00     	brl	L10065
  5156                        L163:
  5157 03:9011: A5 09        	lda	<L131+cl_1
  5158 03:9013: 29 FF 00     	and	#$ff
  5159 03:9016: F0 03        	beq	L166
  5160 03:9018: 82 0A 00     	brl	L165
  5161                        L166:
  5162 03:901B: A5 0A        	lda	<L131+ch_1
  5163 03:901D: 29 FF 00     	and	#$ff
  5164 03:9020: D0 03        	bne	L167
  5165 03:9022: 82 1A 00     	brl	L164
  5166                        L167:
  5167                        L165:
  5168 03:9025: E2 20        	sep	#$20
  5169                        	longa	off
  5170 03:9027: A5 09        	lda	<L131+cl_1
  5171 03:9029: C9 3C        	cmp	#<$3c
  5172 03:902B: C2 20        	rep	#$20
  5173                        	longa	on
  5174 03:902D: F0 03        	beq	L168
  5175 03:902F: 82 13 00     	brl	L10065
  5176                        L168:
  5177 03:9032: E2 20        	sep	#$20
  5178                        	longa	off
  5179 03:9034: A5 0A        	lda	<L131+ch_1
  Thu Dec  3 2020 22:25                                                Page 100


  5180 03:9036: C9 C3        	cmp	#<$c3
  5181 03:9038: C2 20        	rep	#$20
  5182                        	longa	on
  5183 03:903A: F0 03        	beq	L169
  5184 03:903C: 82 06 00     	brl	L10065
  5185                        L169:
  5186                        L164:
  5187                        	.line	1286
  5188                        ;         reg_config_info[1] = REG_CONFIG_TYPE_ATA
                    ;
  5189                        	.line	1287
  5190 03:903F: A9 02 00     	lda	#$2
  5191 03:9042: 8D xx xx     	sta	|~~reg_config_info+2
  5192                        ;      }
  5193                        	.line	1288
  5194                        ;   }
  5195                        L10065:
  5196                        L10064:
  5197                        	.line	1289
  5198                        ;
  5199                        ;   k_debug_hex("reg_config_info[1]:",reg_config_i
                    nfo[1]);
  5200                        L10062:
  5201                        	.line	1291
  5202 03:9045: AD xx xx     	lda	|~~reg_config_info+2
  5203 03:9048: 48           	pha
  5204 03:9049: F4 xx xx     	pea	#^L129+88
  5205 03:904C: F4 xx xx     	pea	#<L129+88
  5206 03:904F: 22 xx xx xx  	jsl	~~k_debug_hex
  5207                        ;   // If possible, select a device that exists, t
                    ry device 0 first.
  5208                        ;
  5209                        ;   if ( reg_config_info[1] != REG_CONFIG_TYPE_NON
                    E )
  5210                        	.line	1294
  5211                        ;   {
  5212 03:9053: AD xx xx     	lda	|~~reg_config_info+2
  5213 03:9056: D0 03        	bne	L170
  5214 03:9058: 82 2F 00     	brl	L10066
  5215                        L170:
  5216                        	.line	1295
  5217                        ;      pio_outbyte( CB_DH, CB_DH_DEV1 );
  5218                        	.line	1296
  5219 03:905B: F4 10 00     	pea	#<$10
  5220 03:905E: F4 06 00     	pea	#<$6
  5221 03:9061: 22 E7 A7 03  	jsl	~~pio_outbyte
  5222                        ;      DELAY400NS;
  5223                        	.line	1297
  5224                        	.line	1297
  5225 03:9065: F4 08 00     	pea	#<$8
  5226 03:9068: 22 A8 A7 03  	jsl	~~pio_inbyte
  5227                        	.line	1297
  5228 03:906C: F4 08 00     	pea	#<$8
  5229 03:906F: 22 A8 A7 03  	jsl	~~pio_inbyte
  5230                        	.line	1297
  5231 03:9073: F4 08 00     	pea	#<$8
  5232 03:9076: 22 A8 A7 03  	jsl	~~pio_inbyte
  5233                        	.line	1297
  Thu Dec  3 2020 22:25                                                Page 101


  5234 03:907A: F4 08 00     	pea	#<$8
  5235 03:907D: 22 A8 A7 03  	jsl	~~pio_inbyte
  5236                        	.line	1297
  5237 03:9081: F4 08 00     	pea	#<$8
  5238 03:9084: 22 A8 A7 03  	jsl	~~pio_inbyte
  5239                        	.line	1297
  5240                        	.line	1297
  5241                        ;      numDev ++ ;
  5242                        	.line	1298
  5243 03:9088: E6 05        	inc	<L131+numDev_1
  5244                        ;   }
  5245                        	.line	1299
  5246                        ;   if ( reg_config_info[0] != REG_CONFIG_TYPE_NON
                    E )
  5247                        L10066:
  5248                        	.line	1300
  5249                        ;   {
  5250 03:908A: AD xx xx     	lda	|~~reg_config_info
  5251 03:908D: D0 03        	bne	L171
  5252 03:908F: 82 2F 00     	brl	L10067
  5253                        L171:
  5254                        	.line	1301
  5255                        ;      pio_outbyte( CB_DH, CB_DH_DEV0 );
  5256                        	.line	1302
  5257 03:9092: F4 00 00     	pea	#<$0
  5258 03:9095: F4 06 00     	pea	#<$6
  5259 03:9098: 22 E7 A7 03  	jsl	~~pio_outbyte
  5260                        ;      DELAY400NS;
  5261                        	.line	1303
  5262                        	.line	1303
  5263 03:909C: F4 08 00     	pea	#<$8
  5264 03:909F: 22 A8 A7 03  	jsl	~~pio_inbyte
  5265                        	.line	1303
  5266 03:90A3: F4 08 00     	pea	#<$8
  5267 03:90A6: 22 A8 A7 03  	jsl	~~pio_inbyte
  5268                        	.line	1303
  5269 03:90AA: F4 08 00     	pea	#<$8
  5270 03:90AD: 22 A8 A7 03  	jsl	~~pio_inbyte
  5271                        	.line	1303
  5272 03:90B1: F4 08 00     	pea	#<$8
  5273 03:90B4: 22 A8 A7 03  	jsl	~~pio_inbyte
  5274                        	.line	1303
  5275 03:90B8: F4 08 00     	pea	#<$8
  5276 03:90BB: 22 A8 A7 03  	jsl	~~pio_inbyte
  5277                        	.line	1303
  5278                        	.line	1303
  5279                        ;      numDev ++ ;
  5280                        	.line	1304
  5281 03:90BF: E6 05        	inc	<L131+numDev_1
  5282                        ;   }
  5283                        	.line	1305
  5284                        ;
  5285                        ;   // BMIDE Error=1?
  5286                        ;
  5287                        ;   if ( pio_readBusMstrStatus() & BM_SR_MASK_ERR 
                    )
  5288                        L10067:
  5289                        	.line	1309
  Thu Dec  3 2020 22:25                                                Page 102


  5290                        ;   {
  5291 03:90C1: 22 F8 A6 03  	jsl	~~pio_readBusMstrStatus
  5292 03:90C5: E2 20        	sep	#$20
  5293                        	longa	off
  5294 03:90C7: 29 02        	and	#<$2
  5295 03:90C9: C2 20        	rep	#$20
  5296                        	longa	on
  5297 03:90CB: D0 03        	bne	L172
  5298 03:90CD: 82 09 00     	brl	L10068
  5299                        L172:
  5300                        	.line	1310
  5301                        ;      reg_cmd_info.ec = 78;                  // y
                    es
  5302                        	.line	1311
  5303 03:90D0: E2 20        	sep	#$20
  5304                        	longa	off
  5305 03:90D2: A9 4E        	lda	#$4e
  5306 03:90D4: 8D xx xx     	sta	|~~reg_cmd_info+31
  5307 03:90D7: C2 20        	rep	#$20
  5308                        	longa	on
  5309                        ;   }
  5310                        	.line	1312
  5311                        ;
  5312                        ;   // return the number of devices found
  5313                        ;   k_debug_hex("numDev:",numDev);
  5314                        L10068:
  5315                        	.line	1315
  5316 03:90D9: D4 05        	pei	<L131+numDev_1
  5317 03:90DB: F4 xx xx     	pea	#^L129+108
  5318 03:90DE: F4 xx xx     	pea	#<L129+108
  5319 03:90E1: 22 xx xx xx  	jsl	~~k_debug_hex
  5320                        ;
  5321                        ;   return numDev;
  5322                        	.line	1317
  5323 03:90E5: A5 05        	lda	<L131+numDev_1
  5324                        L173:
  5325 03:90E7: A8           	tay
  5326 03:90E8: 2B           	pld
  5327 03:90E9: 3B           	tsc
  5328 03:90EA: 18           	clc
  5329 03:90EB: 69 0C 00     	adc	#L130
  5330 03:90EE: 1B           	tcs
  5331 03:90EF: 98           	tya
  5332 03:90F0: 6B           	rtl
  5333                        ;}
  5334                        	.line	1318
  5335                        	.endblock	1318
  5336             0000000C   L130	equ	12
  5337             00000005   L131	equ	5
  5338 03:90F1:              	ends
  5339                        	efunc
  5340                        	.endfunc	1318,5,12
  5341                        	.line	1318
  5342                        	data
  5343                        L129:
  5344 00:0379: 64 63 3A 00  	db	$64,$63,$3A,$00,$70,$69,$6F,$5F,$77,$72,
                    $69,$74,$65,$42,$75
       00:037D: 70 69 6F 5F 
  Thu Dec  3 2020 22:25                                                Page 103


       00:0381: 77 72 69 74 
       00:0385: 65 42 75 
  5345 00:0388: 73 4D 73 74  	db	$73,$4D,$73,$74,$72,$53,$74,$61,$74,$75,
                    $73,$3A,$00,$73,$63
       00:038C: 72 53 74 61 
       00:0390: 74 75 73 3A 
       00:0394: 00 73 63 
  5346 00:0397: 31 3A 00 73  	db	$31,$3A,$00,$73,$6E,$31,$3A,$00,$73,$63,
                    $32,$3A,$00,$73,$6E
       00:039B: 6E 31 3A 00 
       00:039F: 73 63 32 3A 
       00:03A3: 00 73 6E 
  5347 00:03A6: 32 3A 00 73  	db	$32,$3A,$00,$73,$63,$33,$3A,$00,$73,$6E,
                    $33,$3A,$00,$72,$65
       00:03AA: 63 33 3A 00 
       00:03AE: 73 6E 33 3A 
       00:03B2: 00 72 65 
  5348 00:03B5: 67 5F 63 6F  	db	$67,$5F,$63,$6F,$6E,$66,$69,$67,$5F,$69,
                    $6E,$66,$6F,$5B,$30
       00:03B9: 6E 66 69 67 
       00:03BD: 5F 69 6E 66 
       00:03C1: 6F 5B 30 
  5349 00:03C4: 5D 3A 00 73  	db	$5D,$3A,$00,$73,$63,$34,$3A,$00,$73,$6E,
                    $34,$3A,$00,$72,$65
       00:03C8: 63 34 3A 00 
       00:03CC: 73 6E 34 3A 
       00:03D0: 00 72 65 
  5350 00:03D3: 67 5F 63 6F  	db	$67,$5F,$63,$6F,$6E,$66,$69,$67,$5F,$69,
                    $6E,$66,$6F,$5B,$31
       00:03D7: 6E 66 69 67 
       00:03DB: 5F 69 6E 66 
       00:03DF: 6F 5B 31 
  5351 00:03E2: 5D 3A 00 6E  	db	$5D,$3A,$00,$6E,$75,$6D,$44,$65,$76,$3A,
                    $00
       00:03E6: 75 6D 44 65 
       00:03EA: 76 3A 00 
  5352 00:03ED:              	ends
  5353                        ;
  5354                        ;//***********************************************
                    **************
  5355                        ;//
  5356                        ;// reg_reset() - Execute a Software Reset.
  5357                        ;//
  5358                        ;// See ATA-2 Section 9.2, ATA-3 Section 9.2, ATA-
                    4 Section 8.3.
  5359                        ;//
  5360                        ;//***********************************************
                    **************
  5361                        ;
  5362                        ;int reg_reset( unsigned char devRtrn )
  5363                        ;
  5364                        ;{
  5365                        	.line	1328
  5366                        	.line	1330
  5367                        	FXHDD
  5368                        	xdef	~~reg_reset
  5369                        	func
  5370                        	.function	1330
  Thu Dec  3 2020 22:25                                                Page 104


  5371                        ~~reg_reset:
  5372                        	longa	on
  5373                        	longi	on
  5374 03:90F1: 3B           	tsc
  5375 03:90F2: 38           	sec
  5376 03:90F3: E9 08 00     	sbc	#L175
  5377 03:90F6: 1B           	tcs
  5378 03:90F7: 0B           	phd
  5379 03:90F8: 5B           	tcd
  5380             00000004   devRtrn_0	set	4
  5381                        	.block	1330
  5382                        ;   unsigned char sc;
  5383                        ;   unsigned char sn;
  5384                        ;   unsigned char status;
  5385                        ;   unsigned char dc;
  5386                        ;
  5387                        ;   // setup register values
  5388                        ;
  5389                        ;   dc = (unsigned char) ( int_use_intr_flag ? 0 :
                     CB_DC_NIEN );
  5390             00000000   sc_1	set	0
  5391             00000001   sn_1	set	1
  5392             00000002   status_1	set	2
  5393             00000003   dc_1	set	3
  5394                        	.sym	sc,0,14,1,8
  5395                        	.sym	sn,1,14,1,8
  5396                        	.sym	status,2,14,1,8
  5397                        	.sym	dc,3,14,1,8
  5398                        	.sym	devRtrn,4,14,6,8
  5399                        	.line	1338
  5400 03:90F9: AD xx xx     	lda	|~~int_use_intr_flag
  5401 03:90FC: 29 FF 00     	and	#$ff
  5402 03:90FF: D0 03        	bne	L179
  5403 03:9101: 82 05 00     	brl	L178
  5404                        L179:
  5405 03:9104: A9 00 00     	lda	#$0
  5406 03:9107: 80 03        	bra	L180
  5407                        L178:
  5408 03:9109: A9 02 00     	lda	#$2
  5409                        L180:
  5410 03:910C: 85 01        	sta	<R0
  5411 03:910E: E2 20        	sep	#$20
  5412                        	longa	off
  5413 03:9110: A5 01        	lda	<R0
  5414 03:9112: 85 08        	sta	<L176+dc_1
  5415 03:9114: C2 20        	rep	#$20
  5416                        	longa	on
  5417                        ;
  5418                        ;   k_debug_hex("reg_reset:dc:",dc);
  5419                        	.line	1340
  5420 03:9116: D4 08        	pei	<L176+dc_1
  5421 03:9118: F4 xx xx     	pea	#^L174
  5422 03:911B: F4 xx xx     	pea	#<L174
  5423 03:911E: 22 xx xx xx  	jsl	~~k_debug_hex
  5424                        ;
  5425                        ;   // reset Bus Master Error bit
  5426                        ;
  5427                        ;   pio_writeBusMstrStatus( BM_SR_MASK_ERR );
  Thu Dec  3 2020 22:25                                                Page 105


  5428                        	.line	1344
  5429 03:9122: F4 02 00     	pea	#<$2
  5430 03:9125: 22 6D A7 03  	jsl	~~pio_writeBusMstrStatus
  5431                        ;
  5432                        ;   // initialize the command timeout counter
  5433                        ;
  5434                        ;   k_debug_hex("reg_reset:tmr_set_timeout:",dc);
  5435                        	.line	1348
  5436 03:9129: D4 08        	pei	<L176+dc_1
  5437 03:912B: F4 xx xx     	pea	#^L174+14
  5438 03:912E: F4 xx xx     	pea	#<L174+14
  5439 03:9131: 22 xx xx xx  	jsl	~~k_debug_hex
  5440                        ;   tmr_set_timeout();
  5441                        	.line	1349
  5442 03:9135: 22 F7 AC 03  	jsl	~~tmr_set_timeout
  5443                        ;
  5444                        ;   // Set and then reset the soft reset bit in th
                    e Device Control
  5445                        ;   // register.  This causes device 0 be selected
                    .
  5446                        ;
  5447                        ;   pio_outbyte( CB_DC, (unsigned char) ( dc | CB_
                    DC_SRST ) );
  5448                        	.line	1354
  5449 03:9139: A5 08        	lda	<L176+dc_1
  5450 03:913B: 29 FF 00     	and	#$ff
  5451 03:913E: 09 04 00     	ora	#<$4
  5452 03:9141: 48           	pha
  5453 03:9142: F4 08 00     	pea	#<$8
  5454 03:9145: 22 E7 A7 03  	jsl	~~pio_outbyte
  5455                        ;   DELAY400NS;
  5456                        	.line	1355
  5457                        	.line	1355
  5458 03:9149: F4 08 00     	pea	#<$8
  5459 03:914C: 22 A8 A7 03  	jsl	~~pio_inbyte
  5460                        	.line	1355
  5461 03:9150: F4 08 00     	pea	#<$8
  5462 03:9153: 22 A8 A7 03  	jsl	~~pio_inbyte
  5463                        	.line	1355
  5464 03:9157: F4 08 00     	pea	#<$8
  5465 03:915A: 22 A8 A7 03  	jsl	~~pio_inbyte
  5466                        	.line	1355
  5467 03:915E: F4 08 00     	pea	#<$8
  5468 03:9161: 22 A8 A7 03  	jsl	~~pio_inbyte
  5469                        	.line	1355
  5470 03:9165: F4 08 00     	pea	#<$8
  5471 03:9168: 22 A8 A7 03  	jsl	~~pio_inbyte
  5472                        	.line	1355
  5473                        	.line	1355
  5474                        ;   pio_outbyte( CB_DC, dc );
  5475                        	.line	1356
  5476 03:916C: D4 08        	pei	<L176+dc_1
  5477 03:916E: F4 08 00     	pea	#<$8
  5478 03:9171: 22 E7 A7 03  	jsl	~~pio_outbyte
  5479                        ;   DELAY400NS;
  5480                        	.line	1357
  5481                        	.line	1357
  5482 03:9175: F4 08 00     	pea	#<$8
  Thu Dec  3 2020 22:25                                                Page 106


  5483 03:9178: 22 A8 A7 03  	jsl	~~pio_inbyte
  5484                        	.line	1357
  5485 03:917C: F4 08 00     	pea	#<$8
  5486 03:917F: 22 A8 A7 03  	jsl	~~pio_inbyte
  5487                        	.line	1357
  5488 03:9183: F4 08 00     	pea	#<$8
  5489 03:9186: 22 A8 A7 03  	jsl	~~pio_inbyte
  5490                        	.line	1357
  5491 03:918A: F4 08 00     	pea	#<$8
  5492 03:918D: 22 A8 A7 03  	jsl	~~pio_inbyte
  5493                        	.line	1357
  5494 03:9191: F4 08 00     	pea	#<$8
  5495 03:9194: 22 A8 A7 03  	jsl	~~pio_inbyte
  5496                        	.line	1357
  5497                        	.line	1357
  5498                        ;
  5499                        ;   // If there is a device 0, wait for device 0 t
                    o set BSY=0.
  5500                        ;
  5501                        ;   if ( reg_config_info[0] != REG_CONFIG_TYPE_NON
                    E )
  5502                        	.line	1361
  5503                        ;   {
  5504 03:9198: AD xx xx     	lda	|~~reg_config_info
  5505 03:919B: D0 03        	bne	L181
  5506 03:919D: 82 3C 00     	brl	L10069
  5507                        L181:
  5508                        	.line	1362
  5509                        ;      while ( 1 )
  5510                        	.line	1363
  5511                        L10070:
  5512                        ;      {
  5513                        	.line	1364
  5514                        ;         status = pio_inbyte( CB_STAT );
  5515                        	.line	1365
  5516 03:91A0: F4 07 00     	pea	#<$7
  5517 03:91A3: 22 A8 A7 03  	jsl	~~pio_inbyte
  5518 03:91A7: E2 20        	sep	#$20
  5519                        	longa	off
  5520 03:91A9: 85 07        	sta	<L176+status_1
  5521 03:91AB: C2 20        	rep	#$20
  5522                        	longa	on
  5523                        ;         if ( ( status & CB_STAT_BSY ) == 0 )
  5524                        	.line	1366
  5525                        ;            break;
  5526 03:91AD: E2 20        	sep	#$20
  5527                        	longa	off
  5528 03:91AF: A5 07        	lda	<L176+status_1
  5529 03:91B1: 29 80        	and	#<$80
  5530 03:91B3: C2 20        	rep	#$20
  5531                        	longa	on
  5532 03:91B5: D0 03        	bne	L182
  5533 03:91B7: 82 22 00     	brl	L10071
  5534                        L182:
  5535                        ;         if ( tmr_chk_timeout() )
  5536                        	.line	1368
  5537                        ;         {
  5538 03:91BA: 22 1F AD 03  	jsl	~~tmr_chk_timeout
  Thu Dec  3 2020 22:25                                                Page 107


  5539 03:91BE: AA           	tax
  5540 03:91BF: D0 03        	bne	L183
  5541 03:91C1: 82 15 00     	brl	L10072
  5542                        L183:
  5543                        	.line	1369
  5544                        ;            reg_cmd_info.to = 1;
  5545                        	.line	1370
  5546 03:91C4: E2 20        	sep	#$20
  5547                        	longa	off
  5548 03:91C6: A9 01        	lda	#$1
  5549 03:91C8: 8D xx xx     	sta	|~~reg_cmd_info+32
  5550 03:91CB: C2 20        	rep	#$20
  5551                        	longa	on
  5552                        ;            reg_cmd_info.ec = 1;
  5553                        	.line	1371
  5554 03:91CD: E2 20        	sep	#$20
  5555                        	longa	off
  5556 03:91CF: A9 01        	lda	#$1
  5557 03:91D1: 8D xx xx     	sta	|~~reg_cmd_info+31
  5558 03:91D4: C2 20        	rep	#$20
  5559                        	longa	on
  5560                        ;            break;
  5561                        	.line	1372
  5562 03:91D6: 82 03 00     	brl	L10071
  5563                        ;         }
  5564                        	.line	1373
  5565                        ;      }
  5566                        L10072:
  5567                        	.line	1374
  5568 03:91D9: 82 C4 FF     	brl	L10070
  5569                        L10071:
  5570                        ;   }
  5571                        	.line	1375
  5572                        ;
  5573                        ;   // If there is a device 1, wait until device 1
                     allows
  5574                        ;   // register access.
  5575                        ;
  5576                        ;   if ( reg_config_info[1] != REG_CONFIG_TYPE_NON
                    E )
  5577                        L10069:
  5578                        	.line	1380
  5579                        ;   {
  5580 03:91DC: AD xx xx     	lda	|~~reg_config_info+2
  5581 03:91DF: D0 03        	bne	L184
  5582 03:91E1: 82 A9 00     	brl	L10073
  5583                        L184:
  5584                        	.line	1381
  5585                        ;      while ( 1 )
  5586                        	.line	1382
  5587                        L10074:
  5588                        ;      {
  5589                        	.line	1383
  5590                        ;         pio_outbyte( CB_DH, CB_DH_DEV1 );
  5591                        	.line	1384
  5592 03:91E4: F4 10 00     	pea	#<$10
  5593 03:91E7: F4 06 00     	pea	#<$6
  5594 03:91EA: 22 E7 A7 03  	jsl	~~pio_outbyte
  Thu Dec  3 2020 22:25                                                Page 108


  5595                        ;         DELAY400NS;
  5596                        	.line	1385
  5597                        	.line	1385
  5598 03:91EE: F4 08 00     	pea	#<$8
  5599 03:91F1: 22 A8 A7 03  	jsl	~~pio_inbyte
  5600                        	.line	1385
  5601 03:91F5: F4 08 00     	pea	#<$8
  5602 03:91F8: 22 A8 A7 03  	jsl	~~pio_inbyte
  5603                        	.line	1385
  5604 03:91FC: F4 08 00     	pea	#<$8
  5605 03:91FF: 22 A8 A7 03  	jsl	~~pio_inbyte
  5606                        	.line	1385
  5607 03:9203: F4 08 00     	pea	#<$8
  5608 03:9206: 22 A8 A7 03  	jsl	~~pio_inbyte
  5609                        	.line	1385
  5610 03:920A: F4 08 00     	pea	#<$8
  5611 03:920D: 22 A8 A7 03  	jsl	~~pio_inbyte
  5612                        	.line	1385
  5613                        	.line	1385
  5614                        ;         sc = pio_inbyte( CB_SC );
  5615                        	.line	1386
  5616 03:9211: F4 02 00     	pea	#<$2
  5617 03:9214: 22 A8 A7 03  	jsl	~~pio_inbyte
  5618 03:9218: E2 20        	sep	#$20
  5619                        	longa	off
  5620 03:921A: 85 05        	sta	<L176+sc_1
  5621 03:921C: C2 20        	rep	#$20
  5622                        	longa	on
  5623                        ;         sn = pio_inbyte( CB_SN );
  5624                        	.line	1387
  5625 03:921E: F4 03 00     	pea	#<$3
  5626 03:9221: 22 A8 A7 03  	jsl	~~pio_inbyte
  5627 03:9225: E2 20        	sep	#$20
  5628                        	longa	off
  5629 03:9227: 85 06        	sta	<L176+sn_1
  5630 03:9229: C2 20        	rep	#$20
  5631                        	longa	on
  5632                        ;         if ( ( sc == 0x01 ) && ( sn == 0x01 ) )
  5633                        	.line	1388
  5634                        ;            break;
  5635 03:922B: E2 20        	sep	#$20
  5636                        	longa	off
  5637 03:922D: A5 05        	lda	<L176+sc_1
  5638 03:922F: C9 01        	cmp	#<$1
  5639 03:9231: C2 20        	rep	#$20
  5640                        	longa	on
  5641 03:9233: F0 03        	beq	L186
  5642 03:9235: 82 0D 00     	brl	L185
  5643                        L186:
  5644 03:9238: E2 20        	sep	#$20
  5645                        	longa	off
  5646 03:923A: A5 06        	lda	<L176+sn_1
  5647 03:923C: C9 01        	cmp	#<$1
  5648 03:923E: C2 20        	rep	#$20
  5649                        	longa	on
  5650 03:9240: D0 03        	bne	L187
  5651 03:9242: 82 22 00     	brl	L10075
  5652                        L187:
  Thu Dec  3 2020 22:25                                                Page 109


  5653                        L185:
  5654                        ;         if ( tmr_chk_timeout() )
  5655                        	.line	1390
  5656                        ;         {
  5657 03:9245: 22 1F AD 03  	jsl	~~tmr_chk_timeout
  5658 03:9249: AA           	tax
  5659 03:924A: D0 03        	bne	L188
  5660 03:924C: 82 15 00     	brl	L10076
  5661                        L188:
  5662                        	.line	1391
  5663                        ;            reg_cmd_info.to = 1;
  5664                        	.line	1392
  5665 03:924F: E2 20        	sep	#$20
  5666                        	longa	off
  5667 03:9251: A9 01        	lda	#$1
  5668 03:9253: 8D xx xx     	sta	|~~reg_cmd_info+32
  5669 03:9256: C2 20        	rep	#$20
  5670                        	longa	on
  5671                        ;            reg_cmd_info.ec = 2;
  5672                        	.line	1393
  5673 03:9258: E2 20        	sep	#$20
  5674                        	longa	off
  5675 03:925A: A9 02        	lda	#$2
  5676 03:925C: 8D xx xx     	sta	|~~reg_cmd_info+31
  5677 03:925F: C2 20        	rep	#$20
  5678                        	longa	on
  5679                        ;            break;
  5680                        	.line	1394
  5681 03:9261: 82 03 00     	brl	L10075
  5682                        ;         }
  5683                        	.line	1395
  5684                        ;      }
  5685                        L10076:
  5686                        	.line	1396
  5687 03:9264: 82 7D FF     	brl	L10074
  5688                        L10075:
  5689                        ;
  5690                        ;      // Now check if drive 1 set BSY=0.
  5691                        ;
  5692                        ;      if ( reg_cmd_info.ec == 0 )
  5693                        	.line	1400
  5694                        ;      {
  5695 03:9267: AD xx xx     	lda	|~~reg_cmd_info+31
  5696 03:926A: 29 FF 00     	and	#$ff
  5697 03:926D: F0 03        	beq	L189
  5698 03:926F: 82 1B 00     	brl	L10077
  5699                        L189:
  5700                        	.line	1401
  5701                        ;         if ( pio_inbyte( CB_STAT ) & CB_STAT_BSY
                     )
  5702                        	.line	1402
  5703                        ;         {
  5704 03:9272: F4 07 00     	pea	#<$7
  5705 03:9275: 22 A8 A7 03  	jsl	~~pio_inbyte
  5706 03:9279: E2 20        	sep	#$20
  5707                        	longa	off
  5708 03:927B: 29 80        	and	#<$80
  5709 03:927D: C2 20        	rep	#$20
  Thu Dec  3 2020 22:25                                                Page 110


  5710                        	longa	on
  5711 03:927F: D0 03        	bne	L190
  5712 03:9281: 82 09 00     	brl	L10078
  5713                        L190:
  5714                        	.line	1403
  5715                        ;            reg_cmd_info.ec = 3;
  5716                        	.line	1404
  5717 03:9284: E2 20        	sep	#$20
  5718                        	longa	off
  5719 03:9286: A9 03        	lda	#$3
  5720 03:9288: 8D xx xx     	sta	|~~reg_cmd_info+31
  5721 03:928B: C2 20        	rep	#$20
  5722                        	longa	on
  5723                        ;         }
  5724                        	.line	1405
  5725                        ;      }
  5726                        L10078:
  5727                        	.line	1406
  5728                        ;   }
  5729                        L10077:
  5730                        	.line	1407
  5731                        ;
  5732                        ;   // RESET_DONE:
  5733                        ;
  5734                        ;   // We are done but now we must select the devi
                    ce the caller
  5735                        ;   // requested. This will cause
  5736                        ;   // the correct data to be returned in reg_cmd_
                    info.
  5737                        ;
  5738                        ;   pio_outbyte( CB_DH, (unsigned char) ( devRtrn 
                    ? CB_DH_DEV1 : CB_DH_DEV0 ) );
  5739                        L10073:
  5740                        	.line	1415
  5741 03:928D: A5 0C        	lda	<L175+devRtrn_0
  5742 03:928F: 29 FF 00     	and	#$ff
  5743 03:9292: D0 03        	bne	L192
  5744 03:9294: 82 05 00     	brl	L191
  5745                        L192:
  5746 03:9297: A9 10 00     	lda	#$10
  5747 03:929A: 80 03        	bra	L193
  5748                        L191:
  5749 03:929C: A9 00 00     	lda	#$0
  5750                        L193:
  5751 03:929F: 48           	pha
  5752 03:92A0: F4 06 00     	pea	#<$6
  5753 03:92A3: 22 E7 A7 03  	jsl	~~pio_outbyte
  5754                        ;   DELAY400NS;
  5755                        	.line	1416
  5756                        	.line	1416
  5757 03:92A7: F4 08 00     	pea	#<$8
  5758 03:92AA: 22 A8 A7 03  	jsl	~~pio_inbyte
  5759                        	.line	1416
  5760 03:92AE: F4 08 00     	pea	#<$8
  5761 03:92B1: 22 A8 A7 03  	jsl	~~pio_inbyte
  5762                        	.line	1416
  5763 03:92B5: F4 08 00     	pea	#<$8
  5764 03:92B8: 22 A8 A7 03  	jsl	~~pio_inbyte
  Thu Dec  3 2020 22:25                                                Page 111


  5765                        	.line	1416
  5766 03:92BC: F4 08 00     	pea	#<$8
  5767 03:92BF: 22 A8 A7 03  	jsl	~~pio_inbyte
  5768                        	.line	1416
  5769 03:92C3: F4 08 00     	pea	#<$8
  5770 03:92C6: 22 A8 A7 03  	jsl	~~pio_inbyte
  5771                        	.line	1416
  5772                        	.line	1416
  5773                        ;
  5774                        ;   // If possible, select a device that exists,
  5775                        ;   // try device 0 first.
  5776                        ;
  5777                        ;   if ( reg_config_info[1] != REG_CONFIG_TYPE_NON
                    E )
  5778                        	.line	1421
  5779                        ;   {
  5780 03:92CA: AD xx xx     	lda	|~~reg_config_info+2
  5781 03:92CD: D0 03        	bne	L194
  5782 03:92CF: 82 2D 00     	brl	L10079
  5783                        L194:
  5784                        	.line	1422
  5785                        ;      pio_outbyte( CB_DH, CB_DH_DEV1 );
  5786                        	.line	1423
  5787 03:92D2: F4 10 00     	pea	#<$10
  5788 03:92D5: F4 06 00     	pea	#<$6
  5789 03:92D8: 22 E7 A7 03  	jsl	~~pio_outbyte
  5790                        ;      DELAY400NS;
  5791                        	.line	1424
  5792                        	.line	1424
  5793 03:92DC: F4 08 00     	pea	#<$8
  5794 03:92DF: 22 A8 A7 03  	jsl	~~pio_inbyte
  5795                        	.line	1424
  5796 03:92E3: F4 08 00     	pea	#<$8
  5797 03:92E6: 22 A8 A7 03  	jsl	~~pio_inbyte
  5798                        	.line	1424
  5799 03:92EA: F4 08 00     	pea	#<$8
  5800 03:92ED: 22 A8 A7 03  	jsl	~~pio_inbyte
  5801                        	.line	1424
  5802 03:92F1: F4 08 00     	pea	#<$8
  5803 03:92F4: 22 A8 A7 03  	jsl	~~pio_inbyte
  5804                        	.line	1424
  5805 03:92F8: F4 08 00     	pea	#<$8
  5806 03:92FB: 22 A8 A7 03  	jsl	~~pio_inbyte
  5807                        	.line	1424
  5808                        	.line	1424
  5809                        ;   }
  5810                        	.line	1425
  5811                        ;   if ( reg_config_info[0] != REG_CONFIG_TYPE_NON
                    E )
  5812                        L10079:
  5813                        	.line	1426
  5814                        ;   {
  5815 03:92FF: AD xx xx     	lda	|~~reg_config_info
  5816 03:9302: D0 03        	bne	L195
  5817 03:9304: 82 2D 00     	brl	L10080
  5818                        L195:
  5819                        	.line	1427
  5820                        ;      pio_outbyte( CB_DH, CB_DH_DEV0 );
  Thu Dec  3 2020 22:25                                                Page 112


  5821                        	.line	1428
  5822 03:9307: F4 00 00     	pea	#<$0
  5823 03:930A: F4 06 00     	pea	#<$6
  5824 03:930D: 22 E7 A7 03  	jsl	~~pio_outbyte
  5825                        ;      DELAY400NS;
  5826                        	.line	1429
  5827                        	.line	1429
  5828 03:9311: F4 08 00     	pea	#<$8
  5829 03:9314: 22 A8 A7 03  	jsl	~~pio_inbyte
  5830                        	.line	1429
  5831 03:9318: F4 08 00     	pea	#<$8
  5832 03:931B: 22 A8 A7 03  	jsl	~~pio_inbyte
  5833                        	.line	1429
  5834 03:931F: F4 08 00     	pea	#<$8
  5835 03:9322: 22 A8 A7 03  	jsl	~~pio_inbyte
  5836                        	.line	1429
  5837 03:9326: F4 08 00     	pea	#<$8
  5838 03:9329: 22 A8 A7 03  	jsl	~~pio_inbyte
  5839                        	.line	1429
  5840 03:932D: F4 08 00     	pea	#<$8
  5841 03:9330: 22 A8 A7 03  	jsl	~~pio_inbyte
  5842                        	.line	1429
  5843                        	.line	1429
  5844                        ;   }
  5845                        	.line	1430
  5846                        ;
  5847                        ;   // BMIDE Error=1?
  5848                        ;
  5849                        ;   if ( pio_readBusMstrStatus() & BM_SR_MASK_ERR 
                    )
  5850                        L10080:
  5851                        	.line	1434
  5852                        ;   {
  5853 03:9334: 22 F8 A6 03  	jsl	~~pio_readBusMstrStatus
  5854 03:9338: E2 20        	sep	#$20
  5855                        	longa	off
  5856 03:933A: 29 02        	and	#<$2
  5857 03:933C: C2 20        	rep	#$20
  5858                        	longa	on
  5859 03:933E: D0 03        	bne	L196
  5860 03:9340: 82 09 00     	brl	L10081
  5861                        L196:
  5862                        	.line	1435
  5863                        ;      reg_cmd_info.ec = 78;                  // y
                    es
  5864                        	.line	1436
  5865 03:9343: E2 20        	sep	#$20
  5866                        	longa	off
  5867 03:9345: A9 4E        	lda	#$4e
  5868 03:9347: 8D xx xx     	sta	|~~reg_cmd_info+31
  5869 03:934A: C2 20        	rep	#$20
  5870                        	longa	on
  5871                        ;   }
  5872                        	.line	1437
  5873                        ;
  5874                        ;   // All done.  The return values of this functi
                    on are described in
  5875                        ;   // MINDRVR.H.
  Thu Dec  3 2020 22:25                                                Page 113


  5876                        ;
  5877                        ;   sub_trace_command();
  5878                        L10081:
  5879                        	.line	1442
  5880 03:934C: 22 42 A4 03  	jsl	~~sub_trace_command
  5881                        ;   if ( reg_cmd_info.ec )
  5882                        	.line	1443
  5883                        ;      return 1;
  5884 03:9350: AD xx xx     	lda	|~~reg_cmd_info+31
  5885 03:9353: 29 FF 00     	and	#$ff
  5886 03:9356: D0 03        	bne	L197
  5887 03:9358: 82 15 00     	brl	L10082
  5888                        L197:
  5889                        	.line	1444
  5890 03:935B: A9 01 00     	lda	#$1
  5891                        L198:
  5892 03:935E: A8           	tay
  5893 03:935F: A5 0A        	lda	<L175+2
  5894 03:9361: 85 0C        	sta	<L175+2+2
  5895 03:9363: A5 09        	lda	<L175+1
  5896 03:9365: 85 0B        	sta	<L175+1+2
  5897 03:9367: 2B           	pld
  5898 03:9368: 3B           	tsc
  5899 03:9369: 18           	clc
  5900 03:936A: 69 0A 00     	adc	#L175+2
  5901 03:936D: 1B           	tcs
  5902 03:936E: 98           	tya
  5903 03:936F: 6B           	rtl
  5904                        ;   return 0;
  5905                        L10082:
  5906                        	.line	1445
  5907 03:9370: A9 00 00     	lda	#$0
  5908 03:9373: 82 E8 FF     	brl	L198
  5909                        ;}
  5910                        	.line	1446
  5911                        	.endblock	1446
  5912             00000008   L175	equ	8
  5913             00000005   L176	equ	5
  5914 03:9376:              	ends
  5915                        	efunc
  5916                        	.endfunc	1446,5,8
  5917                        	.line	1446
  5918                        	data
  5919                        L174:
  5920 00:03ED: 72 65 67 5F  	db	$72,$65,$67,$5F,$72,$65,$73,$65,$74,$3A,
                    $64,$63,$3A,$00,$72
       00:03F1: 72 65 73 65 
       00:03F5: 74 3A 64 63 
       00:03F9: 3A 00 72 
  5921 00:03FC: 65 67 5F 72  	db	$65,$67,$5F,$72,$65,$73,$65,$74,$3A,$74,
                    $6D,$72,$5F,$73,$65
       00:0400: 65 73 65 74 
       00:0404: 3A 74 6D 72 
       00:0408: 5F 73 65 
  5922 00:040B: 74 5F 74 69  	db	$74,$5F,$74,$69,$6D,$65,$6F,$75,$74,$3A,
                    $00
       00:040F: 6D 65 6F 75 
       00:0413: 74 3A 00 
  Thu Dec  3 2020 22:25                                                Page 114


  5923 00:0416:              	ends
  5924                        ;
  5925                        ;//***********************************************
                    **************
  5926                        ;//
  5927                        ;// exec_non_data_cmd() - Execute a non-data comma
                    nd.
  5928                        ;//
  5929                        ;// This includes the strange ATAPI DEVICE RESET '
                    command'
  5930                        ;// (command code 08H).
  5931                        ;//
  5932                        ;// Note special handling for Execute Device Diagn
                    ostics
  5933                        ;// command when there is no device 0.
  5934                        ;//
  5935                        ;// See ATA-2 Section 9.5, ATA-3 Section 9.5,
  5936                        ;// ATA-4 Section 8.8 Figure 12.  Also see Section
                     8.5.
  5937                        ;//
  5938                        ;//***********************************************
                    **************
  5939                        ;
  5940                        ;static int exec_non_data_cmd( unsigned char dev )
                    ;
  5941                        ;
  5942                        ;static int exec_non_data_cmd( unsigned char dev )
  5943                        ;
  5944                        ;{
  5945                        	.line	1465
  5946                        	.line	1467
  5947                        	FXHDD
  5948                        	func
  5949                        	.function	1467
  5950                        ~~exec_non_data_cmd:
  5951                        	longa	on
  5952                        	longi	on
  5953 03:9376: 3B           	tsc
  5954 03:9377: 38           	sec
  5955 03:9378: E9 05 00     	sbc	#L200
  5956 03:937B: 1B           	tcs
  5957 03:937C: 0B           	phd
  5958 03:937D: 5B           	tcd
  5959             00000004   dev_0	set	4
  5960                        	.block	1467
  5961                        ;   unsigned char secCnt;
  5962                        ;   unsigned char secNum;
  5963                        ;   unsigned char status;
  5964                        ;   int polled = 0;
  5965                        ;
  5966                        ;   // reset Bus Master Error bit
  5967                        ;
  5968                        ;   pio_writeBusMstrStatus( BM_SR_MASK_ERR );
  5969             00000000   secCnt_1	set	0
  5970             00000001   secNum_1	set	1
  5971             00000002   status_1	set	2
  5972             00000003   polled_1	set	3
  5973                        	.sym	secCnt,0,14,1,8
  Thu Dec  3 2020 22:25                                                Page 115


  5974                        	.sym	secNum,1,14,1,8
  5975                        	.sym	status,2,14,1,8
  5976                        	.sym	polled,3,5,1,16
  5977                        	.sym	dev,4,14,6,8
  5978 03:937E: 64 04        	stz	<L201+polled_1
  5979                        	.line	1475
  5980 03:9380: F4 02 00     	pea	#<$2
  5981 03:9383: 22 6D A7 03  	jsl	~~pio_writeBusMstrStatus
  5982                        ;
  5983                        ;   // Set command time out.
  5984                        ;
  5985                        ;   tmr_set_timeout();
  5986                        	.line	1479
  5987 03:9387: 22 F7 AC 03  	jsl	~~tmr_set_timeout
  5988                        ;
  5989                        ;   // PAY ATTENTION HERE
  5990                        ;   // If the caller is attempting a Device Reset 
                    command, then
  5991                        ;   // don't do most of the normal stuff.  Device 
                    Reset has no
  5992                        ;   // parameters, should not generate an interrup
                    t and it is the
  5993                        ;   // only command that can be written to the Com
                    mand register
  5994                        ;   // when a device has BSY=1 (a very strange com
                    mand!).  Not
  5995                        ;   // all devices support this command (even some
                     ATAPI devices
  5996                        ;   // don't support the command.
  5997                        ;
  5998                        ;   if ( reg_cmd_info.cmd != CMD_DEVICE_RESET )
  5999                        	.line	1490
  6000                        ;   {
  6001 03:938B: E2 20        	sep	#$20
  6002                        	longa	off
  6003 03:938D: AD xx xx     	lda	|~~reg_cmd_info
  6004 03:9390: C9 08        	cmp	#<$8
  6005 03:9392: C2 20        	rep	#$20
  6006                        	longa	on
  6007 03:9394: D0 03        	bne	L203
  6008 03:9396: 82 25 00     	brl	L10083
  6009                        L203:
  6010                        	.line	1491
  6011                        ;      // Select the drive - call the sub_select f
                    unction.
  6012                        ;      // Quit now if this fails.
  6013                        ;
  6014                        ;      if ( sub_select( dev ) )
  6015                        	.line	1495
  6016                        ;      {
  6017 03:9399: D4 09        	pei	<L200+dev_0
  6018 03:939B: 22 A6 A4 03  	jsl	~~sub_select
  6019 03:939F: AA           	tax
  6020 03:93A0: D0 03        	bne	L204
  6021 03:93A2: 82 15 00     	brl	L10084
  6022                        L204:
  6023                        	.line	1496
  6024                        ;         return 1;
  Thu Dec  3 2020 22:25                                                Page 116


  6025                        	.line	1497
  6026 03:93A5: A9 01 00     	lda	#$1
  6027                        L205:
  6028 03:93A8: A8           	tay
  6029 03:93A9: A5 07        	lda	<L200+2
  6030 03:93AB: 85 09        	sta	<L200+2+2
  6031 03:93AD: A5 06        	lda	<L200+1
  6032 03:93AF: 85 08        	sta	<L200+1+2
  6033 03:93B1: 2B           	pld
  6034 03:93B2: 3B           	tsc
  6035 03:93B3: 18           	clc
  6036 03:93B4: 69 07 00     	adc	#L200+2
  6037 03:93B7: 1B           	tcs
  6038 03:93B8: 98           	tya
  6039 03:93B9: 6B           	rtl
  6040                        ;      }
  6041                        	.line	1498
  6042                        ;
  6043                        ;      // Set up all the registers except the comm
                    and register.
  6044                        ;
  6045                        ;      sub_setup_command();
  6046                        L10084:
  6047                        	.line	1502
  6048 03:93BA: 22 60 A2 03  	jsl	~~sub_setup_command
  6049                        ;   }
  6050                        	.line	1503
  6051                        ;
  6052                        ;   // Start the command by setting the Command re
                    gister.  The drive
  6053                        ;   // should immediately set BUSY status.
  6054                        ;
  6055                        ;   pio_outbyte( CB_CMD, reg_cmd_info.cmd );
  6056                        L10083:
  6057                        	.line	1508
  6058 03:93BE: AD xx xx     	lda	|~~reg_cmd_info
  6059 03:93C1: 48           	pha
  6060 03:93C2: F4 07 00     	pea	#<$7
  6061 03:93C5: 22 E7 A7 03  	jsl	~~pio_outbyte
  6062                        ;
  6063                        ;   // Waste some time by reading the alternate st
                    atus a few times.
  6064                        ;   // This gives the drive time to set BUSY in th
                    e status register on
  6065                        ;   // really fast systems.  If we don't do this, 
                    a slow drive on a fast
  6066                        ;   // system may not set BUSY fast enough and we 
                    would think it had
  6067                        ;   // completed the command when it really had no
                    t even started the
  6068                        ;   // command yet.
  6069                        ;
  6070                        ;   DELAY400NS;
  6071                        	.line	1517
  6072                        	.line	1517
  6073 03:93C9: F4 08 00     	pea	#<$8
  6074 03:93CC: 22 A8 A7 03  	jsl	~~pio_inbyte
  6075                        	.line	1517
  Thu Dec  3 2020 22:25                                                Page 117


  6076 03:93D0: F4 08 00     	pea	#<$8
  6077 03:93D3: 22 A8 A7 03  	jsl	~~pio_inbyte
  6078                        	.line	1517
  6079 03:93D7: F4 08 00     	pea	#<$8
  6080 03:93DA: 22 A8 A7 03  	jsl	~~pio_inbyte
  6081                        	.line	1517
  6082 03:93DE: F4 08 00     	pea	#<$8
  6083 03:93E1: 22 A8 A7 03  	jsl	~~pio_inbyte
  6084                        	.line	1517
  6085 03:93E5: F4 08 00     	pea	#<$8
  6086 03:93E8: 22 A8 A7 03  	jsl	~~pio_inbyte
  6087                        	.line	1517
  6088                        	.line	1517
  6089                        ;
  6090                        ;   // IF
  6091                        ;   //    This is an Exec Dev Diag command (cmd=0x
                    90)
  6092                        ;   //    and there is no device 0 then
  6093                        ;   //    there will be no interrupt. So we must
  6094                        ;   //    poll device 1 until it allows register
  6095                        ;   //    access and then do normal polling of the
                     Status
  6096                        ;   //    register for BSY=0.
  6097                        ;   // ELSE
  6098                        ;   // IF
  6099                        ;   //    This is a Dev Reset command (cmd=0x08) t
                    hen
  6100                        ;   //    there should be no interrupt.  So we mus
                    t
  6101                        ;   //    poll for BSY=0.
  6102                        ;   // ELSE
  6103                        ;   //    Do the normal wait for interrupt or poll
                    ing for
  6104                        ;   //    completion.
  6105                        ;
  6106                        ;   if ( ( reg_cmd_info.cmd == CMD_EXECUTE_DEVICE_
                    DIAGNOSTIC )
  6107                        	.line	1535
  6108                        ;        &&
  6109                        ;        ( reg_config_info[0] == REG_CONFIG_TYPE_N
                    ONE )
  6110                        ;      )
  6111                        ;   {
  6112 03:93EC: E2 20        	sep	#$20
  6113                        	longa	off
  6114 03:93EE: AD xx xx     	lda	|~~reg_cmd_info
  6115 03:93F1: C9 90        	cmp	#<$90
  6116 03:93F3: C2 20        	rep	#$20
  6117                        	longa	on
  6118 03:93F5: F0 03        	beq	L206
  6119 03:93F7: 82 93 00     	brl	L10085
  6120                        L206:
  6121 03:93FA: AD xx xx     	lda	|~~reg_config_info
  6122 03:93FD: F0 03        	beq	L207
  6123 03:93FF: 82 8B 00     	brl	L10085
  6124                        L207:
  6125                        	.line	1539
  6126                        ;      polled = 1;
  Thu Dec  3 2020 22:25                                                Page 118


  6127                        	.line	1540
  6128 03:9402: A9 01 00     	lda	#$1
  6129 03:9405: 85 04        	sta	<L201+polled_1
  6130                        ;      while ( 1 )
  6131                        	.line	1541
  6132                        L10086:
  6133                        ;      {
  6134                        	.line	1542
  6135                        ;         pio_outbyte( CB_DH, CB_DH_DEV1 );
  6136                        	.line	1543
  6137 03:9407: F4 10 00     	pea	#<$10
  6138 03:940A: F4 06 00     	pea	#<$6
  6139 03:940D: 22 E7 A7 03  	jsl	~~pio_outbyte
  6140                        ;         DELAY400NS;
  6141                        	.line	1544
  6142                        	.line	1544
  6143 03:9411: F4 08 00     	pea	#<$8
  6144 03:9414: 22 A8 A7 03  	jsl	~~pio_inbyte
  6145                        	.line	1544
  6146 03:9418: F4 08 00     	pea	#<$8
  6147 03:941B: 22 A8 A7 03  	jsl	~~pio_inbyte
  6148                        	.line	1544
  6149 03:941F: F4 08 00     	pea	#<$8
  6150 03:9422: 22 A8 A7 03  	jsl	~~pio_inbyte
  6151                        	.line	1544
  6152 03:9426: F4 08 00     	pea	#<$8
  6153 03:9429: 22 A8 A7 03  	jsl	~~pio_inbyte
  6154                        	.line	1544
  6155 03:942D: F4 08 00     	pea	#<$8
  6156 03:9430: 22 A8 A7 03  	jsl	~~pio_inbyte
  6157                        	.line	1544
  6158                        	.line	1544
  6159                        ;         secCnt = pio_inbyte( CB_SC );
  6160                        	.line	1545
  6161 03:9434: F4 02 00     	pea	#<$2
  6162 03:9437: 22 A8 A7 03  	jsl	~~pio_inbyte
  6163 03:943B: E2 20        	sep	#$20
  6164                        	longa	off
  6165 03:943D: 85 01        	sta	<L201+secCnt_1
  6166 03:943F: C2 20        	rep	#$20
  6167                        	longa	on
  6168                        ;         secNum = pio_inbyte( CB_SN );
  6169                        	.line	1546
  6170 03:9441: F4 03 00     	pea	#<$3
  6171 03:9444: 22 A8 A7 03  	jsl	~~pio_inbyte
  6172 03:9448: E2 20        	sep	#$20
  6173                        	longa	off
  6174 03:944A: 85 02        	sta	<L201+secNum_1
  6175 03:944C: C2 20        	rep	#$20
  6176                        	longa	on
  6177                        ;         if ( ( secCnt == 0x01 ) && ( secNum == 0
                    x01 ) )
  6178                        	.line	1547
  6179                        ;            break;
  6180 03:944E: E2 20        	sep	#$20
  6181                        	longa	off
  6182 03:9450: A5 01        	lda	<L201+secCnt_1
  6183 03:9452: C9 01        	cmp	#<$1
  Thu Dec  3 2020 22:25                                                Page 119


  6184 03:9454: C2 20        	rep	#$20
  6185                        	longa	on
  6186 03:9456: F0 03        	beq	L209
  6187 03:9458: 82 0D 00     	brl	L208
  6188                        L209:
  6189 03:945B: E2 20        	sep	#$20
  6190                        	longa	off
  6191 03:945D: A5 02        	lda	<L201+secNum_1
  6192 03:945F: C9 01        	cmp	#<$1
  6193 03:9461: C2 20        	rep	#$20
  6194                        	longa	on
  6195 03:9463: D0 03        	bne	L210
  6196 03:9465: 82 22 00     	brl	L10087
  6197                        L210:
  6198                        L208:
  6199                        ;         if ( tmr_chk_timeout() )
  6200                        	.line	1549
  6201                        ;         {
  6202 03:9468: 22 1F AD 03  	jsl	~~tmr_chk_timeout
  6203 03:946C: AA           	tax
  6204 03:946D: D0 03        	bne	L211
  6205 03:946F: 82 15 00     	brl	L10088
  6206                        L211:
  6207                        	.line	1550
  6208                        ;            reg_cmd_info.to = 1;
  6209                        	.line	1551
  6210 03:9472: E2 20        	sep	#$20
  6211                        	longa	off
  6212 03:9474: A9 01        	lda	#$1
  6213 03:9476: 8D xx xx     	sta	|~~reg_cmd_info+32
  6214 03:9479: C2 20        	rep	#$20
  6215                        	longa	on
  6216                        ;            reg_cmd_info.ec = 24;
  6217                        	.line	1552
  6218 03:947B: E2 20        	sep	#$20
  6219                        	longa	off
  6220 03:947D: A9 18        	lda	#$18
  6221 03:947F: 8D xx xx     	sta	|~~reg_cmd_info+31
  6222 03:9482: C2 20        	rep	#$20
  6223                        	longa	on
  6224                        ;            break;
  6225                        	.line	1553
  6226 03:9484: 82 03 00     	brl	L10087
  6227                        ;         }
  6228                        	.line	1554
  6229                        ;      }
  6230                        L10088:
  6231                        	.line	1555
  6232 03:9487: 82 7D FF     	brl	L10086
  6233                        L10087:
  6234                        ;   }
  6235                        	.line	1556
  6236                        ;   else
  6237 03:948A: 82 3A 00     	brl	L10089
  6238                        L10085:
  6239                        ;   {
  6240                        	.line	1558
  6241                        ;      if ( reg_cmd_info.cmd == CMD_DEVICE_RESET )
  Thu Dec  3 2020 22:25                                                Page 120


  6242                        	.line	1559
  6243                        ;      {
  6244 03:948D: E2 20        	sep	#$20
  6245                        	longa	off
  6246 03:948F: AD xx xx     	lda	|~~reg_cmd_info
  6247 03:9492: C9 08        	cmp	#<$8
  6248 03:9494: C2 20        	rep	#$20
  6249                        	longa	on
  6250 03:9496: F0 03        	beq	L212
  6251 03:9498: 82 12 00     	brl	L10090
  6252                        L212:
  6253                        	.line	1560
  6254                        ;         // Wait for not BUSY -or- wait for time 
                    out.
  6255                        ;
  6256                        ;         polled = 1;
  6257                        	.line	1563
  6258 03:949B: A9 01 00     	lda	#$1
  6259 03:949E: 85 04        	sta	<L201+polled_1
  6260                        ;         sub_wait_poll( 0, 23 );
  6261                        	.line	1564
  6262 03:94A0: F4 17 00     	pea	#<$17
  6263 03:94A3: F4 00 00     	pea	#<$0
  6264 03:94A6: 22 36 A6 03  	jsl	~~sub_wait_poll
  6265                        ;      }
  6266                        	.line	1565
  6267                        ;      else
  6268 03:94AA: 82 1A 00     	brl	L10091
  6269                        L10090:
  6270                        ;      {
  6271                        	.line	1567
  6272                        ;         // Wait for interrupt -or- wait for not 
                    BUSY -or- wait for time out.
  6273                        ;
  6274                        ;         if ( ! int_use_intr_flag )
  6275                        	.line	1570
  6276                        ;            polled = 1;
  6277 03:94AD: AD xx xx     	lda	|~~int_use_intr_flag
  6278 03:94B0: 29 FF 00     	and	#$ff
  6279 03:94B3: F0 03        	beq	L213
  6280 03:94B5: 82 05 00     	brl	L10092
  6281                        L213:
  6282                        	.line	1571
  6283 03:94B8: A9 01 00     	lda	#$1
  6284 03:94BB: 85 04        	sta	<L201+polled_1
  6285                        ;         sub_wait_poll( 22, 23 );
  6286                        L10092:
  6287                        	.line	1572
  6288 03:94BD: F4 17 00     	pea	#<$17
  6289 03:94C0: F4 16 00     	pea	#<$16
  6290 03:94C3: 22 36 A6 03  	jsl	~~sub_wait_poll
  6291                        ;      }
  6292                        	.line	1573
  6293                        L10091:
  6294                        ;   }
  6295                        	.line	1574
  6296                        L10089:
  6297                        ;
  Thu Dec  3 2020 22:25                                                Page 121


  6298                        ;   // If status was polled or if any error read t
                    he status register,
  6299                        ;   // otherwise get the status that was read by t
                    he interrupt handler.
  6300                        ;
  6301                        ;   if ( ( polled ) || ( reg_cmd_info.ec ) )
  6302                        	.line	1579
  6303                        ;      status = pio_inbyte( CB_STAT );
  6304 03:94C7: A5 04        	lda	<L201+polled_1
  6305 03:94C9: F0 03        	beq	L215
  6306 03:94CB: 82 0B 00     	brl	L214
  6307                        L215:
  6308 03:94CE: AD xx xx     	lda	|~~reg_cmd_info+31
  6309 03:94D1: 29 FF 00     	and	#$ff
  6310 03:94D4: D0 03        	bne	L216
  6311 03:94D6: 82 10 00     	brl	L10093
  6312                        L216:
  6313                        L214:
  6314                        	.line	1580
  6315 03:94D9: F4 07 00     	pea	#<$7
  6316 03:94DC: 22 A8 A7 03  	jsl	~~pio_inbyte
  6317 03:94E0: E2 20        	sep	#$20
  6318                        	longa	off
  6319 03:94E2: 85 03        	sta	<L201+status_1
  6320 03:94E4: C2 20        	rep	#$20
  6321                        	longa	on
  6322                        ;   else
  6323 03:94E6: 82 09 00     	brl	L10094
  6324                        L10093:
  6325                        ;      status = int_ata_status;
  6326                        	.line	1582
  6327 03:94E9: E2 20        	sep	#$20
  6328                        	longa	off
  6329 03:94EB: AD xx xx     	lda	|~~int_ata_status
  6330 03:94EE: 85 03        	sta	<L201+status_1
  6331 03:94F0: C2 20        	rep	#$20
  6332                        	longa	on
  6333                        L10094:
  6334                        ;
  6335                        ;   // Error if BUSY, DEVICE FAULT, DRQ or ERROR s
                    tatus now.
  6336                        ;
  6337                        ;   if ( reg_cmd_info.ec == 0 )
  6338                        	.line	1586
  6339                        ;   {
  6340 03:94F2: AD xx xx     	lda	|~~reg_cmd_info+31
  6341 03:94F5: 29 FF 00     	and	#$ff
  6342 03:94F8: F0 03        	beq	L217
  6343 03:94FA: 82 16 00     	brl	L10095
  6344                        L217:
  6345                        	.line	1587
  6346                        ;      if ( status & ( CB_STAT_BSY | CB_STAT_DF | 
                    CB_STAT_DRQ | CB_STAT_ERR ) )
  6347                        	.line	1588
  6348                        ;      {
  6349 03:94FD: E2 20        	sep	#$20
  6350                        	longa	off
  6351 03:94FF: A5 03        	lda	<L201+status_1
  Thu Dec  3 2020 22:25                                                Page 122


  6352 03:9501: 29 A9        	and	#<$a9
  6353 03:9503: C2 20        	rep	#$20
  6354                        	longa	on
  6355 03:9505: D0 03        	bne	L218
  6356 03:9507: 82 09 00     	brl	L10096
  6357                        L218:
  6358                        	.line	1589
  6359                        ;         reg_cmd_info.ec = 21;
  6360                        	.line	1590
  6361 03:950A: E2 20        	sep	#$20
  6362                        	longa	off
  6363 03:950C: A9 15        	lda	#$15
  6364 03:950E: 8D xx xx     	sta	|~~reg_cmd_info+31
  6365 03:9511: C2 20        	rep	#$20
  6366                        	longa	on
  6367                        ;      }
  6368                        	.line	1591
  6369                        ;   }
  6370                        L10096:
  6371                        	.line	1592
  6372                        ;
  6373                        ;   // BMIDE Error=1?
  6374                        ;
  6375                        ;   if ( pio_readBusMstrStatus() & BM_SR_MASK_ERR 
                    )
  6376                        L10095:
  6377                        	.line	1596
  6378                        ;   {
  6379 03:9513: 22 F8 A6 03  	jsl	~~pio_readBusMstrStatus
  6380 03:9517: E2 20        	sep	#$20
  6381                        	longa	off
  6382 03:9519: 29 02        	and	#<$2
  6383 03:951B: C2 20        	rep	#$20
  6384                        	longa	on
  6385 03:951D: D0 03        	bne	L219
  6386 03:951F: 82 09 00     	brl	L10097
  6387                        L219:
  6388                        	.line	1597
  6389                        ;      reg_cmd_info.ec = 78;                  // y
                    es
  6390                        	.line	1598
  6391 03:9522: E2 20        	sep	#$20
  6392                        	longa	off
  6393 03:9524: A9 4E        	lda	#$4e
  6394 03:9526: 8D xx xx     	sta	|~~reg_cmd_info+31
  6395 03:9529: C2 20        	rep	#$20
  6396                        	longa	on
  6397                        ;   }
  6398                        	.line	1599
  6399                        ;
  6400                        ;   // NON_DATA_DONE:
  6401                        ;
  6402                        ;   // All done.  The return values of this functi
                    on are described in
  6403                        ;   // MINDRVR.H.
  6404                        ;
  6405                        ;   sub_trace_command();
  6406                        L10097:
  Thu Dec  3 2020 22:25                                                Page 123


  6407                        	.line	1606
  6408 03:952B: 22 42 A4 03  	jsl	~~sub_trace_command
  6409                        ;   if ( reg_cmd_info.ec )
  6410                        	.line	1607
  6411                        ;      return 1;
  6412 03:952F: AD xx xx     	lda	|~~reg_cmd_info+31
  6413 03:9532: 29 FF 00     	and	#$ff
  6414 03:9535: D0 03        	bne	L220
  6415 03:9537: 82 06 00     	brl	L10098
  6416                        L220:
  6417                        	.line	1608
  6418 03:953A: A9 01 00     	lda	#$1
  6419 03:953D: 82 68 FE     	brl	L205
  6420                        ;   return 0;
  6421                        L10098:
  6422                        	.line	1609
  6423 03:9540: A9 00 00     	lda	#$0
  6424 03:9543: 82 62 FE     	brl	L205
  6425                        ;}
  6426                        	.line	1610
  6427                        	.endblock	1610
  6428             00000005   L200	equ	5
  6429             00000001   L201	equ	1
  6430 03:9546:              	ends
  6431                        	efunc
  6432                        	.endfunc	1610,1,5
  6433                        	.line	1610
  6434                        ;
  6435                        ;//***********************************************
                    **************
  6436                        ;//
  6437                        ;// reg_non_data_lba28() - Easy way to execute a n
                    on-data command
  6438                        ;//                        using an LBA sector add
                    ress.
  6439                        ;//
  6440                        ;//***********************************************
                    **************
  6441                        ;
  6442                        ;int reg_non_data_lba28( unsigned char dev, unsign
                    ed char cmd,
  6443                        ;                        unsigned int fr, unsigned
                     int sc,
  6444                        ;                        unsigned long lba )
  6445                        ;
  6446                        ;{
  6447                        	.line	1619
  6448                        	.line	1623
  6449                        	FXHDD
  6450                        	xdef	~~reg_non_data_lba28
  6451                        	func
  6452                        	.function	1623
  6453                        ~~reg_non_data_lba28:
  6454                        	longa	on
  6455                        	longi	on
  6456 03:9546: 3B           	tsc
  6457 03:9547: 38           	sec
  6458 03:9548: E9 04 00     	sbc	#L221
  Thu Dec  3 2020 22:25                                                Page 124


  6459 03:954B: 1B           	tcs
  6460 03:954C: 0B           	phd
  6461 03:954D: 5B           	tcd
  6462             00000004   dev_0	set	4
  6463             00000006   cmd_0	set	6
  6464             00000008   fr_0	set	8
  6465             0000000A   sc_0	set	10
  6466             0000000C   lba_0	set	12
  6467                        	.block	1623
  6468                        ;
  6469                        ;   // Setup current command information.
  6470                        ;
  6471                        ;   reg_cmd_info.cmd = cmd;
  6472                        	.sym	dev,4,14,6,8
  6473                        	.sym	cmd,6,14,6,8
  6474                        	.sym	fr,8,16,6,16
  6475                        	.sym	sc,10,16,6,16
  6476                        	.sym	lba,12,18,6,32
  6477                        	.line	1627
  6478 03:954E: E2 20        	sep	#$20
  6479                        	longa	off
  6480 03:9550: A5 0A        	lda	<L221+cmd_0
  6481 03:9552: 8D xx xx     	sta	|~~reg_cmd_info
  6482 03:9555: C2 20        	rep	#$20
  6483                        	longa	on
  6484                        ;   reg_cmd_info.fr = fr;
  6485                        	.line	1628
  6486 03:9557: A5 0C        	lda	<L221+fr_0
  6487 03:9559: 8D xx xx     	sta	|~~reg_cmd_info+1
  6488                        ;   reg_cmd_info.sc = sc;
  6489                        	.line	1629
  6490 03:955C: A5 0E        	lda	<L221+sc_0
  6491 03:955E: 8D xx xx     	sta	|~~reg_cmd_info+3
  6492                        ;   reg_cmd_info.dh = (unsigned char) ( CB_DH_LBA 
                    | ( dev ? CB_DH_DEV1 : CB_DH_DEV0 ) );
  6493                        	.line	1630
  6494 03:9561: A5 08        	lda	<L221+dev_0
  6495 03:9563: 29 FF 00     	and	#$ff
  6496 03:9566: D0 03        	bne	L225
  6497 03:9568: 82 05 00     	brl	L224
  6498                        L225:
  6499 03:956B: A9 10 00     	lda	#$10
  6500 03:956E: 80 03        	bra	L226
  6501                        L224:
  6502 03:9570: A9 00 00     	lda	#$0
  6503                        L226:
  6504 03:9573: 09 40 00     	ora	#<$40
  6505 03:9576: 85 01        	sta	<R0
  6506 03:9578: E2 20        	sep	#$20
  6507                        	longa	off
  6508 03:957A: A5 01        	lda	<R0
  6509 03:957C: 8D xx xx     	sta	|~~reg_cmd_info+11
  6510 03:957F: C2 20        	rep	#$20
  6511                        	longa	on
  6512                        ;   reg_cmd_info.dc = (unsigned char) ( int_use_in
                    tr_flag ? 0 : CB_DC_NIEN );
  6513                        	.line	1631
  6514 03:9581: AD xx xx     	lda	|~~int_use_intr_flag
  Thu Dec  3 2020 22:25                                                Page 125


  6515 03:9584: 29 FF 00     	and	#$ff
  6516 03:9587: D0 03        	bne	L228
  6517 03:9589: 82 05 00     	brl	L227
  6518                        L228:
  6519 03:958C: A9 00 00     	lda	#$0
  6520 03:958F: 80 03        	bra	L229
  6521                        L227:
  6522 03:9591: A9 02 00     	lda	#$2
  6523                        L229:
  6524 03:9594: 85 01        	sta	<R0
  6525 03:9596: E2 20        	sep	#$20
  6526                        	longa	off
  6527 03:9598: A5 01        	lda	<R0
  6528 03:959A: 8D xx xx     	sta	|~~reg_cmd_info+12
  6529 03:959D: C2 20        	rep	#$20
  6530                        	longa	on
  6531                        ;   reg_cmd_info.ns  = sc;
  6532                        	.line	1632
  6533 03:959F: A5 0E        	lda	<L221+sc_0
  6534 03:95A1: 8D xx xx     	sta	|~~reg_cmd_info+13
  6535 03:95A4: 9C xx xx     	stz	|~~reg_cmd_info+13+2
  6536                        ;   reg_cmd_info.lbaSize = LBA28;
  6537                        	.line	1633
  6538 03:95A7: E2 20        	sep	#$20
  6539                        	longa	off
  6540 03:95A9: A9 1C        	lda	#$1c
  6541 03:95AB: 8D xx xx     	sta	|~~reg_cmd_info+19
  6542 03:95AE: C2 20        	rep	#$20
  6543                        	longa	on
  6544                        ;   reg_cmd_info.lbaHigh = 0L;
  6545                        	.line	1634
  6546 03:95B0: 9C xx xx     	stz	|~~reg_cmd_info+24
  6547 03:95B3: 9C xx xx     	stz	|~~reg_cmd_info+24+2
  6548                        ;   reg_cmd_info.lbaLow = lba;
  6549                        	.line	1635
  6550 03:95B6: A5 10        	lda	<L221+lba_0
  6551 03:95B8: 8D xx xx     	sta	|~~reg_cmd_info+20
  6552 03:95BB: A5 12        	lda	<L221+lba_0+2
  6553 03:95BD: 8D xx xx     	sta	|~~reg_cmd_info+20+2
  6554                        ;
  6555                        ;   // Execute the command.
  6556                        ;
  6557                        ;   return exec_non_data_cmd( dev );
  6558                        	.line	1639
  6559 03:95C0: D4 08        	pei	<L221+dev_0
  6560 03:95C2: 22 76 93 03  	jsl	~~exec_non_data_cmd
  6561                        L230:
  6562 03:95C6: A8           	tay
  6563 03:95C7: A5 06        	lda	<L221+2
  6564 03:95C9: 85 12        	sta	<L221+2+12
  6565 03:95CB: A5 05        	lda	<L221+1
  6566 03:95CD: 85 11        	sta	<L221+1+12
  6567 03:95CF: 2B           	pld
  6568 03:95D0: 3B           	tsc
  6569 03:95D1: 18           	clc
  6570 03:95D2: 69 10 00     	adc	#L221+12
  6571 03:95D5: 1B           	tcs
  6572 03:95D6: 98           	tya
  Thu Dec  3 2020 22:25                                                Page 126


  6573 03:95D7: 6B           	rtl
  6574                        ;}
  6575                        	.line	1640
  6576                        	.endblock	1640
  6577             00000004   L221	equ	4
  6578             00000005   L222	equ	5
  6579 03:95D8:              	ends
  6580                        	efunc
  6581                        	.endfunc	1640,5,4
  6582                        	.line	1640
  6583                        ;
  6584                        ;//***********************************************
                    **************
  6585                        ;//
  6586                        ;// reg_non_data_lba48() - Easy way to execute a n
                    on-data command
  6587                        ;//                        using an LBA sector add
                    ress.
  6588                        ;//
  6589                        ;//***********************************************
                    **************
  6590                        ;
  6591                        ;int reg_non_data_lba48( unsigned char dev, unsign
                    ed char cmd,
  6592                        ;                        unsigned int fr, unsigned
                     int sc,
  6593                        ;                        unsigned long lbahi, unsi
                    gned long lbalo )
  6594                        ;
  6595                        ;{
  6596                        	.line	1649
  6597                        	.line	1653
  6598                        	FXHDD
  6599                        	xdef	~~reg_non_data_lba48
  6600                        	func
  6601                        	.function	1653
  6602                        ~~reg_non_data_lba48:
  6603                        	longa	on
  6604                        	longi	on
  6605 03:95D8: 3B           	tsc
  6606 03:95D9: 38           	sec
  6607 03:95DA: E9 04 00     	sbc	#L231
  6608 03:95DD: 1B           	tcs
  6609 03:95DE: 0B           	phd
  6610 03:95DF: 5B           	tcd
  6611             00000004   dev_0	set	4
  6612             00000006   cmd_0	set	6
  6613             00000008   fr_0	set	8
  6614             0000000A   sc_0	set	10
  6615             0000000C   lbahi_0	set	12
  6616             00000010   lbalo_0	set	16
  6617                        	.block	1653
  6618                        ;
  6619                        ;   // Setup current command infomation.
  6620                        ;
  6621                        ;   reg_cmd_info.cmd = cmd;
  6622                        	.sym	dev,4,14,6,8
  6623                        	.sym	cmd,6,14,6,8
  Thu Dec  3 2020 22:25                                                Page 127


  6624                        	.sym	fr,8,16,6,16
  6625                        	.sym	sc,10,16,6,16
  6626                        	.sym	lbahi,12,18,6,32
  6627                        	.sym	lbalo,16,18,6,32
  6628                        	.line	1657
  6629 03:95E0: E2 20        	sep	#$20
  6630                        	longa	off
  6631 03:95E2: A5 0A        	lda	<L231+cmd_0
  6632 03:95E4: 8D xx xx     	sta	|~~reg_cmd_info
  6633 03:95E7: C2 20        	rep	#$20
  6634                        	longa	on
  6635                        ;   reg_cmd_info.fr = fr;
  6636                        	.line	1658
  6637 03:95E9: A5 0C        	lda	<L231+fr_0
  6638 03:95EB: 8D xx xx     	sta	|~~reg_cmd_info+1
  6639                        ;   reg_cmd_info.sc = sc;
  6640                        	.line	1659
  6641 03:95EE: A5 0E        	lda	<L231+sc_0
  6642 03:95F0: 8D xx xx     	sta	|~~reg_cmd_info+3
  6643                        ;   reg_cmd_info.dh = (unsigned char) ( CB_DH_LBA 
                    | ( dev ? CB_DH_DEV1 : CB_DH_DEV0 ) );
  6644                        	.line	1660
  6645 03:95F3: A5 08        	lda	<L231+dev_0
  6646 03:95F5: 29 FF 00     	and	#$ff
  6647 03:95F8: D0 03        	bne	L235
  6648 03:95FA: 82 05 00     	brl	L234
  6649                        L235:
  6650 03:95FD: A9 10 00     	lda	#$10
  6651 03:9600: 80 03        	bra	L236
  6652                        L234:
  6653 03:9602: A9 00 00     	lda	#$0
  6654                        L236:
  6655 03:9605: 09 40 00     	ora	#<$40
  6656 03:9608: 85 01        	sta	<R0
  6657 03:960A: E2 20        	sep	#$20
  6658                        	longa	off
  6659 03:960C: A5 01        	lda	<R0
  6660 03:960E: 8D xx xx     	sta	|~~reg_cmd_info+11
  6661 03:9611: C2 20        	rep	#$20
  6662                        	longa	on
  6663                        ;   reg_cmd_info.dc = (unsigned char) ( int_use_in
                    tr_flag ? 0 : CB_DC_NIEN );
  6664                        	.line	1661
  6665 03:9613: AD xx xx     	lda	|~~int_use_intr_flag
  6666 03:9616: 29 FF 00     	and	#$ff
  6667 03:9619: D0 03        	bne	L238
  6668 03:961B: 82 05 00     	brl	L237
  6669                        L238:
  6670 03:961E: A9 00 00     	lda	#$0
  6671 03:9621: 80 03        	bra	L239
  6672                        L237:
  6673 03:9623: A9 02 00     	lda	#$2
  6674                        L239:
  6675 03:9626: 85 01        	sta	<R0
  6676 03:9628: E2 20        	sep	#$20
  6677                        	longa	off
  6678 03:962A: A5 01        	lda	<R0
  6679 03:962C: 8D xx xx     	sta	|~~reg_cmd_info+12
  Thu Dec  3 2020 22:25                                                Page 128


  6680 03:962F: C2 20        	rep	#$20
  6681                        	longa	on
  6682                        ;   reg_cmd_info.ns  = sc;
  6683                        	.line	1662
  6684 03:9631: A5 0E        	lda	<L231+sc_0
  6685 03:9633: 8D xx xx     	sta	|~~reg_cmd_info+13
  6686 03:9636: 9C xx xx     	stz	|~~reg_cmd_info+13+2
  6687                        ;   reg_cmd_info.lbaSize = LBA48;
  6688                        	.line	1663
  6689 03:9639: E2 20        	sep	#$20
  6690                        	longa	off
  6691 03:963B: A9 30        	lda	#$30
  6692 03:963D: 8D xx xx     	sta	|~~reg_cmd_info+19
  6693 03:9640: C2 20        	rep	#$20
  6694                        	longa	on
  6695                        ;   reg_cmd_info.lbaHigh = lbahi;
  6696                        	.line	1664
  6697 03:9642: A5 10        	lda	<L231+lbahi_0
  6698 03:9644: 8D xx xx     	sta	|~~reg_cmd_info+24
  6699 03:9647: A5 12        	lda	<L231+lbahi_0+2
  6700 03:9649: 8D xx xx     	sta	|~~reg_cmd_info+24+2
  6701                        ;   reg_cmd_info.lbaLow = lbalo;
  6702                        	.line	1665
  6703 03:964C: A5 14        	lda	<L231+lbalo_0
  6704 03:964E: 8D xx xx     	sta	|~~reg_cmd_info+20
  6705 03:9651: A5 16        	lda	<L231+lbalo_0+2
  6706 03:9653: 8D xx xx     	sta	|~~reg_cmd_info+20+2
  6707                        ;
  6708                        ;   // Execute the command.
  6709                        ;
  6710                        ;   return exec_non_data_cmd( dev );
  6711                        	.line	1669
  6712 03:9656: D4 08        	pei	<L231+dev_0
  6713 03:9658: 22 76 93 03  	jsl	~~exec_non_data_cmd
  6714                        L240:
  6715 03:965C: A8           	tay
  6716 03:965D: A5 06        	lda	<L231+2
  6717 03:965F: 85 16        	sta	<L231+2+16
  6718 03:9661: A5 05        	lda	<L231+1
  6719 03:9663: 85 15        	sta	<L231+1+16
  6720 03:9665: 2B           	pld
  6721 03:9666: 3B           	tsc
  6722 03:9667: 18           	clc
  6723 03:9668: 69 14 00     	adc	#L231+16
  6724 03:966B: 1B           	tcs
  6725 03:966C: 98           	tya
  6726 03:966D: 6B           	rtl
  6727                        ;}
  6728                        	.line	1670
  6729                        	.endblock	1670
  6730             00000004   L231	equ	4
  6731             00000005   L232	equ	5
  6732 03:966E:              	ends
  6733                        	efunc
  6734                        	.endfunc	1670,5,4
  6735                        	.line	1670
  6736                        ;
  6737                        ;//***********************************************
  Thu Dec  3 2020 22:25                                                Page 129


                    **************
  6738                        ;//
  6739                        ;// exec_pio_data_in_cmd() - Execute a PIO Data In
                     command.
  6740                        ;//
  6741                        ;// See ATA-2 Section 9.3, ATA-3 Section 9.3,
  6742                        ;// ATA-4 Section 8.6 Figure 10.
  6743                        ;//
  6744                        ;//***********************************************
                    **************
  6745                        ;
  6746                        ;
  6747                        ;
  6748                        ; int exec_pio_data_in_cmd( unsigned char dev,
  6749                        ;                            unsigned char * bufAd
                    dr,
  6750                        ;                            long numSect, int mul
                    tiCnt )
  6751                        ;
  6752                        ;{
  6753                        	.line	1683
  6754                        	.line	1687
  6755                        	FXHDD
  6756                        	xdef	~~exec_pio_data_in_cmd
  6757                        	func
  6758                        	.function	1687
  6759                        ~~exec_pio_data_in_cmd:
  6760                        	longa	on
  6761                        	longi	on
  6762 03:966E: 3B           	tsc
  6763 03:966F: 38           	sec
  6764 03:9670: E9 09 00     	sbc	#L241
  6765 03:9673: 1B           	tcs
  6766 03:9674: 0B           	phd
  6767 03:9675: 5B           	tcd
  6768             00000004   dev_0	set	4
  6769             00000006   bufAddr_0	set	6
  6770             0000000A   numSect_0	set	10
  6771             0000000E   multiCnt_0	set	14
  6772                        	.block	1687
  6773                        ;   unsigned char status;
  6774                        ;   long wordCnt;
  6775                        ;
  6776                        ;   // reset Bus Master Error bit
  6777                        ;
  6778                        ;   pio_writeBusMstrStatus( BM_SR_MASK_ERR );
  6779             00000000   status_1	set	0
  6780             00000001   wordCnt_1	set	1
  6781                        	.sym	status,0,14,1,8
  6782                        	.sym	wordCnt,1,7,1,32
  6783                        	.sym	dev,4,14,6,8
  6784                        	.sym	bufAddr,6,142,6,32
  6785                        	.sym	numSect,10,7,6,32
  6786                        	.sym	multiCnt,14,5,6,16
  6787                        	.line	1693
  6788 03:9676: F4 02 00     	pea	#<$2
  6789 03:9679: 22 6D A7 03  	jsl	~~pio_writeBusMstrStatus
  6790                        ;
  Thu Dec  3 2020 22:25                                                Page 130


  6791                        ;   // Set command time out.
  6792                        ;
  6793                        ;   tmr_set_timeout();
  6794                        	.line	1697
  6795 03:967D: 22 F7 AC 03  	jsl	~~tmr_set_timeout
  6796                        ;
  6797                        ;   // Select the drive - call the sub_select func
                    tion.
  6798                        ;   // Quit now if this fails.
  6799                        ;
  6800                        ;   if ( sub_select( dev ) )
  6801                        	.line	1702
  6802                        ;   {
  6803 03:9681: D4 0D        	pei	<L241+dev_0
  6804 03:9683: 22 A6 A4 03  	jsl	~~sub_select
  6805 03:9687: AA           	tax
  6806 03:9688: D0 03        	bne	L244
  6807 03:968A: 82 15 00     	brl	L10099
  6808                        L244:
  6809                        	.line	1703
  6810                        ;      return 1;
  6811                        	.line	1704
  6812 03:968D: A9 01 00     	lda	#$1
  6813                        L245:
  6814 03:9690: A8           	tay
  6815 03:9691: A5 0B        	lda	<L241+2
  6816 03:9693: 85 17        	sta	<L241+2+12
  6817 03:9695: A5 0A        	lda	<L241+1
  6818 03:9697: 85 16        	sta	<L241+1+12
  6819 03:9699: 2B           	pld
  6820 03:969A: 3B           	tsc
  6821 03:969B: 18           	clc
  6822 03:969C: 69 15 00     	adc	#L241+12
  6823 03:969F: 1B           	tcs
  6824 03:96A0: 98           	tya
  6825 03:96A1: 6B           	rtl
  6826                        ;   }
  6827                        	.line	1705
  6828                        ;
  6829                        ;   // Set up all the registers except the command
                     register.
  6830                        ;
  6831                        ;   sub_setup_command();
  6832                        L10099:
  6833                        	.line	1709
  6834 03:96A2: 22 60 A2 03  	jsl	~~sub_setup_command
  6835                        ;
  6836                        ;   // Start the command by setting the Command re
                    gister.  The drive
  6837                        ;   // should immediately set BUSY status.
  6838                        ;
  6839                        ;   pio_outbyte( CB_CMD, reg_cmd_info.cmd );
  6840                        	.line	1714
  6841 03:96A6: AD xx xx     	lda	|~~reg_cmd_info
  6842 03:96A9: 48           	pha
  6843 03:96AA: F4 07 00     	pea	#<$7
  6844 03:96AD: 22 E7 A7 03  	jsl	~~pio_outbyte
  6845                        ;
  Thu Dec  3 2020 22:25                                                Page 131


  6846                        ;   // Waste some time by reading the alternate st
                    atus a few times.
  6847                        ;   // This gives the drive time to set BUSY in th
                    e status register on
  6848                        ;   // really fast systems.  If we don't do this, 
                    a slow drive on a fast
  6849                        ;   // system may not set BUSY fast enough and we 
                    would think it had
  6850                        ;   // completed the command when it really had no
                    t even started the
  6851                        ;   // command yet.
  6852                        ;
  6853                        ;   DELAY400NS;
  6854                        	.line	1723
  6855                        	.line	1723
  6856 03:96B1: F4 08 00     	pea	#<$8
  6857 03:96B4: 22 A8 A7 03  	jsl	~~pio_inbyte
  6858                        	.line	1723
  6859 03:96B8: F4 08 00     	pea	#<$8
  6860 03:96BB: 22 A8 A7 03  	jsl	~~pio_inbyte
  6861                        	.line	1723
  6862 03:96BF: F4 08 00     	pea	#<$8
  6863 03:96C2: 22 A8 A7 03  	jsl	~~pio_inbyte
  6864                        	.line	1723
  6865 03:96C6: F4 08 00     	pea	#<$8
  6866 03:96C9: 22 A8 A7 03  	jsl	~~pio_inbyte
  6867                        	.line	1723
  6868 03:96CD: F4 08 00     	pea	#<$8
  6869 03:96D0: 22 A8 A7 03  	jsl	~~pio_inbyte
  6870                        	.line	1723
  6871                        	.line	1723
  6872                        ;
  6873                        ;   // Loop to read each sector.
  6874                        ;
  6875                        ;   while ( 1 )
  6876                        	.line	1727
  6877                        L10100:
  6878                        ;   {
  6879                        	.line	1728
  6880                        ;      // READ_LOOP:
  6881                        ;      //
  6882                        ;      // NOTE NOTE NOTE ...  The primary status r
                    egister (1f7) MUST NOT be
  6883                        ;      // read more than ONCE for each sector tran
                    sferred!  When the
  6884                        ;      // primary status register is read, the dri
                    ve resets IRQ.  The
  6885                        ;      // alternate status register (3f6) can be r
                    ead any number of times.
  6886                        ;      // After interrupt read the the primary sta
                    tus register ONCE
  6887                        ;      // and transfer the 256 words (REP INSW).  
                    AS SOON as BOTH the
  6888                        ;      // primary status register has been read AN
                    D the last of the 256
  6889                        ;      // words has been read, the drive is allowe
                    d to generate the next
  6890                        ;      // IRQ (newer and faster drives could gener
  Thu Dec  3 2020 22:25                                                Page 132


                    ate the next IRQ in
  6891                        ;      // 50 microseconds or less).  If the primar
                    y status register is read
  6892                        ;      // more than once, there is the possibility
                     of a race between the
  6893                        ;      // drive and the software and the next IRQ 
                    could be reset before
  6894                        ;      // the system interrupt controller sees it.
  6895                        ;
  6896                        ;      // Wait for interrupt -or- wait for not BUS
                    Y -or- wait for time out.
  6897                        ;
  6898                        ;      sub_wait_poll( 34, 35 );
  6899                        	.line	1747
  6900 03:96D4: F4 23 00     	pea	#<$23
  6901 03:96D7: F4 22 00     	pea	#<$22
  6902 03:96DA: 22 36 A6 03  	jsl	~~sub_wait_poll
  6903                        ;
  6904                        ;      // If polling or error read the status, oth
                    erwise
  6905                        ;      // get the status that was read by the inte
                    rrupt handler.
  6906                        ;
  6907                        ;      if ( ( ! int_use_intr_flag ) || ( reg_cmd_i
                    nfo.ec ) )
  6908                        	.line	1752
  6909                        ;         status = pio_inbyte( CB_STAT );
  6910 03:96DE: AD xx xx     	lda	|~~int_use_intr_flag
  6911 03:96E1: 29 FF 00     	and	#$ff
  6912 03:96E4: D0 03        	bne	L247
  6913 03:96E6: 82 0B 00     	brl	L246
  6914                        L247:
  6915 03:96E9: AD xx xx     	lda	|~~reg_cmd_info+31
  6916 03:96EC: 29 FF 00     	and	#$ff
  6917 03:96EF: D0 03        	bne	L248
  6918 03:96F1: 82 10 00     	brl	L10102
  6919                        L248:
  6920                        L246:
  6921                        	.line	1753
  6922 03:96F4: F4 07 00     	pea	#<$7
  6923 03:96F7: 22 A8 A7 03  	jsl	~~pio_inbyte
  6924 03:96FB: E2 20        	sep	#$20
  6925                        	longa	off
  6926 03:96FD: 85 05        	sta	<L242+status_1
  6927 03:96FF: C2 20        	rep	#$20
  6928                        	longa	on
  6929                        ;      else
  6930 03:9701: 82 09 00     	brl	L10103
  6931                        L10102:
  6932                        ;         status = int_ata_status;
  6933                        	.line	1755
  6934 03:9704: E2 20        	sep	#$20
  6935                        	longa	off
  6936 03:9706: AD xx xx     	lda	|~~int_ata_status
  6937 03:9709: 85 05        	sta	<L242+status_1
  6938 03:970B: C2 20        	rep	#$20
  6939                        	longa	on
  6940                        L10103:
  Thu Dec  3 2020 22:25                                                Page 133


  6941                        ;
  6942                        ;      // If there was a time out error, go to REA
                    D_DONE.
  6943                        ;
  6944                        ;      if ( reg_cmd_info.ec )
  6945                        	.line	1759
  6946                        ;         break;   // go to READ_DONE
  6947 03:970D: AD xx xx     	lda	|~~reg_cmd_info+31
  6948 03:9710: 29 FF 00     	and	#$ff
  6949 03:9713: F0 03        	beq	L249
  6950 03:9715: 82 75 01     	brl	L10101
  6951                        L249:
  6952                        ;
  6953                        ;      // If BSY=0 and DRQ=1, transfer the data,
  6954                        ;      // even if we find out there is an error la
                    ter.
  6955                        ;
  6956                        ;      if ( ( status & ( CB_STAT_BSY | CB_STAT_DRQ
                     ) ) == CB_STAT_DRQ )
  6957                        	.line	1765
  6958                        ;      {
  6959 03:9718: A5 05        	lda	<L242+status_1
  6960 03:971A: 29 88 00     	and	#<$88
  6961 03:971D: 85 01        	sta	<R0
  6962 03:971F: A5 01        	lda	<R0
  6963 03:9721: C9 08 00     	cmp	#<$8
  6964 03:9724: F0 03        	beq	L250
  6965 03:9726: 82 F6 00     	brl	L10104
  6966                        L250:
  6967                        	.line	1766
  6968                        ;
  6969                        ;         // increment number of DRQ packets
  6970                        ;
  6971                        ;         reg_cmd_info.drqPackets ++ ;
  6972                        	.line	1770
  6973 03:9729: EE xx xx     	inc	|~~reg_cmd_info+37
  6974 03:972C: D0 03        	bne	L251
  6975 03:972E: EE xx xx     	inc	|~~reg_cmd_info+37+2
  6976                        L251:
  6977                        ;
  6978                        ;         // determine the number of sectors to tr
                    ansfer
  6979                        ;
  6980                        ;         wordCnt = multiCnt ? multiCnt : 1;
  6981                        	.line	1774
  6982 03:9731: A5 17        	lda	<L241+multiCnt_0
  6983 03:9733: D0 03        	bne	L253
  6984 03:9735: 82 04 00     	brl	L252
  6985                        L253:
  6986 03:9738: A5 17        	lda	<L241+multiCnt_0
  6987 03:973A: 80 03        	bra	L254
  6988                        L252:
  6989 03:973C: A9 01 00     	lda	#$1
  6990                        L254:
  6991 03:973F: 85 01        	sta	<R0
  6992 03:9741: A0 00 00     	ldy	#$0
  6993 03:9744: A5 01        	lda	<R0
  6994 03:9746: 10 01        	bpl	L255
  Thu Dec  3 2020 22:25                                                Page 134


  6995 03:9748: 88           	dey
  6996                        L255:
  6997 03:9749: 85 06        	sta	<L242+wordCnt_1
  6998 03:974B: 84 08        	sty	<L242+wordCnt_1+2
  6999                        ;         if ( wordCnt > numSect )
  7000                        	.line	1775
  7001                        ;            wordCnt = numSect;
  7002 03:974D: 38           	sec
  7003 03:974E: A5 13        	lda	<L241+numSect_0
  7004 03:9750: E5 06        	sbc	<L242+wordCnt_1
  7005 03:9752: A5 15        	lda	<L241+numSect_0+2
  7006 03:9754: E5 08        	sbc	<L242+wordCnt_1+2
  7007 03:9756: 70 03        	bvs	L256
  7008 03:9758: 49 00 80     	eor	#$8000
  7009                        L256:
  7010 03:975B: 10 03        	bpl	L257
  7011 03:975D: 82 08 00     	brl	L10105
  7012                        L257:
  7013                        	.line	1776
  7014 03:9760: A5 13        	lda	<L241+numSect_0
  7015 03:9762: 85 06        	sta	<L242+wordCnt_1
  7016 03:9764: A5 15        	lda	<L241+numSect_0+2
  7017 03:9766: 85 08        	sta	<L242+wordCnt_1+2
  7018                        ;         wordCnt = wordCnt * 256;
  7019                        L10105:
  7020                        	.line	1777
  7021 03:9768: D4 08        	pei	<L242+wordCnt_1+2
  7022 03:976A: D4 06        	pei	<L242+wordCnt_1
  7023 03:976C: A9 08 00     	lda	#$8
  7024                        	xref	~~~lasl
  7025 03:976F: 22 xx xx xx  	jsl	~~~lasl
  7026 03:9773: 85 06        	sta	<L242+wordCnt_1
  7027 03:9775: 86 08        	stx	<L242+wordCnt_1+2
  7028                        ;
  7029                        ;         // Do the REP INSW to read the data for 
                    one DRQ block.
  7030                        ;
  7031                        ;         reg_cmd_info.totalBytesXfer += ( wordCnt
                     << 1 );
  7032                        	.line	1781
  7033 03:9777: A5 06        	lda	<L242+wordCnt_1
  7034 03:9779: 85 01        	sta	<R0
  7035 03:977B: A5 08        	lda	<L242+wordCnt_1+2
  7036 03:977D: 85 03        	sta	<R0+2
  7037 03:977F: 06 01        	asl	<R0
  7038 03:9781: 26 03        	rol	<R0+2
  7039 03:9783: 18           	clc
  7040 03:9784: A5 01        	lda	<R0
  7041 03:9786: 6D xx xx     	adc	|~~reg_cmd_info+33
  7042 03:9789: 8D xx xx     	sta	|~~reg_cmd_info+33
  7043 03:978C: A5 03        	lda	<R0+2
  7044 03:978E: 6D xx xx     	adc	|~~reg_cmd_info+33+2
  7045 03:9791: 8D xx xx     	sta	|~~reg_cmd_info+33+2
  7046                        ;         pio_drq_block_in( CB_DATA, bufAddr, word
                    Cnt );
  7047                        	.line	1782
  7048 03:9794: D4 08        	pei	<L242+wordCnt_1+2
  7049 03:9796: D4 06        	pei	<L242+wordCnt_1
  Thu Dec  3 2020 22:25                                                Page 135


  7050 03:9798: D4 11        	pei	<L241+bufAddr_0+2
  7051 03:979A: D4 0F        	pei	<L241+bufAddr_0
  7052 03:979C: F4 00 00     	pea	#<$0
  7053 03:979F: 22 0F A9 03  	jsl	~~pio_drq_block_in
  7054                        ;
  7055                        ;         DELAY400NS;    // delay so device can ge
                    t the status updated
  7056                        	.line	1784
  7057                        	.line	1784
  7058 03:97A3: F4 08 00     	pea	#<$8
  7059 03:97A6: 22 A8 A7 03  	jsl	~~pio_inbyte
  7060                        	.line	1784
  7061 03:97AA: F4 08 00     	pea	#<$8
  7062 03:97AD: 22 A8 A7 03  	jsl	~~pio_inbyte
  7063                        	.line	1784
  7064 03:97B1: F4 08 00     	pea	#<$8
  7065 03:97B4: 22 A8 A7 03  	jsl	~~pio_inbyte
  7066                        	.line	1784
  7067 03:97B8: F4 08 00     	pea	#<$8
  7068 03:97BB: 22 A8 A7 03  	jsl	~~pio_inbyte
  7069                        	.line	1784
  7070 03:97BF: F4 08 00     	pea	#<$8
  7071 03:97C2: 22 A8 A7 03  	jsl	~~pio_inbyte
  7072                        	.line	1784
  7073                        	.line	1784
  7074                        ;
  7075                        ;         // Note: The drive should have dropped D
                    ATA REQUEST by now.  If there
  7076                        ;         // are more sectors to transfer, BUSY sh
                    ould be active now (unless
  7077                        ;         // there is an error).
  7078                        ;
  7079                        ;         // Decrement the count of sectors to be 
                    transferred
  7080                        ;         // and increment buffer address.
  7081                        ;
  7082                        ;         numSect = numSect - ( multiCnt ? multiCn
                    t : 1 );
  7083                        	.line	1793
  7084 03:97C6: A5 17        	lda	<L241+multiCnt_0
  7085 03:97C8: D0 03        	bne	L259
  7086 03:97CA: 82 04 00     	brl	L258
  7087                        L259:
  7088 03:97CD: A5 17        	lda	<L241+multiCnt_0
  7089 03:97CF: 80 03        	bra	L260
  7090                        L258:
  7091 03:97D1: A9 01 00     	lda	#$1
  7092                        L260:
  7093 03:97D4: 85 01        	sta	<R0
  7094 03:97D6: A0 00 00     	ldy	#$0
  7095 03:97D9: A5 01        	lda	<R0
  7096 03:97DB: 10 01        	bpl	L261
  7097 03:97DD: 88           	dey
  7098                        L261:
  7099 03:97DE: 85 01        	sta	<R0
  7100 03:97E0: 84 03        	sty	<R0+2
  7101 03:97E2: 38           	sec
  7102 03:97E3: A5 13        	lda	<L241+numSect_0
  Thu Dec  3 2020 22:25                                                Page 136


  7103 03:97E5: E5 01        	sbc	<R0
  7104 03:97E7: 85 13        	sta	<L241+numSect_0
  7105 03:97E9: A5 15        	lda	<L241+numSect_0+2
  7106 03:97EB: E5 03        	sbc	<R0+2
  7107 03:97ED: 85 15        	sta	<L241+numSect_0+2
  7108                        ;         bufAddr = bufAddr + ( 512 * ( multiCnt ?
                     multiCnt : 1 ) );
  7109                        	.line	1794
  7110 03:97EF: A5 17        	lda	<L241+multiCnt_0
  7111 03:97F1: D0 03        	bne	L263
  7112 03:97F3: 82 04 00     	brl	L262
  7113                        L263:
  7114 03:97F6: A5 17        	lda	<L241+multiCnt_0
  7115 03:97F8: 80 03        	bra	L264
  7116                        L262:
  7117 03:97FA: A9 01 00     	lda	#$1
  7118                        L264:
  7119 03:97FD: A2 09 00     	ldx	#<$9
  7120                        	xref	~~~asl
  7121 03:9800: 22 xx xx xx  	jsl	~~~asl
  7122 03:9804: 85 01        	sta	<R0
  7123 03:9806: A0 00 00     	ldy	#$0
  7124 03:9809: A5 01        	lda	<R0
  7125 03:980B: 10 01        	bpl	L265
  7126 03:980D: 88           	dey
  7127                        L265:
  7128 03:980E: 85 01        	sta	<R0
  7129 03:9810: 84 03        	sty	<R0+2
  7130 03:9812: 18           	clc
  7131 03:9813: A5 0F        	lda	<L241+bufAddr_0
  7132 03:9815: 65 01        	adc	<R0
  7133 03:9817: 85 0F        	sta	<L241+bufAddr_0
  7134 03:9819: A5 11        	lda	<L241+bufAddr_0+2
  7135 03:981B: 65 03        	adc	<R0+2
  7136 03:981D: 85 11        	sta	<L241+bufAddr_0+2
  7137                        ;      }
  7138                        	.line	1795
  7139                        ;
  7140                        ;      // So was there any error condition?
  7141                        ;
  7142                        ;      if ( status & ( CB_STAT_BSY | CB_STAT_DF | 
                    CB_STAT_ERR ) )
  7143                        L10104:
  7144                        	.line	1799
  7145                        ;      {
  7146 03:981F: E2 20        	sep	#$20
  7147                        	longa	off
  7148 03:9821: A5 05        	lda	<L242+status_1
  7149 03:9823: 29 A1        	and	#<$a1
  7150 03:9825: C2 20        	rep	#$20
  7151                        	longa	on
  7152 03:9827: D0 03        	bne	L266
  7153 03:9829: 82 0C 00     	brl	L10106
  7154                        L266:
  7155                        	.line	1800
  7156                        ;         reg_cmd_info.ec = 31;
  7157                        	.line	1801
  7158 03:982C: E2 20        	sep	#$20
  Thu Dec  3 2020 22:25                                                Page 137


  7159                        	longa	off
  7160 03:982E: A9 1F        	lda	#$1f
  7161 03:9830: 8D xx xx     	sta	|~~reg_cmd_info+31
  7162 03:9833: C2 20        	rep	#$20
  7163                        	longa	on
  7164                        ;         break;   // go to READ_DONE
  7165                        	.line	1802
  7166 03:9835: 82 55 00     	brl	L10101
  7167                        ;      }
  7168                        	.line	1803
  7169                        ;
  7170                        ;      // DRQ should have been set -- was it?
  7171                        ;
  7172                        ;      if ( ( status & CB_STAT_DRQ ) == 0 )
  7173                        L10106:
  7174                        	.line	1807
  7175                        ;      {
  7176 03:9838: E2 20        	sep	#$20
  7177                        	longa	off
  7178 03:983A: A5 05        	lda	<L242+status_1
  7179 03:983C: 29 08        	and	#<$8
  7180 03:983E: C2 20        	rep	#$20
  7181                        	longa	on
  7182 03:9840: F0 03        	beq	L267
  7183 03:9842: 82 0C 00     	brl	L10107
  7184                        L267:
  7185                        	.line	1808
  7186                        ;         reg_cmd_info.ec = 32;
  7187                        	.line	1809
  7188 03:9845: E2 20        	sep	#$20
  7189                        	longa	off
  7190 03:9847: A9 20        	lda	#$20
  7191 03:9849: 8D xx xx     	sta	|~~reg_cmd_info+31
  7192 03:984C: C2 20        	rep	#$20
  7193                        	longa	on
  7194                        ;         break;   // go to READ_DONE
  7195                        	.line	1810
  7196 03:984E: 82 3C 00     	brl	L10101
  7197                        ;      }
  7198                        	.line	1811
  7199                        ;
  7200                        ;      // If all of the requested sectors have bee
                    n transferred, make a
  7201                        ;      // few more checks before we exit.
  7202                        ;
  7203                        ;      if ( numSect < 1 )
  7204                        L10107:
  7205                        	.line	1816
  7206                        ;      {
  7207 03:9851: A5 15        	lda	<L241+numSect_0+2
  7208 03:9853: 30 0C        	bmi	L268
  7209 03:9855: D0 07        	bne	L269
  7210 03:9857: A5 13        	lda	<L241+numSect_0
  7211 03:9859: C9 01 00     	cmp	#1
  7212 03:985C: 90 03        	bcc	L268
  7213                        L269:
  7214 03:985E: 82 29 00     	brl	L10108
  7215                        L268:
  Thu Dec  3 2020 22:25                                                Page 138


  7216                        	.line	1817
  7217                        ;         // Since the drive has transferred all o
                    f the requested sectors
  7218                        ;         // without error, the drive should not h
                    ave BUSY, DEVICE FAULT,
  7219                        ;         // DATA REQUEST or ERROR active now.
  7220                        ;
  7221                        ;         status = pio_inbyte( CB_STAT );
  7222                        	.line	1822
  7223 03:9861: F4 07 00     	pea	#<$7
  7224 03:9864: 22 A8 A7 03  	jsl	~~pio_inbyte
  7225 03:9868: E2 20        	sep	#$20
  7226                        	longa	off
  7227 03:986A: 85 05        	sta	<L242+status_1
  7228 03:986C: C2 20        	rep	#$20
  7229                        	longa	on
  7230                        ;         if ( status & ( CB_STAT_BSY | CB_STAT_DF
                     | CB_STAT_DRQ | CB_STAT_ERR ) )
  7231                        	.line	1823
  7232                        ;         {
  7233 03:986E: E2 20        	sep	#$20
  7234                        	longa	off
  7235 03:9870: A5 05        	lda	<L242+status_1
  7236 03:9872: 29 A9        	and	#<$a9
  7237 03:9874: C2 20        	rep	#$20
  7238                        	longa	on
  7239 03:9876: D0 03        	bne	L270
  7240 03:9878: 82 0C 00     	brl	L10109
  7241                        L270:
  7242                        	.line	1824
  7243                        ;            reg_cmd_info.ec = 33;
  7244                        	.line	1825
  7245 03:987B: E2 20        	sep	#$20
  7246                        	longa	off
  7247 03:987D: A9 21        	lda	#$21
  7248 03:987F: 8D xx xx     	sta	|~~reg_cmd_info+31
  7249 03:9882: C2 20        	rep	#$20
  7250                        	longa	on
  7251                        ;            break;   // go to READ_DONE
  7252                        	.line	1826
  7253 03:9884: 82 06 00     	brl	L10101
  7254                        ;         }
  7255                        	.line	1827
  7256                        ;
  7257                        ;         // All sectors have been read without er
                    ror, go to READ_DONE.
  7258                        ;
  7259                        ;         break;   // go to READ_DONE
  7260                        L10109:
  7261                        	.line	1831
  7262 03:9887: 82 03 00     	brl	L10101
  7263                        ;
  7264                        ;      }
  7265                        	.line	1833
  7266                        ;
  7267                        ;      // This is the end of the read loop.  If we
                     get here, the loop is
  7268                        ;      // repeated to read the next sector.  Go ba
  Thu Dec  3 2020 22:25                                                Page 139


                    ck to READ_LOOP.
  7269                        ;
  7270                        ;   }
  7271                        L10108:
  7272                        	.line	1838
  7273 03:988A: 82 47 FE     	brl	L10100
  7274                        L10101:
  7275                        ;
  7276                        ;   // BMIDE Error=1?
  7277                        ;
  7278                        ;   if ( pio_readBusMstrStatus() & BM_SR_MASK_ERR 
                    )
  7279                        	.line	1842
  7280                        ;   {
  7281 03:988D: 22 F8 A6 03  	jsl	~~pio_readBusMstrStatus
  7282 03:9891: E2 20        	sep	#$20
  7283                        	longa	off
  7284 03:9893: 29 02        	and	#<$2
  7285 03:9895: C2 20        	rep	#$20
  7286                        	longa	on
  7287 03:9897: D0 03        	bne	L271
  7288 03:9899: 82 09 00     	brl	L10110
  7289                        L271:
  7290                        	.line	1843
  7291                        ;      reg_cmd_info.ec = 78;                  // y
                    es
  7292                        	.line	1844
  7293 03:989C: E2 20        	sep	#$20
  7294                        	longa	off
  7295 03:989E: A9 4E        	lda	#$4e
  7296 03:98A0: 8D xx xx     	sta	|~~reg_cmd_info+31
  7297 03:98A3: C2 20        	rep	#$20
  7298                        	longa	on
  7299                        ;   }
  7300                        	.line	1845
  7301                        ;
  7302                        ;   // READ_DONE:
  7303                        ;
  7304                        ;   // All done.  The return values of this functi
                    on are described in
  7305                        ;   // MINDRVR.H.
  7306                        ;
  7307                        ;   if ( reg_cmd_info.ec )
  7308                        L10110:
  7309                        	.line	1852
  7310                        ;      return 1;
  7311 03:98A5: AD xx xx     	lda	|~~reg_cmd_info+31
  7312 03:98A8: 29 FF 00     	and	#$ff
  7313 03:98AB: D0 03        	bne	L272
  7314 03:98AD: 82 06 00     	brl	L10111
  7315                        L272:
  7316                        	.line	1853
  7317 03:98B0: A9 01 00     	lda	#$1
  7318 03:98B3: 82 DA FD     	brl	L245
  7319                        ;   return 0;
  7320                        L10111:
  7321                        	.line	1854
  7322 03:98B6: A9 00 00     	lda	#$0
  Thu Dec  3 2020 22:25                                                Page 140


  7323 03:98B9: 82 D4 FD     	brl	L245
  7324                        ;}
  7325                        	.line	1855
  7326                        	.endblock	1855
  7327             00000009   L241	equ	9
  7328             00000005   L242	equ	5
  7329 03:98BC:              	ends
  7330                        	efunc
  7331                        	.endfunc	1855,5,9
  7332                        	.line	1855
  7333                        ;
  7334                        ;//***********************************************
                    **************
  7335                        ;//
  7336                        ;// reg_pio_data_in_lba28() - Easy way to execute 
                    a PIO Data In command
  7337                        ;//                           using an LBA sector 
                    address.
  7338                        ;//
  7339                        ;//***********************************************
                    **************
  7340                        ;
  7341                        ;int reg_pio_data_in_lba28( unsigned char dev, uns
                    igned char cmd,
  7342                        ;                           unsigned int fr, unsig
                    ned int sc,
  7343                        ;                           unsigned long lba,
  7344                        ;                           unsigned char * bufAdd
                    r,
  7345                        ;                           long numSect, int mult
                    iCnt )
  7346                        ;
  7347                        ;{
  7348                        	.line	1864
  7349                        	.line	1870
  7350                        	FXHDD
  7351                        	xdef	~~reg_pio_data_in_lba28
  7352                        	func
  7353                        	.function	1870
  7354                        ~~reg_pio_data_in_lba28:
  7355                        	longa	on
  7356                        	longi	on
  7357 03:98BC: 3B           	tsc
  7358 03:98BD: 38           	sec
  7359 03:98BE: E9 04 00     	sbc	#L273
  7360 03:98C1: 1B           	tcs
  7361 03:98C2: 0B           	phd
  7362 03:98C3: 5B           	tcd
  7363             00000004   dev_0	set	4
  7364             00000006   cmd_0	set	6
  7365             00000008   fr_0	set	8
  7366             0000000A   sc_0	set	10
  7367             0000000C   lba_0	set	12
  7368             00000010   bufAddr_0	set	16
  7369             00000014   numSect_0	set	20
  7370             00000018   multiCnt_0	set	24
  7371                        	.block	1870
  7372                        ;
  Thu Dec  3 2020 22:25                                                Page 141


  7373                        ;   reg_cmd_info.cmd = cmd;
  7374                        	.sym	dev,4,14,6,8
  7375                        	.sym	cmd,6,14,6,8
  7376                        	.sym	fr,8,16,6,16
  7377                        	.sym	sc,10,16,6,16
  7378                        	.sym	lba,12,18,6,32
  7379                        	.sym	bufAddr,16,142,6,32
  7380                        	.sym	numSect,20,7,6,32
  7381                        	.sym	multiCnt,24,5,6,16
  7382                        	.line	1872
  7383 03:98C4: E2 20        	sep	#$20
  7384                        	longa	off
  7385 03:98C6: A5 0A        	lda	<L273+cmd_0
  7386 03:98C8: 8D xx xx     	sta	|~~reg_cmd_info
  7387 03:98CB: C2 20        	rep	#$20
  7388                        	longa	on
  7389                        ;   reg_cmd_info.fr = fr;
  7390                        	.line	1873
  7391 03:98CD: A5 0C        	lda	<L273+fr_0
  7392 03:98CF: 8D xx xx     	sta	|~~reg_cmd_info+1
  7393                        ;   reg_cmd_info.sc = sc;
  7394                        	.line	1874
  7395 03:98D2: A5 0E        	lda	<L273+sc_0
  7396 03:98D4: 8D xx xx     	sta	|~~reg_cmd_info+3
  7397                        ;   reg_cmd_info.dh = (unsigned char) ( CB_DH_LBA 
                    | ( dev ? CB_DH_DEV1 : CB_DH_DEV0 ) );
  7398                        	.line	1875
  7399 03:98D7: A5 08        	lda	<L273+dev_0
  7400 03:98D9: 29 FF 00     	and	#$ff
  7401 03:98DC: D0 03        	bne	L277
  7402 03:98DE: 82 05 00     	brl	L276
  7403                        L277:
  7404 03:98E1: A9 10 00     	lda	#$10
  7405 03:98E4: 80 03        	bra	L278
  7406                        L276:
  7407 03:98E6: A9 00 00     	lda	#$0
  7408                        L278:
  7409 03:98E9: 09 40 00     	ora	#<$40
  7410 03:98EC: 85 01        	sta	<R0
  7411 03:98EE: E2 20        	sep	#$20
  7412                        	longa	off
  7413 03:98F0: A5 01        	lda	<R0
  7414 03:98F2: 8D xx xx     	sta	|~~reg_cmd_info+11
  7415 03:98F5: C2 20        	rep	#$20
  7416                        	longa	on
  7417                        ;   reg_cmd_info.dc = (unsigned char) ( int_use_in
                    tr_flag ? 0 : CB_DC_NIEN );
  7418                        	.line	1876
  7419 03:98F7: AD xx xx     	lda	|~~int_use_intr_flag
  7420 03:98FA: 29 FF 00     	and	#$ff
  7421 03:98FD: D0 03        	bne	L280
  7422 03:98FF: 82 05 00     	brl	L279
  7423                        L280:
  7424 03:9902: A9 00 00     	lda	#$0
  7425 03:9905: 80 03        	bra	L281
  7426                        L279:
  7427 03:9907: A9 02 00     	lda	#$2
  7428                        L281:
  Thu Dec  3 2020 22:25                                                Page 142


  7429 03:990A: 85 01        	sta	<R0
  7430 03:990C: E2 20        	sep	#$20
  7431                        	longa	off
  7432 03:990E: A5 01        	lda	<R0
  7433 03:9910: 8D xx xx     	sta	|~~reg_cmd_info+12
  7434 03:9913: C2 20        	rep	#$20
  7435                        	longa	on
  7436                        ;   reg_cmd_info.lbaSize = LBA28;
  7437                        	.line	1877
  7438 03:9915: E2 20        	sep	#$20
  7439                        	longa	off
  7440 03:9917: A9 1C        	lda	#$1c
  7441 03:9919: 8D xx xx     	sta	|~~reg_cmd_info+19
  7442 03:991C: C2 20        	rep	#$20
  7443                        	longa	on
  7444                        ;   reg_cmd_info.lbaHigh = 0L;
  7445                        	.line	1878
  7446 03:991E: 9C xx xx     	stz	|~~reg_cmd_info+24
  7447 03:9921: 9C xx xx     	stz	|~~reg_cmd_info+24+2
  7448                        ;   reg_cmd_info.lbaLow = lba;
  7449                        	.line	1879
  7450 03:9924: A5 10        	lda	<L273+lba_0
  7451 03:9926: 8D xx xx     	sta	|~~reg_cmd_info+20
  7452 03:9929: A5 12        	lda	<L273+lba_0+2
  7453 03:992B: 8D xx xx     	sta	|~~reg_cmd_info+20+2
  7454                        ;
  7455                        ;   // these commands transfer only 1 sector
  7456                        ;   if (    ( cmd == CMD_IDENTIFY_DEVICE )
  7457                        	.line	1882
  7458                        ;        || ( cmd == CMD_IDENTIFY_DEVICE_PACKET )
  7459                        ;      )
  7460                        ;      numSect = 1;
  7461 03:992E: E2 20        	sep	#$20
  7462                        	longa	off
  7463 03:9930: A5 0A        	lda	<L273+cmd_0
  7464 03:9932: C9 EC        	cmp	#<$ec
  7465 03:9934: C2 20        	rep	#$20
  7466                        	longa	on
  7467 03:9936: D0 03        	bne	L283
  7468 03:9938: 82 0D 00     	brl	L282
  7469                        L283:
  7470 03:993B: E2 20        	sep	#$20
  7471                        	longa	off
  7472 03:993D: A5 0A        	lda	<L273+cmd_0
  7473 03:993F: C9 A1        	cmp	#<$a1
  7474 03:9941: C2 20        	rep	#$20
  7475                        	longa	on
  7476 03:9943: F0 03        	beq	L284
  7477 03:9945: 82 0A 00     	brl	L10112
  7478                        L284:
  7479                        L282:
  7480                        	.line	1885
  7481 03:9948: A9 01 00     	lda	#$1
  7482 03:994B: 85 18        	sta	<L273+numSect_0
  7483 03:994D: A9 00 00     	lda	#$0
  7484 03:9950: 85 1A        	sta	<L273+numSect_0+2
  7485                        ;
  7486                        ;   // adjust multiple count
  Thu Dec  3 2020 22:25                                                Page 143


  7487                        ;   if ( multiCnt & 0x0800 )
  7488                        L10112:
  7489                        	.line	1888
  7490                        ;   {
  7491 03:9952: A5 1C        	lda	<L273+multiCnt_0
  7492 03:9954: 29 00 08     	and	#<$800
  7493 03:9957: D0 03        	bne	L285
  7494 03:9959: 82 08 00     	brl	L10113
  7495                        L285:
  7496                        	.line	1889
  7497                        ;      // assume caller knows what they are doing
  7498                        ;      multiCnt &= 0x00ff;
  7499                        	.line	1891
  7500 03:995C: A9 00 FF     	lda	#$ff00
  7501 03:995F: 14 1C        	trb	<L273+multiCnt_0
  7502                        ;   }
  7503                        	.line	1892
  7504                        ;   else
  7505 03:9961: 82 12 00     	brl	L10114
  7506                        L10113:
  7507                        ;   {
  7508                        	.line	1894
  7509                        ;      // only Read Multiple uses multiCnt
  7510                        ;      if ( cmd != CMD_READ_MULTIPLE )
  7511                        	.line	1896
  7512                        ;         multiCnt = 1;
  7513 03:9964: E2 20        	sep	#$20
  7514                        	longa	off
  7515 03:9966: A5 0A        	lda	<L273+cmd_0
  7516 03:9968: C9 C4        	cmp	#<$c4
  7517 03:996A: C2 20        	rep	#$20
  7518                        	longa	on
  7519 03:996C: D0 03        	bne	L286
  7520 03:996E: 82 05 00     	brl	L10115
  7521                        L286:
  7522                        	.line	1897
  7523 03:9971: A9 01 00     	lda	#$1
  7524 03:9974: 85 1C        	sta	<L273+multiCnt_0
  7525                        ;   }
  7526                        L10115:
  7527                        	.line	1898
  7528                        L10114:
  7529                        ;
  7530                        ;   reg_cmd_info.ns  = numSect;
  7531                        	.line	1900
  7532 03:9976: A5 18        	lda	<L273+numSect_0
  7533 03:9978: 8D xx xx     	sta	|~~reg_cmd_info+13
  7534 03:997B: A5 1A        	lda	<L273+numSect_0+2
  7535 03:997D: 8D xx xx     	sta	|~~reg_cmd_info+13+2
  7536                        ;   reg_cmd_info.mc  = multiCnt;
  7537                        	.line	1901
  7538 03:9980: A5 1C        	lda	<L273+multiCnt_0
  7539 03:9982: 8D xx xx     	sta	|~~reg_cmd_info+17
  7540                        ;
  7541                        ;   return exec_pio_data_in_cmd( dev, bufAddr, num
                    Sect, multiCnt );
  7542                        	.line	1903
  7543 03:9985: D4 1C        	pei	<L273+multiCnt_0
  Thu Dec  3 2020 22:25                                                Page 144


  7544 03:9987: D4 1A        	pei	<L273+numSect_0+2
  7545 03:9989: D4 18        	pei	<L273+numSect_0
  7546 03:998B: D4 16        	pei	<L273+bufAddr_0+2
  7547 03:998D: D4 14        	pei	<L273+bufAddr_0
  7548 03:998F: D4 08        	pei	<L273+dev_0
  7549 03:9991: 22 6E 96 03  	jsl	~~exec_pio_data_in_cmd
  7550                        L287:
  7551 03:9995: A8           	tay
  7552 03:9996: A5 06        	lda	<L273+2
  7553 03:9998: 85 1C        	sta	<L273+2+22
  7554 03:999A: A5 05        	lda	<L273+1
  7555 03:999C: 85 1B        	sta	<L273+1+22
  7556 03:999E: 2B           	pld
  7557 03:999F: 3B           	tsc
  7558 03:99A0: 18           	clc
  7559 03:99A1: 69 1A 00     	adc	#L273+22
  7560 03:99A4: 1B           	tcs
  7561 03:99A5: 98           	tya
  7562 03:99A6: 6B           	rtl
  7563                        ;}
  7564                        	.line	1904
  7565                        	.endblock	1904
  7566             00000004   L273	equ	4
  7567             00000005   L274	equ	5
  7568 03:99A7:              	ends
  7569                        	efunc
  7570                        	.endfunc	1904,5,4
  7571                        	.line	1904
  7572                        ;
  7573                        ;//***********************************************
                    **************
  7574                        ;//
  7575                        ;// reg_pio_data_in_lba48() - Easy way to execute 
                    a PIO Data In command
  7576                        ;//                           using an LBA sector 
                    address.
  7577                        ;//
  7578                        ;//***********************************************
                    **************
  7579                        ;
  7580                        ;int reg_pio_data_in_lba48( unsigned char dev, uns
                    igned char cmd,
  7581                        ;                           unsigned int fr, unsig
                    ned int sc,
  7582                        ;                           unsigned long lbahi, u
                    nsigned long lbalo,
  7583                        ;                           unsigned char * bufAdd
                    r,
  7584                        ;                           long numSect, int mult
                    iCnt )
  7585                        ;
  7586                        ;{
  7587                        	.line	1913
  7588                        	.line	1919
  7589                        	FXHDD
  7590                        	xdef	~~reg_pio_data_in_lba48
  7591                        	func
  7592                        	.function	1919
  Thu Dec  3 2020 22:25                                                Page 145


  7593                        ~~reg_pio_data_in_lba48:
  7594                        	longa	on
  7595                        	longi	on
  7596 03:99A7: 3B           	tsc
  7597 03:99A8: 38           	sec
  7598 03:99A9: E9 04 00     	sbc	#L288
  7599 03:99AC: 1B           	tcs
  7600 03:99AD: 0B           	phd
  7601 03:99AE: 5B           	tcd
  7602             00000004   dev_0	set	4
  7603             00000006   cmd_0	set	6
  7604             00000008   fr_0	set	8
  7605             0000000A   sc_0	set	10
  7606             0000000C   lbahi_0	set	12
  7607             00000010   lbalo_0	set	16
  7608             00000014   bufAddr_0	set	20
  7609             00000018   numSect_0	set	24
  7610             0000001C   multiCnt_0	set	28
  7611                        	.block	1919
  7612                        ;
  7613                        ;   reg_cmd_info.cmd = cmd;
  7614                        	.sym	dev,4,14,6,8
  7615                        	.sym	cmd,6,14,6,8
  7616                        	.sym	fr,8,16,6,16
  7617                        	.sym	sc,10,16,6,16
  7618                        	.sym	lbahi,12,18,6,32
  7619                        	.sym	lbalo,16,18,6,32
  7620                        	.sym	bufAddr,20,142,6,32
  7621                        	.sym	numSect,24,7,6,32
  7622                        	.sym	multiCnt,28,5,6,16
  7623                        	.line	1921
  7624 03:99AF: E2 20        	sep	#$20
  7625                        	longa	off
  7626 03:99B1: A5 0A        	lda	<L288+cmd_0
  7627 03:99B3: 8D xx xx     	sta	|~~reg_cmd_info
  7628 03:99B6: C2 20        	rep	#$20
  7629                        	longa	on
  7630                        ;   reg_cmd_info.fr = fr;
  7631                        	.line	1922
  7632 03:99B8: A5 0C        	lda	<L288+fr_0
  7633 03:99BA: 8D xx xx     	sta	|~~reg_cmd_info+1
  7634                        ;   reg_cmd_info.sc = sc;
  7635                        	.line	1923
  7636 03:99BD: A5 0E        	lda	<L288+sc_0
  7637 03:99BF: 8D xx xx     	sta	|~~reg_cmd_info+3
  7638                        ;   reg_cmd_info.dh = (unsigned char) ( CB_DH_LBA 
                    | ( dev ? CB_DH_DEV1 : CB_DH_DEV0 ) );
  7639                        	.line	1924
  7640 03:99C2: A5 08        	lda	<L288+dev_0
  7641 03:99C4: 29 FF 00     	and	#$ff
  7642 03:99C7: D0 03        	bne	L292
  7643 03:99C9: 82 05 00     	brl	L291
  7644                        L292:
  7645 03:99CC: A9 10 00     	lda	#$10
  7646 03:99CF: 80 03        	bra	L293
  7647                        L291:
  7648 03:99D1: A9 00 00     	lda	#$0
  7649                        L293:
  Thu Dec  3 2020 22:25                                                Page 146


  7650 03:99D4: 09 40 00     	ora	#<$40
  7651 03:99D7: 85 01        	sta	<R0
  7652 03:99D9: E2 20        	sep	#$20
  7653                        	longa	off
  7654 03:99DB: A5 01        	lda	<R0
  7655 03:99DD: 8D xx xx     	sta	|~~reg_cmd_info+11
  7656 03:99E0: C2 20        	rep	#$20
  7657                        	longa	on
  7658                        ;   reg_cmd_info.dc = (unsigned char) ( int_use_in
                    tr_flag ? 0 : CB_DC_NIEN );
  7659                        	.line	1925
  7660 03:99E2: AD xx xx     	lda	|~~int_use_intr_flag
  7661 03:99E5: 29 FF 00     	and	#$ff
  7662 03:99E8: D0 03        	bne	L295
  7663 03:99EA: 82 05 00     	brl	L294
  7664                        L295:
  7665 03:99ED: A9 00 00     	lda	#$0
  7666 03:99F0: 80 03        	bra	L296
  7667                        L294:
  7668 03:99F2: A9 02 00     	lda	#$2
  7669                        L296:
  7670 03:99F5: 85 01        	sta	<R0
  7671 03:99F7: E2 20        	sep	#$20
  7672                        	longa	off
  7673 03:99F9: A5 01        	lda	<R0
  7674 03:99FB: 8D xx xx     	sta	|~~reg_cmd_info+12
  7675 03:99FE: C2 20        	rep	#$20
  7676                        	longa	on
  7677                        ;   reg_cmd_info.lbaSize = LBA48;
  7678                        	.line	1926
  7679 03:9A00: E2 20        	sep	#$20
  7680                        	longa	off
  7681 03:9A02: A9 30        	lda	#$30
  7682 03:9A04: 8D xx xx     	sta	|~~reg_cmd_info+19
  7683 03:9A07: C2 20        	rep	#$20
  7684                        	longa	on
  7685                        ;   reg_cmd_info.lbaHigh = lbahi;
  7686                        	.line	1927
  7687 03:9A09: A5 10        	lda	<L288+lbahi_0
  7688 03:9A0B: 8D xx xx     	sta	|~~reg_cmd_info+24
  7689 03:9A0E: A5 12        	lda	<L288+lbahi_0+2
  7690 03:9A10: 8D xx xx     	sta	|~~reg_cmd_info+24+2
  7691                        ;   reg_cmd_info.lbaLow = lbalo;
  7692                        	.line	1928
  7693 03:9A13: A5 14        	lda	<L288+lbalo_0
  7694 03:9A15: 8D xx xx     	sta	|~~reg_cmd_info+20
  7695 03:9A18: A5 16        	lda	<L288+lbalo_0+2
  7696 03:9A1A: 8D xx xx     	sta	|~~reg_cmd_info+20+2
  7697                        ;
  7698                        ;   // adjust multiple count
  7699                        ;   if ( multiCnt & 0x0800 )
  7700                        	.line	1931
  7701                        ;   {
  7702 03:9A1D: A5 20        	lda	<L288+multiCnt_0
  7703 03:9A1F: 29 00 08     	and	#<$800
  7704 03:9A22: D0 03        	bne	L297
  7705 03:9A24: 82 08 00     	brl	L10116
  7706                        L297:
  Thu Dec  3 2020 22:25                                                Page 147


  7707                        	.line	1932
  7708                        ;      // assume caller knows what they are doing
  7709                        ;      multiCnt &= 0x00ff;
  7710                        	.line	1934
  7711 03:9A27: A9 00 FF     	lda	#$ff00
  7712 03:9A2A: 14 20        	trb	<L288+multiCnt_0
  7713                        ;   }
  7714                        	.line	1935
  7715                        ;   else
  7716 03:9A2C: 82 12 00     	brl	L10117
  7717                        L10116:
  7718                        ;   {
  7719                        	.line	1937
  7720                        ;      // only Read Multiple Ext uses multiCnt
  7721                        ;      if ( cmd != CMD_READ_MULTIPLE_EXT )
  7722                        	.line	1939
  7723                        ;         multiCnt = 1;
  7724 03:9A2F: E2 20        	sep	#$20
  7725                        	longa	off
  7726 03:9A31: A5 0A        	lda	<L288+cmd_0
  7727 03:9A33: C9 29        	cmp	#<$29
  7728 03:9A35: C2 20        	rep	#$20
  7729                        	longa	on
  7730 03:9A37: D0 03        	bne	L298
  7731 03:9A39: 82 05 00     	brl	L10118
  7732                        L298:
  7733                        	.line	1940
  7734 03:9A3C: A9 01 00     	lda	#$1
  7735 03:9A3F: 85 20        	sta	<L288+multiCnt_0
  7736                        ;   }
  7737                        L10118:
  7738                        	.line	1941
  7739                        L10117:
  7740                        ;
  7741                        ;   reg_cmd_info.ns  = numSect;
  7742                        	.line	1943
  7743 03:9A41: A5 1C        	lda	<L288+numSect_0
  7744 03:9A43: 8D xx xx     	sta	|~~reg_cmd_info+13
  7745 03:9A46: A5 1E        	lda	<L288+numSect_0+2
  7746 03:9A48: 8D xx xx     	sta	|~~reg_cmd_info+13+2
  7747                        ;   reg_cmd_info.mc  = multiCnt;
  7748                        	.line	1944
  7749 03:9A4B: A5 20        	lda	<L288+multiCnt_0
  7750 03:9A4D: 8D xx xx     	sta	|~~reg_cmd_info+17
  7751                        ;
  7752                        ;   return exec_pio_data_in_cmd( dev, bufAddr, num
                    Sect, multiCnt );
  7753                        	.line	1946
  7754 03:9A50: D4 20        	pei	<L288+multiCnt_0
  7755 03:9A52: D4 1E        	pei	<L288+numSect_0+2
  7756 03:9A54: D4 1C        	pei	<L288+numSect_0
  7757 03:9A56: D4 1A        	pei	<L288+bufAddr_0+2
  7758 03:9A58: D4 18        	pei	<L288+bufAddr_0
  7759 03:9A5A: D4 08        	pei	<L288+dev_0
  7760 03:9A5C: 22 6E 96 03  	jsl	~~exec_pio_data_in_cmd
  7761                        L299:
  7762 03:9A60: A8           	tay
  7763 03:9A61: A5 06        	lda	<L288+2
  Thu Dec  3 2020 22:25                                                Page 148


  7764 03:9A63: 85 20        	sta	<L288+2+26
  7765 03:9A65: A5 05        	lda	<L288+1
  7766 03:9A67: 85 1F        	sta	<L288+1+26
  7767 03:9A69: 2B           	pld
  7768 03:9A6A: 3B           	tsc
  7769 03:9A6B: 18           	clc
  7770 03:9A6C: 69 1E 00     	adc	#L288+26
  7771 03:9A6F: 1B           	tcs
  7772 03:9A70: 98           	tya
  7773 03:9A71: 6B           	rtl
  7774                        ;}
  7775                        	.line	1947
  7776                        	.endblock	1947
  7777             00000004   L288	equ	4
  7778             00000005   L289	equ	5
  7779 03:9A72:              	ends
  7780                        	efunc
  7781                        	.endfunc	1947,5,4
  7782                        	.line	1947
  7783                        ;
  7784                        ;//***********************************************
                    **************
  7785                        ;//
  7786                        ;// exec_pio_data_out_cmd() - Execute a PIO Data O
                    ut command.
  7787                        ;//
  7788                        ;// See ATA-2 Section 9.4, ATA-3 Section 9.4,
  7789                        ;// ATA-4 Section 8.7 Figure 11.
  7790                        ;//
  7791                        ;//***********************************************
                    **************
  7792                        ;
  7793                        ;static int exec_pio_data_out_cmd( unsigned char d
                    ev,
  7794                        ;                             unsigned char * bufA
                    ddr,
  7795                        ;                             long numSect, int mu
                    ltiCnt );
  7796                        ;
  7797                        ;static int exec_pio_data_out_cmd( unsigned char d
                    ev,
  7798                        ;                             unsigned char * bufA
                    ddr,
  7799                        ;                             long numSect, int mu
                    ltiCnt )
  7800                        ;
  7801                        ;{
  7802                        	.line	1962
  7803                        	.line	1966
  7804                        	FXHDD
  7805                        	func
  7806                        	.function	1966
  7807                        ~~exec_pio_data_out_cmd:
  7808                        	longa	on
  7809                        	longi	on
  7810 03:9A72: 3B           	tsc
  7811 03:9A73: 38           	sec
  7812 03:9A74: E9 0B 00     	sbc	#L300
  Thu Dec  3 2020 22:25                                                Page 149


  7813 03:9A77: 1B           	tcs
  7814 03:9A78: 0B           	phd
  7815 03:9A79: 5B           	tcd
  7816             00000004   dev_0	set	4
  7817             00000006   bufAddr_0	set	6
  7818             0000000A   numSect_0	set	10
  7819             0000000E   multiCnt_0	set	14
  7820                        	.block	1966
  7821                        ;   unsigned char status;
  7822                        ;   int loopFlag = 1;
  7823                        ;   long wordCnt;
  7824                        ;
  7825                        ;   // reset Bus Master Error bit
  7826                        ;
  7827                        ;   pio_writeBusMstrStatus( BM_SR_MASK_ERR );
  7828             00000000   status_1	set	0
  7829             00000001   loopFlag_1	set	1
  7830             00000003   wordCnt_1	set	3
  7831                        	.sym	status,0,14,1,8
  7832                        	.sym	loopFlag,1,5,1,16
  7833                        	.sym	wordCnt,3,7,1,32
  7834                        	.sym	dev,4,14,6,8
  7835                        	.sym	bufAddr,6,142,6,32
  7836                        	.sym	numSect,10,7,6,32
  7837                        	.sym	multiCnt,14,5,6,16
  7838 03:9A7A: A9 01 00     	lda	#$1
  7839 03:9A7D: 85 06        	sta	<L301+loopFlag_1
  7840                        	.line	1973
  7841 03:9A7F: F4 02 00     	pea	#<$2
  7842 03:9A82: 22 6D A7 03  	jsl	~~pio_writeBusMstrStatus
  7843                        ;
  7844                        ;   // Set command time out.
  7845                        ;
  7846                        ;   tmr_set_timeout();
  7847                        	.line	1977
  7848 03:9A86: 22 F7 AC 03  	jsl	~~tmr_set_timeout
  7849                        ;
  7850                        ;   // Select the drive - call the sub_select func
                    tion.
  7851                        ;   // Quit now if this fails.
  7852                        ;
  7853                        ;   if ( sub_select( dev ) )
  7854                        	.line	1982
  7855                        ;   {
  7856 03:9A8A: D4 0F        	pei	<L300+dev_0
  7857 03:9A8C: 22 A6 A4 03  	jsl	~~sub_select
  7858 03:9A90: AA           	tax
  7859 03:9A91: D0 03        	bne	L303
  7860 03:9A93: 82 15 00     	brl	L10119
  7861                        L303:
  7862                        	.line	1983
  7863                        ;      return 1;
  7864                        	.line	1984
  7865 03:9A96: A9 01 00     	lda	#$1
  7866                        L304:
  7867 03:9A99: A8           	tay
  7868 03:9A9A: A5 0D        	lda	<L300+2
  7869 03:9A9C: 85 19        	sta	<L300+2+12
  Thu Dec  3 2020 22:25                                                Page 150


  7870 03:9A9E: A5 0C        	lda	<L300+1
  7871 03:9AA0: 85 18        	sta	<L300+1+12
  7872 03:9AA2: 2B           	pld
  7873 03:9AA3: 3B           	tsc
  7874 03:9AA4: 18           	clc
  7875 03:9AA5: 69 17 00     	adc	#L300+12
  7876 03:9AA8: 1B           	tcs
  7877 03:9AA9: 98           	tya
  7878 03:9AAA: 6B           	rtl
  7879                        ;   }
  7880                        	.line	1985
  7881                        ;
  7882                        ;   // Set up all the registers except the command
                     register.
  7883                        ;
  7884                        ;   sub_setup_command();
  7885                        L10119:
  7886                        	.line	1989
  7887 03:9AAB: 22 60 A2 03  	jsl	~~sub_setup_command
  7888                        ;
  7889                        ;   // Start the command by setting the Command re
                    gister.  The drive
  7890                        ;   // should immediately set BUSY status.
  7891                        ;
  7892                        ;   pio_outbyte( CB_CMD, reg_cmd_info.cmd );
  7893                        	.line	1994
  7894 03:9AAF: AD xx xx     	lda	|~~reg_cmd_info
  7895 03:9AB2: 48           	pha
  7896 03:9AB3: F4 07 00     	pea	#<$7
  7897 03:9AB6: 22 E7 A7 03  	jsl	~~pio_outbyte
  7898                        ;
  7899                        ;   // Waste some time by reading the alternate st
                    atus a few times.
  7900                        ;   // This gives the drive time to set BUSY in th
                    e status register on
  7901                        ;   // really fast systems.  If we don't do this, 
                    a slow drive on a fast
  7902                        ;   // system may not set BUSY fast enough and we 
                    would think it had
  7903                        ;   // completed the command when it really had no
                    t even started the
  7904                        ;   // command yet.
  7905                        ;
  7906                        ;   DELAY400NS;
  7907                        	.line	2003
  7908                        	.line	2003
  7909 03:9ABA: F4 08 00     	pea	#<$8
  7910 03:9ABD: 22 A8 A7 03  	jsl	~~pio_inbyte
  7911                        	.line	2003
  7912 03:9AC1: F4 08 00     	pea	#<$8
  7913 03:9AC4: 22 A8 A7 03  	jsl	~~pio_inbyte
  7914                        	.line	2003
  7915 03:9AC8: F4 08 00     	pea	#<$8
  7916 03:9ACB: 22 A8 A7 03  	jsl	~~pio_inbyte
  7917                        	.line	2003
  7918 03:9ACF: F4 08 00     	pea	#<$8
  7919 03:9AD2: 22 A8 A7 03  	jsl	~~pio_inbyte
  7920                        	.line	2003
  Thu Dec  3 2020 22:25                                                Page 151


  7921 03:9AD6: F4 08 00     	pea	#<$8
  7922 03:9AD9: 22 A8 A7 03  	jsl	~~pio_inbyte
  7923                        	.line	2003
  7924                        	.line	2003
  7925                        ;
  7926                        ;   // Wait for not BUSY or time out.
  7927                        ;   // Note: No interrupt is generated for the
  7928                        ;   // first sector of a write command.
  7929                        ;
  7930                        ;   while ( 1 )
  7931                        	.line	2009
  7932                        L10120:
  7933                        ;   {
  7934                        	.line	2010
  7935                        ;      status = pio_inbyte( CB_ASTAT );
  7936                        	.line	2011
  7937 03:9ADD: F4 08 00     	pea	#<$8
  7938 03:9AE0: 22 A8 A7 03  	jsl	~~pio_inbyte
  7939 03:9AE4: E2 20        	sep	#$20
  7940                        	longa	off
  7941 03:9AE6: 85 05        	sta	<L301+status_1
  7942 03:9AE8: C2 20        	rep	#$20
  7943                        	longa	on
  7944                        ;      if ( ( status & CB_STAT_BSY ) == 0 )
  7945                        	.line	2012
  7946                        ;         break;
  7947 03:9AEA: E2 20        	sep	#$20
  7948                        	longa	off
  7949 03:9AEC: A5 05        	lda	<L301+status_1
  7950 03:9AEE: 29 80        	and	#<$80
  7951 03:9AF0: C2 20        	rep	#$20
  7952                        	longa	on
  7953 03:9AF2: D0 03        	bne	L305
  7954 03:9AF4: 82 24 00     	brl	L10121
  7955                        L305:
  7956                        ;      if ( tmr_chk_timeout() )
  7957                        	.line	2014
  7958                        ;      {
  7959 03:9AF7: 22 1F AD 03  	jsl	~~tmr_chk_timeout
  7960 03:9AFB: AA           	tax
  7961 03:9AFC: D0 03        	bne	L306
  7962 03:9AFE: 82 17 00     	brl	L10122
  7963                        L306:
  7964                        	.line	2015
  7965                        ;         reg_cmd_info.to = 1;
  7966                        	.line	2016
  7967 03:9B01: E2 20        	sep	#$20
  7968                        	longa	off
  7969 03:9B03: A9 01        	lda	#$1
  7970 03:9B05: 8D xx xx     	sta	|~~reg_cmd_info+32
  7971 03:9B08: C2 20        	rep	#$20
  7972                        	longa	on
  7973                        ;         reg_cmd_info.ec = 47;
  7974                        	.line	2017
  7975 03:9B0A: E2 20        	sep	#$20
  7976                        	longa	off
  7977 03:9B0C: A9 2F        	lda	#$2f
  7978 03:9B0E: 8D xx xx     	sta	|~~reg_cmd_info+31
  Thu Dec  3 2020 22:25                                                Page 152


  7979 03:9B11: C2 20        	rep	#$20
  7980                        	longa	on
  7981                        ;         loopFlag = 0;
  7982                        	.line	2018
  7983 03:9B13: 64 06        	stz	<L301+loopFlag_1
  7984                        ;         break;
  7985                        	.line	2019
  7986 03:9B15: 82 03 00     	brl	L10121
  7987                        ;      }
  7988                        	.line	2020
  7989                        ;   }
  7990                        L10122:
  7991                        	.line	2021
  7992 03:9B18: 82 C2 FF     	brl	L10120
  7993                        L10121:
  7994                        ;
  7995                        ;   // This loop writes each sector.
  7996                        ;
  7997                        ;   while ( loopFlag )
  7998                        	.line	2025
  7999                        L10123:
  8000 03:9B1B: A5 06        	lda	<L301+loopFlag_1
  8001 03:9B1D: D0 03        	bne	L307
  8002 03:9B1F: 82 AC 01     	brl	L10124
  8003                        L307:
  8004                        ;   {
  8005                        	.line	2026
  8006                        ;      // WRITE_LOOP:
  8007                        ;      //
  8008                        ;      // NOTE NOTE NOTE ...  The primary status r
                    egister (1f7) MUST NOT be
  8009                        ;      // read more than ONCE for each sector tran
                    sferred!  When the
  8010                        ;      // primary status register is read, the dri
                    ve resets IRQ.  The
  8011                        ;      // alternate status register (3f6) can be r
                    ead any number of times.
  8012                        ;      // For correct results, transfer the 256 wo
                    rds (REP OUTSW), wait for
  8013                        ;      // interrupt and then read the primary stat
                    us register.  AS
  8014                        ;      // SOON as BOTH the primary status register
                     has been read AND the
  8015                        ;      // last of the 256 words has been written, 
                    the drive is allowed to
  8016                        ;      // generate the next IRQ (newer and faster 
                    drives could generate
  8017                        ;      // the next IRQ in 50 microseconds or less)
                    .  If the primary
  8018                        ;      // status register is read more than once, 
                    there is the possibility
  8019                        ;      // of a race between the drive and the soft
                    ware and the next IRQ
  8020                        ;      // could be reset before the system interru
                    pt controller sees it.
  8021                        ;
  8022                        ;      // If BSY=0 and DRQ=1, transfer the data,
  8023                        ;      // even if we find out there is an error la
  Thu Dec  3 2020 22:25                                                Page 153


                    ter.
  8024                        ;
  8025                        ;      if ( ( status & ( CB_STAT_BSY | CB_STAT_DRQ
                     ) ) == CB_STAT_DRQ )
  8026                        	.line	2046
  8027                        ;      {
  8028 03:9B22: A5 05        	lda	<L301+status_1
  8029 03:9B24: 29 88 00     	and	#<$88
  8030 03:9B27: 85 01        	sta	<R0
  8031 03:9B29: A5 01        	lda	<R0
  8032 03:9B2B: C9 08 00     	cmp	#<$8
  8033 03:9B2E: F0 03        	beq	L308
  8034 03:9B30: 82 F6 00     	brl	L10125
  8035                        L308:
  8036                        	.line	2047
  8037                        ;
  8038                        ;         // increment number of DRQ packets
  8039                        ;
  8040                        ;         reg_cmd_info.drqPackets ++ ;
  8041                        	.line	2051
  8042 03:9B33: EE xx xx     	inc	|~~reg_cmd_info+37
  8043 03:9B36: D0 03        	bne	L309
  8044 03:9B38: EE xx xx     	inc	|~~reg_cmd_info+37+2
  8045                        L309:
  8046                        ;
  8047                        ;         // determine the number of sectors to tr
                    ansfer
  8048                        ;
  8049                        ;         wordCnt = multiCnt ? multiCnt : 1;
  8050                        	.line	2055
  8051 03:9B3B: A5 19        	lda	<L300+multiCnt_0
  8052 03:9B3D: D0 03        	bne	L311
  8053 03:9B3F: 82 04 00     	brl	L310
  8054                        L311:
  8055 03:9B42: A5 19        	lda	<L300+multiCnt_0
  8056 03:9B44: 80 03        	bra	L312
  8057                        L310:
  8058 03:9B46: A9 01 00     	lda	#$1
  8059                        L312:
  8060 03:9B49: 85 01        	sta	<R0
  8061 03:9B4B: A0 00 00     	ldy	#$0
  8062 03:9B4E: A5 01        	lda	<R0
  8063 03:9B50: 10 01        	bpl	L313
  8064 03:9B52: 88           	dey
  8065                        L313:
  8066 03:9B53: 85 08        	sta	<L301+wordCnt_1
  8067 03:9B55: 84 0A        	sty	<L301+wordCnt_1+2
  8068                        ;         if ( wordCnt > numSect )
  8069                        	.line	2056
  8070                        ;            wordCnt = numSect;
  8071 03:9B57: 38           	sec
  8072 03:9B58: A5 15        	lda	<L300+numSect_0
  8073 03:9B5A: E5 08        	sbc	<L301+wordCnt_1
  8074 03:9B5C: A5 17        	lda	<L300+numSect_0+2
  8075 03:9B5E: E5 0A        	sbc	<L301+wordCnt_1+2
  8076 03:9B60: 70 03        	bvs	L314
  8077 03:9B62: 49 00 80     	eor	#$8000
  8078                        L314:
  Thu Dec  3 2020 22:25                                                Page 154


  8079 03:9B65: 10 03        	bpl	L315
  8080 03:9B67: 82 08 00     	brl	L10126
  8081                        L315:
  8082                        	.line	2057
  8083 03:9B6A: A5 15        	lda	<L300+numSect_0
  8084 03:9B6C: 85 08        	sta	<L301+wordCnt_1
  8085 03:9B6E: A5 17        	lda	<L300+numSect_0+2
  8086 03:9B70: 85 0A        	sta	<L301+wordCnt_1+2
  8087                        ;         wordCnt = wordCnt * 256;
  8088                        L10126:
  8089                        	.line	2058
  8090 03:9B72: D4 0A        	pei	<L301+wordCnt_1+2
  8091 03:9B74: D4 08        	pei	<L301+wordCnt_1
  8092 03:9B76: A9 08 00     	lda	#$8
  8093                        	xref	~~~lasl
  8094 03:9B79: 22 xx xx xx  	jsl	~~~lasl
  8095 03:9B7D: 85 08        	sta	<L301+wordCnt_1
  8096 03:9B7F: 86 0A        	stx	<L301+wordCnt_1+2
  8097                        ;
  8098                        ;         // Do the REP OUTSW to write the data fo
                    r one DRQ block.
  8099                        ;
  8100                        ;         reg_cmd_info.totalBytesXfer += ( wordCnt
                     << 1 );
  8101                        	.line	2062
  8102 03:9B81: A5 08        	lda	<L301+wordCnt_1
  8103 03:9B83: 85 01        	sta	<R0
  8104 03:9B85: A5 0A        	lda	<L301+wordCnt_1+2
  8105 03:9B87: 85 03        	sta	<R0+2
  8106 03:9B89: 06 01        	asl	<R0
  8107 03:9B8B: 26 03        	rol	<R0+2
  8108 03:9B8D: 18           	clc
  8109 03:9B8E: A5 01        	lda	<R0
  8110 03:9B90: 6D xx xx     	adc	|~~reg_cmd_info+33
  8111 03:9B93: 8D xx xx     	sta	|~~reg_cmd_info+33
  8112 03:9B96: A5 03        	lda	<R0+2
  8113 03:9B98: 6D xx xx     	adc	|~~reg_cmd_info+33+2
  8114 03:9B9B: 8D xx xx     	sta	|~~reg_cmd_info+33+2
  8115                        ;         pio_drq_block_out( CB_DATA, bufAddr, wor
                    dCnt );
  8116                        	.line	2063
  8117 03:9B9E: D4 0A        	pei	<L301+wordCnt_1+2
  8118 03:9BA0: D4 08        	pei	<L301+wordCnt_1
  8119 03:9BA2: D4 13        	pei	<L300+bufAddr_0+2
  8120 03:9BA4: D4 11        	pei	<L300+bufAddr_0
  8121 03:9BA6: F4 00 00     	pea	#<$0
  8122 03:9BA9: 22 12 AA 03  	jsl	~~pio_drq_block_out
  8123                        ;
  8124                        ;         DELAY400NS;    // delay so device can ge
                    t the status updated
  8125                        	.line	2065
  8126                        	.line	2065
  8127 03:9BAD: F4 08 00     	pea	#<$8
  8128 03:9BB0: 22 A8 A7 03  	jsl	~~pio_inbyte
  8129                        	.line	2065
  8130 03:9BB4: F4 08 00     	pea	#<$8
  8131 03:9BB7: 22 A8 A7 03  	jsl	~~pio_inbyte
  8132                        	.line	2065
  Thu Dec  3 2020 22:25                                                Page 155


  8133 03:9BBB: F4 08 00     	pea	#<$8
  8134 03:9BBE: 22 A8 A7 03  	jsl	~~pio_inbyte
  8135                        	.line	2065
  8136 03:9BC2: F4 08 00     	pea	#<$8
  8137 03:9BC5: 22 A8 A7 03  	jsl	~~pio_inbyte
  8138                        	.line	2065
  8139 03:9BC9: F4 08 00     	pea	#<$8
  8140 03:9BCC: 22 A8 A7 03  	jsl	~~pio_inbyte
  8141                        	.line	2065
  8142                        	.line	2065
  8143                        ;
  8144                        ;         // Note: The drive should have dropped D
                    ATA REQUEST and
  8145                        ;         // raised BUSY by now.
  8146                        ;
  8147                        ;         // Decrement the count of sectors to be 
                    transferred
  8148                        ;         // and increment buffer address.
  8149                        ;
  8150                        ;         numSect = numSect - ( multiCnt ? multiCn
                    t : 1 );
  8151                        	.line	2073
  8152 03:9BD0: A5 19        	lda	<L300+multiCnt_0
  8153 03:9BD2: D0 03        	bne	L317
  8154 03:9BD4: 82 04 00     	brl	L316
  8155                        L317:
  8156 03:9BD7: A5 19        	lda	<L300+multiCnt_0
  8157 03:9BD9: 80 03        	bra	L318
  8158                        L316:
  8159 03:9BDB: A9 01 00     	lda	#$1
  8160                        L318:
  8161 03:9BDE: 85 01        	sta	<R0
  8162 03:9BE0: A0 00 00     	ldy	#$0
  8163 03:9BE3: A5 01        	lda	<R0
  8164 03:9BE5: 10 01        	bpl	L319
  8165 03:9BE7: 88           	dey
  8166                        L319:
  8167 03:9BE8: 85 01        	sta	<R0
  8168 03:9BEA: 84 03        	sty	<R0+2
  8169 03:9BEC: 38           	sec
  8170 03:9BED: A5 15        	lda	<L300+numSect_0
  8171 03:9BEF: E5 01        	sbc	<R0
  8172 03:9BF1: 85 15        	sta	<L300+numSect_0
  8173 03:9BF3: A5 17        	lda	<L300+numSect_0+2
  8174 03:9BF5: E5 03        	sbc	<R0+2
  8175 03:9BF7: 85 17        	sta	<L300+numSect_0+2
  8176                        ;         bufAddr = bufAddr + ( 512 * ( multiCnt ?
                     multiCnt : 1 ) );
  8177                        	.line	2074
  8178 03:9BF9: A5 19        	lda	<L300+multiCnt_0
  8179 03:9BFB: D0 03        	bne	L321
  8180 03:9BFD: 82 04 00     	brl	L320
  8181                        L321:
  8182 03:9C00: A5 19        	lda	<L300+multiCnt_0
  8183 03:9C02: 80 03        	bra	L322
  8184                        L320:
  8185 03:9C04: A9 01 00     	lda	#$1
  8186                        L322:
  Thu Dec  3 2020 22:25                                                Page 156


  8187 03:9C07: A2 09 00     	ldx	#<$9
  8188                        	xref	~~~asl
  8189 03:9C0A: 22 xx xx xx  	jsl	~~~asl
  8190 03:9C0E: 85 01        	sta	<R0
  8191 03:9C10: A0 00 00     	ldy	#$0
  8192 03:9C13: A5 01        	lda	<R0
  8193 03:9C15: 10 01        	bpl	L323
  8194 03:9C17: 88           	dey
  8195                        L323:
  8196 03:9C18: 85 01        	sta	<R0
  8197 03:9C1A: 84 03        	sty	<R0+2
  8198 03:9C1C: 18           	clc
  8199 03:9C1D: A5 11        	lda	<L300+bufAddr_0
  8200 03:9C1F: 65 01        	adc	<R0
  8201 03:9C21: 85 11        	sta	<L300+bufAddr_0
  8202 03:9C23: A5 13        	lda	<L300+bufAddr_0+2
  8203 03:9C25: 65 03        	adc	<R0+2
  8204 03:9C27: 85 13        	sta	<L300+bufAddr_0+2
  8205                        ;      }
  8206                        	.line	2075
  8207                        ;
  8208                        ;      // So was there any error condition?
  8209                        ;
  8210                        ;      if ( status & ( CB_STAT_BSY | CB_STAT_DF | 
                    CB_STAT_ERR ) )
  8211                        L10125:
  8212                        	.line	2079
  8213                        ;      {
  8214 03:9C29: E2 20        	sep	#$20
  8215                        	longa	off
  8216 03:9C2B: A5 05        	lda	<L301+status_1
  8217 03:9C2D: 29 A1        	and	#<$a1
  8218 03:9C2F: C2 20        	rep	#$20
  8219                        	longa	on
  8220 03:9C31: D0 03        	bne	L324
  8221 03:9C33: 82 0C 00     	brl	L10127
  8222                        L324:
  8223                        	.line	2080
  8224                        ;         reg_cmd_info.ec = 41;
  8225                        	.line	2081
  8226 03:9C36: E2 20        	sep	#$20
  8227                        	longa	off
  8228 03:9C38: A9 29        	lda	#$29
  8229 03:9C3A: 8D xx xx     	sta	|~~reg_cmd_info+31
  8230 03:9C3D: C2 20        	rep	#$20
  8231                        	longa	on
  8232                        ;         break;   // go to WRITE_DONE
  8233                        	.line	2082
  8234 03:9C3F: 82 8C 00     	brl	L10124
  8235                        ;      }
  8236                        	.line	2083
  8237                        ;
  8238                        ;      // DRQ should have been set -- was it?
  8239                        ;
  8240                        ;      if ( ( status & CB_STAT_DRQ ) == 0 )
  8241                        L10127:
  8242                        	.line	2087
  8243                        ;      {
  Thu Dec  3 2020 22:25                                                Page 157


  8244 03:9C42: E2 20        	sep	#$20
  8245                        	longa	off
  8246 03:9C44: A5 05        	lda	<L301+status_1
  8247 03:9C46: 29 08        	and	#<$8
  8248 03:9C48: C2 20        	rep	#$20
  8249                        	longa	on
  8250 03:9C4A: F0 03        	beq	L325
  8251 03:9C4C: 82 0C 00     	brl	L10128
  8252                        L325:
  8253                        	.line	2088
  8254                        ;         reg_cmd_info.ec = 42;
  8255                        	.line	2089
  8256 03:9C4F: E2 20        	sep	#$20
  8257                        	longa	off
  8258 03:9C51: A9 2A        	lda	#$2a
  8259 03:9C53: 8D xx xx     	sta	|~~reg_cmd_info+31
  8260 03:9C56: C2 20        	rep	#$20
  8261                        	longa	on
  8262                        ;         break;   // go to WRITE_DONE
  8263                        	.line	2090
  8264 03:9C58: 82 73 00     	brl	L10124
  8265                        ;      }
  8266                        	.line	2091
  8267                        ;
  8268                        ;      // Wait for interrupt -or- wait for not BUS
                    Y -or- wait for time out.
  8269                        ;
  8270                        ;      sub_wait_poll( 44, 45 );
  8271                        L10128:
  8272                        	.line	2095
  8273 03:9C5B: F4 2D 00     	pea	#<$2d
  8274 03:9C5E: F4 2C 00     	pea	#<$2c
  8275 03:9C61: 22 36 A6 03  	jsl	~~sub_wait_poll
  8276                        ;
  8277                        ;      // If polling or error read the status, oth
                    erwise
  8278                        ;      // get the status that was read by the inte
                    rrupt handler.
  8279                        ;
  8280                        ;      if ( ( ! int_use_intr_flag ) || ( reg_cmd_i
                    nfo.ec ) )
  8281                        	.line	2100
  8282                        ;         status = pio_inbyte( CB_STAT );
  8283 03:9C65: AD xx xx     	lda	|~~int_use_intr_flag
  8284 03:9C68: 29 FF 00     	and	#$ff
  8285 03:9C6B: D0 03        	bne	L327
  8286 03:9C6D: 82 0B 00     	brl	L326
  8287                        L327:
  8288 03:9C70: AD xx xx     	lda	|~~reg_cmd_info+31
  8289 03:9C73: 29 FF 00     	and	#$ff
  8290 03:9C76: D0 03        	bne	L328
  8291 03:9C78: 82 10 00     	brl	L10129
  8292                        L328:
  8293                        L326:
  8294                        	.line	2101
  8295 03:9C7B: F4 07 00     	pea	#<$7
  8296 03:9C7E: 22 A8 A7 03  	jsl	~~pio_inbyte
  8297 03:9C82: E2 20        	sep	#$20
  Thu Dec  3 2020 22:25                                                Page 158


  8298                        	longa	off
  8299 03:9C84: 85 05        	sta	<L301+status_1
  8300 03:9C86: C2 20        	rep	#$20
  8301                        	longa	on
  8302                        ;      else
  8303 03:9C88: 82 09 00     	brl	L10130
  8304                        L10129:
  8305                        ;         status = int_ata_status;
  8306                        	.line	2103
  8307 03:9C8B: E2 20        	sep	#$20
  8308                        	longa	off
  8309 03:9C8D: AD xx xx     	lda	|~~int_ata_status
  8310 03:9C90: 85 05        	sta	<L301+status_1
  8311 03:9C92: C2 20        	rep	#$20
  8312                        	longa	on
  8313                        L10130:
  8314                        ;
  8315                        ;      // If there was a time out error, go to WRI
                    TE_DONE.
  8316                        ;
  8317                        ;      if ( reg_cmd_info.ec )
  8318                        	.line	2107
  8319                        ;         break;   // go to WRITE_DONE
  8320 03:9C94: AD xx xx     	lda	|~~reg_cmd_info+31
  8321 03:9C97: 29 FF 00     	and	#$ff
  8322 03:9C9A: F0 03        	beq	L329
  8323 03:9C9C: 82 2F 00     	brl	L10124
  8324                        L329:
  8325                        ;
  8326                        ;      // If all of the requested sectors have bee
                    n transferred, make a
  8327                        ;      // few more checks before we exit.
  8328                        ;
  8329                        ;      if ( numSect < 1 )
  8330                        	.line	2113
  8331                        ;      {
  8332 03:9C9F: A5 17        	lda	<L300+numSect_0+2
  8333 03:9CA1: 30 0C        	bmi	L330
  8334 03:9CA3: D0 07        	bne	L331
  8335 03:9CA5: A5 15        	lda	<L300+numSect_0
  8336 03:9CA7: C9 01 00     	cmp	#1
  8337 03:9CAA: 90 03        	bcc	L330
  8338                        L331:
  8339 03:9CAC: 82 1C 00     	brl	L10131
  8340                        L330:
  8341                        	.line	2114
  8342                        ;         // Since the drive has transferred all o
                    f the sectors without
  8343                        ;         // error, the drive MUST not have BUSY, 
                    DEVICE FAULT, DATA REQUEST
  8344                        ;         // or ERROR status at this time.
  8345                        ;
  8346                        ;         if ( status & ( CB_STAT_BSY | CB_STAT_DF
                     | CB_STAT_DRQ | CB_STAT_ERR ) )
  8347                        	.line	2119
  8348                        ;         {
  8349 03:9CAF: E2 20        	sep	#$20
  8350                        	longa	off
  Thu Dec  3 2020 22:25                                                Page 159


  8351 03:9CB1: A5 05        	lda	<L301+status_1
  8352 03:9CB3: 29 A9        	and	#<$a9
  8353 03:9CB5: C2 20        	rep	#$20
  8354                        	longa	on
  8355 03:9CB7: D0 03        	bne	L332
  8356 03:9CB9: 82 0C 00     	brl	L10132
  8357                        L332:
  8358                        	.line	2120
  8359                        ;            reg_cmd_info.ec = 43;
  8360                        	.line	2121
  8361 03:9CBC: E2 20        	sep	#$20
  8362                        	longa	off
  8363 03:9CBE: A9 2B        	lda	#$2b
  8364 03:9CC0: 8D xx xx     	sta	|~~reg_cmd_info+31
  8365 03:9CC3: C2 20        	rep	#$20
  8366                        	longa	on
  8367                        ;            break;   // go to WRITE_DONE
  8368                        	.line	2122
  8369 03:9CC5: 82 06 00     	brl	L10124
  8370                        ;         }
  8371                        	.line	2123
  8372                        ;
  8373                        ;         // All sectors have been written without
                     error, go to WRITE_DONE.
  8374                        ;
  8375                        ;         break;   // go to WRITE_DONE
  8376                        L10132:
  8377                        	.line	2127
  8378 03:9CC8: 82 03 00     	brl	L10124
  8379                        ;
  8380                        ;      }
  8381                        	.line	2129
  8382                        ;
  8383                        ;      //
  8384                        ;      // This is the end of the write loop.  If w
                    e get here, the loop
  8385                        ;      // is repeated to write the next sector.  G
                    o back to WRITE_LOOP.
  8386                        ;
  8387                        ;   }
  8388                        L10131:
  8389                        	.line	2135
  8390 03:9CCB: 82 4D FE     	brl	L10123
  8391                        L10124:
  8392                        ;
  8393                        ;   // BMIDE Error=1?
  8394                        ;
  8395                        ;   if ( pio_readBusMstrStatus() & BM_SR_MASK_ERR 
                    )
  8396                        	.line	2139
  8397                        ;   {
  8398 03:9CCE: 22 F8 A6 03  	jsl	~~pio_readBusMstrStatus
  8399 03:9CD2: E2 20        	sep	#$20
  8400                        	longa	off
  8401 03:9CD4: 29 02        	and	#<$2
  8402 03:9CD6: C2 20        	rep	#$20
  8403                        	longa	on
  8404 03:9CD8: D0 03        	bne	L333
  Thu Dec  3 2020 22:25                                                Page 160


  8405 03:9CDA: 82 09 00     	brl	L10133
  8406                        L333:
  8407                        	.line	2140
  8408                        ;      reg_cmd_info.ec = 78;                  // y
                    es
  8409                        	.line	2141
  8410 03:9CDD: E2 20        	sep	#$20
  8411                        	longa	off
  8412 03:9CDF: A9 4E        	lda	#$4e
  8413 03:9CE1: 8D xx xx     	sta	|~~reg_cmd_info+31
  8414 03:9CE4: C2 20        	rep	#$20
  8415                        	longa	on
  8416                        ;   }
  8417                        	.line	2142
  8418                        ;
  8419                        ;   // WRITE_DONE:
  8420                        ;
  8421                        ;   // All done.  The return values of this functi
                    on are described in
  8422                        ;   // MINDRVR.H.
  8423                        ;
  8424                        ;   if ( reg_cmd_info.ec )
  8425                        L10133:
  8426                        	.line	2149
  8427                        ;      return 1;
  8428 03:9CE6: AD xx xx     	lda	|~~reg_cmd_info+31
  8429 03:9CE9: 29 FF 00     	and	#$ff
  8430 03:9CEC: D0 03        	bne	L334
  8431 03:9CEE: 82 06 00     	brl	L10134
  8432                        L334:
  8433                        	.line	2150
  8434 03:9CF1: A9 01 00     	lda	#$1
  8435 03:9CF4: 82 A2 FD     	brl	L304
  8436                        ;   return 0;
  8437                        L10134:
  8438                        	.line	2151
  8439 03:9CF7: A9 00 00     	lda	#$0
  8440 03:9CFA: 82 9C FD     	brl	L304
  8441                        ;}
  8442                        	.line	2152
  8443                        	.endblock	2152
  8444             0000000B   L300	equ	11
  8445             00000005   L301	equ	5
  8446 03:9CFD:              	ends
  8447                        	efunc
  8448                        	.endfunc	2152,5,11
  8449                        	.line	2152
  8450                        ;
  8451                        ;//***********************************************
                    **************
  8452                        ;//
  8453                        ;// reg_pio_data_out_lba28() - Easy way to execute
                     a PIO Data In command
  8454                        ;//                            using an LBA sector
                     address.
  8455                        ;//
  8456                        ;//***********************************************
                    **************
  Thu Dec  3 2020 22:25                                                Page 161


  8457                        ;
  8458                        ;int reg_pio_data_out_lba28( unsigned char dev, un
                    signed char cmd,
  8459                        ;                            unsigned int fr, unsi
                    gned int sc,
  8460                        ;                            unsigned long lba,
  8461                        ;                            unsigned char * bufAd
                    dr,
  8462                        ;                            long numSect, int mul
                    tiCnt )
  8463                        ;
  8464                        ;{
  8465                        	.line	2161
  8466                        	.line	2167
  8467                        	FXHDD
  8468                        	xdef	~~reg_pio_data_out_lba28
  8469                        	func
  8470                        	.function	2167
  8471                        ~~reg_pio_data_out_lba28:
  8472                        	longa	on
  8473                        	longi	on
  8474 03:9CFD: 3B           	tsc
  8475 03:9CFE: 38           	sec
  8476 03:9CFF: E9 04 00     	sbc	#L335
  8477 03:9D02: 1B           	tcs
  8478 03:9D03: 0B           	phd
  8479 03:9D04: 5B           	tcd
  8480             00000004   dev_0	set	4
  8481             00000006   cmd_0	set	6
  8482             00000008   fr_0	set	8
  8483             0000000A   sc_0	set	10
  8484             0000000C   lba_0	set	12
  8485             00000010   bufAddr_0	set	16
  8486             00000014   numSect_0	set	20
  8487             00000018   multiCnt_0	set	24
  8488                        	.block	2167
  8489                        ;
  8490                        ;   reg_cmd_info.cmd = cmd;
  8491                        	.sym	dev,4,14,6,8
  8492                        	.sym	cmd,6,14,6,8
  8493                        	.sym	fr,8,16,6,16
  8494                        	.sym	sc,10,16,6,16
  8495                        	.sym	lba,12,18,6,32
  8496                        	.sym	bufAddr,16,142,6,32
  8497                        	.sym	numSect,20,7,6,32
  8498                        	.sym	multiCnt,24,5,6,16
  8499                        	.line	2169
  8500 03:9D05: E2 20        	sep	#$20
  8501                        	longa	off
  8502 03:9D07: A5 0A        	lda	<L335+cmd_0
  8503 03:9D09: 8D xx xx     	sta	|~~reg_cmd_info
  8504 03:9D0C: C2 20        	rep	#$20
  8505                        	longa	on
  8506                        ;   reg_cmd_info.fr = fr;
  8507                        	.line	2170
  8508 03:9D0E: A5 0C        	lda	<L335+fr_0
  8509 03:9D10: 8D xx xx     	sta	|~~reg_cmd_info+1
  8510                        ;   reg_cmd_info.sc = sc;
  Thu Dec  3 2020 22:25                                                Page 162


  8511                        	.line	2171
  8512 03:9D13: A5 0E        	lda	<L335+sc_0
  8513 03:9D15: 8D xx xx     	sta	|~~reg_cmd_info+3
  8514                        ;   reg_cmd_info.dh = (unsigned char) ( CB_DH_LBA 
                    | ( dev ? CB_DH_DEV1 : CB_DH_DEV0 ) );
  8515                        	.line	2172
  8516 03:9D18: A5 08        	lda	<L335+dev_0
  8517 03:9D1A: 29 FF 00     	and	#$ff
  8518 03:9D1D: D0 03        	bne	L339
  8519 03:9D1F: 82 05 00     	brl	L338
  8520                        L339:
  8521 03:9D22: A9 10 00     	lda	#$10
  8522 03:9D25: 80 03        	bra	L340
  8523                        L338:
  8524 03:9D27: A9 00 00     	lda	#$0
  8525                        L340:
  8526 03:9D2A: 09 40 00     	ora	#<$40
  8527 03:9D2D: 85 01        	sta	<R0
  8528 03:9D2F: E2 20        	sep	#$20
  8529                        	longa	off
  8530 03:9D31: A5 01        	lda	<R0
  8531 03:9D33: 8D xx xx     	sta	|~~reg_cmd_info+11
  8532 03:9D36: C2 20        	rep	#$20
  8533                        	longa	on
  8534                        ;   reg_cmd_info.dc = (unsigned char) ( int_use_in
                    tr_flag ? 0 : CB_DC_NIEN );
  8535                        	.line	2173
  8536 03:9D38: AD xx xx     	lda	|~~int_use_intr_flag
  8537 03:9D3B: 29 FF 00     	and	#$ff
  8538 03:9D3E: D0 03        	bne	L342
  8539 03:9D40: 82 05 00     	brl	L341
  8540                        L342:
  8541 03:9D43: A9 00 00     	lda	#$0
  8542 03:9D46: 80 03        	bra	L343
  8543                        L341:
  8544 03:9D48: A9 02 00     	lda	#$2
  8545                        L343:
  8546 03:9D4B: 85 01        	sta	<R0
  8547 03:9D4D: E2 20        	sep	#$20
  8548                        	longa	off
  8549 03:9D4F: A5 01        	lda	<R0
  8550 03:9D51: 8D xx xx     	sta	|~~reg_cmd_info+12
  8551 03:9D54: C2 20        	rep	#$20
  8552                        	longa	on
  8553                        ;   reg_cmd_info.lbaSize = LBA28;
  8554                        	.line	2174
  8555 03:9D56: E2 20        	sep	#$20
  8556                        	longa	off
  8557 03:9D58: A9 1C        	lda	#$1c
  8558 03:9D5A: 8D xx xx     	sta	|~~reg_cmd_info+19
  8559 03:9D5D: C2 20        	rep	#$20
  8560                        	longa	on
  8561                        ;   reg_cmd_info.lbaHigh = 0;
  8562                        	.line	2175
  8563 03:9D5F: 9C xx xx     	stz	|~~reg_cmd_info+24
  8564 03:9D62: 9C xx xx     	stz	|~~reg_cmd_info+24+2
  8565                        ;   reg_cmd_info.lbaLow = lba;
  8566                        	.line	2176
  Thu Dec  3 2020 22:25                                                Page 163


  8567 03:9D65: A5 10        	lda	<L335+lba_0
  8568 03:9D67: 8D xx xx     	sta	|~~reg_cmd_info+20
  8569 03:9D6A: A5 12        	lda	<L335+lba_0+2
  8570 03:9D6C: 8D xx xx     	sta	|~~reg_cmd_info+20+2
  8571                        ;
  8572                        ;   // adjust multiple count
  8573                        ;   if ( multiCnt & 0x0800 )
  8574                        	.line	2179
  8575                        ;   {
  8576 03:9D6F: A5 1C        	lda	<L335+multiCnt_0
  8577 03:9D71: 29 00 08     	and	#<$800
  8578 03:9D74: D0 03        	bne	L344
  8579 03:9D76: 82 08 00     	brl	L10135
  8580                        L344:
  8581                        	.line	2180
  8582                        ;      // assume caller knows what they are doing
  8583                        ;      multiCnt &= 0x00ff;
  8584                        	.line	2182
  8585 03:9D79: A9 00 FF     	lda	#$ff00
  8586 03:9D7C: 14 1C        	trb	<L335+multiCnt_0
  8587                        ;   }
  8588                        	.line	2183
  8589                        ;   else
  8590 03:9D7E: 82 1F 00     	brl	L10136
  8591                        L10135:
  8592                        ;   {
  8593                        	.line	2185
  8594                        ;      // only Write Multiple and CFA Write Multip
                    le W/O Erase uses multiCnt
  8595                        ;      if (    ( cmd != CMD_WRITE_MULTIPLE )
  8596                        	.line	2187
  8597                        ;           && ( cmd != CMD_CFA_WRITE_MULTIPLE_WO_
                    ERASE )
  8598                        ;         )
  8599                        ;         multiCnt = 1;
  8600 03:9D81: E2 20        	sep	#$20
  8601                        	longa	off
  8602 03:9D83: A5 0A        	lda	<L335+cmd_0
  8603 03:9D85: C9 C5        	cmp	#<$c5
  8604 03:9D87: C2 20        	rep	#$20
  8605                        	longa	on
  8606 03:9D89: D0 03        	bne	L345
  8607 03:9D8B: 82 12 00     	brl	L10137
  8608                        L345:
  8609 03:9D8E: E2 20        	sep	#$20
  8610                        	longa	off
  8611 03:9D90: A5 0A        	lda	<L335+cmd_0
  8612 03:9D92: C9 CD        	cmp	#<$cd
  8613 03:9D94: C2 20        	rep	#$20
  8614                        	longa	on
  8615 03:9D96: D0 03        	bne	L346
  8616 03:9D98: 82 05 00     	brl	L10137
  8617                        L346:
  8618                        	.line	2190
  8619 03:9D9B: A9 01 00     	lda	#$1
  8620 03:9D9E: 85 1C        	sta	<L335+multiCnt_0
  8621                        ;   }
  8622                        L10137:
  Thu Dec  3 2020 22:25                                                Page 164


  8623                        	.line	2191
  8624                        L10136:
  8625                        ;
  8626                        ;   reg_cmd_info.ns  = numSect;
  8627                        	.line	2193
  8628 03:9DA0: A5 18        	lda	<L335+numSect_0
  8629 03:9DA2: 8D xx xx     	sta	|~~reg_cmd_info+13
  8630 03:9DA5: A5 1A        	lda	<L335+numSect_0+2
  8631 03:9DA7: 8D xx xx     	sta	|~~reg_cmd_info+13+2
  8632                        ;   reg_cmd_info.mc  = multiCnt;
  8633                        	.line	2194
  8634 03:9DAA: A5 1C        	lda	<L335+multiCnt_0
  8635 03:9DAC: 8D xx xx     	sta	|~~reg_cmd_info+17
  8636                        ;
  8637                        ;   return exec_pio_data_out_cmd( dev, bufAddr, nu
                    mSect, multiCnt );
  8638                        	.line	2196
  8639 03:9DAF: D4 1C        	pei	<L335+multiCnt_0
  8640 03:9DB1: D4 1A        	pei	<L335+numSect_0+2
  8641 03:9DB3: D4 18        	pei	<L335+numSect_0
  8642 03:9DB5: D4 16        	pei	<L335+bufAddr_0+2
  8643 03:9DB7: D4 14        	pei	<L335+bufAddr_0
  8644 03:9DB9: D4 08        	pei	<L335+dev_0
  8645 03:9DBB: 22 72 9A 03  	jsl	~~exec_pio_data_out_cmd
  8646                        L347:
  8647 03:9DBF: A8           	tay
  8648 03:9DC0: A5 06        	lda	<L335+2
  8649 03:9DC2: 85 1C        	sta	<L335+2+22
  8650 03:9DC4: A5 05        	lda	<L335+1
  8651 03:9DC6: 85 1B        	sta	<L335+1+22
  8652 03:9DC8: 2B           	pld
  8653 03:9DC9: 3B           	tsc
  8654 03:9DCA: 18           	clc
  8655 03:9DCB: 69 1A 00     	adc	#L335+22
  8656 03:9DCE: 1B           	tcs
  8657 03:9DCF: 98           	tya
  8658 03:9DD0: 6B           	rtl
  8659                        ;}
  8660                        	.line	2197
  8661                        	.endblock	2197
  8662             00000004   L335	equ	4
  8663             00000005   L336	equ	5
  8664 03:9DD1:              	ends
  8665                        	efunc
  8666                        	.endfunc	2197,5,4
  8667                        	.line	2197
  8668                        ;
  8669                        ;//***********************************************
                    **************
  8670                        ;//
  8671                        ;// reg_pio_data_out_lba48() - Easy way to execute
                     a PIO Data In command
  8672                        ;//                            using an LBA sector
                     address.
  8673                        ;//
  8674                        ;//***********************************************
                    **************
  8675                        ;
  Thu Dec  3 2020 22:25                                                Page 165


  8676                        ;int reg_pio_data_out_lba48( unsigned char dev, un
                    signed char cmd,
  8677                        ;                            unsigned int fr, unsi
                    gned int sc,
  8678                        ;                            unsigned long lbahi, 
                    unsigned long lbalo,
  8679                        ;                            unsigned char * bufAd
                    dr,
  8680                        ;                            long numSect, int mul
                    tiCnt )
  8681                        ;
  8682                        ;{
  8683                        	.line	2206
  8684                        	.line	2212
  8685                        	FXHDD
  8686                        	xdef	~~reg_pio_data_out_lba48
  8687                        	func
  8688                        	.function	2212
  8689                        ~~reg_pio_data_out_lba48:
  8690                        	longa	on
  8691                        	longi	on
  8692 03:9DD1: 3B           	tsc
  8693 03:9DD2: 38           	sec
  8694 03:9DD3: E9 04 00     	sbc	#L348
  8695 03:9DD6: 1B           	tcs
  8696 03:9DD7: 0B           	phd
  8697 03:9DD8: 5B           	tcd
  8698             00000004   dev_0	set	4
  8699             00000006   cmd_0	set	6
  8700             00000008   fr_0	set	8
  8701             0000000A   sc_0	set	10
  8702             0000000C   lbahi_0	set	12
  8703             00000010   lbalo_0	set	16
  8704             00000014   bufAddr_0	set	20
  8705             00000018   numSect_0	set	24
  8706             0000001C   multiCnt_0	set	28
  8707                        	.block	2212
  8708                        ;
  8709                        ;   reg_cmd_info.cmd = cmd;
  8710                        	.sym	dev,4,14,6,8
  8711                        	.sym	cmd,6,14,6,8
  8712                        	.sym	fr,8,16,6,16
  8713                        	.sym	sc,10,16,6,16
  8714                        	.sym	lbahi,12,18,6,32
  8715                        	.sym	lbalo,16,18,6,32
  8716                        	.sym	bufAddr,20,142,6,32
  8717                        	.sym	numSect,24,7,6,32
  8718                        	.sym	multiCnt,28,5,6,16
  8719                        	.line	2214
  8720 03:9DD9: E2 20        	sep	#$20
  8721                        	longa	off
  8722 03:9DDB: A5 0A        	lda	<L348+cmd_0
  8723 03:9DDD: 8D xx xx     	sta	|~~reg_cmd_info
  8724 03:9DE0: C2 20        	rep	#$20
  8725                        	longa	on
  8726                        ;   reg_cmd_info.fr = fr;
  8727                        	.line	2215
  8728 03:9DE2: A5 0C        	lda	<L348+fr_0
  Thu Dec  3 2020 22:25                                                Page 166


  8729 03:9DE4: 8D xx xx     	sta	|~~reg_cmd_info+1
  8730                        ;   reg_cmd_info.sc = sc;
  8731                        	.line	2216
  8732 03:9DE7: A5 0E        	lda	<L348+sc_0
  8733 03:9DE9: 8D xx xx     	sta	|~~reg_cmd_info+3
  8734                        ;   reg_cmd_info.dh = (unsigned char) ( CB_DH_LBA 
                    | ( dev ? CB_DH_DEV1 : CB_DH_DEV0 ) );
  8735                        	.line	2217
  8736 03:9DEC: A5 08        	lda	<L348+dev_0
  8737 03:9DEE: 29 FF 00     	and	#$ff
  8738 03:9DF1: D0 03        	bne	L352
  8739 03:9DF3: 82 05 00     	brl	L351
  8740                        L352:
  8741 03:9DF6: A9 10 00     	lda	#$10
  8742 03:9DF9: 80 03        	bra	L353
  8743                        L351:
  8744 03:9DFB: A9 00 00     	lda	#$0
  8745                        L353:
  8746 03:9DFE: 09 40 00     	ora	#<$40
  8747 03:9E01: 85 01        	sta	<R0
  8748 03:9E03: E2 20        	sep	#$20
  8749                        	longa	off
  8750 03:9E05: A5 01        	lda	<R0
  8751 03:9E07: 8D xx xx     	sta	|~~reg_cmd_info+11
  8752 03:9E0A: C2 20        	rep	#$20
  8753                        	longa	on
  8754                        ;   reg_cmd_info.dc = (unsigned char) ( int_use_in
                    tr_flag ? 0 : CB_DC_NIEN );
  8755                        	.line	2218
  8756 03:9E0C: AD xx xx     	lda	|~~int_use_intr_flag
  8757 03:9E0F: 29 FF 00     	and	#$ff
  8758 03:9E12: D0 03        	bne	L355
  8759 03:9E14: 82 05 00     	brl	L354
  8760                        L355:
  8761 03:9E17: A9 00 00     	lda	#$0
  8762 03:9E1A: 80 03        	bra	L356
  8763                        L354:
  8764 03:9E1C: A9 02 00     	lda	#$2
  8765                        L356:
  8766 03:9E1F: 85 01        	sta	<R0
  8767 03:9E21: E2 20        	sep	#$20
  8768                        	longa	off
  8769 03:9E23: A5 01        	lda	<R0
  8770 03:9E25: 8D xx xx     	sta	|~~reg_cmd_info+12
  8771 03:9E28: C2 20        	rep	#$20
  8772                        	longa	on
  8773                        ;   reg_cmd_info.lbaSize = LBA48;
  8774                        	.line	2219
  8775 03:9E2A: E2 20        	sep	#$20
  8776                        	longa	off
  8777 03:9E2C: A9 30        	lda	#$30
  8778 03:9E2E: 8D xx xx     	sta	|~~reg_cmd_info+19
  8779 03:9E31: C2 20        	rep	#$20
  8780                        	longa	on
  8781                        ;   reg_cmd_info.lbaHigh = lbahi;
  8782                        	.line	2220
  8783 03:9E33: A5 10        	lda	<L348+lbahi_0
  8784 03:9E35: 8D xx xx     	sta	|~~reg_cmd_info+24
  Thu Dec  3 2020 22:25                                                Page 167


  8785 03:9E38: A5 12        	lda	<L348+lbahi_0+2
  8786 03:9E3A: 8D xx xx     	sta	|~~reg_cmd_info+24+2
  8787                        ;   reg_cmd_info.lbaLow = lbalo;
  8788                        	.line	2221
  8789 03:9E3D: A5 14        	lda	<L348+lbalo_0
  8790 03:9E3F: 8D xx xx     	sta	|~~reg_cmd_info+20
  8791 03:9E42: A5 16        	lda	<L348+lbalo_0+2
  8792 03:9E44: 8D xx xx     	sta	|~~reg_cmd_info+20+2
  8793                        ;
  8794                        ;   // adjust multiple count
  8795                        ;   if ( multiCnt & 0x0800 )
  8796                        	.line	2224
  8797                        ;   {
  8798 03:9E47: A5 20        	lda	<L348+multiCnt_0
  8799 03:9E49: 29 00 08     	and	#<$800
  8800 03:9E4C: D0 03        	bne	L357
  8801 03:9E4E: 82 08 00     	brl	L10138
  8802                        L357:
  8803                        	.line	2225
  8804                        ;      // assume caller knows what they are doing
  8805                        ;      multiCnt &= 0x00ff;
  8806                        	.line	2227
  8807 03:9E51: A9 00 FF     	lda	#$ff00
  8808 03:9E54: 14 20        	trb	<L348+multiCnt_0
  8809                        ;   }
  8810                        	.line	2228
  8811                        ;   else
  8812 03:9E56: 82 12 00     	brl	L10139
  8813                        L10138:
  8814                        ;   {
  8815                        	.line	2230
  8816                        ;      // only Write Multiple Ext uses multiCnt
  8817                        ;      if ( cmd != CMD_WRITE_MULTIPLE_EXT )
  8818                        	.line	2232
  8819                        ;         multiCnt = 1;
  8820 03:9E59: E2 20        	sep	#$20
  8821                        	longa	off
  8822 03:9E5B: A5 0A        	lda	<L348+cmd_0
  8823 03:9E5D: C9 39        	cmp	#<$39
  8824 03:9E5F: C2 20        	rep	#$20
  8825                        	longa	on
  8826 03:9E61: D0 03        	bne	L358
  8827 03:9E63: 82 05 00     	brl	L10140
  8828                        L358:
  8829                        	.line	2233
  8830 03:9E66: A9 01 00     	lda	#$1
  8831 03:9E69: 85 20        	sta	<L348+multiCnt_0
  8832                        ;   }
  8833                        L10140:
  8834                        	.line	2234
  8835                        L10139:
  8836                        ;
  8837                        ;   reg_cmd_info.ns  = numSect;
  8838                        	.line	2236
  8839 03:9E6B: A5 1C        	lda	<L348+numSect_0
  8840 03:9E6D: 8D xx xx     	sta	|~~reg_cmd_info+13
  8841 03:9E70: A5 1E        	lda	<L348+numSect_0+2
  8842 03:9E72: 8D xx xx     	sta	|~~reg_cmd_info+13+2
  Thu Dec  3 2020 22:25                                                Page 168


  8843                        ;   reg_cmd_info.mc  = multiCnt;
  8844                        	.line	2237
  8845 03:9E75: A5 20        	lda	<L348+multiCnt_0
  8846 03:9E77: 8D xx xx     	sta	|~~reg_cmd_info+17
  8847                        ;
  8848                        ;   return exec_pio_data_out_cmd( dev, bufAddr, nu
                    mSect, multiCnt );
  8849                        	.line	2239
  8850 03:9E7A: D4 20        	pei	<L348+multiCnt_0
  8851 03:9E7C: D4 1E        	pei	<L348+numSect_0+2
  8852 03:9E7E: D4 1C        	pei	<L348+numSect_0
  8853 03:9E80: D4 1A        	pei	<L348+bufAddr_0+2
  8854 03:9E82: D4 18        	pei	<L348+bufAddr_0
  8855 03:9E84: D4 08        	pei	<L348+dev_0
  8856 03:9E86: 22 72 9A 03  	jsl	~~exec_pio_data_out_cmd
  8857                        L359:
  8858 03:9E8A: A8           	tay
  8859 03:9E8B: A5 06        	lda	<L348+2
  8860 03:9E8D: 85 20        	sta	<L348+2+26
  8861 03:9E8F: A5 05        	lda	<L348+1
  8862 03:9E91: 85 1F        	sta	<L348+1+26
  8863 03:9E93: 2B           	pld
  8864 03:9E94: 3B           	tsc
  8865 03:9E95: 18           	clc
  8866 03:9E96: 69 1E 00     	adc	#L348+26
  8867 03:9E99: 1B           	tcs
  8868 03:9E9A: 98           	tya
  8869 03:9E9B: 6B           	rtl
  8870                        ;}
  8871                        	.line	2240
  8872                        	.endblock	2240
  8873             00000004   L348	equ	4
  8874             00000005   L349	equ	5
  8875 03:9E9C:              	ends
  8876                        	efunc
  8877                        	.endfunc	2240,5,4
  8878                        	.line	2240
  8879                        ;
  8880                        ;#ifdef INCLUDE_ATAPI_PIO
  8881                        ;
  8882                        ;//***********************************************
                    **************
  8883                        ;//
  8884                        ;// reg_packet() - Execute an ATAPI Packet (A0H) c
                    ommand.
  8885                        ;//
  8886                        ;// See ATA-4 Section 9.10, Figure 14.
  8887                        ;//
  8888                        ;//***********************************************
                    **************
  8889                        ;
  8890                        ;int reg_packet( unsigned char dev,
  8891                        ;                unsigned int cpbc,
  8892                        ;                unsigned char * cdbBufAddr,
  8893                        ;                int dir,
  8894                        ;                long dpbc,
  8895                        ;                unsigned char * dataBufAddr )
  8896                        ;
  Thu Dec  3 2020 22:25                                                Page 169


  8897                        ;{
  8898                        	.line	2252
  8899                        	.line	2259
  8900                        	FXHDD
  8901                        	xdef	~~reg_packet
  8902                        	func
  8903                        	.function	2259
  8904                        ~~reg_packet:
  8905                        	longa	on
  8906                        	longi	on
  8907 03:9E9C: 3B           	tsc
  8908 03:9E9D: 38           	sec
  8909 03:9E9E: E9 13 00     	sbc	#L360
  8910 03:9EA1: 1B           	tcs
  8911 03:9EA2: 0B           	phd
  8912 03:9EA3: 5B           	tcd
  8913             00000004   dev_0	set	4
  8914             00000006   cpbc_0	set	6
  8915             00000008   cdbBufAddr_0	set	8
  8916             0000000C   dir_0	set	12
  8917             0000000E   dpbc_0	set	14
  8918             00000012   dataBufAddr_0	set	18
  8919                        	.block	2259
  8920                        ;   unsigned char status;
  8921                        ;   unsigned int byteCnt;
  8922                        ;   long wordCnt;
  8923                        ;
  8924                        ;   // reset Bus Master Error bit
  8925                        ;
  8926                        ;   pio_writeBusMstrStatus( BM_SR_MASK_ERR );
  8927             00000000   status_1	set	0
  8928             00000001   byteCnt_1	set	1
  8929             00000003   wordCnt_1	set	3
  8930                        	.sym	status,0,14,1,8
  8931                        	.sym	byteCnt,1,16,1,16
  8932                        	.sym	wordCnt,3,7,1,32
  8933                        	.sym	dev,4,14,6,8
  8934                        	.sym	cpbc,6,16,6,16
  8935                        	.sym	cdbBufAddr,8,142,6,32
  8936                        	.sym	dir,12,5,6,16
  8937                        	.sym	dpbc,14,7,6,32
  8938                        	.sym	dataBufAddr,18,142,6,32
  8939                        	.line	2266
  8940 03:9EA4: F4 02 00     	pea	#<$2
  8941 03:9EA7: 22 6D A7 03  	jsl	~~pio_writeBusMstrStatus
  8942                        ;
  8943                        ;   // Make sure the command packet size is either
                     12 or 16
  8944                        ;   // and save the command packet size and data.
  8945                        ;
  8946                        ;   cpbc = cpbc < 12 ? 12 : cpbc;
  8947                        	.line	2271
  8948 03:9EAB: A5 19        	lda	<L360+cpbc_0
  8949 03:9EAD: C9 0C 00     	cmp	#<$c
  8950 03:9EB0: 90 03        	bcc	L364
  8951 03:9EB2: 82 05 00     	brl	L363
  8952                        L364:
  8953 03:9EB5: A9 0C 00     	lda	#$c
  Thu Dec  3 2020 22:25                                                Page 170


  8954 03:9EB8: 80 02        	bra	L365
  8955                        L363:
  8956 03:9EBA: A5 19        	lda	<L360+cpbc_0
  8957                        L365:
  8958 03:9EBC: 85 19        	sta	<L360+cpbc_0
  8959                        ;   cpbc = cpbc > 12 ? 16 : cpbc;
  8960                        	.line	2272
  8961 03:9EBE: A9 0C 00     	lda	#$c
  8962 03:9EC1: C5 19        	cmp	<L360+cpbc_0
  8963 03:9EC3: 90 03        	bcc	L367
  8964 03:9EC5: 82 05 00     	brl	L366
  8965                        L367:
  8966 03:9EC8: A9 10 00     	lda	#$10
  8967 03:9ECB: 80 02        	bra	L368
  8968                        L366:
  8969 03:9ECD: A5 19        	lda	<L360+cpbc_0
  8970                        L368:
  8971 03:9ECF: 85 19        	sta	<L360+cpbc_0
  8972                        ;
  8973                        ;   // Setup current command information.
  8974                        ;
  8975                        ;   reg_cmd_info.cmd = CMD_PACKET;
  8976                        	.line	2276
  8977 03:9ED1: E2 20        	sep	#$20
  8978                        	longa	off
  8979 03:9ED3: A9 A0        	lda	#$a0
  8980 03:9ED5: 8D xx xx     	sta	|~~reg_cmd_info
  8981 03:9ED8: C2 20        	rep	#$20
  8982                        	longa	on
  8983                        ;   reg_cmd_info.fr = 0;
  8984                        	.line	2277
  8985 03:9EDA: 9C xx xx     	stz	|~~reg_cmd_info+1
  8986                        ;   reg_cmd_info.sc = 0;
  8987                        	.line	2278
  8988 03:9EDD: 9C xx xx     	stz	|~~reg_cmd_info+3
  8989                        ;   reg_cmd_info.sn = 0;
  8990                        	.line	2279
  8991 03:9EE0: 9C xx xx     	stz	|~~reg_cmd_info+5
  8992                        ;   reg_cmd_info.cl = (unsigned char) ( dpbc & 0x0
                    0ff );
  8993                        	.line	2280
  8994 03:9EE3: A5 21        	lda	<L360+dpbc_0
  8995 03:9EE5: 29 FF 00     	and	#<$ff
  8996 03:9EE8: 85 01        	sta	<R0
  8997 03:9EEA: 64 03        	stz	<R0+2
  8998 03:9EEC: A5 01        	lda	<R0
  8999 03:9EEE: 29 FF 00     	and	#$ff
  9000 03:9EF1: 8D xx xx     	sta	|~~reg_cmd_info+7
  9001                        ;   reg_cmd_info.ch = ( unsigned char) ( ( dpbc & 
                    0xff00 ) >> 8 );
  9002                        	.line	2281
  9003 03:9EF4: A5 21        	lda	<L360+dpbc_0
  9004 03:9EF6: 29 00 FF     	and	#<$ff00
  9005 03:9EF9: 85 05        	sta	<R1
  9006 03:9EFB: 64 07        	stz	<R1+2
  9007 03:9EFD: D4 07        	pei	<R1+2
  9008 03:9EFF: D4 05        	pei	<R1
  9009 03:9F01: A9 08 00     	lda	#$8
  Thu Dec  3 2020 22:25                                                Page 171


  9010                        	xref	~~~lasr
  9011 03:9F04: 22 xx xx xx  	jsl	~~~lasr
  9012 03:9F08: 85 01        	sta	<R0
  9013 03:9F0A: 86 03        	stx	<R0+2
  9014 03:9F0C: A5 01        	lda	<R0
  9015 03:9F0E: 29 FF 00     	and	#$ff
  9016 03:9F11: 8D xx xx     	sta	|~~reg_cmd_info+9
  9017                        ;   reg_cmd_info.dh = (unsigned char) ( dev ? CB_D
                    H_DEV1 : CB_DH_DEV0 );
  9018                        	.line	2282
  9019 03:9F14: A5 17        	lda	<L360+dev_0
  9020 03:9F16: 29 FF 00     	and	#$ff
  9021 03:9F19: D0 03        	bne	L370
  9022 03:9F1B: 82 05 00     	brl	L369
  9023                        L370:
  9024 03:9F1E: A9 10 00     	lda	#$10
  9025 03:9F21: 80 03        	bra	L371
  9026                        L369:
  9027 03:9F23: A9 00 00     	lda	#$0
  9028                        L371:
  9029 03:9F26: 85 01        	sta	<R0
  9030 03:9F28: E2 20        	sep	#$20
  9031                        	longa	off
  9032 03:9F2A: A5 01        	lda	<R0
  9033 03:9F2C: 8D xx xx     	sta	|~~reg_cmd_info+11
  9034 03:9F2F: C2 20        	rep	#$20
  9035                        	longa	on
  9036                        ;   reg_cmd_info.dc = (unsigned char) ( int_use_in
                    tr_flag ? 0 : CB_DC_NIEN );
  9037                        	.line	2283
  9038 03:9F31: AD xx xx     	lda	|~~int_use_intr_flag
  9039 03:9F34: 29 FF 00     	and	#$ff
  9040 03:9F37: D0 03        	bne	L373
  9041 03:9F39: 82 05 00     	brl	L372
  9042                        L373:
  9043 03:9F3C: A9 00 00     	lda	#$0
  9044 03:9F3F: 80 03        	bra	L374
  9045                        L372:
  9046 03:9F41: A9 02 00     	lda	#$2
  9047                        L374:
  9048 03:9F44: 85 01        	sta	<R0
  9049 03:9F46: E2 20        	sep	#$20
  9050                        	longa	off
  9051 03:9F48: A5 01        	lda	<R0
  9052 03:9F4A: 8D xx xx     	sta	|~~reg_cmd_info+12
  9053 03:9F4D: C2 20        	rep	#$20
  9054                        	longa	on
  9055                        ;
  9056                        ;   // Set command time out.
  9057                        ;
  9058                        ;   tmr_set_timeout();
  9059                        	.line	2287
  9060 03:9F4F: 22 F7 AC 03  	jsl	~~tmr_set_timeout
  9061                        ;
  9062                        ;   // Select the drive - call the sub_select func
                    tion.
  9063                        ;   // Quit now if this fails.
  9064                        ;
  Thu Dec  3 2020 22:25                                                Page 172


  9065                        ;   if ( sub_select( dev ) )
  9066                        	.line	2292
  9067                        ;   {
  9068 03:9F53: D4 17        	pei	<L360+dev_0
  9069 03:9F55: 22 A6 A4 03  	jsl	~~sub_select
  9070 03:9F59: AA           	tax
  9071 03:9F5A: D0 03        	bne	L375
  9072 03:9F5C: 82 15 00     	brl	L10141
  9073                        L375:
  9074                        	.line	2293
  9075                        ;      return 1;
  9076                        	.line	2294
  9077 03:9F5F: A9 01 00     	lda	#$1
  9078                        L376:
  9079 03:9F62: A8           	tay
  9080 03:9F63: A5 15        	lda	<L360+2
  9081 03:9F65: 85 27        	sta	<L360+2+18
  9082 03:9F67: A5 14        	lda	<L360+1
  9083 03:9F69: 85 26        	sta	<L360+1+18
  9084 03:9F6B: 2B           	pld
  9085 03:9F6C: 3B           	tsc
  9086 03:9F6D: 18           	clc
  9087 03:9F6E: 69 25 00     	adc	#L360+18
  9088 03:9F71: 1B           	tcs
  9089 03:9F72: 98           	tya
  9090 03:9F73: 6B           	rtl
  9091                        ;   }
  9092                        	.line	2295
  9093                        ;
  9094                        ;   // Set up all the registers except the command
                     register.
  9095                        ;
  9096                        ;   sub_setup_command();
  9097                        L10141:
  9098                        	.line	2299
  9099 03:9F74: 22 60 A2 03  	jsl	~~sub_setup_command
  9100                        ;
  9101                        ;   // Start the command by setting the Command re
                    gister.  The drive
  9102                        ;   // should immediately set BUSY status.
  9103                        ;
  9104                        ;   pio_outbyte( CB_CMD, CMD_PACKET );
  9105                        	.line	2304
  9106 03:9F78: F4 A0 00     	pea	#<$a0
  9107 03:9F7B: F4 07 00     	pea	#<$7
  9108 03:9F7E: 22 E7 A7 03  	jsl	~~pio_outbyte
  9109                        ;
  9110                        ;   // Waste some time by reading the alternate st
                    atus a few times.
  9111                        ;   // This gives the drive time to set BUSY in th
                    e status register on
  9112                        ;   // really fast systems.  If we don't do this, 
                    a slow drive on a fast
  9113                        ;   // system may not set BUSY fast enough and we 
                    would think it had
  9114                        ;   // completed the command when it really had no
                    t even started the
  9115                        ;   // command yet.
  Thu Dec  3 2020 22:25                                                Page 173


  9116                        ;
  9117                        ;   DELAY400NS;
  9118                        	.line	2313
  9119                        	.line	2313
  9120 03:9F82: F4 08 00     	pea	#<$8
  9121 03:9F85: 22 A8 A7 03  	jsl	~~pio_inbyte
  9122                        	.line	2313
  9123 03:9F89: F4 08 00     	pea	#<$8
  9124 03:9F8C: 22 A8 A7 03  	jsl	~~pio_inbyte
  9125                        	.line	2313
  9126 03:9F90: F4 08 00     	pea	#<$8
  9127 03:9F93: 22 A8 A7 03  	jsl	~~pio_inbyte
  9128                        	.line	2313
  9129 03:9F97: F4 08 00     	pea	#<$8
  9130 03:9F9A: 22 A8 A7 03  	jsl	~~pio_inbyte
  9131                        	.line	2313
  9132 03:9F9E: F4 08 00     	pea	#<$8
  9133 03:9FA1: 22 A8 A7 03  	jsl	~~pio_inbyte
  9134                        	.line	2313
  9135                        	.line	2313
  9136                        ;
  9137                        ;   // Command packet transfer...
  9138                        ;   // Poll Alternate Status for BSY=0.
  9139                        ;
  9140                        ;   while ( 1 )
  9141                        	.line	2318
  9142                        L10142:
  9143                        ;   {
  9144                        	.line	2319
  9145                        ;      status = pio_inbyte( CB_ASTAT );       // p
                    oll for not busy
  9146                        	.line	2320
  9147 03:9FA5: F4 08 00     	pea	#<$8
  9148 03:9FA8: 22 A8 A7 03  	jsl	~~pio_inbyte
  9149 03:9FAC: E2 20        	sep	#$20
  9150                        	longa	off
  9151 03:9FAE: 85 0D        	sta	<L361+status_1
  9152 03:9FB0: C2 20        	rep	#$20
  9153                        	longa	on
  9154                        ;      if ( ( status & CB_STAT_BSY ) == 0 )
  9155                        	.line	2321
  9156                        ;         break;
  9157 03:9FB2: E2 20        	sep	#$20
  9158                        	longa	off
  9159 03:9FB4: A5 0D        	lda	<L361+status_1
  9160 03:9FB6: 29 80        	and	#<$80
  9161 03:9FB8: C2 20        	rep	#$20
  9162                        	longa	on
  9163 03:9FBA: D0 03        	bne	L377
  9164 03:9FBC: 82 27 00     	brl	L10143
  9165                        L377:
  9166                        ;      if ( tmr_chk_timeout() )               // t
                    ime out yet ?
  9167                        	.line	2323
  9168                        ;      {
  9169 03:9FBF: 22 1F AD 03  	jsl	~~tmr_chk_timeout
  9170 03:9FC3: AA           	tax
  9171 03:9FC4: D0 03        	bne	L378
  Thu Dec  3 2020 22:25                                                Page 174


  9172 03:9FC6: 82 1A 00     	brl	L10144
  9173                        L378:
  9174                        	.line	2324
  9175                        ;         reg_cmd_info.to = 1;
  9176                        	.line	2325
  9177 03:9FC9: E2 20        	sep	#$20
  9178                        	longa	off
  9179 03:9FCB: A9 01        	lda	#$1
  9180 03:9FCD: 8D xx xx     	sta	|~~reg_cmd_info+32
  9181 03:9FD0: C2 20        	rep	#$20
  9182                        	longa	on
  9183                        ;         reg_cmd_info.ec = 51;
  9184                        	.line	2326
  9185 03:9FD2: E2 20        	sep	#$20
  9186                        	longa	off
  9187 03:9FD4: A9 33        	lda	#$33
  9188 03:9FD6: 8D xx xx     	sta	|~~reg_cmd_info+31
  9189 03:9FD9: C2 20        	rep	#$20
  9190                        	longa	on
  9191                        ;         dir = -1;   // command done
  9192                        	.line	2327
  9193 03:9FDB: A9 FF FF     	lda	#$ffff
  9194 03:9FDE: 85 1F        	sta	<L360+dir_0
  9195                        ;         break;
  9196                        	.line	2328
  9197 03:9FE0: 82 03 00     	brl	L10143
  9198                        ;      }
  9199                        	.line	2329
  9200                        ;   }
  9201                        L10144:
  9202                        	.line	2330
  9203 03:9FE3: 82 BF FF     	brl	L10142
  9204                        L10143:
  9205                        ;
  9206                        ;   // Command packet transfer...
  9207                        ;   // Check for protocol failures... no interrupt
                     here please!
  9208                        ;
  9209                        ;   // Command packet transfer...
  9210                        ;   // If no error, transfer the command packet.
  9211                        ;
  9212                        ;   if ( reg_cmd_info.ec == 0 )
  9213                        	.line	2338
  9214                        ;   {
  9215 03:9FE6: AD xx xx     	lda	|~~reg_cmd_info+31
  9216 03:9FE9: 29 FF 00     	and	#$ff
  9217 03:9FEC: F0 03        	beq	L379
  9218 03:9FEE: 82 6C 00     	brl	L10145
  9219                        L379:
  9220                        	.line	2339
  9221                        ;
  9222                        ;      // Command packet transfer...
  9223                        ;      // Read the primary status register and the
                     other ATAPI registers.
  9224                        ;
  9225                        ;      status = pio_inbyte( CB_STAT );
  9226                        	.line	2344
  9227 03:9FF1: F4 07 00     	pea	#<$7
  Thu Dec  3 2020 22:25                                                Page 175


  9228 03:9FF4: 22 A8 A7 03  	jsl	~~pio_inbyte
  9229 03:9FF8: E2 20        	sep	#$20
  9230                        	longa	off
  9231 03:9FFA: 85 0D        	sta	<L361+status_1
  9232 03:9FFC: C2 20        	rep	#$20
  9233                        	longa	on
  9234                        ;
  9235                        ;      // Command packet transfer...
  9236                        ;      // check status: must have BSY=0, DRQ=1 now
  9237                        ;
  9238                        ;      if (    ( status & ( CB_STAT_BSY | CB_STAT_
                    DRQ | CB_STAT_ERR ) )
  9239                        	.line	2349
  9240                        ;           != CB_STAT_DRQ
  9241                        ;         )
  9242                        ;      {
  9243 03:9FFE: A5 0D        	lda	<L361+status_1
  9244 03:A000: 29 89 00     	and	#<$89
  9245 03:A003: 85 01        	sta	<R0
  9246 03:A005: A5 01        	lda	<R0
  9247 03:A007: C9 08 00     	cmp	#<$8
  9248 03:A00A: D0 03        	bne	L380
  9249 03:A00C: 82 11 00     	brl	L10146
  9250                        L380:
  9251                        	.line	2352
  9252                        ;         reg_cmd_info.ec = 52;
  9253                        	.line	2353
  9254 03:A00F: E2 20        	sep	#$20
  9255                        	longa	off
  9256 03:A011: A9 34        	lda	#$34
  9257 03:A013: 8D xx xx     	sta	|~~reg_cmd_info+31
  9258 03:A016: C2 20        	rep	#$20
  9259                        	longa	on
  9260                        ;         dir = -1;   // command done
  9261                        	.line	2354
  9262 03:A018: A9 FF FF     	lda	#$ffff
  9263 03:A01B: 85 1F        	sta	<L360+dir_0
  9264                        ;      }
  9265                        	.line	2355
  9266                        ;      else
  9267 03:A01D: 82 3D 00     	brl	L10147
  9268                        L10146:
  9269                        ;      {
  9270                        	.line	2357
  9271                        ;         // Command packet transfer...
  9272                        ;         // xfer the command packet (the cdb)
  9273                        ;
  9274                        ;         pio_drq_block_out( CB_DATA, cdbBufAddr, 
                    cpbc >> 1 );
  9275                        	.line	2361
  9276 03:A020: A5 19        	lda	<L360+cpbc_0
  9277 03:A022: 4A           	lsr	A
  9278 03:A023: 85 01        	sta	<R0
  9279 03:A025: A5 01        	lda	<R0
  9280 03:A027: 85 01        	sta	<R0
  9281 03:A029: 64 03        	stz	<R0+2
  9282 03:A02B: D4 03        	pei	<R0+2
  9283 03:A02D: D4 01        	pei	<R0
  Thu Dec  3 2020 22:25                                                Page 176


  9284 03:A02F: D4 1D        	pei	<L360+cdbBufAddr_0+2
  9285 03:A031: D4 1B        	pei	<L360+cdbBufAddr_0
  9286 03:A033: F4 00 00     	pea	#<$0
  9287 03:A036: 22 12 AA 03  	jsl	~~pio_drq_block_out
  9288                        ;
  9289                        ;         DELAY400NS;    // delay so device can ge
                    t the status updated
  9290                        	.line	2363
  9291                        	.line	2363
  9292 03:A03A: F4 08 00     	pea	#<$8
  9293 03:A03D: 22 A8 A7 03  	jsl	~~pio_inbyte
  9294                        	.line	2363
  9295 03:A041: F4 08 00     	pea	#<$8
  9296 03:A044: 22 A8 A7 03  	jsl	~~pio_inbyte
  9297                        	.line	2363
  9298 03:A048: F4 08 00     	pea	#<$8
  9299 03:A04B: 22 A8 A7 03  	jsl	~~pio_inbyte
  9300                        	.line	2363
  9301 03:A04F: F4 08 00     	pea	#<$8
  9302 03:A052: 22 A8 A7 03  	jsl	~~pio_inbyte
  9303                        	.line	2363
  9304 03:A056: F4 08 00     	pea	#<$8
  9305 03:A059: 22 A8 A7 03  	jsl	~~pio_inbyte
  9306                        	.line	2363
  9307                        	.line	2363
  9308                        ;      }
  9309                        	.line	2364
  9310                        L10147:
  9311                        ;   }
  9312                        	.line	2365
  9313                        ;
  9314                        ;   // Data transfer loop...
  9315                        ;   // If there is no error, enter the data transf
                    er loop.
  9316                        ;
  9317                        ;   while ( reg_cmd_info.ec == 0 )
  9318                        L10145:
  9319                        	.line	2370
  9320                        L10148:
  9321 03:A05D: AD xx xx     	lda	|~~reg_cmd_info+31
  9322 03:A060: 29 FF 00     	and	#$ff
  9323 03:A063: F0 03        	beq	L381
  9324 03:A065: 82 68 01     	brl	L10149
  9325                        L381:
  9326                        ;   {
  9327                        	.line	2371
  9328                        ;      // Data transfer loop...
  9329                        ;      // Wait for interrupt -or- wait for not BUS
                    Y -or- wait for time out.
  9330                        ;
  9331                        ;      sub_wait_poll( 53, 54 );
  9332                        	.line	2375
  9333 03:A068: F4 36 00     	pea	#<$36
  9334 03:A06B: F4 35 00     	pea	#<$35
  9335 03:A06E: 22 36 A6 03  	jsl	~~sub_wait_poll
  9336                        ;
  9337                        ;      // Data transfer loop...
  9338                        ;      // If there was a time out error, exit the 
  Thu Dec  3 2020 22:25                                                Page 177


                    data transfer loop.
  9339                        ;
  9340                        ;      if ( reg_cmd_info.ec )
  9341                        	.line	2380
  9342                        ;      {
  9343 03:A072: AD xx xx     	lda	|~~reg_cmd_info+31
  9344 03:A075: 29 FF 00     	and	#$ff
  9345 03:A078: D0 03        	bne	L382
  9346 03:A07A: 82 08 00     	brl	L10150
  9347                        L382:
  9348                        	.line	2381
  9349                        ;         dir = -1;   // command done
  9350                        	.line	2382
  9351 03:A07D: A9 FF FF     	lda	#$ffff
  9352 03:A080: 85 1F        	sta	<L360+dir_0
  9353                        ;         break;
  9354                        	.line	2383
  9355 03:A082: 82 4B 01     	brl	L10149
  9356                        ;      }
  9357                        	.line	2384
  9358                        ;
  9359                        ;      // Data transfer loop...
  9360                        ;      // If using interrupts get the status read 
                    by the interrupt
  9361                        ;      // handler, otherwise read the status regis
                    ter.
  9362                        ;
  9363                        ;      if ( int_use_intr_flag )
  9364                        L10150:
  9365                        	.line	2390
  9366                        ;         status = int_ata_status;
  9367 03:A085: AD xx xx     	lda	|~~int_use_intr_flag
  9368 03:A088: 29 FF 00     	and	#$ff
  9369 03:A08B: D0 03        	bne	L383
  9370 03:A08D: 82 0C 00     	brl	L10151
  9371                        L383:
  9372                        	.line	2391
  9373 03:A090: E2 20        	sep	#$20
  9374                        	longa	off
  9375 03:A092: AD xx xx     	lda	|~~int_ata_status
  9376 03:A095: 85 0D        	sta	<L361+status_1
  9377 03:A097: C2 20        	rep	#$20
  9378                        	longa	on
  9379                        ;      else
  9380 03:A099: 82 0D 00     	brl	L10152
  9381                        L10151:
  9382                        ;         status = pio_inbyte( CB_STAT );
  9383                        	.line	2393
  9384 03:A09C: F4 07 00     	pea	#<$7
  9385 03:A09F: 22 A8 A7 03  	jsl	~~pio_inbyte
  9386 03:A0A3: E2 20        	sep	#$20
  9387                        	longa	off
  9388 03:A0A5: 85 0D        	sta	<L361+status_1
  9389 03:A0A7: C2 20        	rep	#$20
  9390                        	longa	on
  9391                        L10152:
  9392                        ;
  9393                        ;      // Data transfer loop...
  Thu Dec  3 2020 22:25                                                Page 178


  9394                        ;      // Exit the read data loop if the device in
                    dicates this
  9395                        ;      // is the end of the command.
  9396                        ;
  9397                        ;      if ( ( status & ( CB_STAT_BSY | CB_STAT_DRQ
                     ) ) == 0 )
  9398                        	.line	2399
  9399                        ;      {
  9400 03:A0A9: E2 20        	sep	#$20
  9401                        	longa	off
  9402 03:A0AB: A5 0D        	lda	<L361+status_1
  9403 03:A0AD: 29 88        	and	#<$88
  9404 03:A0AF: C2 20        	rep	#$20
  9405                        	longa	on
  9406 03:A0B1: F0 03        	beq	L384
  9407 03:A0B3: 82 08 00     	brl	L10153
  9408                        L384:
  9409                        	.line	2400
  9410                        ;         dir = -1;   // command done
  9411                        	.line	2401
  9412 03:A0B6: A9 FF FF     	lda	#$ffff
  9413 03:A0B9: 85 1F        	sta	<L360+dir_0
  9414                        ;         break;
  9415                        	.line	2402
  9416 03:A0BB: 82 12 01     	brl	L10149
  9417                        ;      }
  9418                        	.line	2403
  9419                        ;
  9420                        ;      // Data transfer loop...
  9421                        ;      // The device must want to transfer data...
  9422                        ;      // check status: must have BSY=0, DRQ=1 now
                    .
  9423                        ;
  9424                        ;      if ( ( status & ( CB_STAT_BSY | CB_STAT_DRQ
                     ) ) != CB_STAT_DRQ )
  9425                        L10153:
  9426                        	.line	2409
  9427                        ;      {
  9428 03:A0BE: A5 0D        	lda	<L361+status_1
  9429 03:A0C0: 29 88 00     	and	#<$88
  9430 03:A0C3: 85 01        	sta	<R0
  9431 03:A0C5: A5 01        	lda	<R0
  9432 03:A0C7: C9 08 00     	cmp	#<$8
  9433 03:A0CA: D0 03        	bne	L385
  9434 03:A0CC: 82 11 00     	brl	L10154
  9435                        L385:
  9436                        	.line	2410
  9437                        ;         reg_cmd_info.ec = 55;
  9438                        	.line	2411
  9439 03:A0CF: E2 20        	sep	#$20
  9440                        	longa	off
  9441 03:A0D1: A9 37        	lda	#$37
  9442 03:A0D3: 8D xx xx     	sta	|~~reg_cmd_info+31
  9443 03:A0D6: C2 20        	rep	#$20
  9444                        	longa	on
  9445                        ;         dir = -1;   // command done
  9446                        	.line	2412
  9447 03:A0D8: A9 FF FF     	lda	#$ffff
  Thu Dec  3 2020 22:25                                                Page 179


  9448 03:A0DB: 85 1F        	sta	<L360+dir_0
  9449                        ;         break;
  9450                        	.line	2413
  9451 03:A0DD: 82 F0 00     	brl	L10149
  9452                        ;      }
  9453                        	.line	2414
  9454                        ;
  9455                        ;      // Data transfer loop...
  9456                        ;      // get the byte count, check for zero...
  9457                        ;
  9458                        ;      byteCnt = ( pio_inbyte( CB_CH ) << 8 ) | pi
                    o_inbyte( CB_CL );
  9459                        L10154:
  9460                        	.line	2419
  9461 03:A0E0: F4 05 00     	pea	#<$5
  9462 03:A0E3: 22 A8 A7 03  	jsl	~~pio_inbyte
  9463 03:A0E7: E2 20        	sep	#$20
  9464                        	longa	off
  9465 03:A0E9: 85 05        	sta	<R1
  9466 03:A0EB: C2 20        	rep	#$20
  9467                        	longa	on
  9468 03:A0ED: A5 05        	lda	<R1
  9469 03:A0EF: 29 FF 00     	and	#$ff
  9470 03:A0F2: 85 05        	sta	<R1
  9471 03:A0F4: A5 05        	lda	<R1
  9472 03:A0F6: EB           	xba
  9473 03:A0F7: 29 00 FF     	and	#$ff00
  9474 03:A0FA: 85 01        	sta	<R0
  9475 03:A0FC: F4 04 00     	pea	#<$4
  9476 03:A0FF: 22 A8 A7 03  	jsl	~~pio_inbyte
  9477 03:A103: E2 20        	sep	#$20
  9478                        	longa	off
  9479 03:A105: 85 05        	sta	<R1
  9480 03:A107: C2 20        	rep	#$20
  9481                        	longa	on
  9482 03:A109: A5 05        	lda	<R1
  9483 03:A10B: 29 FF 00     	and	#$ff
  9484 03:A10E: 85 05        	sta	<R1
  9485 03:A110: A5 05        	lda	<R1
  9486 03:A112: 05 01        	ora	<R0
  9487 03:A114: 85 0E        	sta	<L361+byteCnt_1
  9488                        ;      if ( byteCnt < 1 )
  9489                        	.line	2420
  9490                        ;      {
  9491 03:A116: A5 0E        	lda	<L361+byteCnt_1
  9492 03:A118: C9 01 00     	cmp	#<$1
  9493 03:A11B: 90 03        	bcc	L386
  9494 03:A11D: 82 11 00     	brl	L10155
  9495                        L386:
  9496                        	.line	2421
  9497                        ;         reg_cmd_info.ec = 59;
  9498                        	.line	2422
  9499 03:A120: E2 20        	sep	#$20
  9500                        	longa	off
  9501 03:A122: A9 3B        	lda	#$3b
  9502 03:A124: 8D xx xx     	sta	|~~reg_cmd_info+31
  9503 03:A127: C2 20        	rep	#$20
  9504                        	longa	on
  Thu Dec  3 2020 22:25                                                Page 180


  9505                        ;         dir = -1;   // command done
  9506                        	.line	2423
  9507 03:A129: A9 FF FF     	lda	#$ffff
  9508 03:A12C: 85 1F        	sta	<L360+dir_0
  9509                        ;         break;
  9510                        	.line	2424
  9511 03:A12E: 82 9F 00     	brl	L10149
  9512                        ;      }
  9513                        	.line	2425
  9514                        ;
  9515                        ;      // Data transfer loop...
  9516                        ;      // increment number of DRQ packets
  9517                        ;
  9518                        ;      reg_cmd_info.drqPackets ++ ;
  9519                        L10155:
  9520                        	.line	2430
  9521 03:A131: EE xx xx     	inc	|~~reg_cmd_info+37
  9522 03:A134: D0 03        	bne	L387
  9523 03:A136: EE xx xx     	inc	|~~reg_cmd_info+37+2
  9524                        L387:
  9525                        ;
  9526                        ;      // Data transfer loop...
  9527                        ;      // transfer the data and update the i/o buf
                    fer address
  9528                        ;      // and the number of bytes transfered.
  9529                        ;
  9530                        ;      wordCnt = ( byteCnt >> 1 ) + ( byteCnt & 0x
                    0001 );
  9531                        	.line	2436
  9532 03:A139: A5 0E        	lda	<L361+byteCnt_1
  9533 03:A13B: 29 01 00     	and	#<$1
  9534 03:A13E: 85 01        	sta	<R0
  9535 03:A140: A5 0E        	lda	<L361+byteCnt_1
  9536 03:A142: 4A           	lsr	A
  9537 03:A143: 85 05        	sta	<R1
  9538 03:A145: 18           	clc
  9539 03:A146: A5 05        	lda	<R1
  9540 03:A148: 65 01        	adc	<R0
  9541 03:A14A: 85 09        	sta	<R2
  9542 03:A14C: A5 09        	lda	<R2
  9543 03:A14E: 85 10        	sta	<L361+wordCnt_1
  9544 03:A150: 64 12        	stz	<L361+wordCnt_1+2
  9545                        ;      reg_cmd_info.totalBytesXfer += ( wordCnt <<
                     1 );
  9546                        	.line	2437
  9547 03:A152: A5 10        	lda	<L361+wordCnt_1
  9548 03:A154: 85 01        	sta	<R0
  9549 03:A156: A5 12        	lda	<L361+wordCnt_1+2
  9550 03:A158: 85 03        	sta	<R0+2
  9551 03:A15A: 06 01        	asl	<R0
  9552 03:A15C: 26 03        	rol	<R0+2
  9553 03:A15E: 18           	clc
  9554 03:A15F: A5 01        	lda	<R0
  9555 03:A161: 6D xx xx     	adc	|~~reg_cmd_info+33
  9556 03:A164: 8D xx xx     	sta	|~~reg_cmd_info+33
  9557 03:A167: A5 03        	lda	<R0+2
  9558 03:A169: 6D xx xx     	adc	|~~reg_cmd_info+33+2
  9559 03:A16C: 8D xx xx     	sta	|~~reg_cmd_info+33+2
  Thu Dec  3 2020 22:25                                                Page 181


  9560                        ;      if ( dir )
  9561                        	.line	2438
  9562                        ;         pio_drq_block_out( CB_DATA, dataBufAddr,
                     wordCnt );
  9563 03:A16F: A5 1F        	lda	<L360+dir_0
  9564 03:A171: D0 03        	bne	L388
  9565 03:A173: 82 12 00     	brl	L10156
  9566                        L388:
  9567                        	.line	2439
  9568 03:A176: D4 12        	pei	<L361+wordCnt_1+2
  9569 03:A178: D4 10        	pei	<L361+wordCnt_1
  9570 03:A17A: D4 27        	pei	<L360+dataBufAddr_0+2
  9571 03:A17C: D4 25        	pei	<L360+dataBufAddr_0
  9572 03:A17E: F4 00 00     	pea	#<$0
  9573 03:A181: 22 12 AA 03  	jsl	~~pio_drq_block_out
  9574                        ;      else
  9575 03:A185: 82 0F 00     	brl	L10157
  9576                        L10156:
  9577                        ;         pio_drq_block_in( CB_DATA, dataBufAddr, 
                    wordCnt );
  9578                        	.line	2441
  9579 03:A188: D4 12        	pei	<L361+wordCnt_1+2
  9580 03:A18A: D4 10        	pei	<L361+wordCnt_1
  9581 03:A18C: D4 27        	pei	<L360+dataBufAddr_0+2
  9582 03:A18E: D4 25        	pei	<L360+dataBufAddr_0
  9583 03:A190: F4 00 00     	pea	#<$0
  9584 03:A193: 22 0F A9 03  	jsl	~~pio_drq_block_in
  9585                        L10157:
  9586                        ;      dataBufAddr = dataBufAddr + byteCnt;
  9587                        	.line	2442
  9588 03:A197: A5 0E        	lda	<L361+byteCnt_1
  9589 03:A199: 85 01        	sta	<R0
  9590 03:A19B: 64 03        	stz	<R0+2
  9591 03:A19D: 18           	clc
  9592 03:A19E: A5 25        	lda	<L360+dataBufAddr_0
  9593 03:A1A0: 65 01        	adc	<R0
  9594 03:A1A2: 85 25        	sta	<L360+dataBufAddr_0
  9595 03:A1A4: A5 27        	lda	<L360+dataBufAddr_0+2
  9596 03:A1A6: 65 03        	adc	<R0+2
  9597 03:A1A8: 85 27        	sta	<L360+dataBufAddr_0+2
  9598                        ;
  9599                        ;      DELAY400NS;    // delay so device can get t
                    he status updated
  9600                        	.line	2444
  9601                        	.line	2444
  9602 03:A1AA: F4 08 00     	pea	#<$8
  9603 03:A1AD: 22 A8 A7 03  	jsl	~~pio_inbyte
  9604                        	.line	2444
  9605 03:A1B1: F4 08 00     	pea	#<$8
  9606 03:A1B4: 22 A8 A7 03  	jsl	~~pio_inbyte
  9607                        	.line	2444
  9608 03:A1B8: F4 08 00     	pea	#<$8
  9609 03:A1BB: 22 A8 A7 03  	jsl	~~pio_inbyte
  9610                        	.line	2444
  9611 03:A1BF: F4 08 00     	pea	#<$8
  9612 03:A1C2: 22 A8 A7 03  	jsl	~~pio_inbyte
  9613                        	.line	2444
  9614 03:A1C6: F4 08 00     	pea	#<$8
  Thu Dec  3 2020 22:25                                                Page 182


  9615 03:A1C9: 22 A8 A7 03  	jsl	~~pio_inbyte
  9616                        	.line	2444
  9617                        	.line	2444
  9618                        ;   }
  9619                        	.line	2445
  9620 03:A1CD: 82 8D FE     	brl	L10148
  9621                        L10149:
  9622                        ;
  9623                        ;   // End of command...
  9624                        ;   // Wait for interrupt or poll for BSY=0,
  9625                        ;   // but don't do this if there was any error or
                     if this
  9626                        ;   // was a commmand that did not transfer data.
  9627                        ;
  9628                        ;   if ( ( reg_cmd_info.ec == 0 ) && ( dir >= 0 ) 
                    )
  9629                        	.line	2452
  9630                        ;   {
  9631 03:A1D0: AD xx xx     	lda	|~~reg_cmd_info+31
  9632 03:A1D3: 29 FF 00     	and	#$ff
  9633 03:A1D6: F0 03        	beq	L389
  9634 03:A1D8: 82 11 00     	brl	L10158
  9635                        L389:
  9636 03:A1DB: A5 1F        	lda	<L360+dir_0
  9637 03:A1DD: 10 03        	bpl	L390
  9638 03:A1DF: 82 0A 00     	brl	L10158
  9639                        L390:
  9640                        	.line	2453
  9641                        ;      sub_wait_poll( 56, 57 );
  9642                        	.line	2454
  9643 03:A1E2: F4 39 00     	pea	#<$39
  9644 03:A1E5: F4 38 00     	pea	#<$38
  9645 03:A1E8: 22 36 A6 03  	jsl	~~sub_wait_poll
  9646                        ;   }
  9647                        	.line	2455
  9648                        ;
  9649                        ;   // Final status check, only if no previous err
                    or.
  9650                        ;
  9651                        ;   if ( reg_cmd_info.ec == 0 )
  9652                        L10158:
  9653                        	.line	2459
  9654                        ;   {
  9655 03:A1EC: AD xx xx     	lda	|~~reg_cmd_info+31
  9656 03:A1EF: 29 FF 00     	and	#$ff
  9657 03:A1F2: F0 03        	beq	L391
  9658 03:A1F4: 82 3A 00     	brl	L10159
  9659                        L391:
  9660                        	.line	2460
  9661                        ;      // Final status check...
  9662                        ;      // If using interrupts get the status read 
                    by the interrupt
  9663                        ;      // handler, otherwise read the status regis
                    ter.
  9664                        ;
  9665                        ;      if ( int_use_intr_flag )
  9666                        	.line	2465
  9667                        ;         status = int_ata_status;
  Thu Dec  3 2020 22:25                                                Page 183


  9668 03:A1F7: AD xx xx     	lda	|~~int_use_intr_flag
  9669 03:A1FA: 29 FF 00     	and	#$ff
  9670 03:A1FD: D0 03        	bne	L392
  9671 03:A1FF: 82 0C 00     	brl	L10160
  9672                        L392:
  9673                        	.line	2466
  9674 03:A202: E2 20        	sep	#$20
  9675                        	longa	off
  9676 03:A204: AD xx xx     	lda	|~~int_ata_status
  9677 03:A207: 85 0D        	sta	<L361+status_1
  9678 03:A209: C2 20        	rep	#$20
  9679                        	longa	on
  9680                        ;      else
  9681 03:A20B: 82 0D 00     	brl	L10161
  9682                        L10160:
  9683                        ;         status = pio_inbyte( CB_STAT );
  9684                        	.line	2468
  9685 03:A20E: F4 07 00     	pea	#<$7
  9686 03:A211: 22 A8 A7 03  	jsl	~~pio_inbyte
  9687 03:A215: E2 20        	sep	#$20
  9688                        	longa	off
  9689 03:A217: 85 0D        	sta	<L361+status_1
  9690 03:A219: C2 20        	rep	#$20
  9691                        	longa	on
  9692                        L10161:
  9693                        ;
  9694                        ;      // Final status check...
  9695                        ;      // check for any error.
  9696                        ;
  9697                        ;      if ( status & ( CB_STAT_BSY | CB_STAT_DRQ |
                     CB_STAT_ERR ) )
  9698                        	.line	2473
  9699                        ;      {
  9700 03:A21B: E2 20        	sep	#$20
  9701                        	longa	off
  9702 03:A21D: A5 0D        	lda	<L361+status_1
  9703 03:A21F: 29 89        	and	#<$89
  9704 03:A221: C2 20        	rep	#$20
  9705                        	longa	on
  9706 03:A223: D0 03        	bne	L393
  9707 03:A225: 82 09 00     	brl	L10162
  9708                        L393:
  9709                        	.line	2474
  9710                        ;         reg_cmd_info.ec = 58;
  9711                        	.line	2475
  9712 03:A228: E2 20        	sep	#$20
  9713                        	longa	off
  9714 03:A22A: A9 3A        	lda	#$3a
  9715 03:A22C: 8D xx xx     	sta	|~~reg_cmd_info+31
  9716 03:A22F: C2 20        	rep	#$20
  9717                        	longa	on
  9718                        ;      }
  9719                        	.line	2476
  9720                        ;   }
  9721                        L10162:
  9722                        	.line	2477
  9723                        ;
  9724                        ;   // Done...
  Thu Dec  3 2020 22:25                                                Page 184


  9725                        ;
  9726                        ;   // Final status check
  9727                        ;   // BMIDE Error=1?
  9728                        ;
  9729                        ;   if ( pio_readBusMstrStatus() & BM_SR_MASK_ERR 
                    )
  9730                        L10159:
  9731                        	.line	2484
  9732                        ;   {
  9733 03:A231: 22 F8 A6 03  	jsl	~~pio_readBusMstrStatus
  9734 03:A235: E2 20        	sep	#$20
  9735                        	longa	off
  9736 03:A237: 29 02        	and	#<$2
  9737 03:A239: C2 20        	rep	#$20
  9738                        	longa	on
  9739 03:A23B: D0 03        	bne	L394
  9740 03:A23D: 82 09 00     	brl	L10163
  9741                        L394:
  9742                        	.line	2485
  9743                        ;      reg_cmd_info.ec = 78;                  // y
                    es
  9744                        	.line	2486
  9745 03:A240: E2 20        	sep	#$20
  9746                        	longa	off
  9747 03:A242: A9 4E        	lda	#$4e
  9748 03:A244: 8D xx xx     	sta	|~~reg_cmd_info+31
  9749 03:A247: C2 20        	rep	#$20
  9750                        	longa	on
  9751                        ;   }
  9752                        	.line	2487
  9753                        ;
  9754                        ;   // All done.  The return values of this functi
                    on are described in
  9755                        ;   // MINDRVR.H.
  9756                        ;
  9757                        ;   if ( reg_cmd_info.ec )
  9758                        L10163:
  9759                        	.line	2492
  9760                        ;      return 1;
  9761 03:A249: AD xx xx     	lda	|~~reg_cmd_info+31
  9762 03:A24C: 29 FF 00     	and	#$ff
  9763 03:A24F: D0 03        	bne	L395
  9764 03:A251: 82 06 00     	brl	L10164
  9765                        L395:
  9766                        	.line	2493
  9767 03:A254: A9 01 00     	lda	#$1
  9768 03:A257: 82 08 FD     	brl	L376
  9769                        ;   return 0;
  9770                        L10164:
  9771                        	.line	2494
  9772 03:A25A: A9 00 00     	lda	#$0
  9773 03:A25D: 82 02 FD     	brl	L376
  9774                        ;}
  9775                        	.line	2495
  9776                        	.endblock	2495
  9777             00000013   L360	equ	19
  9778             0000000D   L361	equ	13
  9779 03:A260:              	ends
  Thu Dec  3 2020 22:25                                                Page 185


  9780                        	efunc
  9781                        	.endfunc	2495,13,19
  9782                        	.line	2495
  9783                        ;
  9784                        ;#endif   // INCLUDE_ATAPI
  9785                        ;
  9786                        ;#ifdef INCLUDE_ATA_DMA
  9787                        ;
  9788                        ;//***********************************************
                    ************
  9789                        ;//
  9790                        ;// Some notes about PCI bus mastering DMA...
  9791                        ;//
  9792                        ;// !!! The DMA support in MINDRVR is based on x86
                     PCI bus mastering
  9793                        ;// !!! ATA controller design as described by the 
                    T13 document
  9794                        ;// !!! '1510 Host Controller Standard' (in sectio
                    ns 1-6).
  9795                        ;//
  9796                        ;// Note that the T13 1510D document also describe
                    s a
  9797                        ;// complex DMA engine called ADMA.  While ADMA is
                     a good idea it
  9798                        ;// will probably never be popular or widely imple
                    mented.  MINDRVR
  9799                        ;// does not support ADMA.
  9800                        ;//
  9801                        ;// The base address of the Bus Master Control Reg
                    isters (BMIDE) is
  9802                        ;// found in the PCI Configuration space for the A
                    TA controller (at
  9803                        ;// offset 0x20 in the config space data).  This i
                    s normally an I/O
  9804                        ;// address.
  9805                        ;//
  9806                        ;// The BMIDE data is 16 bytes of data starting at
                     the BMIDE base
  9807                        ;// address.  The first 8 bytes is for the primary
                     ATA channel and
  9808                        ;// the second 8 bytes is for the secondary ATA ch
                    annel.  The 8 bytes
  9809                        ;// contain a "command" byte and a "status" byte a
                    nd a 4 byte
  9810                        ;// (32-bit) physical memory address pointing to t
                    he Physical Region
  9811                        ;// Descriptor (PRD) list.  Each PRD entry describ
                    es an area of
  9812                        ;// memory or data buffer for the DMA transfer.  A
                     region described
  9813                        ;// by a PRD may not cross a 64K byte boundary in 
                    physical memory.
  9814                        ;// Also, the PRD list must not cross a 64K byte b
                    oundary.
  9815                        ;//
  9816                        ;//***********************************************
                    ************
  9817                        ;
  Thu Dec  3 2020 22:25                                                Page 186


  9818                        ;//***********************************************
                    ************
  9819                        ;//
  9820                        ;// pci bus master registers and PRD list buffer,
  9821                        ;// see the dma_pci_config() and set_up_xfer() fun
                    ctions.
  9822                        ;//
  9823                        ;// !!! Note that the PRD buffer is statically all
                    ocated here
  9824                        ;// !!! but the actual address of the buffer is ad
                    justed by
  9825                        ;// !!! the dma_pci_config() function.
  9826                        ;//
  9827                        ;//***********************************************
                    ************
  9828                        ;
  9829                        ;static unsigned long * dma_pci_prd_ptr;   // curr
                    ent PRD buffer address
  9830                        ;static int dma_pci_num_prd;               // curr
                    ent number of PRD entries
  9831                        ;
  9832                        ;static unsigned char statReg;             // save
                     BM status reg bits
  9833                        ;static unsigned char rwControl;           // read
                    /write control bit setting
  9834                        ;
  9835                        ;#define MAX_TRANSFER_SIZE  262144L        // max 
                    transfer size (in bytes,
  9836                        ;                                          // shou
                    ld be multiple of 65536)
  9837                        ;
  9838                        ;#define MAX_SEG ((MAX_TRANSFER_SIZE/65536L)+2L) /
                    / number physical segments
  9839                        ;#define MAX_PRD (MAX_SEG*4L)                    /
                    / number of PRDs required
  9840                        ;
  9841                        ;#define PRD_BUF_SIZE (48+(2*MAX_PRD*8))         /
                    / size of PRD list buffer
  9842                        ;
  9843                        ;static unsigned char prdBuf[PRD_BUF_SIZE];      /
                    / PRD buffer
  9844                        ;static unsigned long * prdBufPtr;               /
                    / first PRD addr
  9845                        ;
  9846                        ;//***********************************************
                    ************
  9847                        ;//
  9848                        ;// dma_pci_config() - configure/setup for Read/Wr
                    ite DMA
  9849                        ;//
  9850                        ;// The caller must call this function before atte
                    mpting
  9851                        ;// to use any ATA or ATAPI commands in PCI DMA mo
                    de.
  9852                        ;//
  9853                        ;// !!! MINDRVR assumes the entire DMA data transf
                    er is contained
  9854                        ;// !!! within a single contiguous I/O buffer. You
  Thu Dec  3 2020 22:25                                                Page 187


                     may not need
  9855                        ;// !!! the dma_pci_config() function depending on
                     how your system
  9856                        ;// !!! allocates the PRD buffer.
  9857                        ;//
  9858                        ;// !!! This function shows an example of PRD buff
                    er allocation.
  9859                        ;// !!! The PRD buffer must be aligned
  9860                        ;// !!! on a 8 byte boundary and must not cross a 
                    64K byte
  9861                        ;// !!! boundary in memory.
  9862                        ;//
  9863                        ;//***********************************************
                    ************
  9864                        ;
  9865                        ;int dma_pci_config( void )
  9866                        ;
  9867                        ;{
  9868                        ;   unsigned long lw;
  9869                        ;
  9870                        ;   // Set up the PRD entry list buffer address - 
                    the PRD entry list
  9871                        ;   // may not span a 64KB boundary in physical me
                    mory. Space is
  9872                        ;   // allocated (above) for this buffer such that
                     it will be
  9873                        ;   // aligned on a seqment boundary
  9874                        ;   // and such that the PRD list will not span a 
                    64KB boundary...
  9875                        ;   lw = (unsigned long) prdBuf;
  9876                        ;   // ...move up to an 8 byte boundary.
  9877                        ;   lw = lw + 15;
  9878                        ;   lw = lw & 0xfffffff8L;
  9879                        ;   // ...check for 64KB boundary in the first par
                    t of the PRD buffer,
  9880                        ;   // ...if so just move the buffer to that bound
                    ary.
  9881                        ;   if ( ( lw & 0xffff0000L )
  9882                        ;        !=
  9883                        ;        ( ( lw + ( MAX_PRD * 8L ) - 1L ) & 0xffff
                    0000L )
  9884                        ;      )
  9885                        ;      lw = ( lw + ( MAX_PRD * 8L ) ) & 0xffff0000
                    L;
  9886                        ;   // ... return the address of the first PRD
  9887                        ;   dma_pci_prd_ptr = prdBufPtr = (unsigned long *
                    ) lw;
  9888                        ;   // ... return the current number of PRD entrie
                    s
  9889                        ;   dma_pci_num_prd = 0;
  9890                        ;
  9891                        ;   // read the BM status reg and save the upper 3
                     bits.
  9892                        ;   statReg = (unsigned char) ( pio_readBusMstrSta
                    tus() & 0x60 );
  9893                        ;
  9894                        ;   return 0;
  9895                        ;}
  Thu Dec  3 2020 22:25                                                Page 188


  9896                        ;
  9897                        ;//***********************************************
                    ************
  9898                        ;//
  9899                        ;// set_up_xfer() -- set up the PRD entry list
  9900                        ;//
  9901                        ;// !!! MINDRVR assumes the entire DMA data transf
                    er is contained
  9902                        ;// !!! within a single contiguous I/O buffer. You
                     may not need
  9903                        ;// !!! a much more complex set_up_xfer() function
                     to support
  9904                        ;// !!! true scatter/gather lists.
  9905                        ;//
  9906                        ;// The PRD list must be aligned on an 8 byte boun
                    dary and the
  9907                        ;// list must not cross a 64K byte boundary in mem
                    ory.
  9908                        ;//
  9909                        ;//***********************************************
                    ************
  9910                        ;
  9911                        ;static int set_up_xfer( int dir, long bc, unsigne
                    d char * bufAddr );
  9912                        ;
  9913                        ;static int set_up_xfer( int dir, long bc, unsigne
                    d char * bufAddr )
  9914                        ;
  9915                        ;{
  9916                        ;   int numPrd;                      // number of 
                    PRD required
  9917                        ;   int maxPrd;                      // max number
                     of PRD allowed
  9918                        ;   unsigned long temp;
  9919                        ;   unsigned long phyAddr;           // physical m
                    emory address
  9920                        ;   unsigned long * prdPtr;      // pointer to PRD
                     entry list
  9921                        ;
  9922                        ;   // disable/stop the dma channel, clear interru
                    pt and error bits
  9923                        ;   pio_writeBusMstrCmd( BM_CR_MASK_STOP );
  9924                        ;   pio_writeBusMstrStatus( (unsigned char) ( stat
                    Reg | BM_SR_MASK_INT | BM_SR_MASK_ERR ) );
  9925                        ;
  9926                        ;   // setup to build the PRD list...
  9927                        ;   // ...max PRDs allowed
  9928                        ;   maxPrd = (int) MAX_PRD;
  9929                        ;   // ...PRD buffer address
  9930                        ;   prdPtr = prdBufPtr;
  9931                        ;   dma_pci_prd_ptr = prdPtr;
  9932                        ;   // ... convert I/O buffer address to an physic
                    al memory address
  9933                        ;   phyAddr = (unsigned long) bufAddr;
  9934                        ;
  9935                        ;   // build the PRD list...
  9936                        ;   // ...PRD entry format:
  9937                        ;   // +0 to +3 = memory address
  Thu Dec  3 2020 22:25                                                Page 189


  9938                        ;   // +4 to +5 = 0x0000 (not EOT) or 0x8000 (EOT)
  9939                        ;   // +6 to +7 = byte count
  9940                        ;   // ...zero number of PRDs
  9941                        ;   numPrd = 0;
  9942                        ;   // ...loop to build each PRD
  9943                        ;   while ( bc > 0 )
  9944                        ;   {
  9945                        ;      if ( numPrd >= maxPrd )
  9946                        ;         return 1;
  9947                        ;      // set this PRD's address
  9948                        ;      prdPtr[0] = phyAddr;
  9949                        ;      // set count for this PRD
  9950                        ;      temp = 65536L;          // max PRD length
  9951                        ;      if ( temp > bc )        // count to large?
  9952                        ;         temp = bc;           //    yes - use act
                    ual count
  9953                        ;      // check if count will fit
  9954                        ;      phyAddr = phyAddr + temp;
  9955                        ;      if ( ( phyAddr & 0xffff0000L ) != ( prdPtr[
                    0] & 0xffff0000L ) )
  9956                        ;      {
  9957                        ;         phyAddr = phyAddr & 0xffff0000L;
  9958                        ;         temp = phyAddr - prdPtr[0];
  9959                        ;      }
  9960                        ;      // set this PRD's count
  9961                        ;      prdPtr[1] = temp & 0x0000ffffL;
  9962                        ;      // update byte count
  9963                        ;      bc = bc - temp;
  9964                        ;      // set the end bit in the prd list
  9965                        ;      if ( bc < 1 )
  9966                        ;         prdPtr[1] = prdPtr[1] | 0x80000000L;
  9967                        ;      prdPtr ++ ;
  9968                        ;      prdPtr ++ ;
  9969                        ;      numPrd ++ ;
  9970                        ;   }
  9971                        ;
  9972                        ;   // return the current PRD list size and
  9973                        ;   // write into BMIDE PRD address registers.
  9974                        ;
  9975                        ;   dma_pci_num_prd = numPrd;
  9976                        ;   * (unsigned long *) (pio_bmide_base_addr + BM_
                    PRD_ADDR_LOW )
  9977                        ;      = (unsigned long) prdBufPtr;
  9978                        ;
  9979                        ;   // set the read/write control:
  9980                        ;   // PCI reads for ATA Write DMA commands,
  9981                        ;   // PCI writes for ATA Read DMA commands.
  9982                        ;
  9983                        ;   if ( dir )
  9984                        ;      rwControl = BM_CR_MASK_READ;     // ATA Wri
                    te DMA
  9985                        ;   else
  9986                        ;      rwControl = BM_CR_MASK_WRITE;    // ATA Rea
                    d DMA
  9987                        ;   pio_writeBusMstrCmd( rwControl );
  9988                        ;   return 0;
  9989                        ;}
  9990                        ;
  Thu Dec  3 2020 22:25                                                Page 190


  9991                        ;//***********************************************
                    ************
  9992                        ;//
  9993                        ;// exec_pci_ata_cmd() - PCI Bus Master for ATA R/
                    W DMA commands
  9994                        ;//
  9995                        ;//***********************************************
                    ************
  9996                        ;
  9997                        ;static int exec_pci_ata_cmd( unsigned char dev,
  9998                        ;                             unsigned char * bufA
                    ddr,
  9999                        ;                             long numSect );
 10000                        ;
 10001                        ;static int exec_pci_ata_cmd( unsigned char dev,
 10002                        ;                             unsigned char * bufA
                    ddr,
 10003                        ;                             long numSect )
 10004                        ;
 10005                        ;{
 10006                        ;   unsigned char status;
 10007                        ;
 10008                        ;   // Quit now if the command is incorrect.
 10009                        ;
 10010                        ;   if (    ( reg_cmd_info.cmd != CMD_READ_DMA )
 10011                        ;        && ( reg_cmd_info.cmd != CMD_READ_DMA_EXT
                     )
 10012                        ;        && ( reg_cmd_info.cmd != CMD_WRITE_DMA )
 10013                        ;        && ( reg_cmd_info.cmd != CMD_WRITE_DMA_EX
                    T ) )
 10014                        ;   {
 10015                        ;      reg_cmd_info.ec = 77;
 10016                        ;      return 1;
 10017                        ;   }
 10018                        ;
 10019                        ;   // Set up the dma transfer
 10020                        ;
 10021                        ;   if ( set_up_xfer( ( reg_cmd_info.cmd == CMD_WR
                    ITE_DMA )
 10022                        ;                     ||
 10023                        ;                     ( reg_cmd_info.cmd == CMD_WR
                    ITE_DMA_EXT ),
 10024                        ;                     numSect * 512L, bufAddr ) )
 10025                        ;   {
 10026                        ;      reg_cmd_info.ec = 61;
 10027                        ;      return 1;
 10028                        ;   }
 10029                        ;
 10030                        ;   // Set command time out.
 10031                        ;
 10032                        ;   tmr_set_timeout();
 10033                        ;
 10034                        ;   // Select the drive - call the sub_select func
                    tion.
 10035                        ;   // Quit now if this fails.
 10036                        ;
 10037                        ;   if ( sub_select( dev ) )
 10038                        ;   {
  Thu Dec  3 2020 22:25                                                Page 191


 10039                        ;      return 1;
 10040                        ;   }
 10041                        ;
 10042                        ;   // Set up all the registers except the command
                     register.
 10043                        ;
 10044                        ;   sub_setup_command();
 10045                        ;
 10046                        ;   // Start the command by setting the Command re
                    gister.  The drive
 10047                        ;   // should immediately set BUSY status.
 10048                        ;
 10049                        ;   pio_outbyte( CB_CMD, reg_cmd_info.cmd );
 10050                        ;
 10051                        ;   // The drive should start executing the comman
                    d including any
 10052                        ;   // data transfer.
 10053                        ;
 10054                        ;   // Data transfer...
 10055                        ;   // read the BMIDE regs
 10056                        ;   // enable/start the dma channel.
 10057                        ;   // read the BMIDE regs again
 10058                        ;
 10059                        ;   pio_readBusMstrCmd();
 10060                        ;   pio_readBusMstrStatus();
 10061                        ;   pio_writeBusMstrCmd( (unsigned char) ( rwContr
                    ol | BM_CR_MASK_START ) );
 10062                        ;   pio_readBusMstrCmd();
 10063                        ;   pio_readBusMstrStatus();
 10064                        ;
 10065                        ;   // Data transfer...
 10066                        ;   // the device and dma channel transfer the dat
                    a here while we start
 10067                        ;   // checking for command completion...
 10068                        ;   // wait for the PCI BM Interrupt=1 (see ATAIOI
                    NT.C)...
 10069                        ;
 10070                        ;   if ( SYSTEM_WAIT_INTR_OR_TIMEOUT() )       // 
                    time out ?
 10071                        ;   {
 10072                        ;      reg_cmd_info.to = 1;
 10073                        ;      reg_cmd_info.ec = 73;
 10074                        ;   }
 10075                        ;
 10076                        ;   // End of command...
 10077                        ;   // disable/stop the dma channel
 10078                        ;
 10079                        ;   status = int_bmide_status;                // r
                    ead BM status
 10080                        ;   status &= ~ BM_SR_MASK_ACT;            // igno
                    re Active bit
 10081                        ;   pio_writeBusMstrCmd( BM_CR_MASK_STOP );    // 
                    shutdown DMA
 10082                        ;   pio_readBusMstrCmd();                      // 
                    read BM cmd (just for trace)
 10083                        ;   status |= pio_readBusMstrStatus();         // 
                    read BM status again
 10084                        ;
  Thu Dec  3 2020 22:25                                                Page 192


 10085                        ;   if ( reg_cmd_info.ec == 0 )
 10086                        ;   {
 10087                        ;      if ( status & BM_SR_MASK_ERR )            /
                    / bus master error?
 10088                        ;      {
 10089                        ;         reg_cmd_info.ec = 78;                  /
                    / yes
 10090                        ;      }
 10091                        ;   }
 10092                        ;   if ( reg_cmd_info.ec == 0 )
 10093                        ;   {
 10094                        ;      if ( status & BM_SR_MASK_ACT )            /
                    / end of PRD list?
 10095                        ;      {
 10096                        ;         reg_cmd_info.ec = 71;                  /
                    / no
 10097                        ;      }
 10098                        ;   }
 10099                        ;
 10100                        ;   // End of command...
 10101                        ;   // If no error use the Status register value t
                    hat was read
 10102                        ;   // by the interrupt handler. If there was an e
                    rror
 10103                        ;   // read the Status register because it may not
                     have been
 10104                        ;   // read by the interrupt handler.
 10105                        ;
 10106                        ;   if ( reg_cmd_info.ec )
 10107                        ;      status = pio_inbyte( CB_STAT );
 10108                        ;   else
 10109                        ;      status = int_ata_status;
 10110                        ;
 10111                        ;   // Final status check...
 10112                        ;   // if no error, check final status...
 10113                        ;   // Error if BUSY, DEVICE FAULT, DRQ or ERROR s
                    tatus now.
 10114                        ;
 10115                        ;   if ( reg_cmd_info.ec == 0 )
 10116                        ;   {
 10117                        ;      if ( status & ( CB_STAT_BSY | CB_STAT_DF | 
                    CB_STAT_DRQ | CB_STAT_ERR ) )
 10118                        ;      {
 10119                        ;         reg_cmd_info.ec = 74;
 10120                        ;      }
 10121                        ;   }
 10122                        ;
 10123                        ;   // Final status check...
 10124                        ;   // if any error, update total bytes transferre
                    d.
 10125                        ;
 10126                        ;   if ( reg_cmd_info.ec == 0 )
 10127                        ;      reg_cmd_info.totalBytesXfer = numSect * 512
                    L;
 10128                        ;   else
 10129                        ;      reg_cmd_info.totalBytesXfer = 0L;
 10130                        ;
 10131                        ;   // All done.  The return values of this functi
  Thu Dec  3 2020 22:25                                                Page 193


                    on are described in
 10132                        ;   // MINDRVR.H.
 10133                        ;
 10134                        ;   if ( reg_cmd_info.ec )
 10135                        ;      return 1;
 10136                        ;   return 0;
 10137                        ;}
 10138                        ;
 10139                        ;//***********************************************
                    ************
 10140                        ;//
 10141                        ;// dma_pci_lba28() - DMA in PCI Multiword for ATA
                     R/W DMA
 10142                        ;//
 10143                        ;//***********************************************
                    ************
 10144                        ;
 10145                        ;int dma_pci_lba28( unsigned char dev, unsigned ch
                    ar cmd,
 10146                        ;                   unsigned int fr, unsigned int 
                    sc,
 10147                        ;                   unsigned long lba,
 10148                        ;                   unsigned char * bufAddr,
 10149                        ;                   long numSect )
 10150                        ;
 10151                        ;{
 10152                        ;
 10153                        ;   // Setup current command information.
 10154                        ;
 10155                        ;   reg_cmd_info.cmd = cmd;
 10156                        ;   reg_cmd_info.fr = fr;
 10157                        ;   reg_cmd_info.sc = sc;
 10158                        ;   reg_cmd_info.dh = (unsigned char) ( CB_DH_LBA 
                    | ( dev ? CB_DH_DEV1 : CB_DH_DEV0 ) );
 10159                        ;   reg_cmd_info.dc = 0x00;      // nIEN=0 require
                    d on PCI !
 10160                        ;   reg_cmd_info.ns  = numSect;
 10161                        ;   reg_cmd_info.lbaSize = LBA28;
 10162                        ;   reg_cmd_info.lbaHigh = 0L;
 10163                        ;   reg_cmd_info.lbaLow = lba;
 10164                        ;
 10165                        ;   // Execute the command.
 10166                        ;
 10167                        ;   return exec_pci_ata_cmd( dev, bufAddr, numSect
                     );
 10168                        ;}
 10169                        ;
 10170                        ;//***********************************************
                    ************
 10171                        ;//
 10172                        ;// dma_pci_lba48() - DMA in PCI Multiword for ATA
                     R/W DMA
 10173                        ;//
 10174                        ;//***********************************************
                    ************
 10175                        ;
 10176                        ;int dma_pci_lba48( unsigned char dev, unsigned ch
                    ar cmd,
  Thu Dec  3 2020 22:25                                                Page 194


 10177                        ;                   unsigned int fr, unsigned int 
                    sc,
 10178                        ;                   unsigned long lbahi, unsigned 
                    long lbalo,
 10179                        ;                   unsigned char * bufAddr,
 10180                        ;                   long numSect )
 10181                        ;
 10182                        ;{
 10183                        ;
 10184                        ;   // Setup current command information.
 10185                        ;
 10186                        ;   reg_cmd_info.cmd = cmd;
 10187                        ;   reg_cmd_info.fr = fr;
 10188                        ;   reg_cmd_info.sc = sc;
 10189                        ;   reg_cmd_info.dh = (unsigned char) ( CB_DH_LBA 
                    | ( dev ? CB_DH_DEV1 : CB_DH_DEV0 ) );
 10190                        ;   reg_cmd_info.dc = 0x00;      // nIEN=0 require
                    d on PCI !
 10191                        ;   reg_cmd_info.ns  = numSect;
 10192                        ;   reg_cmd_info.lbaSize = LBA48;
 10193                        ;   reg_cmd_info.lbaHigh = lbahi;
 10194                        ;   reg_cmd_info.lbaLow = lbalo;
 10195                        ;
 10196                        ;   // Execute the command.
 10197                        ;
 10198                        ;   return exec_pci_ata_cmd( dev, bufAddr, numSect
                     );
 10199                        ;}
 10200                        ;
 10201                        ;#endif   // INCLUDE_ATA_DMA
 10202                        ;
 10203                        ;#ifdef INCLUDE_ATAPI_DMA
 10204                        ;
 10205                        ;//***********************************************
                    ************
 10206                        ;//
 10207                        ;// dma_pci_packet() - PCI Bus Master for ATAPI Pa
                    cket command
 10208                        ;//
 10209                        ;//***********************************************
                    ************
 10210                        ;
 10211                        ;int dma_pci_packet( unsigned char dev,
 10212                        ;                    unsigned int cpbc,
 10213                        ;                    unsigned char * cdbBufAddr,
 10214                        ;                    int dir,
 10215                        ;                    long dpbc,
 10216                        ;                    unsigned char * dataBufAddr )
 10217                        ;
 10218                        ;{
 10219                        ;   unsigned char status;
 10220                        ;
 10221                        ;   // Make sure the command packet size is either
                     12 or 16
 10222                        ;   // and save the command packet size and data.
 10223                        ;
 10224                        ;   cpbc = cpbc < 12 ? 12 : cpbc;
 10225                        ;   cpbc = cpbc > 12 ? 16 : cpbc;
  Thu Dec  3 2020 22:25                                                Page 195


 10226                        ;
 10227                        ;   // Setup current command information.
 10228                        ;
 10229                        ;   reg_cmd_info.cmd = CMD_PACKET;
 10230                        ;   reg_cmd_info.fr = 0x01;      // packet DMA mod
                    e !
 10231                        ;   reg_cmd_info.sc = 0;
 10232                        ;   reg_cmd_info.sn = 0;
 10233                        ;   reg_cmd_info.cl = 0;         // no Byte Count 
                    Limit in DMA !
 10234                        ;   reg_cmd_info.ch = 0;         // no Byte Count 
                    Limit in DMA !
 10235                        ;   reg_cmd_info.dh = (unsigned char) ( dev ? CB_D
                    H_DEV1 : CB_DH_DEV0 );
 10236                        ;   reg_cmd_info.dc = 0x00;      // nIEN=0 require
                    d on PCI !
 10237                        ;
 10238                        ;   // the data packet byte count must be even
 10239                        ;   // and must not be zero
 10240                        ;
 10241                        ;   if ( dpbc & 1L )
 10242                        ;      dpbc ++ ;
 10243                        ;   if ( dpbc < 2L )
 10244                        ;      dpbc = 2L;
 10245                        ;
 10246                        ;   // Set up the dma transfer
 10247                        ;
 10248                        ;   if ( set_up_xfer( dir, dpbc, dataBufAddr ) )
 10249                        ;   {
 10250                        ;      reg_cmd_info.ec = 61;
 10251                        ;      return 1;
 10252                        ;   }
 10253                        ;
 10254                        ;   // Set command time out.
 10255                        ;
 10256                        ;   tmr_set_timeout();
 10257                        ;
 10258                        ;   // Select the drive - call the reg_select func
                    tion.
 10259                        ;   // Quit now if this fails.
 10260                        ;
 10261                        ;   if ( sub_select( dev ) )
 10262                        ;   {
 10263                        ;      return 1;
 10264                        ;   }
 10265                        ;
 10266                        ;   // Set up all the registers except the command
                     register.
 10267                        ;
 10268                        ;   sub_setup_command();
 10269                        ;
 10270                        ;   // Start the command by setting the Command re
                    gister.  The drive
 10271                        ;   // should immediately set BUSY status.
 10272                        ;
 10273                        ;   pio_outbyte( CB_CMD, CMD_PACKET );
 10274                        ;
 10275                        ;   // Waste some time by reading the alternate st
  Thu Dec  3 2020 22:25                                                Page 196


                    atus a few times.
 10276                        ;   // This gives the drive time to set BUSY in th
                    e status register on
 10277                        ;   // really fast systems.  If we don't do this, 
                    a slow drive on a fast
 10278                        ;   // system may not set BUSY fast enough and we 
                    would think it had
 10279                        ;   // completed the command when it really had no
                    t started the
 10280                        ;   // command yet.
 10281                        ;
 10282                        ;   DELAY400NS;
 10283                        ;
 10284                        ;   // Command packet transfer...
 10285                        ;   // Poll Alternate Status for BSY=0.
 10286                        ;
 10287                        ;   while ( 1 )
 10288                        ;   {
 10289                        ;      status = pio_inbyte( CB_ASTAT );       // p
                    oll for not busy
 10290                        ;      if ( ( status & CB_STAT_BSY ) == 0 )
 10291                        ;         break;
 10292                        ;      if ( tmr_chk_timeout() )               // t
                    ime out yet ?
 10293                        ;      {
 10294                        ;         reg_cmd_info.to = 1;
 10295                        ;         reg_cmd_info.ec = 75;
 10296                        ;         break;
 10297                        ;      }
 10298                        ;   }
 10299                        ;
 10300                        ;   // Command packet transfer...
 10301                        ;   // Check for protocol failures... no interrupt
                     here please!
 10302                        ;
 10303                        ;   // Command packet transfer...
 10304                        ;   // If no error, transfer the command packet.
 10305                        ;
 10306                        ;   if ( reg_cmd_info.ec == 0 )
 10307                        ;   {
 10308                        ;
 10309                        ;      // Command packet transfer...
 10310                        ;      // Read the primary status register and the
                     other ATAPI registers.
 10311                        ;
 10312                        ;      status = pio_inbyte( CB_STAT );
 10313                        ;
 10314                        ;      // Command packet transfer...
 10315                        ;      // check status: must have BSY=0, DRQ=1 now
 10316                        ;
 10317                        ;      if (    ( status & ( CB_STAT_BSY | CB_STAT_
                    DRQ | CB_STAT_ERR ) )
 10318                        ;           != CB_STAT_DRQ
 10319                        ;         )
 10320                        ;      {
 10321                        ;         reg_cmd_info.ec = 76;
 10322                        ;      }
 10323                        ;      else
  Thu Dec  3 2020 22:25                                                Page 197


 10324                        ;      {
 10325                        ;
 10326                        ;         // Command packet transfer...
 10327                        ;         // xfer the command packet (the cdb)
 10328                        ;
 10329                        ;         pio_drq_block_out( CB_DATA, cdbBufAddr, 
                    cpbc >> 1 );
 10330                        ;      }
 10331                        ;   }
 10332                        ;
 10333                        ;   // Data transfer...
 10334                        ;   // The drive should start executing the comman
                    d
 10335                        ;   // including any data transfer.
 10336                        ;   // If no error, set up and start the DMA,
 10337                        ;   // and wait for the DMA to complete.
 10338                        ;
 10339                        ;   if ( reg_cmd_info.ec == 0 )
 10340                        ;   {
 10341                        ;
 10342                        ;      // Data transfer...
 10343                        ;      // read the BMIDE regs
 10344                        ;      // enable/start the dma channel.
 10345                        ;      // read the BMIDE regs again
 10346                        ;
 10347                        ;      pio_readBusMstrCmd();
 10348                        ;      pio_readBusMstrStatus();
 10349                        ;      pio_writeBusMstrCmd( (unsigned char) ( rwCo
                    ntrol | BM_CR_MASK_START ) );
 10350                        ;      pio_readBusMstrCmd();
 10351                        ;      pio_readBusMstrStatus();
 10352                        ;
 10353                        ;      // Data transfer...
 10354                        ;      // the device and dma channel transfer the 
                    data here while we start
 10355                        ;      // checking for command completion...
 10356                        ;      // wait for the PCI BM Active=0 and Interru
                    pt=1 or PCI BM Error=1...
 10357                        ;
 10358                        ;      if ( SYSTEM_WAIT_INTR_OR_TIMEOUT() )    // 
                    time out ?
 10359                        ;      {
 10360                        ;         reg_cmd_info.to = 1;
 10361                        ;         reg_cmd_info.ec = 73;
 10362                        ;      }
 10363                        ;
 10364                        ;      // End of command...
 10365                        ;      // disable/stop the dma channel
 10366                        ;
 10367                        ;      status = int_bmide_status;                /
                    / read BM status
 10368                        ;      status &= ~ BM_SR_MASK_ACT;            // i
                    gnore Active bit
 10369                        ;      pio_writeBusMstrCmd( BM_CR_MASK_STOP );    
                    // shutdown DMA
 10370                        ;      pio_readBusMstrCmd();                      
                    // read BM cmd (just for trace)
 10371                        ;      status |= pio_readBusMstrStatus();         
  Thu Dec  3 2020 22:25                                                Page 198


                    // read BM statu again
 10372                        ;   }
 10373                        ;
 10374                        ;   if ( reg_cmd_info.ec == 0 )
 10375                        ;   {
 10376                        ;      if ( status & ( BM_SR_MASK_ERR ) )        /
                    / bus master error?
 10377                        ;      {
 10378                        ;         reg_cmd_info.ec = 78;                  /
                    / yes
 10379                        ;      }
 10380                        ;      if ( ( status & BM_SR_MASK_ACT ) )        /
                    / end of PRD list?
 10381                        ;      {
 10382                        ;         reg_cmd_info.ec = 71;                  /
                    / no
 10383                        ;      }
 10384                        ;   }
 10385                        ;
 10386                        ;   // End of command...
 10387                        ;   // If no error use the Status register value t
                    hat was read
 10388                        ;   // by the interrupt handler. If there was an e
                    rror
 10389                        ;   // read the Status register because it may not
                     have been
 10390                        ;   // read by the interrupt handler.
 10391                        ;
 10392                        ;   if ( reg_cmd_info.ec )
 10393                        ;      status = pio_inbyte( CB_STAT );
 10394                        ;   else
 10395                        ;      status = int_ata_status;
 10396                        ;
 10397                        ;   // Final status check...
 10398                        ;   // if no error, check final status...
 10399                        ;   // Error if BUSY, DRQ or ERROR status now.
 10400                        ;
 10401                        ;   if ( reg_cmd_info.ec == 0 )
 10402                        ;   {
 10403                        ;      if ( status & ( CB_STAT_BSY | CB_STAT_DRQ |
                     CB_STAT_ERR ) )
 10404                        ;      {
 10405                        ;         reg_cmd_info.ec = 74;
 10406                        ;      }
 10407                        ;   }
 10408                        ;
 10409                        ;
 10410                        ;   // Final status check...
 10411                        ;   // if any error, update total bytes transferre
                    d.
 10412                        ;
 10413                        ;   if ( reg_cmd_info.ec == 0 )
 10414                        ;      reg_cmd_info.totalBytesXfer = dpbc;
 10415                        ;   else
 10416                        ;      reg_cmd_info.totalBytesXfer = 0L;
 10417                        ;
 10418                        ;   // All done.  The return values of this functi
                    on are described in
  Thu Dec  3 2020 22:25                                                Page 199


 10419                        ;   // MINDRVR.H.
 10420                        ;
 10421                        ;   if ( reg_cmd_info.ec )
 10422                        ;      return 1;
 10423                        ;   return 0;
 10424                        ;}
 10425                        ;
 10426                        ;#endif   // INCLUDE_ATAPI_DMA
 10427                        ;
 10428                        ;//***********************************************
                    **************
 10429                        ;//
 10430                        ;// sub_setup_command() -- setup the command param
                    eters
 10431                        ;//                        in FR, SC, SN, CL, CH a
                    nd DH.
 10432                        ;//
 10433                        ;//***********************************************
                    **************
 10434                        ;
 10435                        ;static void sub_setup_command( void )
 10436                        ;
 10437                        ;{
 10438                        	.line	3148
 10439                        	.line	3150
 10440                        	FXHDD
 10441                        	func
 10442                        	.function	3150
 10443                        ~~sub_setup_command:
 10444                        	longa	on
 10445                        	longi	on
 10446 03:A260: 3B           	tsc
 10447 03:A261: 38           	sec
 10448 03:A262: E9 0C 00     	sbc	#L396
 10449 03:A265: 1B           	tcs
 10450 03:A266: 0B           	phd
 10451 03:A267: 5B           	tcd
 10452                        	.block	3150
 10453                        ;
 10454                        ;   // output DevCtrl - same for all devices and c
                    ommands
 10455                        ;   pio_outbyte( CB_DC, reg_cmd_info.dc );
 10456                        	.line	3153
 10457 03:A268: AD xx xx     	lda	|~~reg_cmd_info+12
 10458 03:A26B: 48           	pha
 10459 03:A26C: F4 08 00     	pea	#<$8
 10460 03:A26F: 22 E7 A7 03  	jsl	~~pio_outbyte
 10461                        ;
 10462                        ;   // output command parameters
 10463                        ;   if ( reg_cmd_info.lbaSize == LBA28 )
 10464                        	.line	3156
 10465                        ;   {
 10466 03:A273: E2 20        	sep	#$20
 10467                        	longa	off
 10468 03:A275: AD xx xx     	lda	|~~reg_cmd_info+19
 10469 03:A278: C9 1C        	cmp	#<$1c
 10470 03:A27A: C2 20        	rep	#$20
 10471                        	longa	on
  Thu Dec  3 2020 22:25                                                Page 200


 10472 03:A27C: F0 03        	beq	L399
 10473 03:A27E: 82 A1 00     	brl	L10165
 10474                        L399:
 10475                        	.line	3157
 10476                        ;      // in ATA LBA28 mode
 10477                        ;      pio_outbyte( CB_FR, (unsigned char) reg_cmd
                    _info.fr );
 10478                        	.line	3159
 10479 03:A281: AD xx xx     	lda	|~~reg_cmd_info+1
 10480 03:A284: 48           	pha
 10481 03:A285: F4 01 00     	pea	#<$1
 10482 03:A288: 22 E7 A7 03  	jsl	~~pio_outbyte
 10483                        ;      pio_outbyte( CB_SC, (unsigned char) reg_cmd
                    _info.sc );
 10484                        	.line	3160
 10485 03:A28C: AD xx xx     	lda	|~~reg_cmd_info+3
 10486 03:A28F: 48           	pha
 10487 03:A290: F4 02 00     	pea	#<$2
 10488 03:A293: 22 E7 A7 03  	jsl	~~pio_outbyte
 10489                        ;      pio_outbyte( CB_SN, (unsigned char) reg_cmd
                    _info.lbaLow );
 10490                        	.line	3161
 10491 03:A297: AD xx xx     	lda	|~~reg_cmd_info+20
 10492 03:A29A: 48           	pha
 10493 03:A29B: F4 03 00     	pea	#<$3
 10494 03:A29E: 22 E7 A7 03  	jsl	~~pio_outbyte
 10495                        ;      pio_outbyte( CB_CL, (unsigned char) ( reg_c
                    md_info.lbaLow >> 8 ) );
 10496                        	.line	3162
 10497 03:A2A2: AD xx xx     	lda	|~~reg_cmd_info+20+2
 10498 03:A2A5: 48           	pha
 10499 03:A2A6: AD xx xx     	lda	|~~reg_cmd_info+20
 10500 03:A2A9: 48           	pha
 10501 03:A2AA: A9 08 00     	lda	#$8
 10502                        	xref	~~~llsr
 10503 03:A2AD: 22 xx xx xx  	jsl	~~~llsr
 10504 03:A2B1: 85 01        	sta	<R0
 10505 03:A2B3: 86 03        	stx	<R0+2
 10506 03:A2B5: D4 01        	pei	<R0
 10507 03:A2B7: F4 04 00     	pea	#<$4
 10508 03:A2BA: 22 E7 A7 03  	jsl	~~pio_outbyte
 10509                        ;      pio_outbyte( CB_CH, (unsigned char) ( reg_c
                    md_info.lbaLow >> 16 ) );
 10510                        	.line	3163
 10511 03:A2BE: AD xx xx     	lda	|~~reg_cmd_info+20+2
 10512 03:A2C1: 48           	pha
 10513 03:A2C2: AD xx xx     	lda	|~~reg_cmd_info+20
 10514 03:A2C5: 48           	pha
 10515 03:A2C6: A9 10 00     	lda	#$10
 10516                        	xref	~~~llsr
 10517 03:A2C9: 22 xx xx xx  	jsl	~~~llsr
 10518 03:A2CD: 85 01        	sta	<R0
 10519 03:A2CF: 86 03        	stx	<R0+2
 10520 03:A2D1: D4 01        	pei	<R0
 10521 03:A2D3: F4 05 00     	pea	#<$5
 10522 03:A2D6: 22 E7 A7 03  	jsl	~~pio_outbyte
 10523                        ;      pio_outbyte( CB_DH, (unsigned char) ( ( reg
                    _cmd_info.dh & 0xf0 )
  Thu Dec  3 2020 22:25                                                Page 201


 10524                        	.line	3164
 10525                        ;                                            | ( (
                     reg_cmd_info.lbaLow >> 24 ) & 0x0f ) ) );
 10526 03:A2DA: AD xx xx     	lda	|~~reg_cmd_info+11
 10527 03:A2DD: 29 F0 00     	and	#<$f0
 10528 03:A2E0: 85 01        	sta	<R0
 10529 03:A2E2: A0 00 00     	ldy	#$0
 10530 03:A2E5: A5 01        	lda	<R0
 10531 03:A2E7: 10 01        	bpl	L400
 10532 03:A2E9: 88           	dey
 10533                        L400:
 10534 03:A2EA: 85 01        	sta	<R0
 10535 03:A2EC: 84 03        	sty	<R0+2
 10536 03:A2EE: AD xx xx     	lda	|~~reg_cmd_info+20+2
 10537 03:A2F1: 48           	pha
 10538 03:A2F2: AD xx xx     	lda	|~~reg_cmd_info+20
 10539 03:A2F5: 48           	pha
 10540 03:A2F6: A9 18 00     	lda	#$18
 10541                        	xref	~~~llsr
 10542 03:A2F9: 22 xx xx xx  	jsl	~~~llsr
 10543 03:A2FD: 85 05        	sta	<R1
 10544 03:A2FF: 86 07        	stx	<R1+2
 10545 03:A301: A5 05        	lda	<R1
 10546 03:A303: 29 0F 00     	and	#<$f
 10547 03:A306: 85 09        	sta	<R2
 10548 03:A308: 64 0B        	stz	<R2+2
 10549 03:A30A: A5 09        	lda	<R2
 10550 03:A30C: 05 01        	ora	<R0
 10551 03:A30E: 85 05        	sta	<R1
 10552 03:A310: A5 0B        	lda	<R2+2
 10553 03:A312: 05 03        	ora	<R0+2
 10554 03:A314: 85 07        	sta	<R1+2
 10555 03:A316: D4 05        	pei	<R1
 10556 03:A318: F4 06 00     	pea	#<$6
 10557 03:A31B: 22 E7 A7 03  	jsl	~~pio_outbyte
 10558                        ;   }
 10559                        	.line	3166
 10560                        ;   else
 10561 03:A31F: 82 18 01     	brl	L10166
 10562                        L10165:
 10563                        ;   if ( reg_cmd_info.lbaSize == LBA48 )
 10564                        	.line	3168
 10565                        ;   {
 10566 03:A322: E2 20        	sep	#$20
 10567                        	longa	off
 10568 03:A324: AD xx xx     	lda	|~~reg_cmd_info+19
 10569 03:A327: C9 30        	cmp	#<$30
 10570 03:A329: C2 20        	rep	#$20
 10571                        	longa	on
 10572 03:A32B: F0 03        	beq	L401
 10573 03:A32D: 82 C8 00     	brl	L10167
 10574                        L401:
 10575                        	.line	3169
 10576                        ;      // in ATA LBA48 mode
 10577                        ;      pio_outbyte( CB_FR, (unsigned char) ( reg_c
                    md_info.fr >> 8 ) );
 10578                        	.line	3171
 10579 03:A330: AD xx xx     	lda	|~~reg_cmd_info+1
  Thu Dec  3 2020 22:25                                                Page 202


 10580 03:A333: EB           	xba
 10581 03:A334: 29 FF 00     	and	#$00ff
 10582 03:A337: 48           	pha
 10583 03:A338: F4 01 00     	pea	#<$1
 10584 03:A33B: 22 E7 A7 03  	jsl	~~pio_outbyte
 10585                        ;      pio_outbyte( CB_SC, (unsigned char) ( reg_c
                    md_info.sc >> 8 ) );
 10586                        	.line	3172
 10587 03:A33F: AD xx xx     	lda	|~~reg_cmd_info+3
 10588 03:A342: EB           	xba
 10589 03:A343: 29 FF 00     	and	#$00ff
 10590 03:A346: 48           	pha
 10591 03:A347: F4 02 00     	pea	#<$2
 10592 03:A34A: 22 E7 A7 03  	jsl	~~pio_outbyte
 10593                        ;      pio_outbyte( CB_SN, (unsigned char) ( reg_c
                    md_info.lbaLow >> 24 ) );
 10594                        	.line	3173
 10595 03:A34E: AD xx xx     	lda	|~~reg_cmd_info+20+2
 10596 03:A351: 48           	pha
 10597 03:A352: AD xx xx     	lda	|~~reg_cmd_info+20
 10598 03:A355: 48           	pha
 10599 03:A356: A9 18 00     	lda	#$18
 10600                        	xref	~~~llsr
 10601 03:A359: 22 xx xx xx  	jsl	~~~llsr
 10602 03:A35D: 85 01        	sta	<R0
 10603 03:A35F: 86 03        	stx	<R0+2
 10604 03:A361: D4 01        	pei	<R0
 10605 03:A363: F4 03 00     	pea	#<$3
 10606 03:A366: 22 E7 A7 03  	jsl	~~pio_outbyte
 10607                        ;      pio_outbyte( CB_CL, (unsigned char) reg_cmd
                    _info.lbaHigh );
 10608                        	.line	3174
 10609 03:A36A: AD xx xx     	lda	|~~reg_cmd_info+24
 10610 03:A36D: 48           	pha
 10611 03:A36E: F4 04 00     	pea	#<$4
 10612 03:A371: 22 E7 A7 03  	jsl	~~pio_outbyte
 10613                        ;      pio_outbyte( CB_CH, (unsigned char) ( reg_c
                    md_info.lbaHigh >> 8 ) );
 10614                        	.line	3175
 10615 03:A375: AD xx xx     	lda	|~~reg_cmd_info+24+2
 10616 03:A378: 48           	pha
 10617 03:A379: AD xx xx     	lda	|~~reg_cmd_info+24
 10618 03:A37C: 48           	pha
 10619 03:A37D: A9 08 00     	lda	#$8
 10620                        	xref	~~~llsr
 10621 03:A380: 22 xx xx xx  	jsl	~~~llsr
 10622 03:A384: 85 01        	sta	<R0
 10623 03:A386: 86 03        	stx	<R0+2
 10624 03:A388: D4 01        	pei	<R0
 10625 03:A38A: F4 05 00     	pea	#<$5
 10626 03:A38D: 22 E7 A7 03  	jsl	~~pio_outbyte
 10627                        ;      pio_outbyte( CB_FR, (unsigned char) reg_cmd
                    _info.fr );
 10628                        	.line	3176
 10629 03:A391: AD xx xx     	lda	|~~reg_cmd_info+1
 10630 03:A394: 48           	pha
 10631 03:A395: F4 01 00     	pea	#<$1
 10632 03:A398: 22 E7 A7 03  	jsl	~~pio_outbyte
  Thu Dec  3 2020 22:25                                                Page 203


 10633                        ;      pio_outbyte( CB_SC, (unsigned char) reg_cmd
                    _info.sc );
 10634                        	.line	3177
 10635 03:A39C: AD xx xx     	lda	|~~reg_cmd_info+3
 10636 03:A39F: 48           	pha
 10637 03:A3A0: F4 02 00     	pea	#<$2
 10638 03:A3A3: 22 E7 A7 03  	jsl	~~pio_outbyte
 10639                        ;      pio_outbyte( CB_SN, (unsigned char) reg_cmd
                    _info.lbaLow );
 10640                        	.line	3178
 10641 03:A3A7: AD xx xx     	lda	|~~reg_cmd_info+20
 10642 03:A3AA: 48           	pha
 10643 03:A3AB: F4 03 00     	pea	#<$3
 10644 03:A3AE: 22 E7 A7 03  	jsl	~~pio_outbyte
 10645                        ;      pio_outbyte( CB_CL, (unsigned char) ( reg_c
                    md_info.lbaLow >> 8 ) );
 10646                        	.line	3179
 10647 03:A3B2: AD xx xx     	lda	|~~reg_cmd_info+20+2
 10648 03:A3B5: 48           	pha
 10649 03:A3B6: AD xx xx     	lda	|~~reg_cmd_info+20
 10650 03:A3B9: 48           	pha
 10651 03:A3BA: A9 08 00     	lda	#$8
 10652                        	xref	~~~llsr
 10653 03:A3BD: 22 xx xx xx  	jsl	~~~llsr
 10654 03:A3C1: 85 01        	sta	<R0
 10655 03:A3C3: 86 03        	stx	<R0+2
 10656 03:A3C5: D4 01        	pei	<R0
 10657 03:A3C7: F4 04 00     	pea	#<$4
 10658 03:A3CA: 22 E7 A7 03  	jsl	~~pio_outbyte
 10659                        ;      pio_outbyte( CB_CH, (unsigned char) ( reg_c
                    md_info.lbaLow >> 16 ) );
 10660                        	.line	3180
 10661 03:A3CE: AD xx xx     	lda	|~~reg_cmd_info+20+2
 10662 03:A3D1: 48           	pha
 10663 03:A3D2: AD xx xx     	lda	|~~reg_cmd_info+20
 10664 03:A3D5: 48           	pha
 10665 03:A3D6: A9 10 00     	lda	#$10
 10666                        	xref	~~~llsr
 10667 03:A3D9: 22 xx xx xx  	jsl	~~~llsr
 10668 03:A3DD: 85 01        	sta	<R0
 10669 03:A3DF: 86 03        	stx	<R0+2
 10670 03:A3E1: D4 01        	pei	<R0
 10671 03:A3E3: F4 05 00     	pea	#<$5
 10672 03:A3E6: 22 E7 A7 03  	jsl	~~pio_outbyte
 10673                        ;      pio_outbyte( CB_DH, reg_cmd_info.dh  );
 10674                        	.line	3181
 10675 03:A3EA: AD xx xx     	lda	|~~reg_cmd_info+11
 10676 03:A3ED: 48           	pha
 10677 03:A3EE: F4 06 00     	pea	#<$6
 10678 03:A3F1: 22 E7 A7 03  	jsl	~~pio_outbyte
 10679                        ;   }
 10680                        	.line	3182
 10681                        ;   else
 10682 03:A3F5: 82 42 00     	brl	L10168
 10683                        L10167:
 10684                        ;   {
 10685                        	.line	3184
 10686                        ;      // for ATAPI PACKET command
  Thu Dec  3 2020 22:25                                                Page 204


 10687                        ;      pio_outbyte( CB_FR, (unsigned char) reg_cmd
                    _info.fr  );
 10688                        	.line	3186
 10689 03:A3F8: AD xx xx     	lda	|~~reg_cmd_info+1
 10690 03:A3FB: 48           	pha
 10691 03:A3FC: F4 01 00     	pea	#<$1
 10692 03:A3FF: 22 E7 A7 03  	jsl	~~pio_outbyte
 10693                        ;      pio_outbyte( CB_SC, (unsigned char) reg_cmd
                    _info.sc  );
 10694                        	.line	3187
 10695 03:A403: AD xx xx     	lda	|~~reg_cmd_info+3
 10696 03:A406: 48           	pha
 10697 03:A407: F4 02 00     	pea	#<$2
 10698 03:A40A: 22 E7 A7 03  	jsl	~~pio_outbyte
 10699                        ;      pio_outbyte( CB_SN, (unsigned char) reg_cmd
                    _info.sn  );
 10700                        	.line	3188
 10701 03:A40E: AD xx xx     	lda	|~~reg_cmd_info+5
 10702 03:A411: 48           	pha
 10703 03:A412: F4 03 00     	pea	#<$3
 10704 03:A415: 22 E7 A7 03  	jsl	~~pio_outbyte
 10705                        ;      pio_outbyte( CB_CL, (unsigned char) reg_cmd
                    _info.cl  );
 10706                        	.line	3189
 10707 03:A419: AD xx xx     	lda	|~~reg_cmd_info+7
 10708 03:A41C: 48           	pha
 10709 03:A41D: F4 04 00     	pea	#<$4
 10710 03:A420: 22 E7 A7 03  	jsl	~~pio_outbyte
 10711                        ;      pio_outbyte( CB_CH, (unsigned char) reg_cmd
                    _info.ch  );
 10712                        	.line	3190
 10713 03:A424: AD xx xx     	lda	|~~reg_cmd_info+9
 10714 03:A427: 48           	pha
 10715 03:A428: F4 05 00     	pea	#<$5
 10716 03:A42B: 22 E7 A7 03  	jsl	~~pio_outbyte
 10717                        ;      pio_outbyte( CB_DH, reg_cmd_info.dh  );
 10718                        	.line	3191
 10719 03:A42F: AD xx xx     	lda	|~~reg_cmd_info+11
 10720 03:A432: 48           	pha
 10721 03:A433: F4 06 00     	pea	#<$6
 10722 03:A436: 22 E7 A7 03  	jsl	~~pio_outbyte
 10723                        ;   }
 10724                        	.line	3192
 10725                        L10168:
 10726                        L10166:
 10727                        ;}
 10728                        	.line	3193
 10729                        L402:
 10730 03:A43A: 2B           	pld
 10731 03:A43B: 3B           	tsc
 10732 03:A43C: 18           	clc
 10733 03:A43D: 69 0C 00     	adc	#L396
 10734 03:A440: 1B           	tcs
 10735 03:A441: 6B           	rtl
 10736                        	.endblock	3193
 10737             0000000C   L396	equ	12
 10738             0000000D   L397	equ	13
 10739 03:A442:              	ends
  Thu Dec  3 2020 22:25                                                Page 205


 10740                        	efunc
 10741                        	.endfunc	3193,13,12
 10742                        	.line	3193
 10743                        ;
 10744                        ;//***********************************************
                    **************
 10745                        ;//
 10746                        ;// sub_trace_command() -- trace the end of a comm
                    and.
 10747                        ;//
 10748                        ;//***********************************************
                    **************
 10749                        ;
 10750                        ;static void sub_trace_command( void )
 10751                        ;
 10752                        ;{
 10753                        	.line	3201
 10754                        	.line	3203
 10755                        	FXHDD
 10756                        	func
 10757                        	.function	3203
 10758                        ~~sub_trace_command:
 10759                        	longa	on
 10760                        	longi	on
 10761 03:A442: 3B           	tsc
 10762 03:A443: 38           	sec
 10763 03:A444: E9 00 00     	sbc	#L403
 10764 03:A447: 1B           	tcs
 10765 03:A448: 0B           	phd
 10766 03:A449: 5B           	tcd
 10767                        	.block	3203
 10768                        ;
 10769                        ;   reg_cmd_info.st = pio_inbyte( CB_STAT );
 10770                        	.line	3205
 10771 03:A44A: F4 07 00     	pea	#<$7
 10772 03:A44D: 22 A8 A7 03  	jsl	~~pio_inbyte
 10773 03:A451: E2 20        	sep	#$20
 10774                        	longa	off
 10775 03:A453: 8D xx xx     	sta	|~~reg_cmd_info+28
 10776 03:A456: C2 20        	rep	#$20
 10777                        	longa	on
 10778                        ;   reg_cmd_info.as = pio_inbyte( CB_ASTAT );
 10779                        	.line	3206
 10780 03:A458: F4 08 00     	pea	#<$8
 10781 03:A45B: 22 A8 A7 03  	jsl	~~pio_inbyte
 10782 03:A45F: E2 20        	sep	#$20
 10783                        	longa	off
 10784 03:A461: 8D xx xx     	sta	|~~reg_cmd_info+29
 10785 03:A464: C2 20        	rep	#$20
 10786                        	longa	on
 10787                        ;   reg_cmd_info.er = pio_inbyte( CB_ERR );
 10788                        	.line	3207
 10789 03:A466: F4 01 00     	pea	#<$1
 10790 03:A469: 22 A8 A7 03  	jsl	~~pio_inbyte
 10791 03:A46D: E2 20        	sep	#$20
 10792                        	longa	off
 10793 03:A46F: 8D xx xx     	sta	|~~reg_cmd_info+30
 10794 03:A472: C2 20        	rep	#$20
  Thu Dec  3 2020 22:25                                                Page 206


 10795                        	longa	on
 10796                        ;
 10797                        ;
 10798                        ;   k_debug_hex("reg_cmd_info.st:",reg_cmd_info.st
                    );
 10799                        	.line	3210
 10800 03:A474: AD xx xx     	lda	|~~reg_cmd_info+28
 10801 03:A477: 48           	pha
 10802 03:A478: F4 xx xx     	pea	#^L199
 10803 03:A47B: F4 xx xx     	pea	#<L199
 10804 03:A47E: 22 xx xx xx  	jsl	~~k_debug_hex
 10805                        ;   k_debug_hex("reg_cmd_info.as:",reg_cmd_info.as
                    );
 10806                        	.line	3211
 10807 03:A482: AD xx xx     	lda	|~~reg_cmd_info+29
 10808 03:A485: 48           	pha
 10809 03:A486: F4 xx xx     	pea	#^L199+17
 10810 03:A489: F4 xx xx     	pea	#<L199+17
 10811 03:A48C: 22 xx xx xx  	jsl	~~k_debug_hex
 10812                        ;   k_debug_hex("reg_cmd_info.er:",reg_cmd_info.er
                    );
 10813                        	.line	3212
 10814 03:A490: AD xx xx     	lda	|~~reg_cmd_info+30
 10815 03:A493: 48           	pha
 10816 03:A494: F4 xx xx     	pea	#^L199+34
 10817 03:A497: F4 xx xx     	pea	#<L199+34
 10818 03:A49A: 22 xx xx xx  	jsl	~~k_debug_hex
 10819                        ;
 10820                        ;
 10821                        ;// !!! if you want to read back the other device 
                    registers
 10822                        ;// !!! at the end of a command then this is the p
                    lace to do
 10823                        ;// !!! it. The code here is just and example of o
                    ut this is
 10824                        ;// !!! done on a little endian system like an x86
                    .
 10825                        ;
 10826                        ;#ifdef ENABLE_READBACK    // read back other regi
                    sters
 10827                        ;
 10828                        ;   {
 10829                        ;      unsigned long lbaHigh;
 10830                        ;      unsigned long lbaLow;
 10831                        ;      unsigned char sc48[2];
 10832                        ;      unsigned char lba48[8];
 10833                        ;
 10834                        ;      lbaHigh = 0;
 10835                        ;      lbaLow = 0;
 10836                        ;      if ( reg_cmd_info.lbaSize == LBA48 )
 10837                        ;      {
 10838                        ;         // read back ATA LBA48...
 10839                        ;         sc48[0]  = pio_inbyte( CB_SC );
 10840                        ;         lba48[0] = pio_inbyte( CB_SN );
 10841                        ;         lba48[1] = pio_inbyte( CB_CL );
 10842                        ;         lba48[2] = pio_inbyte( CB_CH );
 10843                        ;         pio_outbyte( CB_DC, CB_DC_HOB );
 10844                        ;         sc48[1]  = pio_inbyte( CB_SC );
  Thu Dec  3 2020 22:25                                                Page 207


 10845                        ;         lba48[3] = pio_inbyte( CB_SN );
 10846                        ;         lba48[4] = pio_inbyte( CB_CL );
 10847                        ;         lba48[5] = pio_inbyte( CB_CH );
 10848                        ;         lba48[6] = 0;
 10849                        ;         lba48[7] = 0;
 10850                        ;         lbaHigh = * (unsigned long *) ( lba48 + 
                    4 );
 10851                        ;         lbaLow  = * (unsigned long *) ( lba48 + 
                    0 );
 10852                        ;      }
 10853                        ;      else
 10854                        ;      if ( reg_cmd_info.lbaSize == LBA28 )
 10855                        ;      {
 10856                        ;         // read back ATA LBA28
 10857                        ;         lbaLow = pio_inbyte( CB_DH );
 10858                        ;         lbaLow = lbaLow << 8;
 10859                        ;         lbaLow = lbaLow | pio_inbyte( CB_CH );
 10860                        ;         lbaLow = lbaLow << 8;
 10861                        ;         lbaLow = lbaLow | pio_inbyte( CB_CL );
 10862                        ;         lbaLow = lbaLow << 8;
 10863                        ;         lbaLow = lbaLow | pio_inbyte( CB_SN );
 10864                        ;      }
 10865                        ;      else
 10866                        ;      {
 10867                        ;         // really no reason to read back for ATA
                    PI
 10868                        ;      }
 10869                        ;   }
 10870                        ;
 10871                        ;#endif   // read back other registers
 10872                        ;
 10873                        ;}
 10874                        	.line	3267
 10875                        L406:
 10876 03:A49E: 2B           	pld
 10877 03:A49F: 3B           	tsc
 10878 03:A4A0: 18           	clc
 10879 03:A4A1: 69 00 00     	adc	#L403
 10880 03:A4A4: 1B           	tcs
 10881 03:A4A5: 6B           	rtl
 10882                        	.endblock	3267
 10883             00000000   L403	equ	0
 10884             00000001   L404	equ	1
 10885 03:A4A6:              	ends
 10886                        	efunc
 10887                        	.endfunc	3267,1,0
 10888                        	.line	3267
 10889                        	data
 10890                        L199:
 10891 00:0416: 72 65 67 5F  	db	$72,$65,$67,$5F,$63,$6D,$64,$5F,$69,$6E,
                    $66,$6F,$2E,$73,$74
       00:041A: 63 6D 64 5F 
       00:041E: 69 6E 66 6F 
       00:0422: 2E 73 74 
 10892 00:0425: 3A 00 72 65  	db	$3A,$00,$72,$65,$67,$5F,$63,$6D,$64,$5F,
                    $69,$6E,$66,$6F,$2E
       00:0429: 67 5F 63 6D 
       00:042D: 64 5F 69 6E 
  Thu Dec  3 2020 22:25                                                Page 208


       00:0431: 66 6F 2E 
 10893 00:0434: 61 73 3A 00  	db	$61,$73,$3A,$00,$72,$65,$67,$5F,$63,$6D,
                    $64,$5F,$69,$6E,$66
       00:0438: 72 65 67 5F 
       00:043C: 63 6D 64 5F 
       00:0440: 69 6E 66 
 10894 00:0443: 6F 2E 65 72  	db	$6F,$2E,$65,$72,$3A,$00
       00:0447: 3A 00 
 10895 00:0449:              	ends
 10896                        ;
 10897                        ;//***********************************************
                    **************
 10898                        ;//
 10899                        ;// sub_select() - function used to select a drive
                    .
 10900                        ;//
 10901                        ;// Function to select a drive making sure that BS
                    Y=0 and DRQ=0.
 10902                        ;//
 10903                        ;//***********************************************
                    ***************
 10904                        ;
 10905                        ;static int sub_select( unsigned char dev )
 10906                        ;
 10907                        ;{
 10908                        	.line	3277
 10909                        	.line	3279
 10910                        	FXHDD
 10911                        	func
 10912                        	.function	3279
 10913                        ~~sub_select:
 10914                        	longa	on
 10915                        	longi	on
 10916 03:A4A6: 3B           	tsc
 10917 03:A4A7: 38           	sec
 10918 03:A4A8: E9 09 00     	sbc	#L408
 10919 03:A4AB: 1B           	tcs
 10920 03:A4AC: 0B           	phd
 10921 03:A4AD: 5B           	tcd
 10922             00000004   dev_0	set	4
 10923                        	.block	3279
 10924                        ;   unsigned char status;
 10925                        ;
 10926                        ;   // PAY ATTENTION HERE
 10927                        ;   // The caller may want to issue a command to a
                     device that doesn't
 10928                        ;   // exist (for example, Exec Dev Diag), so if w
                    e see this,
 10929                        ;   // just select that device, skip all status ch
                    ecking and return.
 10930                        ;   // We assume the caller knows what they are do
                    ing!
 10931                        ;
 10932                        ;   if ( reg_config_info[dev] < REG_CONFIG_TYPE_AT
                    A )
 10933             00000000   status_1	set	0
 10934                        	.sym	status,0,14,1,8
 10935                        	.sym	dev,4,14,6,8
  Thu Dec  3 2020 22:25                                                Page 209


 10936                        	.line	3288
 10937                        ;   {
 10938 03:A4AE: A5 0D        	lda	<L408+dev_0
 10939 03:A4B0: 29 FF 00     	and	#$ff
 10940 03:A4B3: 85 05        	sta	<R1
 10941 03:A4B5: A5 05        	lda	<R1
 10942 03:A4B7: 0A           	asl	A
 10943 03:A4B8: 85 01        	sta	<R0
 10944 03:A4BA: A6 01        	ldx	<R0
 10945 03:A4BC: BD xx xx     	lda	|~~reg_config_info,X
 10946 03:A4BF: 30 07        	bmi	L411
 10947 03:A4C1: 3A           	dea
 10948 03:A4C2: 3A           	dea
 10949 03:A4C3: 30 03        	bmi	L411
 10950 03:A4C5: 82 52 00     	brl	L10169
 10951                        L411:
 10952                        	.line	3289
 10953                        ;      // select the device and return
 10954                        ;
 10955                        ;      pio_outbyte( CB_DH, (unsigned char) ( dev ?
                     CB_DH_DEV1 : CB_DH_DEV0 ) );
 10956                        	.line	3292
 10957 03:A4C8: A5 0D        	lda	<L408+dev_0
 10958 03:A4CA: 29 FF 00     	and	#$ff
 10959 03:A4CD: D0 03        	bne	L413
 10960 03:A4CF: 82 05 00     	brl	L412
 10961                        L413:
 10962 03:A4D2: A9 10 00     	lda	#$10
 10963 03:A4D5: 80 03        	bra	L414
 10964                        L412:
 10965 03:A4D7: A9 00 00     	lda	#$0
 10966                        L414:
 10967 03:A4DA: 48           	pha
 10968 03:A4DB: F4 06 00     	pea	#<$6
 10969 03:A4DE: 22 E7 A7 03  	jsl	~~pio_outbyte
 10970                        ;      DELAY400NS;
 10971                        	.line	3293
 10972                        	.line	3293
 10973 03:A4E2: F4 08 00     	pea	#<$8
 10974 03:A4E5: 22 A8 A7 03  	jsl	~~pio_inbyte
 10975                        	.line	3293
 10976 03:A4E9: F4 08 00     	pea	#<$8
 10977 03:A4EC: 22 A8 A7 03  	jsl	~~pio_inbyte
 10978                        	.line	3293
 10979 03:A4F0: F4 08 00     	pea	#<$8
 10980 03:A4F3: 22 A8 A7 03  	jsl	~~pio_inbyte
 10981                        	.line	3293
 10982 03:A4F7: F4 08 00     	pea	#<$8
 10983 03:A4FA: 22 A8 A7 03  	jsl	~~pio_inbyte
 10984                        	.line	3293
 10985 03:A4FE: F4 08 00     	pea	#<$8
 10986 03:A501: 22 A8 A7 03  	jsl	~~pio_inbyte
 10987                        	.line	3293
 10988                        	.line	3293
 10989                        ;      return 0;
 10990                        	.line	3294
 10991 03:A505: A9 00 00     	lda	#$0
 10992                        L415:
  Thu Dec  3 2020 22:25                                                Page 210


 10993 03:A508: A8           	tay
 10994 03:A509: A5 0B        	lda	<L408+2
 10995 03:A50B: 85 0D        	sta	<L408+2+2
 10996 03:A50D: A5 0A        	lda	<L408+1
 10997 03:A50F: 85 0C        	sta	<L408+1+2
 10998 03:A511: 2B           	pld
 10999 03:A512: 3B           	tsc
 11000 03:A513: 18           	clc
 11001 03:A514: 69 0B 00     	adc	#L408+2
 11002 03:A517: 1B           	tcs
 11003 03:A518: 98           	tya
 11004 03:A519: 6B           	rtl
 11005                        ;   }
 11006                        	.line	3295
 11007                        ;
 11008                        ;   // The rest of this is the normal ATA stuff fo
                    r device selection
 11009                        ;   // and we don't expect the caller to be select
                    ing a device that
 11010                        ;   // does not exist.
 11011                        ;   // We don't know which drive is currently sele
                    cted but we should
 11012                        ;   // wait BSY=0 and DRQ=0. Normally both BSY=0 a
                    nd DRQ=0
 11013                        ;   // unless something is very wrong!
 11014                        ;
 11015                        ;   while ( 1 )
 11016                        L10169:
 11017                        	.line	3304
 11018                        L10170:
 11019                        ;   {
 11020                        	.line	3305
 11021                        ;      status = pio_inbyte( CB_STAT );
 11022                        	.line	3306
 11023 03:A51A: F4 07 00     	pea	#<$7
 11024 03:A51D: 22 A8 A7 03  	jsl	~~pio_inbyte
 11025 03:A521: E2 20        	sep	#$20
 11026                        	longa	off
 11027 03:A523: 85 09        	sta	<L409+status_1
 11028 03:A525: C2 20        	rep	#$20
 11029                        	longa	on
 11030                        ;      if ( ( status & ( CB_STAT_BSY | CB_STAT_DRQ
                     ) ) == 0 )
 11031                        	.line	3307
 11032                        ;         break;
 11033 03:A527: E2 20        	sep	#$20
 11034                        	longa	off
 11035 03:A529: A5 09        	lda	<L409+status_1
 11036 03:A52B: 29 88        	and	#<$88
 11037 03:A52D: C2 20        	rep	#$20
 11038                        	longa	on
 11039 03:A52F: D0 03        	bne	L416
 11040 03:A531: 82 4A 00     	brl	L10171
 11041                        L416:
 11042                        ;      if ( tmr_chk_timeout() )
 11043                        	.line	3309
 11044                        ;      {
 11045 03:A534: 22 1F AD 03  	jsl	~~tmr_chk_timeout
  Thu Dec  3 2020 22:25                                                Page 211


 11046 03:A538: AA           	tax
 11047 03:A539: D0 03        	bne	L417
 11048 03:A53B: 82 3D 00     	brl	L10172
 11049                        L417:
 11050                        	.line	3310
 11051                        ;         reg_cmd_info.to = 1;
 11052                        	.line	3311
 11053 03:A53E: E2 20        	sep	#$20
 11054                        	longa	off
 11055 03:A540: A9 01        	lda	#$1
 11056 03:A542: 8D xx xx     	sta	|~~reg_cmd_info+32
 11057 03:A545: C2 20        	rep	#$20
 11058                        	longa	on
 11059                        ;         reg_cmd_info.ec = 11;
 11060                        	.line	3312
 11061 03:A547: E2 20        	sep	#$20
 11062                        	longa	off
 11063 03:A549: A9 0B        	lda	#$b
 11064 03:A54B: 8D xx xx     	sta	|~~reg_cmd_info+31
 11065 03:A54E: C2 20        	rep	#$20
 11066                        	longa	on
 11067                        ;         reg_cmd_info.st = status;
 11068                        	.line	3313
 11069 03:A550: E2 20        	sep	#$20
 11070                        	longa	off
 11071 03:A552: A5 09        	lda	<L409+status_1
 11072 03:A554: 8D xx xx     	sta	|~~reg_cmd_info+28
 11073 03:A557: C2 20        	rep	#$20
 11074                        	longa	on
 11075                        ;         reg_cmd_info.as = pio_inbyte( CB_ASTAT )
                    ;
 11076                        	.line	3314
 11077 03:A559: F4 08 00     	pea	#<$8
 11078 03:A55C: 22 A8 A7 03  	jsl	~~pio_inbyte
 11079 03:A560: E2 20        	sep	#$20
 11080                        	longa	off
 11081 03:A562: 8D xx xx     	sta	|~~reg_cmd_info+29
 11082 03:A565: C2 20        	rep	#$20
 11083                        	longa	on
 11084                        ;         reg_cmd_info.er = pio_inbyte( CB_ERR );
 11085                        	.line	3315
 11086 03:A567: F4 01 00     	pea	#<$1
 11087 03:A56A: 22 A8 A7 03  	jsl	~~pio_inbyte
 11088 03:A56E: E2 20        	sep	#$20
 11089                        	longa	off
 11090 03:A570: 8D xx xx     	sta	|~~reg_cmd_info+30
 11091 03:A573: C2 20        	rep	#$20
 11092                        	longa	on
 11093                        ;         return 1;
 11094                        	.line	3316
 11095 03:A575: A9 01 00     	lda	#$1
 11096 03:A578: 82 8D FF     	brl	L415
 11097                        ;      }
 11098                        	.line	3317
 11099                        ;   }
 11100                        L10172:
 11101                        	.line	3318
 11102 03:A57B: 82 9C FF     	brl	L10170
  Thu Dec  3 2020 22:25                                                Page 212


 11103                        L10171:
 11104                        ;
 11105                        ;   // Here we select the drive we really want to 
                    work with by
 11106                        ;   // setting the DEV bit in the Drive/Head regis
                    ter.
 11107                        ;
 11108                        ;   pio_outbyte( CB_DH, (unsigned char) ( dev ? CB
                    _DH_DEV1 : CB_DH_DEV0 ) );
 11109                        	.line	3323
 11110 03:A57E: A5 0D        	lda	<L408+dev_0
 11111 03:A580: 29 FF 00     	and	#$ff
 11112 03:A583: D0 03        	bne	L419
 11113 03:A585: 82 05 00     	brl	L418
 11114                        L419:
 11115 03:A588: A9 10 00     	lda	#$10
 11116 03:A58B: 80 03        	bra	L420
 11117                        L418:
 11118 03:A58D: A9 00 00     	lda	#$0
 11119                        L420:
 11120 03:A590: 48           	pha
 11121 03:A591: F4 06 00     	pea	#<$6
 11122 03:A594: 22 E7 A7 03  	jsl	~~pio_outbyte
 11123                        ;   DELAY400NS;
 11124                        	.line	3324
 11125                        	.line	3324
 11126 03:A598: F4 08 00     	pea	#<$8
 11127 03:A59B: 22 A8 A7 03  	jsl	~~pio_inbyte
 11128                        	.line	3324
 11129 03:A59F: F4 08 00     	pea	#<$8
 11130 03:A5A2: 22 A8 A7 03  	jsl	~~pio_inbyte
 11131                        	.line	3324
 11132 03:A5A6: F4 08 00     	pea	#<$8
 11133 03:A5A9: 22 A8 A7 03  	jsl	~~pio_inbyte
 11134                        	.line	3324
 11135 03:A5AD: F4 08 00     	pea	#<$8
 11136 03:A5B0: 22 A8 A7 03  	jsl	~~pio_inbyte
 11137                        	.line	3324
 11138 03:A5B4: F4 08 00     	pea	#<$8
 11139 03:A5B7: 22 A8 A7 03  	jsl	~~pio_inbyte
 11140                        	.line	3324
 11141                        	.line	3324
 11142                        ;
 11143                        ;   // Wait for the selected device to have BSY=0 
                    and DRQ=0.
 11144                        ;   // Normally the drive should be in this state 
                    unless
 11145                        ;   // something is very wrong (or initial power u
                    p is still in
 11146                        ;   // progress).
 11147                        ;
 11148                        ;   while ( 1 )
 11149                        	.line	3331
 11150                        L10173:
 11151                        ;   {
 11152                        	.line	3332
 11153                        ;      status = pio_inbyte( CB_STAT );
 11154                        	.line	3333
  Thu Dec  3 2020 22:25                                                Page 213


 11155 03:A5BB: F4 07 00     	pea	#<$7
 11156 03:A5BE: 22 A8 A7 03  	jsl	~~pio_inbyte
 11157 03:A5C2: E2 20        	sep	#$20
 11158                        	longa	off
 11159 03:A5C4: 85 09        	sta	<L409+status_1
 11160 03:A5C6: C2 20        	rep	#$20
 11161                        	longa	on
 11162                        ;      if ( ( status & ( CB_STAT_BSY | CB_STAT_DRQ
                     ) ) == 0 )
 11163                        	.line	3334
 11164                        ;         break;
 11165 03:A5C8: E2 20        	sep	#$20
 11166                        	longa	off
 11167 03:A5CA: A5 09        	lda	<L409+status_1
 11168 03:A5CC: 29 88        	and	#<$88
 11169 03:A5CE: C2 20        	rep	#$20
 11170                        	longa	on
 11171 03:A5D0: D0 03        	bne	L421
 11172 03:A5D2: 82 4A 00     	brl	L10174
 11173                        L421:
 11174                        ;      if ( tmr_chk_timeout() )
 11175                        	.line	3336
 11176                        ;      {
 11177 03:A5D5: 22 1F AD 03  	jsl	~~tmr_chk_timeout
 11178 03:A5D9: AA           	tax
 11179 03:A5DA: D0 03        	bne	L422
 11180 03:A5DC: 82 3D 00     	brl	L10175
 11181                        L422:
 11182                        	.line	3337
 11183                        ;         reg_cmd_info.to = 1;
 11184                        	.line	3338
 11185 03:A5DF: E2 20        	sep	#$20
 11186                        	longa	off
 11187 03:A5E1: A9 01        	lda	#$1
 11188 03:A5E3: 8D xx xx     	sta	|~~reg_cmd_info+32
 11189 03:A5E6: C2 20        	rep	#$20
 11190                        	longa	on
 11191                        ;         reg_cmd_info.ec = 12;
 11192                        	.line	3339
 11193 03:A5E8: E2 20        	sep	#$20
 11194                        	longa	off
 11195 03:A5EA: A9 0C        	lda	#$c
 11196 03:A5EC: 8D xx xx     	sta	|~~reg_cmd_info+31
 11197 03:A5EF: C2 20        	rep	#$20
 11198                        	longa	on
 11199                        ;         reg_cmd_info.st = status;
 11200                        	.line	3340
 11201 03:A5F1: E2 20        	sep	#$20
 11202                        	longa	off
 11203 03:A5F3: A5 09        	lda	<L409+status_1
 11204 03:A5F5: 8D xx xx     	sta	|~~reg_cmd_info+28
 11205 03:A5F8: C2 20        	rep	#$20
 11206                        	longa	on
 11207                        ;         reg_cmd_info.as = pio_inbyte( CB_ASTAT )
                    ;
 11208                        	.line	3341
 11209 03:A5FA: F4 08 00     	pea	#<$8
 11210 03:A5FD: 22 A8 A7 03  	jsl	~~pio_inbyte
  Thu Dec  3 2020 22:25                                                Page 214


 11211 03:A601: E2 20        	sep	#$20
 11212                        	longa	off
 11213 03:A603: 8D xx xx     	sta	|~~reg_cmd_info+29
 11214 03:A606: C2 20        	rep	#$20
 11215                        	longa	on
 11216                        ;         reg_cmd_info.er = pio_inbyte( CB_ERR );
 11217                        	.line	3342
 11218 03:A608: F4 01 00     	pea	#<$1
 11219 03:A60B: 22 A8 A7 03  	jsl	~~pio_inbyte
 11220 03:A60F: E2 20        	sep	#$20
 11221                        	longa	off
 11222 03:A611: 8D xx xx     	sta	|~~reg_cmd_info+30
 11223 03:A614: C2 20        	rep	#$20
 11224                        	longa	on
 11225                        ;         return 1;
 11226                        	.line	3343
 11227 03:A616: A9 01 00     	lda	#$1
 11228 03:A619: 82 EC FE     	brl	L415
 11229                        ;      }
 11230                        	.line	3344
 11231                        ;   }
 11232                        L10175:
 11233                        	.line	3345
 11234 03:A61C: 82 9C FF     	brl	L10173
 11235                        L10174:
 11236                        ;
 11237                        ;   // All done.  The return values of this functi
                    on are described in
 11238                        ;   // ATAIO.H.
 11239                        ;
 11240                        ;   if ( reg_cmd_info.ec )
 11241                        	.line	3350
 11242                        ;      return 1;
 11243 03:A61F: AD xx xx     	lda	|~~reg_cmd_info+31
 11244 03:A622: 29 FF 00     	and	#$ff
 11245 03:A625: D0 03        	bne	L423
 11246 03:A627: 82 06 00     	brl	L10176
 11247                        L423:
 11248                        	.line	3351
 11249 03:A62A: A9 01 00     	lda	#$1
 11250 03:A62D: 82 D8 FE     	brl	L415
 11251                        ;   return 0;
 11252                        L10176:
 11253                        	.line	3352
 11254 03:A630: A9 00 00     	lda	#$0
 11255 03:A633: 82 D2 FE     	brl	L415
 11256                        ;}
 11257                        	.line	3353
 11258                        	.endblock	3353
 11259             00000009   L408	equ	9
 11260             00000009   L409	equ	9
 11261 03:A636:              	ends
 11262                        	efunc
 11263                        	.endfunc	3353,9,9
 11264                        	.line	3353
 11265                        ;
 11266                        ;//***********************************************
                    **************
  Thu Dec  3 2020 22:25                                                Page 215


 11267                        ;//
 11268                        ;// sub_wait_poll() - wait for interrupt or poll f
                    or BSY=0
 11269                        ;//
 11270                        ;//***********************************************
                    **************
 11271                        ;
 11272                        ;static void sub_wait_poll( unsigned char we, unsi
                    gned char pe )
 11273                        ;
 11274                        ;{
 11275                        	.line	3361
 11276                        	.line	3363
 11277                        	FXHDD
 11278                        	func
 11279                        	.function	3363
 11280                        ~~sub_wait_poll:
 11281                        	longa	on
 11282                        	longi	on
 11283 03:A636: 3B           	tsc
 11284 03:A637: 38           	sec
 11285 03:A638: E9 01 00     	sbc	#L424
 11286 03:A63B: 1B           	tcs
 11287 03:A63C: 0B           	phd
 11288 03:A63D: 5B           	tcd
 11289             00000004   we_0	set	4
 11290             00000006   pe_0	set	6
 11291                        	.block	3363
 11292                        ;   unsigned char status;
 11293                        ;
 11294                        ;   // Wait for interrupt -or- wait for not BUSY -
                    or- wait for time out.
 11295                        ;
 11296                        ;   if ( we && int_use_intr_flag )
 11297             00000000   status_1	set	0
 11298                        	.sym	status,0,14,1,8
 11299                        	.sym	we,4,14,6,8
 11300                        	.sym	pe,6,14,6,8
 11301                        	.line	3368
 11302                        ;   {
 11303 03:A63E: A5 05        	lda	<L424+we_0
 11304 03:A640: 29 FF 00     	and	#$ff
 11305 03:A643: D0 03        	bne	L427
 11306 03:A645: 82 2A 00     	brl	L10177
 11307                        L427:
 11308 03:A648: AD xx xx     	lda	|~~int_use_intr_flag
 11309 03:A64B: 29 FF 00     	and	#$ff
 11310 03:A64E: D0 03        	bne	L428
 11311 03:A650: 82 1F 00     	brl	L10177
 11312                        L428:
 11313                        	.line	3369
 11314                        ;      if ( SYSTEM_WAIT_INTR_OR_TIMEOUT() )    // 
                    time out ?
 11315                        	.line	3370
 11316                        ;      {
 11317 03:A653: 22 84 AD 03  	jsl	~~SYSTEM_WAIT_INTR_OR_TIMEOUT
 11318 03:A657: AA           	tax
 11319 03:A658: D0 03        	bne	L429
  Thu Dec  3 2020 22:25                                                Page 216


 11320 03:A65A: 82 12 00     	brl	L10178
 11321                        L429:
 11322                        	.line	3371
 11323                        ;         reg_cmd_info.to = 1;
 11324                        	.line	3372
 11325 03:A65D: E2 20        	sep	#$20
 11326                        	longa	off
 11327 03:A65F: A9 01        	lda	#$1
 11328 03:A661: 8D xx xx     	sta	|~~reg_cmd_info+32
 11329 03:A664: C2 20        	rep	#$20
 11330                        	longa	on
 11331                        ;         reg_cmd_info.ec = we;
 11332                        	.line	3373
 11333 03:A666: E2 20        	sep	#$20
 11334                        	longa	off
 11335 03:A668: A5 05        	lda	<L424+we_0
 11336 03:A66A: 8D xx xx     	sta	|~~reg_cmd_info+31
 11337 03:A66D: C2 20        	rep	#$20
 11338                        	longa	on
 11339                        ;      }
 11340                        	.line	3374
 11341                        ;   }
 11342                        L10178:
 11343                        	.line	3375
 11344                        ;   else
 11345 03:A66F: 82 3C 00     	brl	L10179
 11346                        L10177:
 11347                        ;   {
 11348                        	.line	3377
 11349                        ;      while ( 1 )
 11350                        	.line	3378
 11351                        L10180:
 11352                        ;      {
 11353                        	.line	3379
 11354                        ;         status = pio_inbyte( CB_ASTAT );       /
                    / poll for not busy
 11355                        	.line	3380
 11356 03:A672: F4 08 00     	pea	#<$8
 11357 03:A675: 22 A8 A7 03  	jsl	~~pio_inbyte
 11358 03:A679: E2 20        	sep	#$20
 11359                        	longa	off
 11360 03:A67B: 85 01        	sta	<L425+status_1
 11361 03:A67D: C2 20        	rep	#$20
 11362                        	longa	on
 11363                        ;         if ( ( status & CB_STAT_BSY ) == 0 )
 11364                        	.line	3381
 11365                        ;            break;
 11366 03:A67F: E2 20        	sep	#$20
 11367                        	longa	off
 11368 03:A681: A5 01        	lda	<L425+status_1
 11369 03:A683: 29 80        	and	#<$80
 11370 03:A685: C2 20        	rep	#$20
 11371                        	longa	on
 11372 03:A687: D0 03        	bne	L430
 11373 03:A689: 82 22 00     	brl	L10181
 11374                        L430:
 11375                        ;         if ( tmr_chk_timeout() )               /
                    / time out yet ?
  Thu Dec  3 2020 22:25                                                Page 217


 11376                        	.line	3383
 11377                        ;         {
 11378 03:A68C: 22 1F AD 03  	jsl	~~tmr_chk_timeout
 11379 03:A690: AA           	tax
 11380 03:A691: D0 03        	bne	L431
 11381 03:A693: 82 15 00     	brl	L10182
 11382                        L431:
 11383                        	.line	3384
 11384                        ;            reg_cmd_info.to = 1;
 11385                        	.line	3385
 11386 03:A696: E2 20        	sep	#$20
 11387                        	longa	off
 11388 03:A698: A9 01        	lda	#$1
 11389 03:A69A: 8D xx xx     	sta	|~~reg_cmd_info+32
 11390 03:A69D: C2 20        	rep	#$20
 11391                        	longa	on
 11392                        ;            reg_cmd_info.ec = pe;
 11393                        	.line	3386
 11394 03:A69F: E2 20        	sep	#$20
 11395                        	longa	off
 11396 03:A6A1: A5 07        	lda	<L424+pe_0
 11397 03:A6A3: 8D xx xx     	sta	|~~reg_cmd_info+31
 11398 03:A6A6: C2 20        	rep	#$20
 11399                        	longa	on
 11400                        ;            break;
 11401                        	.line	3387
 11402 03:A6A8: 82 03 00     	brl	L10181
 11403                        ;         }
 11404                        	.line	3388
 11405                        ;      }
 11406                        L10182:
 11407                        	.line	3389
 11408 03:A6AB: 82 C4 FF     	brl	L10180
 11409                        L10181:
 11410                        ;   }
 11411                        	.line	3390
 11412                        L10179:
 11413                        ;}
 11414                        	.line	3391
 11415                        L432:
 11416 03:A6AE: A5 03        	lda	<L424+2
 11417 03:A6B0: 85 07        	sta	<L424+2+4
 11418 03:A6B2: A5 02        	lda	<L424+1
 11419 03:A6B4: 85 06        	sta	<L424+1+4
 11420 03:A6B6: 2B           	pld
 11421 03:A6B7: 3B           	tsc
 11422 03:A6B8: 18           	clc
 11423 03:A6B9: 69 05 00     	adc	#L424+4
 11424 03:A6BC: 1B           	tcs
 11425 03:A6BD: 6B           	rtl
 11426                        	.endblock	3391
 11427             00000001   L424	equ	1
 11428             00000001   L425	equ	1
 11429 03:A6BE:              	ends
 11430                        	efunc
 11431                        	.endfunc	3391,1,1
 11432                        	.line	3391
 11433                        ;
  Thu Dec  3 2020 22:25                                                Page 218


 11434                        ;//***********************************************
                    ************
 11435                        ;//
 11436                        ;// functions used to read/write the BMIDE registe
                    rs
 11437                        ;//
 11438                        ;//***********************************************
                    ************
 11439                        ;
 11440                        ;static unsigned char pio_readBusMstrCmd( void )
 11441                        ;
 11442                        ;{
 11443                        	.line	3399
 11444                        	.line	3401
 11445                        	FXHDD
 11446                        	func
 11447                        	.function	3401
 11448                        ~~pio_readBusMstrCmd:
 11449                        	longa	on
 11450                        	longi	on
 11451 03:A6BE: 3B           	tsc
 11452 03:A6BF: 38           	sec
 11453 03:A6C0: E9 05 00     	sbc	#L433
 11454 03:A6C3: 1B           	tcs
 11455 03:A6C4: 0B           	phd
 11456 03:A6C5: 5B           	tcd
 11457                        	.block	3401
 11458                        ;   unsigned char x;
 11459                        ;
 11460                        ;   if ( ! pio_bmide_base_addr )
 11461             00000000   x_1	set	0
 11462                        	.sym	x,0,14,1,8
 11463                        	.line	3404
 11464                        ;      return 0;
 11465 03:A6C6: AD xx xx     	lda	|~~pio_bmide_base_addr
 11466 03:A6C9: 0D xx xx     	ora	|~~pio_bmide_base_addr+2
 11467 03:A6CC: F0 03        	beq	L436
 11468 03:A6CE: 82 0D 00     	brl	L10183
 11469                        L436:
 11470                        	.line	3405
 11471 03:A6D1: A9 00 00     	lda	#$0
 11472                        L437:
 11473 03:A6D4: A8           	tay
 11474 03:A6D5: 2B           	pld
 11475 03:A6D6: 3B           	tsc
 11476 03:A6D7: 18           	clc
 11477 03:A6D8: 69 05 00     	adc	#L433
 11478 03:A6DB: 1B           	tcs
 11479 03:A6DC: 98           	tya
 11480 03:A6DD: 6B           	rtl
 11481                        ;   x = * (pio_bmide_base_addr + BM_COMMAND_REG );
 11482                        L10183:
 11483                        	.line	3406
 11484 03:A6DE: AD xx xx     	lda	|~~pio_bmide_base_addr
 11485 03:A6E1: 85 01        	sta	<R0
 11486 03:A6E3: AD xx xx     	lda	|~~pio_bmide_base_addr+2
 11487 03:A6E6: 85 03        	sta	<R0+2
 11488 03:A6E8: E2 20        	sep	#$20
  Thu Dec  3 2020 22:25                                                Page 219


 11489                        	longa	off
 11490 03:A6EA: A7 01        	lda	[<R0]
 11491 03:A6EC: 85 05        	sta	<L434+x_1
 11492 03:A6EE: C2 20        	rep	#$20
 11493                        	longa	on
 11494                        ;   return x;
 11495                        	.line	3407
 11496 03:A6F0: A5 05        	lda	<L434+x_1
 11497 03:A6F2: 29 FF 00     	and	#$ff
 11498 03:A6F5: 82 DC FF     	brl	L437
 11499                        ;}
 11500                        	.line	3408
 11501                        	.endblock	3408
 11502             00000005   L433	equ	5
 11503             00000005   L434	equ	5
 11504 03:A6F8:              	ends
 11505                        	efunc
 11506                        	.endfunc	3408,5,5
 11507                        	.line	3408
 11508                        ;
 11509                        ;
 11510                        ;static unsigned char pio_readBusMstrStatus( void 
                    )
 11511                        ;
 11512                        ;{
 11513                        	.line	3411
 11514                        	.line	3413
 11515                        	FXHDD
 11516                        	func
 11517                        	.function	3413
 11518                        ~~pio_readBusMstrStatus:
 11519                        	longa	on
 11520                        	longi	on
 11521 03:A6F8: 3B           	tsc
 11522 03:A6F9: 38           	sec
 11523 03:A6FA: E9 05 00     	sbc	#L438
 11524 03:A6FD: 1B           	tcs
 11525 03:A6FE: 0B           	phd
 11526 03:A6FF: 5B           	tcd
 11527                        	.block	3413
 11528                        ;   unsigned char x;
 11529                        ;
 11530                        ;   if ( ! pio_bmide_base_addr )
 11531             00000000   x_1	set	0
 11532                        	.sym	x,0,14,1,8
 11533                        	.line	3416
 11534                        ;      return 0;
 11535 03:A700: AD xx xx     	lda	|~~pio_bmide_base_addr
 11536 03:A703: 0D xx xx     	ora	|~~pio_bmide_base_addr+2
 11537 03:A706: F0 03        	beq	L441
 11538 03:A708: 82 0D 00     	brl	L10184
 11539                        L441:
 11540                        	.line	3417
 11541 03:A70B: A9 00 00     	lda	#$0
 11542                        L442:
 11543 03:A70E: A8           	tay
 11544 03:A70F: 2B           	pld
 11545 03:A710: 3B           	tsc
  Thu Dec  3 2020 22:25                                                Page 220


 11546 03:A711: 18           	clc
 11547 03:A712: 69 05 00     	adc	#L438
 11548 03:A715: 1B           	tcs
 11549 03:A716: 98           	tya
 11550 03:A717: 6B           	rtl
 11551                        ;   x = * ( pio_bmide_base_addr + BM_STATUS_REG );
 11552                        L10184:
 11553                        	.line	3418
 11554 03:A718: AD xx xx     	lda	|~~pio_bmide_base_addr
 11555 03:A71B: 85 01        	sta	<R0
 11556 03:A71D: AD xx xx     	lda	|~~pio_bmide_base_addr+2
 11557 03:A720: 85 03        	sta	<R0+2
 11558 03:A722: E2 20        	sep	#$20
 11559                        	longa	off
 11560 03:A724: A0 02 00     	ldy	#$2
 11561 03:A727: B7 01        	lda	[<R0],Y
 11562 03:A729: 85 05        	sta	<L439+x_1
 11563 03:A72B: C2 20        	rep	#$20
 11564                        	longa	on
 11565                        ;   return x;
 11566                        	.line	3419
 11567 03:A72D: A5 05        	lda	<L439+x_1
 11568 03:A72F: 29 FF 00     	and	#$ff
 11569 03:A732: 82 D9 FF     	brl	L442
 11570                        ;}
 11571                        	.line	3420
 11572                        	.endblock	3420
 11573             00000005   L438	equ	5
 11574             00000005   L439	equ	5
 11575 03:A735:              	ends
 11576                        	efunc
 11577                        	.endfunc	3420,5,5
 11578                        	.line	3420
 11579                        ;
 11580                        ;
 11581                        ;static void pio_writeBusMstrCmd( unsigned char x 
                    )
 11582                        ;
 11583                        ;{
 11584                        	.line	3423
 11585                        	.line	3425
 11586                        	FXHDD
 11587                        	func
 11588                        	.function	3425
 11589                        ~~pio_writeBusMstrCmd:
 11590                        	longa	on
 11591                        	longi	on
 11592 03:A735: 3B           	tsc
 11593 03:A736: 38           	sec
 11594 03:A737: E9 04 00     	sbc	#L443
 11595 03:A73A: 1B           	tcs
 11596 03:A73B: 0B           	phd
 11597 03:A73C: 5B           	tcd
 11598             00000004   x_0	set	4
 11599                        	.block	3425
 11600                        ;
 11601                        ;   if ( ! pio_bmide_base_addr )
 11602                        	.sym	x,4,14,6,8
  Thu Dec  3 2020 22:25                                                Page 221


 11603                        	.line	3427
 11604                        ;      return;
 11605 03:A73D: AD xx xx     	lda	|~~pio_bmide_base_addr
 11606 03:A740: 0D xx xx     	ora	|~~pio_bmide_base_addr+2
 11607 03:A743: F0 03        	beq	L446
 11608 03:A745: 82 10 00     	brl	L10185
 11609                        L446:
 11610                        	.line	3428
 11611                        L447:
 11612 03:A748: A5 06        	lda	<L443+2
 11613 03:A74A: 85 08        	sta	<L443+2+2
 11614 03:A74C: A5 05        	lda	<L443+1
 11615 03:A74E: 85 07        	sta	<L443+1+2
 11616 03:A750: 2B           	pld
 11617 03:A751: 3B           	tsc
 11618 03:A752: 18           	clc
 11619 03:A753: 69 06 00     	adc	#L443+2
 11620 03:A756: 1B           	tcs
 11621 03:A757: 6B           	rtl
 11622                        ;   * ( pio_bmide_base_addr + BM_COMMAND_REG ) = x
                    ;
 11623                        L10185:
 11624                        	.line	3429
 11625 03:A758: AD xx xx     	lda	|~~pio_bmide_base_addr
 11626 03:A75B: 85 01        	sta	<R0
 11627 03:A75D: AD xx xx     	lda	|~~pio_bmide_base_addr+2
 11628 03:A760: 85 03        	sta	<R0+2
 11629 03:A762: E2 20        	sep	#$20
 11630                        	longa	off
 11631 03:A764: A5 08        	lda	<L443+x_0
 11632 03:A766: 87 01        	sta	[<R0]
 11633 03:A768: C2 20        	rep	#$20
 11634                        	longa	on
 11635                        ;}
 11636                        	.line	3430
 11637 03:A76A: 82 DB FF     	brl	L447
 11638                        	.endblock	3430
 11639             00000004   L443	equ	4
 11640             00000005   L444	equ	5
 11641 03:A76D:              	ends
 11642                        	efunc
 11643                        	.endfunc	3430,5,4
 11644                        	.line	3430
 11645                        ;
 11646                        ;
 11647                        ;static void pio_writeBusMstrStatus( unsigned char
                     x )
 11648                        ;
 11649                        ;{
 11650                        	.line	3433
 11651                        	.line	3435
 11652                        	FXHDD
 11653                        	func
 11654                        	.function	3435
 11655                        ~~pio_writeBusMstrStatus:
 11656                        	longa	on
 11657                        	longi	on
 11658 03:A76D: 3B           	tsc
  Thu Dec  3 2020 22:25                                                Page 222


 11659 03:A76E: 38           	sec
 11660 03:A76F: E9 04 00     	sbc	#L448
 11661 03:A772: 1B           	tcs
 11662 03:A773: 0B           	phd
 11663 03:A774: 5B           	tcd
 11664             00000004   x_0	set	4
 11665                        	.block	3435
 11666                        ;
 11667                        ;   if ( ! pio_bmide_base_addr )
 11668                        	.sym	x,4,14,6,8
 11669                        	.line	3437
 11670                        ;      return;
 11671 03:A775: AD xx xx     	lda	|~~pio_bmide_base_addr
 11672 03:A778: 0D xx xx     	ora	|~~pio_bmide_base_addr+2
 11673 03:A77B: F0 03        	beq	L451
 11674 03:A77D: 82 10 00     	brl	L10186
 11675                        L451:
 11676                        	.line	3438
 11677                        L452:
 11678 03:A780: A5 06        	lda	<L448+2
 11679 03:A782: 85 08        	sta	<L448+2+2
 11680 03:A784: A5 05        	lda	<L448+1
 11681 03:A786: 85 07        	sta	<L448+1+2
 11682 03:A788: 2B           	pld
 11683 03:A789: 3B           	tsc
 11684 03:A78A: 18           	clc
 11685 03:A78B: 69 06 00     	adc	#L448+2
 11686 03:A78E: 1B           	tcs
 11687 03:A78F: 6B           	rtl
 11688                        ;   * ( pio_bmide_base_addr + BM_STATUS_REG ) =  x
                    ;
 11689                        L10186:
 11690                        	.line	3439
 11691 03:A790: AD xx xx     	lda	|~~pio_bmide_base_addr
 11692 03:A793: 85 01        	sta	<R0
 11693 03:A795: AD xx xx     	lda	|~~pio_bmide_base_addr+2
 11694 03:A798: 85 03        	sta	<R0+2
 11695 03:A79A: E2 20        	sep	#$20
 11696                        	longa	off
 11697 03:A79C: A5 08        	lda	<L448+x_0
 11698 03:A79E: A0 02 00     	ldy	#$2
 11699 03:A7A1: 97 01        	sta	[<R0],Y
 11700 03:A7A3: C2 20        	rep	#$20
 11701                        	longa	on
 11702                        ;}
 11703                        	.line	3440
 11704 03:A7A5: 82 D8 FF     	brl	L452
 11705                        	.endblock	3440
 11706             00000004   L448	equ	4
 11707             00000005   L449	equ	5
 11708 03:A7A8:              	ends
 11709                        	efunc
 11710                        	.endfunc	3440,5,4
 11711                        	.line	3440
 11712                        ;
 11713                        ;//***********************************************
                    **************
 11714                        ;//
  Thu Dec  3 2020 22:25                                                Page 223


 11715                        ;// These functions do basic IN/OUT of byte and wo
                    rd values:
 11716                        ;//
 11717                        ;//    pio_inbyte()
 11718                        ;//    pio_outbyte()
 11719                        ;//    pio_inword()
 11720                        ;//    pio_outword()
 11721                        ;//
 11722                        ;//***********************************************
                    **************
 11723                        ;
 11724                        ;static unsigned char pio_inbyte( unsigned char ad
                    dr )
 11725                        ;
 11726                        ;{
 11727                        	.line	3453
 11728                        	.line	3455
 11729                        	FXHDD
 11730                        	func
 11731                        	.function	3455
 11732                        ~~pio_inbyte:
 11733                        	longa	on
 11734                        	longi	on
 11735 03:A7A8: 3B           	tsc
 11736 03:A7A9: 38           	sec
 11737 03:A7AA: E9 08 00     	sbc	#L453
 11738 03:A7AD: 1B           	tcs
 11739 03:A7AE: 0B           	phd
 11740 03:A7AF: 5B           	tcd
 11741             00000004   addr_0	set	4
 11742                        	.block	3455
 11743                        ;
 11744                        ;   //!!! read an 8-bit ATA register
 11745                        ;
 11746                        ;   return * pio_reg_addrs[ addr ];
 11747                        	.sym	addr,4,14,6,8
 11748                        	.line	3459
 11749 03:A7B0: A5 0C        	lda	<L453+addr_0
 11750 03:A7B2: 29 FF 00     	and	#$ff
 11751 03:A7B5: 85 05        	sta	<R1
 11752 03:A7B7: A5 05        	lda	<R1
 11753 03:A7B9: 0A           	asl	A
 11754 03:A7BA: 0A           	asl	A
 11755 03:A7BB: 85 01        	sta	<R0
 11756 03:A7BD: 18           	clc
 11757 03:A7BE: A9 xx xx     	lda	#<~~pio_reg_addrs
 11758 03:A7C1: 65 01        	adc	<R0
 11759 03:A7C3: 85 05        	sta	<R1
 11760 03:A7C5: B2 05        	lda	(<R1)
 11761 03:A7C7: 85 01        	sta	<R0
 11762 03:A7C9: A0 02 00     	ldy	#$2
 11763 03:A7CC: B1 05        	lda	(<R1),Y
 11764 03:A7CE: 85 03        	sta	<R0+2
 11765 03:A7D0: A7 01        	lda	[<R0]
 11766 03:A7D2: 29 FF 00     	and	#$ff
 11767                        L456:
 11768 03:A7D5: A8           	tay
 11769 03:A7D6: A5 0A        	lda	<L453+2
  Thu Dec  3 2020 22:25                                                Page 224


 11770 03:A7D8: 85 0C        	sta	<L453+2+2
 11771 03:A7DA: A5 09        	lda	<L453+1
 11772 03:A7DC: 85 0B        	sta	<L453+1+2
 11773 03:A7DE: 2B           	pld
 11774 03:A7DF: 3B           	tsc
 11775 03:A7E0: 18           	clc
 11776 03:A7E1: 69 0A 00     	adc	#L453+2
 11777 03:A7E4: 1B           	tcs
 11778 03:A7E5: 98           	tya
 11779 03:A7E6: 6B           	rtl
 11780                        ;}
 11781                        	.line	3460
 11782                        	.endblock	3460
 11783             00000008   L453	equ	8
 11784             00000009   L454	equ	9
 11785 03:A7E7:              	ends
 11786                        	efunc
 11787                        	.endfunc	3460,9,8
 11788                        	.line	3460
 11789                        ;
 11790                        ;//***********************************************
                    **************
 11791                        ;
 11792                        ;static void pio_outbyte( int addr, unsigned char 
                    data )
 11793                        ;
 11794                        ;{
 11795                        	.line	3464
 11796                        	.line	3466
 11797                        	FXHDD
 11798                        	func
 11799                        	.function	3466
 11800                        ~~pio_outbyte:
 11801                        	longa	on
 11802                        	longi	on
 11803 03:A7E7: 3B           	tsc
 11804 03:A7E8: 38           	sec
 11805 03:A7E9: E9 08 00     	sbc	#L457
 11806 03:A7EC: 1B           	tcs
 11807 03:A7ED: 0B           	phd
 11808 03:A7EE: 5B           	tcd
 11809             00000004   addr_0	set	4
 11810             00000006   data_0	set	6
 11811                        	.block	3466
 11812                        ;
 11813                        ;   //!!! write an 8-bit ATA register
 11814                        ;
 11815                        ;   * pio_reg_addrs[ addr ] = data;
 11816                        	.sym	addr,4,5,6,16
 11817                        	.sym	data,6,14,6,8
 11818                        	.line	3470
 11819 03:A7EF: A5 0C        	lda	<L457+addr_0
 11820 03:A7F1: 0A           	asl	A
 11821 03:A7F2: 0A           	asl	A
 11822 03:A7F3: 85 01        	sta	<R0
 11823 03:A7F5: 18           	clc
 11824 03:A7F6: A9 xx xx     	lda	#<~~pio_reg_addrs
 11825 03:A7F9: 65 01        	adc	<R0
  Thu Dec  3 2020 22:25                                                Page 225


 11826 03:A7FB: 85 05        	sta	<R1
 11827 03:A7FD: B2 05        	lda	(<R1)
 11828 03:A7FF: 85 01        	sta	<R0
 11829 03:A801: A0 02 00     	ldy	#$2
 11830 03:A804: B1 05        	lda	(<R1),Y
 11831 03:A806: 85 03        	sta	<R0+2
 11832 03:A808: E2 20        	sep	#$20
 11833                        	longa	off
 11834 03:A80A: A5 0E        	lda	<L457+data_0
 11835 03:A80C: 87 01        	sta	[<R0]
 11836 03:A80E: C2 20        	rep	#$20
 11837                        	longa	on
 11838                        ;}
 11839                        	.line	3471
 11840                        L460:
 11841 03:A810: A5 0A        	lda	<L457+2
 11842 03:A812: 85 0E        	sta	<L457+2+4
 11843 03:A814: A5 09        	lda	<L457+1
 11844 03:A816: 85 0D        	sta	<L457+1+4
 11845 03:A818: 2B           	pld
 11846 03:A819: 3B           	tsc
 11847 03:A81A: 18           	clc
 11848 03:A81B: 69 0C 00     	adc	#L457+4
 11849 03:A81E: 1B           	tcs
 11850 03:A81F: 6B           	rtl
 11851                        	.endblock	3471
 11852             00000008   L457	equ	8
 11853             00000009   L458	equ	9
 11854 03:A820:              	ends
 11855                        	efunc
 11856                        	.endfunc	3471,9,8
 11857                        	.line	3471
 11858                        ;
 11859                        ;//***********************************************
                    **************
 11860                        ;
 11861                        ;static unsigned int pio_inword( unsigned char add
                    r )
 11862                        ;
 11863                        ;{
 11864                        	.line	3475
 11865                        	.line	3477
 11866                        	FXHDD
 11867                        	func
 11868                        	.function	3477
 11869                        ~~pio_inword:
 11870                        	longa	on
 11871                        	longi	on
 11872 03:A820: 3B           	tsc
 11873 03:A821: 38           	sec
 11874 03:A822: E9 08 00     	sbc	#L461
 11875 03:A825: 1B           	tcs
 11876 03:A826: 0B           	phd
 11877 03:A827: 5B           	tcd
 11878             00000004   addr_0	set	4
 11879                        	.block	3477
 11880                        ;
 11881                        ;   //!!! read an 8-bit ATA register (usually the 
  Thu Dec  3 2020 22:25                                                Page 226


                    ATA Data register)
 11882                        ;
 11883                        ;   return * ( (unsigned int *) pio_reg_addrs[ add
                    r ] );
 11884                        	.sym	addr,4,14,6,8
 11885                        	.line	3481
 11886 03:A828: A5 0C        	lda	<L461+addr_0
 11887 03:A82A: 29 FF 00     	and	#$ff
 11888 03:A82D: 85 05        	sta	<R1
 11889 03:A82F: A5 05        	lda	<R1
 11890 03:A831: 0A           	asl	A
 11891 03:A832: 0A           	asl	A
 11892 03:A833: 85 01        	sta	<R0
 11893 03:A835: 18           	clc
 11894 03:A836: A9 xx xx     	lda	#<~~pio_reg_addrs
 11895 03:A839: 65 01        	adc	<R0
 11896 03:A83B: 85 05        	sta	<R1
 11897 03:A83D: B2 05        	lda	(<R1)
 11898 03:A83F: 85 01        	sta	<R0
 11899 03:A841: A0 02 00     	ldy	#$2
 11900 03:A844: B1 05        	lda	(<R1),Y
 11901 03:A846: 85 03        	sta	<R0+2
 11902 03:A848: A7 01        	lda	[<R0]
 11903                        L464:
 11904 03:A84A: A8           	tay
 11905 03:A84B: A5 0A        	lda	<L461+2
 11906 03:A84D: 85 0C        	sta	<L461+2+2
 11907 03:A84F: A5 09        	lda	<L461+1
 11908 03:A851: 85 0B        	sta	<L461+1+2
 11909 03:A853: 2B           	pld
 11910 03:A854: 3B           	tsc
 11911 03:A855: 18           	clc
 11912 03:A856: 69 0A 00     	adc	#L461+2
 11913 03:A859: 1B           	tcs
 11914 03:A85A: 98           	tya
 11915 03:A85B: 6B           	rtl
 11916                        ;}
 11917                        	.line	3482
 11918                        	.endblock	3482
 11919             00000008   L461	equ	8
 11920             00000009   L462	equ	9
 11921 03:A85C:              	ends
 11922                        	efunc
 11923                        	.endfunc	3482,9,8
 11924                        	.line	3482
 11925                        ;
 11926                        ;//***********************************************
                    **************
 11927                        ;
 11928                        ;static void pio_outword( int addr, unsigned int d
                    ata )
 11929                        ;
 11930                        ;{
 11931                        	.line	3486
 11932                        	.line	3488
 11933                        	FXHDD
 11934                        	func
 11935                        	.function	3488
  Thu Dec  3 2020 22:25                                                Page 227


 11936                        ~~pio_outword:
 11937                        	longa	on
 11938                        	longi	on
 11939 03:A85C: 3B           	tsc
 11940 03:A85D: 38           	sec
 11941 03:A85E: E9 08 00     	sbc	#L465
 11942 03:A861: 1B           	tcs
 11943 03:A862: 0B           	phd
 11944 03:A863: 5B           	tcd
 11945             00000004   addr_0	set	4
 11946             00000006   data_0	set	6
 11947                        	.block	3488
 11948                        ;
 11949                        ;   //!!! Write an 8-bit ATA register (usually the
                     ATA Data register)
 11950                        ;
 11951                        ;   * ( (unsigned int *) pio_reg_addrs[ addr ] ) =
                     data;
 11952                        	.sym	addr,4,5,6,16
 11953                        	.sym	data,6,16,6,16
 11954                        	.line	3492
 11955 03:A864: A5 0C        	lda	<L465+addr_0
 11956 03:A866: 0A           	asl	A
 11957 03:A867: 0A           	asl	A
 11958 03:A868: 85 01        	sta	<R0
 11959 03:A86A: 18           	clc
 11960 03:A86B: A9 xx xx     	lda	#<~~pio_reg_addrs
 11961 03:A86E: 65 01        	adc	<R0
 11962 03:A870: 85 05        	sta	<R1
 11963 03:A872: B2 05        	lda	(<R1)
 11964 03:A874: 85 01        	sta	<R0
 11965 03:A876: A0 02 00     	ldy	#$2
 11966 03:A879: B1 05        	lda	(<R1),Y
 11967 03:A87B: 85 03        	sta	<R0+2
 11968 03:A87D: A5 0E        	lda	<L465+data_0
 11969 03:A87F: 87 01        	sta	[<R0]
 11970                        ;}
 11971                        	.line	3493
 11972                        L468:
 11973 03:A881: A5 0A        	lda	<L465+2
 11974 03:A883: 85 0E        	sta	<L465+2+4
 11975 03:A885: A5 09        	lda	<L465+1
 11976 03:A887: 85 0D        	sta	<L465+1+4
 11977 03:A889: 2B           	pld
 11978 03:A88A: 3B           	tsc
 11979 03:A88B: 18           	clc
 11980 03:A88C: 69 0C 00     	adc	#L465+4
 11981 03:A88F: 1B           	tcs
 11982 03:A890: 6B           	rtl
 11983                        	.endblock	3493
 11984             00000008   L465	equ	8
 11985             00000009   L466	equ	9
 11986 03:A891:              	ends
 11987                        	efunc
 11988                        	.endfunc	3493,9,8
 11989                        	.line	3493
 11990                        ;
 11991                        ;//***********************************************
  Thu Dec  3 2020 22:25                                                Page 228


                    **************
 11992                        ;
 11993                        ;static unsigned long pio_indword( unsigned char a
                    ddr )
 11994                        ;
 11995                        ;{
 11996                        	.line	3497
 11997                        	.line	3499
 11998                        	FXHDD
 11999                        	func
 12000                        	.function	3499
 12001                        ~~pio_indword:
 12002                        	longa	on
 12003                        	longi	on
 12004 03:A891: 3B           	tsc
 12005 03:A892: 38           	sec
 12006 03:A893: E9 08 00     	sbc	#L469
 12007 03:A896: 1B           	tcs
 12008 03:A897: 0B           	phd
 12009 03:A898: 5B           	tcd
 12010             00000004   addr_0	set	4
 12011                        	.block	3499
 12012                        ;
 12013                        ;   //!!! read an 8-bit ATA register (usually the 
                    ATA Data register)
 12014                        ;
 12015                        ;   return * ( (unsigned long *) pio_reg_addrs[ ad
                    dr ] );
 12016                        	.sym	addr,4,14,6,8
 12017                        	.line	3503
 12018 03:A899: A5 0C        	lda	<L469+addr_0
 12019 03:A89B: 29 FF 00     	and	#$ff
 12020 03:A89E: 85 05        	sta	<R1
 12021 03:A8A0: A5 05        	lda	<R1
 12022 03:A8A2: 0A           	asl	A
 12023 03:A8A3: 0A           	asl	A
 12024 03:A8A4: 85 01        	sta	<R0
 12025 03:A8A6: 18           	clc
 12026 03:A8A7: A9 xx xx     	lda	#<~~pio_reg_addrs
 12027 03:A8AA: 65 01        	adc	<R0
 12028 03:A8AC: 85 05        	sta	<R1
 12029 03:A8AE: B2 05        	lda	(<R1)
 12030 03:A8B0: 85 01        	sta	<R0
 12031 03:A8B2: A0 02 00     	ldy	#$2
 12032 03:A8B5: B1 05        	lda	(<R1),Y
 12033 03:A8B7: 85 03        	sta	<R0+2
 12034 03:A8B9: A0 02 00     	ldy	#$2
 12035 03:A8BC: B7 01        	lda	[<R0],Y
 12036 03:A8BE: AA           	tax
 12037 03:A8BF: A7 01        	lda	[<R0]
 12038                        L472:
 12039 03:A8C1: A8           	tay
 12040 03:A8C2: A5 0A        	lda	<L469+2
 12041 03:A8C4: 85 0C        	sta	<L469+2+2
 12042 03:A8C6: A5 09        	lda	<L469+1
 12043 03:A8C8: 85 0B        	sta	<L469+1+2
 12044 03:A8CA: 2B           	pld
 12045 03:A8CB: 3B           	tsc
  Thu Dec  3 2020 22:25                                                Page 229


 12046 03:A8CC: 18           	clc
 12047 03:A8CD: 69 0A 00     	adc	#L469+2
 12048 03:A8D0: 1B           	tcs
 12049 03:A8D1: 98           	tya
 12050 03:A8D2: 6B           	rtl
 12051                        ;}
 12052                        	.line	3504
 12053                        	.endblock	3504
 12054             00000008   L469	equ	8
 12055             00000009   L470	equ	9
 12056 03:A8D3:              	ends
 12057                        	efunc
 12058                        	.endfunc	3504,9,8
 12059                        	.line	3504
 12060                        ;
 12061                        ;//***********************************************
                    **************
 12062                        ;
 12063                        ;static void pio_outdword( int addr, unsigned long
                     data )
 12064                        ;
 12065                        ;{
 12066                        	.line	3508
 12067                        	.line	3510
 12068                        	FXHDD
 12069                        	func
 12070                        	.function	3510
 12071                        ~~pio_outdword:
 12072                        	longa	on
 12073                        	longi	on
 12074 03:A8D3: 3B           	tsc
 12075 03:A8D4: 38           	sec
 12076 03:A8D5: E9 08 00     	sbc	#L473
 12077 03:A8D8: 1B           	tcs
 12078 03:A8D9: 0B           	phd
 12079 03:A8DA: 5B           	tcd
 12080             00000004   addr_0	set	4
 12081             00000006   data_0	set	6
 12082                        	.block	3510
 12083                        ;
 12084                        ;   //!!! Write an 8-bit ATA register (usually the
                     ATA Data register)
 12085                        ;
 12086                        ;   * ( (unsigned long *) pio_reg_addrs[ addr ] ) 
                    = data;
 12087                        	.sym	addr,4,5,6,16
 12088                        	.sym	data,6,18,6,32
 12089                        	.line	3514
 12090 03:A8DB: A5 0C        	lda	<L473+addr_0
 12091 03:A8DD: 0A           	asl	A
 12092 03:A8DE: 0A           	asl	A
 12093 03:A8DF: 85 01        	sta	<R0
 12094 03:A8E1: 18           	clc
 12095 03:A8E2: A9 xx xx     	lda	#<~~pio_reg_addrs
 12096 03:A8E5: 65 01        	adc	<R0
 12097 03:A8E7: 85 05        	sta	<R1
 12098 03:A8E9: B2 05        	lda	(<R1)
 12099 03:A8EB: 85 01        	sta	<R0
  Thu Dec  3 2020 22:25                                                Page 230


 12100 03:A8ED: A0 02 00     	ldy	#$2
 12101 03:A8F0: B1 05        	lda	(<R1),Y
 12102 03:A8F2: 85 03        	sta	<R0+2
 12103 03:A8F4: A5 0E        	lda	<L473+data_0
 12104 03:A8F6: 87 01        	sta	[<R0]
 12105 03:A8F8: A5 10        	lda	<L473+data_0+2
 12106 03:A8FA: A0 02 00     	ldy	#$2
 12107 03:A8FD: 97 01        	sta	[<R0],Y
 12108                        ;}
 12109                        	.line	3515
 12110                        L476:
 12111 03:A8FF: A5 0A        	lda	<L473+2
 12112 03:A901: 85 10        	sta	<L473+2+6
 12113 03:A903: A5 09        	lda	<L473+1
 12114 03:A905: 85 0F        	sta	<L473+1+6
 12115 03:A907: 2B           	pld
 12116 03:A908: 3B           	tsc
 12117 03:A909: 18           	clc
 12118 03:A90A: 69 0E 00     	adc	#L473+6
 12119 03:A90D: 1B           	tcs
 12120 03:A90E: 6B           	rtl
 12121                        	.endblock	3515
 12122             00000008   L473	equ	8
 12123             00000009   L474	equ	9
 12124 03:A90F:              	ends
 12125                        	efunc
 12126                        	.endfunc	3515,9,8
 12127                        	.line	3515
 12128                        ;
 12129                        ;//***********************************************
                    **************
 12130                        ;//
 12131                        ;// These functions are normally used to transfer 
                    DRQ blocks:
 12132                        ;//
 12133                        ;// pio_drq_block_in()
 12134                        ;// pio_drq_block_out()
 12135                        ;//
 12136                        ;//***********************************************
                    **************
 12137                        ;
 12138                        ;// Note: pio_drq_block_in() is the primary way pe
                    rform PIO
 12139                        ;// Data In transfers. It will handle 8-bit, 16-bi
                    t and 32-bit
 12140                        ;// I/O based data transfers.
 12141                        ;
 12142                        ;static void pio_drq_block_in( unsigned char addrD
                    ataReg,
 12143                        ;                       unsigned char * bufAddr,
 12144                        ;                       long wordCnt )
 12145                        ;
 12146                        ;{
 12147                        	.line	3530
 12148                        	.line	3534
 12149                        	FXHDD
 12150                        	func
 12151                        	.function	3534
  Thu Dec  3 2020 22:25                                                Page 231


 12152                        ~~pio_drq_block_in:
 12153                        	longa	on
 12154                        	longi	on
 12155 03:A90F: 3B           	tsc
 12156 03:A910: 38           	sec
 12157 03:A911: E9 0A 00     	sbc	#L477
 12158 03:A914: 1B           	tcs
 12159 03:A915: 0B           	phd
 12160 03:A916: 5B           	tcd
 12161             00000004   addrDataReg_0	set	4
 12162             00000006   bufAddr_0	set	6
 12163             0000000A   wordCnt_0	set	10
 12164                        	.block	3534
 12165                        ;
 12166                        ;   // NOTE: wordCnt is the size of a DRQ data blo
                    ck/packet
 12167                        ;   // in words. The maximum value of wordCnt is n
                    ormally:
 12168                        ;   // a) For ATA, 16384 words or 32768 bytes (64 
                    sectors,
 12169                        ;   //    only with READ/WRITE MULTIPLE commands),
 12170                        ;   // b) For ATAPI, 32768 words or 65536 bytes
 12171                        ;   //    (actually 65535 bytes plus a pad byte).
 12172                        ;
 12173                        ;   {
 12174                        	.sym	addrDataReg,4,14,6,8
 12175                        	.sym	bufAddr,6,142,6,32
 12176                        	.sym	wordCnt,10,7,6,32
 12177                        	.line	3543
 12178                        ;      int pxw;
 12179                        ;      long wc;
 12180                        ;
 12181                        ;      // adjust pio_xfer_width - don't use DWORD 
                    if wordCnt is odd.
 12182                        ;
 12183                        ;      pxw = pio_xfer_width;
 12184                        	.block	3549
 12185             00000000   pxw_2	set	0
 12186             00000002   wc_2	set	2
 12187                        	.sym	pxw,0,5,1,16
 12188                        	.sym	wc,2,7,1,32
 12189                        	.line	3549
 12190 03:A917: AD xx xx     	lda	|~~pio_xfer_width
 12191 03:A91A: 29 FF 00     	and	#$ff
 12192 03:A91D: 85 05        	sta	<L478+pxw_2
 12193                        ;      if ( ( pxw == 32 ) && ( wordCnt & 0x0000000
                    1L ) )
 12194                        	.line	3550
 12195                        ;         pxw = 16;
 12196 03:A91F: A5 05        	lda	<L478+pxw_2
 12197 03:A921: C9 20 00     	cmp	#<$20
 12198 03:A924: F0 03        	beq	L481
 12199 03:A926: 82 0F 00     	brl	L10187
 12200                        L481:
 12201 03:A929: A5 14        	lda	<L477+wordCnt_0
 12202 03:A92B: 29 01 00     	and	#<$1
 12203 03:A92E: D0 03        	bne	L482
 12204 03:A930: 82 05 00     	brl	L10187
  Thu Dec  3 2020 22:25                                                Page 232


 12205                        L482:
 12206                        	.line	3551
 12207 03:A933: A9 10 00     	lda	#$10
 12208 03:A936: 85 05        	sta	<L478+pxw_2
 12209                        ;
 12210                        ;      // Data transfer using INS instruction.
 12211                        ;      // Break the transfer into chunks of 32768 
                    or fewer bytes.
 12212                        ;
 12213                        ;      while ( wordCnt > 0 )
 12214                        L10187:
 12215                        	.line	3556
 12216                        L10188:
 12217 03:A938: 38           	sec
 12218 03:A939: A9 00 00     	lda	#$0
 12219 03:A93C: E5 14        	sbc	<L477+wordCnt_0
 12220 03:A93E: A9 00 00     	lda	#$0
 12221 03:A941: E5 16        	sbc	<L477+wordCnt_0+2
 12222 03:A943: 70 03        	bvs	L483
 12223 03:A945: 49 00 80     	eor	#$8000
 12224                        L483:
 12225 03:A948: 10 03        	bpl	L484
 12226 03:A94A: 82 B5 00     	brl	L10189
 12227                        L484:
 12228                        ;      {
 12229                        	.line	3557
 12230                        ;         if ( wordCnt > 16384L )
 12231                        	.line	3558
 12232                        ;            wc = 16384;
 12233 03:A94D: 38           	sec
 12234 03:A94E: A9 00 40     	lda	#$4000
 12235 03:A951: E5 14        	sbc	<L477+wordCnt_0
 12236 03:A953: A9 00 00     	lda	#$0
 12237 03:A956: E5 16        	sbc	<L477+wordCnt_0+2
 12238 03:A958: 70 03        	bvs	L485
 12239 03:A95A: 49 00 80     	eor	#$8000
 12240                        L485:
 12241 03:A95D: 10 03        	bpl	L486
 12242 03:A95F: 82 0D 00     	brl	L10190
 12243                        L486:
 12244                        	.line	3559
 12245 03:A962: A9 00 40     	lda	#$4000
 12246 03:A965: 85 07        	sta	<L478+wc_2
 12247 03:A967: A9 00 00     	lda	#$0
 12248 03:A96A: 85 09        	sta	<L478+wc_2+2
 12249                        ;         else
 12250 03:A96C: 82 08 00     	brl	L10191
 12251                        L10190:
 12252                        ;            wc = wordCnt;
 12253                        	.line	3561
 12254 03:A96F: A5 14        	lda	<L477+wordCnt_0
 12255 03:A971: 85 07        	sta	<L478+wc_2
 12256 03:A973: A5 16        	lda	<L477+wordCnt_0+2
 12257 03:A975: 85 09        	sta	<L478+wc_2+2
 12258                        L10191:
 12259                        ;         if ( pxw == 8 )
 12260                        	.line	3562
 12261                        ;         {
  Thu Dec  3 2020 22:25                                                Page 233


 12262 03:A977: A5 05        	lda	<L478+pxw_2
 12263 03:A979: C9 08 00     	cmp	#<$8
 12264 03:A97C: F0 03        	beq	L487
 12265 03:A97E: 82 1D 00     	brl	L10192
 12266                        L487:
 12267                        	.line	3563
 12268                        ;            // do REP INS
 12269                        ;            pio_rep_inbyte( addrDataReg, bufAddr,
                     wc * 2L );
 12270                        	.line	3565
 12271 03:A981: A5 07        	lda	<L478+wc_2
 12272 03:A983: 85 01        	sta	<R0
 12273 03:A985: A5 09        	lda	<L478+wc_2+2
 12274 03:A987: 85 03        	sta	<R0+2
 12275 03:A989: 06 01        	asl	<R0
 12276 03:A98B: 26 03        	rol	<R0+2
 12277 03:A98D: D4 03        	pei	<R0+2
 12278 03:A98F: D4 01        	pei	<R0
 12279 03:A991: D4 12        	pei	<L477+bufAddr_0+2
 12280 03:A993: D4 10        	pei	<L477+bufAddr_0
 12281 03:A995: D4 0E        	pei	<L477+addrDataReg_0
 12282 03:A997: 22 15 AB 03  	jsl	~~pio_rep_inbyte
 12283                        ;         }
 12284                        	.line	3566
 12285                        ;         else
 12286 03:A99B: 82 3B 00     	brl	L10193
 12287                        L10192:
 12288                        ;         if ( pxw == 32 )
 12289                        	.line	3568
 12290                        ;         {
 12291 03:A99E: A5 05        	lda	<L478+pxw_2
 12292 03:A9A0: C9 20 00     	cmp	#<$20
 12293 03:A9A3: F0 03        	beq	L488
 12294 03:A9A5: 82 23 00     	brl	L10194
 12295                        L488:
 12296                        	.line	3569
 12297                        ;            // do REP INSD
 12298                        ;            pio_rep_indword( addrDataReg, bufAddr
                    , wc / 2L );
 12299                        	.line	3571
 12300 03:A9A8: F4 00 00     	pea	#^$2
 12301 03:A9AB: F4 02 00     	pea	#<$2
 12302 03:A9AE: D4 09        	pei	<L478+wc_2+2
 12303 03:A9B0: D4 07        	pei	<L478+wc_2
 12304                        	xref	~~~ldiv
 12305 03:A9B2: 22 xx xx xx  	jsl	~~~ldiv
 12306 03:A9B6: 85 01        	sta	<R0
 12307 03:A9B8: 86 03        	stx	<R0+2
 12308 03:A9BA: D4 03        	pei	<R0+2
 12309 03:A9BC: D4 01        	pei	<R0
 12310 03:A9BE: D4 12        	pei	<L477+bufAddr_0+2
 12311 03:A9C0: D4 10        	pei	<L477+bufAddr_0
 12312 03:A9C2: D4 0E        	pei	<L477+addrDataReg_0
 12313 03:A9C4: 22 47 AC 03  	jsl	~~pio_rep_indword
 12314                        ;         }
 12315                        	.line	3572
 12316                        ;         else
 12317 03:A9C8: 82 0E 00     	brl	L10195
  Thu Dec  3 2020 22:25                                                Page 234


 12318                        L10194:
 12319                        ;         {
 12320                        	.line	3574
 12321                        ;            // do REP INSW
 12322                        ;            pio_rep_inword( addrDataReg, bufAddr,
                     wc );
 12323                        	.line	3576
 12324 03:A9CB: D4 09        	pei	<L478+wc_2+2
 12325 03:A9CD: D4 07        	pei	<L478+wc_2
 12326 03:A9CF: D4 12        	pei	<L477+bufAddr_0+2
 12327 03:A9D1: D4 10        	pei	<L477+bufAddr_0
 12328 03:A9D3: D4 0E        	pei	<L477+addrDataReg_0
 12329 03:A9D5: 22 AA AB 03  	jsl	~~pio_rep_inword
 12330                        ;         }
 12331                        	.line	3577
 12332                        L10195:
 12333                        L10193:
 12334                        ;         bufAddr = bufAddr + ( wc * 2 );
 12335                        	.line	3578
 12336 03:A9D9: A5 07        	lda	<L478+wc_2
 12337 03:A9DB: 85 01        	sta	<R0
 12338 03:A9DD: A5 09        	lda	<L478+wc_2+2
 12339 03:A9DF: 85 03        	sta	<R0+2
 12340 03:A9E1: 06 01        	asl	<R0
 12341 03:A9E3: 26 03        	rol	<R0+2
 12342 03:A9E5: 18           	clc
 12343 03:A9E6: A5 10        	lda	<L477+bufAddr_0
 12344 03:A9E8: 65 01        	adc	<R0
 12345 03:A9EA: 85 10        	sta	<L477+bufAddr_0
 12346 03:A9EC: A5 12        	lda	<L477+bufAddr_0+2
 12347 03:A9EE: 65 03        	adc	<R0+2
 12348 03:A9F0: 85 12        	sta	<L477+bufAddr_0+2
 12349                        ;         wordCnt = wordCnt - wc;
 12350                        	.line	3579
 12351 03:A9F2: 38           	sec
 12352 03:A9F3: A5 14        	lda	<L477+wordCnt_0
 12353 03:A9F5: E5 07        	sbc	<L478+wc_2
 12354 03:A9F7: 85 14        	sta	<L477+wordCnt_0
 12355 03:A9F9: A5 16        	lda	<L477+wordCnt_0+2
 12356 03:A9FB: E5 09        	sbc	<L478+wc_2+2
 12357 03:A9FD: 85 16        	sta	<L477+wordCnt_0+2
 12358                        ;      }
 12359                        	.line	3580
 12360 03:A9FF: 82 36 FF     	brl	L10188
 12361                        L10189:
 12362                        ;   }
 12363                        	.endblock	3581
 12364                        	.line	3581
 12365                        ;
 12366                        ;   return;
 12367                        	.line	3583
 12368                        L489:
 12369 03:AA02: A5 0C        	lda	<L477+2
 12370 03:AA04: 85 16        	sta	<L477+2+10
 12371 03:AA06: A5 0B        	lda	<L477+1
 12372 03:AA08: 85 15        	sta	<L477+1+10
 12373 03:AA0A: 2B           	pld
 12374 03:AA0B: 3B           	tsc
  Thu Dec  3 2020 22:25                                                Page 235


 12375 03:AA0C: 18           	clc
 12376 03:AA0D: 69 14 00     	adc	#L477+10
 12377 03:AA10: 1B           	tcs
 12378 03:AA11: 6B           	rtl
 12379                        ;}
 12380                        	.line	3584
 12381                        	.endblock	3584
 12382             0000000A   L477	equ	10
 12383             00000005   L478	equ	5
 12384 03:AA12:              	ends
 12385                        	efunc
 12386                        	.endfunc	3584,5,10
 12387                        	.line	3584
 12388                        ;
 12389                        ;//***********************************************
                    **************
 12390                        ;
 12391                        ;// Note: pio_drq_block_out() is the primary way p
                    erform PIO
 12392                        ;// Data Out transfers. It will handle 8-bit, 16-b
                    it and 32-bit
 12393                        ;// I/O based data transfers.
 12394                        ;
 12395                        ;static void pio_drq_block_out( unsigned char addr
                    DataReg,
 12396                        ;                        unsigned char * bufAddr,
 12397                        ;                        long wordCnt )
 12398                        ;
 12399                        ;{
 12400                        	.line	3592
 12401                        	.line	3596
 12402                        	FXHDD
 12403                        	func
 12404                        	.function	3596
 12405                        ~~pio_drq_block_out:
 12406                        	longa	on
 12407                        	longi	on
 12408 03:AA12: 3B           	tsc
 12409 03:AA13: 38           	sec
 12410 03:AA14: E9 0A 00     	sbc	#L490
 12411 03:AA17: 1B           	tcs
 12412 03:AA18: 0B           	phd
 12413 03:AA19: 5B           	tcd
 12414             00000004   addrDataReg_0	set	4
 12415             00000006   bufAddr_0	set	6
 12416             0000000A   wordCnt_0	set	10
 12417                        	.block	3596
 12418                        ;
 12419                        ;   // NOTE: wordCnt is the size of a DRQ data blo
                    ck/packet
 12420                        ;   // in words. The maximum value of wordCnt is n
                    ormally:
 12421                        ;   // a) For ATA, 16384 words or 32768 bytes (64 
                    sectors,
 12422                        ;   //    only with READ/WRITE MULTIPLE commands),
 12423                        ;   // b) For ATAPI, 32768 words or 65536 bytes
 12424                        ;   //    (actually 65535 bytes plus a pad byte).
 12425                        ;
  Thu Dec  3 2020 22:25                                                Page 236


 12426                        ;   {
 12427                        	.sym	addrDataReg,4,14,6,8
 12428                        	.sym	bufAddr,6,142,6,32
 12429                        	.sym	wordCnt,10,7,6,32
 12430                        	.line	3605
 12431                        ;      int pxw;
 12432                        ;      long wc;
 12433                        ;
 12434                        ;      // adjust pio_xfer_width - don't use DWORD 
                    if wordCnt is odd.
 12435                        ;
 12436                        ;      pxw = pio_xfer_width;
 12437                        	.block	3611
 12438             00000000   pxw_2	set	0
 12439             00000002   wc_2	set	2
 12440                        	.sym	pxw,0,5,1,16
 12441                        	.sym	wc,2,7,1,32
 12442                        	.line	3611
 12443 03:AA1A: AD xx xx     	lda	|~~pio_xfer_width
 12444 03:AA1D: 29 FF 00     	and	#$ff
 12445 03:AA20: 85 05        	sta	<L491+pxw_2
 12446                        ;      if ( ( pxw == 32 ) && ( wordCnt & 0x0000000
                    1L ) )
 12447                        	.line	3612
 12448                        ;         pxw = 16;
 12449 03:AA22: A5 05        	lda	<L491+pxw_2
 12450 03:AA24: C9 20 00     	cmp	#<$20
 12451 03:AA27: F0 03        	beq	L494
 12452 03:AA29: 82 0F 00     	brl	L10196
 12453                        L494:
 12454 03:AA2C: A5 14        	lda	<L490+wordCnt_0
 12455 03:AA2E: 29 01 00     	and	#<$1
 12456 03:AA31: D0 03        	bne	L495
 12457 03:AA33: 82 05 00     	brl	L10196
 12458                        L495:
 12459                        	.line	3613
 12460 03:AA36: A9 10 00     	lda	#$10
 12461 03:AA39: 85 05        	sta	<L491+pxw_2
 12462                        ;
 12463                        ;      // Data transfer using OUTS instruction.
 12464                        ;      // Break the transfer into chunks of 32768 
                    or fewer bytes.
 12465                        ;
 12466                        ;      while ( wordCnt > 0 )
 12467                        L10196:
 12468                        	.line	3618
 12469                        L10197:
 12470 03:AA3B: 38           	sec
 12471 03:AA3C: A9 00 00     	lda	#$0
 12472 03:AA3F: E5 14        	sbc	<L490+wordCnt_0
 12473 03:AA41: A9 00 00     	lda	#$0
 12474 03:AA44: E5 16        	sbc	<L490+wordCnt_0+2
 12475 03:AA46: 70 03        	bvs	L496
 12476 03:AA48: 49 00 80     	eor	#$8000
 12477                        L496:
 12478 03:AA4B: 10 03        	bpl	L497
 12479 03:AA4D: 82 B5 00     	brl	L10198
 12480                        L497:
  Thu Dec  3 2020 22:25                                                Page 237


 12481                        ;      {
 12482                        	.line	3619
 12483                        ;         if ( wordCnt > 16384L )
 12484                        	.line	3620
 12485                        ;            wc = 16384;
 12486 03:AA50: 38           	sec
 12487 03:AA51: A9 00 40     	lda	#$4000
 12488 03:AA54: E5 14        	sbc	<L490+wordCnt_0
 12489 03:AA56: A9 00 00     	lda	#$0
 12490 03:AA59: E5 16        	sbc	<L490+wordCnt_0+2
 12491 03:AA5B: 70 03        	bvs	L498
 12492 03:AA5D: 49 00 80     	eor	#$8000
 12493                        L498:
 12494 03:AA60: 10 03        	bpl	L499
 12495 03:AA62: 82 0D 00     	brl	L10199
 12496                        L499:
 12497                        	.line	3621
 12498 03:AA65: A9 00 40     	lda	#$4000
 12499 03:AA68: 85 07        	sta	<L491+wc_2
 12500 03:AA6A: A9 00 00     	lda	#$0
 12501 03:AA6D: 85 09        	sta	<L491+wc_2+2
 12502                        ;         else
 12503 03:AA6F: 82 08 00     	brl	L10200
 12504                        L10199:
 12505                        ;            wc = wordCnt;
 12506                        	.line	3623
 12507 03:AA72: A5 14        	lda	<L490+wordCnt_0
 12508 03:AA74: 85 07        	sta	<L491+wc_2
 12509 03:AA76: A5 16        	lda	<L490+wordCnt_0+2
 12510 03:AA78: 85 09        	sta	<L491+wc_2+2
 12511                        L10200:
 12512                        ;         if ( pxw == 8 )
 12513                        	.line	3624
 12514                        ;         {
 12515 03:AA7A: A5 05        	lda	<L491+pxw_2
 12516 03:AA7C: C9 08 00     	cmp	#<$8
 12517 03:AA7F: F0 03        	beq	L500
 12518 03:AA81: 82 1D 00     	brl	L10201
 12519                        L500:
 12520                        	.line	3625
 12521                        ;            // do REP OUTS
 12522                        ;            pio_rep_outbyte( addrDataReg, bufAddr
                    , wc * 2L );
 12523                        	.line	3627
 12524 03:AA84: A5 07        	lda	<L491+wc_2
 12525 03:AA86: 85 01        	sta	<R0
 12526 03:AA88: A5 09        	lda	<L491+wc_2+2
 12527 03:AA8A: 85 03        	sta	<R0+2
 12528 03:AA8C: 06 01        	asl	<R0
 12529 03:AA8E: 26 03        	rol	<R0+2
 12530 03:AA90: D4 03        	pei	<R0+2
 12531 03:AA92: D4 01        	pei	<R0
 12532 03:AA94: D4 12        	pei	<L490+bufAddr_0+2
 12533 03:AA96: D4 10        	pei	<L490+bufAddr_0
 12534 03:AA98: D4 0E        	pei	<L490+addrDataReg_0
 12535 03:AA9A: 22 5F AB 03  	jsl	~~pio_rep_outbyte
 12536                        ;         }
 12537                        	.line	3628
  Thu Dec  3 2020 22:25                                                Page 238


 12538                        ;         else
 12539 03:AA9E: 82 3B 00     	brl	L10202
 12540                        L10201:
 12541                        ;         if ( pxw == 32 )
 12542                        	.line	3630
 12543                        ;         {
 12544 03:AAA1: A5 05        	lda	<L491+pxw_2
 12545 03:AAA3: C9 20 00     	cmp	#<$20
 12546 03:AAA6: F0 03        	beq	L501
 12547 03:AAA8: 82 23 00     	brl	L10203
 12548                        L501:
 12549                        	.line	3631
 12550                        ;            // do REP OUTSD
 12551                        ;            pio_rep_outdword( addrDataReg, bufAdd
                    r, wc / 2L );
 12552                        	.line	3633
 12553 03:AAAB: F4 00 00     	pea	#^$2
 12554 03:AAAE: F4 02 00     	pea	#<$2
 12555 03:AAB1: D4 09        	pei	<L491+wc_2+2
 12556 03:AAB3: D4 07        	pei	<L491+wc_2
 12557                        	xref	~~~ldiv
 12558 03:AAB5: 22 xx xx xx  	jsl	~~~ldiv
 12559 03:AAB9: 85 01        	sta	<R0
 12560 03:AABB: 86 03        	stx	<R0+2
 12561 03:AABD: D4 03        	pei	<R0+2
 12562 03:AABF: D4 01        	pei	<R0
 12563 03:AAC1: D4 12        	pei	<L490+bufAddr_0+2
 12564 03:AAC3: D4 10        	pei	<L490+bufAddr_0
 12565 03:AAC5: D4 0E        	pei	<L490+addrDataReg_0
 12566 03:AAC7: 22 A0 AC 03  	jsl	~~pio_rep_outdword
 12567                        ;         }
 12568                        	.line	3634
 12569                        ;         else
 12570 03:AACB: 82 0E 00     	brl	L10204
 12571                        L10203:
 12572                        ;         {
 12573                        	.line	3636
 12574                        ;            // do REP OUTSW
 12575                        ;            pio_rep_outword( addrDataReg, bufAddr
                    , wc );
 12576                        	.line	3638
 12577 03:AACE: D4 09        	pei	<L491+wc_2+2
 12578 03:AAD0: D4 07        	pei	<L491+wc_2
 12579 03:AAD2: D4 12        	pei	<L490+bufAddr_0+2
 12580 03:AAD4: D4 10        	pei	<L490+bufAddr_0
 12581 03:AAD6: D4 0E        	pei	<L490+addrDataReg_0
 12582 03:AAD8: 22 F6 AB 03  	jsl	~~pio_rep_outword
 12583                        ;         }
 12584                        	.line	3639
 12585                        L10204:
 12586                        L10202:
 12587                        ;         bufAddr = bufAddr + ( wc * 2 );
 12588                        	.line	3640
 12589 03:AADC: A5 07        	lda	<L491+wc_2
 12590 03:AADE: 85 01        	sta	<R0
 12591 03:AAE0: A5 09        	lda	<L491+wc_2+2
 12592 03:AAE2: 85 03        	sta	<R0+2
 12593 03:AAE4: 06 01        	asl	<R0
  Thu Dec  3 2020 22:25                                                Page 239


 12594 03:AAE6: 26 03        	rol	<R0+2
 12595 03:AAE8: 18           	clc
 12596 03:AAE9: A5 10        	lda	<L490+bufAddr_0
 12597 03:AAEB: 65 01        	adc	<R0
 12598 03:AAED: 85 10        	sta	<L490+bufAddr_0
 12599 03:AAEF: A5 12        	lda	<L490+bufAddr_0+2
 12600 03:AAF1: 65 03        	adc	<R0+2
 12601 03:AAF3: 85 12        	sta	<L490+bufAddr_0+2
 12602                        ;         wordCnt = wordCnt - wc;
 12603                        	.line	3641
 12604 03:AAF5: 38           	sec
 12605 03:AAF6: A5 14        	lda	<L490+wordCnt_0
 12606 03:AAF8: E5 07        	sbc	<L491+wc_2
 12607 03:AAFA: 85 14        	sta	<L490+wordCnt_0
 12608 03:AAFC: A5 16        	lda	<L490+wordCnt_0+2
 12609 03:AAFE: E5 09        	sbc	<L491+wc_2+2
 12610 03:AB00: 85 16        	sta	<L490+wordCnt_0+2
 12611                        ;      }
 12612                        	.line	3642
 12613 03:AB02: 82 36 FF     	brl	L10197
 12614                        L10198:
 12615                        ;   }
 12616                        	.endblock	3643
 12617                        	.line	3643
 12618                        ;
 12619                        ;   return;
 12620                        	.line	3645
 12621                        L502:
 12622 03:AB05: A5 0C        	lda	<L490+2
 12623 03:AB07: 85 16        	sta	<L490+2+10
 12624 03:AB09: A5 0B        	lda	<L490+1
 12625 03:AB0B: 85 15        	sta	<L490+1+10
 12626 03:AB0D: 2B           	pld
 12627 03:AB0E: 3B           	tsc
 12628 03:AB0F: 18           	clc
 12629 03:AB10: 69 14 00     	adc	#L490+10
 12630 03:AB13: 1B           	tcs
 12631 03:AB14: 6B           	rtl
 12632                        ;}
 12633                        	.line	3646
 12634                        	.endblock	3646
 12635             0000000A   L490	equ	10
 12636             00000005   L491	equ	5
 12637 03:AB15:              	ends
 12638                        	efunc
 12639                        	.endfunc	3646,5,10
 12640                        	.line	3646
 12641                        ;
 12642                        ;//***********************************************
                    **************
 12643                        ;//
 12644                        ;// These functions transfer PIO DRQ data blocks t
                    hrough the ATA
 12645                        ;// Data register. On an x86 these functions would
                     use the
 12646                        ;// REP INS and REP OUTS instructions.
 12647                        ;//
 12648                        ;// pio_rep_inbyte()
  Thu Dec  3 2020 22:25                                                Page 240


 12649                        ;// pio_rep_outbyte()
 12650                        ;// pio_rep_inword()
 12651                        ;// pio_rep_outword()
 12652                        ;// pio_rep_indword()
 12653                        ;// pio_rep_outdword()
 12654                        ;//
 12655                        ;// These functions can be called directly but usu
                    ally they
 12656                        ;// are called by the pio_drq_block_in() and pio_d
                    rq_block_out()
 12657                        ;// functions to perform I/O mode transfers. See t
                    he
 12658                        ;// pio_xfer_width variable!
 12659                        ;//
 12660                        ;//***********************************************
                    **************
 12661                        ;
 12662                        ;static void pio_rep_inbyte( unsigned char addrDat
                    aReg,
 12663                        ;                     unsigned char * bufAddr,
 12664                        ;                     long byteCnt )
 12665                        ;
 12666                        ;{
 12667                        	.line	3668
 12668                        	.line	3672
 12669                        	FXHDD
 12670                        	func
 12671                        	.function	3672
 12672                        ~~pio_rep_inbyte:
 12673                        	longa	on
 12674                        	longi	on
 12675 03:AB15: 3B           	tsc
 12676 03:AB16: 38           	sec
 12677 03:AB17: E9 00 00     	sbc	#L503
 12678 03:AB1A: 1B           	tcs
 12679 03:AB1B: 0B           	phd
 12680 03:AB1C: 5B           	tcd
 12681             00000004   addrDataReg_0	set	4
 12682             00000006   bufAddr_0	set	6
 12683             0000000A   byteCnt_0	set	10
 12684                        	.block	3672
 12685                        ;
 12686                        ;   // Warning: Avoid calling this function with
 12687                        ;   // byteCnt > 32768 (transfers 32768 bytes).
 12688                        ;   // that bufOff is a value between 0 and 15 (0x
                    f).
 12689                        ;
 12690                        ;   //!!! repeat read an 8-bit register (ATA Data 
                    register when
 12691                        ;   //!!! ATA status is BSY=0 DRQ=1). For example:
 12692                        ;
 12693                        ;   while ( byteCnt > 0 )
 12694                        	.sym	addrDataReg,4,14,6,8
 12695                        	.sym	bufAddr,6,142,6,32
 12696                        	.sym	byteCnt,10,7,6,32
 12697                        	.line	3681
 12698                        L10205:
 12699 03:AB1D: 38           	sec
  Thu Dec  3 2020 22:25                                                Page 241


 12700 03:AB1E: A9 00 00     	lda	#$0
 12701 03:AB21: E5 0A        	sbc	<L503+byteCnt_0
 12702 03:AB23: A9 00 00     	lda	#$0
 12703 03:AB26: E5 0C        	sbc	<L503+byteCnt_0+2
 12704 03:AB28: 70 03        	bvs	L506
 12705 03:AB2A: 49 00 80     	eor	#$8000
 12706                        L506:
 12707 03:AB2D: 10 03        	bpl	L507
 12708 03:AB2F: 82 1D 00     	brl	L10206
 12709                        L507:
 12710                        ;   {
 12711                        	.line	3682
 12712                        ;      * bufAddr = pio_inbyte( addrDataReg );
 12713                        	.line	3683
 12714 03:AB32: D4 04        	pei	<L503+addrDataReg_0
 12715 03:AB34: 22 A8 A7 03  	jsl	~~pio_inbyte
 12716 03:AB38: E2 20        	sep	#$20
 12717                        	longa	off
 12718 03:AB3A: 87 06        	sta	[<L503+bufAddr_0]
 12719 03:AB3C: C2 20        	rep	#$20
 12720                        	longa	on
 12721                        ;      bufAddr ++ ;
 12722                        	.line	3684
 12723 03:AB3E: E6 06        	inc	<L503+bufAddr_0
 12724 03:AB40: D0 02        	bne	L508
 12725 03:AB42: E6 08        	inc	<L503+bufAddr_0+2
 12726                        L508:
 12727                        ;      byteCnt -- ;
 12728                        	.line	3685
 12729 03:AB44: A5 0A        	lda	<L503+byteCnt_0
 12730 03:AB46: D0 02        	bne	L509
 12731 03:AB48: C6 0C        	dec	<L503+byteCnt_0+2
 12732                        L509:
 12733 03:AB4A: C6 0A        	dec	<L503+byteCnt_0
 12734                        ;   }
 12735                        	.line	3686
 12736 03:AB4C: 82 CE FF     	brl	L10205
 12737                        L10206:
 12738                        ;}
 12739                        	.line	3687
 12740                        L510:
 12741 03:AB4F: A5 02        	lda	<L503+2
 12742 03:AB51: 85 0C        	sta	<L503+2+10
 12743 03:AB53: A5 01        	lda	<L503+1
 12744 03:AB55: 85 0B        	sta	<L503+1+10
 12745 03:AB57: 2B           	pld
 12746 03:AB58: 3B           	tsc
 12747 03:AB59: 18           	clc
 12748 03:AB5A: 69 0A 00     	adc	#L503+10
 12749 03:AB5D: 1B           	tcs
 12750 03:AB5E: 6B           	rtl
 12751                        	.endblock	3687
 12752             00000000   L503	equ	0
 12753             00000001   L504	equ	1
 12754 03:AB5F:              	ends
 12755                        	efunc
 12756                        	.endfunc	3687,1,0
 12757                        	.line	3687
  Thu Dec  3 2020 22:25                                                Page 242


 12758                        ;
 12759                        ;//***********************************************
                    **************
 12760                        ;
 12761                        ;static void pio_rep_outbyte( unsigned char addrDa
                    taReg,
 12762                        ;                      unsigned char * bufAddr,
 12763                        ;                      long byteCnt )
 12764                        ;
 12765                        ;{
 12766                        	.line	3691
 12767                        	.line	3695
 12768                        	FXHDD
 12769                        	func
 12770                        	.function	3695
 12771                        ~~pio_rep_outbyte:
 12772                        	longa	on
 12773                        	longi	on
 12774 03:AB5F: 3B           	tsc
 12775 03:AB60: 38           	sec
 12776 03:AB61: E9 00 00     	sbc	#L511
 12777 03:AB64: 1B           	tcs
 12778 03:AB65: 0B           	phd
 12779 03:AB66: 5B           	tcd
 12780             00000004   addrDataReg_0	set	4
 12781             00000006   bufAddr_0	set	6
 12782             0000000A   byteCnt_0	set	10
 12783                        	.block	3695
 12784                        ;
 12785                        ;   // Warning: Avoid calling this function with
 12786                        ;   // byteCnt > 32768 (transfers 32768 bytes).
 12787                        ;   // that bufOff is a value between 0 and 15 (0x
                    f).
 12788                        ;
 12789                        ;   //!!! repeat write an 8-bit register (ATA Data
                     register when
 12790                        ;   //!!! ATA status is BSY=0 DRQ=1). For example:
 12791                        ;
 12792                        ;   while ( byteCnt > 0 )
 12793                        	.sym	addrDataReg,4,14,6,8
 12794                        	.sym	bufAddr,6,142,6,32
 12795                        	.sym	byteCnt,10,7,6,32
 12796                        	.line	3704
 12797                        L10207:
 12798 03:AB67: 38           	sec
 12799 03:AB68: A9 00 00     	lda	#$0
 12800 03:AB6B: E5 0A        	sbc	<L511+byteCnt_0
 12801 03:AB6D: A9 00 00     	lda	#$0
 12802 03:AB70: E5 0C        	sbc	<L511+byteCnt_0+2
 12803 03:AB72: 70 03        	bvs	L514
 12804 03:AB74: 49 00 80     	eor	#$8000
 12805                        L514:
 12806 03:AB77: 10 03        	bpl	L515
 12807 03:AB79: 82 1E 00     	brl	L10208
 12808                        L515:
 12809                        ;   {
 12810                        	.line	3705
 12811                        ;      pio_outbyte( addrDataReg, * bufAddr );
  Thu Dec  3 2020 22:25                                                Page 243


 12812                        	.line	3706
 12813 03:AB7C: A7 06        	lda	[<L511+bufAddr_0]
 12814 03:AB7E: 48           	pha
 12815 03:AB7F: A5 04        	lda	<L511+addrDataReg_0
 12816 03:AB81: 29 FF 00     	and	#$ff
 12817 03:AB84: 48           	pha
 12818 03:AB85: 22 E7 A7 03  	jsl	~~pio_outbyte
 12819                        ;      bufAddr ++ ;
 12820                        	.line	3707
 12821 03:AB89: E6 06        	inc	<L511+bufAddr_0
 12822 03:AB8B: D0 02        	bne	L516
 12823 03:AB8D: E6 08        	inc	<L511+bufAddr_0+2
 12824                        L516:
 12825                        ;      byteCnt -- ;
 12826                        	.line	3708
 12827 03:AB8F: A5 0A        	lda	<L511+byteCnt_0
 12828 03:AB91: D0 02        	bne	L517
 12829 03:AB93: C6 0C        	dec	<L511+byteCnt_0+2
 12830                        L517:
 12831 03:AB95: C6 0A        	dec	<L511+byteCnt_0
 12832                        ;   }
 12833                        	.line	3709
 12834 03:AB97: 82 CD FF     	brl	L10207
 12835                        L10208:
 12836                        ;}
 12837                        	.line	3710
 12838                        L518:
 12839 03:AB9A: A5 02        	lda	<L511+2
 12840 03:AB9C: 85 0C        	sta	<L511+2+10
 12841 03:AB9E: A5 01        	lda	<L511+1
 12842 03:ABA0: 85 0B        	sta	<L511+1+10
 12843 03:ABA2: 2B           	pld
 12844 03:ABA3: 3B           	tsc
 12845 03:ABA4: 18           	clc
 12846 03:ABA5: 69 0A 00     	adc	#L511+10
 12847 03:ABA8: 1B           	tcs
 12848 03:ABA9: 6B           	rtl
 12849                        	.endblock	3710
 12850             00000000   L511	equ	0
 12851             00000001   L512	equ	1
 12852 03:ABAA:              	ends
 12853                        	efunc
 12854                        	.endfunc	3710,1,0
 12855                        	.line	3710
 12856                        ;
 12857                        ;//***********************************************
                    **************
 12858                        ;
 12859                        ;static void pio_rep_inword( unsigned char addrDat
                    aReg,
 12860                        ;                     unsigned char * bufAddr,
 12861                        ;                     long wordCnt )
 12862                        ;
 12863                        ;{
 12864                        	.line	3714
 12865                        	.line	3718
 12866                        	FXHDD
 12867                        	func
  Thu Dec  3 2020 22:25                                                Page 244


 12868                        	.function	3718
 12869                        ~~pio_rep_inword:
 12870                        	longa	on
 12871                        	longi	on
 12872 03:ABAA: 3B           	tsc
 12873 03:ABAB: 38           	sec
 12874 03:ABAC: E9 00 00     	sbc	#L519
 12875 03:ABAF: 1B           	tcs
 12876 03:ABB0: 0B           	phd
 12877 03:ABB1: 5B           	tcd
 12878             00000004   addrDataReg_0	set	4
 12879             00000006   bufAddr_0	set	6
 12880             0000000A   wordCnt_0	set	10
 12881                        	.block	3718
 12882                        ;
 12883                        ;   // Warning: Avoid calling this function with
 12884                        ;   // wordCnt > 16384 (transfers 32768 bytes).
 12885                        ;
 12886                        ;   //!!! repeat read a 16-bit register (ATA Data 
                    register when
 12887                        ;   //!!! ATA status is BSY=0 DRQ=1). For example:
 12888                        ;
 12889                        ;   while ( wordCnt > 0 )
 12890                        	.sym	addrDataReg,4,14,6,8
 12891                        	.sym	bufAddr,6,142,6,32
 12892                        	.sym	wordCnt,10,7,6,32
 12893                        	.line	3726
 12894                        L10209:
 12895 03:ABB2: 38           	sec
 12896 03:ABB3: A9 00 00     	lda	#$0
 12897 03:ABB6: E5 0A        	sbc	<L519+wordCnt_0
 12898 03:ABB8: A9 00 00     	lda	#$0
 12899 03:ABBB: E5 0C        	sbc	<L519+wordCnt_0+2
 12900 03:ABBD: 70 03        	bvs	L522
 12901 03:ABBF: 49 00 80     	eor	#$8000
 12902                        L522:
 12903 03:ABC2: 10 03        	bpl	L523
 12904 03:ABC4: 82 1F 00     	brl	L10210
 12905                        L523:
 12906                        ;   {
 12907                        	.line	3727
 12908                        ;      * (unsigned int *) bufAddr = pio_inword( ad
                    drDataReg );
 12909                        	.line	3728
 12910 03:ABC7: D4 04        	pei	<L519+addrDataReg_0
 12911 03:ABC9: 22 20 A8 03  	jsl	~~pio_inword
 12912 03:ABCD: 87 06        	sta	[<L519+bufAddr_0]
 12913                        ;      bufAddr += 2;
 12914                        	.line	3729
 12915 03:ABCF: 18           	clc
 12916 03:ABD0: A9 02 00     	lda	#$2
 12917 03:ABD3: 65 06        	adc	<L519+bufAddr_0
 12918 03:ABD5: 85 06        	sta	<L519+bufAddr_0
 12919 03:ABD7: 90 02        	bcc	L524
 12920 03:ABD9: E6 08        	inc	<L519+bufAddr_0+2
 12921                        L524:
 12922                        ;      wordCnt -- ;
 12923                        	.line	3730
  Thu Dec  3 2020 22:25                                                Page 245


 12924 03:ABDB: A5 0A        	lda	<L519+wordCnt_0
 12925 03:ABDD: D0 02        	bne	L525
 12926 03:ABDF: C6 0C        	dec	<L519+wordCnt_0+2
 12927                        L525:
 12928 03:ABE1: C6 0A        	dec	<L519+wordCnt_0
 12929                        ;   }
 12930                        	.line	3731
 12931 03:ABE3: 82 CC FF     	brl	L10209
 12932                        L10210:
 12933                        ;}
 12934                        	.line	3732
 12935                        L526:
 12936 03:ABE6: A5 02        	lda	<L519+2
 12937 03:ABE8: 85 0C        	sta	<L519+2+10
 12938 03:ABEA: A5 01        	lda	<L519+1
 12939 03:ABEC: 85 0B        	sta	<L519+1+10
 12940 03:ABEE: 2B           	pld
 12941 03:ABEF: 3B           	tsc
 12942 03:ABF0: 18           	clc
 12943 03:ABF1: 69 0A 00     	adc	#L519+10
 12944 03:ABF4: 1B           	tcs
 12945 03:ABF5: 6B           	rtl
 12946                        	.endblock	3732
 12947             00000000   L519	equ	0
 12948             00000001   L520	equ	1
 12949 03:ABF6:              	ends
 12950                        	efunc
 12951                        	.endfunc	3732,1,0
 12952                        	.line	3732
 12953                        ;
 12954                        ;//***********************************************
                    **************
 12955                        ;
 12956                        ;static void pio_rep_outword( unsigned char addrDa
                    taReg,
 12957                        ;                      unsigned char * bufAddr,
 12958                        ;                      long wordCnt )
 12959                        ;
 12960                        ;{
 12961                        	.line	3736
 12962                        	.line	3740
 12963                        	FXHDD
 12964                        	func
 12965                        	.function	3740
 12966                        ~~pio_rep_outword:
 12967                        	longa	on
 12968                        	longi	on
 12969 03:ABF6: 3B           	tsc
 12970 03:ABF7: 38           	sec
 12971 03:ABF8: E9 00 00     	sbc	#L527
 12972 03:ABFB: 1B           	tcs
 12973 03:ABFC: 0B           	phd
 12974 03:ABFD: 5B           	tcd
 12975             00000004   addrDataReg_0	set	4
 12976             00000006   bufAddr_0	set	6
 12977             0000000A   wordCnt_0	set	10
 12978                        	.block	3740
 12979                        ;
  Thu Dec  3 2020 22:25                                                Page 246


 12980                        ;   // Warning: Avoid calling this function with
 12981                        ;   // wordCnt > 16384 (transfers 32768 bytes).
 12982                        ;
 12983                        ;   //!!! repeat write a 16-bit register (ATA Data
                     register when
 12984                        ;   //!!! ATA status is BSY=0 DRQ=1). For example:
 12985                        ;
 12986                        ;   while ( wordCnt > 0 )
 12987                        	.sym	addrDataReg,4,14,6,8
 12988                        	.sym	bufAddr,6,142,6,32
 12989                        	.sym	wordCnt,10,7,6,32
 12990                        	.line	3748
 12991                        L10211:
 12992 03:ABFE: 38           	sec
 12993 03:ABFF: A9 00 00     	lda	#$0
 12994 03:AC02: E5 0A        	sbc	<L527+wordCnt_0
 12995 03:AC04: A9 00 00     	lda	#$0
 12996 03:AC07: E5 0C        	sbc	<L527+wordCnt_0+2
 12997 03:AC09: 70 03        	bvs	L530
 12998 03:AC0B: 49 00 80     	eor	#$8000
 12999                        L530:
 13000 03:AC0E: 10 03        	bpl	L531
 13001 03:AC10: 82 24 00     	brl	L10212
 13002                        L531:
 13003                        ;   {
 13004                        	.line	3749
 13005                        ;      pio_outword( addrDataReg, * (unsigned int *
                    ) bufAddr );
 13006                        	.line	3750
 13007 03:AC13: A7 06        	lda	[<L527+bufAddr_0]
 13008 03:AC15: 48           	pha
 13009 03:AC16: A5 04        	lda	<L527+addrDataReg_0
 13010 03:AC18: 29 FF 00     	and	#$ff
 13011 03:AC1B: 48           	pha
 13012 03:AC1C: 22 5C A8 03  	jsl	~~pio_outword
 13013                        ;      bufAddr += 2;
 13014                        	.line	3751
 13015 03:AC20: 18           	clc
 13016 03:AC21: A9 02 00     	lda	#$2
 13017 03:AC24: 65 06        	adc	<L527+bufAddr_0
 13018 03:AC26: 85 06        	sta	<L527+bufAddr_0
 13019 03:AC28: 90 02        	bcc	L532
 13020 03:AC2A: E6 08        	inc	<L527+bufAddr_0+2
 13021                        L532:
 13022                        ;      wordCnt -- ;
 13023                        	.line	3752
 13024 03:AC2C: A5 0A        	lda	<L527+wordCnt_0
 13025 03:AC2E: D0 02        	bne	L533
 13026 03:AC30: C6 0C        	dec	<L527+wordCnt_0+2
 13027                        L533:
 13028 03:AC32: C6 0A        	dec	<L527+wordCnt_0
 13029                        ;   }
 13030                        	.line	3753
 13031 03:AC34: 82 C7 FF     	brl	L10211
 13032                        L10212:
 13033                        ;}
 13034                        	.line	3754
 13035                        L534:
  Thu Dec  3 2020 22:25                                                Page 247


 13036 03:AC37: A5 02        	lda	<L527+2
 13037 03:AC39: 85 0C        	sta	<L527+2+10
 13038 03:AC3B: A5 01        	lda	<L527+1
 13039 03:AC3D: 85 0B        	sta	<L527+1+10
 13040 03:AC3F: 2B           	pld
 13041 03:AC40: 3B           	tsc
 13042 03:AC41: 18           	clc
 13043 03:AC42: 69 0A 00     	adc	#L527+10
 13044 03:AC45: 1B           	tcs
 13045 03:AC46: 6B           	rtl
 13046                        	.endblock	3754
 13047             00000000   L527	equ	0
 13048             00000001   L528	equ	1
 13049 03:AC47:              	ends
 13050                        	efunc
 13051                        	.endfunc	3754,1,0
 13052                        	.line	3754
 13053                        ;
 13054                        ;//***********************************************
                    **************
 13055                        ;
 13056                        ;static void pio_rep_indword( unsigned char addrDa
                    taReg,
 13057                        ;                      unsigned char * bufAddr,
 13058                        ;                      long dwordCnt )
 13059                        ;
 13060                        ;{
 13061                        	.line	3758
 13062                        	.line	3762
 13063                        	FXHDD
 13064                        	func
 13065                        	.function	3762
 13066                        ~~pio_rep_indword:
 13067                        	longa	on
 13068                        	longi	on
 13069 03:AC47: 3B           	tsc
 13070 03:AC48: 38           	sec
 13071 03:AC49: E9 04 00     	sbc	#L535
 13072 03:AC4C: 1B           	tcs
 13073 03:AC4D: 0B           	phd
 13074 03:AC4E: 5B           	tcd
 13075             00000004   addrDataReg_0	set	4
 13076             00000006   bufAddr_0	set	6
 13077             0000000A   dwordCnt_0	set	10
 13078                        	.block	3762
 13079                        ;
 13080                        ;   // Warning: Avoid calling this function with
 13081                        ;   // dwordCnt > 8192 (transfers 32768 bytes).
 13082                        ;
 13083                        ;   //!!! repeat read a 32-bit register (ATA Data 
                    register when
 13084                        ;   //!!! ATA status is BSY=0 DRQ=1). For example:
 13085                        ;
 13086                        ;   while ( dwordCnt > 0 )
 13087                        	.sym	addrDataReg,4,14,6,8
 13088                        	.sym	bufAddr,6,142,6,32
 13089                        	.sym	dwordCnt,10,7,6,32
 13090                        	.line	3770
  Thu Dec  3 2020 22:25                                                Page 248


 13091                        L10213:
 13092 03:AC4F: 38           	sec
 13093 03:AC50: A9 00 00     	lda	#$0
 13094 03:AC53: E5 0E        	sbc	<L535+dwordCnt_0
 13095 03:AC55: A9 00 00     	lda	#$0
 13096 03:AC58: E5 10        	sbc	<L535+dwordCnt_0+2
 13097 03:AC5A: 70 03        	bvs	L538
 13098 03:AC5C: 49 00 80     	eor	#$8000
 13099                        L538:
 13100 03:AC5F: 10 03        	bpl	L539
 13101 03:AC61: 82 2C 00     	brl	L10214
 13102                        L539:
 13103                        ;   {
 13104                        	.line	3771
 13105                        ;      * (unsigned long *) bufAddr = pio_indword( 
                    addrDataReg );
 13106                        	.line	3772
 13107 03:AC64: D4 08        	pei	<L535+addrDataReg_0
 13108 03:AC66: 22 91 A8 03  	jsl	~~pio_indword
 13109 03:AC6A: 85 01        	sta	<R0
 13110 03:AC6C: 86 03        	stx	<R0+2
 13111 03:AC6E: A5 01        	lda	<R0
 13112 03:AC70: 87 0A        	sta	[<L535+bufAddr_0]
 13113 03:AC72: A5 03        	lda	<R0+2
 13114 03:AC74: A0 02 00     	ldy	#$2
 13115 03:AC77: 97 0A        	sta	[<L535+bufAddr_0],Y
 13116                        ;      bufAddr += 4;
 13117                        	.line	3773
 13118 03:AC79: 18           	clc
 13119 03:AC7A: A9 04 00     	lda	#$4
 13120 03:AC7D: 65 0A        	adc	<L535+bufAddr_0
 13121 03:AC7F: 85 0A        	sta	<L535+bufAddr_0
 13122 03:AC81: 90 02        	bcc	L540
 13123 03:AC83: E6 0C        	inc	<L535+bufAddr_0+2
 13124                        L540:
 13125                        ;      dwordCnt -- ;
 13126                        	.line	3774
 13127 03:AC85: A5 0E        	lda	<L535+dwordCnt_0
 13128 03:AC87: D0 02        	bne	L541
 13129 03:AC89: C6 10        	dec	<L535+dwordCnt_0+2
 13130                        L541:
 13131 03:AC8B: C6 0E        	dec	<L535+dwordCnt_0
 13132                        ;   }
 13133                        	.line	3775
 13134 03:AC8D: 82 BF FF     	brl	L10213
 13135                        L10214:
 13136                        ;}
 13137                        	.line	3776
 13138                        L542:
 13139 03:AC90: A5 06        	lda	<L535+2
 13140 03:AC92: 85 10        	sta	<L535+2+10
 13141 03:AC94: A5 05        	lda	<L535+1
 13142 03:AC96: 85 0F        	sta	<L535+1+10
 13143 03:AC98: 2B           	pld
 13144 03:AC99: 3B           	tsc
 13145 03:AC9A: 18           	clc
 13146 03:AC9B: 69 0E 00     	adc	#L535+10
 13147 03:AC9E: 1B           	tcs
  Thu Dec  3 2020 22:25                                                Page 249


 13148 03:AC9F: 6B           	rtl
 13149                        	.endblock	3776
 13150             00000004   L535	equ	4
 13151             00000005   L536	equ	5
 13152 03:ACA0:              	ends
 13153                        	efunc
 13154                        	.endfunc	3776,5,4
 13155                        	.line	3776
 13156                        ;
 13157                        ;//***********************************************
                    **************
 13158                        ;
 13159                        ;static void pio_rep_outdword( unsigned char addrD
                    ataReg,
 13160                        ;                       unsigned char * bufAddr,
 13161                        ;                       long dwordCnt )
 13162                        ;
 13163                        ;{
 13164                        	.line	3780
 13165                        	.line	3784
 13166                        	FXHDD
 13167                        	func
 13168                        	.function	3784
 13169                        ~~pio_rep_outdword:
 13170                        	longa	on
 13171                        	longi	on
 13172 03:ACA0: 3B           	tsc
 13173 03:ACA1: 38           	sec
 13174 03:ACA2: E9 00 00     	sbc	#L543
 13175 03:ACA5: 1B           	tcs
 13176 03:ACA6: 0B           	phd
 13177 03:ACA7: 5B           	tcd
 13178             00000004   addrDataReg_0	set	4
 13179             00000006   bufAddr_0	set	6
 13180             0000000A   dwordCnt_0	set	10
 13181                        	.block	3784
 13182                        ;
 13183                        ;   // Warning: Avoid calling this function with
 13184                        ;   // dwordCnt > 8192 (transfers 32768 bytes).
 13185                        ;
 13186                        ;   //!!! repeat write a 32-bit register (ATA Data
                     register when
 13187                        ;   //!!! ATA status is BSY=0 DRQ=1). For example:
 13188                        ;
 13189                        ;   while ( dwordCnt > 0 )
 13190                        	.sym	addrDataReg,4,14,6,8
 13191                        	.sym	bufAddr,6,142,6,32
 13192                        	.sym	dwordCnt,10,7,6,32
 13193                        	.line	3792
 13194                        L10215:
 13195 03:ACA8: 38           	sec
 13196 03:ACA9: A9 00 00     	lda	#$0
 13197 03:ACAC: E5 0A        	sbc	<L543+dwordCnt_0
 13198 03:ACAE: A9 00 00     	lda	#$0
 13199 03:ACB1: E5 0C        	sbc	<L543+dwordCnt_0+2
 13200 03:ACB3: 70 03        	bvs	L546
 13201 03:ACB5: 49 00 80     	eor	#$8000
 13202                        L546:
  Thu Dec  3 2020 22:25                                                Page 250


 13203 03:ACB8: 10 03        	bpl	L547
 13204 03:ACBA: 82 2A 00     	brl	L10216
 13205                        L547:
 13206                        ;   {
 13207                        	.line	3793
 13208                        ;      pio_outdword( addrDataReg, * (unsigned long
                     *) bufAddr );
 13209                        	.line	3794
 13210 03:ACBD: A0 02 00     	ldy	#$2
 13211 03:ACC0: B7 06        	lda	[<L543+bufAddr_0],Y
 13212 03:ACC2: 48           	pha
 13213 03:ACC3: A7 06        	lda	[<L543+bufAddr_0]
 13214 03:ACC5: 48           	pha
 13215 03:ACC6: A5 04        	lda	<L543+addrDataReg_0
 13216 03:ACC8: 29 FF 00     	and	#$ff
 13217 03:ACCB: 48           	pha
 13218 03:ACCC: 22 D3 A8 03  	jsl	~~pio_outdword
 13219                        ;      bufAddr += 4;
 13220                        	.line	3795
 13221 03:ACD0: 18           	clc
 13222 03:ACD1: A9 04 00     	lda	#$4
 13223 03:ACD4: 65 06        	adc	<L543+bufAddr_0
 13224 03:ACD6: 85 06        	sta	<L543+bufAddr_0
 13225 03:ACD8: 90 02        	bcc	L548
 13226 03:ACDA: E6 08        	inc	<L543+bufAddr_0+2
 13227                        L548:
 13228                        ;      dwordCnt -- ;
 13229                        	.line	3796
 13230 03:ACDC: A5 0A        	lda	<L543+dwordCnt_0
 13231 03:ACDE: D0 02        	bne	L549
 13232 03:ACE0: C6 0C        	dec	<L543+dwordCnt_0+2
 13233                        L549:
 13234 03:ACE2: C6 0A        	dec	<L543+dwordCnt_0
 13235                        ;   }
 13236                        	.line	3797
 13237 03:ACE4: 82 C1 FF     	brl	L10215
 13238                        L10216:
 13239                        ;}
 13240                        	.line	3798
 13241                        L550:
 13242 03:ACE7: A5 02        	lda	<L543+2
 13243 03:ACE9: 85 0C        	sta	<L543+2+10
 13244 03:ACEB: A5 01        	lda	<L543+1
 13245 03:ACED: 85 0B        	sta	<L543+1+10
 13246 03:ACEF: 2B           	pld
 13247 03:ACF0: 3B           	tsc
 13248 03:ACF1: 18           	clc
 13249 03:ACF2: 69 0A 00     	adc	#L543+10
 13250 03:ACF5: 1B           	tcs
 13251 03:ACF6: 6B           	rtl
 13252                        	.endblock	3798
 13253             00000000   L543	equ	0
 13254             00000001   L544	equ	1
 13255 03:ACF7:              	ends
 13256                        	efunc
 13257                        	.endfunc	3798,1,0
 13258                        	.line	3798
 13259                        ;
  Thu Dec  3 2020 22:25                                                Page 251


 13260                        ;
 13261                        ;//***********************************************
                    **************
 13262                        ;//
 13263                        ;// Command timing functions
 13264                        ;//
 13265                        ;//***********************************************
                    ***************
 13266                        ;
 13267                        ;
 13268                        ;static long tmr_cmd_start_time;      // command s
                    tart time - see the
 13269                        ;                              // tmr_set_timeout(
                    ) and
 13270                        ;                              // tmr_chk_timeout(
                    ) functions.
 13271                        ;
 13272                        ;//***********************************************
                    **************
 13273                        ;//
 13274                        ;// tmr_set_timeout() - get the command start time
 13275                        ;//
 13276                        ;//***********************************************
                    ***************
 13277                        ;
 13278                        ;static void tmr_set_timeout( void )
 13279                        ;
 13280                        ;{
 13281                        	.line	3818
 13282                        	.line	3820
 13283                        	FXHDD
 13284                        	func
 13285                        	.function	3820
 13286                        ~~tmr_set_timeout:
 13287                        	longa	on
 13288                        	longi	on
 13289 03:ACF7: 3B           	tsc
 13290 03:ACF8: 38           	sec
 13291 03:ACF9: E9 00 00     	sbc	#L551
 13292 03:ACFC: 1B           	tcs
 13293 03:ACFD: 0B           	phd
 13294 03:ACFE: 5B           	tcd
 13295                        	.block	3820
 13296                        ;	k_debug_long("tmr_set_timeout:",tmr_cmd_start_ti
                    me);
 13297                        	.line	3821
 13298 03:ACFF: AD xx xx     	lda	|~~tmr_cmd_start_time+2
 13299 03:AD02: 48           	pha
 13300 03:AD03: AD xx xx     	lda	|~~tmr_cmd_start_time
 13301 03:AD06: 48           	pha
 13302 03:AD07: F4 xx xx     	pea	#^L407
 13303 03:AD0A: F4 xx xx     	pea	#<L407
 13304 03:AD0D: 22 xx xx xx  	jsl	~~k_debug_long
 13305                        ;   // get the command start time
 13306                        ;   tmr_cmd_start_time = 0L;// k_get_systemtimer()
                    ;
 13307                        	.line	3823
 13308 03:AD11: 9C xx xx     	stz	|~~tmr_cmd_start_time
  Thu Dec  3 2020 22:25                                                Page 252


 13309 03:AD14: 9C xx xx     	stz	|~~tmr_cmd_start_time+2
 13310                        ;}
 13311                        	.line	3824
 13312                        L554:
 13313 03:AD17: 2B           	pld
 13314 03:AD18: 3B           	tsc
 13315 03:AD19: 18           	clc
 13316 03:AD1A: 69 00 00     	adc	#L551
 13317 03:AD1D: 1B           	tcs
 13318 03:AD1E: 6B           	rtl
 13319                        	.endblock	3824
 13320             00000000   L551	equ	0
 13321             00000001   L552	equ	1
 13322 03:AD1F:              	ends
 13323                        	efunc
 13324                        	.endfunc	3824,1,0
 13325                        	.line	3824
 13326                        	data
 13327                        L407:
 13328 00:0449: 74 6D 72 5F  	db	$74,$6D,$72,$5F,$73,$65,$74,$5F,$74,$69,
                    $6D,$65,$6F,$75,$74
       00:044D: 73 65 74 5F 
       00:0451: 74 69 6D 65 
       00:0455: 6F 75 74 
 13329 00:0458: 3A 00        	db	$3A,$00
 13330 00:045A:              	ends
 13331                        ;
 13332                        ;//***********************************************
                    **************
 13333                        ;//
 13334                        ;// tmr_chk_timeout() - check for command timeout.
 13335                        ;//
 13336                        ;// Gives non-zero return if command has timed out
                    .
 13337                        ;//
 13338                        ;//***********************************************
                    ***************
 13339                        ;
 13340                        ;static int tmr_chk_timeout( void )
 13341                        ;
 13342                        ;{
 13343                        	.line	3834
 13344                        	.line	3836
 13345                        	FXHDD
 13346                        	func
 13347                        	.function	3836
 13348                        ~~tmr_chk_timeout:
 13349                        	longa	on
 13350                        	longi	on
 13351 03:AD1F: 3B           	tsc
 13352 03:AD20: 38           	sec
 13353 03:AD21: E9 08 00     	sbc	#L556
 13354 03:AD24: 1B           	tcs
 13355 03:AD25: 0B           	phd
 13356 03:AD26: 5B           	tcd
 13357                        	.block	3836
 13358                        ;   long curTime;
 13359                        ;
  Thu Dec  3 2020 22:25                                                Page 253


 13360                        ;   // get current time
 13361                        ;   curTime++; //= k_get_systemtimer();
 13362             00000000   curTime_1	set	0
 13363                        	.sym	curTime,0,7,1,32
 13364                        	.line	3840
 13365 03:AD27: E6 05        	inc	<L557+curTime_1
 13366 03:AD29: D0 02        	bne	L559
 13367 03:AD2B: E6 07        	inc	<L557+curTime_1+2
 13368                        L559:
 13369                        ;
 13370                        ;   k_debug_long("reg_reset:tmr_cmd_start_time:",t
                    mr_cmd_start_time);
 13371                        	.line	3842
 13372 03:AD2D: AD xx xx     	lda	|~~tmr_cmd_start_time+2
 13373 03:AD30: 48           	pha
 13374 03:AD31: AD xx xx     	lda	|~~tmr_cmd_start_time
 13375 03:AD34: 48           	pha
 13376 03:AD35: F4 xx xx     	pea	#^L555
 13377 03:AD38: F4 xx xx     	pea	#<L555
 13378 03:AD3B: 22 xx xx xx  	jsl	~~k_debug_long
 13379                        ;   k_debug_long("reg_reset:tmr_chk_timeout:",curT
                    ime);
 13380                        	.line	3843
 13381 03:AD3F: D4 07        	pei	<L557+curTime_1+2
 13382 03:AD41: D4 05        	pei	<L557+curTime_1
 13383 03:AD43: F4 xx xx     	pea	#^L555+30
 13384 03:AD46: F4 xx xx     	pea	#<L555+30
 13385 03:AD49: 22 xx xx xx  	jsl	~~k_debug_long
 13386                        ;
 13387                        ;   // timed out yet ?
 13388                        ;   if ( curTime >= ( tmr_cmd_start_time + ( TMR_T
                    IME_OUT * SYSTEM_TIMER_TICKS_PER_SECOND ) ) )
 13389                        	.line	3846
 13390                        ;      return 1;      // yes
 13391 03:AD4D: 18           	clc
 13392 03:AD4E: A9 64 00     	lda	#$64
 13393 03:AD51: 6D xx xx     	adc	|~~tmr_cmd_start_time
 13394 03:AD54: 85 01        	sta	<R0
 13395 03:AD56: A9 00 00     	lda	#$0
 13396 03:AD59: 6D xx xx     	adc	|~~tmr_cmd_start_time+2
 13397 03:AD5C: 85 03        	sta	<R0+2
 13398 03:AD5E: 38           	sec
 13399 03:AD5F: A5 05        	lda	<L557+curTime_1
 13400 03:AD61: E5 01        	sbc	<R0
 13401 03:AD63: A5 07        	lda	<L557+curTime_1+2
 13402 03:AD65: E5 03        	sbc	<R0+2
 13403 03:AD67: 70 03        	bvs	L560
 13404 03:AD69: 49 00 80     	eor	#$8000
 13405                        L560:
 13406 03:AD6C: 30 03        	bmi	L561
 13407 03:AD6E: 82 0D 00     	brl	L10217
 13408                        L561:
 13409                        	.line	3847
 13410 03:AD71: A9 01 00     	lda	#$1
 13411                        L562:
 13412 03:AD74: A8           	tay
 13413 03:AD75: 2B           	pld
 13414 03:AD76: 3B           	tsc
  Thu Dec  3 2020 22:25                                                Page 254


 13415 03:AD77: 18           	clc
 13416 03:AD78: 69 08 00     	adc	#L556
 13417 03:AD7B: 1B           	tcs
 13418 03:AD7C: 98           	tya
 13419 03:AD7D: 6B           	rtl
 13420                        ;
 13421                        ;   // no timeout yet
 13422                        ;   return 0;
 13423                        L10217:
 13424                        	.line	3850
 13425 03:AD7E: A9 00 00     	lda	#$0
 13426 03:AD81: 82 F0 FF     	brl	L562
 13427                        ;}
 13428                        	.line	3851
 13429                        	.endblock	3851
 13430             00000008   L556	equ	8
 13431             00000005   L557	equ	5
 13432 03:AD84:              	ends
 13433                        	efunc
 13434                        	.endfunc	3851,5,8
 13435                        	.line	3851
 13436                        	data
 13437                        L555:
 13438 00:045A: 72 65 67 5F  	db	$72,$65,$67,$5F,$72,$65,$73,$65,$74,$3A,
                    $74,$6D,$72,$5F,$63
       00:045E: 72 65 73 65 
       00:0462: 74 3A 74 6D 
       00:0466: 72 5F 63 
 13439 00:0469: 6D 64 5F 73  	db	$6D,$64,$5F,$73,$74,$61,$72,$74,$5F,$74,
                    $69,$6D,$65,$3A,$00
       00:046D: 74 61 72 74 
       00:0471: 5F 74 69 6D 
       00:0475: 65 3A 00 
 13440 00:0478: 72 65 67 5F  	db	$72,$65,$67,$5F,$72,$65,$73,$65,$74,$3A,
                    $74,$6D,$72,$5F,$63
       00:047C: 72 65 73 65 
       00:0480: 74 3A 74 6D 
       00:0484: 72 5F 63 
 13441 00:0487: 68 6B 5F 74  	db	$68,$6B,$5F,$74,$69,$6D,$65,$6F,$75,$74,
                    $3A,$00
       00:048B: 69 6D 65 6F 
       00:048F: 75 74 3A 00 
 13442 00:0493:              	ends
 13443                        ;
 13444                        ;
 13445                        ;int SYSTEM_WAIT_INTR_OR_TIMEOUT( void )
 13446                        ;{
 13447                        	.line	3854
 13448                        	.line	3855
 13449                        	FXHDD
 13450                        	xdef	~~SYSTEM_WAIT_INTR_OR_TIMEOUT
 13451                        	func
 13452                        	.function	3855
 13453                        ~~SYSTEM_WAIT_INTR_OR_TIMEOUT:
 13454                        	longa	on
 13455                        	longi	on
 13456 03:AD84: 3B           	tsc
 13457 03:AD85: 38           	sec
  Thu Dec  3 2020 22:25                                                Page 255


 13458 03:AD86: E9 00 00     	sbc	#L564
 13459 03:AD89: 1B           	tcs
 13460 03:AD8A: 0B           	phd
 13461 03:AD8B: 5B           	tcd
 13462                        	.block	3855
 13463                        ;#asm
 13464                        	.line	3856
 13465                        ;	NOP
 13466                        ;	NOP
 13467                        ;	NOP
 13468                        ;	NOP
 13469                        ;	NOP
 13470                        ;	NOP
 13471                        ;	NOP
 13472                        ;	NOP
 13473                        ;	NOP
 13474                        ;	NOP
 13475                        ;#endasm
 13476                        	asmstart
 13477 03:AD8C: EA           	NOP
 13478 03:AD8D: EA           	NOP
 13479 03:AD8E: EA           	NOP
 13480 03:AD8F: EA           	NOP
 13481 03:AD90: EA           	NOP
 13482 03:AD91: EA           	NOP
 13483 03:AD92: EA           	NOP
 13484 03:AD93: EA           	NOP
 13485 03:AD94: EA           	NOP
 13486 03:AD95: EA           	NOP
 13487                        	asmend
 13488                        ;	return 0;
 13489                        	.line	3868
 13490 03:AD96: A9 00 00     	lda	#$0
 13491                        L567:
 13492 03:AD99: A8           	tay
 13493 03:AD9A: 2B           	pld
 13494 03:AD9B: 3B           	tsc
 13495 03:AD9C: 18           	clc
 13496 03:AD9D: 69 00 00     	adc	#L564
 13497 03:ADA0: 1B           	tcs
 13498 03:ADA1: 98           	tya
 13499 03:ADA2: 6B           	rtl
 13500                        ;}
 13501                        	.line	3869
 13502                        	.endblock	3869
 13503             00000000   L564	equ	0
 13504             00000001   L565	equ	1
 13505 03:ADA3:              	ends
 13506                        	efunc
 13507                        	.endfunc	3869,1,0
 13508                        	.line	3869
 13509                        ;
 13510                        ;// end mindrvr.c
 13511                        ;
 13512                        ;#endif
 13513                        ;
 13514                        	.line	3873
 13515                        	.file	"G:\devprojects\c256Foenix\fxos\FXOSWork
  Thu Dec  3 2020 22:25                                                Page 256


                    space\FXOSv1\src\MINDRVR.C",3854
 13516                        	xref	~~k_mem_allocate_heap
 13517                        	xref	~~k_debug_byte_array
 13518                        	xref	~~k_debug_bits
 13519                        	xref	~~k_debug_hex
 13520                        	xref	~~k_debug_long
 13521                        	xref	~~k_debug_integer
 13522                        	xref	~~k_debug_string
 13523                        	udata
 13524                        ~~tmr_cmd_start_time
 13525 00:0000:              	ds	4
 13526 00:0004:              	ends
 13527                        	udata
 13528                        	xdef	~~pio_bmide_base_addr
 13529                        ~~pio_bmide_base_addr
 13530 00:0004:              	ds	4
 13531 00:0008:              	ends
 13532                        	udata
 13533                        	xdef	~~reg_config_info
 13534                        ~~reg_config_info
 13535 00:0008:              	ds	4
 13536 00:000C:              	ends
 13537                        	udata
 13538                        	xdef	~~reg_cmd_info
 13539                        ~~reg_cmd_info
 13540 00:000C:              	ds	41
 13541 00:0035:              	ends
 13542                        	udata
 13543                        	xdef	~~int_bmide_status
 13544                        ~~int_bmide_status
 13545 00:0035:              	ds	1
 13546 00:0036:              	ends
 13547                        	udata
 13548                        	xdef	~~int_ata_status
 13549                        ~~int_ata_status
 13550 00:0036:              	ds	1
 13551 00:0037:              	ends
 13552                        	.sym	~~exec_pio_data_out_cmd,~~exec_pio_data_
                    out_cmd,69,3,0
 13553                        	.sym	~~exec_pio_data_in_cmd,~~exec_pio_data_i
                    n_cmd,69,2,0
 13554                        	.sym	~~exec_non_data_cmd,~~exec_non_data_cmd,
                    69,3,0
 13555                        	.sym	~~k_read_lba_sector_old,~~k_read_lba_sec
                    tor_old,65,2,0
 13556                        	.sym	~~k_ide_get_info_old,~~k_ide_get_info_ol
                    d,1102,2,32
 13557                        	.sym	~~ide_select_drive,~~ide_select_drive,65
                    ,2,0
 13558                        	.sym	~~k_ide_read_sector,~~k_ide_read_sector,
                    1102,2,32
 13559                        	.sym	~~k_ide_not_drq,~~k_ide_not_drq,65,2,0
 13560                        	.sym	~~k_ide_drive_ready_notbusy,~~k_ide_driv
                    e_ready_notbusy,65,2,0
 13561                        	.sym	~~k_ide_drive_ready,~~k_ide_drive_ready,
                    65,2,0
 13562                        	.sym	~~tmr_chk_timeout,~~tmr_chk_timeout,69,3
                    ,0
  Thu Dec  3 2020 22:25                                                Page 257


 13563                        	.sym	~~tmr_set_timeout,~~tmr_set_timeout,65,3
                    ,0
 13564                        	.sym	~~tmr_cmd_start_time,~~tmr_cmd_start_tim
                    e,7,3,32
 13565                        	.sym	~~pio_writeBusMstrStatus,~~pio_writeBusM
                    strStatus,65,3,0
 13566                        	.sym	~~pio_writeBusMstrCmd,~~pio_writeBusMstr
                    Cmd,65,3,0
 13567                        	.sym	~~pio_readBusMstrStatus,~~pio_readBusMst
                    rStatus,78,3,0
 13568                        	.sym	~~pio_readBusMstrCmd,~~pio_readBusMstrCm
                    d,78,3,0
 13569                        	.sym	~~pio_rep_outdword,~~pio_rep_outdword,65
                    ,3,0
 13570                        	.sym	~~pio_rep_indword,~~pio_rep_indword,65,3
                    ,0
 13571                        	.sym	~~pio_rep_outword,~~pio_rep_outword,65,3
                    ,0
 13572                        	.sym	~~pio_rep_inword,~~pio_rep_inword,65,3,0
 13573                        	.sym	~~pio_rep_outbyte,~~pio_rep_outbyte,65,3
                    ,0
 13574                        	.sym	~~pio_rep_inbyte,~~pio_rep_inbyte,65,3,0
 13575                        	.sym	~~pio_drq_block_out,~~pio_drq_block_out,
                    65,3,0
 13576                        	.sym	~~pio_drq_block_in,~~pio_drq_block_in,65
                    ,3,0
 13577                        	.sym	~~pio_outdword,~~pio_outdword,65,3,0
 13578                        	.sym	~~pio_indword,~~pio_indword,82,3,0
 13579                        	.sym	~~pio_outword,~~pio_outword,65,3,0
 13580                        	.sym	~~pio_inword,~~pio_inword,80,3,0
 13581                        	.sym	~~pio_outbyte,~~pio_outbyte,65,3,0
 13582                        	.sym	~~pio_inbyte,~~pio_inbyte,78,3,0
 13583                        	.sym	~~sub_wait_poll,~~sub_wait_poll,65,3,0
 13584                        	.sym	~~sub_select,~~sub_select,69,3,0
 13585                        	.sym	~~sub_trace_command,~~sub_trace_command,
                    65,3,0
 13586                        	.sym	~~sub_setup_command,~~sub_setup_command,
                    65,3,0
 13587                        	.sym	~~pio_reg_addrs,~~pio_reg_addrs,1134,2,3
                    2,9
 13588                        	.sym	~~pio_bmide_base_addr,~~pio_bmide_base_a
                    ddr,142,2,32
 13589                        	.sym	ide_private_data,0,10,14,8,65
 13590                        	.sym	~~reg_packet,~~reg_packet,69,2,0
 13591                        	.sym	~~reg_pio_data_out_lba48,~~reg_pio_data_
                    out_lba48,69,2,0
 13592                        	.sym	~~reg_pio_data_out_lba28,~~reg_pio_data_
                    out_lba28,69,2,0
 13593                        	.sym	~~reg_pio_data_in_lba48,~~reg_pio_data_i
                    n_lba48,69,2,0
 13594                        	.sym	~~reg_pio_data_in_lba28,~~reg_pio_data_i
                    n_lba28,69,2,0
 13595                        	.sym	~~reg_non_data_lba48,~~reg_non_data_lba4
                    8,69,2,0
 13596                        	.sym	~~reg_non_data_lba28,~~reg_non_data_lba2
                    8,69,2,0
 13597                        	.sym	~~reg_reset,~~reg_reset,69,2,0
 13598                        	.sym	~~reg_config,~~reg_config,69,2,0
  Thu Dec  3 2020 22:25                                                Page 258


 13599                        	.sym	~~k_ide_poll,~~k_ide_poll,65,2,0
 13600                        	.sym	~~k_read_hd_sector,~~k_read_hd_sector,78
                    ,2,0
 13601                        	.sym	~~k_read_lba_sector,~~k_read_lba_sector,
                    65,2,0
 13602                        	.sym	~~k_ide_diagnostic,~~k_ide_diagnostic,65
                    ,2,0
 13603                        	.sym	~~k_ide_get_info,~~k_ide_get_info,1102,2
                    ,32
 13604                        	.sym	~~k_ide_wait,~~k_ide_wait,65,2,0
 13605                        	.sym	~~k_ide_busy,~~k_ide_busy,65,2,0
 13606                        	.sym	~~k_ide_isdrq,~~k_ide_isdrq,65,2,0
 13607                        	.sym	~~k_ide_isready,~~k_ide_isready,65,2,0
 13608                        	.sym	~~k_ide_isbusy,~~k_ide_isbusy,65,2,0
 13609                        	.sym	~~k_ide_init,~~k_ide_init,65,2,0
 13610                        	.sym	~~reg_config_info,~~reg_config_info,101,
                    2,0,2
 13611                        	.sym	~~reg_cmd_info,~~reg_cmd_info,10,2,328,6
                    4
 13612                        	.sym	~~pio_xfer_width,~~pio_xfer_width,14,2,8
 13613                        	.sym	~~int_use_intr_flag,~~int_use_intr_flag,
                    14,2,8
 13614                        	.sym	~~int_bmide_status,~~int_bmide_status,14
                    ,2,8
 13615                        	.sym	~~int_ata_status,~~int_ata_status,14,2,8
 13616                        	.sym	~~SYSTEM_WAIT_INTR_OR_TIMEOUT,~~SYSTEM_W
                    AIT_INTR_OR_TIMEOUT,69,2,0
 13617                        	.sym	PCOMMANDARGS,0,138,14,32,63
 13618                        	.sym	COMMANDARGS,0,10,14,64,63
 13619                        	.sym	PTOKENIZESTATE,0,133,14,32
 13620                        	.sym	TOKENIZESTATE,0,5,14,16
 13621                        	.sym	PTOKEN,0,138,14,32,62
 13622                        	.sym	TOKEN,0,10,14,64,62
 13623                        	.sym	PTOKENTYPE,0,133,14,32
 13624                        	.sym	TOKENTYPE,0,5,14,16
 13625                        	.sym	FXCommandHandler,0,656,14,32
 13626                        	.sym	PCONSOLECTX,0,138,14,32,61
 13627                        	.sym	CONSOLECTX,0,10,14,1144,61
 13628                        	.sym	PSPINNERCTX,0,138,14,32,60
 13629                        	.sym	SPINNERCTX,0,10,14,48,60
 13630                        	.sym	PMOUSE_MSG_STATE,0,138,14,32,59
 13631                        	.sym	MOUSE_MSG_STATE,0,10,14,184,59
 13632                        	.sym	PFXEVENTPROCESS,0,138,14,32,58
 13633                        	.sym	FXEVENTPROCESS,0,10,14,64,58
 13634                        	.sym	FXEventProc,0,641,14,32
 13635                        	.sym	PMOUSEMSGDATA,0,138,14,32,57
 13636                        	.sym	MOUSEMSGDATA,0,10,14,64,57
 13637                        	.sym	MSGIRQ,0,5,14,16
 13638                        	.sym	MAINLOOPARGS,0,10,14,16,56
 13639                        	.sym	PEACHCHILD_MSG,0,138,14,32,55
 13640                        	.sym	EACHCHILD_MSG,0,10,14,64,55
 13641                        	.sym	PCUR_PALETTE_MAP,0,138,14,32,54
 13642                        	.sym	CUR_PALETTE_MAP,0,10,14,400,54
 13643                        	.sym	PCLICKDETECTED,0,138,14,32,53
 13644                        	.sym	CLICKDETECTED,0,10,14,64,53
 13645                        	.sym	OBJECTCLICKED,0,641,14,32
 13646                        	.sym	~~k_mem_allocate_heap,~~k_mem_allocate_h
                    eap,1089,18,32
  Thu Dec  3 2020 22:25                                                Page 259


 13647                        	.sym	MemoryCallback,0,641,14,32
 13648                        	.sym	PFXMEMORYMAP,0,138,14,32,52
 13649                        	.sym	FXMEMORYMAP,0,10,14,2072,52
 13650                        	.sym	UMM_HEAP_INFO,0,10,14,256,51
 13651                        	.sym	PFXSTRING,0,138,14,32,50
 13652                        	.sym	FXSTRING,0,10,14,64,50
 13653                        	.sym	DEVICEDRIVER_COMMAND,0,656,14,32
 13654                        	.sym	DEVICEDRIVER_UNLOAD,0,654,14,32
 13655                        	.sym	DEVICEDRIVER_WRITE,0,656,14,32
 13656                        	.sym	DEVICEDRIVER_READ,0,656,14,32
 13657                        	.sym	DEVICEDRIVER_LOAD,0,654,14,32
 13658                        	.sym	PFX_BLOCK_DEVICE_DRIVER,0,138,14,32,49
 13659                        	.sym	FX_BLOCK_DEVICE_DRIVER,0,10,14,1448,49
 13660                        	.sym	PFX_DEVICE_DRIVER,0,138,14,32,48
 13661                        	.sym	FX_DEVICE_DRIVER,0,10,14,1416,48
 13662                        	.sym	~~k_debug_byte_array,~~k_debug_byte_arra
                    y,65,18,0
 13663                        	.sym	~~k_debug_bits,~~k_debug_bits,65,18,0
 13664                        	.sym	~~k_debug_hex,~~k_debug_hex,65,18,0
 13665                        	.sym	~~k_debug_long,~~k_debug_long,65,18,0
 13666                        	.sym	~~k_debug_integer,~~k_debug_integer,65,1
                    8,0
 13667                        	.sym	~~k_debug_string,~~k_debug_string,65,18,
                    0
 13668                        	.sym	PDEBUGBYTEBITS,0,138,14,32,47
 13669                        	.sym	DEBUGBYTEBITS,0,10,14,8,47
 13670                        	.sym	PFXENVIRONMENT,0,138,14,32,46
 13671                        	.sym	FXENVIRONMENT,0,10,14,96,46
 13672                        	.sym	PFXZERPOPAGE,0,138,14,32,45
 13673                        	.sym	FXZERPOPAGE,0,10,14,448,45
 13674                        	.sym	KERNELTRAPCALL,0,641,14,32
 13675                        	.sym	FOREACHNODEUNTIL,0,654,14,32
 13676                        	.sym	FOREACHNODE,0,641,14,32
 13677                        	.sym	PFXCOMBUFFER,0,138,14,32,44
 13678                        	.sym	FXCOMBUFFER,0,10,14,2080,44
 13679                        	.sym	PSUBMENULIST,0,138,14,32,43
 13680                        	.sym	SUBMENULIST,0,10,14,40,43
 13681                        	.sym	HSUBMENU,0,7,14,32
 13682                        	.sym	PSUBMENU,0,138,14,32,42
 13683                        	.sym	SUBMENU,0,10,14,64,42
 13684                        	.sym	MenuAction,0,641,14,32
 13685                        	.sym	PMENUANCHOR,0,138,14,32,41
 13686                        	.sym	MENUANCHOR,0,10,14,144,41
 13687                        	.sym	PTEXTBOX,0,138,14,32,40
 13688                        	.sym	TEXTBOX,0,10,14,144,40
 13689                        	.sym	PLISTBOX,0,138,14,32,39
 13690                        	.sym	LISTBOX,0,10,14,240,39
 13691                        	.sym	PSCROLLBAR,0,138,14,32,38
 13692                        	.sym	SCROLLBAR,0,10,14,192,38
 13693                        	.sym	PBUTTON,0,138,14,32,37
 13694                        	.sym	BUTTON,0,10,14,80,37
 13695                        	.sym	PMENUDROPDOWNDATA,0,138,14,32,36
 13696                        	.sym	MENUDROPDOWNDATA,0,10,14,3568,36
 13697                        	.sym	PMENUTAG,0,138,14,32,35
 13698                        	.sym	MENUTAG,0,10,14,112,35
 13699                        	.sym	PMENU,0,138,14,32,34
 13700                        	.sym	MENU,0,10,14,248,34
 13701                        	.sym	HMENURESOURCE,0,129,14,32
  Thu Dec  3 2020 22:25                                                Page 260


 13702                        	.sym	HTEXTBOX,0,7,14,32
 13703                        	.sym	PTEXTBOXX,0,138,14,32,33
 13704                        	.sym	TEXTBOXX,0,10,14,112,33
 13705                        	.sym	FONTMETRIC,0,10,14,32,32
 13706                        	.sym	TITLE,0,142,14,32
 13707                        	.sym	PHANDLE,0,1153,14,32
 13708                        	.sym	HANDLE,0,129,14,32
 13709                        	.sym	PWINDOWEX,0,138,14,32,31
 13710                        	.sym	WINDOWEX,0,10,14,2704,31
 13711                        	.sym	PWINDOW,0,138,14,32,30
 13712                        	.sym	WINDOW,0,10,14,2808,30
 13713                        	.sym	PDRAGDATA,0,138,14,32,29
 13714                        	.sym	DRAGDATA,0,10,14,136,29
 13715                        	.sym	PNCCLICKABLE,0,138,14,32,28
 13716                        	.sym	NCCLICKABLE,0,10,14,88,28
 13717                        	.sym	HCLICKABLE,0,7,14,32
 13718                        	.sym	PCLICKABLE,0,138,14,32,27
 13719                        	.sym	CLICKABLE,0,10,14,88,27
 13720                        	.sym	PWNDCLASS,0,138,14,32,26
 13721                        	.sym	WNDCLASS,0,10,14,256,26
 13722                        	.sym	HBRUSH,0,129,14,32
 13723                        	.sym	HCURSOR,0,129,14,32
 13724                        	.sym	HICON,0,129,14,32
 13725                        	.sym	HINSTANCE,0,129,14,32
 13726                        	.sym	FXWndProc,0,654,14,32
 13727                        	.sym	PRECT,0,138,14,32,25
 13728                        	.sym	RECT,0,10,14,64,25
 13729                        	.sym	PPOINT,0,138,14,32,24
 13730                        	.sym	POINT,0,10,14,32,24
 13731                        	.sym	PFXPROPERTY,0,138,14,32,22
 13732                        	.sym	FXPROPERTY,0,10,14,384,22
 13733                        	.sym	SCANCODE,0,14,14,8
 13734                        	.sym	KEYCODE,0,14,14,8
 13735                        	.sym	PFXPROCESSMESSAGE,0,138,14,32,21
 13736                        	.sym	FXPROCESSMESSAGE,0,10,14,112,21
 13737                        	.sym	PFXPROCESS,0,138,14,32,20
 13738                        	.sym	FXPROCESS,0,10,14,800,20
 13739                        	.sym	PDESKTOP_CONTROL,0,138,14,32,19
 13740                        	.sym	DESKTOP_CONTROL,0,10,14,392,19
 13741                        	.sym	PCONSOLE_CONTROL,0,138,14,32,18
 13742                        	.sym	CONSOLE_CONTROL,0,10,14,448,18
 13743                        	.sym	FXProcessProc,0,641,14,32
 13744                        	.sym	PFXCMDMESSAGE,0,138,14,32,17
 13745                        	.sym	FXCMDMESSAGE,0,10,14,304,17
 13746                        	.sym	PFXOSMESSAGE,0,138,14,32,16
 13747                        	.sym	FXOSMESSAGE,0,10,14,304,16
 13748                        	.sym	PINT_REGS,0,138,14,32,15
 13749                        	.sym	INT_REGS,0,10,14,104,15
 13750                        	.sym	TASK_STACK,0,10,14,32,14
 13751                        	.sym	TASK,0,10,14,48,13
 13752                        	.sym	PIRQDATA,0,138,14,32,12
 13753                        	.sym	IRQDATA,0,10,14,48,12
 13754                        	.sym	HMENU,0,129,14,32
 13755                        	.sym	HWND,0,129,14,32
 13756                        	.sym	MSGDATA,0,14,14,8
 13757                        	.sym	MSGDEST,0,18,14,32
 13758                        	.sym	MSGSRC,0,18,14,32
 13759                        	.sym	MSGTYPE,0,16,14,16
  Thu Dec  3 2020 22:25                                                Page 261


 13760                        	.sym	PROCESS_RESOURCE_LIST,0,138,14,32,6
 13761                        	.sym	PROCESS_TLS_LIST,0,138,14,32,6
 13762                        	.sym	SEMAPHORE_LIST,0,138,14,32,6
 13763                        	.sym	FILE_BLOCK_LIST,0,138,14,32,6
 13764                        	.sym	FILE_PATH_LIST,0,138,14,32,6
 13765                        	.sym	PROCEDURE_LIST,0,138,14,32,6
 13766                        	.sym	FILE_HANDLE,0,138,14,32,11
 13767                        	.sym	FILE_BLOCK,0,10,14,552,11
 13768                        	.sym	SEMAPHORE,0,10,14,16,10
 13769                        	.sym	PPROCESS_SIGNAL,0,138,14,32,9
 13770                        	.sym	PROCESS_SIGNAL,0,10,14,16,9
 13771                        	.sym	KRESULT,0,18,14,32
 13772                        	.sym	PKERNEL_ERROR,0,138,14,32,8
 13773                        	.sym	KERNEL_ERROR,0,10,14,32,8
 13774                        	.sym	PROCESS_STATUS,0,16,14,16
 13775                        	.sym	FILE_PATH_NAME,0,142,14,32
 13776                        	.sym	PROCESS_RESOURCE,0,129,14,32
 13777                        	.sym	PROCESS_TLS,0,129,14,32
 13778                        	.sym	PROCESS_CTX,0,129,14,32
 13779                        	.sym	USERID,0,16,14,16
 13780                        	.sym	PROCESS_ID,0,18,14,32
 13781                        	.sym	PROCESS_BANK,0,14,14,8
 13782                        	.sym	PFXQUEUE,0,138,14,32,7
 13783                        	.sym	FXQUEUE,0,10,14,80,7
 13784                        	.sym	PFXNODELIST,0,138,14,32,6
 13785                        	.sym	FXNODELIST,0,10,14,96,6
 13786                        	.sym	NodeListDeallocator,0,641,14,32
 13787                        	.sym	PFXNODE,0,138,14,32,5
 13788                        	.sym	FXNODE,0,10,14,384,5
 13789                        	.sym	PBYTEBITS,0,138,14,32,4
 13790                        	.sym	BYTEBITS,0,10,14,8,4
 13791                        	.sym	HCOLOR,0,129,14,32
 13792                        	.sym	HFONT,0,129,14,32
 13793                        	.sym	HDC,0,129,14,32
 13794                        	.sym	HPOINTER,0,129,14,32
 13795                        	.sym	uint32_t,0,18,14,32
 13796                        	.sym	uint8_t,0,14,14,8
 13797                        	.sym	PFAR,0,142,14,32
 13798                        	.sym	LPBOOL,0,142,14,32
 13799                        	.sym	BOOL,0,14,14,8
 13800                        	.sym	DWORD,0,18,14,32
 13801                        	.sym	ULONG,0,18,14,32
 13802                        	.sym	LPLONG,0,135,14,32
 13803                        	.sym	LONG,0,7,14,32
 13804                        	.sym	PUINT,0,144,14,32
 13805                        	.sym	USHORT,0,16,14,16
 13806                        	.sym	UINT,0,16,14,16
 13807                        	.sym	INT,0,5,14,16
 13808                        	.sym	WORD,0,5,14,16
 13809                        	.sym	PBYTE,0,142,14,32
 13810                        	.sym	BYTE,0,14,14,8
 13811                        	.sym	UCHAR,0,14,14,8
 13812                        	.sym	LPWCSTR,0,142,14,32
 13813                        	.sym	LPCSTR,0,142,14,32
 13814                        	.sym	LPSTR,0,142,14,32
 13815                        	.sym	LPCHAR,0,142,14,32
 13816                        	.sym	CHAR,0,14,14,8
 13817                        	.sym	LPVOID,0,129,14,32
  Thu Dec  3 2020 22:25                                                Page 262


 13818                        	.sym	VOID,0,1,14,32
 13819                        	.sym	Boolean_T,0,5,14,16
 13820                        	.sym	ldiv_t,0,10,14,64,2
 13821                        	.sym	div_t,0,10,14,32,1
 13822                        	.sym	wctype_t,0,16,14,16
 13823                        	.sym	wint_t,0,16,14,16
 13824                        	.sym	wchar_t,0,14,14,8
 13825                        	.sym	ptrdiff_t,0,7,14,32
 13826                        	.sym	size_t,0,16,14,16
 13827                        	end


      Lines assembled: 13827
      Errors: 0
